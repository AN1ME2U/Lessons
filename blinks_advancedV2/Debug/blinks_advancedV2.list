
blinks_advancedV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001db4  08001db4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001db4  08001db4  00011db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dbc  08001dbc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dbc  08001dbc  00011dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dc0  08001dc0  00011dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000024  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004107  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f0f  00000000  00000000  00024147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000420  00000000  00000000  00025058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000398  00000000  00000000  00025478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef61  00000000  00000000  00025810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004b94  00000000  00000000  00044771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc558  00000000  00000000  00049305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010585d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ebc  00000000  00000000  001058b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d8c 	.word	0x08001d8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001d8c 	.word	0x08001d8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc5a 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f82a 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f892 	bl	80005f4 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(pass !=1);
 80004d0:	bf00      	nop
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <main+0x58>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d1fb      	bne.n	80004d2 <main+0x12>
	  switch(mode){
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <main+0x5c>)
 80004dc:	f993 3000 	ldrsb.w	r3, [r3]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d8f5      	bhi.n	80004d0 <main+0x10>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <main+0x2c>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	080004fd 	.word	0x080004fd
 80004f0:	08000503 	.word	0x08000503
 80004f4:	08000509 	.word	0x08000509
 80004f8:	0800050f 	.word	0x0800050f
	  case 0:
		  mode_1();
 80004fc:	f000 f9f6 	bl	80008ec <mode_1>
		  break;
 8000500:	e008      	b.n	8000514 <main+0x54>
	  case 1:
		  mode_2();
 8000502:	f000 fa0f 	bl	8000924 <mode_2>
		  break;
 8000506:	e005      	b.n	8000514 <main+0x54>
	  case 2:
		  mode_3();
 8000508:	f000 fa2e 	bl	8000968 <mode_3>
		  break;
 800050c:	e002      	b.n	8000514 <main+0x54>
	  case 3:
		  mode_4();
 800050e:	f000 faa3 	bl	8000a58 <mode_4>
		  break;
 8000512:	bf00      	nop
	  while(pass !=1);
 8000514:	e7dc      	b.n	80004d0 <main+0x10>
 8000516:	bf00      	nop
 8000518:	2000002d 	.word	0x2000002d
 800051c:	2000002c 	.word	0x2000002c

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fc24 	bl	8001d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 ff85 	bl	80014b4 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 faca 	bl	8000b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f9e6 	bl	80019a4 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 fab3 	bl	8000b48 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	4bb1      	ldr	r3, [pc, #708]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4ab0      	ldr	r2, [pc, #704]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000614:	f043 0310 	orr.w	r3, r3, #16
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4bae      	ldr	r3, [pc, #696]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	4baa      	ldr	r3, [pc, #680]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4aa9      	ldr	r2, [pc, #676]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4ba7      	ldr	r3, [pc, #668]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4ba3      	ldr	r3, [pc, #652]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4aa2      	ldr	r2, [pc, #648]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4ba0      	ldr	r3, [pc, #640]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b9c      	ldr	r3, [pc, #624]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a9b      	ldr	r2, [pc, #620]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b99      	ldr	r3, [pc, #612]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b95      	ldr	r3, [pc, #596]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a94      	ldr	r2, [pc, #592]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b92      	ldr	r3, [pc, #584]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b8e      	ldr	r3, [pc, #568]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a8d      	ldr	r2, [pc, #564]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b8b      	ldr	r3, [pc, #556]	; (80008d4 <MX_GPIO_Init+0x2e0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4888      	ldr	r0, [pc, #544]	; (80008d8 <MX_GPIO_Init+0x2e4>)
 80006b8:	f000 fea4 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	4886      	ldr	r0, [pc, #536]	; (80008dc <MX_GPIO_Init+0x2e8>)
 80006c2:	f000 fe9f 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006c6:	2200      	movs	r2, #0
 80006c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80006cc:	4884      	ldr	r0, [pc, #528]	; (80008e0 <MX_GPIO_Init+0x2ec>)
 80006ce:	f000 fe99 	bl	8001404 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006d2:	2308      	movs	r3, #8
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	487b      	ldr	r0, [pc, #492]	; (80008d8 <MX_GPIO_Init+0x2e4>)
 80006ea:	f000 fcef 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	4875      	ldr	r0, [pc, #468]	; (80008dc <MX_GPIO_Init+0x2e8>)
 8000706:	f000 fce1 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800070a:	2308      	movs	r3, #8
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800071a:	2305      	movs	r3, #5
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	486d      	ldr	r0, [pc, #436]	; (80008dc <MX_GPIO_Init+0x2e8>)
 8000726:	f000 fcd1 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin SWT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|SWT2_Pin;
 800072a:	f248 0301 	movw	r3, #32769	; 0x8001
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000730:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4868      	ldr	r0, [pc, #416]	; (80008e4 <MX_GPIO_Init+0x2f0>)
 8000742:	f000 fcc3 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000746:	2310      	movs	r3, #16
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000756:	2306      	movs	r3, #6
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4860      	ldr	r0, [pc, #384]	; (80008e4 <MX_GPIO_Init+0x2f0>)
 8000762:	f000 fcb3 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000766:	23e0      	movs	r3, #224	; 0xe0
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000776:	2305      	movs	r3, #5
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	4858      	ldr	r0, [pc, #352]	; (80008e4 <MX_GPIO_Init+0x2f0>)
 8000782:	f000 fca3 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000786:	2304      	movs	r3, #4
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4853      	ldr	r0, [pc, #332]	; (80008e8 <MX_GPIO_Init+0x2f4>)
 800079a:	f000 fc97 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007b0:	2305      	movs	r3, #5
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	484b      	ldr	r0, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x2f4>)
 80007bc:	f000 fc86 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007c4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4841      	ldr	r0, [pc, #260]	; (80008e0 <MX_GPIO_Init+0x2ec>)
 80007da:	f000 fc77 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWT4_Pin SWT5_Pin SWT3_Pin SWT1_Pin */
  GPIO_InitStruct.Pin = SWT4_Pin|SWT5_Pin|SWT3_Pin|SWT1_Pin;
 80007de:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4839      	ldr	r0, [pc, #228]	; (80008dc <MX_GPIO_Init+0x2e8>)
 80007f6:	f000 fc69 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80007fa:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800080c:	2306      	movs	r3, #6
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4831      	ldr	r0, [pc, #196]	; (80008dc <MX_GPIO_Init+0x2e8>)
 8000818:	f000 fc58 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800081c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	482c      	ldr	r0, [pc, #176]	; (80008e4 <MX_GPIO_Init+0x2f0>)
 8000832:	f000 fc4b 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000836:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000848:	230a      	movs	r3, #10
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4824      	ldr	r0, [pc, #144]	; (80008e4 <MX_GPIO_Init+0x2f0>)
 8000854:	f000 fc3a 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	481d      	ldr	r0, [pc, #116]	; (80008e0 <MX_GPIO_Init+0x2ec>)
 800086c:	f000 fc2e 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000870:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000876:	2312      	movs	r3, #18
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000882:	2304      	movs	r3, #4
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4816      	ldr	r0, [pc, #88]	; (80008e8 <MX_GPIO_Init+0x2f4>)
 800088e:	f000 fc1d 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000892:	2302      	movs	r3, #2
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000896:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_GPIO_Init+0x2e4>)
 80008a8:	f000 fc10 	bl	80010cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2017      	movs	r0, #23
 80008b2:	f000 fbd4 	bl	800105e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008b6:	2017      	movs	r0, #23
 80008b8:	f000 fbed 	bl	8001096 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2028      	movs	r0, #40	; 0x28
 80008c2:	f000 fbcc 	bl	800105e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008c6:	2028      	movs	r0, #40	; 0x28
 80008c8:	f000 fbe5 	bl	8001096 <HAL_NVIC_EnableIRQ>

}
 80008cc:	bf00      	nop
 80008ce:	3730      	adds	r7, #48	; 0x30
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020400 	.word	0x40020400

080008ec <mode_1>:

/* USER CODE BEGIN 4 */
void mode_1(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 80008f0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <mode_1+0x30>)
 80008f6:	f000 fd9e 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay);
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <mode_1+0x34>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 faae 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8000904:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <mode_1+0x30>)
 800090a:	f000 fd94 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay);
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <mode_1+0x34>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f000 faa4 	bl	8000e60 <HAL_Delay>

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020c00 	.word	0x40020c00
 8000920:	20000000 	.word	0x20000000

08000924 <mode_2>:
void mode_2(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12| GPIO_PIN_14);
 8000928:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <mode_2+0x3c>)
 800092e:	f000 fd82 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay);
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <mode_2+0x40>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fa92 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800093c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <mode_2+0x3c>)
 8000942:	f000 fd78 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay);
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <mode_2+0x40>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fa88 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13| GPIO_PIN_15);
 8000950:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <mode_2+0x3c>)
 8000956:	f000 fd6e 	bl	8001436 <HAL_GPIO_TogglePin>

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40020c00 	.word	0x40020c00
 8000964:	20000000 	.word	0x20000000

08000968 <mode_3>:
void mode_3(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800096c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000970:	4837      	ldr	r0, [pc, #220]	; (8000a50 <mode_3+0xe8>)
 8000972:	f000 fd60 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <mode_3+0xec>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	da00      	bge.n	8000980 <mode_3+0x18>
 800097e:	3307      	adds	r3, #7
 8000980:	10db      	asrs	r3, r3, #3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fa6c 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	4830      	ldr	r0, [pc, #192]	; (8000a50 <mode_3+0xe8>)
 800098e:	f000 fd52 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <mode_3+0xec>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da00      	bge.n	800099c <mode_3+0x34>
 800099a:	3307      	adds	r3, #7
 800099c:	10db      	asrs	r3, r3, #3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fa5e 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80009a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a8:	4829      	ldr	r0, [pc, #164]	; (8000a50 <mode_3+0xe8>)
 80009aa:	f000 fd44 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <mode_3+0xec>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da00      	bge.n	80009b8 <mode_3+0x50>
 80009b6:	3307      	adds	r3, #7
 80009b8:	10db      	asrs	r3, r3, #3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fa50 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80009c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c4:	4822      	ldr	r0, [pc, #136]	; (8000a50 <mode_3+0xe8>)
 80009c6:	f000 fd36 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <mode_3+0xec>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da00      	bge.n	80009d4 <mode_3+0x6c>
 80009d2:	3307      	adds	r3, #7
 80009d4:	10db      	asrs	r3, r3, #3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fa42 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e0:	481b      	ldr	r0, [pc, #108]	; (8000a50 <mode_3+0xe8>)
 80009e2:	f000 fd28 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <mode_3+0xec>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	da00      	bge.n	80009f0 <mode_3+0x88>
 80009ee:	3307      	adds	r3, #7
 80009f0:	10db      	asrs	r3, r3, #3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fa34 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	4814      	ldr	r0, [pc, #80]	; (8000a50 <mode_3+0xe8>)
 80009fe:	f000 fd1a 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <mode_3+0xec>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da00      	bge.n	8000a0c <mode_3+0xa4>
 8000a0a:	3307      	adds	r3, #7
 8000a0c:	10db      	asrs	r3, r3, #3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fa26 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <mode_3+0xe8>)
 8000a1a:	f000 fd0c 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <mode_3+0xec>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da00      	bge.n	8000a28 <mode_3+0xc0>
 8000a26:	3307      	adds	r3, #7
 8000a28:	10db      	asrs	r3, r3, #3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fa18 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <mode_3+0xe8>)
 8000a36:	f000 fcfe 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <mode_3+0xec>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	da00      	bge.n	8000a44 <mode_3+0xdc>
 8000a42:	3307      	adds	r3, #7
 8000a44:	10db      	asrs	r3, r3, #3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fa0a 	bl	8000e60 <HAL_Delay>

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40020c00 	.word	0x40020c00
 8000a54:	20000000 	.word	0x20000000

08000a58 <mode_4>:
void mode_4(void){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a60:	4837      	ldr	r0, [pc, #220]	; (8000b40 <mode_4+0xe8>)
 8000a62:	f000 fce8 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000a66:	4b37      	ldr	r3, [pc, #220]	; (8000b44 <mode_4+0xec>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da00      	bge.n	8000a70 <mode_4+0x18>
 8000a6e:	3307      	adds	r3, #7
 8000a70:	10db      	asrs	r3, r3, #3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f9f4 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4830      	ldr	r0, [pc, #192]	; (8000b40 <mode_4+0xe8>)
 8000a7e:	f000 fcda 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <mode_4+0xec>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da00      	bge.n	8000a8c <mode_4+0x34>
 8000a8a:	3307      	adds	r3, #7
 8000a8c:	10db      	asrs	r3, r3, #3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f9e6 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a98:	4829      	ldr	r0, [pc, #164]	; (8000b40 <mode_4+0xe8>)
 8000a9a:	f000 fccc 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <mode_4+0xec>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da00      	bge.n	8000aa8 <mode_4+0x50>
 8000aa6:	3307      	adds	r3, #7
 8000aa8:	10db      	asrs	r3, r3, #3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f9d8 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab4:	4822      	ldr	r0, [pc, #136]	; (8000b40 <mode_4+0xe8>)
 8000ab6:	f000 fcbe 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <mode_4+0xec>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	da00      	bge.n	8000ac4 <mode_4+0x6c>
 8000ac2:	3307      	adds	r3, #7
 8000ac4:	10db      	asrs	r3, r3, #3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f9ca 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad0:	481b      	ldr	r0, [pc, #108]	; (8000b40 <mode_4+0xe8>)
 8000ad2:	f000 fcb0 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <mode_4+0xec>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da00      	bge.n	8000ae0 <mode_4+0x88>
 8000ade:	3307      	adds	r3, #7
 8000ae0:	10db      	asrs	r3, r3, #3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f9bc 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	4814      	ldr	r0, [pc, #80]	; (8000b40 <mode_4+0xe8>)
 8000aee:	f000 fca2 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <mode_4+0xec>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da00      	bge.n	8000afc <mode_4+0xa4>
 8000afa:	3307      	adds	r3, #7
 8000afc:	10db      	asrs	r3, r3, #3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f9ae 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <mode_4+0xe8>)
 8000b0a:	f000 fc94 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <mode_4+0xec>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da00      	bge.n	8000b18 <mode_4+0xc0>
 8000b16:	3307      	adds	r3, #7
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f9a0 	bl	8000e60 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <mode_4+0xe8>)
 8000b26:	f000 fc86 	bl	8001436 <HAL_GPIO_TogglePin>
	HAL_Delay(delay/8);
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <mode_4+0xec>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	da00      	bge.n	8000b34 <mode_4+0xdc>
 8000b32:	3307      	adds	r3, #7
 8000b34:	10db      	asrs	r3, r3, #3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f992 	bl	8000e60 <HAL_Delay>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	20000000 	.word	0x20000000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 fa58 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f916 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(EXTI->PR & EXTI_PR_PR6){
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <EXTI9_5_IRQHandler+0x84>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d004      	beq.n	8000c12 <EXTI9_5_IRQHandler+0x1a>
		delay += 50;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <EXTI9_5_IRQHandler+0x88>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3332      	adds	r3, #50	; 0x32
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	; (8000c80 <EXTI9_5_IRQHandler+0x88>)
 8000c10:	6013      	str	r3, [r2, #0]
	}
	if(EXTI->PR & EXTI_PR_PR8){
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <EXTI9_5_IRQHandler+0x84>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00a      	beq.n	8000c34 <EXTI9_5_IRQHandler+0x3c>
		delay -= 50;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <EXTI9_5_IRQHandler+0x88>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3b32      	subs	r3, #50	; 0x32
 8000c24:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <EXTI9_5_IRQHandler+0x88>)
 8000c26:	6013      	str	r3, [r2, #0]
		delay = (delay < 0)?0:delay;																//Чтоб задержка не ушла в минус
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <EXTI9_5_IRQHandler+0x88>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <EXTI9_5_IRQHandler+0x88>)
 8000c32:	6013      	str	r3, [r2, #0]

	}
	if(EXTI->PR & EXTI_PR_PR9){																		//Выбор предыдущего режима
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <EXTI9_5_IRQHandler+0x84>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d010      	beq.n	8000c62 <EXTI9_5_IRQHandler+0x6a>
		mode--;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <EXTI9_5_IRQHandler+0x8c>)
 8000c42:	f993 3000 	ldrsb.w	r3, [r3]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <EXTI9_5_IRQHandler+0x8c>)
 8000c50:	701a      	strb	r2, [r3, #0]
		mode = (mode < 0)?0:mode;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <EXTI9_5_IRQHandler+0x8c>)
 8000c54:	f993 3000 	ldrsb.w	r3, [r3]
 8000c58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000c5c:	b25a      	sxtb	r2, r3
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <EXTI9_5_IRQHandler+0x8c>)
 8000c60:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c62:	2040      	movs	r0, #64	; 0x40
 8000c64:	f000 fc02 	bl	800146c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c6c:	f000 fbfe 	bl	800146c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000c70:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c74:	f000 fbfa 	bl	800146c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40013c00 	.word	0x40013c00
 8000c80:	20000000 	.word	0x20000000
 8000c84:	2000002c 	.word	0x2000002c

08000c88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(EXTI->PR & EXTI_PR_PR11){																	//Выбор следующего режима
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <EXTI15_10_IRQHandler+0x70>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d014      	beq.n	8000cc2 <EXTI15_10_IRQHandler+0x3a>
		mode++;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <EXTI15_10_IRQHandler+0x74>)
 8000c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <EXTI15_10_IRQHandler+0x74>)
 8000ca8:	701a      	strb	r2, [r3, #0]
		mode = (mode == 4)?3:mode;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <EXTI15_10_IRQHandler+0x74>)
 8000cac:	f993 3000 	ldrsb.w	r3, [r3]
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d003      	beq.n	8000cbc <EXTI15_10_IRQHandler+0x34>
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <EXTI15_10_IRQHandler+0x74>)
 8000cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8000cba:	e000      	b.n	8000cbe <EXTI15_10_IRQHandler+0x36>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <EXTI15_10_IRQHandler+0x74>)
 8000cc0:	7013      	strb	r3, [r2, #0]
	}
	if(EXTI->PR & EXTI_PR_PR15){
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <EXTI15_10_IRQHandler+0x70>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d009      	beq.n	8000ce2 <EXTI15_10_IRQHandler+0x5a>
		pass = (pass == 0)?1:0;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <EXTI15_10_IRQHandler+0x78>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf0c      	ite	eq
 8000cd6:	2301      	moveq	r3, #1
 8000cd8:	2300      	movne	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <EXTI15_10_IRQHandler+0x78>)
 8000ce0:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000ce2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ce6:	f000 fbc1 	bl	800146c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000cea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000cee:	f000 fbbd 	bl	800146c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40013c00 	.word	0x40013c00
 8000cfc:	2000002c 	.word	0x2000002c
 8000d00:	2000002d 	.word	0x2000002d

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f000 ffed 	bl	8001d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fbb1 	bl	80004c0 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d6c:	08001dc4 	.word	0x08001dc4
  ldr r2, =_sbss
 8000d70:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d74:	20000034 	.word	0x20000034

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f94f 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fed0 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f967 	bl	80010b2 <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f92f 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000004 	.word	0x20000004
 8000e18:	2000000c 	.word	0x2000000c
 8000e1c:	20000008 	.word	0x20000008

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000000c 	.word	0x2000000c
 8000e44:	20000030 	.word	0x20000030

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000030 	.word	0x20000030

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff29 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff3e 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff31 	bl	8000f0c <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	e16b      	b.n	80013c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 815a 	bne.w	80013ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d005      	beq.n	800111e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111a:	2b02      	cmp	r3, #2
 800111c:	d130      	bne.n	8001180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0201 	and.w	r2, r3, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b03      	cmp	r3, #3
 800118a:	d017      	beq.n	80011bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d123      	bne.n	8001210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	69b9      	ldr	r1, [r7, #24]
 800120c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0203 	and.w	r2, r3, #3
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80b4 	beq.w	80013ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b60      	ldr	r3, [pc, #384]	; (80013d8 <HAL_GPIO_Init+0x30c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a5f      	ldr	r2, [pc, #380]	; (80013d8 <HAL_GPIO_Init+0x30c>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <HAL_GPIO_Init+0x30c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126e:	4a5b      	ldr	r2, [pc, #364]	; (80013dc <HAL_GPIO_Init+0x310>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <HAL_GPIO_Init+0x314>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d02b      	beq.n	80012f2 <HAL_GPIO_Init+0x226>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a51      	ldr	r2, [pc, #324]	; (80013e4 <HAL_GPIO_Init+0x318>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d025      	beq.n	80012ee <HAL_GPIO_Init+0x222>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a50      	ldr	r2, [pc, #320]	; (80013e8 <HAL_GPIO_Init+0x31c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01f      	beq.n	80012ea <HAL_GPIO_Init+0x21e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4f      	ldr	r2, [pc, #316]	; (80013ec <HAL_GPIO_Init+0x320>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x21a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4e      	ldr	r2, [pc, #312]	; (80013f0 <HAL_GPIO_Init+0x324>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x216>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <HAL_GPIO_Init+0x328>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x212>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4c      	ldr	r2, [pc, #304]	; (80013f8 <HAL_GPIO_Init+0x32c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x20e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <HAL_GPIO_Init+0x330>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x20a>
 80012d2:	2307      	movs	r3, #7
 80012d4:	e00e      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012d6:	2308      	movs	r3, #8
 80012d8:	e00c      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012da:	2306      	movs	r3, #6
 80012dc:	e00a      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012de:	2305      	movs	r3, #5
 80012e0:	e008      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e004      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_GPIO_Init+0x228>
 80012f2:	2300      	movs	r3, #0
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	f002 0203 	and.w	r2, r2, #3
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	4093      	lsls	r3, r2
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001304:	4935      	ldr	r1, [pc, #212]	; (80013dc <HAL_GPIO_Init+0x310>)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001336:	4a32      	ldr	r2, [pc, #200]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800133c:	4b30      	ldr	r3, [pc, #192]	; (8001400 <HAL_GPIO_Init+0x334>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <HAL_GPIO_Init+0x334>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_GPIO_Init+0x334>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a12      	ldr	r2, [pc, #72]	; (8001400 <HAL_GPIO_Init+0x334>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3301      	adds	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	2b0f      	cmp	r3, #15
 80013c4:	f67f ae90 	bls.w	80010e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40013800 	.word	0x40013800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40021400 	.word	0x40021400
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40021c00 	.word	0x40021c00
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001448:	887a      	ldrh	r2, [r7, #2]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	041a      	lsls	r2, r3, #16
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43d9      	mvns	r1, r3
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	400b      	ands	r3, r1
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f806 	bl	800149c <HAL_GPIO_EXTI_Callback>
  }
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40013c00 	.word	0x40013c00

0800149c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e264      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d075      	beq.n	80015be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	4ba3      	ldr	r3, [pc, #652]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d00c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4ba0      	ldr	r3, [pc, #640]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d112      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b9d      	ldr	r3, [pc, #628]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b99      	ldr	r3, [pc, #612]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05b      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d157      	bne.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e23f      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x74>
 800151a:	4b91      	ldr	r3, [pc, #580]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a90      	ldr	r2, [pc, #576]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b8b      	ldr	r3, [pc, #556]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a8a      	ldr	r2, [pc, #552]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b88      	ldr	r3, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a87      	ldr	r2, [pc, #540]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 800154c:	4b84      	ldr	r3, [pc, #528]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a83      	ldr	r2, [pc, #524]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b81      	ldr	r3, [pc, #516]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a80      	ldr	r2, [pc, #512]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fc6c 	bl	8000e48 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fc68 	bl	8000e48 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e204      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xc0>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fc58 	bl	8000e48 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fc54 	bl	8000e48 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1f0      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b6c      	ldr	r3, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	4b65      	ldr	r3, [pc, #404]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b62      	ldr	r3, [pc, #392]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c4      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b56      	ldr	r3, [pc, #344]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4952      	ldr	r1, [pc, #328]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b4f      	ldr	r3, [pc, #316]	; (8001764 <HAL_RCC_OscConfig+0x2b0>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fc0d 	bl	8000e48 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fc09 	bl	8000e48 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a5      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4940      	ldr	r1, [pc, #256]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <HAL_RCC_OscConfig+0x2b0>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fbec 	bl	8000e48 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff fbe8 	bl	8000e48 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e184      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b36      	ldr	r3, [pc, #216]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d030      	beq.n	8001700 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d016      	beq.n	80016d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_RCC_OscConfig+0x2b4>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fbcc 	bl	8000e48 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fbc8 	bl	8000e48 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e164      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x200>
 80016d2:	e015      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_RCC_OscConfig+0x2b4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fbb5 	bl	8000e48 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fbb1 	bl	8000e48 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e14d      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80a0 	beq.w	800184e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173a:	2301      	movs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x2b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001746:	2b00      	cmp	r3, #0
 8001748:	d121      	bne.n	800178e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_RCC_OscConfig+0x2b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_RCC_OscConfig+0x2b8>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001756:	f7ff fb77 	bl	8000e48 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175c:	e011      	b.n	8001782 <HAL_RCC_OscConfig+0x2ce>
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	42470000 	.word	0x42470000
 8001768:	42470e80 	.word	0x42470e80
 800176c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001770:	f7ff fb6a 	bl	8000e48 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e106      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b85      	ldr	r3, [pc, #532]	; (8001998 <HAL_RCC_OscConfig+0x4e4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2f0>
 8001796:	4b81      	ldr	r3, [pc, #516]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a80      	ldr	r2, [pc, #512]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
 80017a2:	e01c      	b.n	80017de <HAL_RCC_OscConfig+0x32a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x312>
 80017ac:	4b7b      	ldr	r3, [pc, #492]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	4a7a      	ldr	r2, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6713      	str	r3, [r2, #112]	; 0x70
 80017b8:	4b78      	ldr	r3, [pc, #480]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017bc:	4a77      	ldr	r2, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6713      	str	r3, [r2, #112]	; 0x70
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0x32a>
 80017c6:	4b75      	ldr	r3, [pc, #468]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	4a74      	ldr	r2, [pc, #464]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70
 80017d2:	4b72      	ldr	r3, [pc, #456]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	4a71      	ldr	r2, [pc, #452]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d015      	beq.n	8001812 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb2f 	bl	8000e48 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb2b 	bl	8000e48 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0c5      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	4b65      	ldr	r3, [pc, #404]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ee      	beq.n	80017ee <HAL_RCC_OscConfig+0x33a>
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb19 	bl	8000e48 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb15 	bl	8000e48 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e0af      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	4b5a      	ldr	r3, [pc, #360]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ee      	bne.n	800181a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d105      	bne.n	800184e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 8001848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 809b 	beq.w	800198e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d05c      	beq.n	800191e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d141      	bne.n	80018f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fae9 	bl	8000e48 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fae5 	bl	8000e48 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e081      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188c:	4b43      	ldr	r3, [pc, #268]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69da      	ldr	r2, [r3, #28]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	019b      	lsls	r3, r3, #6
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	3b01      	subs	r3, #1
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	061b      	lsls	r3, r3, #24
 80018bc:	4937      	ldr	r1, [pc, #220]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fabe 	bl	8000e48 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff faba 	bl	8000e48 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e056      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x41c>
 80018ee:	e04e      	b.n	800198e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff faa7 	bl	8000e48 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff faa3 	bl	8000e48 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e03f      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x44a>
 800191c:	e037      	b.n	800198e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e032      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800192a:	4b1c      	ldr	r3, [pc, #112]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d028      	beq.n	800198a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d121      	bne.n	800198a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d11a      	bne.n	800198a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800195a:	4013      	ands	r3, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001960:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001962:	4293      	cmp	r3, r2
 8001964:	d111      	bne.n	800198a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	085b      	lsrs	r3, r3, #1
 8001972:	3b01      	subs	r3, #1
 8001974:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d107      	bne.n	800198a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40007000 	.word	0x40007000
 800199c:	40023800 	.word	0x40023800
 80019a0:	42470060 	.word	0x42470060

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cc      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90c      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d044      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e067      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4934      	ldr	r1, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff f9d8 	bl	8000e48 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff f9d4 	bl	8000e48 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f938 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08001da4 	.word	0x08001da4
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	20000008 	.word	0x20000008

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	2300      	movs	r3, #0
 8001b82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b88:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d00d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80bd 	bhi.w	8001d14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba2:	e0b7      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ba6:	60bb      	str	r3, [r7, #8]
       break;
 8001ba8:	e0b7      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001bac:	60bb      	str	r3, [r7, #8]
      break;
 8001bae:	e0b4      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b5b      	ldr	r3, [pc, #364]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04d      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	ea02 0800 	and.w	r8, r2, r0
 8001bde:	ea03 0901 	and.w	r9, r3, r1
 8001be2:	4640      	mov	r0, r8
 8001be4:	4649      	mov	r1, r9
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	014b      	lsls	r3, r1, #5
 8001bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf4:	0142      	lsls	r2, r0, #5
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	ebb0 0008 	subs.w	r0, r0, r8
 8001bfe:	eb61 0109 	sbc.w	r1, r1, r9
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	018b      	lsls	r3, r1, #6
 8001c0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c10:	0182      	lsls	r2, r0, #6
 8001c12:	1a12      	subs	r2, r2, r0
 8001c14:	eb63 0301 	sbc.w	r3, r3, r1
 8001c18:	f04f 0000 	mov.w	r0, #0
 8001c1c:	f04f 0100 	mov.w	r1, #0
 8001c20:	00d9      	lsls	r1, r3, #3
 8001c22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c26:	00d0      	lsls	r0, r2, #3
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	eb12 0208 	adds.w	r2, r2, r8
 8001c30:	eb43 0309 	adc.w	r3, r3, r9
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	f04f 0100 	mov.w	r1, #0
 8001c3c:	0259      	lsls	r1, r3, #9
 8001c3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c42:	0250      	lsls	r0, r2, #9
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	f7fe fab8 	bl	80001c8 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	e04a      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	099b      	lsrs	r3, r3, #6
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	ea02 0400 	and.w	r4, r2, r0
 8001c7a:	ea03 0501 	and.w	r5, r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	014b      	lsls	r3, r1, #5
 8001c8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c90:	0142      	lsls	r2, r0, #5
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	1b00      	subs	r0, r0, r4
 8001c98:	eb61 0105 	sbc.w	r1, r1, r5
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	018b      	lsls	r3, r1, #6
 8001ca6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001caa:	0182      	lsls	r2, r0, #6
 8001cac:	1a12      	subs	r2, r2, r0
 8001cae:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	00d9      	lsls	r1, r3, #3
 8001cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cc0:	00d0      	lsls	r0, r2, #3
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	1912      	adds	r2, r2, r4
 8001cc8:	eb45 0303 	adc.w	r3, r5, r3
 8001ccc:	f04f 0000 	mov.w	r0, #0
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	0299      	lsls	r1, r3, #10
 8001cd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cda:	0290      	lsls	r0, r2, #10
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	f7fe fa6c 	bl	80001c8 <__aeabi_uldivmod>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	0c1b      	lsrs	r3, r3, #16
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	3301      	adds	r3, #1
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	60bb      	str	r3, [r7, #8]
      break;
 8001d12:	e002      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d16:	60bb      	str	r3, [r7, #8]
      break;
 8001d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	007a1200 	.word	0x007a1200

08001d34 <__libc_init_array>:
 8001d34:	b570      	push	{r4, r5, r6, lr}
 8001d36:	4d0d      	ldr	r5, [pc, #52]	; (8001d6c <__libc_init_array+0x38>)
 8001d38:	4c0d      	ldr	r4, [pc, #52]	; (8001d70 <__libc_init_array+0x3c>)
 8001d3a:	1b64      	subs	r4, r4, r5
 8001d3c:	10a4      	asrs	r4, r4, #2
 8001d3e:	2600      	movs	r6, #0
 8001d40:	42a6      	cmp	r6, r4
 8001d42:	d109      	bne.n	8001d58 <__libc_init_array+0x24>
 8001d44:	4d0b      	ldr	r5, [pc, #44]	; (8001d74 <__libc_init_array+0x40>)
 8001d46:	4c0c      	ldr	r4, [pc, #48]	; (8001d78 <__libc_init_array+0x44>)
 8001d48:	f000 f820 	bl	8001d8c <_init>
 8001d4c:	1b64      	subs	r4, r4, r5
 8001d4e:	10a4      	asrs	r4, r4, #2
 8001d50:	2600      	movs	r6, #0
 8001d52:	42a6      	cmp	r6, r4
 8001d54:	d105      	bne.n	8001d62 <__libc_init_array+0x2e>
 8001d56:	bd70      	pop	{r4, r5, r6, pc}
 8001d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d5c:	4798      	blx	r3
 8001d5e:	3601      	adds	r6, #1
 8001d60:	e7ee      	b.n	8001d40 <__libc_init_array+0xc>
 8001d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d66:	4798      	blx	r3
 8001d68:	3601      	adds	r6, #1
 8001d6a:	e7f2      	b.n	8001d52 <__libc_init_array+0x1e>
 8001d6c:	08001dbc 	.word	0x08001dbc
 8001d70:	08001dbc 	.word	0x08001dbc
 8001d74:	08001dbc 	.word	0x08001dbc
 8001d78:	08001dc0 	.word	0x08001dc0

08001d7c <memset>:
 8001d7c:	4402      	add	r2, r0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d100      	bne.n	8001d86 <memset+0xa>
 8001d84:	4770      	bx	lr
 8001d86:	f803 1b01 	strb.w	r1, [r3], #1
 8001d8a:	e7f9      	b.n	8001d80 <memset+0x4>

08001d8c <_init>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr

08001d98 <_fini>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr
