
LED driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006880  08006880  00016880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800692c  0800692c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006934  08006934  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800693c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          0000013c  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f15e  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021fa  00000000  00000000  0002f2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a58  00000000  00000000  000314d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000998  00000000  00000000  00031f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021360  00000000  00000000  000328c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb22  00000000  00000000  00053c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5669  00000000  00000000  0006274a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127db3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cf8  00000000  00000000  00127e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006868 	.word	0x08006868

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08006868 	.word	0x08006868

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MESSAGE_ANALYZER>:
char MODE = 0;
char RX_ADJ = 0;
char MASK1[3] = {"led"};
char TX[50] = {0};

void MESSAGE_ANALYZER(void){																			//Compare input buffer with example if finds '/'
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	if(RX[0] == '/'){
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MESSAGE_ANALYZER+0x88>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b2f      	cmp	r3, #47	; 0x2f
 8000584:	d12d      	bne.n	80005e2 <MESSAGE_ANALYZER+0x6a>
		for(uint8_t pos = 0; pos < 3; pos++){
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	e011      	b.n	80005b0 <MESSAGE_ANALYZER+0x38>
			if(RX[1+pos] == MASK1[pos]){
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	3301      	adds	r3, #1
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <MESSAGE_ANALYZER+0x88>)
 8000592:	5cd2      	ldrb	r2, [r2, r3]
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	491b      	ldr	r1, [pc, #108]	; (8000604 <MESSAGE_ANALYZER+0x8c>)
 8000598:	5ccb      	ldrb	r3, [r1, r3]
 800059a:	429a      	cmp	r2, r3
 800059c:	d105      	bne.n	80005aa <MESSAGE_ANALYZER+0x32>
				MATCHES++;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MESSAGE_ANALYZER+0x90>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MESSAGE_ANALYZER+0x90>)
 80005a8:	701a      	strb	r2, [r3, #0]
		for(uint8_t pos = 0; pos < 3; pos++){
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	3301      	adds	r3, #1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d9ea      	bls.n	800058c <MESSAGE_ANALYZER+0x14>
			}
		}
		if(MATCHES == 3){
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MESSAGE_ANALYZER+0x90>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d105      	bne.n	80005ca <MESSAGE_ANALYZER+0x52>
			MATCHES = 0;
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MESSAGE_ANALYZER+0x90>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
			HID();
 80005c4:	f000 f826 	bl	8000614 <HID>
			HAL_UART_Transmit(&huart3, (uint8_t *)UNkNOWN_COM, strlen(UNkNOWN_COM), 1000);				//If there is no matches print unknown command mesage
		}
	} else{																								//If there is no '/' print unknown command mesage
		HAL_UART_Transmit(&huart3, (uint8_t *)UNkNOWN_COM, strlen(UNkNOWN_COM), 1000);
	}
}
 80005c8:	e016      	b.n	80005f8 <MESSAGE_ANALYZER+0x80>
			HAL_UART_Transmit(&huart3, (uint8_t *)UNkNOWN_COM, strlen(UNkNOWN_COM), 1000);				//If there is no matches print unknown command mesage
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <MESSAGE_ANALYZER+0x94>)
 80005cc:	f7ff fe00 	bl	80001d0 <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d8:	490c      	ldr	r1, [pc, #48]	; (800060c <MESSAGE_ANALYZER+0x94>)
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <MESSAGE_ANALYZER+0x98>)
 80005dc:	f004 fbe9 	bl	8004db2 <HAL_UART_Transmit>
}
 80005e0:	e00a      	b.n	80005f8 <MESSAGE_ANALYZER+0x80>
		HAL_UART_Transmit(&huart3, (uint8_t *)UNkNOWN_COM, strlen(UNkNOWN_COM), 1000);
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <MESSAGE_ANALYZER+0x94>)
 80005e4:	f7ff fdf4 	bl	80001d0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f0:	4906      	ldr	r1, [pc, #24]	; (800060c <MESSAGE_ANALYZER+0x94>)
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <MESSAGE_ANALYZER+0x98>)
 80005f4:	f004 fbdd 	bl	8004db2 <HAL_UART_Transmit>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200001b0 	.word	0x200001b0
 8000604:	200000c0 	.word	0x200000c0
 8000608:	20000168 	.word	0x20000168
 800060c:	20000000 	.word	0x20000000
 8000610:	20000230 	.word	0x20000230

08000614 <HID>:

void HID(void){																							//Mode selector
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive_IT(&huart3);
 8000618:	4815      	ldr	r0, [pc, #84]	; (8000670 <HID+0x5c>)
 800061a:	f004 fd2f 	bl	800507c <HAL_UART_AbortReceive_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)MESG, strlen(MESG), 1000);
 800061e:	4815      	ldr	r0, [pc, #84]	; (8000674 <HID+0x60>)
 8000620:	f7ff fdd6 	bl	80001d0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062c:	4911      	ldr	r1, [pc, #68]	; (8000674 <HID+0x60>)
 800062e:	4810      	ldr	r0, [pc, #64]	; (8000670 <HID+0x5c>)
 8000630:	f004 fbbf 	bl	8004db2 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)&MODE, 1, 1000);
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	2201      	movs	r2, #1
 800063a:	490f      	ldr	r1, [pc, #60]	; (8000678 <HID+0x64>)
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <HID+0x5c>)
 800063e:	f004 fc4a 	bl	8004ed6 <HAL_UART_Receive>
	if(MODE == '1'){
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HID+0x64>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b31      	cmp	r3, #49	; 0x31
 8000648:	d102      	bne.n	8000650 <HID+0x3c>
		MODE_1();
 800064a:	f000 f817 	bl	800067c <MODE_1>
	}else if (MODE == '3'){
		MODE_3();
	} else {

	}
}
 800064e:	e00c      	b.n	800066a <HID+0x56>
	}else if(MODE == '2'){
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HID+0x64>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b32      	cmp	r3, #50	; 0x32
 8000656:	d102      	bne.n	800065e <HID+0x4a>
		MODE_2();
 8000658:	f000 f8a6 	bl	80007a8 <MODE_2>
}
 800065c:	e005      	b.n	800066a <HID+0x56>
	}else if (MODE == '3'){
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HID+0x64>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b33      	cmp	r3, #51	; 0x33
 8000664:	d101      	bne.n	800066a <HID+0x56>
		MODE_3();
 8000666:	f000 f8ff 	bl	8000868 <MODE_3>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000230 	.word	0x20000230
 8000674:	20000014 	.word	0x20000014
 8000678:	20000170 	.word	0x20000170

0800067c <MODE_1>:

void MODE_1(void){																						//Handler for mode 1
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	work = 1;
 8000680:	4b42      	ldr	r3, [pc, #264]	; (800078c <MODE_1+0x110>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 8000686:	e07a      	b.n	800077e <MODE_1+0x102>
		sprintf(TX, "Set LED %d duty cycle to %d \r", VALUES[0], VALUES[1]);
 8000688:	4b41      	ldr	r3, [pc, #260]	; (8000790 <MODE_1+0x114>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b40      	ldr	r3, [pc, #256]	; (8000790 <MODE_1+0x114>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	4940      	ldr	r1, [pc, #256]	; (8000794 <MODE_1+0x118>)
 8000694:	4840      	ldr	r0, [pc, #256]	; (8000798 <MODE_1+0x11c>)
 8000696:	f005 fcb9 	bl	800600c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)TX, strlen(TX), 1000);
 800069a:	483f      	ldr	r0, [pc, #252]	; (8000798 <MODE_1+0x11c>)
 800069c:	f7ff fd98 	bl	80001d0 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	493b      	ldr	r1, [pc, #236]	; (8000798 <MODE_1+0x11c>)
 80006aa:	483c      	ldr	r0, [pc, #240]	; (800079c <MODE_1+0x120>)
 80006ac:	f004 fb81 	bl	8004db2 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)&RX_ADJ, 1, 1000);
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	2201      	movs	r2, #1
 80006b6:	493a      	ldr	r1, [pc, #232]	; (80007a0 <MODE_1+0x124>)
 80006b8:	4838      	ldr	r0, [pc, #224]	; (800079c <MODE_1+0x120>)
 80006ba:	f004 fc0c 	bl	8004ed6 <HAL_UART_Receive>
		if(RX_ADJ == '\r'){
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <MODE_1+0x124>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0d      	cmp	r3, #13
 80006c4:	d120      	bne.n	8000708 <MODE_1+0x8c>
			(selector != 1) ? (selector++) : (selector = 0, LED_WRITE(VALUES[0], VALUES[1]),VALUES[0] = 0, VALUES[1] = 0, work = 0);
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <MODE_1+0x128>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d006      	beq.n	80006dc <MODE_1+0x60>
 80006ce:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <MODE_1+0x128>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <MODE_1+0x128>)
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e050      	b.n	800077e <MODE_1+0x102>
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <MODE_1+0x128>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MODE_1+0x114>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <MODE_1+0x114>)
 80006e8:	7852      	ldrb	r2, [r2, #1]
 80006ea:	b292      	uxth	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fa08 	bl	8000b04 <LED_WRITE>
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MODE_1+0x114>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MODE_1+0x114>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	705a      	strb	r2, [r3, #1]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <MODE_1+0x110>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e03a      	b.n	800077e <MODE_1+0x102>
		} else if(RX_ADJ == '-'){
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <MODE_1+0x124>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b2d      	cmp	r3, #45	; 0x2d
 800070e:	d10f      	bne.n	8000730 <MODE_1+0xb4>
			(VALUES[selector] != 0) ? (VALUES[selector]--) : (0);
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MODE_1+0x128>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MODE_1+0x114>)
 8000718:	5c9b      	ldrb	r3, [r3, r2]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d02f      	beq.n	800077e <MODE_1+0x102>
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MODE_1+0x128>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MODE_1+0x114>)
 8000724:	5cd2      	ldrb	r2, [r2, r3]
 8000726:	3a01      	subs	r2, #1
 8000728:	b2d1      	uxtb	r1, r2
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <MODE_1+0x114>)
 800072c:	54d1      	strb	r1, [r2, r3]
 800072e:	e026      	b.n	800077e <MODE_1+0x102>
		} else if(RX_ADJ == '+'){
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MODE_1+0x124>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b2b      	cmp	r3, #43	; 0x2b
 8000736:	d122      	bne.n	800077e <MODE_1+0x102>
			(selector == 0) ? ((VALUES[selector] < 16) ? (VALUES[selector]++) : (0)) : ((VALUES[selector] < 100) ? (VALUES[selector]++) : (0));
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MODE_1+0x128>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10f      	bne.n	8000760 <MODE_1+0xe4>
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MODE_1+0x128>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MODE_1+0x114>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	2b0f      	cmp	r3, #15
 800074c:	d817      	bhi.n	800077e <MODE_1+0x102>
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MODE_1+0x128>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <MODE_1+0x114>)
 8000754:	5cd2      	ldrb	r2, [r2, r3]
 8000756:	3201      	adds	r2, #1
 8000758:	b2d1      	uxtb	r1, r2
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <MODE_1+0x114>)
 800075c:	54d1      	strb	r1, [r2, r3]
 800075e:	e00e      	b.n	800077e <MODE_1+0x102>
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MODE_1+0x128>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MODE_1+0x114>)
 8000768:	5c9b      	ldrb	r3, [r3, r2]
 800076a:	2b63      	cmp	r3, #99	; 0x63
 800076c:	d807      	bhi.n	800077e <MODE_1+0x102>
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MODE_1+0x128>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a07      	ldr	r2, [pc, #28]	; (8000790 <MODE_1+0x114>)
 8000774:	5cd2      	ldrb	r2, [r2, r3]
 8000776:	3201      	adds	r2, #1
 8000778:	b2d1      	uxtb	r1, r2
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <MODE_1+0x114>)
 800077c:	54d1      	strb	r1, [r2, r3]
	while(work == 1){
 800077e:	4b03      	ldr	r3, [pc, #12]	; (800078c <MODE_1+0x110>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d080      	beq.n	8000688 <MODE_1+0xc>
		}
	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000016e 	.word	0x2000016e
 8000790:	2000016c 	.word	0x2000016c
 8000794:	08006880 	.word	0x08006880
 8000798:	20000174 	.word	0x20000174
 800079c:	20000230 	.word	0x20000230
 80007a0:	20000171 	.word	0x20000171
 80007a4:	2000016f 	.word	0x2000016f

080007a8 <MODE_2>:

void MODE_2(void){																						//Handler for mode 2
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	work = 1;
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MODE_2+0xa8>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 80007b2:	e045      	b.n	8000840 <MODE_2+0x98>
		sprintf(TX, "Set LED PRESCALLER value to %d \r", VALUES[0]);
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MODE_2+0xac>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4927      	ldr	r1, [pc, #156]	; (8000858 <MODE_2+0xb0>)
 80007bc:	4827      	ldr	r0, [pc, #156]	; (800085c <MODE_2+0xb4>)
 80007be:	f005 fc25 	bl	800600c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)TX, strlen(TX), 1000);
 80007c2:	4826      	ldr	r0, [pc, #152]	; (800085c <MODE_2+0xb4>)
 80007c4:	f7ff fd04 	bl	80001d0 <strlen>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	4922      	ldr	r1, [pc, #136]	; (800085c <MODE_2+0xb4>)
 80007d2:	4823      	ldr	r0, [pc, #140]	; (8000860 <MODE_2+0xb8>)
 80007d4:	f004 faed 	bl	8004db2 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)&RX_ADJ, 1, 1000);
 80007d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007dc:	2201      	movs	r2, #1
 80007de:	4921      	ldr	r1, [pc, #132]	; (8000864 <MODE_2+0xbc>)
 80007e0:	481f      	ldr	r0, [pc, #124]	; (8000860 <MODE_2+0xb8>)
 80007e2:	f004 fb78 	bl	8004ed6 <HAL_UART_Receive>
		if(RX_ADJ == '\r'){
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MODE_2+0xbc>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b0d      	cmp	r3, #13
 80007ec:	d10b      	bne.n	8000806 <MODE_2+0x5e>
			LED_PRESCALLER_SET(VALUES[0]);
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MODE_2+0xac>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f9c8 	bl	8000b88 <LED_PRESCALLER_SET>
			VALUES[0] = 0;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MODE_2+0xac>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
			work = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MODE_2+0xa8>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e01c      	b.n	8000840 <MODE_2+0x98>
		} else if(RX_ADJ == '-'){
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MODE_2+0xbc>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b2d      	cmp	r3, #45	; 0x2d
 800080c:	d10a      	bne.n	8000824 <MODE_2+0x7c>
			(VALUES[0] != 0) ? (VALUES[0]--) : (0);
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MODE_2+0xac>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d014      	beq.n	8000840 <MODE_2+0x98>
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MODE_2+0xac>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	3b01      	subs	r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MODE_2+0xac>)
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e00d      	b.n	8000840 <MODE_2+0x98>
		} else if(RX_ADJ == '+'){
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MODE_2+0xbc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b2b      	cmp	r3, #43	; 0x2b
 800082a:	d109      	bne.n	8000840 <MODE_2+0x98>
			(VALUES[0] < 254) ? (VALUES[0]++) : (0);
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MODE_2+0xac>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2bfd      	cmp	r3, #253	; 0xfd
 8000832:	d805      	bhi.n	8000840 <MODE_2+0x98>
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MODE_2+0xac>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <MODE_2+0xac>)
 800083e:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <MODE_2+0xa8>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d0b5      	beq.n	80007b4 <MODE_2+0xc>
		}
	}
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000016e 	.word	0x2000016e
 8000854:	2000016c 	.word	0x2000016c
 8000858:	080068a0 	.word	0x080068a0
 800085c:	20000174 	.word	0x20000174
 8000860:	20000230 	.word	0x20000230
 8000864:	20000171 	.word	0x20000171

08000868 <MODE_3>:

void MODE_3(void){																						//Handler for mode 3
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	work = 1;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MODE_3+0x84>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 8000872:	e034      	b.n	80008de <MODE_3+0x76>
		sprintf(TX, "Set LED sleep mode to %d\r", VALUES[0]);
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MODE_3+0x88>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	491e      	ldr	r1, [pc, #120]	; (80008f4 <MODE_3+0x8c>)
 800087c:	481e      	ldr	r0, [pc, #120]	; (80008f8 <MODE_3+0x90>)
 800087e:	f005 fbc5 	bl	800600c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)TX, strlen(TX), 1000);
 8000882:	481d      	ldr	r0, [pc, #116]	; (80008f8 <MODE_3+0x90>)
 8000884:	f7ff fca4 	bl	80001d0 <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000890:	4919      	ldr	r1, [pc, #100]	; (80008f8 <MODE_3+0x90>)
 8000892:	481a      	ldr	r0, [pc, #104]	; (80008fc <MODE_3+0x94>)
 8000894:	f004 fa8d 	bl	8004db2 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)&RX_ADJ, 1, 1000);
 8000898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089c:	2201      	movs	r2, #1
 800089e:	4918      	ldr	r1, [pc, #96]	; (8000900 <MODE_3+0x98>)
 80008a0:	4816      	ldr	r0, [pc, #88]	; (80008fc <MODE_3+0x94>)
 80008a2:	f004 fb18 	bl	8004ed6 <HAL_UART_Receive>
		if(RX_ADJ == '\r'){
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MODE_3+0x98>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b0d      	cmp	r3, #13
 80008ac:	d108      	bne.n	80008c0 <MODE_3+0x58>
			SLEEP_MODE(VALUES[0]);
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MODE_3+0x88>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f9b4 	bl	8000c20 <SLEEP_MODE>
			work = 0;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MODE_3+0x84>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e00e      	b.n	80008de <MODE_3+0x76>
		} else if(RX_ADJ == '-' || RX_ADJ == '+'){
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MODE_3+0x98>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b2d      	cmp	r3, #45	; 0x2d
 80008c6:	d003      	beq.n	80008d0 <MODE_3+0x68>
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MODE_3+0x98>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b2b      	cmp	r3, #43	; 0x2b
 80008ce:	d106      	bne.n	80008de <MODE_3+0x76>
			VALUES[0] ^= 1 ;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MODE_3+0x88>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	f083 0301 	eor.w	r3, r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MODE_3+0x88>)
 80008dc:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 80008de:	4b03      	ldr	r3, [pc, #12]	; (80008ec <MODE_3+0x84>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d0c6      	beq.n	8000874 <MODE_3+0xc>
		}
	}
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000016e 	.word	0x2000016e
 80008f0:	2000016c 	.word	0x2000016c
 80008f4:	080068c4 	.word	0x080068c4
 80008f8:	20000174 	.word	0x20000174
 80008fc:	20000230 	.word	0x20000230
 8000900:	20000171 	.word	0x20000171

08000904 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_GPIO_Init+0x98>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <MX_GPIO_Init+0x98>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_GPIO_Init+0x98>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_GPIO_Init+0x98>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <MX_GPIO_Init+0x98>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_GPIO_Init+0x98>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_GPIO_Init+0x98>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <MX_GPIO_Init+0x98>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_GPIO_Init+0x98>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0x9c>)
 8000974:	f000 ffa0 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0x9c>)
 8000990:	f000 fdf6 	bl	8001580 <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400

080009a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <MX_I2C1_Init+0x58>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009b0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80009b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009e4:	f000 ff82 	bl	80018ec <HAL_I2C_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80009ee:	f000 f9e7 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001dc 	.word	0x200001dc
 80009fc:	40005400 	.word	0x40005400

08000a00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_I2C_MspInit+0x94>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d134      	bne.n	8000a8c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a44:	2312      	movs	r3, #18
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a50:	2304      	movs	r3, #4
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4810      	ldr	r0, [pc, #64]	; (8000a9c <HAL_I2C_MspInit+0x9c>)
 8000a5c:	f000 fd90 	bl	8001580 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	201f      	movs	r0, #31
 8000a82:	f000 fca6 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a86:	201f      	movs	r0, #31
 8000a88:	f000 fcbf 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40005400 	.word	0x40005400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <DRIVER_SETUP>:
uint8_t TRANSMIT[4] = {0};
uint8_t TX_RST[5] = {LED0, 0,0,0,0};
uint8_t REG_DATA = 0;
extern char DONE[13];

void DRIVER_SETUP(void){																								//Load base configuration to external driver
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write (I2C_HANDLER, DRIVER_ADDR, MODE1, 1, (uint8_t *)&DEFAULT_SETUP, 1, 1000);
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	2301      	movs	r3, #1
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <DRIVER_SETUP+0x28>)
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <DRIVER_SETUP+0x2c>)
 8000abc:	f001 f958 	bl	8001d70 <HAL_I2C_Mem_Write>
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000c3 	.word	0x200000c3
 8000acc:	200001dc 	.word	0x200001dc

08000ad0 <LED_RST>:

void LED_RST(uint8_t reg){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	TX_RST[0] = reg;
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <LED_RST+0x2c>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, DRIVER_ADDR, TX_RST, 5, 1000);
 8000ae0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <LED_RST+0x2c>)
 8000aea:	2180      	movs	r1, #128	; 0x80
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <LED_RST+0x30>)
 8000aee:	f001 f841 	bl	8001b74 <HAL_I2C_Master_Transmit>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000c4 	.word	0x200000c4
 8000b00:	200001dc 	.word	0x200001dc

08000b04 <LED_WRITE>:

void LED_WRITE(uint8_t led_num, uint16_t percent){																		//Writes a new value in pwm control registers of driver
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	4613      	mov	r3, r2
 8000b12:	80bb      	strh	r3, [r7, #4]
	(led_num == 16) ? (led_num = ALL_LED) : (led_num = 6+(led_num*4));
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b10      	cmp	r3, #16
 8000b18:	d102      	bne.n	8000b20 <LED_WRITE+0x1c>
 8000b1a:	23fa      	movs	r3, #250	; 0xfa
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	e004      	b.n	8000b2a <LED_WRITE+0x26>
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	3306      	adds	r3, #6
 8000b28:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = 4095*percent/100;
 8000b2a:	88ba      	ldrh	r2, [r7, #4]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	031b      	lsls	r3, r3, #12
 8000b30:	1a9b      	subs	r3, r3, r2
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <LED_WRITE+0x78>)
 8000b34:	fb82 1203 	smull	r1, r2, r2, r3
 8000b38:	1152      	asrs	r2, r2, #5
 8000b3a:	17db      	asrs	r3, r3, #31
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	81fb      	strh	r3, [r7, #14]
	TRANSMIT[3] = (uint8_t)(duty >> 8);
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	0a1b      	lsrs	r3, r3, #8
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <LED_WRITE+0x7c>)
 8000b4a:	70da      	strb	r2, [r3, #3]
	TRANSMIT[2] = (uint8_t)duty;
 8000b4c:	89fb      	ldrh	r3, [r7, #14]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <LED_WRITE+0x7c>)
 8000b52:	709a      	strb	r2, [r3, #2]
	LED_RST(led_num);
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffba 	bl	8000ad0 <LED_RST>
	HAL_I2C_Mem_Write_IT(I2C_HANDLER, DRIVER_ADDR, led_num, 1, (uint8_t *)TRANSMIT, 4);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	2304      	movs	r3, #4
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <LED_WRITE+0x7c>)
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	2180      	movs	r1, #128	; 0x80
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <LED_WRITE+0x80>)
 8000b6e:	f001 fc1f 	bl	80023b0 <HAL_I2C_Mem_Write_IT>
}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	51eb851f 	.word	0x51eb851f
 8000b80:	200001a8 	.word	0x200001a8
 8000b84:	200001dc 	.word	0x200001dc

08000b88 <LED_PRESCALLER_SET>:

void LED_PRESCALLER_SET(uint8_t presc_val){																				//Writes new value to prescaler register of driver
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af04      	add	r7, sp, #16
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	SLEEP_MODE(ON);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 f844 	bl	8000c20 <SLEEP_MODE>
	TRANSMIT[2] = presc_val;
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <LED_PRESCALLER_SET+0x4c>)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	7093      	strb	r3, [r2, #2]
	HAL_I2C_Mem_Write(I2C_HANDLER, DRIVER_ADDR, PRESC_ADDR, 1, (uint8_t *)&TRANSMIT[2], 1, 1000);
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	9302      	str	r3, [sp, #8]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <LED_PRESCALLER_SET+0x50>)
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2301      	movs	r3, #1
 8000bae:	22fe      	movs	r2, #254	; 0xfe
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	480a      	ldr	r0, [pc, #40]	; (8000bdc <LED_PRESCALLER_SET+0x54>)
 8000bb4:	f001 f8dc 	bl	8001d70 <HAL_I2C_Mem_Write>
	SLEEP_MODE(OFF);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f831 	bl	8000c20 <SLEEP_MODE>
	HAL_UART_Transmit(&huart3, (uint8_t *)DONE, 13, 1000);
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	220d      	movs	r2, #13
 8000bc4:	4906      	ldr	r1, [pc, #24]	; (8000be0 <LED_PRESCALLER_SET+0x58>)
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <LED_PRESCALLER_SET+0x5c>)
 8000bc8:	f004 f8f3 	bl	8004db2 <HAL_UART_Transmit>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200001a8 	.word	0x200001a8
 8000bd8:	200001aa 	.word	0x200001aa
 8000bdc:	200001dc 	.word	0x200001dc
 8000be0:	200000cc 	.word	0x200000cc
 8000be4:	20000230 	.word	0x20000230

08000be8 <I2C_READER>:

void I2C_READER(uint8_t reg_addr){																						//Reader for I2C device register
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, DRIVER_ADDR, reg_addr, 1, (uint8_t *)&REG_DATA , 1, 1000);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <I2C_READER+0x30>)
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <I2C_READER+0x34>)
 8000c0a:	f001 f9ab 	bl	8001f64 <HAL_I2C_Mem_Read>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001ac 	.word	0x200001ac
 8000c1c:	200001dc 	.word	0x200001dc

08000c20 <SLEEP_MODE>:


void SLEEP_MODE(uint8_t state){																							//Disable and enable sleep mode
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	I2C_READER(MODE1);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff ffdc 	bl	8000be8 <I2C_READER>
	REG_DATA &= ~(1 << 4);
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <SLEEP_MODE+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	f023 0310 	bic.w	r3, r3, #16
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <SLEEP_MODE+0x6c>)
 8000c3c:	701a      	strb	r2, [r3, #0]
	REG_DATA |= (state << 4);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <SLEEP_MODE+0x6c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <SLEEP_MODE+0x6c>)
 8000c52:	701a      	strb	r2, [r3, #0]
	TRANSMIT[2] = REG_DATA;
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <SLEEP_MODE+0x6c>)
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <SLEEP_MODE+0x70>)
 8000c5a:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Write(I2C_HANDLER, DRIVER_ADDR, MODE1, 1, (uint8_t *)&TRANSMIT[2], 1, 1000);
 8000c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c60:	9302      	str	r3, [sp, #8]
 8000c62:	2301      	movs	r3, #1
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <SLEEP_MODE+0x74>)
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <SLEEP_MODE+0x78>)
 8000c72:	f001 f87d 	bl	8001d70 <HAL_I2C_Mem_Write>
	HAL_UART_Transmit(&huart3, (uint8_t *)DONE, 13, 1000);
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	220d      	movs	r2, #13
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <SLEEP_MODE+0x7c>)
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <SLEEP_MODE+0x80>)
 8000c80:	f004 f897 	bl	8004db2 <HAL_UART_Transmit>

}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200001ac 	.word	0x200001ac
 8000c90:	200001a8 	.word	0x200001a8
 8000c94:	200001aa 	.word	0x200001aa
 8000c98:	200001dc 	.word	0x200001dc
 8000c9c:	200000cc 	.word	0x200000cc
 8000ca0:	20000230 	.word	0x20000230

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca8:	f000 fa46 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 f820 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f7ff fe28 	bl	8000904 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cb4:	f7ff fe76 	bl	80009a4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000cb8:	f000 f99a 	bl	8000ff0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);										//Set low for OE pin on driver
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <main+0x3c>)
 8000cc2:	f000 fdf9 	bl	80018b8 <HAL_GPIO_WritePin>
  DRIVER_SETUP();
 8000cc6:	f7ff feeb 	bl	8000aa0 <DRIVER_SETUP>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&RX[RX_POS],1);
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <main+0x40>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <main+0x44>)
 8000cd2:	4413      	add	r3, r2
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <main+0x48>)
 8000cda:	f004 f99e 	bl	800501a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <main+0x3a>
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	200001ce 	.word	0x200001ce
 8000ce8:	200001b0 	.word	0x200001b0
 8000cec:	20000230 	.word	0x20000230

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b094      	sub	sp, #80	; 0x50
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2230      	movs	r2, #48	; 0x30
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f005 f97c 	bl	8005ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <SystemClock_Config+0xc8>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <SystemClock_Config+0xc8>)
 8000d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <SystemClock_Config+0xc8>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <SystemClock_Config+0xcc>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <SystemClock_Config+0xcc>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <SystemClock_Config+0xcc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d60:	2304      	movs	r3, #4
 8000d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 0320 	add.w	r3, r7, #32
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fb5b 	bl	8004430 <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d80:	f000 f81e 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d84:	230f      	movs	r3, #15
 8000d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000d8c:	2390      	movs	r3, #144	; 0x90
 8000d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fdbe 	bl	8004920 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000daa:	f000 f809 	bl	8000dc0 <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3750      	adds	r7, #80	; 0x50
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>
	...

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_MspInit+0x4c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <HAL_MspInit+0x4c>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x4c>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x4c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f9b8 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <I2C1_EV_IRQHandler+0x10>)
 8000e76:	f001 fb4d 	bl	8002514 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200001dc 	.word	0x200001dc

08000e84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e88:	4827      	ldr	r0, [pc, #156]	; (8000f28 <USART3_IRQHandler+0xa4>)
 8000e8a:	f004 f9a9 	bl	80051e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Transmit(&huart3, (uint8_t *)&RX[RX_POS], 1, 1000);
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <USART3_IRQHandler+0xac>)
 8000e96:	18d1      	adds	r1, r2, r3
 8000e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4822      	ldr	r0, [pc, #136]	; (8000f28 <USART3_IRQHandler+0xa4>)
 8000ea0:	f003 ff87 	bl	8004db2 <HAL_UART_Transmit>
  	if(RX[RX_POS] == '\r'){																				//Scan input data for ENTER
 8000ea4:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <USART3_IRQHandler+0xac>)
 8000eac:	5c9b      	ldrb	r3, [r3, r2]
 8000eae:	2b0d      	cmp	r3, #13
 8000eb0:	d10c      	bne.n	8000ecc <USART3_IRQHandler+0x48>
  		HAL_UART_Transmit(&huart3, (uint8_t *)&NEW_LINE, 1, 1000);										//Make new line
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	491e      	ldr	r1, [pc, #120]	; (8000f34 <USART3_IRQHandler+0xb0>)
 8000eba:	481b      	ldr	r0, [pc, #108]	; (8000f28 <USART3_IRQHandler+0xa4>)
 8000ebc:	f003 ff79 	bl	8004db2 <HAL_UART_Transmit>
  		MESSAGE_ANALYZER();																				//Run massage analyzer
 8000ec0:	f7ff fb5a 	bl	8000578 <MESSAGE_ANALYZER>
  		RX_POS = 0;																						//Reset rx buffer "pointer"
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e021      	b.n	8000f10 <USART3_IRQHandler+0x8c>
  	}else if(RX[RX_POS] == BACKSPACE){
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <USART3_IRQHandler+0xac>)
 8000ed4:	5c9b      	ldrb	r3, [r3, r2]
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d114      	bne.n	8000f04 <USART3_IRQHandler+0x80>
  		RX[RX_POS] = 0;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <USART3_IRQHandler+0xac>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	5499      	strb	r1, [r3, r2]
  		RX[RX_POS]--;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <USART3_IRQHandler+0xac>)
 8000eec:	5cd2      	ldrb	r2, [r2, r3]
 8000eee:	3a01      	subs	r2, #1
 8000ef0:	b2d1      	uxtb	r1, r2
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <USART3_IRQHandler+0xac>)
 8000ef4:	54d1      	strb	r1, [r2, r3]
  		RX[RX_POS] = 0;
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <USART3_IRQHandler+0xac>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	5499      	strb	r1, [r3, r2]
 8000f02:	e005      	b.n	8000f10 <USART3_IRQHandler+0x8c>
  	}else{
  		RX_POS++;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000f0e:	701a      	strb	r2, [r3, #0]
  	}

  HAL_UART_Receive_IT(&huart3, (uint8_t *)&RX[RX_POS],1);
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <USART3_IRQHandler+0xa8>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <USART3_IRQHandler+0xac>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4802      	ldr	r0, [pc, #8]	; (8000f28 <USART3_IRQHandler+0xa4>)
 8000f20:	f004 f87b 	bl	800501a <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000230 	.word	0x20000230
 8000f2c:	200001ce 	.word	0x200001ce
 8000f30:	200001b0 	.word	0x200001b0
 8000f34:	200000c9 	.word	0x200000c9

08000f38 <HAL_I2C_MemTxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)DONE, 13, 1000);
 8000f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f44:	220d      	movs	r2, #13
 8000f46:	4904      	ldr	r1, [pc, #16]	; (8000f58 <HAL_I2C_MemTxCpltCallback+0x20>)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <HAL_I2C_MemTxCpltCallback+0x24>)
 8000f4a:	f003 ff32 	bl	8004db2 <HAL_UART_Transmit>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000cc 	.word	0x200000cc
 8000f5c:	20000230 	.word	0x20000230

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f005 f80a 	bl	8005fa8 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20020000 	.word	0x20020000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	200001d0 	.word	0x200001d0
 8000fc8:	20000288 	.word	0x20000288

08000fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_USART3_UART_Init+0x50>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART3_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001028:	f003 fe76 	bl	8004d18 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001032:	f7ff fec5 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000230 	.word	0x20000230
 8001040:	40004800 	.word	0x40004800

08001044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_UART_MspInit+0x94>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d134      	bne.n	80010d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_UART_MspInit+0x98>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_UART_MspInit+0x98>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6413      	str	r3, [r2, #64]	; 0x40
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_UART_MspInit+0x98>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_UART_MspInit+0x98>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <HAL_UART_MspInit+0x98>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_UART_MspInit+0x98>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010b0:	2307      	movs	r3, #7
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <HAL_UART_MspInit+0x9c>)
 80010bc:	f000 fa60 	bl	8001580 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2027      	movs	r0, #39	; 0x27
 80010c6:	f000 f984 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010ca:	2027      	movs	r0, #39	; 0x27
 80010cc:	f000 f99d 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40004800 	.word	0x40004800
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ea:	490e      	ldr	r1, [pc, #56]	; (8001124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001100:	4c0b      	ldr	r4, [pc, #44]	; (8001130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800110e:	f7ff ff5d 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001112:	f004 ff4f 	bl	8005fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001116:	f7ff fdc5 	bl	8000ca4 <main>
  bx  lr    
 800111a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800111c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001128:	0800693c 	.word	0x0800693c
  ldr r2, =_sbss
 800112c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001130:	20000288 	.word	0x20000288

08001134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC_IRQHandler>
	...

08001138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <HAL_Init+0x40>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_Init+0x40>)
 800114e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_Init+0x40>)
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f92b 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f808 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fe2e 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023c00 	.word	0x40023c00

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f943 	bl	8001426 <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 f90b 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000dc 	.word	0x200000dc
 80011d4:	200000e4 	.word	0x200000e4
 80011d8:	200000e0 	.word	0x200000e0

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200000e4 	.word	0x200000e4
 8001200:	20000274 	.word	0x20000274

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000274 	.word	0x20000274

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff feda 	bl	8001204 <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d008      	beq.n	8001470 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e052      	b.n	8001516 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0216 	bic.w	r2, r2, #22
 800147e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800148e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <HAL_DMA_Abort+0x62>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149c:	2b00      	cmp	r3, #0
 800149e:	d007      	beq.n	80014b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0208 	bic.w	r2, r2, #8
 80014ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0201 	bic.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c0:	e013      	b.n	80014ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c2:	f7ff fe9f 	bl	8001204 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d90c      	bls.n	80014ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2220      	movs	r2, #32
 80014d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2203      	movs	r2, #3
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e015      	b.n	8001516 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e4      	bne.n	80014c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	223f      	movs	r2, #63	; 0x3f
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d004      	beq.n	800153c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2280      	movs	r2, #128	; 0x80
 8001536:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e00c      	b.n	8001556 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2205      	movs	r2, #5
 8001540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001570:	b2db      	uxtb	r3, r3
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	e16b      	b.n	8001874 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f040 815a 	bne.w	800186e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d005      	beq.n	80015d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d130      	bne.n	8001634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 0201 	and.w	r2, r3, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b03      	cmp	r3, #3
 800163e:	d017      	beq.n	8001670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d123      	bne.n	80016c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	08da      	lsrs	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3208      	adds	r2, #8
 80016be:	69b9      	ldr	r1, [r7, #24]
 80016c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0203 	and.w	r2, r3, #3
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80b4 	beq.w	800186e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b60      	ldr	r3, [pc, #384]	; (800188c <HAL_GPIO_Init+0x30c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a5f      	ldr	r2, [pc, #380]	; (800188c <HAL_GPIO_Init+0x30c>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b5d      	ldr	r3, [pc, #372]	; (800188c <HAL_GPIO_Init+0x30c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001722:	4a5b      	ldr	r2, [pc, #364]	; (8001890 <HAL_GPIO_Init+0x310>)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	220f      	movs	r2, #15
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a52      	ldr	r2, [pc, #328]	; (8001894 <HAL_GPIO_Init+0x314>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d02b      	beq.n	80017a6 <HAL_GPIO_Init+0x226>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a51      	ldr	r2, [pc, #324]	; (8001898 <HAL_GPIO_Init+0x318>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d025      	beq.n	80017a2 <HAL_GPIO_Init+0x222>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a50      	ldr	r2, [pc, #320]	; (800189c <HAL_GPIO_Init+0x31c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <HAL_GPIO_Init+0x21e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4f      	ldr	r2, [pc, #316]	; (80018a0 <HAL_GPIO_Init+0x320>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x21a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4e      	ldr	r2, [pc, #312]	; (80018a4 <HAL_GPIO_Init+0x324>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x216>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4d      	ldr	r2, [pc, #308]	; (80018a8 <HAL_GPIO_Init+0x328>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x212>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4c      	ldr	r2, [pc, #304]	; (80018ac <HAL_GPIO_Init+0x32c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x20e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4b      	ldr	r2, [pc, #300]	; (80018b0 <HAL_GPIO_Init+0x330>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x20a>
 8001786:	2307      	movs	r3, #7
 8001788:	e00e      	b.n	80017a8 <HAL_GPIO_Init+0x228>
 800178a:	2308      	movs	r3, #8
 800178c:	e00c      	b.n	80017a8 <HAL_GPIO_Init+0x228>
 800178e:	2306      	movs	r3, #6
 8001790:	e00a      	b.n	80017a8 <HAL_GPIO_Init+0x228>
 8001792:	2305      	movs	r3, #5
 8001794:	e008      	b.n	80017a8 <HAL_GPIO_Init+0x228>
 8001796:	2304      	movs	r3, #4
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x228>
 800179a:	2303      	movs	r3, #3
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x228>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x228>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x228>
 80017a6:	2300      	movs	r3, #0
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	f002 0203 	and.w	r2, r2, #3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4093      	lsls	r3, r2
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b8:	4935      	ldr	r1, [pc, #212]	; (8001890 <HAL_GPIO_Init+0x310>)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_GPIO_Init+0x334>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ea:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <HAL_GPIO_Init+0x334>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <HAL_GPIO_Init+0x334>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001814:	4a27      	ldr	r2, [pc, #156]	; (80018b4 <HAL_GPIO_Init+0x334>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_GPIO_Init+0x334>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183e:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <HAL_GPIO_Init+0x334>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_GPIO_Init+0x334>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <HAL_GPIO_Init+0x334>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3301      	adds	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2b0f      	cmp	r3, #15
 8001878:	f67f ae90 	bls.w	800159c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40013800 	.word	0x40013800
 8001894:	40020000 	.word	0x40020000
 8001898:	40020400 	.word	0x40020400
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40021400 	.word	0x40021400
 80018ac:	40021800 	.word	0x40021800
 80018b0:	40021c00 	.word	0x40021c00
 80018b4:	40013c00 	.word	0x40013c00

080018b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d4:	e003      	b.n	80018de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	041a      	lsls	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e12b      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff f874 	bl	8000a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800193e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001950:	f003 f9ba 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8001954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a81      	ldr	r2, [pc, #516]	; (8001b60 <HAL_I2C_Init+0x274>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d807      	bhi.n	8001970 <HAL_I2C_Init+0x84>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a80      	ldr	r2, [pc, #512]	; (8001b64 <HAL_I2C_Init+0x278>)
 8001964:	4293      	cmp	r3, r2
 8001966:	bf94      	ite	ls
 8001968:	2301      	movls	r3, #1
 800196a:	2300      	movhi	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	e006      	b.n	800197e <HAL_I2C_Init+0x92>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a7d      	ldr	r2, [pc, #500]	; (8001b68 <HAL_I2C_Init+0x27c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	bf94      	ite	ls
 8001978:	2301      	movls	r3, #1
 800197a:	2300      	movhi	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0e7      	b.n	8001b56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4a78      	ldr	r2, [pc, #480]	; (8001b6c <HAL_I2C_Init+0x280>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0c9b      	lsrs	r3, r3, #18
 8001990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a6a      	ldr	r2, [pc, #424]	; (8001b60 <HAL_I2C_Init+0x274>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d802      	bhi.n	80019c0 <HAL_I2C_Init+0xd4>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3301      	adds	r3, #1
 80019be:	e009      	b.n	80019d4 <HAL_I2C_Init+0xe8>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	4a69      	ldr	r2, [pc, #420]	; (8001b70 <HAL_I2C_Init+0x284>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	3301      	adds	r3, #1
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	430b      	orrs	r3, r1
 80019da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	495c      	ldr	r1, [pc, #368]	; (8001b60 <HAL_I2C_Init+0x274>)
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d819      	bhi.n	8001a28 <HAL_I2C_Init+0x13c>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1e59      	subs	r1, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a02:	1c59      	adds	r1, r3, #1
 8001a04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a08:	400b      	ands	r3, r1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00a      	beq.n	8001a24 <HAL_I2C_Init+0x138>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e59      	subs	r1, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a22:	e051      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e04f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <HAL_I2C_Init+0x168>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e012      	b.n	8001a7a <HAL_I2C_Init+0x18e>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Init+0x196>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e022      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10e      	bne.n	8001aa8 <HAL_I2C_Init+0x1bc>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e58      	subs	r0, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	440b      	add	r3, r1
 8001a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa6:	e00f      	b.n	8001ac8 <HAL_I2C_Init+0x1dc>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1e58      	subs	r0, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	0099      	lsls	r1, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	6809      	ldr	r1, [r1, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6911      	ldr	r1, [r2, #16]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68d2      	ldr	r2, [r2, #12]
 8001b02:	4311      	orrs	r1, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	000186a0 	.word	0x000186a0
 8001b64:	001e847f 	.word	0x001e847f
 8001b68:	003d08ff 	.word	0x003d08ff
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	10624dd3 	.word	0x10624dd3

08001b74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	817b      	strh	r3, [r7, #10]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fb3c 	bl	8001204 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	f040 80e0 	bne.w	8001d5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4970      	ldr	r1, [pc, #448]	; (8001d68 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f002 fa18 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0d3      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x50>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0cc      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d007      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2221      	movs	r2, #33	; 0x21
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2210      	movs	r2, #16
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a50      	ldr	r2, [pc, #320]	; (8001d6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f001 ff2a 	bl	8003a8c <I2C_MasterRequestWrite>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08d      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c58:	e066      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f002 fa92 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d107      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d017      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	6a39      	ldr	r1, [r7, #32]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f002 fa82 	bl	800420a <I2C_WaitOnBTFFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e01a      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d194      	bne.n	8001c5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	00100002 	.word	0x00100002
 8001d6c:	ffff0000 	.word	0xffff0000

08001d70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	817b      	strh	r3, [r7, #10]
 8001d82:	460b      	mov	r3, r1
 8001d84:	813b      	strh	r3, [r7, #8]
 8001d86:	4613      	mov	r3, r2
 8001d88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d8a:	f7ff fa3b 	bl	8001204 <HAL_GetTick>
 8001d8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	f040 80d9 	bne.w	8001f50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2319      	movs	r3, #25
 8001da4:	2201      	movs	r2, #1
 8001da6:	496d      	ldr	r1, [pc, #436]	; (8001f5c <HAL_I2C_Mem_Write+0x1ec>)
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f002 f917 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001db4:	2302      	movs	r3, #2
 8001db6:	e0cc      	b.n	8001f52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2C_Mem_Write+0x56>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e0c5      	b.n	8001f52 <HAL_I2C_Mem_Write+0x1e2>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d007      	beq.n	8001dec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2221      	movs	r2, #33	; 0x21
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a3a      	ldr	r2, [r7, #32]
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a4d      	ldr	r2, [pc, #308]	; (8001f60 <HAL_I2C_Mem_Write+0x1f0>)
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e2e:	88f8      	ldrh	r0, [r7, #6]
 8001e30:	893a      	ldrh	r2, [r7, #8]
 8001e32:	8979      	ldrh	r1, [r7, #10]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f001 fea6 	bl	8003b90 <I2C_RequestMemoryWrite>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d052      	beq.n	8001ef0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e081      	b.n	8001f52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f002 f998 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00d      	beq.n	8001e7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d107      	bne.n	8001e76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e06b      	b.n	8001f52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_I2C_Mem_Write+0x180>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d017      	beq.n	8001ef0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1aa      	bne.n	8001e4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f002 f984 	bl	800420a <I2C_WaitOnBTFFlagUntilTimeout>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00d      	beq.n	8001f24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d107      	bne.n	8001f20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e016      	b.n	8001f52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e000      	b.n	8001f52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f50:	2302      	movs	r3, #2
  }
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	00100002 	.word	0x00100002
 8001f60:	ffff0000 	.word	0xffff0000

08001f64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	461a      	mov	r2, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	817b      	strh	r3, [r7, #10]
 8001f76:	460b      	mov	r3, r1
 8001f78:	813b      	strh	r3, [r7, #8]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f7e:	f7ff f941 	bl	8001204 <HAL_GetTick>
 8001f82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	f040 8208 	bne.w	80023a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2319      	movs	r3, #25
 8001f98:	2201      	movs	r2, #1
 8001f9a:	497b      	ldr	r1, [pc, #492]	; (8002188 <HAL_I2C_Mem_Read+0x224>)
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f002 f81d 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e1fb      	b.n	80023a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_I2C_Mem_Read+0x56>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e1f4      	b.n	80023a4 <HAL_I2C_Mem_Read+0x440>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d007      	beq.n	8001fe0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2222      	movs	r2, #34	; 0x22
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2240      	movs	r2, #64	; 0x40
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4a5b      	ldr	r2, [pc, #364]	; (800218c <HAL_I2C_Mem_Read+0x228>)
 8002020:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002022:	88f8      	ldrh	r0, [r7, #6]
 8002024:	893a      	ldrh	r2, [r7, #8]
 8002026:	8979      	ldrh	r1, [r7, #10]
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	4603      	mov	r3, r0
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f001 fe42 	bl	8003cbc <I2C_RequestMemoryRead>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e1b0      	b.n	80023a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	2b00      	cmp	r3, #0
 8002048:	d113      	bne.n	8002072 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	623b      	str	r3, [r7, #32]
 800205e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e184      	b.n	800237c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	2b01      	cmp	r3, #1
 8002078:	d11b      	bne.n	80020b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e164      	b.n	800237c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d11b      	bne.n	80020f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	e144      	b.n	800237c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002108:	e138      	b.n	800237c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210e:	2b03      	cmp	r3, #3
 8002110:	f200 80f1 	bhi.w	80022f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b01      	cmp	r3, #1
 800211a:	d123      	bne.n	8002164 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f002 f8e5 	bl	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e139      	b.n	80023a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002162:	e10b      	b.n	800237c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	2b02      	cmp	r3, #2
 800216a:	d14e      	bne.n	800220a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002172:	2200      	movs	r2, #0
 8002174:	4906      	ldr	r1, [pc, #24]	; (8002190 <HAL_I2C_Mem_Read+0x22c>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f001 ff30 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e10e      	b.n	80023a4 <HAL_I2C_Mem_Read+0x440>
 8002186:	bf00      	nop
 8002188:	00100002 	.word	0x00100002
 800218c:	ffff0000 	.word	0xffff0000
 8002190:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002208:	e0b8      	b.n	800237c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002210:	2200      	movs	r2, #0
 8002212:	4966      	ldr	r1, [pc, #408]	; (80023ac <HAL_I2C_Mem_Read+0x448>)
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f001 fee1 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0bf      	b.n	80023a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002232:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	2200      	movs	r2, #0
 800226e:	494f      	ldr	r1, [pc, #316]	; (80023ac <HAL_I2C_Mem_Read+0x448>)
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f001 feb3 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e091      	b.n	80023a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f4:	e042      	b.n	800237c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f001 fff8 	bl	80042f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e04c      	b.n	80023a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b04      	cmp	r3, #4
 8002348:	d118      	bne.n	800237c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	f47f aec2 	bne.w	800210a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80023a2:	2302      	movs	r3, #2
  }
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	00010004 	.word	0x00010004

080023b0 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	817b      	strh	r3, [r7, #10]
 80023c2:	460b      	mov	r3, r1
 80023c4:	813b      	strh	r3, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	f040 808e 	bne.w	80024f8 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80023dc:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <HAL_I2C_Mem_Write_IT+0x158>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	08db      	lsrs	r3, r3, #3
 80023e2:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_I2C_Mem_Write_IT+0x15c>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	0a1a      	lsrs	r2, r3, #8
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	009a      	lsls	r2, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e064      	b.n	80024fa <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d0db      	beq.n	80023f6 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_I2C_Mem_Write_IT+0x9c>
 8002448:	2302      	movs	r3, #2
 800244a:	e056      	b.n	80024fa <HAL_I2C_Mem_Write_IT+0x14a>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d007      	beq.n	8002472 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002480:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2221      	movs	r2, #33	; 0x21
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a3a      	ldr	r2, [r7, #32]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a17      	ldr	r2, [pc, #92]	; (8002510 <HAL_I2C_Mem_Write_IT+0x160>)
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80024b4:	897a      	ldrh	r2, [r7, #10]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80024ba:	893a      	ldrh	r2, [r7, #8]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024da:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80024f2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	200000dc 	.word	0x200000dc
 800250c:	14f8b589 	.word	0x14f8b589
 8002510:	ffff0000 	.word	0xffff0000

08002514 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002534:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b10      	cmp	r3, #16
 8002542:	d003      	beq.n	800254c <HAL_I2C_EV_IRQHandler+0x38>
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b40      	cmp	r3, #64	; 0x40
 8002548:	f040 80c1 	bne.w	80026ce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <HAL_I2C_EV_IRQHandler+0x6e>
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800256c:	d003      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x62>
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002574:	d101      	bne.n	800257a <HAL_I2C_EV_IRQHandler+0x66>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_I2C_EV_IRQHandler+0x68>
 800257a:	2300      	movs	r3, #0
 800257c:	2b01      	cmp	r3, #1
 800257e:	f000 8132 	beq.w	80027e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00c      	beq.n	80025a6 <HAL_I2C_EV_IRQHandler+0x92>
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	0a5b      	lsrs	r3, r3, #9
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f001 ff2e 	bl	80043fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fcc8 	bl	8002f34 <I2C_Master_SB>
 80025a4:	e092      	b.n	80026cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	08db      	lsrs	r3, r3, #3
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	0a5b      	lsrs	r3, r3, #9
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fd3e 	bl	8003040 <I2C_Master_ADD10>
 80025c4:	e082      	b.n	80026cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	0a5b      	lsrs	r3, r3, #9
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fd58 	bl	8003094 <I2C_Master_ADDR>
 80025e4:	e072      	b.n	80026cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d03b      	beq.n	800266a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002600:	f000 80f3 	beq.w	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	09db      	lsrs	r3, r3, #7
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00f      	beq.n	8002630 <HAL_I2C_EV_IRQHandler+0x11c>
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d009      	beq.n	8002630 <HAL_I2C_EV_IRQHandler+0x11c>
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f942 	bl	80028b2 <I2C_MasterTransmit_TXE>
 800262e:	e04d      	b.n	80026cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80d6 	beq.w	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	0a5b      	lsrs	r3, r3, #9
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80cf 	beq.w	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	2b21      	cmp	r3, #33	; 0x21
 8002650:	d103      	bne.n	800265a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9c9 	bl	80029ea <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002658:	e0c7      	b.n	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b40      	cmp	r3, #64	; 0x40
 800265e:	f040 80c4 	bne.w	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa37 	bl	8002ad6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002668:	e0bf      	b.n	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002678:	f000 80b7 	beq.w	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00f      	beq.n	80026a8 <HAL_I2C_EV_IRQHandler+0x194>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	0a9b      	lsrs	r3, r3, #10
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_I2C_EV_IRQHandler+0x194>
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 faac 	bl	8002bfe <I2C_MasterReceive_RXNE>
 80026a6:	e011      	b.n	80026cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	089b      	lsrs	r3, r3, #2
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 809a 	beq.w	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	0a5b      	lsrs	r3, r3, #9
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8093 	beq.w	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fb4b 	bl	8002d60 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ca:	e08e      	b.n	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80026cc:	e08d      	b.n	80027ea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d004      	beq.n	80026e0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	e007      	b.n	80026f0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d012      	beq.n	8002722 <HAL_I2C_EV_IRQHandler+0x20e>
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	0a5b      	lsrs	r3, r3, #9
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002718:	69b9      	ldr	r1, [r7, #24]
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 ff09 	bl	8003532 <I2C_Slave_ADDR>
 8002720:	e066      	b.n	80027f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_I2C_EV_IRQHandler+0x22e>
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	0a5b      	lsrs	r3, r3, #9
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 ff44 	bl	80035c8 <I2C_Slave_STOPF>
 8002740:	e056      	b.n	80027f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002742:	7bbb      	ldrb	r3, [r7, #14]
 8002744:	2b21      	cmp	r3, #33	; 0x21
 8002746:	d002      	beq.n	800274e <HAL_I2C_EV_IRQHandler+0x23a>
 8002748:	7bbb      	ldrb	r3, [r7, #14]
 800274a:	2b29      	cmp	r3, #41	; 0x29
 800274c:	d125      	bne.n	800279a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	09db      	lsrs	r3, r3, #7
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00f      	beq.n	800277a <HAL_I2C_EV_IRQHandler+0x266>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	0a9b      	lsrs	r3, r3, #10
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_I2C_EV_IRQHandler+0x266>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fe1f 	bl	80033b6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002778:	e039      	b.n	80027ee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d033      	beq.n	80027ee <HAL_I2C_EV_IRQHandler+0x2da>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	0a5b      	lsrs	r3, r3, #9
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02d      	beq.n	80027ee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fe4c 	bl	8003430 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002798:	e029      	b.n	80027ee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00f      	beq.n	80027c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	0a9b      	lsrs	r3, r3, #10
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fe57 	bl	8003472 <I2C_SlaveReceive_RXNE>
 80027c4:	e014      	b.n	80027f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00e      	beq.n	80027f0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	0a5b      	lsrs	r3, r3, #9
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fe85 	bl	80034ee <I2C_SlaveReceive_BTF>
 80027e4:	e004      	b.n	80027f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
 8002852:	4613      	mov	r3, r2
 8002854:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d150      	bne.n	800297a <I2C_MasterTransmit_TXE+0xc8>
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b21      	cmp	r3, #33	; 0x21
 80028dc:	d14d      	bne.n	800297a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d01d      	beq.n	8002920 <I2C_MasterTransmit_TXE+0x6e>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d01a      	beq.n	8002920 <I2C_MasterTransmit_TXE+0x6e>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028f0:	d016      	beq.n	8002920 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002900:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2211      	movs	r2, #17
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff6c 	bl	80027f6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800291e:	e060      	b.n	80029e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800292e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d107      	bne.n	800296a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fae8 	bl	8000f38 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002968:	e03b      	b.n	80029e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ff3f 	bl	80027f6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002978:	e033      	b.n	80029e2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b21      	cmp	r3, #33	; 0x21
 800297e:	d005      	beq.n	800298c <I2C_MasterTransmit_TXE+0xda>
 8002980:	7bbb      	ldrb	r3, [r7, #14]
 8002982:	2b40      	cmp	r3, #64	; 0x40
 8002984:	d12d      	bne.n	80029e2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b22      	cmp	r3, #34	; 0x22
 800298a:	d12a      	bne.n	80029e2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d108      	bne.n	80029a8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80029a6:	e01c      	b.n	80029e2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b40      	cmp	r3, #64	; 0x40
 80029b2:	d103      	bne.n	80029bc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f88e 	bl	8002ad6 <I2C_MemoryTransmit_TXE_BTF>
}
 80029ba:	e012      	b.n	80029e2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029e0:	e7ff      	b.n	80029e2 <I2C_MasterTransmit_TXE+0x130>
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b21      	cmp	r3, #33	; 0x21
 8002a02:	d164      	bne.n	8002ace <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d012      	beq.n	8002a34 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002a32:	e04c      	b.n	8002ace <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d01d      	beq.n	8002a76 <I2C_MasterTransmit_BTF+0x8c>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d01a      	beq.n	8002a76 <I2C_MasterTransmit_BTF+0x8c>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a46:	d016      	beq.n	8002a76 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a56:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2211      	movs	r2, #17
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fec1 	bl	80027f6 <HAL_I2C_MasterTxCpltCallback>
}
 8002a74:	e02b      	b.n	8002ace <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a84:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a94:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d107      	bne.n	8002ac0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fe fa3d 	bl	8000f38 <HAL_I2C_MemTxCpltCallback>
}
 8002abe:	e006      	b.n	8002ace <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fe94 	bl	80027f6 <HAL_I2C_MasterTxCpltCallback>
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11d      	bne.n	8002b2a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10b      	bne.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b06:	1c9a      	adds	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002b0c:	e073      	b.n	8002bf6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	121b      	asrs	r3, r3, #8
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b28:	e065      	b.n	8002bf6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d10b      	bne.n	8002b4a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b48:	e055      	b.n	8002bf6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d151      	bne.n	8002bf6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b22      	cmp	r3, #34	; 0x22
 8002b56:	d10d      	bne.n	8002b74 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b66:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b72:	e040      	b.n	8002bf6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b21      	cmp	r3, #33	; 0x21
 8002b82:	d112      	bne.n	8002baa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	781a      	ldrb	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ba8:	e025      	b.n	8002bf6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d120      	bne.n	8002bf6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b21      	cmp	r3, #33	; 0x21
 8002bb8:	d11d      	bne.n	8002bf6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bc8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe f9a1 	bl	8000f38 <HAL_I2C_MemTxCpltCallback>
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b22      	cmp	r3, #34	; 0x22
 8002c10:	f040 80a2 	bne.w	8002d58 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d921      	bls.n	8002c66 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	f040 8082 	bne.w	8002d58 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002c64:	e078      	b.n	8002d58 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d074      	beq.n	8002d58 <I2C_MasterReceive_RXNE+0x15a>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d002      	beq.n	8002c7a <I2C_MasterReceive_RXNE+0x7c>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d16e      	bne.n	8002d58 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f001 fb06 	bl	800428c <I2C_WaitOnSTOPRequestThroughIT>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d142      	bne.n	8002d0c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c94:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ca4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d10a      	bne.n	8002cf6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fdc1 	bl	8002876 <HAL_I2C_MemRxCpltCallback>
}
 8002cf4:	e030      	b.n	8002d58 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2212      	movs	r2, #18
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff fd80 	bl	800280a <HAL_I2C_MasterRxCpltCallback>
}
 8002d0a:	e025      	b.n	8002d58 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d1a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fd99 	bl	800288a <HAL_I2C_ErrorCallback>
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d11b      	bne.n	8002db0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d86:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002dae:	e0bd      	b.n	8002f2c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d129      	bne.n	8002e0e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d00a      	beq.n	8002de6 <I2C_MasterReceive_BTF+0x86>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d007      	beq.n	8002de6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e0c:	e08e      	b.n	8002f2c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d176      	bne.n	8002f06 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d002      	beq.n	8002e24 <I2C_MasterReceive_BTF+0xc4>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d108      	bne.n	8002e36 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e019      	b.n	8002e6a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d002      	beq.n	8002e42 <I2C_MasterReceive_BTF+0xe2>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d108      	bne.n	8002e54 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e00a      	b.n	8002e6a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d007      	beq.n	8002e6a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e68:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ec4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d10a      	bne.n	8002ef0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff fcc4 	bl	8002876 <HAL_I2C_MemRxCpltCallback>
}
 8002eee:	e01d      	b.n	8002f2c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2212      	movs	r2, #18
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fc83 	bl	800280a <HAL_I2C_MasterRxCpltCallback>
}
 8002f04:	e012      	b.n	8002f2c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	d117      	bne.n	8002f78 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f60:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f62:	e067      	b.n	8003034 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	611a      	str	r2, [r3, #16]
}
 8002f76:	e05d      	b.n	8003034 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f80:	d133      	bne.n	8002fea <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b21      	cmp	r3, #33	; 0x21
 8002f8c:	d109      	bne.n	8002fa2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f9e:	611a      	str	r2, [r3, #16]
 8002fa0:	e008      	b.n	8002fb4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d004      	beq.n	8002fc6 <I2C_Master_SB+0x92>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d108      	bne.n	8002fd8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d032      	beq.n	8003034 <I2C_Master_SB+0x100>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02d      	beq.n	8003034 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe6:	605a      	str	r2, [r3, #4]
}
 8002fe8:	e024      	b.n	8003034 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10e      	bne.n	8003010 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	11db      	asrs	r3, r3, #7
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f003 0306 	and.w	r3, r3, #6
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f063 030f 	orn	r3, r3, #15
 8003006:	b2da      	uxtb	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	611a      	str	r2, [r3, #16]
}
 800300e:	e011      	b.n	8003034 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10d      	bne.n	8003034 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	b29b      	uxth	r3, r3
 800301e:	11db      	asrs	r3, r3, #7
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 0306 	and.w	r3, r3, #6
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f063 030e 	orn	r3, r3, #14
 800302c:	b2da      	uxtb	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	611a      	str	r2, [r3, #16]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	b2da      	uxtb	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <I2C_Master_ADD10+0x26>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d108      	bne.n	8003078 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <I2C_Master_ADD10+0x48>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]
  }
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003094:	b480      	push	{r7}
 8003096:	b091      	sub	sp, #68	; 0x44
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b22      	cmp	r3, #34	; 0x22
 80030bc:	f040 8169 	bne.w	8003392 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10f      	bne.n	80030e8 <I2C_Master_ADDR+0x54>
 80030c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d10b      	bne.n	80030e8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d0:	2300      	movs	r3, #0
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	633b      	str	r3, [r7, #48]	; 0x30
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	e160      	b.n	80033aa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11d      	bne.n	800312c <I2C_Master_ADDR+0x98>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030f8:	d118      	bne.n	800312c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800311e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	651a      	str	r2, [r3, #80]	; 0x50
 800312a:	e13e      	b.n	80033aa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d113      	bne.n	800315e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003136:	2300      	movs	r3, #0
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e115      	b.n	800338a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	f040 808a 	bne.w	800327e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003170:	d137      	bne.n	80031e2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003180:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003190:	d113      	bne.n	80031ba <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	e0e7      	b.n	800338a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ba:	2300      	movs	r3, #0
 80031bc:	623b      	str	r3, [r7, #32]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	623b      	str	r3, [r7, #32]
 80031ce:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e0d3      	b.n	800338a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d02e      	beq.n	8003246 <I2C_Master_ADDR+0x1b2>
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d02b      	beq.n	8003246 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80031ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f0:	2b12      	cmp	r3, #18
 80031f2:	d102      	bne.n	80031fa <I2C_Master_ADDR+0x166>
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d125      	bne.n	8003246 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d00e      	beq.n	800321e <I2C_Master_ADDR+0x18a>
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	2b02      	cmp	r3, #2
 8003204:	d00b      	beq.n	800321e <I2C_Master_ADDR+0x18a>
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	2b10      	cmp	r3, #16
 800320a:	d008      	beq.n	800321e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e007      	b.n	800322e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800322c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	e0a1      	b.n	800338a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003254:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e085      	b.n	800338a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d14d      	bne.n	8003324 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	2b04      	cmp	r3, #4
 800328c:	d016      	beq.n	80032bc <I2C_Master_ADDR+0x228>
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	2b02      	cmp	r3, #2
 8003292:	d013      	beq.n	80032bc <I2C_Master_ADDR+0x228>
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	2b10      	cmp	r3, #16
 8003298:	d010      	beq.n	80032bc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032ca:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032da:	d117      	bne.n	800330c <I2C_Master_ADDR+0x278>
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e2:	d00b      	beq.n	80032fc <I2C_Master_ADDR+0x268>
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d008      	beq.n	80032fc <I2C_Master_ADDR+0x268>
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d005      	beq.n	80032fc <I2C_Master_ADDR+0x268>
 80032f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d002      	beq.n	80032fc <I2C_Master_ADDR+0x268>
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d107      	bne.n	800330c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800330a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	e032      	b.n	800338a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003332:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003342:	d117      	bne.n	8003374 <I2C_Master_ADDR+0x2e0>
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800334a:	d00b      	beq.n	8003364 <I2C_Master_ADDR+0x2d0>
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	2b01      	cmp	r3, #1
 8003350:	d008      	beq.n	8003364 <I2C_Master_ADDR+0x2d0>
 8003352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003354:	2b08      	cmp	r3, #8
 8003356:	d005      	beq.n	8003364 <I2C_Master_ADDR+0x2d0>
 8003358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335a:	2b10      	cmp	r3, #16
 800335c:	d002      	beq.n	8003364 <I2C_Master_ADDR+0x2d0>
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003360:	2b20      	cmp	r3, #32
 8003362:	d107      	bne.n	8003374 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003372:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003390:	e00b      	b.n	80033aa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	e7ff      	b.n	80033aa <I2C_Master_ADDR+0x316>
 80033aa:	bf00      	nop
 80033ac:	3744      	adds	r7, #68	; 0x44
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02b      	beq.n	8003428 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d114      	bne.n	8003428 <I2C_SlaveTransmit_TXE+0x72>
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b29      	cmp	r3, #41	; 0x29
 8003402:	d111      	bne.n	8003428 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003412:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2221      	movs	r2, #33	; 0x21
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2228      	movs	r2, #40	; 0x28
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff f9fb 	bl	800281e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02c      	beq.n	80034e6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d114      	bne.n	80034e6 <I2C_SlaveReceive_RXNE+0x74>
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b2a      	cmp	r3, #42	; 0x2a
 80034c0:	d111      	bne.n	80034e6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2222      	movs	r2, #34	; 0x22
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2228      	movs	r2, #40	; 0x28
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff f9a6 	bl	8002832 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d012      	beq.n	8003526 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800354c:	2b28      	cmp	r3, #40	; 0x28
 800354e:	d127      	bne.n	80035a0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	09db      	lsrs	r3, r3, #7
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d103      	bne.n	8003584 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	81bb      	strh	r3, [r7, #12]
 8003582:	e002      	b.n	800358a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003592:	89ba      	ldrh	r2, [r7, #12]
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff f954 	bl	8002846 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800359e:	e00e      	b.n	80035be <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003614:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003624:	d172      	bne.n	800370c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b22      	cmp	r3, #34	; 0x22
 800362a:	d002      	beq.n	8003632 <I2C_Slave_STOPF+0x6a>
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b2a      	cmp	r3, #42	; 0x2a
 8003630:	d135      	bne.n	800369e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f043 0204 	orr.w	r2, r3, #4
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003664:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd ff79 	bl	8001562 <HAL_DMA_GetState>
 8003670:	4603      	mov	r3, r0
 8003672:	2b01      	cmp	r3, #1
 8003674:	d049      	beq.n	800370a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	4a69      	ldr	r2, [pc, #420]	; (8003820 <I2C_Slave_STOPF+0x258>)
 800367c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd ff4b 	bl	800151e <HAL_DMA_Abort_IT>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d03d      	beq.n	800370a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003698:	4610      	mov	r0, r2
 800369a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800369c:	e035      	b.n	800370a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd ff43 	bl	8001562 <HAL_DMA_GetState>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d014      	beq.n	800370c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	4a4e      	ldr	r2, [pc, #312]	; (8003820 <I2C_Slave_STOPF+0x258>)
 80036e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd ff15 	bl	800151e <HAL_DMA_Abort_IT>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003704:	4610      	mov	r0, r2
 8003706:	4798      	blx	r3
 8003708:	e000      	b.n	800370c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800370a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d03e      	beq.n	8003794 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b04      	cmp	r3, #4
 8003722:	d112      	bne.n	800374a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d112      	bne.n	800377e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f043 0204 	orr.w	r2, r3, #4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f843 	bl	8003828 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80037a2:	e039      	b.n	8003818 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b2a      	cmp	r3, #42	; 0x2a
 80037a8:	d109      	bne.n	80037be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2228      	movs	r2, #40	; 0x28
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff f83a 	bl	8002832 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b28      	cmp	r3, #40	; 0x28
 80037c8:	d111      	bne.n	80037ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a15      	ldr	r2, [pc, #84]	; (8003824 <I2C_Slave_STOPF+0x25c>)
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff f83b 	bl	8002862 <HAL_I2C_ListenCpltCallback>
}
 80037ec:	e014      	b.n	8003818 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	2b22      	cmp	r3, #34	; 0x22
 80037f4:	d002      	beq.n	80037fc <I2C_Slave_STOPF+0x234>
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b22      	cmp	r3, #34	; 0x22
 80037fa:	d10d      	bne.n	8003818 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff f80d 	bl	8002832 <HAL_I2C_SlaveRxCpltCallback>
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	08003e8d 	.word	0x08003e8d
 8003824:	ffff0000 	.word	0xffff0000

08003828 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003836:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	2b10      	cmp	r3, #16
 8003844:	d002      	beq.n	800384c <I2C_ITError+0x24>
 8003846:	7bbb      	ldrb	r3, [r7, #14]
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d10a      	bne.n	8003862 <I2C_ITError+0x3a>
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b22      	cmp	r3, #34	; 0x22
 8003850:	d107      	bne.n	8003862 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003860:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003868:	2b28      	cmp	r3, #40	; 0x28
 800386a:	d107      	bne.n	800387c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2228      	movs	r2, #40	; 0x28
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800387a:	e015      	b.n	80038a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388a:	d00a      	beq.n	80038a2 <I2C_ITError+0x7a>
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b60      	cmp	r3, #96	; 0x60
 8003890:	d007      	beq.n	80038a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b6:	d162      	bne.n	800397e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d020      	beq.n	8003918 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038da:	4a6a      	ldr	r2, [pc, #424]	; (8003a84 <I2C_ITError+0x25c>)
 80038dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd fe1b 	bl	800151e <HAL_DMA_Abort_IT>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8089 	beq.w	8003a02 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003912:	4610      	mov	r0, r2
 8003914:	4798      	blx	r3
 8003916:	e074      	b.n	8003a02 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	4a59      	ldr	r2, [pc, #356]	; (8003a84 <I2C_ITError+0x25c>)
 800391e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd fdfa 	bl	800151e <HAL_DMA_Abort_IT>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d068      	beq.n	8003a02 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d10b      	bne.n	8003956 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003978:	4610      	mov	r0, r2
 800397a:	4798      	blx	r3
 800397c:	e041      	b.n	8003a02 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b60      	cmp	r3, #96	; 0x60
 8003988:	d125      	bne.n	80039d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d10b      	bne.n	80039be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fe ff65 	bl	800289e <HAL_I2C_AbortCpltCallback>
 80039d4:	e015      	b.n	8003a02 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d10b      	bne.n	80039fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fe ff44 	bl	800288a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10e      	bne.n	8003a30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d109      	bne.n	8003a30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d104      	bne.n	8003a30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d113      	bne.n	8003a7c <I2C_ITError+0x254>
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b28      	cmp	r3, #40	; 0x28
 8003a58:	d110      	bne.n	8003a7c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <I2C_ITError+0x260>)
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fe fef3 	bl	8002862 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	08003e8d 	.word	0x08003e8d
 8003a88:	ffff0000 	.word	0xffff0000

08003a8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d006      	beq.n	8003ab6 <I2C_MasterRequestWrite+0x2a>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d003      	beq.n	8003ab6 <I2C_MasterRequestWrite+0x2a>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ab4:	d108      	bne.n	8003ac8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e00b      	b.n	8003ae0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	2b12      	cmp	r3, #18
 8003ace:	d107      	bne.n	8003ae0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ade:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fa75 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b06:	d103      	bne.n	8003b10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e035      	b.n	8003b80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b1c:	d108      	bne.n	8003b30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b1e:	897b      	ldrh	r3, [r7, #10]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b2c:	611a      	str	r2, [r3, #16]
 8003b2e:	e01b      	b.n	8003b68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b30:	897b      	ldrh	r3, [r7, #10]
 8003b32:	11db      	asrs	r3, r3, #7
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 0306 	and.w	r3, r3, #6
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f063 030f 	orn	r3, r3, #15
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	490e      	ldr	r1, [pc, #56]	; (8003b88 <I2C_MasterRequestWrite+0xfc>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fa9b 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e010      	b.n	8003b80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b5e:	897b      	ldrh	r3, [r7, #10]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4907      	ldr	r1, [pc, #28]	; (8003b8c <I2C_MasterRequestWrite+0x100>)
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fa8b 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	00010008 	.word	0x00010008
 8003b8c:	00010002 	.word	0x00010002

08003b90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	817b      	strh	r3, [r7, #10]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	813b      	strh	r3, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa08 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00d      	beq.n	8003bee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be0:	d103      	bne.n	8003bea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e05f      	b.n	8003cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bee:	897b      	ldrh	r3, [r7, #10]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	492d      	ldr	r1, [pc, #180]	; (8003cb8 <I2C_RequestMemoryWrite+0x128>)
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fa40 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e04c      	b.n	8003cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	6a39      	ldr	r1, [r7, #32]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 faaa 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d107      	bne.n	8003c52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e02b      	b.n	8003cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d105      	bne.n	8003c68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5c:	893b      	ldrh	r3, [r7, #8]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	611a      	str	r2, [r3, #16]
 8003c66:	e021      	b.n	8003cac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c68:	893b      	ldrh	r3, [r7, #8]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	6a39      	ldr	r1, [r7, #32]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa84 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d107      	bne.n	8003c9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e005      	b.n	8003cae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca2:	893b      	ldrh	r3, [r7, #8]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	00010002 	.word	0x00010002

08003cbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	817b      	strh	r3, [r7, #10]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	813b      	strh	r3, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f96a 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1c:	d103      	bne.n	8003d26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0aa      	b.n	8003e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	4952      	ldr	r1, [pc, #328]	; (8003e88 <I2C_RequestMemoryRead+0x1cc>)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f9a2 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e097      	b.n	8003e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	6a39      	ldr	r1, [r7, #32]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fa0c 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d107      	bne.n	8003d8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e076      	b.n	8003e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d98:	893b      	ldrh	r3, [r7, #8]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	611a      	str	r2, [r3, #16]
 8003da2:	e021      	b.n	8003de8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	6a39      	ldr	r1, [r7, #32]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f9e6 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d107      	bne.n	8003dda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e050      	b.n	8003e80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dde:	893b      	ldrh	r3, [r7, #8]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dea:	6a39      	ldr	r1, [r7, #32]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f9cb 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d107      	bne.n	8003e10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e035      	b.n	8003e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f8d3 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4a:	d103      	bne.n	8003e54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e013      	b.n	8003e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e58:	897b      	ldrh	r3, [r7, #10]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	6a3a      	ldr	r2, [r7, #32]
 8003e6c:	4906      	ldr	r1, [pc, #24]	; (8003e88 <I2C_RequestMemoryRead+0x1cc>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f90b 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	00010002 	.word	0x00010002

08003e8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ea6:	4b4b      	ldr	r3, [pc, #300]	; (8003fd4 <I2C_DMAAbort+0x148>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	08db      	lsrs	r3, r3, #3
 8003eac:	4a4a      	ldr	r2, [pc, #296]	; (8003fd8 <I2C_DMAAbort+0x14c>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0a1a      	lsrs	r2, r3, #8
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	00da      	lsls	r2, r3, #3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003ed2:	e00a      	b.n	8003eea <I2C_DMAAbort+0x5e>
    }
    count--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee8:	d0ea      	beq.n	8003ec0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	2200      	movs	r2, #0
 8003f08:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b60      	cmp	r3, #96	; 0x60
 8003f5a:	d10e      	bne.n	8003f7a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7fe fc93 	bl	800289e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f78:	e027      	b.n	8003fca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f80:	2b28      	cmp	r3, #40	; 0x28
 8003f82:	d117      	bne.n	8003fb4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2228      	movs	r2, #40	; 0x28
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003fb2:	e007      	b.n	8003fc4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003fc4:	6978      	ldr	r0, [r7, #20]
 8003fc6:	f7fe fc60 	bl	800288a <HAL_I2C_ErrorCallback>
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	200000dc 	.word	0x200000dc
 8003fd8:	14f8b589 	.word	0x14f8b589

08003fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fec:	e025      	b.n	800403a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d021      	beq.n	800403a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7fd f905 	bl	8001204 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d302      	bcc.n	800400c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d116      	bne.n	800403a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f043 0220 	orr.w	r2, r3, #32
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e023      	b.n	8004082 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d10d      	bne.n	8004060 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	43da      	mvns	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	e00c      	b.n	800407a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d0b6      	beq.n	8003fee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004098:	e051      	b.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a8:	d123      	bne.n	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f043 0204 	orr.w	r2, r3, #4
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e046      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d021      	beq.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fd f883 	bl	8001204 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d116      	bne.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e020      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d10c      	bne.n	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	43da      	mvns	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e00b      	b.n	800417a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	43da      	mvns	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4013      	ands	r3, r2
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d18d      	bne.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004194:	e02d      	b.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f900 	bl	800439c <I2C_IsAcknowledgeFailed>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e02d      	b.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d021      	beq.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fd f829 	bl	8001204 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d116      	bne.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e007      	b.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d1ca      	bne.n	8004196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004216:	e02d      	b.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f8bf 	bl	800439c <I2C_IsAcknowledgeFailed>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e02d      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d021      	beq.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004230:	f7fc ffe8 	bl	8001204 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d116      	bne.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e007      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d1ca      	bne.n	8004218 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	08db      	lsrs	r3, r3, #3
 800429e:	4a13      	ldr	r2, [pc, #76]	; (80042ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	0a1a      	lsrs	r2, r3, #8
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d107      	bne.n	80042ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0220 	orr.w	r2, r3, #32
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e008      	b.n	80042dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d8:	d0e9      	beq.n	80042ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	200000dc 	.word	0x200000dc
 80042ec:	14f8b589 	.word	0x14f8b589

080042f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042fc:	e042      	b.n	8004384 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b10      	cmp	r3, #16
 800430a:	d119      	bne.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0210 	mvn.w	r2, #16
 8004314:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e029      	b.n	8004394 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7fc ff60 	bl	8001204 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d116      	bne.n	8004384 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e007      	b.n	8004394 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d1b5      	bne.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b2:	d11b      	bne.n	80043ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f043 0204 	orr.w	r2, r3, #4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800440a:	d103      	bne.n	8004414 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004412:	e007      	b.n	8004424 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800441c:	d102      	bne.n	8004424 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2208      	movs	r2, #8
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e264      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d075      	beq.n	800453a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444e:	4ba3      	ldr	r3, [pc, #652]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b04      	cmp	r3, #4
 8004458:	d00c      	beq.n	8004474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800445a:	4ba0      	ldr	r3, [pc, #640]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004462:	2b08      	cmp	r3, #8
 8004464:	d112      	bne.n	800448c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004466:	4b9d      	ldr	r3, [pc, #628]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004472:	d10b      	bne.n	800448c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	4b99      	ldr	r3, [pc, #612]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d05b      	beq.n	8004538 <HAL_RCC_OscConfig+0x108>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d157      	bne.n	8004538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e23f      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004494:	d106      	bne.n	80044a4 <HAL_RCC_OscConfig+0x74>
 8004496:	4b91      	ldr	r3, [pc, #580]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a90      	ldr	r2, [pc, #576]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e01d      	b.n	80044e0 <HAL_RCC_OscConfig+0xb0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x98>
 80044ae:	4b8b      	ldr	r3, [pc, #556]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a8a      	ldr	r2, [pc, #552]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	4b88      	ldr	r3, [pc, #544]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a87      	ldr	r2, [pc, #540]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e00b      	b.n	80044e0 <HAL_RCC_OscConfig+0xb0>
 80044c8:	4b84      	ldr	r3, [pc, #528]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a83      	ldr	r2, [pc, #524]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b81      	ldr	r3, [pc, #516]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a80      	ldr	r2, [pc, #512]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80044da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d013      	beq.n	8004510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fc fe8c 	bl	8001204 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f0:	f7fc fe88 	bl	8001204 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e204      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	4b76      	ldr	r3, [pc, #472]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0xc0>
 800450e:	e014      	b.n	800453a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004510:	f7fc fe78 	bl	8001204 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004518:	f7fc fe74 	bl	8001204 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e1f0      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452a:	4b6c      	ldr	r3, [pc, #432]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0xe8>
 8004536:	e000      	b.n	800453a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d063      	beq.n	800460e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004546:	4b65      	ldr	r3, [pc, #404]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004552:	4b62      	ldr	r3, [pc, #392]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800455a:	2b08      	cmp	r3, #8
 800455c:	d11c      	bne.n	8004598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455e:	4b5f      	ldr	r3, [pc, #380]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d116      	bne.n	8004598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	4b5c      	ldr	r3, [pc, #368]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_RCC_OscConfig+0x152>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1c4      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	4b56      	ldr	r3, [pc, #344]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4952      	ldr	r1, [pc, #328]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004596:	e03a      	b.n	800460e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a0:	4b4f      	ldr	r3, [pc, #316]	; (80046e0 <HAL_RCC_OscConfig+0x2b0>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fc fe2d 	bl	8001204 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fc fe29 	bl	8001204 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e1a5      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c0:	4b46      	ldr	r3, [pc, #280]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b43      	ldr	r3, [pc, #268]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4940      	ldr	r1, [pc, #256]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	600b      	str	r3, [r1, #0]
 80045e0:	e015      	b.n	800460e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <HAL_RCC_OscConfig+0x2b0>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fc fe0c 	bl	8001204 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f0:	f7fc fe08 	bl	8001204 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e184      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d030      	beq.n	800467c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d016      	beq.n	8004650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004622:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <HAL_RCC_OscConfig+0x2b4>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004628:	f7fc fdec 	bl	8001204 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004630:	f7fc fde8 	bl	8001204 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e164      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x200>
 800464e:	e015      	b.n	800467c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004650:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <HAL_RCC_OscConfig+0x2b4>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004656:	f7fc fdd5 	bl	8001204 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465e:	f7fc fdd1 	bl	8001204 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e14d      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004670:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80a0 	beq.w	80047ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800468a:	2300      	movs	r3, #0
 800468c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10f      	bne.n	80046ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	4a0e      	ldr	r2, [pc, #56]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6413      	str	r3, [r2, #64]	; 0x40
 80046aa:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b6:	2301      	movs	r3, #1
 80046b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_OscConfig+0x2b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d121      	bne.n	800470a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_RCC_OscConfig+0x2b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <HAL_RCC_OscConfig+0x2b8>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d2:	f7fc fd97 	bl	8001204 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	e011      	b.n	80046fe <HAL_RCC_OscConfig+0x2ce>
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800
 80046e0:	42470000 	.word	0x42470000
 80046e4:	42470e80 	.word	0x42470e80
 80046e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ec:	f7fc fd8a 	bl	8001204 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e106      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fe:	4b85      	ldr	r3, [pc, #532]	; (8004914 <HAL_RCC_OscConfig+0x4e4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d106      	bne.n	8004720 <HAL_RCC_OscConfig+0x2f0>
 8004712:	4b81      	ldr	r3, [pc, #516]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	4a80      	ldr	r2, [pc, #512]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6713      	str	r3, [r2, #112]	; 0x70
 800471e:	e01c      	b.n	800475a <HAL_RCC_OscConfig+0x32a>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b05      	cmp	r3, #5
 8004726:	d10c      	bne.n	8004742 <HAL_RCC_OscConfig+0x312>
 8004728:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a7a      	ldr	r2, [pc, #488]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 800472e:	f043 0304 	orr.w	r3, r3, #4
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
 8004734:	4b78      	ldr	r3, [pc, #480]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	4a77      	ldr	r2, [pc, #476]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	6713      	str	r3, [r2, #112]	; 0x70
 8004740:	e00b      	b.n	800475a <HAL_RCC_OscConfig+0x32a>
 8004742:	4b75      	ldr	r3, [pc, #468]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a74      	ldr	r2, [pc, #464]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
 800474e:	4b72      	ldr	r3, [pc, #456]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4a71      	ldr	r2, [pc, #452]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d015      	beq.n	800478e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004762:	f7fc fd4f 	bl	8001204 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fc fd4b 	bl	8001204 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	; 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e0c5      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004780:	4b65      	ldr	r3, [pc, #404]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ee      	beq.n	800476a <HAL_RCC_OscConfig+0x33a>
 800478c:	e014      	b.n	80047b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478e:	f7fc fd39 	bl	8001204 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004794:	e00a      	b.n	80047ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fc fd35 	bl	8001204 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0af      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ac:	4b5a      	ldr	r3, [pc, #360]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1ee      	bne.n	8004796 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b8:	7dfb      	ldrb	r3, [r7, #23]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047be:	4b56      	ldr	r3, [pc, #344]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a55      	ldr	r2, [pc, #340]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 80047c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 809b 	beq.w	800490a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047d4:	4b50      	ldr	r3, [pc, #320]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d05c      	beq.n	800489a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d141      	bne.n	800486c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e8:	4b4c      	ldr	r3, [pc, #304]	; (800491c <HAL_RCC_OscConfig+0x4ec>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fc fd09 	bl	8001204 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fc fd05 	bl	8001204 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e081      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004808:	4b43      	ldr	r3, [pc, #268]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f0      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	019b      	lsls	r3, r3, #6
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	3b01      	subs	r3, #1
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	4937      	ldr	r1, [pc, #220]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483e:	4b37      	ldr	r3, [pc, #220]	; (800491c <HAL_RCC_OscConfig+0x4ec>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004844:	f7fc fcde 	bl	8001204 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484c:	f7fc fcda 	bl	8001204 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e056      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x41c>
 800486a:	e04e      	b.n	800490a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_OscConfig+0x4ec>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fc fcc7 	bl	8001204 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487a:	f7fc fcc3 	bl	8001204 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e03f      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488c:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x44a>
 8004898:	e037      	b.n	800490a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e032      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <HAL_RCC_OscConfig+0x4e8>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d028      	beq.n	8004906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d121      	bne.n	8004906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d11a      	bne.n	8004906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048d6:	4013      	ands	r3, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048de:	4293      	cmp	r3, r2
 80048e0:	d111      	bne.n	8004906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004902:	429a      	cmp	r2, r3
 8004904:	d001      	beq.n	800490a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40007000 	.word	0x40007000
 8004918:	40023800 	.word	0x40023800
 800491c:	42470060 	.word	0x42470060

08004920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0cc      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004934:	4b68      	ldr	r3, [pc, #416]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d90c      	bls.n	800495c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b65      	ldr	r3, [pc, #404]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b63      	ldr	r3, [pc, #396]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0b8      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d020      	beq.n	80049aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004974:	4b59      	ldr	r3, [pc, #356]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a58      	ldr	r2, [pc, #352]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800497e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800498c:	4b53      	ldr	r3, [pc, #332]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4a52      	ldr	r2, [pc, #328]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004998:	4b50      	ldr	r3, [pc, #320]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	494d      	ldr	r1, [pc, #308]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d044      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d107      	bne.n	80049ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049be:	4b47      	ldr	r3, [pc, #284]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d119      	bne.n	80049fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e07f      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d003      	beq.n	80049de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049de:	4b3f      	ldr	r3, [pc, #252]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e06f      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ee:	4b3b      	ldr	r3, [pc, #236]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e067      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fe:	4b37      	ldr	r3, [pc, #220]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 0203 	bic.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4934      	ldr	r1, [pc, #208]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a10:	f7fc fbf8 	bl	8001204 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fc fbf4 	bl	8001204 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e04f      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 020c 	and.w	r2, r3, #12
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1eb      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a40:	4b25      	ldr	r3, [pc, #148]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d20c      	bcs.n	8004a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b22      	ldr	r3, [pc, #136]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e032      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4916      	ldr	r1, [pc, #88]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	490e      	ldr	r1, [pc, #56]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aa6:	f000 f821 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	490a      	ldr	r1, [pc, #40]	; (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab8:	5ccb      	ldrb	r3, [r1, r3]
 8004aba:	fa22 f303 	lsr.w	r3, r2, r3
 8004abe:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fc fb58 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023c00 	.word	0x40023c00
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	080068e0 	.word	0x080068e0
 8004ae4:	200000dc 	.word	0x200000dc
 8004ae8:	200000e0 	.word	0x200000e0

08004aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	2300      	movs	r3, #0
 8004afe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b04:	4b67      	ldr	r3, [pc, #412]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d00d      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x40>
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	f200 80bd 	bhi.w	8004c90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x34>
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b1e:	e0b7      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b20:	4b61      	ldr	r3, [pc, #388]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b22:	60bb      	str	r3, [r7, #8]
       break;
 8004b24:	e0b7      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b26:	4b61      	ldr	r3, [pc, #388]	; (8004cac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004b28:	60bb      	str	r3, [r7, #8]
      break;
 8004b2a:	e0b4      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b2c:	4b5d      	ldr	r3, [pc, #372]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b36:	4b5b      	ldr	r3, [pc, #364]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d04d      	beq.n	8004bde <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b42:	4b58      	ldr	r3, [pc, #352]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	ea02 0800 	and.w	r8, r2, r0
 8004b5a:	ea03 0901 	and.w	r9, r3, r1
 8004b5e:	4640      	mov	r0, r8
 8004b60:	4649      	mov	r1, r9
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	014b      	lsls	r3, r1, #5
 8004b6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b70:	0142      	lsls	r2, r0, #5
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	ebb0 0008 	subs.w	r0, r0, r8
 8004b7a:	eb61 0109 	sbc.w	r1, r1, r9
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	018b      	lsls	r3, r1, #6
 8004b88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b8c:	0182      	lsls	r2, r0, #6
 8004b8e:	1a12      	subs	r2, r2, r0
 8004b90:	eb63 0301 	sbc.w	r3, r3, r1
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	00d9      	lsls	r1, r3, #3
 8004b9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ba2:	00d0      	lsls	r0, r2, #3
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	eb12 0208 	adds.w	r2, r2, r8
 8004bac:	eb43 0309 	adc.w	r3, r3, r9
 8004bb0:	f04f 0000 	mov.w	r0, #0
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	0259      	lsls	r1, r3, #9
 8004bba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004bbe:	0250      	lsls	r0, r2, #9
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	f7fb fb56 	bl	8000280 <__aeabi_uldivmod>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4613      	mov	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e04a      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	099b      	lsrs	r3, r3, #6
 8004be4:	461a      	mov	r2, r3
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	ea02 0400 	and.w	r4, r2, r0
 8004bf6:	ea03 0501 	and.w	r5, r3, r1
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	014b      	lsls	r3, r1, #5
 8004c08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c0c:	0142      	lsls	r2, r0, #5
 8004c0e:	4610      	mov	r0, r2
 8004c10:	4619      	mov	r1, r3
 8004c12:	1b00      	subs	r0, r0, r4
 8004c14:	eb61 0105 	sbc.w	r1, r1, r5
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	018b      	lsls	r3, r1, #6
 8004c22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c26:	0182      	lsls	r2, r0, #6
 8004c28:	1a12      	subs	r2, r2, r0
 8004c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c2e:	f04f 0000 	mov.w	r0, #0
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	00d9      	lsls	r1, r3, #3
 8004c38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c3c:	00d0      	lsls	r0, r2, #3
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	1912      	adds	r2, r2, r4
 8004c44:	eb45 0303 	adc.w	r3, r5, r3
 8004c48:	f04f 0000 	mov.w	r0, #0
 8004c4c:	f04f 0100 	mov.w	r1, #0
 8004c50:	0299      	lsls	r1, r3, #10
 8004c52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c56:	0290      	lsls	r0, r2, #10
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	f7fb fb0a 	bl	8000280 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4613      	mov	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	60bb      	str	r3, [r7, #8]
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c92:	60bb      	str	r3, [r7, #8]
      break;
 8004c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c96:	68bb      	ldr	r3, [r7, #8]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	00f42400 	.word	0x00f42400
 8004cac:	007a1200 	.word	0x007a1200

08004cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	200000dc 	.word	0x200000dc

08004cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ccc:	f7ff fff0 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0a9b      	lsrs	r3, r3, #10
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4903      	ldr	r1, [pc, #12]	; (8004cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	080068f0 	.word	0x080068f0

08004cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cf4:	f7ff ffdc 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0b5b      	lsrs	r3, r3, #13
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4903      	ldr	r1, [pc, #12]	; (8004d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	080068f0 	.word	0x080068f0

08004d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e03f      	b.n	8004daa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc f980 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2224      	movs	r2, #36	; 0x24
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 ff5b 	bl	8005c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b08a      	sub	sp, #40	; 0x28
 8004db6:	af02      	add	r7, sp, #8
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d17c      	bne.n	8004ecc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_UART_Transmit+0x2c>
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e075      	b.n	8004ece <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_UART_Transmit+0x3e>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e06e      	b.n	8004ece <HAL_UART_Transmit+0x11c>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2221      	movs	r2, #33	; 0x21
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e06:	f7fc f9fd 	bl	8001204 <HAL_GetTick>
 8004e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	88fa      	ldrh	r2, [r7, #6]
 8004e10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	88fa      	ldrh	r2, [r7, #6]
 8004e16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e20:	d108      	bne.n	8004e34 <HAL_UART_Transmit+0x82>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d104      	bne.n	8004e34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e003      	b.n	8004e3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e44:	e02a      	b.n	8004e9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2180      	movs	r1, #128	; 0x80
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fc87 	bl	8005764 <UART_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e036      	b.n	8004ece <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	3302      	adds	r3, #2
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e007      	b.n	8004e8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1cf      	bne.n	8004e46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2140      	movs	r1, #64	; 0x40
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fc57 	bl	8005764 <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e006      	b.n	8004ece <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e000      	b.n	8004ece <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b08a      	sub	sp, #40	; 0x28
 8004eda:	af02      	add	r7, sp, #8
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	f040 808c 	bne.w	8005010 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <HAL_UART_Receive+0x2e>
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e084      	b.n	8005012 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Receive+0x40>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e07d      	b.n	8005012 <HAL_UART_Receive+0x13c>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2222      	movs	r2, #34	; 0x22
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f32:	f7fc f967 	bl	8001204 <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4c:	d108      	bne.n	8004f60 <HAL_UART_Receive+0x8a>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d104      	bne.n	8004f60 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	e003      	b.n	8004f68 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004f70:	e043      	b.n	8004ffa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2120      	movs	r1, #32
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fbf1 	bl	8005764 <UART_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e042      	b.n	8005012 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10c      	bne.n	8004fac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	e01f      	b.n	8004fec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb4:	d007      	beq.n	8004fc6 <HAL_UART_Receive+0xf0>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <HAL_UART_Receive+0xfe>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e008      	b.n	8004fe6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1b6      	bne.n	8004f72 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e000      	b.n	8005012 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005010:	2302      	movs	r3, #2
  }
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	4613      	mov	r3, r2
 8005026:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b20      	cmp	r3, #32
 8005032:	d11d      	bne.n	8005070 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <HAL_UART_Receive_IT+0x26>
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e016      	b.n	8005072 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_UART_Receive_IT+0x38>
 800504e:	2302      	movs	r3, #2
 8005050:	e00f      	b.n	8005072 <HAL_UART_Receive_IT+0x58>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	461a      	mov	r2, r3
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fbea 	bl	8005840 <UART_Start_Receive_IT>
 800506c:	4603      	mov	r3, r0
 800506e:	e000      	b.n	8005072 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b09a      	sub	sp, #104	; 0x68
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509a:	667b      	str	r3, [r7, #100]	; 0x64
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050a4:	657a      	str	r2, [r7, #84]	; 0x54
 80050a6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	663b      	str	r3, [r7, #96]	; 0x60
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050d8:	643a      	str	r2, [r7, #64]	; 0x40
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d119      	bne.n	8005128 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	61fb      	str	r3, [r7, #28]
   return(result);
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f023 0310 	bic.w	r3, r3, #16
 800510a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	330c      	adds	r3, #12
 8005112:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800511a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d13f      	bne.n	80051b6 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3314      	adds	r3, #20
 800513c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	60bb      	str	r3, [r7, #8]
   return(result);
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514c:	65bb      	str	r3, [r7, #88]	; 0x58
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3314      	adds	r3, #20
 8005154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005156:	61ba      	str	r2, [r7, #24]
 8005158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6979      	ldr	r1, [r7, #20]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	613b      	str	r3, [r7, #16]
   return(result);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e5      	bne.n	8005136 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_UART_AbortReceive_IT+0x160>)
 8005178:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	4618      	mov	r0, r3
 8005180:	f7fc f9cd 	bl	800151e <HAL_DMA_Abort_IT>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d022      	beq.n	80051d0 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
 8005198:	e01a      	b.n	80051d0 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fac2 	bl	8005738 <HAL_UART_AbortReceiveCpltCallback>
 80051b4:	e00c      	b.n	80051d0 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fab4 	bl	8005738 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3768      	adds	r7, #104	; 0x68
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	080059a3 	.word	0x080059a3

080051e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b0ba      	sub	sp, #232	; 0xe8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005206:	2300      	movs	r3, #0
 8005208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800521e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10f      	bne.n	8005246 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <HAL_UART_IRQHandler+0x66>
 8005232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fc2f 	bl	8005aa2 <UART_Receive_IT>
      return;
 8005244:	e256      	b.n	80056f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80de 	beq.w	800540c <HAL_UART_IRQHandler+0x22c>
 8005250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005260:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80d1 	beq.w	800540c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <HAL_UART_IRQHandler+0xae>
 8005276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d005      	beq.n	800528e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800528e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00b      	beq.n	80052b2 <HAL_UART_IRQHandler+0xd2>
 800529a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0202 	orr.w	r2, r3, #2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_UART_IRQHandler+0xf6>
 80052be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f043 0204 	orr.w	r2, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d011      	beq.n	8005306 <HAL_UART_IRQHandler+0x126>
 80052e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d105      	bne.n	80052fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f043 0208 	orr.w	r2, r3, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 81ed 	beq.w	80056ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_UART_IRQHandler+0x14e>
 800531c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fbba 	bl	8005aa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_UART_IRQHandler+0x17a>
 8005352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d04f      	beq.n	80053fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 faaa 	bl	80058b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d141      	bne.n	80053f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3314      	adds	r3, #20
 8005374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3314      	adds	r3, #20
 8005396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800539a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800539e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1d9      	bne.n	800536e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d013      	beq.n	80053ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	4a7d      	ldr	r2, [pc, #500]	; (80055bc <HAL_UART_IRQHandler+0x3dc>)
 80053c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fc f8a5 	bl	800151e <HAL_DMA_Abort_IT>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	e00e      	b.n	8005408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f99a 	bl	8005724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	e00a      	b.n	8005408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f996 	bl	8005724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	e006      	b.n	8005408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f992 	bl	8005724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005406:	e170      	b.n	80056ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005408:	bf00      	nop
    return;
 800540a:	e16e      	b.n	80056ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 814a 	bne.w	80056aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 8143 	beq.w	80056aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 813c 	beq.w	80056aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005432:	2300      	movs	r3, #0
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	f040 80b4 	bne.w	80055c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005464:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 8140 	beq.w	80056ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005476:	429a      	cmp	r2, r3
 8005478:	f080 8139 	bcs.w	80056ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005482:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548e:	f000 8088 	beq.w	80055a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	330c      	adds	r3, #12
 8005498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1d9      	bne.n	8005492 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3314      	adds	r3, #20
 80054fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005502:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005506:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800550a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1e1      	bne.n	80054de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3314      	adds	r3, #20
 8005520:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005524:	e853 3f00 	ldrex	r3, [r3]
 8005528:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800552a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3314      	adds	r3, #20
 800553a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800553e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005540:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005544:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800554c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e3      	bne.n	800551a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005572:	f023 0310 	bic.w	r3, r3, #16
 8005576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005584:	65ba      	str	r2, [r7, #88]	; 0x58
 8005586:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800558a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e3      	bne.n	8005560 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	4618      	mov	r0, r3
 800559e:	f7fb ff4e 	bl	800143e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f8ca 	bl	800574c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055b8:	e099      	b.n	80056ee <HAL_UART_IRQHandler+0x50e>
 80055ba:	bf00      	nop
 80055bc:	0800597b 	.word	0x0800597b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 808b 	beq.w	80056f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80055dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8086 	beq.w	80056f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800560a:	647a      	str	r2, [r7, #68]	; 0x44
 800560c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e3      	bne.n	80055e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3314      	adds	r3, #20
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	623b      	str	r3, [r7, #32]
   return(result);
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3314      	adds	r3, #20
 800563e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005642:	633a      	str	r2, [r7, #48]	; 0x30
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e3      	bne.n	800561e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	60fb      	str	r3, [r7, #12]
   return(result);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0310 	bic.w	r3, r3, #16
 800567a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	330c      	adds	r3, #12
 8005684:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005688:	61fa      	str	r2, [r7, #28]
 800568a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	69b9      	ldr	r1, [r7, #24]
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	617b      	str	r3, [r7, #20]
   return(result);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e3      	bne.n	8005664 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800569c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f852 	bl	800574c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056a8:	e023      	b.n	80056f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <HAL_UART_IRQHandler+0x4ea>
 80056b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f985 	bl	80059d2 <UART_Transmit_IT>
    return;
 80056c8:	e014      	b.n	80056f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00e      	beq.n	80056f4 <HAL_UART_IRQHandler+0x514>
 80056d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f9c5 	bl	8005a72 <UART_EndTransmit_IT>
    return;
 80056e8:	e004      	b.n	80056f4 <HAL_UART_IRQHandler+0x514>
    return;
 80056ea:	bf00      	nop
 80056ec:	e002      	b.n	80056f4 <HAL_UART_IRQHandler+0x514>
      return;
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <HAL_UART_IRQHandler+0x514>
      return;
 80056f2:	bf00      	nop
  }
}
 80056f4:	37e8      	adds	r7, #232	; 0xe8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop

080056fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b090      	sub	sp, #64	; 0x40
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005774:	e050      	b.n	8005818 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d04c      	beq.n	8005818 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800577e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <UART_WaitOnFlagUntilTimeout+0x30>
 8005784:	f7fb fd3e 	bl	8001204 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005790:	429a      	cmp	r2, r3
 8005792:	d241      	bcs.n	8005818 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b4:	637a      	str	r2, [r7, #52]	; 0x34
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	613b      	str	r3, [r7, #16]
   return(result);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 0301 	bic.w	r3, r3, #1
 80057de:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e8:	623a      	str	r2, [r7, #32]
 80057ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	69f9      	ldr	r1, [r7, #28]
 80057ee:	6a3a      	ldr	r2, [r7, #32]
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e5      	bne.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e00f      	b.n	8005838 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	429a      	cmp	r2, r3
 8005834:	d09f      	beq.n	8005776 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3740      	adds	r7, #64	; 0x40
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	88fa      	ldrh	r2, [r7, #6]
 800585e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2222      	movs	r2, #34	; 0x22
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005884:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695a      	ldr	r2, [r3, #20]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0220 	orr.w	r2, r2, #32
 80058a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b095      	sub	sp, #84	; 0x54
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058dc:	643a      	str	r2, [r7, #64]	; 0x40
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e5      	bne.n	80058bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3314      	adds	r3, #20
 80058f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	64bb      	str	r3, [r7, #72]	; 0x48
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3314      	adds	r3, #20
 800590e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005918:	e841 2300 	strex	r3, r2, [r1]
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e5      	bne.n	80058f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	2b01      	cmp	r3, #1
 800592a:	d119      	bne.n	8005960 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	60bb      	str	r3, [r7, #8]
   return(result);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f023 0310 	bic.w	r3, r3, #16
 8005942:	647b      	str	r3, [r7, #68]	; 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800594c:	61ba      	str	r2, [r7, #24]
 800594e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6979      	ldr	r1, [r7, #20]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	613b      	str	r3, [r7, #16]
   return(result);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e5      	bne.n	800592c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800596e:	bf00      	nop
 8005970:	3754      	adds	r7, #84	; 0x54
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff fec5 	bl	8005724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff feb7 	bl	8005738 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b21      	cmp	r3, #33	; 0x21
 80059e4:	d13e      	bne.n	8005a64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d114      	bne.n	8005a1a <UART_Transmit_IT+0x48>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d110      	bne.n	8005a1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	1c9a      	adds	r2, r3, #2
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	621a      	str	r2, [r3, #32]
 8005a18:	e008      	b.n	8005a2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	1c59      	adds	r1, r3, #1
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6211      	str	r1, [r2, #32]
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10f      	bne.n	8005a60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b082      	sub	sp, #8
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fe32 	bl	80056fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b08c      	sub	sp, #48	; 0x30
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b22      	cmp	r3, #34	; 0x22
 8005ab4:	f040 80ab 	bne.w	8005c0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac0:	d117      	bne.n	8005af2 <UART_Receive_IT+0x50>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	1c9a      	adds	r2, r3, #2
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28
 8005af0:	e026      	b.n	8005b40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d007      	beq.n	8005b16 <UART_Receive_IT+0x74>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <UART_Receive_IT+0x82>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e008      	b.n	8005b36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d15a      	bne.n	8005c0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0220 	bic.w	r2, r2, #32
 8005b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d135      	bne.n	8005c00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f023 0310 	bic.w	r3, r3, #16
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bba:	623a      	str	r2, [r7, #32]
 8005bbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	69f9      	ldr	r1, [r7, #28]
 8005bc0:	6a3a      	ldr	r2, [r7, #32]
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e5      	bne.n	8005b9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b10      	cmp	r3, #16
 8005bda:	d10a      	bne.n	8005bf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff fda7 	bl	800574c <HAL_UARTEx_RxEventCallback>
 8005bfe:	e002      	b.n	8005c06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff fd85 	bl	8005710 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e002      	b.n	8005c10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e000      	b.n	8005c10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c0e:	2302      	movs	r3, #2
  }
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3730      	adds	r7, #48	; 0x30
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	b09f      	sub	sp, #124	; 0x7c
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2e:	68d9      	ldr	r1, [r3, #12]
 8005c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	ea40 0301 	orr.w	r3, r0, r1
 8005c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c5c:	f021 010c 	bic.w	r1, r1, #12
 8005c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c66:	430b      	orrs	r3, r1
 8005c68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c76:	6999      	ldr	r1, [r3, #24]
 8005c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	ea40 0301 	orr.w	r3, r0, r1
 8005c80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4bc5      	ldr	r3, [pc, #788]	; (8005f9c <UART_SetConfig+0x384>)
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d004      	beq.n	8005c96 <UART_SetConfig+0x7e>
 8005c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4bc3      	ldr	r3, [pc, #780]	; (8005fa0 <UART_SetConfig+0x388>)
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d103      	bne.n	8005c9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c96:	f7ff f82b 	bl	8004cf0 <HAL_RCC_GetPCLK2Freq>
 8005c9a:	6778      	str	r0, [r7, #116]	; 0x74
 8005c9c:	e002      	b.n	8005ca4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c9e:	f7ff f813 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8005ca2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cac:	f040 80b6 	bne.w	8005e1c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb2:	461c      	mov	r4, r3
 8005cb4:	f04f 0500 	mov.w	r5, #0
 8005cb8:	4622      	mov	r2, r4
 8005cba:	462b      	mov	r3, r5
 8005cbc:	1891      	adds	r1, r2, r2
 8005cbe:	6439      	str	r1, [r7, #64]	; 0x40
 8005cc0:	415b      	adcs	r3, r3
 8005cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cc8:	1912      	adds	r2, r2, r4
 8005cca:	eb45 0303 	adc.w	r3, r5, r3
 8005cce:	f04f 0000 	mov.w	r0, #0
 8005cd2:	f04f 0100 	mov.w	r1, #0
 8005cd6:	00d9      	lsls	r1, r3, #3
 8005cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cdc:	00d0      	lsls	r0, r2, #3
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	1911      	adds	r1, r2, r4
 8005ce4:	6639      	str	r1, [r7, #96]	; 0x60
 8005ce6:	416b      	adcs	r3, r5
 8005ce8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	1891      	adds	r1, r2, r2
 8005cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cf8:	415b      	adcs	r3, r3
 8005cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d04:	f7fa fabc 	bl	8000280 <__aeabi_uldivmod>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4ba5      	ldr	r3, [pc, #660]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	011e      	lsls	r6, r3, #4
 8005d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d18:	461c      	mov	r4, r3
 8005d1a:	f04f 0500 	mov.w	r5, #0
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	1891      	adds	r1, r2, r2
 8005d24:	6339      	str	r1, [r7, #48]	; 0x30
 8005d26:	415b      	adcs	r3, r3
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d2e:	1912      	adds	r2, r2, r4
 8005d30:	eb45 0303 	adc.w	r3, r5, r3
 8005d34:	f04f 0000 	mov.w	r0, #0
 8005d38:	f04f 0100 	mov.w	r1, #0
 8005d3c:	00d9      	lsls	r1, r3, #3
 8005d3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d42:	00d0      	lsls	r0, r2, #3
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	1911      	adds	r1, r2, r4
 8005d4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d4c:	416b      	adcs	r3, r5
 8005d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	461a      	mov	r2, r3
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	1891      	adds	r1, r2, r2
 8005d5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d5e:	415b      	adcs	r3, r3
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d6a:	f7fa fa89 	bl	8000280 <__aeabi_uldivmod>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4b8c      	ldr	r3, [pc, #560]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005d74:	fba3 1302 	umull	r1, r3, r3, r2
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	2164      	movs	r1, #100	; 0x64
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	3332      	adds	r3, #50	; 0x32
 8005d86:	4a87      	ldr	r2, [pc, #540]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005d88:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d94:	441e      	add	r6, r3
 8005d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f04f 0100 	mov.w	r1, #0
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	1894      	adds	r4, r2, r2
 8005da4:	623c      	str	r4, [r7, #32]
 8005da6:	415b      	adcs	r3, r3
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
 8005daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dae:	1812      	adds	r2, r2, r0
 8005db0:	eb41 0303 	adc.w	r3, r1, r3
 8005db4:	f04f 0400 	mov.w	r4, #0
 8005db8:	f04f 0500 	mov.w	r5, #0
 8005dbc:	00dd      	lsls	r5, r3, #3
 8005dbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dc2:	00d4      	lsls	r4, r2, #3
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	1814      	adds	r4, r2, r0
 8005dca:	653c      	str	r4, [r7, #80]	; 0x50
 8005dcc:	414b      	adcs	r3, r1
 8005dce:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	1891      	adds	r1, r2, r2
 8005ddc:	61b9      	str	r1, [r7, #24]
 8005dde:	415b      	adcs	r3, r3
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005de6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005dea:	f7fa fa49 	bl	8000280 <__aeabi_uldivmod>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4b6c      	ldr	r3, [pc, #432]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005df4:	fba3 1302 	umull	r1, r3, r3, r2
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	2164      	movs	r1, #100	; 0x64
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	3332      	adds	r3, #50	; 0x32
 8005e06:	4a67      	ldr	r2, [pc, #412]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	f003 0207 	and.w	r2, r3, #7
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4432      	add	r2, r6
 8005e18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e1a:	e0b9      	b.n	8005f90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e1e:	461c      	mov	r4, r3
 8005e20:	f04f 0500 	mov.w	r5, #0
 8005e24:	4622      	mov	r2, r4
 8005e26:	462b      	mov	r3, r5
 8005e28:	1891      	adds	r1, r2, r2
 8005e2a:	6139      	str	r1, [r7, #16]
 8005e2c:	415b      	adcs	r3, r3
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e34:	1912      	adds	r2, r2, r4
 8005e36:	eb45 0303 	adc.w	r3, r5, r3
 8005e3a:	f04f 0000 	mov.w	r0, #0
 8005e3e:	f04f 0100 	mov.w	r1, #0
 8005e42:	00d9      	lsls	r1, r3, #3
 8005e44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e48:	00d0      	lsls	r0, r2, #3
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	eb12 0804 	adds.w	r8, r2, r4
 8005e52:	eb43 0905 	adc.w	r9, r3, r5
 8005e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f04f 0100 	mov.w	r1, #0
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	008b      	lsls	r3, r1, #2
 8005e6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e6e:	0082      	lsls	r2, r0, #2
 8005e70:	4640      	mov	r0, r8
 8005e72:	4649      	mov	r1, r9
 8005e74:	f7fa fa04 	bl	8000280 <__aeabi_uldivmod>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4b49      	ldr	r3, [pc, #292]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	011e      	lsls	r6, r3, #4
 8005e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f04f 0100 	mov.w	r1, #0
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	1894      	adds	r4, r2, r2
 8005e94:	60bc      	str	r4, [r7, #8]
 8005e96:	415b      	adcs	r3, r3
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e9e:	1812      	adds	r2, r2, r0
 8005ea0:	eb41 0303 	adc.w	r3, r1, r3
 8005ea4:	f04f 0400 	mov.w	r4, #0
 8005ea8:	f04f 0500 	mov.w	r5, #0
 8005eac:	00dd      	lsls	r5, r3, #3
 8005eae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005eb2:	00d4      	lsls	r4, r2, #3
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	1814      	adds	r4, r2, r0
 8005eba:	64bc      	str	r4, [r7, #72]	; 0x48
 8005ebc:	414b      	adcs	r3, r1
 8005ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f04f 0100 	mov.w	r1, #0
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	008b      	lsls	r3, r1, #2
 8005ed4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ed8:	0082      	lsls	r2, r0, #2
 8005eda:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ede:	f7fa f9cf 	bl	8000280 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	2164      	movs	r1, #100	; 0x64
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	3332      	adds	r3, #50	; 0x32
 8005efa:	4a2a      	ldr	r2, [pc, #168]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f06:	441e      	add	r6, r3
 8005f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	1894      	adds	r4, r2, r2
 8005f16:	603c      	str	r4, [r7, #0]
 8005f18:	415b      	adcs	r3, r3
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f20:	1812      	adds	r2, r2, r0
 8005f22:	eb41 0303 	adc.w	r3, r1, r3
 8005f26:	f04f 0400 	mov.w	r4, #0
 8005f2a:	f04f 0500 	mov.w	r5, #0
 8005f2e:	00dd      	lsls	r5, r3, #3
 8005f30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f34:	00d4      	lsls	r4, r2, #3
 8005f36:	4622      	mov	r2, r4
 8005f38:	462b      	mov	r3, r5
 8005f3a:	eb12 0a00 	adds.w	sl, r2, r0
 8005f3e:	eb43 0b01 	adc.w	fp, r3, r1
 8005f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f04f 0100 	mov.w	r1, #0
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	008b      	lsls	r3, r1, #2
 8005f56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f5a:	0082      	lsls	r2, r0, #2
 8005f5c:	4650      	mov	r0, sl
 8005f5e:	4659      	mov	r1, fp
 8005f60:	f7fa f98e 	bl	8000280 <__aeabi_uldivmod>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	2164      	movs	r1, #100	; 0x64
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	3332      	adds	r3, #50	; 0x32
 8005f7c:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <UART_SetConfig+0x38c>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	f003 020f 	and.w	r2, r3, #15
 8005f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4432      	add	r2, r6
 8005f8e:	609a      	str	r2, [r3, #8]
}
 8005f90:	bf00      	nop
 8005f92:	377c      	adds	r7, #124	; 0x7c
 8005f94:	46bd      	mov	sp, r7
 8005f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40011000 	.word	0x40011000
 8005fa0:	40011400 	.word	0x40011400
 8005fa4:	51eb851f 	.word	0x51eb851f

08005fa8 <__errno>:
 8005fa8:	4b01      	ldr	r3, [pc, #4]	; (8005fb0 <__errno+0x8>)
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	200000e8 	.word	0x200000e8

08005fb4 <__libc_init_array>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	4d0d      	ldr	r5, [pc, #52]	; (8005fec <__libc_init_array+0x38>)
 8005fb8:	4c0d      	ldr	r4, [pc, #52]	; (8005ff0 <__libc_init_array+0x3c>)
 8005fba:	1b64      	subs	r4, r4, r5
 8005fbc:	10a4      	asrs	r4, r4, #2
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	42a6      	cmp	r6, r4
 8005fc2:	d109      	bne.n	8005fd8 <__libc_init_array+0x24>
 8005fc4:	4d0b      	ldr	r5, [pc, #44]	; (8005ff4 <__libc_init_array+0x40>)
 8005fc6:	4c0c      	ldr	r4, [pc, #48]	; (8005ff8 <__libc_init_array+0x44>)
 8005fc8:	f000 fc4e 	bl	8006868 <_init>
 8005fcc:	1b64      	subs	r4, r4, r5
 8005fce:	10a4      	asrs	r4, r4, #2
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	42a6      	cmp	r6, r4
 8005fd4:	d105      	bne.n	8005fe2 <__libc_init_array+0x2e>
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fdc:	4798      	blx	r3
 8005fde:	3601      	adds	r6, #1
 8005fe0:	e7ee      	b.n	8005fc0 <__libc_init_array+0xc>
 8005fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe6:	4798      	blx	r3
 8005fe8:	3601      	adds	r6, #1
 8005fea:	e7f2      	b.n	8005fd2 <__libc_init_array+0x1e>
 8005fec:	08006934 	.word	0x08006934
 8005ff0:	08006934 	.word	0x08006934
 8005ff4:	08006934 	.word	0x08006934
 8005ff8:	08006938 	.word	0x08006938

08005ffc <memset>:
 8005ffc:	4402      	add	r2, r0
 8005ffe:	4603      	mov	r3, r0
 8006000:	4293      	cmp	r3, r2
 8006002:	d100      	bne.n	8006006 <memset+0xa>
 8006004:	4770      	bx	lr
 8006006:	f803 1b01 	strb.w	r1, [r3], #1
 800600a:	e7f9      	b.n	8006000 <memset+0x4>

0800600c <siprintf>:
 800600c:	b40e      	push	{r1, r2, r3}
 800600e:	b500      	push	{lr}
 8006010:	b09c      	sub	sp, #112	; 0x70
 8006012:	ab1d      	add	r3, sp, #116	; 0x74
 8006014:	9002      	str	r0, [sp, #8]
 8006016:	9006      	str	r0, [sp, #24]
 8006018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800601c:	4809      	ldr	r0, [pc, #36]	; (8006044 <siprintf+0x38>)
 800601e:	9107      	str	r1, [sp, #28]
 8006020:	9104      	str	r1, [sp, #16]
 8006022:	4909      	ldr	r1, [pc, #36]	; (8006048 <siprintf+0x3c>)
 8006024:	f853 2b04 	ldr.w	r2, [r3], #4
 8006028:	9105      	str	r1, [sp, #20]
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	a902      	add	r1, sp, #8
 8006030:	f000 f868 	bl	8006104 <_svfiprintf_r>
 8006034:	9b02      	ldr	r3, [sp, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	b01c      	add	sp, #112	; 0x70
 800603c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006040:	b003      	add	sp, #12
 8006042:	4770      	bx	lr
 8006044:	200000e8 	.word	0x200000e8
 8006048:	ffff0208 	.word	0xffff0208

0800604c <__ssputs_r>:
 800604c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006050:	688e      	ldr	r6, [r1, #8]
 8006052:	429e      	cmp	r6, r3
 8006054:	4682      	mov	sl, r0
 8006056:	460c      	mov	r4, r1
 8006058:	4690      	mov	r8, r2
 800605a:	461f      	mov	r7, r3
 800605c:	d838      	bhi.n	80060d0 <__ssputs_r+0x84>
 800605e:	898a      	ldrh	r2, [r1, #12]
 8006060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006064:	d032      	beq.n	80060cc <__ssputs_r+0x80>
 8006066:	6825      	ldr	r5, [r4, #0]
 8006068:	6909      	ldr	r1, [r1, #16]
 800606a:	eba5 0901 	sub.w	r9, r5, r1
 800606e:	6965      	ldr	r5, [r4, #20]
 8006070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006078:	3301      	adds	r3, #1
 800607a:	444b      	add	r3, r9
 800607c:	106d      	asrs	r5, r5, #1
 800607e:	429d      	cmp	r5, r3
 8006080:	bf38      	it	cc
 8006082:	461d      	movcc	r5, r3
 8006084:	0553      	lsls	r3, r2, #21
 8006086:	d531      	bpl.n	80060ec <__ssputs_r+0xa0>
 8006088:	4629      	mov	r1, r5
 800608a:	f000 fb47 	bl	800671c <_malloc_r>
 800608e:	4606      	mov	r6, r0
 8006090:	b950      	cbnz	r0, 80060a8 <__ssputs_r+0x5c>
 8006092:	230c      	movs	r3, #12
 8006094:	f8ca 3000 	str.w	r3, [sl]
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a8:	6921      	ldr	r1, [r4, #16]
 80060aa:	464a      	mov	r2, r9
 80060ac:	f000 fabe 	bl	800662c <memcpy>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	6126      	str	r6, [r4, #16]
 80060be:	6165      	str	r5, [r4, #20]
 80060c0:	444e      	add	r6, r9
 80060c2:	eba5 0509 	sub.w	r5, r5, r9
 80060c6:	6026      	str	r6, [r4, #0]
 80060c8:	60a5      	str	r5, [r4, #8]
 80060ca:	463e      	mov	r6, r7
 80060cc:	42be      	cmp	r6, r7
 80060ce:	d900      	bls.n	80060d2 <__ssputs_r+0x86>
 80060d0:	463e      	mov	r6, r7
 80060d2:	4632      	mov	r2, r6
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	4641      	mov	r1, r8
 80060d8:	f000 fab6 	bl	8006648 <memmove>
 80060dc:	68a3      	ldr	r3, [r4, #8]
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	1b9b      	subs	r3, r3, r6
 80060e2:	4432      	add	r2, r6
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	6022      	str	r2, [r4, #0]
 80060e8:	2000      	movs	r0, #0
 80060ea:	e7db      	b.n	80060a4 <__ssputs_r+0x58>
 80060ec:	462a      	mov	r2, r5
 80060ee:	f000 fb6f 	bl	80067d0 <_realloc_r>
 80060f2:	4606      	mov	r6, r0
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d1e1      	bne.n	80060bc <__ssputs_r+0x70>
 80060f8:	6921      	ldr	r1, [r4, #16]
 80060fa:	4650      	mov	r0, sl
 80060fc:	f000 fabe 	bl	800667c <_free_r>
 8006100:	e7c7      	b.n	8006092 <__ssputs_r+0x46>
	...

08006104 <_svfiprintf_r>:
 8006104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006108:	4698      	mov	r8, r3
 800610a:	898b      	ldrh	r3, [r1, #12]
 800610c:	061b      	lsls	r3, r3, #24
 800610e:	b09d      	sub	sp, #116	; 0x74
 8006110:	4607      	mov	r7, r0
 8006112:	460d      	mov	r5, r1
 8006114:	4614      	mov	r4, r2
 8006116:	d50e      	bpl.n	8006136 <_svfiprintf_r+0x32>
 8006118:	690b      	ldr	r3, [r1, #16]
 800611a:	b963      	cbnz	r3, 8006136 <_svfiprintf_r+0x32>
 800611c:	2140      	movs	r1, #64	; 0x40
 800611e:	f000 fafd 	bl	800671c <_malloc_r>
 8006122:	6028      	str	r0, [r5, #0]
 8006124:	6128      	str	r0, [r5, #16]
 8006126:	b920      	cbnz	r0, 8006132 <_svfiprintf_r+0x2e>
 8006128:	230c      	movs	r3, #12
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	e0d1      	b.n	80062d6 <_svfiprintf_r+0x1d2>
 8006132:	2340      	movs	r3, #64	; 0x40
 8006134:	616b      	str	r3, [r5, #20]
 8006136:	2300      	movs	r3, #0
 8006138:	9309      	str	r3, [sp, #36]	; 0x24
 800613a:	2320      	movs	r3, #32
 800613c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006140:	f8cd 800c 	str.w	r8, [sp, #12]
 8006144:	2330      	movs	r3, #48	; 0x30
 8006146:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80062f0 <_svfiprintf_r+0x1ec>
 800614a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800614e:	f04f 0901 	mov.w	r9, #1
 8006152:	4623      	mov	r3, r4
 8006154:	469a      	mov	sl, r3
 8006156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800615a:	b10a      	cbz	r2, 8006160 <_svfiprintf_r+0x5c>
 800615c:	2a25      	cmp	r2, #37	; 0x25
 800615e:	d1f9      	bne.n	8006154 <_svfiprintf_r+0x50>
 8006160:	ebba 0b04 	subs.w	fp, sl, r4
 8006164:	d00b      	beq.n	800617e <_svfiprintf_r+0x7a>
 8006166:	465b      	mov	r3, fp
 8006168:	4622      	mov	r2, r4
 800616a:	4629      	mov	r1, r5
 800616c:	4638      	mov	r0, r7
 800616e:	f7ff ff6d 	bl	800604c <__ssputs_r>
 8006172:	3001      	adds	r0, #1
 8006174:	f000 80aa 	beq.w	80062cc <_svfiprintf_r+0x1c8>
 8006178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800617a:	445a      	add	r2, fp
 800617c:	9209      	str	r2, [sp, #36]	; 0x24
 800617e:	f89a 3000 	ldrb.w	r3, [sl]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80a2 	beq.w	80062cc <_svfiprintf_r+0x1c8>
 8006188:	2300      	movs	r3, #0
 800618a:	f04f 32ff 	mov.w	r2, #4294967295
 800618e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006192:	f10a 0a01 	add.w	sl, sl, #1
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	9307      	str	r3, [sp, #28]
 800619a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800619e:	931a      	str	r3, [sp, #104]	; 0x68
 80061a0:	4654      	mov	r4, sl
 80061a2:	2205      	movs	r2, #5
 80061a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a8:	4851      	ldr	r0, [pc, #324]	; (80062f0 <_svfiprintf_r+0x1ec>)
 80061aa:	f7fa f819 	bl	80001e0 <memchr>
 80061ae:	9a04      	ldr	r2, [sp, #16]
 80061b0:	b9d8      	cbnz	r0, 80061ea <_svfiprintf_r+0xe6>
 80061b2:	06d0      	lsls	r0, r2, #27
 80061b4:	bf44      	itt	mi
 80061b6:	2320      	movmi	r3, #32
 80061b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061bc:	0711      	lsls	r1, r2, #28
 80061be:	bf44      	itt	mi
 80061c0:	232b      	movmi	r3, #43	; 0x2b
 80061c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061c6:	f89a 3000 	ldrb.w	r3, [sl]
 80061ca:	2b2a      	cmp	r3, #42	; 0x2a
 80061cc:	d015      	beq.n	80061fa <_svfiprintf_r+0xf6>
 80061ce:	9a07      	ldr	r2, [sp, #28]
 80061d0:	4654      	mov	r4, sl
 80061d2:	2000      	movs	r0, #0
 80061d4:	f04f 0c0a 	mov.w	ip, #10
 80061d8:	4621      	mov	r1, r4
 80061da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061de:	3b30      	subs	r3, #48	; 0x30
 80061e0:	2b09      	cmp	r3, #9
 80061e2:	d94e      	bls.n	8006282 <_svfiprintf_r+0x17e>
 80061e4:	b1b0      	cbz	r0, 8006214 <_svfiprintf_r+0x110>
 80061e6:	9207      	str	r2, [sp, #28]
 80061e8:	e014      	b.n	8006214 <_svfiprintf_r+0x110>
 80061ea:	eba0 0308 	sub.w	r3, r0, r8
 80061ee:	fa09 f303 	lsl.w	r3, r9, r3
 80061f2:	4313      	orrs	r3, r2
 80061f4:	9304      	str	r3, [sp, #16]
 80061f6:	46a2      	mov	sl, r4
 80061f8:	e7d2      	b.n	80061a0 <_svfiprintf_r+0x9c>
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	1d19      	adds	r1, r3, #4
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	9103      	str	r1, [sp, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	bfbb      	ittet	lt
 8006206:	425b      	neglt	r3, r3
 8006208:	f042 0202 	orrlt.w	r2, r2, #2
 800620c:	9307      	strge	r3, [sp, #28]
 800620e:	9307      	strlt	r3, [sp, #28]
 8006210:	bfb8      	it	lt
 8006212:	9204      	strlt	r2, [sp, #16]
 8006214:	7823      	ldrb	r3, [r4, #0]
 8006216:	2b2e      	cmp	r3, #46	; 0x2e
 8006218:	d10c      	bne.n	8006234 <_svfiprintf_r+0x130>
 800621a:	7863      	ldrb	r3, [r4, #1]
 800621c:	2b2a      	cmp	r3, #42	; 0x2a
 800621e:	d135      	bne.n	800628c <_svfiprintf_r+0x188>
 8006220:	9b03      	ldr	r3, [sp, #12]
 8006222:	1d1a      	adds	r2, r3, #4
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	9203      	str	r2, [sp, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	bfb8      	it	lt
 800622c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006230:	3402      	adds	r4, #2
 8006232:	9305      	str	r3, [sp, #20]
 8006234:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006300 <_svfiprintf_r+0x1fc>
 8006238:	7821      	ldrb	r1, [r4, #0]
 800623a:	2203      	movs	r2, #3
 800623c:	4650      	mov	r0, sl
 800623e:	f7f9 ffcf 	bl	80001e0 <memchr>
 8006242:	b140      	cbz	r0, 8006256 <_svfiprintf_r+0x152>
 8006244:	2340      	movs	r3, #64	; 0x40
 8006246:	eba0 000a 	sub.w	r0, r0, sl
 800624a:	fa03 f000 	lsl.w	r0, r3, r0
 800624e:	9b04      	ldr	r3, [sp, #16]
 8006250:	4303      	orrs	r3, r0
 8006252:	3401      	adds	r4, #1
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625a:	4826      	ldr	r0, [pc, #152]	; (80062f4 <_svfiprintf_r+0x1f0>)
 800625c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006260:	2206      	movs	r2, #6
 8006262:	f7f9 ffbd 	bl	80001e0 <memchr>
 8006266:	2800      	cmp	r0, #0
 8006268:	d038      	beq.n	80062dc <_svfiprintf_r+0x1d8>
 800626a:	4b23      	ldr	r3, [pc, #140]	; (80062f8 <_svfiprintf_r+0x1f4>)
 800626c:	bb1b      	cbnz	r3, 80062b6 <_svfiprintf_r+0x1b2>
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	3307      	adds	r3, #7
 8006272:	f023 0307 	bic.w	r3, r3, #7
 8006276:	3308      	adds	r3, #8
 8006278:	9303      	str	r3, [sp, #12]
 800627a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627c:	4433      	add	r3, r6
 800627e:	9309      	str	r3, [sp, #36]	; 0x24
 8006280:	e767      	b.n	8006152 <_svfiprintf_r+0x4e>
 8006282:	fb0c 3202 	mla	r2, ip, r2, r3
 8006286:	460c      	mov	r4, r1
 8006288:	2001      	movs	r0, #1
 800628a:	e7a5      	b.n	80061d8 <_svfiprintf_r+0xd4>
 800628c:	2300      	movs	r3, #0
 800628e:	3401      	adds	r4, #1
 8006290:	9305      	str	r3, [sp, #20]
 8006292:	4619      	mov	r1, r3
 8006294:	f04f 0c0a 	mov.w	ip, #10
 8006298:	4620      	mov	r0, r4
 800629a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800629e:	3a30      	subs	r2, #48	; 0x30
 80062a0:	2a09      	cmp	r2, #9
 80062a2:	d903      	bls.n	80062ac <_svfiprintf_r+0x1a8>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0c5      	beq.n	8006234 <_svfiprintf_r+0x130>
 80062a8:	9105      	str	r1, [sp, #20]
 80062aa:	e7c3      	b.n	8006234 <_svfiprintf_r+0x130>
 80062ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80062b0:	4604      	mov	r4, r0
 80062b2:	2301      	movs	r3, #1
 80062b4:	e7f0      	b.n	8006298 <_svfiprintf_r+0x194>
 80062b6:	ab03      	add	r3, sp, #12
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	462a      	mov	r2, r5
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <_svfiprintf_r+0x1f8>)
 80062be:	a904      	add	r1, sp, #16
 80062c0:	4638      	mov	r0, r7
 80062c2:	f3af 8000 	nop.w
 80062c6:	1c42      	adds	r2, r0, #1
 80062c8:	4606      	mov	r6, r0
 80062ca:	d1d6      	bne.n	800627a <_svfiprintf_r+0x176>
 80062cc:	89ab      	ldrh	r3, [r5, #12]
 80062ce:	065b      	lsls	r3, r3, #25
 80062d0:	f53f af2c 	bmi.w	800612c <_svfiprintf_r+0x28>
 80062d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062d6:	b01d      	add	sp, #116	; 0x74
 80062d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062dc:	ab03      	add	r3, sp, #12
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	462a      	mov	r2, r5
 80062e2:	4b06      	ldr	r3, [pc, #24]	; (80062fc <_svfiprintf_r+0x1f8>)
 80062e4:	a904      	add	r1, sp, #16
 80062e6:	4638      	mov	r0, r7
 80062e8:	f000 f87a 	bl	80063e0 <_printf_i>
 80062ec:	e7eb      	b.n	80062c6 <_svfiprintf_r+0x1c2>
 80062ee:	bf00      	nop
 80062f0:	080068f8 	.word	0x080068f8
 80062f4:	08006902 	.word	0x08006902
 80062f8:	00000000 	.word	0x00000000
 80062fc:	0800604d 	.word	0x0800604d
 8006300:	080068fe 	.word	0x080068fe

08006304 <_printf_common>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	4616      	mov	r6, r2
 800630a:	4699      	mov	r9, r3
 800630c:	688a      	ldr	r2, [r1, #8]
 800630e:	690b      	ldr	r3, [r1, #16]
 8006310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006314:	4293      	cmp	r3, r2
 8006316:	bfb8      	it	lt
 8006318:	4613      	movlt	r3, r2
 800631a:	6033      	str	r3, [r6, #0]
 800631c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006320:	4607      	mov	r7, r0
 8006322:	460c      	mov	r4, r1
 8006324:	b10a      	cbz	r2, 800632a <_printf_common+0x26>
 8006326:	3301      	adds	r3, #1
 8006328:	6033      	str	r3, [r6, #0]
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	0699      	lsls	r1, r3, #26
 800632e:	bf42      	ittt	mi
 8006330:	6833      	ldrmi	r3, [r6, #0]
 8006332:	3302      	addmi	r3, #2
 8006334:	6033      	strmi	r3, [r6, #0]
 8006336:	6825      	ldr	r5, [r4, #0]
 8006338:	f015 0506 	ands.w	r5, r5, #6
 800633c:	d106      	bne.n	800634c <_printf_common+0x48>
 800633e:	f104 0a19 	add.w	sl, r4, #25
 8006342:	68e3      	ldr	r3, [r4, #12]
 8006344:	6832      	ldr	r2, [r6, #0]
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	42ab      	cmp	r3, r5
 800634a:	dc26      	bgt.n	800639a <_printf_common+0x96>
 800634c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006350:	1e13      	subs	r3, r2, #0
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	bf18      	it	ne
 8006356:	2301      	movne	r3, #1
 8006358:	0692      	lsls	r2, r2, #26
 800635a:	d42b      	bmi.n	80063b4 <_printf_common+0xb0>
 800635c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006360:	4649      	mov	r1, r9
 8006362:	4638      	mov	r0, r7
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d01e      	beq.n	80063a8 <_printf_common+0xa4>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	68e5      	ldr	r5, [r4, #12]
 800636e:	6832      	ldr	r2, [r6, #0]
 8006370:	f003 0306 	and.w	r3, r3, #6
 8006374:	2b04      	cmp	r3, #4
 8006376:	bf08      	it	eq
 8006378:	1aad      	subeq	r5, r5, r2
 800637a:	68a3      	ldr	r3, [r4, #8]
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	bf0c      	ite	eq
 8006380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006384:	2500      	movne	r5, #0
 8006386:	4293      	cmp	r3, r2
 8006388:	bfc4      	itt	gt
 800638a:	1a9b      	subgt	r3, r3, r2
 800638c:	18ed      	addgt	r5, r5, r3
 800638e:	2600      	movs	r6, #0
 8006390:	341a      	adds	r4, #26
 8006392:	42b5      	cmp	r5, r6
 8006394:	d11a      	bne.n	80063cc <_printf_common+0xc8>
 8006396:	2000      	movs	r0, #0
 8006398:	e008      	b.n	80063ac <_printf_common+0xa8>
 800639a:	2301      	movs	r3, #1
 800639c:	4652      	mov	r2, sl
 800639e:	4649      	mov	r1, r9
 80063a0:	4638      	mov	r0, r7
 80063a2:	47c0      	blx	r8
 80063a4:	3001      	adds	r0, #1
 80063a6:	d103      	bne.n	80063b0 <_printf_common+0xac>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7c6      	b.n	8006342 <_printf_common+0x3e>
 80063b4:	18e1      	adds	r1, r4, r3
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	2030      	movs	r0, #48	; 0x30
 80063ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063be:	4422      	add	r2, r4
 80063c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063c8:	3302      	adds	r3, #2
 80063ca:	e7c7      	b.n	800635c <_printf_common+0x58>
 80063cc:	2301      	movs	r3, #1
 80063ce:	4622      	mov	r2, r4
 80063d0:	4649      	mov	r1, r9
 80063d2:	4638      	mov	r0, r7
 80063d4:	47c0      	blx	r8
 80063d6:	3001      	adds	r0, #1
 80063d8:	d0e6      	beq.n	80063a8 <_printf_common+0xa4>
 80063da:	3601      	adds	r6, #1
 80063dc:	e7d9      	b.n	8006392 <_printf_common+0x8e>
	...

080063e0 <_printf_i>:
 80063e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	460c      	mov	r4, r1
 80063e6:	4691      	mov	r9, r2
 80063e8:	7e27      	ldrb	r7, [r4, #24]
 80063ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063ec:	2f78      	cmp	r7, #120	; 0x78
 80063ee:	4680      	mov	r8, r0
 80063f0:	469a      	mov	sl, r3
 80063f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063f6:	d807      	bhi.n	8006408 <_printf_i+0x28>
 80063f8:	2f62      	cmp	r7, #98	; 0x62
 80063fa:	d80a      	bhi.n	8006412 <_printf_i+0x32>
 80063fc:	2f00      	cmp	r7, #0
 80063fe:	f000 80d8 	beq.w	80065b2 <_printf_i+0x1d2>
 8006402:	2f58      	cmp	r7, #88	; 0x58
 8006404:	f000 80a3 	beq.w	800654e <_printf_i+0x16e>
 8006408:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800640c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006410:	e03a      	b.n	8006488 <_printf_i+0xa8>
 8006412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006416:	2b15      	cmp	r3, #21
 8006418:	d8f6      	bhi.n	8006408 <_printf_i+0x28>
 800641a:	a001      	add	r0, pc, #4	; (adr r0, 8006420 <_printf_i+0x40>)
 800641c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006420:	08006479 	.word	0x08006479
 8006424:	0800648d 	.word	0x0800648d
 8006428:	08006409 	.word	0x08006409
 800642c:	08006409 	.word	0x08006409
 8006430:	08006409 	.word	0x08006409
 8006434:	08006409 	.word	0x08006409
 8006438:	0800648d 	.word	0x0800648d
 800643c:	08006409 	.word	0x08006409
 8006440:	08006409 	.word	0x08006409
 8006444:	08006409 	.word	0x08006409
 8006448:	08006409 	.word	0x08006409
 800644c:	08006599 	.word	0x08006599
 8006450:	080064bd 	.word	0x080064bd
 8006454:	0800657b 	.word	0x0800657b
 8006458:	08006409 	.word	0x08006409
 800645c:	08006409 	.word	0x08006409
 8006460:	080065bb 	.word	0x080065bb
 8006464:	08006409 	.word	0x08006409
 8006468:	080064bd 	.word	0x080064bd
 800646c:	08006409 	.word	0x08006409
 8006470:	08006409 	.word	0x08006409
 8006474:	08006583 	.word	0x08006583
 8006478:	680b      	ldr	r3, [r1, #0]
 800647a:	1d1a      	adds	r2, r3, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	600a      	str	r2, [r1, #0]
 8006480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006488:	2301      	movs	r3, #1
 800648a:	e0a3      	b.n	80065d4 <_printf_i+0x1f4>
 800648c:	6825      	ldr	r5, [r4, #0]
 800648e:	6808      	ldr	r0, [r1, #0]
 8006490:	062e      	lsls	r6, r5, #24
 8006492:	f100 0304 	add.w	r3, r0, #4
 8006496:	d50a      	bpl.n	80064ae <_printf_i+0xce>
 8006498:	6805      	ldr	r5, [r0, #0]
 800649a:	600b      	str	r3, [r1, #0]
 800649c:	2d00      	cmp	r5, #0
 800649e:	da03      	bge.n	80064a8 <_printf_i+0xc8>
 80064a0:	232d      	movs	r3, #45	; 0x2d
 80064a2:	426d      	negs	r5, r5
 80064a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a8:	485e      	ldr	r0, [pc, #376]	; (8006624 <_printf_i+0x244>)
 80064aa:	230a      	movs	r3, #10
 80064ac:	e019      	b.n	80064e2 <_printf_i+0x102>
 80064ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064b2:	6805      	ldr	r5, [r0, #0]
 80064b4:	600b      	str	r3, [r1, #0]
 80064b6:	bf18      	it	ne
 80064b8:	b22d      	sxthne	r5, r5
 80064ba:	e7ef      	b.n	800649c <_printf_i+0xbc>
 80064bc:	680b      	ldr	r3, [r1, #0]
 80064be:	6825      	ldr	r5, [r4, #0]
 80064c0:	1d18      	adds	r0, r3, #4
 80064c2:	6008      	str	r0, [r1, #0]
 80064c4:	0628      	lsls	r0, r5, #24
 80064c6:	d501      	bpl.n	80064cc <_printf_i+0xec>
 80064c8:	681d      	ldr	r5, [r3, #0]
 80064ca:	e002      	b.n	80064d2 <_printf_i+0xf2>
 80064cc:	0669      	lsls	r1, r5, #25
 80064ce:	d5fb      	bpl.n	80064c8 <_printf_i+0xe8>
 80064d0:	881d      	ldrh	r5, [r3, #0]
 80064d2:	4854      	ldr	r0, [pc, #336]	; (8006624 <_printf_i+0x244>)
 80064d4:	2f6f      	cmp	r7, #111	; 0x6f
 80064d6:	bf0c      	ite	eq
 80064d8:	2308      	moveq	r3, #8
 80064da:	230a      	movne	r3, #10
 80064dc:	2100      	movs	r1, #0
 80064de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064e2:	6866      	ldr	r6, [r4, #4]
 80064e4:	60a6      	str	r6, [r4, #8]
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	bfa2      	ittt	ge
 80064ea:	6821      	ldrge	r1, [r4, #0]
 80064ec:	f021 0104 	bicge.w	r1, r1, #4
 80064f0:	6021      	strge	r1, [r4, #0]
 80064f2:	b90d      	cbnz	r5, 80064f8 <_printf_i+0x118>
 80064f4:	2e00      	cmp	r6, #0
 80064f6:	d04d      	beq.n	8006594 <_printf_i+0x1b4>
 80064f8:	4616      	mov	r6, r2
 80064fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80064fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006502:	5dc7      	ldrb	r7, [r0, r7]
 8006504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006508:	462f      	mov	r7, r5
 800650a:	42bb      	cmp	r3, r7
 800650c:	460d      	mov	r5, r1
 800650e:	d9f4      	bls.n	80064fa <_printf_i+0x11a>
 8006510:	2b08      	cmp	r3, #8
 8006512:	d10b      	bne.n	800652c <_printf_i+0x14c>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	07df      	lsls	r7, r3, #31
 8006518:	d508      	bpl.n	800652c <_printf_i+0x14c>
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	6861      	ldr	r1, [r4, #4]
 800651e:	4299      	cmp	r1, r3
 8006520:	bfde      	ittt	le
 8006522:	2330      	movle	r3, #48	; 0x30
 8006524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800652c:	1b92      	subs	r2, r2, r6
 800652e:	6122      	str	r2, [r4, #16]
 8006530:	f8cd a000 	str.w	sl, [sp]
 8006534:	464b      	mov	r3, r9
 8006536:	aa03      	add	r2, sp, #12
 8006538:	4621      	mov	r1, r4
 800653a:	4640      	mov	r0, r8
 800653c:	f7ff fee2 	bl	8006304 <_printf_common>
 8006540:	3001      	adds	r0, #1
 8006542:	d14c      	bne.n	80065de <_printf_i+0x1fe>
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	b004      	add	sp, #16
 800654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654e:	4835      	ldr	r0, [pc, #212]	; (8006624 <_printf_i+0x244>)
 8006550:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	680e      	ldr	r6, [r1, #0]
 8006558:	061f      	lsls	r7, r3, #24
 800655a:	f856 5b04 	ldr.w	r5, [r6], #4
 800655e:	600e      	str	r6, [r1, #0]
 8006560:	d514      	bpl.n	800658c <_printf_i+0x1ac>
 8006562:	07d9      	lsls	r1, r3, #31
 8006564:	bf44      	itt	mi
 8006566:	f043 0320 	orrmi.w	r3, r3, #32
 800656a:	6023      	strmi	r3, [r4, #0]
 800656c:	b91d      	cbnz	r5, 8006576 <_printf_i+0x196>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	f023 0320 	bic.w	r3, r3, #32
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	2310      	movs	r3, #16
 8006578:	e7b0      	b.n	80064dc <_printf_i+0xfc>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	f043 0320 	orr.w	r3, r3, #32
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	2378      	movs	r3, #120	; 0x78
 8006584:	4828      	ldr	r0, [pc, #160]	; (8006628 <_printf_i+0x248>)
 8006586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800658a:	e7e3      	b.n	8006554 <_printf_i+0x174>
 800658c:	065e      	lsls	r6, r3, #25
 800658e:	bf48      	it	mi
 8006590:	b2ad      	uxthmi	r5, r5
 8006592:	e7e6      	b.n	8006562 <_printf_i+0x182>
 8006594:	4616      	mov	r6, r2
 8006596:	e7bb      	b.n	8006510 <_printf_i+0x130>
 8006598:	680b      	ldr	r3, [r1, #0]
 800659a:	6826      	ldr	r6, [r4, #0]
 800659c:	6960      	ldr	r0, [r4, #20]
 800659e:	1d1d      	adds	r5, r3, #4
 80065a0:	600d      	str	r5, [r1, #0]
 80065a2:	0635      	lsls	r5, r6, #24
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	d501      	bpl.n	80065ac <_printf_i+0x1cc>
 80065a8:	6018      	str	r0, [r3, #0]
 80065aa:	e002      	b.n	80065b2 <_printf_i+0x1d2>
 80065ac:	0671      	lsls	r1, r6, #25
 80065ae:	d5fb      	bpl.n	80065a8 <_printf_i+0x1c8>
 80065b0:	8018      	strh	r0, [r3, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	6123      	str	r3, [r4, #16]
 80065b6:	4616      	mov	r6, r2
 80065b8:	e7ba      	b.n	8006530 <_printf_i+0x150>
 80065ba:	680b      	ldr	r3, [r1, #0]
 80065bc:	1d1a      	adds	r2, r3, #4
 80065be:	600a      	str	r2, [r1, #0]
 80065c0:	681e      	ldr	r6, [r3, #0]
 80065c2:	6862      	ldr	r2, [r4, #4]
 80065c4:	2100      	movs	r1, #0
 80065c6:	4630      	mov	r0, r6
 80065c8:	f7f9 fe0a 	bl	80001e0 <memchr>
 80065cc:	b108      	cbz	r0, 80065d2 <_printf_i+0x1f2>
 80065ce:	1b80      	subs	r0, r0, r6
 80065d0:	6060      	str	r0, [r4, #4]
 80065d2:	6863      	ldr	r3, [r4, #4]
 80065d4:	6123      	str	r3, [r4, #16]
 80065d6:	2300      	movs	r3, #0
 80065d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065dc:	e7a8      	b.n	8006530 <_printf_i+0x150>
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	4632      	mov	r2, r6
 80065e2:	4649      	mov	r1, r9
 80065e4:	4640      	mov	r0, r8
 80065e6:	47d0      	blx	sl
 80065e8:	3001      	adds	r0, #1
 80065ea:	d0ab      	beq.n	8006544 <_printf_i+0x164>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	079b      	lsls	r3, r3, #30
 80065f0:	d413      	bmi.n	800661a <_printf_i+0x23a>
 80065f2:	68e0      	ldr	r0, [r4, #12]
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	4298      	cmp	r0, r3
 80065f8:	bfb8      	it	lt
 80065fa:	4618      	movlt	r0, r3
 80065fc:	e7a4      	b.n	8006548 <_printf_i+0x168>
 80065fe:	2301      	movs	r3, #1
 8006600:	4632      	mov	r2, r6
 8006602:	4649      	mov	r1, r9
 8006604:	4640      	mov	r0, r8
 8006606:	47d0      	blx	sl
 8006608:	3001      	adds	r0, #1
 800660a:	d09b      	beq.n	8006544 <_printf_i+0x164>
 800660c:	3501      	adds	r5, #1
 800660e:	68e3      	ldr	r3, [r4, #12]
 8006610:	9903      	ldr	r1, [sp, #12]
 8006612:	1a5b      	subs	r3, r3, r1
 8006614:	42ab      	cmp	r3, r5
 8006616:	dcf2      	bgt.n	80065fe <_printf_i+0x21e>
 8006618:	e7eb      	b.n	80065f2 <_printf_i+0x212>
 800661a:	2500      	movs	r5, #0
 800661c:	f104 0619 	add.w	r6, r4, #25
 8006620:	e7f5      	b.n	800660e <_printf_i+0x22e>
 8006622:	bf00      	nop
 8006624:	08006909 	.word	0x08006909
 8006628:	0800691a 	.word	0x0800691a

0800662c <memcpy>:
 800662c:	440a      	add	r2, r1
 800662e:	4291      	cmp	r1, r2
 8006630:	f100 33ff 	add.w	r3, r0, #4294967295
 8006634:	d100      	bne.n	8006638 <memcpy+0xc>
 8006636:	4770      	bx	lr
 8006638:	b510      	push	{r4, lr}
 800663a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800663e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006642:	4291      	cmp	r1, r2
 8006644:	d1f9      	bne.n	800663a <memcpy+0xe>
 8006646:	bd10      	pop	{r4, pc}

08006648 <memmove>:
 8006648:	4288      	cmp	r0, r1
 800664a:	b510      	push	{r4, lr}
 800664c:	eb01 0402 	add.w	r4, r1, r2
 8006650:	d902      	bls.n	8006658 <memmove+0x10>
 8006652:	4284      	cmp	r4, r0
 8006654:	4623      	mov	r3, r4
 8006656:	d807      	bhi.n	8006668 <memmove+0x20>
 8006658:	1e43      	subs	r3, r0, #1
 800665a:	42a1      	cmp	r1, r4
 800665c:	d008      	beq.n	8006670 <memmove+0x28>
 800665e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006666:	e7f8      	b.n	800665a <memmove+0x12>
 8006668:	4402      	add	r2, r0
 800666a:	4601      	mov	r1, r0
 800666c:	428a      	cmp	r2, r1
 800666e:	d100      	bne.n	8006672 <memmove+0x2a>
 8006670:	bd10      	pop	{r4, pc}
 8006672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800667a:	e7f7      	b.n	800666c <memmove+0x24>

0800667c <_free_r>:
 800667c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800667e:	2900      	cmp	r1, #0
 8006680:	d048      	beq.n	8006714 <_free_r+0x98>
 8006682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006686:	9001      	str	r0, [sp, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f1a1 0404 	sub.w	r4, r1, #4
 800668e:	bfb8      	it	lt
 8006690:	18e4      	addlt	r4, r4, r3
 8006692:	f000 f8d3 	bl	800683c <__malloc_lock>
 8006696:	4a20      	ldr	r2, [pc, #128]	; (8006718 <_free_r+0x9c>)
 8006698:	9801      	ldr	r0, [sp, #4]
 800669a:	6813      	ldr	r3, [r2, #0]
 800669c:	4615      	mov	r5, r2
 800669e:	b933      	cbnz	r3, 80066ae <_free_r+0x32>
 80066a0:	6063      	str	r3, [r4, #4]
 80066a2:	6014      	str	r4, [r2, #0]
 80066a4:	b003      	add	sp, #12
 80066a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066aa:	f000 b8cd 	b.w	8006848 <__malloc_unlock>
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	d90b      	bls.n	80066ca <_free_r+0x4e>
 80066b2:	6821      	ldr	r1, [r4, #0]
 80066b4:	1862      	adds	r2, r4, r1
 80066b6:	4293      	cmp	r3, r2
 80066b8:	bf04      	itt	eq
 80066ba:	681a      	ldreq	r2, [r3, #0]
 80066bc:	685b      	ldreq	r3, [r3, #4]
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	bf04      	itt	eq
 80066c2:	1852      	addeq	r2, r2, r1
 80066c4:	6022      	streq	r2, [r4, #0]
 80066c6:	602c      	str	r4, [r5, #0]
 80066c8:	e7ec      	b.n	80066a4 <_free_r+0x28>
 80066ca:	461a      	mov	r2, r3
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b10b      	cbz	r3, 80066d4 <_free_r+0x58>
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	d9fa      	bls.n	80066ca <_free_r+0x4e>
 80066d4:	6811      	ldr	r1, [r2, #0]
 80066d6:	1855      	adds	r5, r2, r1
 80066d8:	42a5      	cmp	r5, r4
 80066da:	d10b      	bne.n	80066f4 <_free_r+0x78>
 80066dc:	6824      	ldr	r4, [r4, #0]
 80066de:	4421      	add	r1, r4
 80066e0:	1854      	adds	r4, r2, r1
 80066e2:	42a3      	cmp	r3, r4
 80066e4:	6011      	str	r1, [r2, #0]
 80066e6:	d1dd      	bne.n	80066a4 <_free_r+0x28>
 80066e8:	681c      	ldr	r4, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	6053      	str	r3, [r2, #4]
 80066ee:	4421      	add	r1, r4
 80066f0:	6011      	str	r1, [r2, #0]
 80066f2:	e7d7      	b.n	80066a4 <_free_r+0x28>
 80066f4:	d902      	bls.n	80066fc <_free_r+0x80>
 80066f6:	230c      	movs	r3, #12
 80066f8:	6003      	str	r3, [r0, #0]
 80066fa:	e7d3      	b.n	80066a4 <_free_r+0x28>
 80066fc:	6825      	ldr	r5, [r4, #0]
 80066fe:	1961      	adds	r1, r4, r5
 8006700:	428b      	cmp	r3, r1
 8006702:	bf04      	itt	eq
 8006704:	6819      	ldreq	r1, [r3, #0]
 8006706:	685b      	ldreq	r3, [r3, #4]
 8006708:	6063      	str	r3, [r4, #4]
 800670a:	bf04      	itt	eq
 800670c:	1949      	addeq	r1, r1, r5
 800670e:	6021      	streq	r1, [r4, #0]
 8006710:	6054      	str	r4, [r2, #4]
 8006712:	e7c7      	b.n	80066a4 <_free_r+0x28>
 8006714:	b003      	add	sp, #12
 8006716:	bd30      	pop	{r4, r5, pc}
 8006718:	200001d4 	.word	0x200001d4

0800671c <_malloc_r>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	1ccd      	adds	r5, r1, #3
 8006720:	f025 0503 	bic.w	r5, r5, #3
 8006724:	3508      	adds	r5, #8
 8006726:	2d0c      	cmp	r5, #12
 8006728:	bf38      	it	cc
 800672a:	250c      	movcc	r5, #12
 800672c:	2d00      	cmp	r5, #0
 800672e:	4606      	mov	r6, r0
 8006730:	db01      	blt.n	8006736 <_malloc_r+0x1a>
 8006732:	42a9      	cmp	r1, r5
 8006734:	d903      	bls.n	800673e <_malloc_r+0x22>
 8006736:	230c      	movs	r3, #12
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	2000      	movs	r0, #0
 800673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673e:	f000 f87d 	bl	800683c <__malloc_lock>
 8006742:	4921      	ldr	r1, [pc, #132]	; (80067c8 <_malloc_r+0xac>)
 8006744:	680a      	ldr	r2, [r1, #0]
 8006746:	4614      	mov	r4, r2
 8006748:	b99c      	cbnz	r4, 8006772 <_malloc_r+0x56>
 800674a:	4f20      	ldr	r7, [pc, #128]	; (80067cc <_malloc_r+0xb0>)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	b923      	cbnz	r3, 800675a <_malloc_r+0x3e>
 8006750:	4621      	mov	r1, r4
 8006752:	4630      	mov	r0, r6
 8006754:	f000 f862 	bl	800681c <_sbrk_r>
 8006758:	6038      	str	r0, [r7, #0]
 800675a:	4629      	mov	r1, r5
 800675c:	4630      	mov	r0, r6
 800675e:	f000 f85d 	bl	800681c <_sbrk_r>
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	d123      	bne.n	80067ae <_malloc_r+0x92>
 8006766:	230c      	movs	r3, #12
 8006768:	6033      	str	r3, [r6, #0]
 800676a:	4630      	mov	r0, r6
 800676c:	f000 f86c 	bl	8006848 <__malloc_unlock>
 8006770:	e7e3      	b.n	800673a <_malloc_r+0x1e>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	1b5b      	subs	r3, r3, r5
 8006776:	d417      	bmi.n	80067a8 <_malloc_r+0x8c>
 8006778:	2b0b      	cmp	r3, #11
 800677a:	d903      	bls.n	8006784 <_malloc_r+0x68>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	441c      	add	r4, r3
 8006780:	6025      	str	r5, [r4, #0]
 8006782:	e004      	b.n	800678e <_malloc_r+0x72>
 8006784:	6863      	ldr	r3, [r4, #4]
 8006786:	42a2      	cmp	r2, r4
 8006788:	bf0c      	ite	eq
 800678a:	600b      	streq	r3, [r1, #0]
 800678c:	6053      	strne	r3, [r2, #4]
 800678e:	4630      	mov	r0, r6
 8006790:	f000 f85a 	bl	8006848 <__malloc_unlock>
 8006794:	f104 000b 	add.w	r0, r4, #11
 8006798:	1d23      	adds	r3, r4, #4
 800679a:	f020 0007 	bic.w	r0, r0, #7
 800679e:	1ac2      	subs	r2, r0, r3
 80067a0:	d0cc      	beq.n	800673c <_malloc_r+0x20>
 80067a2:	1a1b      	subs	r3, r3, r0
 80067a4:	50a3      	str	r3, [r4, r2]
 80067a6:	e7c9      	b.n	800673c <_malloc_r+0x20>
 80067a8:	4622      	mov	r2, r4
 80067aa:	6864      	ldr	r4, [r4, #4]
 80067ac:	e7cc      	b.n	8006748 <_malloc_r+0x2c>
 80067ae:	1cc4      	adds	r4, r0, #3
 80067b0:	f024 0403 	bic.w	r4, r4, #3
 80067b4:	42a0      	cmp	r0, r4
 80067b6:	d0e3      	beq.n	8006780 <_malloc_r+0x64>
 80067b8:	1a21      	subs	r1, r4, r0
 80067ba:	4630      	mov	r0, r6
 80067bc:	f000 f82e 	bl	800681c <_sbrk_r>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d1dd      	bne.n	8006780 <_malloc_r+0x64>
 80067c4:	e7cf      	b.n	8006766 <_malloc_r+0x4a>
 80067c6:	bf00      	nop
 80067c8:	200001d4 	.word	0x200001d4
 80067cc:	200001d8 	.word	0x200001d8

080067d0 <_realloc_r>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	4607      	mov	r7, r0
 80067d4:	4614      	mov	r4, r2
 80067d6:	460e      	mov	r6, r1
 80067d8:	b921      	cbnz	r1, 80067e4 <_realloc_r+0x14>
 80067da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067de:	4611      	mov	r1, r2
 80067e0:	f7ff bf9c 	b.w	800671c <_malloc_r>
 80067e4:	b922      	cbnz	r2, 80067f0 <_realloc_r+0x20>
 80067e6:	f7ff ff49 	bl	800667c <_free_r>
 80067ea:	4625      	mov	r5, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f0:	f000 f830 	bl	8006854 <_malloc_usable_size_r>
 80067f4:	42a0      	cmp	r0, r4
 80067f6:	d20f      	bcs.n	8006818 <_realloc_r+0x48>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4638      	mov	r0, r7
 80067fc:	f7ff ff8e 	bl	800671c <_malloc_r>
 8006800:	4605      	mov	r5, r0
 8006802:	2800      	cmp	r0, #0
 8006804:	d0f2      	beq.n	80067ec <_realloc_r+0x1c>
 8006806:	4631      	mov	r1, r6
 8006808:	4622      	mov	r2, r4
 800680a:	f7ff ff0f 	bl	800662c <memcpy>
 800680e:	4631      	mov	r1, r6
 8006810:	4638      	mov	r0, r7
 8006812:	f7ff ff33 	bl	800667c <_free_r>
 8006816:	e7e9      	b.n	80067ec <_realloc_r+0x1c>
 8006818:	4635      	mov	r5, r6
 800681a:	e7e7      	b.n	80067ec <_realloc_r+0x1c>

0800681c <_sbrk_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d06      	ldr	r5, [pc, #24]	; (8006838 <_sbrk_r+0x1c>)
 8006820:	2300      	movs	r3, #0
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fa fb9a 	bl	8000f60 <_sbrk>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_sbrk_r+0x1a>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_sbrk_r+0x1a>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	20000278 	.word	0x20000278

0800683c <__malloc_lock>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__malloc_lock+0x8>)
 800683e:	f000 b811 	b.w	8006864 <__retarget_lock_acquire_recursive>
 8006842:	bf00      	nop
 8006844:	20000280 	.word	0x20000280

08006848 <__malloc_unlock>:
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <__malloc_unlock+0x8>)
 800684a:	f000 b80c 	b.w	8006866 <__retarget_lock_release_recursive>
 800684e:	bf00      	nop
 8006850:	20000280 	.word	0x20000280

08006854 <_malloc_usable_size_r>:
 8006854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006858:	1f18      	subs	r0, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	bfbc      	itt	lt
 800685e:	580b      	ldrlt	r3, [r1, r0]
 8006860:	18c0      	addlt	r0, r0, r3
 8006862:	4770      	bx	lr

08006864 <__retarget_lock_acquire_recursive>:
 8006864:	4770      	bx	lr

08006866 <__retarget_lock_release_recursive>:
 8006866:	4770      	bx	lr

08006868 <_init>:
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686a:	bf00      	nop
 800686c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686e:	bc08      	pop	{r3}
 8006870:	469e      	mov	lr, r3
 8006872:	4770      	bx	lr

08006874 <_fini>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	bf00      	nop
 8006878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687a:	bc08      	pop	{r3}
 800687c:	469e      	mov	lr, r3
 800687e:	4770      	bx	lr
