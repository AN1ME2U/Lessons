
LED driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006374  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006504  08006504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b0  080065b0  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b8  080065b8  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  080065c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020148  2**0
                  CONTENTS
 10 .bss          0000013c  20000148  20000148  00020148  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020148  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f116  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e9  00000000  00000000  0002f28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  00031478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000990  00000000  00000000  00031ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021348  00000000  00000000  00032858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eae1  00000000  00000000  00053ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c564b  00000000  00000000  00062681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127ccc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cd4  00000000  00000000  00127d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000148 	.word	0x20000148
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064ec 	.word	0x080064ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	080064ec 	.word	0x080064ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MESSAGE_ANALYZER>:
char MODE = 0;
char RX_ADJ = 0;
char MASK1[3] = {"led"};
char TX[50] = {0};

void MESSAGE_ANALYZER(void){																			//Compare input buffer with example if finds '/'
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	if(RX[0] == '/'){
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MESSAGE_ANALYZER+0x88>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b2f      	cmp	r3, #47	; 0x2f
 8000584:	d12d      	bne.n	80005e2 <MESSAGE_ANALYZER+0x6a>
		for(uint8_t pos = 0; pos < 3; pos++){
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	e011      	b.n	80005b0 <MESSAGE_ANALYZER+0x38>
			if(RX[1+pos] == MASK1[pos]){
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	3301      	adds	r3, #1
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <MESSAGE_ANALYZER+0x88>)
 8000592:	5cd2      	ldrb	r2, [r2, r3]
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	491b      	ldr	r1, [pc, #108]	; (8000604 <MESSAGE_ANALYZER+0x8c>)
 8000598:	5ccb      	ldrb	r3, [r1, r3]
 800059a:	429a      	cmp	r2, r3
 800059c:	d105      	bne.n	80005aa <MESSAGE_ANALYZER+0x32>
				MATCHES++;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <MESSAGE_ANALYZER+0x90>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MESSAGE_ANALYZER+0x90>)
 80005a8:	701a      	strb	r2, [r3, #0]
		for(uint8_t pos = 0; pos < 3; pos++){
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	3301      	adds	r3, #1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d9ea      	bls.n	800058c <MESSAGE_ANALYZER+0x14>
			}
		}
		if(MATCHES == 3){
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MESSAGE_ANALYZER+0x90>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d105      	bne.n	80005ca <MESSAGE_ANALYZER+0x52>
			MATCHES = 0;
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MESSAGE_ANALYZER+0x90>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
			HID();
 80005c4:	f000 f826 	bl	8000614 <HID>
			HAL_UART_Transmit(&huart3, (uint8_t *)UNkNOWN_COM, strlen(UNkNOWN_COM), 1000);				//If there is no matches print unknown command mesage
		}
	} else{																								//If there is no '/' print unknown command mesage
		HAL_UART_Transmit(&huart3, (uint8_t *)UNkNOWN_COM, strlen(UNkNOWN_COM), 1000);
	}
}
 80005c8:	e016      	b.n	80005f8 <MESSAGE_ANALYZER+0x80>
			HAL_UART_Transmit(&huart3, (uint8_t *)UNkNOWN_COM, strlen(UNkNOWN_COM), 1000);				//If there is no matches print unknown command mesage
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <MESSAGE_ANALYZER+0x94>)
 80005cc:	f7ff fe00 	bl	80001d0 <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d8:	490c      	ldr	r1, [pc, #48]	; (800060c <MESSAGE_ANALYZER+0x94>)
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <MESSAGE_ANALYZER+0x98>)
 80005dc:	f004 fa2b 	bl	8004a36 <HAL_UART_Transmit>
}
 80005e0:	e00a      	b.n	80005f8 <MESSAGE_ANALYZER+0x80>
		HAL_UART_Transmit(&huart3, (uint8_t *)UNkNOWN_COM, strlen(UNkNOWN_COM), 1000);
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <MESSAGE_ANALYZER+0x94>)
 80005e4:	f7ff fdf4 	bl	80001d0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f0:	4906      	ldr	r1, [pc, #24]	; (800060c <MESSAGE_ANALYZER+0x94>)
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <MESSAGE_ANALYZER+0x98>)
 80005f4:	f004 fa1f 	bl	8004a36 <HAL_UART_Transmit>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200001ac 	.word	0x200001ac
 8000604:	200000c0 	.word	0x200000c0
 8000608:	20000164 	.word	0x20000164
 800060c:	20000000 	.word	0x20000000
 8000610:	2000022c 	.word	0x2000022c

08000614 <HID>:

void HID(void){																							//Mode selector
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive_IT(&huart3);
 8000618:	4815      	ldr	r0, [pc, #84]	; (8000670 <HID+0x5c>)
 800061a:	f004 fb71 	bl	8004d00 <HAL_UART_AbortReceive_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)MESG, strlen(MESG), 1000);
 800061e:	4815      	ldr	r0, [pc, #84]	; (8000674 <HID+0x60>)
 8000620:	f7ff fdd6 	bl	80001d0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062c:	4911      	ldr	r1, [pc, #68]	; (8000674 <HID+0x60>)
 800062e:	4810      	ldr	r0, [pc, #64]	; (8000670 <HID+0x5c>)
 8000630:	f004 fa01 	bl	8004a36 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)&MODE, 1, 1000);
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	2201      	movs	r2, #1
 800063a:	490f      	ldr	r1, [pc, #60]	; (8000678 <HID+0x64>)
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <HID+0x5c>)
 800063e:	f004 fa8c 	bl	8004b5a <HAL_UART_Receive>
	if(MODE == '1'){
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HID+0x64>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b31      	cmp	r3, #49	; 0x31
 8000648:	d102      	bne.n	8000650 <HID+0x3c>
		MODE_1();
 800064a:	f000 f817 	bl	800067c <MODE_1>
	}else if (MODE == '3'){
		MODE_3();
	} else {

	}
}
 800064e:	e00c      	b.n	800066a <HID+0x56>
	}else if(MODE == '2'){
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HID+0x64>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b32      	cmp	r3, #50	; 0x32
 8000656:	d102      	bne.n	800065e <HID+0x4a>
		MODE_2();
 8000658:	f000 f8a6 	bl	80007a8 <MODE_2>
}
 800065c:	e005      	b.n	800066a <HID+0x56>
	}else if (MODE == '3'){
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HID+0x64>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b33      	cmp	r3, #51	; 0x33
 8000664:	d101      	bne.n	800066a <HID+0x56>
		MODE_3();
 8000666:	f000 f8ff 	bl	8000868 <MODE_3>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000022c 	.word	0x2000022c
 8000674:	20000014 	.word	0x20000014
 8000678:	2000016c 	.word	0x2000016c

0800067c <MODE_1>:

void MODE_1(void){																						//Handler for mode 1
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	work = 1;
 8000680:	4b42      	ldr	r3, [pc, #264]	; (800078c <MODE_1+0x110>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 8000686:	e07a      	b.n	800077e <MODE_1+0x102>
		sprintf(TX, "Set LED %d duty cycle to %d \r", VALUES[0], VALUES[1]);
 8000688:	4b41      	ldr	r3, [pc, #260]	; (8000790 <MODE_1+0x114>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b40      	ldr	r3, [pc, #256]	; (8000790 <MODE_1+0x114>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	4940      	ldr	r1, [pc, #256]	; (8000794 <MODE_1+0x118>)
 8000694:	4840      	ldr	r0, [pc, #256]	; (8000798 <MODE_1+0x11c>)
 8000696:	f005 fafb 	bl	8005c90 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)TX, strlen(TX), 1000);
 800069a:	483f      	ldr	r0, [pc, #252]	; (8000798 <MODE_1+0x11c>)
 800069c:	f7ff fd98 	bl	80001d0 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	493b      	ldr	r1, [pc, #236]	; (8000798 <MODE_1+0x11c>)
 80006aa:	483c      	ldr	r0, [pc, #240]	; (800079c <MODE_1+0x120>)
 80006ac:	f004 f9c3 	bl	8004a36 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)&RX_ADJ, 1, 1000);
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	2201      	movs	r2, #1
 80006b6:	493a      	ldr	r1, [pc, #232]	; (80007a0 <MODE_1+0x124>)
 80006b8:	4838      	ldr	r0, [pc, #224]	; (800079c <MODE_1+0x120>)
 80006ba:	f004 fa4e 	bl	8004b5a <HAL_UART_Receive>
		if(RX_ADJ == '\r'){
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <MODE_1+0x124>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0d      	cmp	r3, #13
 80006c4:	d120      	bne.n	8000708 <MODE_1+0x8c>
			(selector != 1) ? (selector++) : (selector = 0, LED_WRITE(VALUES[0], VALUES[1]),VALUES[0] = 0, VALUES[1] = 0, work = 0);
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <MODE_1+0x128>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d006      	beq.n	80006dc <MODE_1+0x60>
 80006ce:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <MODE_1+0x128>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <MODE_1+0x128>)
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e050      	b.n	800077e <MODE_1+0x102>
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <MODE_1+0x128>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MODE_1+0x114>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4a2a      	ldr	r2, [pc, #168]	; (8000790 <MODE_1+0x114>)
 80006e8:	7852      	ldrb	r2, [r2, #1]
 80006ea:	b292      	uxth	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f9ee 	bl	8000ad0 <LED_WRITE>
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MODE_1+0x114>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MODE_1+0x114>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	705a      	strb	r2, [r3, #1]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <MODE_1+0x110>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e03a      	b.n	800077e <MODE_1+0x102>
		} else if(RX_ADJ == '-'){
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <MODE_1+0x124>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b2d      	cmp	r3, #45	; 0x2d
 800070e:	d10f      	bne.n	8000730 <MODE_1+0xb4>
			(VALUES[selector] != 0) ? (VALUES[selector]--) : (0);
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MODE_1+0x128>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MODE_1+0x114>)
 8000718:	5c9b      	ldrb	r3, [r3, r2]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d02f      	beq.n	800077e <MODE_1+0x102>
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MODE_1+0x128>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MODE_1+0x114>)
 8000724:	5cd2      	ldrb	r2, [r2, r3]
 8000726:	3a01      	subs	r2, #1
 8000728:	b2d1      	uxtb	r1, r2
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <MODE_1+0x114>)
 800072c:	54d1      	strb	r1, [r2, r3]
 800072e:	e026      	b.n	800077e <MODE_1+0x102>
		} else if(RX_ADJ == '+'){
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MODE_1+0x124>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b2b      	cmp	r3, #43	; 0x2b
 8000736:	d122      	bne.n	800077e <MODE_1+0x102>
			(selector == 0) ? ((VALUES[selector] < 16) ? (VALUES[selector]++) : (0)) : ((VALUES[selector] < 100) ? (VALUES[selector]++) : (0));
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MODE_1+0x128>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10f      	bne.n	8000760 <MODE_1+0xe4>
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MODE_1+0x128>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MODE_1+0x114>)
 8000748:	5c9b      	ldrb	r3, [r3, r2]
 800074a:	2b0f      	cmp	r3, #15
 800074c:	d817      	bhi.n	800077e <MODE_1+0x102>
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MODE_1+0x128>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <MODE_1+0x114>)
 8000754:	5cd2      	ldrb	r2, [r2, r3]
 8000756:	3201      	adds	r2, #1
 8000758:	b2d1      	uxtb	r1, r2
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <MODE_1+0x114>)
 800075c:	54d1      	strb	r1, [r2, r3]
 800075e:	e00e      	b.n	800077e <MODE_1+0x102>
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MODE_1+0x128>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MODE_1+0x114>)
 8000768:	5c9b      	ldrb	r3, [r3, r2]
 800076a:	2b63      	cmp	r3, #99	; 0x63
 800076c:	d807      	bhi.n	800077e <MODE_1+0x102>
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MODE_1+0x128>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a07      	ldr	r2, [pc, #28]	; (8000790 <MODE_1+0x114>)
 8000774:	5cd2      	ldrb	r2, [r2, r3]
 8000776:	3201      	adds	r2, #1
 8000778:	b2d1      	uxtb	r1, r2
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <MODE_1+0x114>)
 800077c:	54d1      	strb	r1, [r2, r3]
	while(work == 1){
 800077e:	4b03      	ldr	r3, [pc, #12]	; (800078c <MODE_1+0x110>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d080      	beq.n	8000688 <MODE_1+0xc>
		}
	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000016a 	.word	0x2000016a
 8000790:	20000168 	.word	0x20000168
 8000794:	08006504 	.word	0x08006504
 8000798:	20000170 	.word	0x20000170
 800079c:	2000022c 	.word	0x2000022c
 80007a0:	2000016d 	.word	0x2000016d
 80007a4:	2000016b 	.word	0x2000016b

080007a8 <MODE_2>:

void MODE_2(void){																						//Handler for mode 2
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	work = 1;
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MODE_2+0xa8>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 80007b2:	e045      	b.n	8000840 <MODE_2+0x98>
		sprintf(TX, "Set LED PRESCALLER value to %d \r", VALUES[0]);
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MODE_2+0xac>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4927      	ldr	r1, [pc, #156]	; (8000858 <MODE_2+0xb0>)
 80007bc:	4827      	ldr	r0, [pc, #156]	; (800085c <MODE_2+0xb4>)
 80007be:	f005 fa67 	bl	8005c90 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)TX, strlen(TX), 1000);
 80007c2:	4826      	ldr	r0, [pc, #152]	; (800085c <MODE_2+0xb4>)
 80007c4:	f7ff fd04 	bl	80001d0 <strlen>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	4922      	ldr	r1, [pc, #136]	; (800085c <MODE_2+0xb4>)
 80007d2:	4823      	ldr	r0, [pc, #140]	; (8000860 <MODE_2+0xb8>)
 80007d4:	f004 f92f 	bl	8004a36 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)&RX_ADJ, 1, 1000);
 80007d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007dc:	2201      	movs	r2, #1
 80007de:	4921      	ldr	r1, [pc, #132]	; (8000864 <MODE_2+0xbc>)
 80007e0:	481f      	ldr	r0, [pc, #124]	; (8000860 <MODE_2+0xb8>)
 80007e2:	f004 f9ba 	bl	8004b5a <HAL_UART_Receive>
		if(RX_ADJ == '\r'){
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MODE_2+0xbc>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b0d      	cmp	r3, #13
 80007ec:	d10b      	bne.n	8000806 <MODE_2+0x5e>
			LED_PRESCALLER_SET(VALUES[0]);
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MODE_2+0xac>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f9aa 	bl	8000b4c <LED_PRESCALLER_SET>
			VALUES[0] = 0;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MODE_2+0xac>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
			work = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MODE_2+0xa8>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e01c      	b.n	8000840 <MODE_2+0x98>
		} else if(RX_ADJ == '-'){
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MODE_2+0xbc>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b2d      	cmp	r3, #45	; 0x2d
 800080c:	d10a      	bne.n	8000824 <MODE_2+0x7c>
			(VALUES[0] != 0) ? (VALUES[0]--) : (0);
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MODE_2+0xac>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d014      	beq.n	8000840 <MODE_2+0x98>
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MODE_2+0xac>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	3b01      	subs	r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MODE_2+0xac>)
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e00d      	b.n	8000840 <MODE_2+0x98>
		} else if(RX_ADJ == '+'){
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MODE_2+0xbc>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b2b      	cmp	r3, #43	; 0x2b
 800082a:	d109      	bne.n	8000840 <MODE_2+0x98>
			(VALUES[0] < 254) ? (VALUES[0]++) : (0);
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MODE_2+0xac>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2bfd      	cmp	r3, #253	; 0xfd
 8000832:	d805      	bhi.n	8000840 <MODE_2+0x98>
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MODE_2+0xac>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <MODE_2+0xac>)
 800083e:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <MODE_2+0xa8>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d0b5      	beq.n	80007b4 <MODE_2+0xc>
		}
	}
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000016a 	.word	0x2000016a
 8000854:	20000168 	.word	0x20000168
 8000858:	08006524 	.word	0x08006524
 800085c:	20000170 	.word	0x20000170
 8000860:	2000022c 	.word	0x2000022c
 8000864:	2000016d 	.word	0x2000016d

08000868 <MODE_3>:

void MODE_3(void){																						//Handler for mode 3
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	work = 1;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MODE_3+0x84>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 8000872:	e034      	b.n	80008de <MODE_3+0x76>
		sprintf(TX, "Set LED sleep mode to %d\r", VALUES[0]);
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MODE_3+0x88>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	491e      	ldr	r1, [pc, #120]	; (80008f4 <MODE_3+0x8c>)
 800087c:	481e      	ldr	r0, [pc, #120]	; (80008f8 <MODE_3+0x90>)
 800087e:	f005 fa07 	bl	8005c90 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)TX, strlen(TX), 1000);
 8000882:	481d      	ldr	r0, [pc, #116]	; (80008f8 <MODE_3+0x90>)
 8000884:	f7ff fca4 	bl	80001d0 <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000890:	4919      	ldr	r1, [pc, #100]	; (80008f8 <MODE_3+0x90>)
 8000892:	481a      	ldr	r0, [pc, #104]	; (80008fc <MODE_3+0x94>)
 8000894:	f004 f8cf 	bl	8004a36 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)&RX_ADJ, 1, 1000);
 8000898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089c:	2201      	movs	r2, #1
 800089e:	4918      	ldr	r1, [pc, #96]	; (8000900 <MODE_3+0x98>)
 80008a0:	4816      	ldr	r0, [pc, #88]	; (80008fc <MODE_3+0x94>)
 80008a2:	f004 f95a 	bl	8004b5a <HAL_UART_Receive>
		if(RX_ADJ == '\r'){
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MODE_3+0x98>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b0d      	cmp	r3, #13
 80008ac:	d108      	bne.n	80008c0 <MODE_3+0x58>
			SLEEP_MODE(VALUES[0]);
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MODE_3+0x88>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f996 	bl	8000be4 <SLEEP_MODE>
			work = 0;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MODE_3+0x84>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e00e      	b.n	80008de <MODE_3+0x76>
		} else if(RX_ADJ == '-' || RX_ADJ == '+'){
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MODE_3+0x98>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b2d      	cmp	r3, #45	; 0x2d
 80008c6:	d003      	beq.n	80008d0 <MODE_3+0x68>
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <MODE_3+0x98>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b2b      	cmp	r3, #43	; 0x2b
 80008ce:	d106      	bne.n	80008de <MODE_3+0x76>
			VALUES[0] ^= 1 ;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MODE_3+0x88>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	f083 0301 	eor.w	r3, r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MODE_3+0x88>)
 80008dc:	701a      	strb	r2, [r3, #0]
	while(work == 1){
 80008de:	4b03      	ldr	r3, [pc, #12]	; (80008ec <MODE_3+0x84>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d0c6      	beq.n	8000874 <MODE_3+0xc>
		}
	}
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000016a 	.word	0x2000016a
 80008f0:	20000168 	.word	0x20000168
 80008f4:	08006548 	.word	0x08006548
 80008f8:	20000170 	.word	0x20000170
 80008fc:	2000022c 	.word	0x2000022c
 8000900:	2000016d 	.word	0x2000016d

08000904 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_GPIO_Init+0x98>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <MX_GPIO_Init+0x98>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_GPIO_Init+0x98>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_GPIO_Init+0x98>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <MX_GPIO_Init+0x98>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_GPIO_Init+0x98>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_GPIO_Init+0x98>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <MX_GPIO_Init+0x98>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_GPIO_Init+0x98>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0x9c>)
 8000974:	f000 ff62 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_GPIO_Init+0x9c>)
 8000990:	f000 fdb8 	bl	8001504 <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400

080009a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <MX_I2C1_Init+0x58>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009b0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80009b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_I2C1_Init+0x54>)
 80009e4:	f000 ff44 	bl	8001870 <HAL_I2C_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80009ee:	f000 f9c5 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200001d8 	.word	0x200001d8
 80009fc:	40005400 	.word	0x40005400

08000a00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_I2C_MspInit+0x94>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d134      	bne.n	8000a8c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a44:	2312      	movs	r3, #18
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a50:	2304      	movs	r3, #4
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4810      	ldr	r0, [pc, #64]	; (8000a9c <HAL_I2C_MspInit+0x9c>)
 8000a5c:	f000 fd52 	bl	8001504 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_I2C_MspInit+0x98>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	201f      	movs	r0, #31
 8000a82:	f000 fc68 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a86:	201f      	movs	r0, #31
 8000a88:	f000 fc81 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40005400 	.word	0x40005400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <DRIVER_SETUP>:
uint8_t DEFAULT_SETUP = 0x21;
uint8_t TRANSMIT[4] = {0};
uint8_t REG_DATA = 0;
extern char DONE[13];

void DRIVER_SETUP(void){																								//Load base configuration to external driver
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write (I2C_HANDLER, DRIVER_ADDR, MODE1, 1, (uint8_t *)&DEFAULT_SETUP, 1, 1000);
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	2301      	movs	r3, #1
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <DRIVER_SETUP+0x28>)
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <DRIVER_SETUP+0x2c>)
 8000abc:	f001 f81c 	bl	8001af8 <HAL_I2C_Mem_Write>
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000c3 	.word	0x200000c3
 8000acc:	200001d8 	.word	0x200001d8

08000ad0 <LED_WRITE>:

void LED_WRITE(uint8_t led_num, uint16_t percent){																		//Writes a new value in pwm control registers of driver
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	80bb      	strh	r3, [r7, #4]
	(led_num == 16) ? (led_num = ALL_LED) : (led_num = 6+(led_num*4));
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b10      	cmp	r3, #16
 8000ae4:	d102      	bne.n	8000aec <LED_WRITE+0x1c>
 8000ae6:	23fa      	movs	r3, #250	; 0xfa
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	e004      	b.n	8000af6 <LED_WRITE+0x26>
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	3306      	adds	r3, #6
 8000af4:	71fb      	strb	r3, [r7, #7]
	uint16_t duty = 4095*percent/100;
 8000af6:	88ba      	ldrh	r2, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	031b      	lsls	r3, r3, #12
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <LED_WRITE+0x70>)
 8000b00:	fb82 1203 	smull	r1, r2, r2, r3
 8000b04:	1152      	asrs	r2, r2, #5
 8000b06:	17db      	asrs	r3, r3, #31
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	81fb      	strh	r3, [r7, #14]
	TRANSMIT[2] = (uint8_t)(duty >> 8);
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <LED_WRITE+0x74>)
 8000b16:	709a      	strb	r2, [r3, #2]
	TRANSMIT[3] = (uint8_t)duty;
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <LED_WRITE+0x74>)
 8000b1e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Mem_Write_IT(I2C_HANDLER, DRIVER_ADDR, led_num, 1, (uint8_t *)TRANSMIT, 4);
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	2304      	movs	r3, #4
 8000b26:	9301      	str	r3, [sp, #4]
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <LED_WRITE+0x74>)
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <LED_WRITE+0x78>)
 8000b32:	f001 fb01 	bl	8002138 <HAL_I2C_Mem_Write_IT>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	51eb851f 	.word	0x51eb851f
 8000b44:	200001a4 	.word	0x200001a4
 8000b48:	200001d8 	.word	0x200001d8

08000b4c <LED_PRESCALLER_SET>:

void LED_PRESCALLER_SET(uint8_t presc_val){																				//Writes new value to prescaler register of driver
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af04      	add	r7, sp, #16
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	SLEEP_MODE(ON);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f000 f844 	bl	8000be4 <SLEEP_MODE>
	TRANSMIT[2] = presc_val;
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <LED_PRESCALLER_SET+0x4c>)
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	7093      	strb	r3, [r2, #2]
	HAL_I2C_Mem_Write(I2C_HANDLER, DRIVER_ADDR, PRESC_ADDR, 1, (uint8_t *)&TRANSMIT[2], 1, 1000);
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	9302      	str	r3, [sp, #8]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <LED_PRESCALLER_SET+0x50>)
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2301      	movs	r3, #1
 8000b72:	22fe      	movs	r2, #254	; 0xfe
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <LED_PRESCALLER_SET+0x54>)
 8000b78:	f000 ffbe 	bl	8001af8 <HAL_I2C_Mem_Write>
	SLEEP_MODE(OFF);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 f831 	bl	8000be4 <SLEEP_MODE>
	HAL_UART_Transmit(&huart3, (uint8_t *)DONE, 13, 1000);
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	220d      	movs	r2, #13
 8000b88:	4906      	ldr	r1, [pc, #24]	; (8000ba4 <LED_PRESCALLER_SET+0x58>)
 8000b8a:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <LED_PRESCALLER_SET+0x5c>)
 8000b8c:	f003 ff53 	bl	8004a36 <HAL_UART_Transmit>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200001a4 	.word	0x200001a4
 8000b9c:	200001a6 	.word	0x200001a6
 8000ba0:	200001d8 	.word	0x200001d8
 8000ba4:	200000c8 	.word	0x200000c8
 8000ba8:	2000022c 	.word	0x2000022c

08000bac <I2C_READER>:

void I2C_READER(uint8_t reg_addr){																						//Reader for I2C device register
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af04      	add	r7, sp, #16
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, DRIVER_ADDR, reg_addr, 1, (uint8_t *)&REG_DATA , 1, 1000);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	9302      	str	r3, [sp, #8]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <I2C_READER+0x30>)
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <I2C_READER+0x34>)
 8000bce:	f001 f88d 	bl	8001cec <HAL_I2C_Mem_Read>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001a8 	.word	0x200001a8
 8000be0:	200001d8 	.word	0x200001d8

08000be4 <SLEEP_MODE>:


void SLEEP_MODE(uint8_t state){																							//Disable and enable sleep mode
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	I2C_READER(MODE1);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ffdc 	bl	8000bac <I2C_READER>
	REG_DATA &= (0 << 4);
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <SLEEP_MODE+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
	REG_DATA |= (state << 4);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	b25a      	sxtb	r2, r3
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <SLEEP_MODE+0x64>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <SLEEP_MODE+0x64>)
 8000c0e:	701a      	strb	r2, [r3, #0]
	TRANSMIT[2] = REG_DATA;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <SLEEP_MODE+0x64>)
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <SLEEP_MODE+0x68>)
 8000c16:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Write(I2C_HANDLER, DRIVER_ADDR, MODE1, 1, (uint8_t *)&TRANSMIT[2], 1, 1000);
 8000c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <SLEEP_MODE+0x6c>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2180      	movs	r1, #128	; 0x80
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <SLEEP_MODE+0x70>)
 8000c2e:	f000 ff63 	bl	8001af8 <HAL_I2C_Mem_Write>
	HAL_UART_Transmit(&huart3, (uint8_t *)DONE, 13, 1000);
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	220d      	movs	r2, #13
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <SLEEP_MODE+0x74>)
 8000c3a:	4808      	ldr	r0, [pc, #32]	; (8000c5c <SLEEP_MODE+0x78>)
 8000c3c:	f003 fefb 	bl	8004a36 <HAL_UART_Transmit>

}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001a8 	.word	0x200001a8
 8000c4c:	200001a4 	.word	0x200001a4
 8000c50:	200001a6 	.word	0x200001a6
 8000c54:	200001d8 	.word	0x200001d8
 8000c58:	200000c8 	.word	0x200000c8
 8000c5c:	2000022c 	.word	0x2000022c

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c64:	f000 fa2a 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c68:	f000 f820 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6c:	f7ff fe4a 	bl	8000904 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c70:	f7ff fe98 	bl	80009a4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000c74:	f000 f97e 	bl	8000f74 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <main+0x3c>)
 8000c7e:	f000 fddd 	bl	800183c <HAL_GPIO_WritePin>
  DRIVER_SETUP();
 8000c82:	f7ff ff0d 	bl	8000aa0 <DRIVER_SETUP>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&RX[RX_POS],1);
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <main+0x40>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <main+0x44>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	4619      	mov	r1, r3
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <main+0x48>)
 8000c96:	f004 f802 	bl	8004c9e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <main+0x3a>
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	200001ca 	.word	0x200001ca
 8000ca4:	200001ac 	.word	0x200001ac
 8000ca8:	2000022c 	.word	0x2000022c

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 ffe0 	bl	8005c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <SystemClock_Config+0xc8>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <SystemClock_Config+0xc8>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <SystemClock_Config+0xc8>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <SystemClock_Config+0xcc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <SystemClock_Config+0xcc>)
 8000cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <SystemClock_Config+0xcc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000d20:	2340      	movs	r3, #64	; 0x40
 8000d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 f9bf 	bl	80040b4 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d3c:	f000 f81e 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2302      	movs	r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000d48:	2390      	movs	r3, #144	; 0x90
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fc22 	bl	80045a4 <HAL_RCC_ClockConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d66:	f000 f809 	bl	8000d7c <Error_Handler>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3750      	adds	r7, #80	; 0x50
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f99c 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <I2C1_EV_IRQHandler+0x10>)
 8000e32:	f001 fa33 	bl	800229c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001d8 	.word	0x200001d8

08000e40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e44:	4819      	ldr	r0, [pc, #100]	; (8000eac <USART3_IRQHandler+0x6c>)
 8000e46:	f004 f80d 	bl	8004e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Transmit(&huart3, (uint8_t *)&RX[RX_POS], 1, 1000);
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <USART3_IRQHandler+0x70>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <USART3_IRQHandler+0x74>)
 8000e52:	18d1      	adds	r1, r2, r3
 8000e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <USART3_IRQHandler+0x6c>)
 8000e5c:	f003 fdeb 	bl	8004a36 <HAL_UART_Transmit>
  	if(RX[RX_POS] == '\r'){																				//Scan input data for ENTER
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <USART3_IRQHandler+0x70>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <USART3_IRQHandler+0x74>)
 8000e68:	5c9b      	ldrb	r3, [r3, r2]
 8000e6a:	2b0d      	cmp	r3, #13
 8000e6c:	d10c      	bne.n	8000e88 <USART3_IRQHandler+0x48>
  		HAL_UART_Transmit(&huart3, (uint8_t *)&NEW_LINE, 1, 1000);										//Make new line
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	2201      	movs	r2, #1
 8000e74:	4910      	ldr	r1, [pc, #64]	; (8000eb8 <USART3_IRQHandler+0x78>)
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <USART3_IRQHandler+0x6c>)
 8000e78:	f003 fddd 	bl	8004a36 <HAL_UART_Transmit>
  		MESSAGE_ANALYZER();																				//Run massage analyzer
 8000e7c:	f7ff fb7c 	bl	8000578 <MESSAGE_ANALYZER>
  		RX_POS = 0;																						//Reset rx buffer "pointer"
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <USART3_IRQHandler+0x70>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e005      	b.n	8000e94 <USART3_IRQHandler+0x54>
  	}else{
  		RX_POS++;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <USART3_IRQHandler+0x70>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <USART3_IRQHandler+0x70>)
 8000e92:	701a      	strb	r2, [r3, #0]
  	}

  HAL_UART_Receive_IT(&huart3, (uint8_t *)&RX[RX_POS],1);
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <USART3_IRQHandler+0x70>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <USART3_IRQHandler+0x74>)
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4802      	ldr	r0, [pc, #8]	; (8000eac <USART3_IRQHandler+0x6c>)
 8000ea4:	f003 fefb 	bl	8004c9e <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000022c 	.word	0x2000022c
 8000eb0:	200001ca 	.word	0x200001ca
 8000eb4:	200001ac 	.word	0x200001ac
 8000eb8:	200000c4 	.word	0x200000c4

08000ebc <HAL_I2C_MemTxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)DONE, 13, 1000);
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	220d      	movs	r2, #13
 8000eca:	4904      	ldr	r1, [pc, #16]	; (8000edc <HAL_I2C_MemTxCpltCallback+0x20>)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <HAL_I2C_MemTxCpltCallback+0x24>)
 8000ece:	f003 fdb2 	bl	8004a36 <HAL_UART_Transmit>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200000c8 	.word	0x200000c8
 8000ee0:	2000022c 	.word	0x2000022c

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f004 fe8a 	bl	8005c2c <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20020000 	.word	0x20020000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	200001cc 	.word	0x200001cc
 8000f4c:	20000288 	.word	0x20000288

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_USART3_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART3_UART_Init+0x4c>)
 8000fac:	f003 fcf6 	bl	800499c <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fb6:	f7ff fee1 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000022c 	.word	0x2000022c
 8000fc4:	40004800 	.word	0x40004800

08000fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_UART_MspInit+0x94>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d134      	bne.n	8001054 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <HAL_UART_MspInit+0x98>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_UART_MspInit+0x98>)
 8000ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_UART_MspInit+0x98>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_UART_MspInit+0x98>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_UART_MspInit+0x98>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_UART_MspInit+0x98>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <HAL_UART_MspInit+0x9c>)
 8001040:	f000 fa60 	bl	8001504 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2027      	movs	r0, #39	; 0x27
 800104a:	f000 f984 	bl	8001356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800104e:	2027      	movs	r0, #39	; 0x27
 8001050:	f000 f99d 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40004800 	.word	0x40004800
 8001060:	40023800 	.word	0x40023800
 8001064:	40020c00 	.word	0x40020c00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001084:	4c0b      	ldr	r4, [pc, #44]	; (80010b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001092:	f7ff ff5d 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f004 fdcf 	bl	8005c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fde1 	bl	8000c60 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 80010ac:	080065c0 	.word	0x080065c0
  ldr r2, =_sbss
 80010b0:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 80010b4:	20000284 	.word	0x20000284

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f92b 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fe4a 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f943 	bl	80013aa <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f90b 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200000d8 	.word	0x200000d8
 8001158:	200000e0 	.word	0x200000e0
 800115c:	200000dc 	.word	0x200000dc

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200000e0 	.word	0x200000e0
 8001184:	20000270 	.word	0x20000270

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000270 	.word	0x20000270

080011a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011bc:	4013      	ands	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <__NVIC_SetPriorityGrouping+0x44>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <__NVIC_GetPriorityGrouping+0x18>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	f003 0307 	and.w	r3, r3, #7
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db0b      	blt.n	800122e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <__NVIC_EnableIRQ+0x38>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff29 	bl	80011a0 <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff3e 	bl	80011e8 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff31 	bl	8001204 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa2 	bl	80012fc <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff feda 	bl	8001188 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d008      	beq.n	80013f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e052      	b.n	800149a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0216 	bic.w	r2, r2, #22
 8001402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001412:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	2b00      	cmp	r3, #0
 800141a:	d103      	bne.n	8001424 <HAL_DMA_Abort+0x62>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0208 	bic.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001444:	e013      	b.n	800146e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001446:	f7ff fe9f 	bl	8001188 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b05      	cmp	r3, #5
 8001452:	d90c      	bls.n	800146e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2220      	movs	r2, #32
 8001458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e015      	b.n	800149a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e4      	bne.n	8001446 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001480:	223f      	movs	r2, #63	; 0x3f
 8001482:	409a      	lsls	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e00c      	b.n	80014da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2205      	movs	r2, #5
 80014c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f4:	b2db      	uxtb	r3, r3
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	e16b      	b.n	80017f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	f040 815a 	bne.w	80017f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d005      	beq.n	8001556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	2b02      	cmp	r3, #2
 8001554:	d130      	bne.n	80015b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158c:	2201      	movs	r2, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 0201 	and.w	r2, r3, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d017      	beq.n	80015f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d123      	bne.n	8001648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	69b9      	ldr	r1, [r7, #24]
 8001644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80b4 	beq.w	80017f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b60      	ldr	r3, [pc, #384]	; (8001810 <HAL_GPIO_Init+0x30c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a5f      	ldr	r2, [pc, #380]	; (8001810 <HAL_GPIO_Init+0x30c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <HAL_GPIO_Init+0x30c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a6:	4a5b      	ldr	r2, [pc, #364]	; (8001814 <HAL_GPIO_Init+0x310>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a52      	ldr	r2, [pc, #328]	; (8001818 <HAL_GPIO_Init+0x314>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02b      	beq.n	800172a <HAL_GPIO_Init+0x226>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a51      	ldr	r2, [pc, #324]	; (800181c <HAL_GPIO_Init+0x318>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d025      	beq.n	8001726 <HAL_GPIO_Init+0x222>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a50      	ldr	r2, [pc, #320]	; (8001820 <HAL_GPIO_Init+0x31c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01f      	beq.n	8001722 <HAL_GPIO_Init+0x21e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4f      	ldr	r2, [pc, #316]	; (8001824 <HAL_GPIO_Init+0x320>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0x21a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <HAL_GPIO_Init+0x324>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x216>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4d      	ldr	r2, [pc, #308]	; (800182c <HAL_GPIO_Init+0x328>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x212>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4c      	ldr	r2, [pc, #304]	; (8001830 <HAL_GPIO_Init+0x32c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x20e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4b      	ldr	r2, [pc, #300]	; (8001834 <HAL_GPIO_Init+0x330>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x20a>
 800170a:	2307      	movs	r3, #7
 800170c:	e00e      	b.n	800172c <HAL_GPIO_Init+0x228>
 800170e:	2308      	movs	r3, #8
 8001710:	e00c      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001712:	2306      	movs	r3, #6
 8001714:	e00a      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001716:	2305      	movs	r3, #5
 8001718:	e008      	b.n	800172c <HAL_GPIO_Init+0x228>
 800171a:	2304      	movs	r3, #4
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x228>
 800171e:	2303      	movs	r3, #3
 8001720:	e004      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001722:	2302      	movs	r3, #2
 8001724:	e002      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_GPIO_Init+0x228>
 800172a:	2300      	movs	r3, #0
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f002 0203 	and.w	r2, r2, #3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4093      	lsls	r3, r2
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173c:	4935      	ldr	r1, [pc, #212]	; (8001814 <HAL_GPIO_Init+0x310>)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_GPIO_Init+0x334>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800176e:	4a32      	ldr	r2, [pc, #200]	; (8001838 <HAL_GPIO_Init+0x334>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001774:	4b30      	ldr	r3, [pc, #192]	; (8001838 <HAL_GPIO_Init+0x334>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001798:	4a27      	ldr	r2, [pc, #156]	; (8001838 <HAL_GPIO_Init+0x334>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_GPIO_Init+0x334>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c2:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <HAL_GPIO_Init+0x334>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_GPIO_Init+0x334>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ec:	4a12      	ldr	r2, [pc, #72]	; (8001838 <HAL_GPIO_Init+0x334>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3301      	adds	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	f67f ae90 	bls.w	8001520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40013800 	.word	0x40013800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40021400 	.word	0x40021400
 8001830:	40021800 	.word	0x40021800
 8001834:	40021c00 	.word	0x40021c00
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e12b      	b.n	8001ada <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff f8b2 	bl	8000a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2224      	movs	r2, #36	; 0x24
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018d4:	f003 f83a 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 80018d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a81      	ldr	r2, [pc, #516]	; (8001ae4 <HAL_I2C_Init+0x274>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d807      	bhi.n	80018f4 <HAL_I2C_Init+0x84>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4a80      	ldr	r2, [pc, #512]	; (8001ae8 <HAL_I2C_Init+0x278>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bf94      	ite	ls
 80018ec:	2301      	movls	r3, #1
 80018ee:	2300      	movhi	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	e006      	b.n	8001902 <HAL_I2C_Init+0x92>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a7d      	ldr	r2, [pc, #500]	; (8001aec <HAL_I2C_Init+0x27c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e0e7      	b.n	8001ada <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4a78      	ldr	r2, [pc, #480]	; (8001af0 <HAL_I2C_Init+0x280>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	430a      	orrs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a6a      	ldr	r2, [pc, #424]	; (8001ae4 <HAL_I2C_Init+0x274>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d802      	bhi.n	8001944 <HAL_I2C_Init+0xd4>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3301      	adds	r3, #1
 8001942:	e009      	b.n	8001958 <HAL_I2C_Init+0xe8>
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	4a69      	ldr	r2, [pc, #420]	; (8001af4 <HAL_I2C_Init+0x284>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	099b      	lsrs	r3, r3, #6
 8001956:	3301      	adds	r3, #1
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800196a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	495c      	ldr	r1, [pc, #368]	; (8001ae4 <HAL_I2C_Init+0x274>)
 8001974:	428b      	cmp	r3, r1
 8001976:	d819      	bhi.n	80019ac <HAL_I2C_Init+0x13c>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e59      	subs	r1, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fbb1 f3f3 	udiv	r3, r1, r3
 8001986:	1c59      	adds	r1, r3, #1
 8001988:	f640 73fc 	movw	r3, #4092	; 0xffc
 800198c:	400b      	ands	r3, r1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00a      	beq.n	80019a8 <HAL_I2C_Init+0x138>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1e59      	subs	r1, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a0:	3301      	adds	r3, #1
 80019a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a6:	e051      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 80019a8:	2304      	movs	r3, #4
 80019aa:	e04f      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d111      	bne.n	80019d8 <HAL_I2C_Init+0x168>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1e58      	subs	r0, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	440b      	add	r3, r1
 80019c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c6:	3301      	adds	r3, #1
 80019c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	e012      	b.n	80019fe <HAL_I2C_Init+0x18e>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	0099      	lsls	r1, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Init+0x196>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e022      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10e      	bne.n	8001a2c <HAL_I2C_Init+0x1bc>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1e58      	subs	r0, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	440b      	add	r3, r1
 8001a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2a:	e00f      	b.n	8001a4c <HAL_I2C_Init+0x1dc>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	0099      	lsls	r1, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	6809      	ldr	r1, [r1, #0]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6911      	ldr	r1, [r2, #16]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68d2      	ldr	r2, [r2, #12]
 8001a86:	4311      	orrs	r1, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	000186a0 	.word	0x000186a0
 8001ae8:	001e847f 	.word	0x001e847f
 8001aec:	003d08ff 	.word	0x003d08ff
 8001af0:	431bde83 	.word	0x431bde83
 8001af4:	10624dd3 	.word	0x10624dd3

08001af8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4603      	mov	r3, r0
 8001b08:	817b      	strh	r3, [r7, #10]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	813b      	strh	r3, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b12:	f7ff fb39 	bl	8001188 <HAL_GetTick>
 8001b16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	f040 80d9 	bne.w	8001cd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2319      	movs	r3, #25
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	496d      	ldr	r1, [pc, #436]	; (8001ce4 <HAL_I2C_Mem_Write+0x1ec>)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f002 f895 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0cc      	b.n	8001cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_I2C_Mem_Write+0x56>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e0c5      	b.n	8001cda <HAL_I2C_Mem_Write+0x1e2>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d007      	beq.n	8001b74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2221      	movs	r2, #33	; 0x21
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a3a      	ldr	r2, [r7, #32]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4a4d      	ldr	r2, [pc, #308]	; (8001ce8 <HAL_I2C_Mem_Write+0x1f0>)
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bb6:	88f8      	ldrh	r0, [r7, #6]
 8001bb8:	893a      	ldrh	r2, [r7, #8]
 8001bba:	8979      	ldrh	r1, [r7, #10]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f001 fe24 	bl	8003814 <I2C_RequestMemoryWrite>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d052      	beq.n	8001c78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e081      	b.n	8001cda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f002 f916 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00d      	beq.n	8001c02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d107      	bne.n	8001bfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06b      	b.n	8001cda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d11b      	bne.n	8001c78 <HAL_I2C_Mem_Write+0x180>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d017      	beq.n	8001c78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1aa      	bne.n	8001bd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f002 f902 	bl	8003e8e <I2C_WaitOnBTFFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00d      	beq.n	8001cac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e016      	b.n	8001cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e000      	b.n	8001cda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cd8:	2302      	movs	r3, #2
  }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	00100002 	.word	0x00100002
 8001ce8:	ffff0000 	.word	0xffff0000

08001cec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	4608      	mov	r0, r1
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	817b      	strh	r3, [r7, #10]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	813b      	strh	r3, [r7, #8]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d06:	f7ff fa3f 	bl	8001188 <HAL_GetTick>
 8001d0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	f040 8208 	bne.w	800212a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2319      	movs	r3, #25
 8001d20:	2201      	movs	r2, #1
 8001d22:	497b      	ldr	r1, [pc, #492]	; (8001f10 <HAL_I2C_Mem_Read+0x224>)
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f001 ff9b 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
 8001d32:	e1fb      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_I2C_Mem_Read+0x56>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e1f4      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d007      	beq.n	8001d68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2222      	movs	r2, #34	; 0x22
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4a5b      	ldr	r2, [pc, #364]	; (8001f14 <HAL_I2C_Mem_Read+0x228>)
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001daa:	88f8      	ldrh	r0, [r7, #6]
 8001dac:	893a      	ldrh	r2, [r7, #8]
 8001dae:	8979      	ldrh	r1, [r7, #10]
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4603      	mov	r3, r0
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f001 fdc0 	bl	8003940 <I2C_RequestMemoryRead>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e1b0      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d113      	bne.n	8001dfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	623b      	str	r3, [r7, #32]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	623b      	str	r3, [r7, #32]
 8001de6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e184      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d11b      	bne.n	8001e3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e164      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d11b      	bne.n	8001e7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	e144      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e90:	e138      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	f200 80f1 	bhi.w	800207e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d123      	bne.n	8001eec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f002 f863 	bl	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e139      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eea:	e10b      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d14e      	bne.n	8001f92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efa:	2200      	movs	r2, #0
 8001efc:	4906      	ldr	r1, [pc, #24]	; (8001f18 <HAL_I2C_Mem_Read+0x22c>)
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f001 feae 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e10e      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
 8001f0e:	bf00      	nop
 8001f10:	00100002 	.word	0x00100002
 8001f14:	ffff0000 	.word	0xffff0000
 8001f18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f90:	e0b8      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4966      	ldr	r1, [pc, #408]	; (8002134 <HAL_I2C_Mem_Read+0x448>)
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f001 fe5f 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0bf      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	494f      	ldr	r1, [pc, #316]	; (8002134 <HAL_I2C_Mem_Read+0x448>)
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f001 fe31 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e091      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800207c:	e042      	b.n	8002104 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f001 ff76 	bl	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e04c      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d118      	bne.n	8002104 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	f47f aec2 	bne.w	8001e92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800212a:	2302      	movs	r3, #2
  }
}
 800212c:	4618      	mov	r0, r3
 800212e:	3728      	adds	r7, #40	; 0x28
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	00010004 	.word	0x00010004

08002138 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b20      	cmp	r3, #32
 8002160:	f040 808e 	bne.w	8002280 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002164:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_I2C_Mem_Write_IT+0x158>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	4a4a      	ldr	r2, [pc, #296]	; (8002294 <HAL_I2C_Mem_Write_IT+0x15c>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0a1a      	lsrs	r2, r3, #8
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	009a      	lsls	r2, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3b01      	subs	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e064      	b.n	8002282 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d0db      	beq.n	800217e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2C_Mem_Write_IT+0x9c>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e056      	b.n	8002282 <HAL_I2C_Mem_Write_IT+0x14a>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d007      	beq.n	80021fa <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002208:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2221      	movs	r2, #33	; 0x21
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2240      	movs	r2, #64	; 0x40
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a3a      	ldr	r2, [r7, #32]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800222a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_I2C_Mem_Write_IT+0x160>)
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800223c:	897a      	ldrh	r2, [r7, #10]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002242:	893a      	ldrh	r2, [r7, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002262:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800227a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	371c      	adds	r7, #28
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200000d8 	.word	0x200000d8
 8002294:	14f8b589 	.word	0x14f8b589
 8002298:	ffff0000 	.word	0xffff0000

0800229c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d003      	beq.n	80022d4 <HAL_I2C_EV_IRQHandler+0x38>
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	f040 80c1 	bne.w	8002456 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <HAL_I2C_EV_IRQHandler+0x6e>
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80022f4:	d003      	beq.n	80022fe <HAL_I2C_EV_IRQHandler+0x62>
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80022fc:	d101      	bne.n	8002302 <HAL_I2C_EV_IRQHandler+0x66>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_I2C_EV_IRQHandler+0x68>
 8002302:	2300      	movs	r3, #0
 8002304:	2b01      	cmp	r3, #1
 8002306:	f000 8132 	beq.w	800256e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00c      	beq.n	800232e <HAL_I2C_EV_IRQHandler+0x92>
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	0a5b      	lsrs	r3, r3, #9
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f001 feac 	bl	800407e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fcc8 	bl	8002cbc <I2C_Master_SB>
 800232c:	e092      	b.n	8002454 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08db      	lsrs	r3, r3, #3
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_I2C_EV_IRQHandler+0xb2>
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	0a5b      	lsrs	r3, r3, #9
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fd3e 	bl	8002dc8 <I2C_Master_ADD10>
 800234c:	e082      	b.n	8002454 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_I2C_EV_IRQHandler+0xd2>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	0a5b      	lsrs	r3, r3, #9
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fd58 	bl	8002e1c <I2C_Master_ADDR>
 800236c:	e072      	b.n	8002454 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d03b      	beq.n	80023f2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002388:	f000 80f3 	beq.w	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	09db      	lsrs	r3, r3, #7
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00f      	beq.n	80023b8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	0a9b      	lsrs	r3, r3, #10
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d009      	beq.n	80023b8 <HAL_I2C_EV_IRQHandler+0x11c>
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d103      	bne.n	80023b8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f942 	bl	800263a <I2C_MasterTransmit_TXE>
 80023b6:	e04d      	b.n	8002454 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80d6 	beq.w	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	0a5b      	lsrs	r3, r3, #9
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80cf 	beq.w	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	2b21      	cmp	r3, #33	; 0x21
 80023d8:	d103      	bne.n	80023e2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f9c9 	bl	8002772 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023e0:	e0c7      	b.n	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2b40      	cmp	r3, #64	; 0x40
 80023e6:	f040 80c4 	bne.w	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa37 	bl	800285e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023f0:	e0bf      	b.n	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002400:	f000 80b7 	beq.w	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00f      	beq.n	8002430 <HAL_I2C_EV_IRQHandler+0x194>
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	0a9b      	lsrs	r3, r3, #10
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <HAL_I2C_EV_IRQHandler+0x194>
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 faac 	bl	8002986 <I2C_MasterReceive_RXNE>
 800242e:	e011      	b.n	8002454 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 809a 	beq.w	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	0a5b      	lsrs	r3, r3, #9
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8093 	beq.w	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fb4b 	bl	8002ae8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002452:	e08e      	b.n	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002454:	e08d      	b.n	8002572 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d004      	beq.n	8002468 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e007      	b.n	8002478 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d012      	beq.n	80024aa <HAL_I2C_EV_IRQHandler+0x20e>
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	0a5b      	lsrs	r3, r3, #9
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00c      	beq.n	80024aa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 ff09 	bl	80032ba <I2C_Slave_ADDR>
 80024a8:	e066      	b.n	8002578 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_I2C_EV_IRQHandler+0x22e>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	0a5b      	lsrs	r3, r3, #9
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 ff44 	bl	8003350 <I2C_Slave_STOPF>
 80024c8:	e056      	b.n	8002578 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024ca:	7bbb      	ldrb	r3, [r7, #14]
 80024cc:	2b21      	cmp	r3, #33	; 0x21
 80024ce:	d002      	beq.n	80024d6 <HAL_I2C_EV_IRQHandler+0x23a>
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	2b29      	cmp	r3, #41	; 0x29
 80024d4:	d125      	bne.n	8002522 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	09db      	lsrs	r3, r3, #7
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00f      	beq.n	8002502 <HAL_I2C_EV_IRQHandler+0x266>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	0a9b      	lsrs	r3, r3, #10
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_I2C_EV_IRQHandler+0x266>
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fe1f 	bl	800313e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002500:	e039      	b.n	8002576 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d033      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x2da>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	0a5b      	lsrs	r3, r3, #9
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d02d      	beq.n	8002576 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fe4c 	bl	80031b8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002520:	e029      	b.n	8002576 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00f      	beq.n	800254e <HAL_I2C_EV_IRQHandler+0x2b2>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	0a9b      	lsrs	r3, r3, #10
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_I2C_EV_IRQHandler+0x2b2>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fe57 	bl	80031fa <I2C_SlaveReceive_RXNE>
 800254c:	e014      	b.n	8002578 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00e      	beq.n	8002578 <HAL_I2C_EV_IRQHandler+0x2dc>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	0a5b      	lsrs	r3, r3, #9
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fe85 	bl	8003276 <I2C_SlaveReceive_BTF>
 800256c:	e004      	b.n	8002578 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800256e:	bf00      	nop
 8002570:	e002      	b.n	8002578 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002576:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	70fb      	strb	r3, [r7, #3]
 80025da:	4613      	mov	r3, r2
 80025dc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002650:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	2b00      	cmp	r3, #0
 800265e:	d150      	bne.n	8002702 <I2C_MasterTransmit_TXE+0xc8>
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b21      	cmp	r3, #33	; 0x21
 8002664:	d14d      	bne.n	8002702 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d01d      	beq.n	80026a8 <I2C_MasterTransmit_TXE+0x6e>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b20      	cmp	r3, #32
 8002670:	d01a      	beq.n	80026a8 <I2C_MasterTransmit_TXE+0x6e>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002678:	d016      	beq.n	80026a8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002688:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2211      	movs	r2, #17
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff6c 	bl	800257e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026a6:	e060      	b.n	800276a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026b6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d107      	bne.n	80026f2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fbe6 	bl	8000ebc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026f0:	e03b      	b.n	800276a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ff3f 	bl	800257e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002700:	e033      	b.n	800276a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b21      	cmp	r3, #33	; 0x21
 8002706:	d005      	beq.n	8002714 <I2C_MasterTransmit_TXE+0xda>
 8002708:	7bbb      	ldrb	r3, [r7, #14]
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d12d      	bne.n	800276a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b22      	cmp	r3, #34	; 0x22
 8002712:	d12a      	bne.n	800276a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d108      	bne.n	8002730 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800272e:	e01c      	b.n	800276a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d103      	bne.n	8002744 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f88e 	bl	800285e <I2C_MemoryTransmit_TXE_BTF>
}
 8002742:	e012      	b.n	800276a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002768:	e7ff      	b.n	800276a <I2C_MasterTransmit_TXE+0x130>
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b21      	cmp	r3, #33	; 0x21
 800278a:	d164      	bne.n	8002856 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d012      	beq.n	80027bc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80027ba:	e04c      	b.n	8002856 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d01d      	beq.n	80027fe <I2C_MasterTransmit_BTF+0x8c>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d01a      	beq.n	80027fe <I2C_MasterTransmit_BTF+0x8c>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027ce:	d016      	beq.n	80027fe <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027de:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2211      	movs	r2, #17
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fec1 	bl	800257e <HAL_I2C_MasterTxCpltCallback>
}
 80027fc:	e02b      	b.n	8002856 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800280c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d107      	bne.n	8002848 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7fe fb3b 	bl	8000ebc <HAL_I2C_MemTxCpltCallback>
}
 8002846:	e006      	b.n	8002856 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff fe94 	bl	800257e <HAL_I2C_MasterTxCpltCallback>
}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002872:	2b00      	cmp	r3, #0
 8002874:	d11d      	bne.n	80028b2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10b      	bne.n	8002896 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	b2da      	uxtb	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	1c9a      	adds	r2, r3, #2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002894:	e073      	b.n	800297e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	b29b      	uxth	r3, r3
 800289c:	121b      	asrs	r3, r3, #8
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028b0:	e065      	b.n	800297e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10b      	bne.n	80028d2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028d0:	e055      	b.n	800297e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d151      	bne.n	800297e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b22      	cmp	r3, #34	; 0x22
 80028de:	d10d      	bne.n	80028fc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ee:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80028fa:	e040      	b.n	800297e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d015      	beq.n	8002932 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b21      	cmp	r3, #33	; 0x21
 800290a:	d112      	bne.n	8002932 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002930:	e025      	b.n	800297e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d120      	bne.n	800297e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b21      	cmp	r3, #33	; 0x21
 8002940:	d11d      	bne.n	800297e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002950:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002960:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7fe fa9f 	bl	8000ebc <HAL_I2C_MemTxCpltCallback>
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b22      	cmp	r3, #34	; 0x22
 8002998:	f040 80a2 	bne.w	8002ae0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d921      	bls.n	80029ee <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	f040 8082 	bne.w	8002ae0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ea:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80029ec:	e078      	b.n	8002ae0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d074      	beq.n	8002ae0 <I2C_MasterReceive_RXNE+0x15a>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <I2C_MasterReceive_RXNE+0x7c>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d16e      	bne.n	8002ae0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f001 fa84 	bl	8003f10 <I2C_WaitOnSTOPRequestThroughIT>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d142      	bne.n	8002a94 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a1c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d10a      	bne.n	8002a7e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff fdc1 	bl	80025fe <HAL_I2C_MemRxCpltCallback>
}
 8002a7c:	e030      	b.n	8002ae0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2212      	movs	r2, #18
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff fd80 	bl	8002592 <HAL_I2C_MasterRxCpltCallback>
}
 8002a92:	e025      	b.n	8002ae0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fd99 	bl	8002612 <HAL_I2C_ErrorCallback>
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d11b      	bne.n	8002b38 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002b36:	e0bd      	b.n	8002cb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d129      	bne.n	8002b96 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d00a      	beq.n	8002b6e <I2C_MasterReceive_BTF+0x86>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d007      	beq.n	8002b6e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b94:	e08e      	b.n	8002cb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d176      	bne.n	8002c8e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d002      	beq.n	8002bac <I2C_MasterReceive_BTF+0xc4>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d108      	bne.n	8002bbe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e019      	b.n	8002bf2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d002      	beq.n	8002bca <I2C_MasterReceive_BTF+0xe2>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d108      	bne.n	8002bdc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e00a      	b.n	8002bf2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d007      	beq.n	8002bf2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c4c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d10a      	bne.n	8002c78 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fcc4 	bl	80025fe <HAL_I2C_MemRxCpltCallback>
}
 8002c76:	e01d      	b.n	8002cb4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2212      	movs	r2, #18
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fc83 	bl	8002592 <HAL_I2C_MasterRxCpltCallback>
}
 8002c8c:	e012      	b.n	8002cb4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d117      	bne.n	8002d00 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ce8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002cea:	e067      	b.n	8002dbc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	611a      	str	r2, [r3, #16]
}
 8002cfe:	e05d      	b.n	8002dbc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d08:	d133      	bne.n	8002d72 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b21      	cmp	r3, #33	; 0x21
 8002d14:	d109      	bne.n	8002d2a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d26:	611a      	str	r2, [r3, #16]
 8002d28:	e008      	b.n	8002d3c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <I2C_Master_SB+0x92>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d032      	beq.n	8002dbc <I2C_Master_SB+0x100>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d02d      	beq.n	8002dbc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6e:	605a      	str	r2, [r3, #4]
}
 8002d70:	e024      	b.n	8002dbc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10e      	bne.n	8002d98 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	11db      	asrs	r3, r3, #7
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 0306 	and.w	r3, r3, #6
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f063 030f 	orn	r3, r3, #15
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	611a      	str	r2, [r3, #16]
}
 8002d96:	e011      	b.n	8002dbc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d10d      	bne.n	8002dbc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	11db      	asrs	r3, r3, #7
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 0306 	and.w	r3, r3, #6
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f063 030e 	orn	r3, r3, #14
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	611a      	str	r2, [r3, #16]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <I2C_Master_ADD10+0x26>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <I2C_Master_ADD10+0x48>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0e:	605a      	str	r2, [r3, #4]
  }
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b091      	sub	sp, #68	; 0x44
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b22      	cmp	r3, #34	; 0x22
 8002e44:	f040 8169 	bne.w	800311a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10f      	bne.n	8002e70 <I2C_Master_ADDR+0x54>
 8002e50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d10b      	bne.n	8002e70 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	e160      	b.n	8003132 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11d      	bne.n	8002eb4 <I2C_Master_ADDR+0x98>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e80:	d118      	bne.n	8002eb4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e82:	2300      	movs	r3, #0
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	651a      	str	r2, [r3, #80]	; 0x50
 8002eb2:	e13e      	b.n	8003132 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d113      	bne.n	8002ee6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e115      	b.n	8003112 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	f040 808a 	bne.w	8003006 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ef8:	d137      	bne.n	8002f6a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f08:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f18:	d113      	bne.n	8002f42 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f28:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	e0e7      	b.n	8003112 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	623b      	str	r3, [r7, #32]
 8002f56:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e0d3      	b.n	8003112 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d02e      	beq.n	8002fce <I2C_Master_ADDR+0x1b2>
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d02b      	beq.n	8002fce <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f78:	2b12      	cmp	r3, #18
 8002f7a:	d102      	bne.n	8002f82 <I2C_Master_ADDR+0x166>
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d125      	bne.n	8002fce <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d00e      	beq.n	8002fa6 <I2C_Master_ADDR+0x18a>
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d00b      	beq.n	8002fa6 <I2C_Master_ADDR+0x18a>
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d008      	beq.n	8002fa6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e007      	b.n	8002fb6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	e0a1      	b.n	8003112 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e085      	b.n	8003112 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d14d      	bne.n	80030ac <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003012:	2b04      	cmp	r3, #4
 8003014:	d016      	beq.n	8003044 <I2C_Master_ADDR+0x228>
 8003016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003018:	2b02      	cmp	r3, #2
 800301a:	d013      	beq.n	8003044 <I2C_Master_ADDR+0x228>
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	2b10      	cmp	r3, #16
 8003020:	d010      	beq.n	8003044 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e007      	b.n	8003054 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003052:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003062:	d117      	bne.n	8003094 <I2C_Master_ADDR+0x278>
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800306a:	d00b      	beq.n	8003084 <I2C_Master_ADDR+0x268>
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	2b01      	cmp	r3, #1
 8003070:	d008      	beq.n	8003084 <I2C_Master_ADDR+0x268>
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	2b08      	cmp	r3, #8
 8003076:	d005      	beq.n	8003084 <I2C_Master_ADDR+0x268>
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	2b10      	cmp	r3, #16
 800307c:	d002      	beq.n	8003084 <I2C_Master_ADDR+0x268>
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2b20      	cmp	r3, #32
 8003082:	d107      	bne.n	8003094 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003092:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	e032      	b.n	8003112 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030ba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ca:	d117      	bne.n	80030fc <I2C_Master_ADDR+0x2e0>
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030d2:	d00b      	beq.n	80030ec <I2C_Master_ADDR+0x2d0>
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d008      	beq.n	80030ec <I2C_Master_ADDR+0x2d0>
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d005      	beq.n	80030ec <I2C_Master_ADDR+0x2d0>
 80030e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d002      	beq.n	80030ec <I2C_Master_ADDR+0x2d0>
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d107      	bne.n	80030fc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030fa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003118:	e00b      	b.n	8003132 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	e7ff      	b.n	8003132 <I2C_Master_ADDR+0x316>
 8003132:	bf00      	nop
 8003134:	3744      	adds	r7, #68	; 0x44
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d02b      	beq.n	80031b0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d114      	bne.n	80031b0 <I2C_SlaveTransmit_TXE+0x72>
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b29      	cmp	r3, #41	; 0x29
 800318a:	d111      	bne.n	80031b0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2221      	movs	r2, #33	; 0x21
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2228      	movs	r2, #40	; 0x28
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff f9fb 	bl	80025a6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d011      	beq.n	80031ee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d02c      	beq.n	800326e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d114      	bne.n	800326e <I2C_SlaveReceive_RXNE+0x74>
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b2a      	cmp	r3, #42	; 0x2a
 8003248:	d111      	bne.n	800326e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003258:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2222      	movs	r2, #34	; 0x22
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2228      	movs	r2, #40	; 0x28
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff f9a6 	bl	80025ba <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032d4:	2b28      	cmp	r3, #40	; 0x28
 80032d6:	d127      	bne.n	8003328 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	09db      	lsrs	r3, r3, #7
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d103      	bne.n	800330c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	81bb      	strh	r3, [r7, #12]
 800330a:	e002      	b.n	8003312 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800331a:	89ba      	ldrh	r2, [r7, #12]
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff f954 	bl	80025ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003326:	e00e      	b.n	8003346 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800336e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ac:	d172      	bne.n	8003494 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	2b22      	cmp	r3, #34	; 0x22
 80033b2:	d002      	beq.n	80033ba <I2C_Slave_STOPF+0x6a>
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b2a      	cmp	r3, #42	; 0x2a
 80033b8:	d135      	bne.n	8003426 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f043 0204 	orr.w	r2, r3, #4
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe f877 	bl	80014e6 <HAL_DMA_GetState>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d049      	beq.n	8003492 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	4a69      	ldr	r2, [pc, #420]	; (80035a8 <I2C_Slave_STOPF+0x258>)
 8003404:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe f849 	bl	80014a2 <HAL_DMA_Abort_IT>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03d      	beq.n	8003492 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003420:	4610      	mov	r0, r2
 8003422:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003424:	e035      	b.n	8003492 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f043 0204 	orr.w	r2, r3, #4
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003458:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe f841 	bl	80014e6 <HAL_DMA_GetState>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d014      	beq.n	8003494 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	4a4e      	ldr	r2, [pc, #312]	; (80035a8 <I2C_Slave_STOPF+0x258>)
 8003470:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe f813 	bl	80014a2 <HAL_DMA_Abort_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800348c:	4610      	mov	r0, r2
 800348e:	4798      	blx	r3
 8003490:	e000      	b.n	8003494 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003492:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d03e      	beq.n	800351c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d112      	bne.n	80034d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b40      	cmp	r3, #64	; 0x40
 80034de:	d112      	bne.n	8003506 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f843 	bl	80035b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800352a:	e039      	b.n	80035a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b2a      	cmp	r3, #42	; 0x2a
 8003530:	d109      	bne.n	8003546 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2228      	movs	r2, #40	; 0x28
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff f83a 	bl	80025ba <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b28      	cmp	r3, #40	; 0x28
 8003550:	d111      	bne.n	8003576 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a15      	ldr	r2, [pc, #84]	; (80035ac <I2C_Slave_STOPF+0x25c>)
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff f83b 	bl	80025ea <HAL_I2C_ListenCpltCallback>
}
 8003574:	e014      	b.n	80035a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	2b22      	cmp	r3, #34	; 0x22
 800357c:	d002      	beq.n	8003584 <I2C_Slave_STOPF+0x234>
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b22      	cmp	r3, #34	; 0x22
 8003582:	d10d      	bne.n	80035a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff f80d 	bl	80025ba <HAL_I2C_SlaveRxCpltCallback>
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	08003b11 	.word	0x08003b11
 80035ac:	ffff0000 	.word	0xffff0000

080035b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035c8:	7bbb      	ldrb	r3, [r7, #14]
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d002      	beq.n	80035d4 <I2C_ITError+0x24>
 80035ce:	7bbb      	ldrb	r3, [r7, #14]
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d10a      	bne.n	80035ea <I2C_ITError+0x3a>
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b22      	cmp	r3, #34	; 0x22
 80035d8:	d107      	bne.n	80035ea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035f0:	2b28      	cmp	r3, #40	; 0x28
 80035f2:	d107      	bne.n	8003604 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2228      	movs	r2, #40	; 0x28
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003602:	e015      	b.n	8003630 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003612:	d00a      	beq.n	800362a <I2C_ITError+0x7a>
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b60      	cmp	r3, #96	; 0x60
 8003618:	d007      	beq.n	800362a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800363e:	d162      	bne.n	8003706 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800364e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d020      	beq.n	80036a0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	4a6a      	ldr	r2, [pc, #424]	; (800380c <I2C_ITError+0x25c>)
 8003664:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd ff19 	bl	80014a2 <HAL_DMA_Abort_IT>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8089 	beq.w	800378a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800369a:	4610      	mov	r0, r2
 800369c:	4798      	blx	r3
 800369e:	e074      	b.n	800378a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	4a59      	ldr	r2, [pc, #356]	; (800380c <I2C_ITError+0x25c>)
 80036a6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fef8 	bl	80014a2 <HAL_DMA_Abort_IT>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d068      	beq.n	800378a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d10b      	bne.n	80036de <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003700:	4610      	mov	r0, r2
 8003702:	4798      	blx	r3
 8003704:	e041      	b.n	800378a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b60      	cmp	r3, #96	; 0x60
 8003710:	d125      	bne.n	800375e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d10b      	bne.n	8003746 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe ff65 	bl	8002626 <HAL_I2C_AbortCpltCallback>
 800375c:	e015      	b.n	800378a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d10b      	bne.n	8003784 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fe ff44 	bl	8002612 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10e      	bne.n	80037b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d113      	bne.n	8003804 <I2C_ITError+0x254>
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b28      	cmp	r3, #40	; 0x28
 80037e0:	d110      	bne.n	8003804 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <I2C_ITError+0x260>)
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fef3 	bl	80025ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	08003b11 	.word	0x08003b11
 8003810:	ffff0000 	.word	0xffff0000

08003814 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	4608      	mov	r0, r1
 800381e:	4611      	mov	r1, r2
 8003820:	461a      	mov	r2, r3
 8003822:	4603      	mov	r3, r0
 8003824:	817b      	strh	r3, [r7, #10]
 8003826:	460b      	mov	r3, r1
 8003828:	813b      	strh	r3, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800383c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	2200      	movs	r2, #0
 8003846:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fa08 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003864:	d103      	bne.n	800386e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e05f      	b.n	8003932 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003872:	897b      	ldrh	r3, [r7, #10]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003880:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	492d      	ldr	r1, [pc, #180]	; (800393c <I2C_RequestMemoryWrite+0x128>)
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fa40 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e04c      	b.n	8003932 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	6a39      	ldr	r1, [r7, #32]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 faaa 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d107      	bne.n	80038d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e02b      	b.n	8003932 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038e0:	893b      	ldrh	r3, [r7, #8]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	611a      	str	r2, [r3, #16]
 80038ea:	e021      	b.n	8003930 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038ec:	893b      	ldrh	r3, [r7, #8]
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fc:	6a39      	ldr	r1, [r7, #32]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fa84 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	2b04      	cmp	r3, #4
 8003910:	d107      	bne.n	8003922 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003920:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e005      	b.n	8003932 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003926:	893b      	ldrh	r3, [r7, #8]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	00010002 	.word	0x00010002

08003940 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4603      	mov	r3, r0
 8003950:	817b      	strh	r3, [r7, #10]
 8003952:	460b      	mov	r3, r1
 8003954:	813b      	strh	r3, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003968:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003978:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	2200      	movs	r2, #0
 8003982:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f96a 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a0:	d103      	bne.n	80039aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0aa      	b.n	8003b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	6a3a      	ldr	r2, [r7, #32]
 80039c2:	4952      	ldr	r1, [pc, #328]	; (8003b0c <I2C_RequestMemoryRead+0x1cc>)
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f9a2 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e097      	b.n	8003b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	6a39      	ldr	r1, [r7, #32]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fa0c 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d107      	bne.n	8003a12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e076      	b.n	8003b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1c:	893b      	ldrh	r3, [r7, #8]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	e021      	b.n	8003a6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a28:	893b      	ldrh	r3, [r7, #8]
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a38:	6a39      	ldr	r1, [r7, #32]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f9e6 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d107      	bne.n	8003a5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e050      	b.n	8003b04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a62:	893b      	ldrh	r3, [r7, #8]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	6a39      	ldr	r1, [r7, #32]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f9cb 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d107      	bne.n	8003a94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e035      	b.n	8003b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f8d3 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ace:	d103      	bne.n	8003ad8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e013      	b.n	8003b04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003adc:	897b      	ldrh	r3, [r7, #10]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	6a3a      	ldr	r2, [r7, #32]
 8003af0:	4906      	ldr	r1, [pc, #24]	; (8003b0c <I2C_RequestMemoryRead+0x1cc>)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f90b 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	00010002 	.word	0x00010002

08003b10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b2a:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <I2C_DMAAbort+0x148>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	08db      	lsrs	r3, r3, #3
 8003b30:	4a4a      	ldr	r2, [pc, #296]	; (8003c5c <I2C_DMAAbort+0x14c>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	0a1a      	lsrs	r2, r3, #8
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00da      	lsls	r2, r3, #3
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003b56:	e00a      	b.n	8003b6e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6c:	d0ea      	beq.n	8003b44 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b60      	cmp	r3, #96	; 0x60
 8003bde:	d10e      	bne.n	8003bfe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f7fe fd15 	bl	8002626 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bfc:	e027      	b.n	8003c4e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c04:	2b28      	cmp	r3, #40	; 0x28
 8003c06:	d117      	bne.n	8003c38 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2228      	movs	r2, #40	; 0x28
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c36:	e007      	b.n	8003c48 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c48:	6978      	ldr	r0, [r7, #20]
 8003c4a:	f7fe fce2 	bl	8002612 <HAL_I2C_ErrorCallback>
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200000d8 	.word	0x200000d8
 8003c5c:	14f8b589 	.word	0x14f8b589

08003c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c70:	e025      	b.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d021      	beq.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7fd fa85 	bl	8001188 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d116      	bne.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e023      	b.n	8003d06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10d      	bne.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	e00c      	b.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	43da      	mvns	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d0b6      	beq.n	8003c72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d1c:	e051      	b.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2c:	d123      	bne.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e046      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d021      	beq.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7e:	f7fd fa03 	bl	8001188 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d116      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e020      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d10c      	bne.n	8003de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e00b      	b.n	8003dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d18d      	bne.n	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e18:	e02d      	b.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f900 	bl	8004020 <I2C_IsAcknowledgeFailed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e02d      	b.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d021      	beq.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fd f9a9 	bl	8001188 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e007      	b.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d1ca      	bne.n	8003e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e9a:	e02d      	b.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f8bf 	bl	8004020 <I2C_IsAcknowledgeFailed>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e02d      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d021      	beq.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb4:	f7fd f968 	bl	8001188 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d116      	bne.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d1ca      	bne.n	8003e9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f1c:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	0a1a      	lsrs	r2, r3, #8
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d107      	bne.n	8003f4e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e008      	b.n	8003f60 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5c:	d0e9      	beq.n	8003f32 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	200000d8 	.word	0x200000d8
 8003f70:	14f8b589 	.word	0x14f8b589

08003f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f80:	e042      	b.n	8004008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d119      	bne.n	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0210 	mvn.w	r2, #16
 8003f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e029      	b.n	8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fd f8e0 	bl	8001188 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d116      	bne.n	8004008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e007      	b.n	8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d1b5      	bne.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004036:	d11b      	bne.n	8004070 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004040:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f043 0204 	orr.w	r2, r3, #4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800408e:	d103      	bne.n	8004098 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004096:	e007      	b.n	80040a8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80040a0:	d102      	bne.n	80040a8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2208      	movs	r2, #8
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e264      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d075      	beq.n	80041be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d2:	4ba3      	ldr	r3, [pc, #652]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d00c      	beq.n	80040f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040de:	4ba0      	ldr	r3, [pc, #640]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d112      	bne.n	8004110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ea:	4b9d      	ldr	r3, [pc, #628]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f6:	d10b      	bne.n	8004110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	4b99      	ldr	r3, [pc, #612]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d05b      	beq.n	80041bc <HAL_RCC_OscConfig+0x108>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d157      	bne.n	80041bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e23f      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d106      	bne.n	8004128 <HAL_RCC_OscConfig+0x74>
 800411a:	4b91      	ldr	r3, [pc, #580]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a90      	ldr	r2, [pc, #576]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e01d      	b.n	8004164 <HAL_RCC_OscConfig+0xb0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x98>
 8004132:	4b8b      	ldr	r3, [pc, #556]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a8a      	ldr	r2, [pc, #552]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a87      	ldr	r2, [pc, #540]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e00b      	b.n	8004164 <HAL_RCC_OscConfig+0xb0>
 800414c:	4b84      	ldr	r3, [pc, #528]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a83      	ldr	r2, [pc, #524]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b81      	ldr	r3, [pc, #516]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a80      	ldr	r2, [pc, #512]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d013      	beq.n	8004194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fd f80c 	bl	8001188 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004174:	f7fd f808 	bl	8001188 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e204      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0xc0>
 8004192:	e014      	b.n	80041be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fc fff8 	bl	8001188 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419c:	f7fc fff4 	bl	8001188 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e1f0      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ae:	4b6c      	ldr	r3, [pc, #432]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0xe8>
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d063      	beq.n	8004292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ca:	4b65      	ldr	r3, [pc, #404]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d6:	4b62      	ldr	r3, [pc, #392]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d11c      	bne.n	800421c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e2:	4b5f      	ldr	r3, [pc, #380]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d116      	bne.n	800421c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ee:	4b5c      	ldr	r3, [pc, #368]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_RCC_OscConfig+0x152>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d001      	beq.n	8004206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e1c4      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004206:	4b56      	ldr	r3, [pc, #344]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4952      	ldr	r1, [pc, #328]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800421a:	e03a      	b.n	8004292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d020      	beq.n	8004266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004224:	4b4f      	ldr	r3, [pc, #316]	; (8004364 <HAL_RCC_OscConfig+0x2b0>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7fc ffad 	bl	8001188 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004232:	f7fc ffa9 	bl	8001188 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e1a5      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	4b46      	ldr	r3, [pc, #280]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004250:	4b43      	ldr	r3, [pc, #268]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4940      	ldr	r1, [pc, #256]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	4313      	orrs	r3, r2
 8004262:	600b      	str	r3, [r1, #0]
 8004264:	e015      	b.n	8004292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004266:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_RCC_OscConfig+0x2b0>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fc ff8c 	bl	8001188 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004274:	f7fc ff88 	bl	8001188 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e184      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d030      	beq.n	8004300 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d016      	beq.n	80042d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a6:	4b30      	ldr	r3, [pc, #192]	; (8004368 <HAL_RCC_OscConfig+0x2b4>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fc ff6c 	bl	8001188 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fc ff68 	bl	8001188 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e164      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	4b26      	ldr	r3, [pc, #152]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x200>
 80042d2:	e015      	b.n	8004300 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCC_OscConfig+0x2b4>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042da:	f7fc ff55 	bl	8001188 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e2:	f7fc ff51 	bl	8001188 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e14d      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a0 	beq.w	800444e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10f      	bne.n	800433e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a0e      	ldr	r2, [pc, #56]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_OscConfig+0x2b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d121      	bne.n	800438e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_RCC_OscConfig+0x2b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a07      	ldr	r2, [pc, #28]	; (800436c <HAL_RCC_OscConfig+0x2b8>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004356:	f7fc ff17 	bl	8001188 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	e011      	b.n	8004382 <HAL_RCC_OscConfig+0x2ce>
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	42470000 	.word	0x42470000
 8004368:	42470e80 	.word	0x42470e80
 800436c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004370:	f7fc ff0a 	bl	8001188 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e106      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	4b85      	ldr	r3, [pc, #532]	; (8004598 <HAL_RCC_OscConfig+0x4e4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d106      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2f0>
 8004396:	4b81      	ldr	r3, [pc, #516]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a80      	ldr	r2, [pc, #512]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	e01c      	b.n	80043de <HAL_RCC_OscConfig+0x32a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCC_OscConfig+0x312>
 80043ac:	4b7b      	ldr	r3, [pc, #492]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a7a      	ldr	r2, [pc, #488]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	4b78      	ldr	r3, [pc, #480]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a77      	ldr	r2, [pc, #476]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
 80043c4:	e00b      	b.n	80043de <HAL_RCC_OscConfig+0x32a>
 80043c6:	4b75      	ldr	r3, [pc, #468]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a74      	ldr	r2, [pc, #464]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
 80043d2:	4b72      	ldr	r3, [pc, #456]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	4a71      	ldr	r2, [pc, #452]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d015      	beq.n	8004412 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fc fecf 	bl	8001188 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fc fecb 	bl	8001188 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e0c5      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	4b65      	ldr	r3, [pc, #404]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ee      	beq.n	80043ee <HAL_RCC_OscConfig+0x33a>
 8004410:	e014      	b.n	800443c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004412:	f7fc feb9 	bl	8001188 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004418:	e00a      	b.n	8004430 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441a:	f7fc feb5 	bl	8001188 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f241 3288 	movw	r2, #5000	; 0x1388
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0af      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004430:	4b5a      	ldr	r3, [pc, #360]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ee      	bne.n	800441a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d105      	bne.n	800444e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004442:	4b56      	ldr	r3, [pc, #344]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	4a55      	ldr	r2, [pc, #340]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 8004448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 809b 	beq.w	800458e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004458:	4b50      	ldr	r3, [pc, #320]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b08      	cmp	r3, #8
 8004462:	d05c      	beq.n	800451e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d141      	bne.n	80044f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b4c      	ldr	r3, [pc, #304]	; (80045a0 <HAL_RCC_OscConfig+0x4ec>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004472:	f7fc fe89 	bl	8001188 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447a:	f7fc fe85 	bl	8001188 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e081      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448c:	4b43      	ldr	r3, [pc, #268]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f0      	bne.n	800447a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	019b      	lsls	r3, r3, #6
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	3b01      	subs	r3, #1
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	4937      	ldr	r1, [pc, #220]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c2:	4b37      	ldr	r3, [pc, #220]	; (80045a0 <HAL_RCC_OscConfig+0x4ec>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fc fe5e 	bl	8001188 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fc fe5a 	bl	8001188 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e056      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x41c>
 80044ee:	e04e      	b.n	800458e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f0:	4b2b      	ldr	r3, [pc, #172]	; (80045a0 <HAL_RCC_OscConfig+0x4ec>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f6:	f7fc fe47 	bl	8001188 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fe:	f7fc fe43 	bl	8001188 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e03f      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004510:	4b22      	ldr	r3, [pc, #136]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f0      	bne.n	80044fe <HAL_RCC_OscConfig+0x44a>
 800451c:	e037      	b.n	800458e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e032      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800452a:	4b1c      	ldr	r3, [pc, #112]	; (800459c <HAL_RCC_OscConfig+0x4e8>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d028      	beq.n	800458a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d121      	bne.n	800458a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d11a      	bne.n	800458a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800455a:	4013      	ands	r3, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004560:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004562:	4293      	cmp	r3, r2
 8004564:	d111      	bne.n	800458a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	3b01      	subs	r3, #1
 8004574:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004576:	429a      	cmp	r2, r3
 8004578:	d107      	bne.n	800458a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40007000 	.word	0x40007000
 800459c:	40023800 	.word	0x40023800
 80045a0:	42470060 	.word	0x42470060

080045a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0cc      	b.n	8004752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b8:	4b68      	ldr	r3, [pc, #416]	; (800475c <HAL_RCC_ClockConfig+0x1b8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d90c      	bls.n	80045e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c6:	4b65      	ldr	r3, [pc, #404]	; (800475c <HAL_RCC_ClockConfig+0x1b8>)
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ce:	4b63      	ldr	r3, [pc, #396]	; (800475c <HAL_RCC_ClockConfig+0x1b8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0b8      	b.n	8004752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d020      	beq.n	800462e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045f8:	4b59      	ldr	r3, [pc, #356]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	4a58      	ldr	r2, [pc, #352]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004610:	4b53      	ldr	r3, [pc, #332]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a52      	ldr	r2, [pc, #328]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800461a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800461c:	4b50      	ldr	r3, [pc, #320]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	494d      	ldr	r1, [pc, #308]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d044      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d107      	bne.n	8004652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	4b47      	ldr	r3, [pc, #284]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d119      	bne.n	8004682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e07f      	b.n	8004752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d003      	beq.n	8004662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800465e:	2b03      	cmp	r3, #3
 8004660:	d107      	bne.n	8004672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004662:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e06f      	b.n	8004752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004672:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e067      	b.n	8004752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004682:	4b37      	ldr	r3, [pc, #220]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f023 0203 	bic.w	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	4934      	ldr	r1, [pc, #208]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004694:	f7fc fd78 	bl	8001188 <HAL_GetTick>
 8004698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469c:	f7fc fd74 	bl	8001188 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e04f      	b.n	8004752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	4b2b      	ldr	r3, [pc, #172]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 020c 	and.w	r2, r3, #12
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d1eb      	bne.n	800469c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <HAL_RCC_ClockConfig+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d20c      	bcs.n	80046ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b22      	ldr	r3, [pc, #136]	; (800475c <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b20      	ldr	r3, [pc, #128]	; (800475c <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e032      	b.n	8004752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d008      	beq.n	800470a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f8:	4b19      	ldr	r3, [pc, #100]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4916      	ldr	r1, [pc, #88]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	4313      	orrs	r3, r2
 8004708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	490e      	ldr	r1, [pc, #56]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	4313      	orrs	r3, r2
 8004728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800472a:	f000 f821 	bl	8004770 <HAL_RCC_GetSysClockFreq>
 800472e:	4602      	mov	r2, r0
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	490a      	ldr	r1, [pc, #40]	; (8004764 <HAL_RCC_ClockConfig+0x1c0>)
 800473c:	5ccb      	ldrb	r3, [r1, r3]
 800473e:	fa22 f303 	lsr.w	r3, r2, r3
 8004742:	4a09      	ldr	r2, [pc, #36]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004746:	4b09      	ldr	r3, [pc, #36]	; (800476c <HAL_RCC_ClockConfig+0x1c8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fc fcd8 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40023c00 	.word	0x40023c00
 8004760:	40023800 	.word	0x40023800
 8004764:	08006564 	.word	0x08006564
 8004768:	200000d8 	.word	0x200000d8
 800476c:	200000dc 	.word	0x200000dc

08004770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	2300      	movs	r3, #0
 8004782:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004788:	4b67      	ldr	r3, [pc, #412]	; (8004928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	2b08      	cmp	r3, #8
 8004792:	d00d      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004794:	2b08      	cmp	r3, #8
 8004796:	f200 80bd 	bhi.w	8004914 <HAL_RCC_GetSysClockFreq+0x1a4>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x34>
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d003      	beq.n	80047aa <HAL_RCC_GetSysClockFreq+0x3a>
 80047a2:	e0b7      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047a4:	4b61      	ldr	r3, [pc, #388]	; (800492c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047a6:	60bb      	str	r3, [r7, #8]
       break;
 80047a8:	e0b7      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047aa:	4b61      	ldr	r3, [pc, #388]	; (8004930 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047ac:	60bb      	str	r3, [r7, #8]
      break;
 80047ae:	e0b4      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b0:	4b5d      	ldr	r3, [pc, #372]	; (8004928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ba:	4b5b      	ldr	r3, [pc, #364]	; (8004928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d04d      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c6:	4b58      	ldr	r3, [pc, #352]	; (8004928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	461a      	mov	r2, r3
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047d6:	f04f 0100 	mov.w	r1, #0
 80047da:	ea02 0800 	and.w	r8, r2, r0
 80047de:	ea03 0901 	and.w	r9, r3, r1
 80047e2:	4640      	mov	r0, r8
 80047e4:	4649      	mov	r1, r9
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	014b      	lsls	r3, r1, #5
 80047f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047f4:	0142      	lsls	r2, r0, #5
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	ebb0 0008 	subs.w	r0, r0, r8
 80047fe:	eb61 0109 	sbc.w	r1, r1, r9
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	018b      	lsls	r3, r1, #6
 800480c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004810:	0182      	lsls	r2, r0, #6
 8004812:	1a12      	subs	r2, r2, r0
 8004814:	eb63 0301 	sbc.w	r3, r3, r1
 8004818:	f04f 0000 	mov.w	r0, #0
 800481c:	f04f 0100 	mov.w	r1, #0
 8004820:	00d9      	lsls	r1, r3, #3
 8004822:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004826:	00d0      	lsls	r0, r2, #3
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	eb12 0208 	adds.w	r2, r2, r8
 8004830:	eb43 0309 	adc.w	r3, r3, r9
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f04f 0100 	mov.w	r1, #0
 800483c:	0259      	lsls	r1, r3, #9
 800483e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004842:	0250      	lsls	r0, r2, #9
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	461a      	mov	r2, r3
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	f7fb fd14 	bl	8000280 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4613      	mov	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	e04a      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004862:	4b31      	ldr	r3, [pc, #196]	; (8004928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	461a      	mov	r2, r3
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	ea02 0400 	and.w	r4, r2, r0
 800487a:	ea03 0501 	and.w	r5, r3, r1
 800487e:	4620      	mov	r0, r4
 8004880:	4629      	mov	r1, r5
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	014b      	lsls	r3, r1, #5
 800488c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004890:	0142      	lsls	r2, r0, #5
 8004892:	4610      	mov	r0, r2
 8004894:	4619      	mov	r1, r3
 8004896:	1b00      	subs	r0, r0, r4
 8004898:	eb61 0105 	sbc.w	r1, r1, r5
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	018b      	lsls	r3, r1, #6
 80048a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048aa:	0182      	lsls	r2, r0, #6
 80048ac:	1a12      	subs	r2, r2, r0
 80048ae:	eb63 0301 	sbc.w	r3, r3, r1
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	00d9      	lsls	r1, r3, #3
 80048bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048c0:	00d0      	lsls	r0, r2, #3
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	1912      	adds	r2, r2, r4
 80048c8:	eb45 0303 	adc.w	r3, r5, r3
 80048cc:	f04f 0000 	mov.w	r0, #0
 80048d0:	f04f 0100 	mov.w	r1, #0
 80048d4:	0299      	lsls	r1, r3, #10
 80048d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048da:	0290      	lsls	r0, r2, #10
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	f7fb fcc8 	bl	8000280 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4613      	mov	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	3301      	adds	r3, #1
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	60bb      	str	r3, [r7, #8]
      break;
 8004912:	e002      	b.n	800491a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004916:	60bb      	str	r3, [r7, #8]
      break;
 8004918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800491a:	68bb      	ldr	r3, [r7, #8]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	00f42400 	.word	0x00f42400
 8004930:	007a1200 	.word	0x007a1200

08004934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_RCC_GetHCLKFreq+0x14>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	200000d8 	.word	0x200000d8

0800494c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004950:	f7ff fff0 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0a9b      	lsrs	r3, r3, #10
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40023800 	.word	0x40023800
 8004970:	08006574 	.word	0x08006574

08004974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004978:	f7ff ffdc 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0b5b      	lsrs	r3, r3, #13
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40023800 	.word	0x40023800
 8004998:	08006574 	.word	0x08006574

0800499c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e03f      	b.n	8004a2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc fb00 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	; 0x24
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 ff5b 	bl	800589c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b08a      	sub	sp, #40	; 0x28
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d17c      	bne.n	8004b50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <HAL_UART_Transmit+0x2c>
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e075      	b.n	8004b52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_UART_Transmit+0x3e>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e06e      	b.n	8004b52 <HAL_UART_Transmit+0x11c>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2221      	movs	r2, #33	; 0x21
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a8a:	f7fc fb7d 	bl	8001188 <HAL_GetTick>
 8004a8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	88fa      	ldrh	r2, [r7, #6]
 8004a94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa4:	d108      	bne.n	8004ab8 <HAL_UART_Transmit+0x82>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d104      	bne.n	8004ab8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	e003      	b.n	8004ac0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ac8:	e02a      	b.n	8004b20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2180      	movs	r1, #128	; 0x80
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fc87 	bl	80053e8 <UART_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e036      	b.n	8004b52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004af8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	3302      	adds	r3, #2
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	e007      	b.n	8004b12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1cf      	bne.n	8004aca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2200      	movs	r2, #0
 8004b32:	2140      	movs	r1, #64	; 0x40
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fc57 	bl	80053e8 <UART_WaitOnFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e006      	b.n	8004b52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
  }
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b08a      	sub	sp, #40	; 0x28
 8004b5e:	af02      	add	r7, sp, #8
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	f040 808c 	bne.w	8004c94 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_UART_Receive+0x2e>
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e084      	b.n	8004c96 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_UART_Receive+0x40>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e07d      	b.n	8004c96 <HAL_UART_Receive+0x13c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2222      	movs	r2, #34	; 0x22
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bb6:	f7fc fae7 	bl	8001188 <HAL_GetTick>
 8004bba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd0:	d108      	bne.n	8004be4 <HAL_UART_Receive+0x8a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d104      	bne.n	8004be4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e003      	b.n	8004bec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004bf4:	e043      	b.n	8004c7e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2120      	movs	r1, #32
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 fbf1 	bl	80053e8 <UART_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e042      	b.n	8004c96 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10c      	bne.n	8004c30 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	3302      	adds	r3, #2
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e01f      	b.n	8004c70 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c38:	d007      	beq.n	8004c4a <HAL_UART_Receive+0xf0>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <HAL_UART_Receive+0xfe>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e008      	b.n	8004c6a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1b6      	bne.n	8004bf6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e000      	b.n	8004c96 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d11d      	bne.n	8004cf4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_UART_Receive_IT+0x26>
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e016      	b.n	8004cf6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Receive_IT+0x38>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e00f      	b.n	8004cf6 <HAL_UART_Receive_IT+0x58>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ce4:	88fb      	ldrh	r3, [r7, #6]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fbea 	bl	80054c4 <UART_Start_Receive_IT>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	e000      	b.n	8004cf6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b09a      	sub	sp, #104	; 0x68
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d1e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d28:	657a      	str	r2, [r7, #84]	; 0x54
 8004d2a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e5      	bne.n	8004d08 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3314      	adds	r3, #20
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	663b      	str	r3, [r7, #96]	; 0x60
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3314      	adds	r3, #20
 8004d5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d5c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d119      	bne.n	8004dac <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f023 0310 	bic.w	r3, r3, #16
 8004d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	330c      	adds	r3, #12
 8004d96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e5      	bne.n	8004d78 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d13f      	bne.n	8004e3a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dda:	61ba      	str	r2, [r7, #24]
 8004ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6979      	ldr	r1, [r7, #20]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	613b      	str	r3, [r7, #16]
   return(result);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e5      	bne.n	8004dba <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d013      	beq.n	8004e1e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <HAL_UART_AbortReceive_IT+0x160>)
 8004dfc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fc fb4d 	bl	80014a2 <HAL_DMA_Abort_IT>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d022      	beq.n	8004e54 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4798      	blx	r3
 8004e1c:	e01a      	b.n	8004e54 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fac2 	bl	80053bc <HAL_UART_AbortReceiveCpltCallback>
 8004e38:	e00c      	b.n	8004e54 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fab4 	bl	80053bc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3768      	adds	r7, #104	; 0x68
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	08005627 	.word	0x08005627

08004e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b0ba      	sub	sp, #232	; 0xe8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10f      	bne.n	8004eca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <HAL_UART_IRQHandler+0x66>
 8004eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fc2f 	bl	8005726 <UART_Receive_IT>
      return;
 8004ec8:	e256      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80de 	beq.w	8005090 <HAL_UART_IRQHandler+0x22c>
 8004ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80d1 	beq.w	8005090 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_UART_IRQHandler+0xae>
 8004efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_UART_IRQHandler+0xd2>
 8004f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f043 0202 	orr.w	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_UART_IRQHandler+0xf6>
 8004f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d011      	beq.n	8004f8a <HAL_UART_IRQHandler+0x126>
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f043 0208 	orr.w	r2, r3, #8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 81ed 	beq.w	800536e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x14e>
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fbba 	bl	8005726 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_UART_IRQHandler+0x17a>
 8004fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d04f      	beq.n	800507e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 faaa 	bl	8005538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d141      	bne.n	8005076 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3314      	adds	r3, #20
 8004ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800500c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800501e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800502a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1d9      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	2b00      	cmp	r3, #0
 8005044:	d013      	beq.n	800506e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	4a7d      	ldr	r2, [pc, #500]	; (8005240 <HAL_UART_IRQHandler+0x3dc>)
 800504c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	4618      	mov	r0, r3
 8005054:	f7fc fa25 	bl	80014a2 <HAL_DMA_Abort_IT>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005068:	4610      	mov	r0, r2
 800506a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506c:	e00e      	b.n	800508c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f99a 	bl	80053a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	e00a      	b.n	800508c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f996 	bl	80053a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	e006      	b.n	800508c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f992 	bl	80053a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800508a:	e170      	b.n	800536e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	bf00      	nop
    return;
 800508e:	e16e      	b.n	800536e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	2b01      	cmp	r3, #1
 8005096:	f040 814a 	bne.w	800532e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8143 	beq.w	800532e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 813c 	beq.w	800532e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	f040 80b4 	bne.w	8005244 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8140 	beq.w	8005372 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050fa:	429a      	cmp	r2, r3
 80050fc:	f080 8139 	bcs.w	8005372 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005106:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005112:	f000 8088 	beq.w	8005226 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800512c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005142:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800514e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800515a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1d9      	bne.n	8005116 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3314      	adds	r3, #20
 8005168:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3314      	adds	r3, #20
 8005182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005186:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800518a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800518e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e1      	bne.n	8005162 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3314      	adds	r3, #20
 80051a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e3      	bne.n	800519e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	f023 0310 	bic.w	r3, r3, #16
 80051fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	330c      	adds	r3, #12
 8005204:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005208:	65ba      	str	r2, [r7, #88]	; 0x58
 800520a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800520e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e3      	bne.n	80051e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	4618      	mov	r0, r3
 8005222:	f7fc f8ce 	bl	80013c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800522e:	b29b      	uxth	r3, r3
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	b29b      	uxth	r3, r3
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8ca 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800523c:	e099      	b.n	8005372 <HAL_UART_IRQHandler+0x50e>
 800523e:	bf00      	nop
 8005240:	080055ff 	.word	0x080055ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800524c:	b29b      	uxth	r3, r3
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 808b 	beq.w	8005376 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 8086 	beq.w	8005376 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800528e:	647a      	str	r2, [r7, #68]	; 0x44
 8005290:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005294:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800529c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e3      	bne.n	800526a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3314      	adds	r3, #20
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	623b      	str	r3, [r7, #32]
   return(result);
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3314      	adds	r3, #20
 80052c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052c6:	633a      	str	r2, [r7, #48]	; 0x30
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e3      	bne.n	80052a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	330c      	adds	r3, #12
 80052ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0310 	bic.w	r3, r3, #16
 80052fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800530c:	61fa      	str	r2, [r7, #28]
 800530e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	69b9      	ldr	r1, [r7, #24]
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	617b      	str	r3, [r7, #20]
   return(result);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e3      	bne.n	80052e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f852 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800532c:	e023      	b.n	8005376 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_UART_IRQHandler+0x4ea>
 800533a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f985 	bl	8005656 <UART_Transmit_IT>
    return;
 800534c:	e014      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00e      	beq.n	8005378 <HAL_UART_IRQHandler+0x514>
 800535a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9c5 	bl	80056f6 <UART_EndTransmit_IT>
    return;
 800536c:	e004      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
    return;
 800536e:	bf00      	nop
 8005370:	e002      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
      return;
 8005372:	bf00      	nop
 8005374:	e000      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
      return;
 8005376:	bf00      	nop
  }
}
 8005378:	37e8      	adds	r7, #232	; 0xe8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop

08005380 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b090      	sub	sp, #64	; 0x40
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f8:	e050      	b.n	800549c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d04c      	beq.n	800549c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <UART_WaitOnFlagUntilTimeout+0x30>
 8005408:	f7fb febe 	bl	8001188 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005414:	429a      	cmp	r2, r3
 8005416:	d241      	bcs.n	800549c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005438:	637a      	str	r2, [r7, #52]	; 0x34
 800543a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800543e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e5      	bne.n	8005418 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3314      	adds	r3, #20
 8005452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	613b      	str	r3, [r7, #16]
   return(result);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3314      	adds	r3, #20
 800546a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800546c:	623a      	str	r2, [r7, #32]
 800546e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	69f9      	ldr	r1, [r7, #28]
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	61bb      	str	r3, [r7, #24]
   return(result);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e5      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e00f      	b.n	80054bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4013      	ands	r3, r2
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d09f      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3740      	adds	r7, #64	; 0x40
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	88fa      	ldrh	r2, [r7, #6]
 80054dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2222      	movs	r2, #34	; 0x22
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005508:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0201 	orr.w	r2, r2, #1
 8005518:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0220 	orr.w	r2, r2, #32
 8005528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005538:	b480      	push	{r7}
 800553a:	b095      	sub	sp, #84	; 0x54
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005560:	643a      	str	r2, [r7, #64]	; 0x40
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e5      	bne.n	8005540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3314      	adds	r3, #20
 800557a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	61fb      	str	r3, [r7, #28]
   return(result);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3314      	adds	r3, #20
 8005592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800559a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d119      	bne.n	80055e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f023 0310 	bic.w	r3, r3, #16
 80055c6:	647b      	str	r3, [r7, #68]	; 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055d0:	61ba      	str	r2, [r7, #24]
 80055d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6979      	ldr	r1, [r7, #20]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	613b      	str	r3, [r7, #16]
   return(result);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e5      	bne.n	80055b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055f2:	bf00      	nop
 80055f4:	3754      	adds	r7, #84	; 0x54
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff fec5 	bl	80053a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff feb7 	bl	80053bc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b21      	cmp	r3, #33	; 0x21
 8005668:	d13e      	bne.n	80056e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005672:	d114      	bne.n	800569e <UART_Transmit_IT+0x48>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d110      	bne.n	800569e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005690:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	1c9a      	adds	r2, r3, #2
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]
 800569c:	e008      	b.n	80056b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	1c59      	adds	r1, r3, #1
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6211      	str	r1, [r2, #32]
 80056a8:	781a      	ldrb	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	4619      	mov	r1, r3
 80056be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10f      	bne.n	80056e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800570c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fe32 	bl	8005380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b08c      	sub	sp, #48	; 0x30
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b22      	cmp	r3, #34	; 0x22
 8005738:	f040 80ab 	bne.w	8005892 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005744:	d117      	bne.n	8005776 <UART_Receive_IT+0x50>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d113      	bne.n	8005776 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b29b      	uxth	r3, r3
 8005760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005764:	b29a      	uxth	r2, r3
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	1c9a      	adds	r2, r3, #2
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	; 0x28
 8005774:	e026      	b.n	80057c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800577c:	2300      	movs	r3, #0
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005788:	d007      	beq.n	800579a <UART_Receive_IT+0x74>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <UART_Receive_IT+0x82>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	e008      	b.n	80057ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4619      	mov	r1, r3
 80057d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d15a      	bne.n	800588e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0220 	bic.w	r2, r2, #32
 80057e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	2b01      	cmp	r3, #1
 8005816:	d135      	bne.n	8005884 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	613b      	str	r3, [r7, #16]
   return(result);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f023 0310 	bic.w	r3, r3, #16
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583e:	623a      	str	r2, [r7, #32]
 8005840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	69f9      	ldr	r1, [r7, #28]
 8005844:	6a3a      	ldr	r2, [r7, #32]
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	61bb      	str	r3, [r7, #24]
   return(result);
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e5      	bne.n	800581e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b10      	cmp	r3, #16
 800585e:	d10a      	bne.n	8005876 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff fda7 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
 8005882:	e002      	b.n	800588a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fd85 	bl	8005394 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	e002      	b.n	8005894 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	e000      	b.n	8005894 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005892:	2302      	movs	r3, #2
  }
}
 8005894:	4618      	mov	r0, r3
 8005896:	3730      	adds	r7, #48	; 0x30
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	b09f      	sub	sp, #124	; 0x7c
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b2:	68d9      	ldr	r1, [r3, #12]
 80058b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	ea40 0301 	orr.w	r3, r0, r1
 80058bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058e0:	f021 010c 	bic.w	r1, r1, #12
 80058e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ea:	430b      	orrs	r3, r1
 80058ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	6999      	ldr	r1, [r3, #24]
 80058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	ea40 0301 	orr.w	r3, r0, r1
 8005904:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4bc5      	ldr	r3, [pc, #788]	; (8005c20 <UART_SetConfig+0x384>)
 800590c:	429a      	cmp	r2, r3
 800590e:	d004      	beq.n	800591a <UART_SetConfig+0x7e>
 8005910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4bc3      	ldr	r3, [pc, #780]	; (8005c24 <UART_SetConfig+0x388>)
 8005916:	429a      	cmp	r2, r3
 8005918:	d103      	bne.n	8005922 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800591a:	f7ff f82b 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 800591e:	6778      	str	r0, [r7, #116]	; 0x74
 8005920:	e002      	b.n	8005928 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005922:	f7ff f813 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8005926:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	f040 80b6 	bne.w	8005aa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005936:	461c      	mov	r4, r3
 8005938:	f04f 0500 	mov.w	r5, #0
 800593c:	4622      	mov	r2, r4
 800593e:	462b      	mov	r3, r5
 8005940:	1891      	adds	r1, r2, r2
 8005942:	6439      	str	r1, [r7, #64]	; 0x40
 8005944:	415b      	adcs	r3, r3
 8005946:	647b      	str	r3, [r7, #68]	; 0x44
 8005948:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800594c:	1912      	adds	r2, r2, r4
 800594e:	eb45 0303 	adc.w	r3, r5, r3
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f04f 0100 	mov.w	r1, #0
 800595a:	00d9      	lsls	r1, r3, #3
 800595c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005960:	00d0      	lsls	r0, r2, #3
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	1911      	adds	r1, r2, r4
 8005968:	6639      	str	r1, [r7, #96]	; 0x60
 800596a:	416b      	adcs	r3, r5
 800596c:	667b      	str	r3, [r7, #100]	; 0x64
 800596e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	461a      	mov	r2, r3
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	1891      	adds	r1, r2, r2
 800597a:	63b9      	str	r1, [r7, #56]	; 0x38
 800597c:	415b      	adcs	r3, r3
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005984:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005988:	f7fa fc7a 	bl	8000280 <__aeabi_uldivmod>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4ba5      	ldr	r3, [pc, #660]	; (8005c28 <UART_SetConfig+0x38c>)
 8005992:	fba3 2302 	umull	r2, r3, r3, r2
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	011e      	lsls	r6, r3, #4
 800599a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800599c:	461c      	mov	r4, r3
 800599e:	f04f 0500 	mov.w	r5, #0
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	1891      	adds	r1, r2, r2
 80059a8:	6339      	str	r1, [r7, #48]	; 0x30
 80059aa:	415b      	adcs	r3, r3
 80059ac:	637b      	str	r3, [r7, #52]	; 0x34
 80059ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059b2:	1912      	adds	r2, r2, r4
 80059b4:	eb45 0303 	adc.w	r3, r5, r3
 80059b8:	f04f 0000 	mov.w	r0, #0
 80059bc:	f04f 0100 	mov.w	r1, #0
 80059c0:	00d9      	lsls	r1, r3, #3
 80059c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059c6:	00d0      	lsls	r0, r2, #3
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	1911      	adds	r1, r2, r4
 80059ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80059d0:	416b      	adcs	r3, r5
 80059d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	461a      	mov	r2, r3
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	1891      	adds	r1, r2, r2
 80059e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80059e2:	415b      	adcs	r3, r3
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059ee:	f7fa fc47 	bl	8000280 <__aeabi_uldivmod>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4b8c      	ldr	r3, [pc, #560]	; (8005c28 <UART_SetConfig+0x38c>)
 80059f8:	fba3 1302 	umull	r1, r3, r3, r2
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	2164      	movs	r1, #100	; 0x64
 8005a00:	fb01 f303 	mul.w	r3, r1, r3
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	3332      	adds	r3, #50	; 0x32
 8005a0a:	4a87      	ldr	r2, [pc, #540]	; (8005c28 <UART_SetConfig+0x38c>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a18:	441e      	add	r6, r3
 8005a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	1894      	adds	r4, r2, r2
 8005a28:	623c      	str	r4, [r7, #32]
 8005a2a:	415b      	adcs	r3, r3
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a32:	1812      	adds	r2, r2, r0
 8005a34:	eb41 0303 	adc.w	r3, r1, r3
 8005a38:	f04f 0400 	mov.w	r4, #0
 8005a3c:	f04f 0500 	mov.w	r5, #0
 8005a40:	00dd      	lsls	r5, r3, #3
 8005a42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a46:	00d4      	lsls	r4, r2, #3
 8005a48:	4622      	mov	r2, r4
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	1814      	adds	r4, r2, r0
 8005a4e:	653c      	str	r4, [r7, #80]	; 0x50
 8005a50:	414b      	adcs	r3, r1
 8005a52:	657b      	str	r3, [r7, #84]	; 0x54
 8005a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	1891      	adds	r1, r2, r2
 8005a60:	61b9      	str	r1, [r7, #24]
 8005a62:	415b      	adcs	r3, r3
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a6e:	f7fa fc07 	bl	8000280 <__aeabi_uldivmod>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4b6c      	ldr	r3, [pc, #432]	; (8005c28 <UART_SetConfig+0x38c>)
 8005a78:	fba3 1302 	umull	r1, r3, r3, r2
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	2164      	movs	r1, #100	; 0x64
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	3332      	adds	r3, #50	; 0x32
 8005a8a:	4a67      	ldr	r2, [pc, #412]	; (8005c28 <UART_SetConfig+0x38c>)
 8005a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	f003 0207 	and.w	r2, r3, #7
 8005a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4432      	add	r2, r6
 8005a9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a9e:	e0b9      	b.n	8005c14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	f04f 0500 	mov.w	r5, #0
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	462b      	mov	r3, r5
 8005aac:	1891      	adds	r1, r2, r2
 8005aae:	6139      	str	r1, [r7, #16]
 8005ab0:	415b      	adcs	r3, r3
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ab8:	1912      	adds	r2, r2, r4
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f04f 0000 	mov.w	r0, #0
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	00d9      	lsls	r1, r3, #3
 8005ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005acc:	00d0      	lsls	r0, r2, #3
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	eb12 0804 	adds.w	r8, r2, r4
 8005ad6:	eb43 0905 	adc.w	r9, r3, r5
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f04f 0100 	mov.w	r1, #0
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	008b      	lsls	r3, r1, #2
 8005aee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005af2:	0082      	lsls	r2, r0, #2
 8005af4:	4640      	mov	r0, r8
 8005af6:	4649      	mov	r1, r9
 8005af8:	f7fa fbc2 	bl	8000280 <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <UART_SetConfig+0x38c>)
 8005b02:	fba3 2302 	umull	r2, r3, r3, r2
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	011e      	lsls	r6, r3, #4
 8005b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f04f 0100 	mov.w	r1, #0
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	1894      	adds	r4, r2, r2
 8005b18:	60bc      	str	r4, [r7, #8]
 8005b1a:	415b      	adcs	r3, r3
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b22:	1812      	adds	r2, r2, r0
 8005b24:	eb41 0303 	adc.w	r3, r1, r3
 8005b28:	f04f 0400 	mov.w	r4, #0
 8005b2c:	f04f 0500 	mov.w	r5, #0
 8005b30:	00dd      	lsls	r5, r3, #3
 8005b32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b36:	00d4      	lsls	r4, r2, #3
 8005b38:	4622      	mov	r2, r4
 8005b3a:	462b      	mov	r3, r5
 8005b3c:	1814      	adds	r4, r2, r0
 8005b3e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b40:	414b      	adcs	r3, r1
 8005b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f04f 0100 	mov.w	r1, #0
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	008b      	lsls	r3, r1, #2
 8005b58:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b5c:	0082      	lsls	r2, r0, #2
 8005b5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b62:	f7fa fb8d 	bl	8000280 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <UART_SetConfig+0x38c>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2164      	movs	r1, #100	; 0x64
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	3332      	adds	r3, #50	; 0x32
 8005b7e:	4a2a      	ldr	r2, [pc, #168]	; (8005c28 <UART_SetConfig+0x38c>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b8a:	441e      	add	r6, r3
 8005b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	1894      	adds	r4, r2, r2
 8005b9a:	603c      	str	r4, [r7, #0]
 8005b9c:	415b      	adcs	r3, r3
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ba4:	1812      	adds	r2, r2, r0
 8005ba6:	eb41 0303 	adc.w	r3, r1, r3
 8005baa:	f04f 0400 	mov.w	r4, #0
 8005bae:	f04f 0500 	mov.w	r5, #0
 8005bb2:	00dd      	lsls	r5, r3, #3
 8005bb4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bb8:	00d4      	lsls	r4, r2, #3
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	eb12 0a00 	adds.w	sl, r2, r0
 8005bc2:	eb43 0b01 	adc.w	fp, r3, r1
 8005bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	008b      	lsls	r3, r1, #2
 8005bda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bde:	0082      	lsls	r2, r0, #2
 8005be0:	4650      	mov	r0, sl
 8005be2:	4659      	mov	r1, fp
 8005be4:	f7fa fb4c 	bl	8000280 <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <UART_SetConfig+0x38c>)
 8005bee:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	2164      	movs	r1, #100	; 0x64
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	3332      	adds	r3, #50	; 0x32
 8005c00:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <UART_SetConfig+0x38c>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	f003 020f 	and.w	r2, r3, #15
 8005c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4432      	add	r2, r6
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	377c      	adds	r7, #124	; 0x7c
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1e:	bf00      	nop
 8005c20:	40011000 	.word	0x40011000
 8005c24:	40011400 	.word	0x40011400
 8005c28:	51eb851f 	.word	0x51eb851f

08005c2c <__errno>:
 8005c2c:	4b01      	ldr	r3, [pc, #4]	; (8005c34 <__errno+0x8>)
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	200000e4 	.word	0x200000e4

08005c38 <__libc_init_array>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	4d0d      	ldr	r5, [pc, #52]	; (8005c70 <__libc_init_array+0x38>)
 8005c3c:	4c0d      	ldr	r4, [pc, #52]	; (8005c74 <__libc_init_array+0x3c>)
 8005c3e:	1b64      	subs	r4, r4, r5
 8005c40:	10a4      	asrs	r4, r4, #2
 8005c42:	2600      	movs	r6, #0
 8005c44:	42a6      	cmp	r6, r4
 8005c46:	d109      	bne.n	8005c5c <__libc_init_array+0x24>
 8005c48:	4d0b      	ldr	r5, [pc, #44]	; (8005c78 <__libc_init_array+0x40>)
 8005c4a:	4c0c      	ldr	r4, [pc, #48]	; (8005c7c <__libc_init_array+0x44>)
 8005c4c:	f000 fc4e 	bl	80064ec <_init>
 8005c50:	1b64      	subs	r4, r4, r5
 8005c52:	10a4      	asrs	r4, r4, #2
 8005c54:	2600      	movs	r6, #0
 8005c56:	42a6      	cmp	r6, r4
 8005c58:	d105      	bne.n	8005c66 <__libc_init_array+0x2e>
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c60:	4798      	blx	r3
 8005c62:	3601      	adds	r6, #1
 8005c64:	e7ee      	b.n	8005c44 <__libc_init_array+0xc>
 8005c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6a:	4798      	blx	r3
 8005c6c:	3601      	adds	r6, #1
 8005c6e:	e7f2      	b.n	8005c56 <__libc_init_array+0x1e>
 8005c70:	080065b8 	.word	0x080065b8
 8005c74:	080065b8 	.word	0x080065b8
 8005c78:	080065b8 	.word	0x080065b8
 8005c7c:	080065bc 	.word	0x080065bc

08005c80 <memset>:
 8005c80:	4402      	add	r2, r0
 8005c82:	4603      	mov	r3, r0
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d100      	bne.n	8005c8a <memset+0xa>
 8005c88:	4770      	bx	lr
 8005c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8e:	e7f9      	b.n	8005c84 <memset+0x4>

08005c90 <siprintf>:
 8005c90:	b40e      	push	{r1, r2, r3}
 8005c92:	b500      	push	{lr}
 8005c94:	b09c      	sub	sp, #112	; 0x70
 8005c96:	ab1d      	add	r3, sp, #116	; 0x74
 8005c98:	9002      	str	r0, [sp, #8]
 8005c9a:	9006      	str	r0, [sp, #24]
 8005c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ca0:	4809      	ldr	r0, [pc, #36]	; (8005cc8 <siprintf+0x38>)
 8005ca2:	9107      	str	r1, [sp, #28]
 8005ca4:	9104      	str	r1, [sp, #16]
 8005ca6:	4909      	ldr	r1, [pc, #36]	; (8005ccc <siprintf+0x3c>)
 8005ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cac:	9105      	str	r1, [sp, #20]
 8005cae:	6800      	ldr	r0, [r0, #0]
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	a902      	add	r1, sp, #8
 8005cb4:	f000 f868 	bl	8005d88 <_svfiprintf_r>
 8005cb8:	9b02      	ldr	r3, [sp, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	b01c      	add	sp, #112	; 0x70
 8005cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cc4:	b003      	add	sp, #12
 8005cc6:	4770      	bx	lr
 8005cc8:	200000e4 	.word	0x200000e4
 8005ccc:	ffff0208 	.word	0xffff0208

08005cd0 <__ssputs_r>:
 8005cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd4:	688e      	ldr	r6, [r1, #8]
 8005cd6:	429e      	cmp	r6, r3
 8005cd8:	4682      	mov	sl, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	4690      	mov	r8, r2
 8005cde:	461f      	mov	r7, r3
 8005ce0:	d838      	bhi.n	8005d54 <__ssputs_r+0x84>
 8005ce2:	898a      	ldrh	r2, [r1, #12]
 8005ce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ce8:	d032      	beq.n	8005d50 <__ssputs_r+0x80>
 8005cea:	6825      	ldr	r5, [r4, #0]
 8005cec:	6909      	ldr	r1, [r1, #16]
 8005cee:	eba5 0901 	sub.w	r9, r5, r1
 8005cf2:	6965      	ldr	r5, [r4, #20]
 8005cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	444b      	add	r3, r9
 8005d00:	106d      	asrs	r5, r5, #1
 8005d02:	429d      	cmp	r5, r3
 8005d04:	bf38      	it	cc
 8005d06:	461d      	movcc	r5, r3
 8005d08:	0553      	lsls	r3, r2, #21
 8005d0a:	d531      	bpl.n	8005d70 <__ssputs_r+0xa0>
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	f000 fb47 	bl	80063a0 <_malloc_r>
 8005d12:	4606      	mov	r6, r0
 8005d14:	b950      	cbnz	r0, 8005d2c <__ssputs_r+0x5c>
 8005d16:	230c      	movs	r3, #12
 8005d18:	f8ca 3000 	str.w	r3, [sl]
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	6921      	ldr	r1, [r4, #16]
 8005d2e:	464a      	mov	r2, r9
 8005d30:	f000 fabe 	bl	80062b0 <memcpy>
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	6126      	str	r6, [r4, #16]
 8005d42:	6165      	str	r5, [r4, #20]
 8005d44:	444e      	add	r6, r9
 8005d46:	eba5 0509 	sub.w	r5, r5, r9
 8005d4a:	6026      	str	r6, [r4, #0]
 8005d4c:	60a5      	str	r5, [r4, #8]
 8005d4e:	463e      	mov	r6, r7
 8005d50:	42be      	cmp	r6, r7
 8005d52:	d900      	bls.n	8005d56 <__ssputs_r+0x86>
 8005d54:	463e      	mov	r6, r7
 8005d56:	4632      	mov	r2, r6
 8005d58:	6820      	ldr	r0, [r4, #0]
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	f000 fab6 	bl	80062cc <memmove>
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	6822      	ldr	r2, [r4, #0]
 8005d64:	1b9b      	subs	r3, r3, r6
 8005d66:	4432      	add	r2, r6
 8005d68:	60a3      	str	r3, [r4, #8]
 8005d6a:	6022      	str	r2, [r4, #0]
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e7db      	b.n	8005d28 <__ssputs_r+0x58>
 8005d70:	462a      	mov	r2, r5
 8005d72:	f000 fb6f 	bl	8006454 <_realloc_r>
 8005d76:	4606      	mov	r6, r0
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d1e1      	bne.n	8005d40 <__ssputs_r+0x70>
 8005d7c:	6921      	ldr	r1, [r4, #16]
 8005d7e:	4650      	mov	r0, sl
 8005d80:	f000 fabe 	bl	8006300 <_free_r>
 8005d84:	e7c7      	b.n	8005d16 <__ssputs_r+0x46>
	...

08005d88 <_svfiprintf_r>:
 8005d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8c:	4698      	mov	r8, r3
 8005d8e:	898b      	ldrh	r3, [r1, #12]
 8005d90:	061b      	lsls	r3, r3, #24
 8005d92:	b09d      	sub	sp, #116	; 0x74
 8005d94:	4607      	mov	r7, r0
 8005d96:	460d      	mov	r5, r1
 8005d98:	4614      	mov	r4, r2
 8005d9a:	d50e      	bpl.n	8005dba <_svfiprintf_r+0x32>
 8005d9c:	690b      	ldr	r3, [r1, #16]
 8005d9e:	b963      	cbnz	r3, 8005dba <_svfiprintf_r+0x32>
 8005da0:	2140      	movs	r1, #64	; 0x40
 8005da2:	f000 fafd 	bl	80063a0 <_malloc_r>
 8005da6:	6028      	str	r0, [r5, #0]
 8005da8:	6128      	str	r0, [r5, #16]
 8005daa:	b920      	cbnz	r0, 8005db6 <_svfiprintf_r+0x2e>
 8005dac:	230c      	movs	r3, #12
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	e0d1      	b.n	8005f5a <_svfiprintf_r+0x1d2>
 8005db6:	2340      	movs	r3, #64	; 0x40
 8005db8:	616b      	str	r3, [r5, #20]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005dbe:	2320      	movs	r3, #32
 8005dc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dc8:	2330      	movs	r3, #48	; 0x30
 8005dca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f74 <_svfiprintf_r+0x1ec>
 8005dce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dd2:	f04f 0901 	mov.w	r9, #1
 8005dd6:	4623      	mov	r3, r4
 8005dd8:	469a      	mov	sl, r3
 8005dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dde:	b10a      	cbz	r2, 8005de4 <_svfiprintf_r+0x5c>
 8005de0:	2a25      	cmp	r2, #37	; 0x25
 8005de2:	d1f9      	bne.n	8005dd8 <_svfiprintf_r+0x50>
 8005de4:	ebba 0b04 	subs.w	fp, sl, r4
 8005de8:	d00b      	beq.n	8005e02 <_svfiprintf_r+0x7a>
 8005dea:	465b      	mov	r3, fp
 8005dec:	4622      	mov	r2, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7ff ff6d 	bl	8005cd0 <__ssputs_r>
 8005df6:	3001      	adds	r0, #1
 8005df8:	f000 80aa 	beq.w	8005f50 <_svfiprintf_r+0x1c8>
 8005dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dfe:	445a      	add	r2, fp
 8005e00:	9209      	str	r2, [sp, #36]	; 0x24
 8005e02:	f89a 3000 	ldrb.w	r3, [sl]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 80a2 	beq.w	8005f50 <_svfiprintf_r+0x1c8>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e16:	f10a 0a01 	add.w	sl, sl, #1
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	9307      	str	r3, [sp, #28]
 8005e1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e22:	931a      	str	r3, [sp, #104]	; 0x68
 8005e24:	4654      	mov	r4, sl
 8005e26:	2205      	movs	r2, #5
 8005e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2c:	4851      	ldr	r0, [pc, #324]	; (8005f74 <_svfiprintf_r+0x1ec>)
 8005e2e:	f7fa f9d7 	bl	80001e0 <memchr>
 8005e32:	9a04      	ldr	r2, [sp, #16]
 8005e34:	b9d8      	cbnz	r0, 8005e6e <_svfiprintf_r+0xe6>
 8005e36:	06d0      	lsls	r0, r2, #27
 8005e38:	bf44      	itt	mi
 8005e3a:	2320      	movmi	r3, #32
 8005e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e40:	0711      	lsls	r1, r2, #28
 8005e42:	bf44      	itt	mi
 8005e44:	232b      	movmi	r3, #43	; 0x2b
 8005e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e50:	d015      	beq.n	8005e7e <_svfiprintf_r+0xf6>
 8005e52:	9a07      	ldr	r2, [sp, #28]
 8005e54:	4654      	mov	r4, sl
 8005e56:	2000      	movs	r0, #0
 8005e58:	f04f 0c0a 	mov.w	ip, #10
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e62:	3b30      	subs	r3, #48	; 0x30
 8005e64:	2b09      	cmp	r3, #9
 8005e66:	d94e      	bls.n	8005f06 <_svfiprintf_r+0x17e>
 8005e68:	b1b0      	cbz	r0, 8005e98 <_svfiprintf_r+0x110>
 8005e6a:	9207      	str	r2, [sp, #28]
 8005e6c:	e014      	b.n	8005e98 <_svfiprintf_r+0x110>
 8005e6e:	eba0 0308 	sub.w	r3, r0, r8
 8005e72:	fa09 f303 	lsl.w	r3, r9, r3
 8005e76:	4313      	orrs	r3, r2
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	46a2      	mov	sl, r4
 8005e7c:	e7d2      	b.n	8005e24 <_svfiprintf_r+0x9c>
 8005e7e:	9b03      	ldr	r3, [sp, #12]
 8005e80:	1d19      	adds	r1, r3, #4
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	9103      	str	r1, [sp, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bfbb      	ittet	lt
 8005e8a:	425b      	neglt	r3, r3
 8005e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e90:	9307      	strge	r3, [sp, #28]
 8005e92:	9307      	strlt	r3, [sp, #28]
 8005e94:	bfb8      	it	lt
 8005e96:	9204      	strlt	r2, [sp, #16]
 8005e98:	7823      	ldrb	r3, [r4, #0]
 8005e9a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e9c:	d10c      	bne.n	8005eb8 <_svfiprintf_r+0x130>
 8005e9e:	7863      	ldrb	r3, [r4, #1]
 8005ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea2:	d135      	bne.n	8005f10 <_svfiprintf_r+0x188>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	1d1a      	adds	r2, r3, #4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	9203      	str	r2, [sp, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bfb8      	it	lt
 8005eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eb4:	3402      	adds	r4, #2
 8005eb6:	9305      	str	r3, [sp, #20]
 8005eb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f84 <_svfiprintf_r+0x1fc>
 8005ebc:	7821      	ldrb	r1, [r4, #0]
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	4650      	mov	r0, sl
 8005ec2:	f7fa f98d 	bl	80001e0 <memchr>
 8005ec6:	b140      	cbz	r0, 8005eda <_svfiprintf_r+0x152>
 8005ec8:	2340      	movs	r3, #64	; 0x40
 8005eca:	eba0 000a 	sub.w	r0, r0, sl
 8005ece:	fa03 f000 	lsl.w	r0, r3, r0
 8005ed2:	9b04      	ldr	r3, [sp, #16]
 8005ed4:	4303      	orrs	r3, r0
 8005ed6:	3401      	adds	r4, #1
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ede:	4826      	ldr	r0, [pc, #152]	; (8005f78 <_svfiprintf_r+0x1f0>)
 8005ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ee4:	2206      	movs	r2, #6
 8005ee6:	f7fa f97b 	bl	80001e0 <memchr>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d038      	beq.n	8005f60 <_svfiprintf_r+0x1d8>
 8005eee:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <_svfiprintf_r+0x1f4>)
 8005ef0:	bb1b      	cbnz	r3, 8005f3a <_svfiprintf_r+0x1b2>
 8005ef2:	9b03      	ldr	r3, [sp, #12]
 8005ef4:	3307      	adds	r3, #7
 8005ef6:	f023 0307 	bic.w	r3, r3, #7
 8005efa:	3308      	adds	r3, #8
 8005efc:	9303      	str	r3, [sp, #12]
 8005efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f00:	4433      	add	r3, r6
 8005f02:	9309      	str	r3, [sp, #36]	; 0x24
 8005f04:	e767      	b.n	8005dd6 <_svfiprintf_r+0x4e>
 8005f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	e7a5      	b.n	8005e5c <_svfiprintf_r+0xd4>
 8005f10:	2300      	movs	r3, #0
 8005f12:	3401      	adds	r4, #1
 8005f14:	9305      	str	r3, [sp, #20]
 8005f16:	4619      	mov	r1, r3
 8005f18:	f04f 0c0a 	mov.w	ip, #10
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f22:	3a30      	subs	r2, #48	; 0x30
 8005f24:	2a09      	cmp	r2, #9
 8005f26:	d903      	bls.n	8005f30 <_svfiprintf_r+0x1a8>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0c5      	beq.n	8005eb8 <_svfiprintf_r+0x130>
 8005f2c:	9105      	str	r1, [sp, #20]
 8005f2e:	e7c3      	b.n	8005eb8 <_svfiprintf_r+0x130>
 8005f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f34:	4604      	mov	r4, r0
 8005f36:	2301      	movs	r3, #1
 8005f38:	e7f0      	b.n	8005f1c <_svfiprintf_r+0x194>
 8005f3a:	ab03      	add	r3, sp, #12
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	462a      	mov	r2, r5
 8005f40:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <_svfiprintf_r+0x1f8>)
 8005f42:	a904      	add	r1, sp, #16
 8005f44:	4638      	mov	r0, r7
 8005f46:	f3af 8000 	nop.w
 8005f4a:	1c42      	adds	r2, r0, #1
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	d1d6      	bne.n	8005efe <_svfiprintf_r+0x176>
 8005f50:	89ab      	ldrh	r3, [r5, #12]
 8005f52:	065b      	lsls	r3, r3, #25
 8005f54:	f53f af2c 	bmi.w	8005db0 <_svfiprintf_r+0x28>
 8005f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f5a:	b01d      	add	sp, #116	; 0x74
 8005f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f60:	ab03      	add	r3, sp, #12
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	462a      	mov	r2, r5
 8005f66:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <_svfiprintf_r+0x1f8>)
 8005f68:	a904      	add	r1, sp, #16
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	f000 f87a 	bl	8006064 <_printf_i>
 8005f70:	e7eb      	b.n	8005f4a <_svfiprintf_r+0x1c2>
 8005f72:	bf00      	nop
 8005f74:	0800657c 	.word	0x0800657c
 8005f78:	08006586 	.word	0x08006586
 8005f7c:	00000000 	.word	0x00000000
 8005f80:	08005cd1 	.word	0x08005cd1
 8005f84:	08006582 	.word	0x08006582

08005f88 <_printf_common>:
 8005f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	4699      	mov	r9, r3
 8005f90:	688a      	ldr	r2, [r1, #8]
 8005f92:	690b      	ldr	r3, [r1, #16]
 8005f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	bfb8      	it	lt
 8005f9c:	4613      	movlt	r3, r2
 8005f9e:	6033      	str	r3, [r6, #0]
 8005fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	b10a      	cbz	r2, 8005fae <_printf_common+0x26>
 8005faa:	3301      	adds	r3, #1
 8005fac:	6033      	str	r3, [r6, #0]
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	0699      	lsls	r1, r3, #26
 8005fb2:	bf42      	ittt	mi
 8005fb4:	6833      	ldrmi	r3, [r6, #0]
 8005fb6:	3302      	addmi	r3, #2
 8005fb8:	6033      	strmi	r3, [r6, #0]
 8005fba:	6825      	ldr	r5, [r4, #0]
 8005fbc:	f015 0506 	ands.w	r5, r5, #6
 8005fc0:	d106      	bne.n	8005fd0 <_printf_common+0x48>
 8005fc2:	f104 0a19 	add.w	sl, r4, #25
 8005fc6:	68e3      	ldr	r3, [r4, #12]
 8005fc8:	6832      	ldr	r2, [r6, #0]
 8005fca:	1a9b      	subs	r3, r3, r2
 8005fcc:	42ab      	cmp	r3, r5
 8005fce:	dc26      	bgt.n	800601e <_printf_common+0x96>
 8005fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fd4:	1e13      	subs	r3, r2, #0
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	bf18      	it	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	0692      	lsls	r2, r2, #26
 8005fde:	d42b      	bmi.n	8006038 <_printf_common+0xb0>
 8005fe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	47c0      	blx	r8
 8005fea:	3001      	adds	r0, #1
 8005fec:	d01e      	beq.n	800602c <_printf_common+0xa4>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	68e5      	ldr	r5, [r4, #12]
 8005ff2:	6832      	ldr	r2, [r6, #0]
 8005ff4:	f003 0306 	and.w	r3, r3, #6
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	bf08      	it	eq
 8005ffc:	1aad      	subeq	r5, r5, r2
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	6922      	ldr	r2, [r4, #16]
 8006002:	bf0c      	ite	eq
 8006004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006008:	2500      	movne	r5, #0
 800600a:	4293      	cmp	r3, r2
 800600c:	bfc4      	itt	gt
 800600e:	1a9b      	subgt	r3, r3, r2
 8006010:	18ed      	addgt	r5, r5, r3
 8006012:	2600      	movs	r6, #0
 8006014:	341a      	adds	r4, #26
 8006016:	42b5      	cmp	r5, r6
 8006018:	d11a      	bne.n	8006050 <_printf_common+0xc8>
 800601a:	2000      	movs	r0, #0
 800601c:	e008      	b.n	8006030 <_printf_common+0xa8>
 800601e:	2301      	movs	r3, #1
 8006020:	4652      	mov	r2, sl
 8006022:	4649      	mov	r1, r9
 8006024:	4638      	mov	r0, r7
 8006026:	47c0      	blx	r8
 8006028:	3001      	adds	r0, #1
 800602a:	d103      	bne.n	8006034 <_printf_common+0xac>
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
 8006030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006034:	3501      	adds	r5, #1
 8006036:	e7c6      	b.n	8005fc6 <_printf_common+0x3e>
 8006038:	18e1      	adds	r1, r4, r3
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	2030      	movs	r0, #48	; 0x30
 800603e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006042:	4422      	add	r2, r4
 8006044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800604c:	3302      	adds	r3, #2
 800604e:	e7c7      	b.n	8005fe0 <_printf_common+0x58>
 8006050:	2301      	movs	r3, #1
 8006052:	4622      	mov	r2, r4
 8006054:	4649      	mov	r1, r9
 8006056:	4638      	mov	r0, r7
 8006058:	47c0      	blx	r8
 800605a:	3001      	adds	r0, #1
 800605c:	d0e6      	beq.n	800602c <_printf_common+0xa4>
 800605e:	3601      	adds	r6, #1
 8006060:	e7d9      	b.n	8006016 <_printf_common+0x8e>
	...

08006064 <_printf_i>:
 8006064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	460c      	mov	r4, r1
 800606a:	4691      	mov	r9, r2
 800606c:	7e27      	ldrb	r7, [r4, #24]
 800606e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006070:	2f78      	cmp	r7, #120	; 0x78
 8006072:	4680      	mov	r8, r0
 8006074:	469a      	mov	sl, r3
 8006076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800607a:	d807      	bhi.n	800608c <_printf_i+0x28>
 800607c:	2f62      	cmp	r7, #98	; 0x62
 800607e:	d80a      	bhi.n	8006096 <_printf_i+0x32>
 8006080:	2f00      	cmp	r7, #0
 8006082:	f000 80d8 	beq.w	8006236 <_printf_i+0x1d2>
 8006086:	2f58      	cmp	r7, #88	; 0x58
 8006088:	f000 80a3 	beq.w	80061d2 <_printf_i+0x16e>
 800608c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006094:	e03a      	b.n	800610c <_printf_i+0xa8>
 8006096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800609a:	2b15      	cmp	r3, #21
 800609c:	d8f6      	bhi.n	800608c <_printf_i+0x28>
 800609e:	a001      	add	r0, pc, #4	; (adr r0, 80060a4 <_printf_i+0x40>)
 80060a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060a4:	080060fd 	.word	0x080060fd
 80060a8:	08006111 	.word	0x08006111
 80060ac:	0800608d 	.word	0x0800608d
 80060b0:	0800608d 	.word	0x0800608d
 80060b4:	0800608d 	.word	0x0800608d
 80060b8:	0800608d 	.word	0x0800608d
 80060bc:	08006111 	.word	0x08006111
 80060c0:	0800608d 	.word	0x0800608d
 80060c4:	0800608d 	.word	0x0800608d
 80060c8:	0800608d 	.word	0x0800608d
 80060cc:	0800608d 	.word	0x0800608d
 80060d0:	0800621d 	.word	0x0800621d
 80060d4:	08006141 	.word	0x08006141
 80060d8:	080061ff 	.word	0x080061ff
 80060dc:	0800608d 	.word	0x0800608d
 80060e0:	0800608d 	.word	0x0800608d
 80060e4:	0800623f 	.word	0x0800623f
 80060e8:	0800608d 	.word	0x0800608d
 80060ec:	08006141 	.word	0x08006141
 80060f0:	0800608d 	.word	0x0800608d
 80060f4:	0800608d 	.word	0x0800608d
 80060f8:	08006207 	.word	0x08006207
 80060fc:	680b      	ldr	r3, [r1, #0]
 80060fe:	1d1a      	adds	r2, r3, #4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	600a      	str	r2, [r1, #0]
 8006104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800610c:	2301      	movs	r3, #1
 800610e:	e0a3      	b.n	8006258 <_printf_i+0x1f4>
 8006110:	6825      	ldr	r5, [r4, #0]
 8006112:	6808      	ldr	r0, [r1, #0]
 8006114:	062e      	lsls	r6, r5, #24
 8006116:	f100 0304 	add.w	r3, r0, #4
 800611a:	d50a      	bpl.n	8006132 <_printf_i+0xce>
 800611c:	6805      	ldr	r5, [r0, #0]
 800611e:	600b      	str	r3, [r1, #0]
 8006120:	2d00      	cmp	r5, #0
 8006122:	da03      	bge.n	800612c <_printf_i+0xc8>
 8006124:	232d      	movs	r3, #45	; 0x2d
 8006126:	426d      	negs	r5, r5
 8006128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800612c:	485e      	ldr	r0, [pc, #376]	; (80062a8 <_printf_i+0x244>)
 800612e:	230a      	movs	r3, #10
 8006130:	e019      	b.n	8006166 <_printf_i+0x102>
 8006132:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006136:	6805      	ldr	r5, [r0, #0]
 8006138:	600b      	str	r3, [r1, #0]
 800613a:	bf18      	it	ne
 800613c:	b22d      	sxthne	r5, r5
 800613e:	e7ef      	b.n	8006120 <_printf_i+0xbc>
 8006140:	680b      	ldr	r3, [r1, #0]
 8006142:	6825      	ldr	r5, [r4, #0]
 8006144:	1d18      	adds	r0, r3, #4
 8006146:	6008      	str	r0, [r1, #0]
 8006148:	0628      	lsls	r0, r5, #24
 800614a:	d501      	bpl.n	8006150 <_printf_i+0xec>
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	e002      	b.n	8006156 <_printf_i+0xf2>
 8006150:	0669      	lsls	r1, r5, #25
 8006152:	d5fb      	bpl.n	800614c <_printf_i+0xe8>
 8006154:	881d      	ldrh	r5, [r3, #0]
 8006156:	4854      	ldr	r0, [pc, #336]	; (80062a8 <_printf_i+0x244>)
 8006158:	2f6f      	cmp	r7, #111	; 0x6f
 800615a:	bf0c      	ite	eq
 800615c:	2308      	moveq	r3, #8
 800615e:	230a      	movne	r3, #10
 8006160:	2100      	movs	r1, #0
 8006162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006166:	6866      	ldr	r6, [r4, #4]
 8006168:	60a6      	str	r6, [r4, #8]
 800616a:	2e00      	cmp	r6, #0
 800616c:	bfa2      	ittt	ge
 800616e:	6821      	ldrge	r1, [r4, #0]
 8006170:	f021 0104 	bicge.w	r1, r1, #4
 8006174:	6021      	strge	r1, [r4, #0]
 8006176:	b90d      	cbnz	r5, 800617c <_printf_i+0x118>
 8006178:	2e00      	cmp	r6, #0
 800617a:	d04d      	beq.n	8006218 <_printf_i+0x1b4>
 800617c:	4616      	mov	r6, r2
 800617e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006182:	fb03 5711 	mls	r7, r3, r1, r5
 8006186:	5dc7      	ldrb	r7, [r0, r7]
 8006188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800618c:	462f      	mov	r7, r5
 800618e:	42bb      	cmp	r3, r7
 8006190:	460d      	mov	r5, r1
 8006192:	d9f4      	bls.n	800617e <_printf_i+0x11a>
 8006194:	2b08      	cmp	r3, #8
 8006196:	d10b      	bne.n	80061b0 <_printf_i+0x14c>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	07df      	lsls	r7, r3, #31
 800619c:	d508      	bpl.n	80061b0 <_printf_i+0x14c>
 800619e:	6923      	ldr	r3, [r4, #16]
 80061a0:	6861      	ldr	r1, [r4, #4]
 80061a2:	4299      	cmp	r1, r3
 80061a4:	bfde      	ittt	le
 80061a6:	2330      	movle	r3, #48	; 0x30
 80061a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061b0:	1b92      	subs	r2, r2, r6
 80061b2:	6122      	str	r2, [r4, #16]
 80061b4:	f8cd a000 	str.w	sl, [sp]
 80061b8:	464b      	mov	r3, r9
 80061ba:	aa03      	add	r2, sp, #12
 80061bc:	4621      	mov	r1, r4
 80061be:	4640      	mov	r0, r8
 80061c0:	f7ff fee2 	bl	8005f88 <_printf_common>
 80061c4:	3001      	adds	r0, #1
 80061c6:	d14c      	bne.n	8006262 <_printf_i+0x1fe>
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295
 80061cc:	b004      	add	sp, #16
 80061ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d2:	4835      	ldr	r0, [pc, #212]	; (80062a8 <_printf_i+0x244>)
 80061d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	680e      	ldr	r6, [r1, #0]
 80061dc:	061f      	lsls	r7, r3, #24
 80061de:	f856 5b04 	ldr.w	r5, [r6], #4
 80061e2:	600e      	str	r6, [r1, #0]
 80061e4:	d514      	bpl.n	8006210 <_printf_i+0x1ac>
 80061e6:	07d9      	lsls	r1, r3, #31
 80061e8:	bf44      	itt	mi
 80061ea:	f043 0320 	orrmi.w	r3, r3, #32
 80061ee:	6023      	strmi	r3, [r4, #0]
 80061f0:	b91d      	cbnz	r5, 80061fa <_printf_i+0x196>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	f023 0320 	bic.w	r3, r3, #32
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	2310      	movs	r3, #16
 80061fc:	e7b0      	b.n	8006160 <_printf_i+0xfc>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	f043 0320 	orr.w	r3, r3, #32
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	2378      	movs	r3, #120	; 0x78
 8006208:	4828      	ldr	r0, [pc, #160]	; (80062ac <_printf_i+0x248>)
 800620a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800620e:	e7e3      	b.n	80061d8 <_printf_i+0x174>
 8006210:	065e      	lsls	r6, r3, #25
 8006212:	bf48      	it	mi
 8006214:	b2ad      	uxthmi	r5, r5
 8006216:	e7e6      	b.n	80061e6 <_printf_i+0x182>
 8006218:	4616      	mov	r6, r2
 800621a:	e7bb      	b.n	8006194 <_printf_i+0x130>
 800621c:	680b      	ldr	r3, [r1, #0]
 800621e:	6826      	ldr	r6, [r4, #0]
 8006220:	6960      	ldr	r0, [r4, #20]
 8006222:	1d1d      	adds	r5, r3, #4
 8006224:	600d      	str	r5, [r1, #0]
 8006226:	0635      	lsls	r5, r6, #24
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	d501      	bpl.n	8006230 <_printf_i+0x1cc>
 800622c:	6018      	str	r0, [r3, #0]
 800622e:	e002      	b.n	8006236 <_printf_i+0x1d2>
 8006230:	0671      	lsls	r1, r6, #25
 8006232:	d5fb      	bpl.n	800622c <_printf_i+0x1c8>
 8006234:	8018      	strh	r0, [r3, #0]
 8006236:	2300      	movs	r3, #0
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	4616      	mov	r6, r2
 800623c:	e7ba      	b.n	80061b4 <_printf_i+0x150>
 800623e:	680b      	ldr	r3, [r1, #0]
 8006240:	1d1a      	adds	r2, r3, #4
 8006242:	600a      	str	r2, [r1, #0]
 8006244:	681e      	ldr	r6, [r3, #0]
 8006246:	6862      	ldr	r2, [r4, #4]
 8006248:	2100      	movs	r1, #0
 800624a:	4630      	mov	r0, r6
 800624c:	f7f9 ffc8 	bl	80001e0 <memchr>
 8006250:	b108      	cbz	r0, 8006256 <_printf_i+0x1f2>
 8006252:	1b80      	subs	r0, r0, r6
 8006254:	6060      	str	r0, [r4, #4]
 8006256:	6863      	ldr	r3, [r4, #4]
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	2300      	movs	r3, #0
 800625c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006260:	e7a8      	b.n	80061b4 <_printf_i+0x150>
 8006262:	6923      	ldr	r3, [r4, #16]
 8006264:	4632      	mov	r2, r6
 8006266:	4649      	mov	r1, r9
 8006268:	4640      	mov	r0, r8
 800626a:	47d0      	blx	sl
 800626c:	3001      	adds	r0, #1
 800626e:	d0ab      	beq.n	80061c8 <_printf_i+0x164>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	079b      	lsls	r3, r3, #30
 8006274:	d413      	bmi.n	800629e <_printf_i+0x23a>
 8006276:	68e0      	ldr	r0, [r4, #12]
 8006278:	9b03      	ldr	r3, [sp, #12]
 800627a:	4298      	cmp	r0, r3
 800627c:	bfb8      	it	lt
 800627e:	4618      	movlt	r0, r3
 8006280:	e7a4      	b.n	80061cc <_printf_i+0x168>
 8006282:	2301      	movs	r3, #1
 8006284:	4632      	mov	r2, r6
 8006286:	4649      	mov	r1, r9
 8006288:	4640      	mov	r0, r8
 800628a:	47d0      	blx	sl
 800628c:	3001      	adds	r0, #1
 800628e:	d09b      	beq.n	80061c8 <_printf_i+0x164>
 8006290:	3501      	adds	r5, #1
 8006292:	68e3      	ldr	r3, [r4, #12]
 8006294:	9903      	ldr	r1, [sp, #12]
 8006296:	1a5b      	subs	r3, r3, r1
 8006298:	42ab      	cmp	r3, r5
 800629a:	dcf2      	bgt.n	8006282 <_printf_i+0x21e>
 800629c:	e7eb      	b.n	8006276 <_printf_i+0x212>
 800629e:	2500      	movs	r5, #0
 80062a0:	f104 0619 	add.w	r6, r4, #25
 80062a4:	e7f5      	b.n	8006292 <_printf_i+0x22e>
 80062a6:	bf00      	nop
 80062a8:	0800658d 	.word	0x0800658d
 80062ac:	0800659e 	.word	0x0800659e

080062b0 <memcpy>:
 80062b0:	440a      	add	r2, r1
 80062b2:	4291      	cmp	r1, r2
 80062b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80062b8:	d100      	bne.n	80062bc <memcpy+0xc>
 80062ba:	4770      	bx	lr
 80062bc:	b510      	push	{r4, lr}
 80062be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062c6:	4291      	cmp	r1, r2
 80062c8:	d1f9      	bne.n	80062be <memcpy+0xe>
 80062ca:	bd10      	pop	{r4, pc}

080062cc <memmove>:
 80062cc:	4288      	cmp	r0, r1
 80062ce:	b510      	push	{r4, lr}
 80062d0:	eb01 0402 	add.w	r4, r1, r2
 80062d4:	d902      	bls.n	80062dc <memmove+0x10>
 80062d6:	4284      	cmp	r4, r0
 80062d8:	4623      	mov	r3, r4
 80062da:	d807      	bhi.n	80062ec <memmove+0x20>
 80062dc:	1e43      	subs	r3, r0, #1
 80062de:	42a1      	cmp	r1, r4
 80062e0:	d008      	beq.n	80062f4 <memmove+0x28>
 80062e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062ea:	e7f8      	b.n	80062de <memmove+0x12>
 80062ec:	4402      	add	r2, r0
 80062ee:	4601      	mov	r1, r0
 80062f0:	428a      	cmp	r2, r1
 80062f2:	d100      	bne.n	80062f6 <memmove+0x2a>
 80062f4:	bd10      	pop	{r4, pc}
 80062f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062fe:	e7f7      	b.n	80062f0 <memmove+0x24>

08006300 <_free_r>:
 8006300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006302:	2900      	cmp	r1, #0
 8006304:	d048      	beq.n	8006398 <_free_r+0x98>
 8006306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800630a:	9001      	str	r0, [sp, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f1a1 0404 	sub.w	r4, r1, #4
 8006312:	bfb8      	it	lt
 8006314:	18e4      	addlt	r4, r4, r3
 8006316:	f000 f8d3 	bl	80064c0 <__malloc_lock>
 800631a:	4a20      	ldr	r2, [pc, #128]	; (800639c <_free_r+0x9c>)
 800631c:	9801      	ldr	r0, [sp, #4]
 800631e:	6813      	ldr	r3, [r2, #0]
 8006320:	4615      	mov	r5, r2
 8006322:	b933      	cbnz	r3, 8006332 <_free_r+0x32>
 8006324:	6063      	str	r3, [r4, #4]
 8006326:	6014      	str	r4, [r2, #0]
 8006328:	b003      	add	sp, #12
 800632a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800632e:	f000 b8cd 	b.w	80064cc <__malloc_unlock>
 8006332:	42a3      	cmp	r3, r4
 8006334:	d90b      	bls.n	800634e <_free_r+0x4e>
 8006336:	6821      	ldr	r1, [r4, #0]
 8006338:	1862      	adds	r2, r4, r1
 800633a:	4293      	cmp	r3, r2
 800633c:	bf04      	itt	eq
 800633e:	681a      	ldreq	r2, [r3, #0]
 8006340:	685b      	ldreq	r3, [r3, #4]
 8006342:	6063      	str	r3, [r4, #4]
 8006344:	bf04      	itt	eq
 8006346:	1852      	addeq	r2, r2, r1
 8006348:	6022      	streq	r2, [r4, #0]
 800634a:	602c      	str	r4, [r5, #0]
 800634c:	e7ec      	b.n	8006328 <_free_r+0x28>
 800634e:	461a      	mov	r2, r3
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	b10b      	cbz	r3, 8006358 <_free_r+0x58>
 8006354:	42a3      	cmp	r3, r4
 8006356:	d9fa      	bls.n	800634e <_free_r+0x4e>
 8006358:	6811      	ldr	r1, [r2, #0]
 800635a:	1855      	adds	r5, r2, r1
 800635c:	42a5      	cmp	r5, r4
 800635e:	d10b      	bne.n	8006378 <_free_r+0x78>
 8006360:	6824      	ldr	r4, [r4, #0]
 8006362:	4421      	add	r1, r4
 8006364:	1854      	adds	r4, r2, r1
 8006366:	42a3      	cmp	r3, r4
 8006368:	6011      	str	r1, [r2, #0]
 800636a:	d1dd      	bne.n	8006328 <_free_r+0x28>
 800636c:	681c      	ldr	r4, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	6053      	str	r3, [r2, #4]
 8006372:	4421      	add	r1, r4
 8006374:	6011      	str	r1, [r2, #0]
 8006376:	e7d7      	b.n	8006328 <_free_r+0x28>
 8006378:	d902      	bls.n	8006380 <_free_r+0x80>
 800637a:	230c      	movs	r3, #12
 800637c:	6003      	str	r3, [r0, #0]
 800637e:	e7d3      	b.n	8006328 <_free_r+0x28>
 8006380:	6825      	ldr	r5, [r4, #0]
 8006382:	1961      	adds	r1, r4, r5
 8006384:	428b      	cmp	r3, r1
 8006386:	bf04      	itt	eq
 8006388:	6819      	ldreq	r1, [r3, #0]
 800638a:	685b      	ldreq	r3, [r3, #4]
 800638c:	6063      	str	r3, [r4, #4]
 800638e:	bf04      	itt	eq
 8006390:	1949      	addeq	r1, r1, r5
 8006392:	6021      	streq	r1, [r4, #0]
 8006394:	6054      	str	r4, [r2, #4]
 8006396:	e7c7      	b.n	8006328 <_free_r+0x28>
 8006398:	b003      	add	sp, #12
 800639a:	bd30      	pop	{r4, r5, pc}
 800639c:	200001d0 	.word	0x200001d0

080063a0 <_malloc_r>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	1ccd      	adds	r5, r1, #3
 80063a4:	f025 0503 	bic.w	r5, r5, #3
 80063a8:	3508      	adds	r5, #8
 80063aa:	2d0c      	cmp	r5, #12
 80063ac:	bf38      	it	cc
 80063ae:	250c      	movcc	r5, #12
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	4606      	mov	r6, r0
 80063b4:	db01      	blt.n	80063ba <_malloc_r+0x1a>
 80063b6:	42a9      	cmp	r1, r5
 80063b8:	d903      	bls.n	80063c2 <_malloc_r+0x22>
 80063ba:	230c      	movs	r3, #12
 80063bc:	6033      	str	r3, [r6, #0]
 80063be:	2000      	movs	r0, #0
 80063c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c2:	f000 f87d 	bl	80064c0 <__malloc_lock>
 80063c6:	4921      	ldr	r1, [pc, #132]	; (800644c <_malloc_r+0xac>)
 80063c8:	680a      	ldr	r2, [r1, #0]
 80063ca:	4614      	mov	r4, r2
 80063cc:	b99c      	cbnz	r4, 80063f6 <_malloc_r+0x56>
 80063ce:	4f20      	ldr	r7, [pc, #128]	; (8006450 <_malloc_r+0xb0>)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	b923      	cbnz	r3, 80063de <_malloc_r+0x3e>
 80063d4:	4621      	mov	r1, r4
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 f862 	bl	80064a0 <_sbrk_r>
 80063dc:	6038      	str	r0, [r7, #0]
 80063de:	4629      	mov	r1, r5
 80063e0:	4630      	mov	r0, r6
 80063e2:	f000 f85d 	bl	80064a0 <_sbrk_r>
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	d123      	bne.n	8006432 <_malloc_r+0x92>
 80063ea:	230c      	movs	r3, #12
 80063ec:	6033      	str	r3, [r6, #0]
 80063ee:	4630      	mov	r0, r6
 80063f0:	f000 f86c 	bl	80064cc <__malloc_unlock>
 80063f4:	e7e3      	b.n	80063be <_malloc_r+0x1e>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	1b5b      	subs	r3, r3, r5
 80063fa:	d417      	bmi.n	800642c <_malloc_r+0x8c>
 80063fc:	2b0b      	cmp	r3, #11
 80063fe:	d903      	bls.n	8006408 <_malloc_r+0x68>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	441c      	add	r4, r3
 8006404:	6025      	str	r5, [r4, #0]
 8006406:	e004      	b.n	8006412 <_malloc_r+0x72>
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	42a2      	cmp	r2, r4
 800640c:	bf0c      	ite	eq
 800640e:	600b      	streq	r3, [r1, #0]
 8006410:	6053      	strne	r3, [r2, #4]
 8006412:	4630      	mov	r0, r6
 8006414:	f000 f85a 	bl	80064cc <__malloc_unlock>
 8006418:	f104 000b 	add.w	r0, r4, #11
 800641c:	1d23      	adds	r3, r4, #4
 800641e:	f020 0007 	bic.w	r0, r0, #7
 8006422:	1ac2      	subs	r2, r0, r3
 8006424:	d0cc      	beq.n	80063c0 <_malloc_r+0x20>
 8006426:	1a1b      	subs	r3, r3, r0
 8006428:	50a3      	str	r3, [r4, r2]
 800642a:	e7c9      	b.n	80063c0 <_malloc_r+0x20>
 800642c:	4622      	mov	r2, r4
 800642e:	6864      	ldr	r4, [r4, #4]
 8006430:	e7cc      	b.n	80063cc <_malloc_r+0x2c>
 8006432:	1cc4      	adds	r4, r0, #3
 8006434:	f024 0403 	bic.w	r4, r4, #3
 8006438:	42a0      	cmp	r0, r4
 800643a:	d0e3      	beq.n	8006404 <_malloc_r+0x64>
 800643c:	1a21      	subs	r1, r4, r0
 800643e:	4630      	mov	r0, r6
 8006440:	f000 f82e 	bl	80064a0 <_sbrk_r>
 8006444:	3001      	adds	r0, #1
 8006446:	d1dd      	bne.n	8006404 <_malloc_r+0x64>
 8006448:	e7cf      	b.n	80063ea <_malloc_r+0x4a>
 800644a:	bf00      	nop
 800644c:	200001d0 	.word	0x200001d0
 8006450:	200001d4 	.word	0x200001d4

08006454 <_realloc_r>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	4607      	mov	r7, r0
 8006458:	4614      	mov	r4, r2
 800645a:	460e      	mov	r6, r1
 800645c:	b921      	cbnz	r1, 8006468 <_realloc_r+0x14>
 800645e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006462:	4611      	mov	r1, r2
 8006464:	f7ff bf9c 	b.w	80063a0 <_malloc_r>
 8006468:	b922      	cbnz	r2, 8006474 <_realloc_r+0x20>
 800646a:	f7ff ff49 	bl	8006300 <_free_r>
 800646e:	4625      	mov	r5, r4
 8006470:	4628      	mov	r0, r5
 8006472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006474:	f000 f830 	bl	80064d8 <_malloc_usable_size_r>
 8006478:	42a0      	cmp	r0, r4
 800647a:	d20f      	bcs.n	800649c <_realloc_r+0x48>
 800647c:	4621      	mov	r1, r4
 800647e:	4638      	mov	r0, r7
 8006480:	f7ff ff8e 	bl	80063a0 <_malloc_r>
 8006484:	4605      	mov	r5, r0
 8006486:	2800      	cmp	r0, #0
 8006488:	d0f2      	beq.n	8006470 <_realloc_r+0x1c>
 800648a:	4631      	mov	r1, r6
 800648c:	4622      	mov	r2, r4
 800648e:	f7ff ff0f 	bl	80062b0 <memcpy>
 8006492:	4631      	mov	r1, r6
 8006494:	4638      	mov	r0, r7
 8006496:	f7ff ff33 	bl	8006300 <_free_r>
 800649a:	e7e9      	b.n	8006470 <_realloc_r+0x1c>
 800649c:	4635      	mov	r5, r6
 800649e:	e7e7      	b.n	8006470 <_realloc_r+0x1c>

080064a0 <_sbrk_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4d06      	ldr	r5, [pc, #24]	; (80064bc <_sbrk_r+0x1c>)
 80064a4:	2300      	movs	r3, #0
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	602b      	str	r3, [r5, #0]
 80064ac:	f7fa fd1a 	bl	8000ee4 <_sbrk>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_sbrk_r+0x1a>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_sbrk_r+0x1a>
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20000274 	.word	0x20000274

080064c0 <__malloc_lock>:
 80064c0:	4801      	ldr	r0, [pc, #4]	; (80064c8 <__malloc_lock+0x8>)
 80064c2:	f000 b811 	b.w	80064e8 <__retarget_lock_acquire_recursive>
 80064c6:	bf00      	nop
 80064c8:	2000027c 	.word	0x2000027c

080064cc <__malloc_unlock>:
 80064cc:	4801      	ldr	r0, [pc, #4]	; (80064d4 <__malloc_unlock+0x8>)
 80064ce:	f000 b80c 	b.w	80064ea <__retarget_lock_release_recursive>
 80064d2:	bf00      	nop
 80064d4:	2000027c 	.word	0x2000027c

080064d8 <_malloc_usable_size_r>:
 80064d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064dc:	1f18      	subs	r0, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bfbc      	itt	lt
 80064e2:	580b      	ldrlt	r3, [r1, r0]
 80064e4:	18c0      	addlt	r0, r0, r3
 80064e6:	4770      	bx	lr

080064e8 <__retarget_lock_acquire_recursive>:
 80064e8:	4770      	bx	lr

080064ea <__retarget_lock_release_recursive>:
 80064ea:	4770      	bx	lr

080064ec <_init>:
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ee:	bf00      	nop
 80064f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f2:	bc08      	pop	{r3}
 80064f4:	469e      	mov	lr, r3
 80064f6:	4770      	bx	lr

080064f8 <_fini>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	bf00      	nop
 80064fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fe:	bc08      	pop	{r3}
 8006500:	469e      	mov	lr, r3
 8006502:	4770      	bx	lr
