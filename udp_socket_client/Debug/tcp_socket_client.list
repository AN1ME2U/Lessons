
tcp_socket_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000529c  08021900  08021900  00031900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026b9c  08026b9c  00040234  2**0
                  CONTENTS
  4 .ARM          00000008  08026b9c  08026b9c  00036b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026ba4  08026ba4  00040234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026ba4  08026ba4  00036ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026ba8  08026ba8  00036ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08026bac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001aef8  20000234  08026de0  00040234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b12c  08026de0  0004b12c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a4fa  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a49f  00000000  00000000  0009a75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002880  00000000  00000000  000a4c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002730  00000000  00000000  000a7480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018583  00000000  00000000  000a9bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004273b  00000000  00000000  000c2133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8146  00000000  00000000  0010486e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fc9b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba5c  00000000  00000000  001fca08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000234 	.word	0x20000234
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080218e8 	.word	0x080218e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000238 	.word	0x20000238
 80001cc:	080218e8 	.word	0x080218e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__io_putchar>:

#define TRANSMIT_TIMEOUT 5
#define RECEIVE_TIMEOUT 1

int __io_putchar(int ch)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, sizeof(uint8_t), TRANSMIT_TIMEOUT);
 8000ef0:	1d39      	adds	r1, r7, #4
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <__io_putchar+0x20>)
 8000ef8:	f005 fa39 	bl	800636e <HAL_UART_Transmit>
	return ch;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200144b4 	.word	0x200144b4

08000f0c <http_temperature_path_handler>:
"<h2>Humidity: %s %%</h2>"\
"</body>"\
"</html>"

http_status_t http_temperature_path_handler(http_buffer_t *out)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	6078      	str	r0, [r7, #4]
	printf("http_temperature_path_handler()\n");
 8000f14:	4840      	ldr	r0, [pc, #256]	; (8001018 <http_temperature_path_handler+0x10c>)
 8000f16:	f01d fe37 	bl	801eb88 <puts>
	if (out == NULL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <http_temperature_path_handler+0x18>
	{
		return HTTP_ERR_FAULT;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e074      	b.n	800100e <http_temperature_path_handler+0x102>
	}
	char * content = malloc(256);
 8000f24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f28:	f01d f846 	bl	801dfb8 <malloc>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	647b      	str	r3, [r7, #68]	; 0x44
	if (content == NULL)
 8000f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <http_temperature_path_handler+0x2e>
	{
		return HTTP_ERR_FAULT;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e069      	b.n	800100e <http_temperature_path_handler+0x102>
	snprintf(content, 256, HTTP_TEMPERATURE_PAGE_TEMPLATE_STR, ts);
#else
	char temperature[6];
	uint8_t buffer[4];
	dht11_t dht11;
	dht11_init (&dht11, DHT11_IO_GPIO_Port, DHT11_IO_Pin);
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f42:	4936      	ldr	r1, [pc, #216]	; (800101c <http_temperature_path_handler+0x110>)
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 f956 	bl	80031f6 <dht11_init>
	dht_status_t status = dht11_read (&dht11, buffer, sizeof(buffer));
 8000f4a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2204      	movs	r2, #4
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fa65 	bl	8003424 <dht11_read>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (status == DHT_OK)
 8000f60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10e      	bne.n	8000f86 <http_temperature_path_handler+0x7a>
	{
		dht11_to_str(buffer, sizeof(buffer), NULL, temperature);
 8000f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000f70:	2200      	movs	r2, #0
 8000f72:	2104      	movs	r1, #4
 8000f74:	f002 faae 	bl	80034d4 <dht11_to_str>
		printf("temperature = %s *C\n", temperature);
 8000f78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4828      	ldr	r0, [pc, #160]	; (8001020 <http_temperature_path_handler+0x114>)
 8000f80:	f01d fd7c 	bl	801ea7c <iprintf>
 8000f84:	e00c      	b.n	8000fa0 <http_temperature_path_handler+0x94>
	}
	else
	{
		printf("dht11_read() error: %u\n", status);
 8000f86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4825      	ldr	r0, [pc, #148]	; (8001024 <http_temperature_path_handler+0x118>)
 8000f8e:	f01d fd75 	bl	801ea7c <iprintf>
		strncpy(temperature, "--", sizeof(temperature));
 8000f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f96:	2206      	movs	r2, #6
 8000f98:	4923      	ldr	r1, [pc, #140]	; (8001028 <http_temperature_path_handler+0x11c>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f01d ffa0 	bl	801eee0 <strncpy>
	}
	snprintf(content, 256, HTTP_TEMPERATURE_PAGE_TEMPLATE_STR, temperature);
 8000fa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <http_temperature_path_handler+0x120>)
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000fac:	f01d feae 	bl	801ed0c <sniprintf>
#endif

	int content_len = strlen(content);
 8000fb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000fb2:	f7ff f90d 	bl	80001d0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6858      	ldr	r0, [r3, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6819      	ldr	r1, [r3, #0]
 8000fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <http_temperature_path_handler+0x124>)
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	23c8      	movs	r3, #200	; 0xc8
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <http_temperature_path_handler+0x128>)
 8000fce:	f01d fe9d 	bl	801ed0c <sniprintf>
	int header_len = strlen(out->data);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f8fa 	bl	80001d0 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
	if(out->length < header_len + content_len)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fe8:	440a      	add	r2, r1
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d204      	bcs.n	8000ff8 <http_temperature_path_handler+0xec>
	{
		free(content);
 8000fee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000ff0:	f01c ffea 	bl	801dfc8 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e00a      	b.n	800100e <http_temperature_path_handler+0x102>
	}
	strncat(out->data, content, content_len);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001000:	4618      	mov	r0, r3
 8001002:	f01d ff48 	bl	801ee96 <strncat>
	free(content);
 8001006:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001008:	f01c ffde 	bl	801dfc8 <free>
	return HTTP_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3748      	adds	r7, #72	; 0x48
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	0802193c 	.word	0x0802193c
 800101c:	40020c00 	.word	0x40020c00
 8001020:	0802195c 	.word	0x0802195c
 8001024:	08021974 	.word	0x08021974
 8001028:	0802198c 	.word	0x0802198c
 800102c:	08021990 	.word	0x08021990
 8001030:	08021a44 	.word	0x08021a44
 8001034:	080219cc 	.word	0x080219cc

08001038 <http_humidity_path_handler>:

http_status_t http_humidity_path_handler(http_buffer_t *out)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
	printf("http_humidity_path_handler()\n");
 8001040:	4840      	ldr	r0, [pc, #256]	; (8001144 <http_humidity_path_handler+0x10c>)
 8001042:	f01d fda1 	bl	801eb88 <puts>
	if (out == NULL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <http_humidity_path_handler+0x18>
	{
		return HTTP_ERR_FAULT;
 800104c:	2301      	movs	r3, #1
 800104e:	e074      	b.n	800113a <http_humidity_path_handler+0x102>
	}
	char * content = malloc(256);
 8001050:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001054:	f01c ffb0 	bl	801dfb8 <malloc>
 8001058:	4603      	mov	r3, r0
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
	if (content == NULL)
 800105c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <http_humidity_path_handler+0x2e>
	{
		return HTTP_ERR_FAULT;
 8001062:	2301      	movs	r3, #1
 8001064:	e069      	b.n	800113a <http_humidity_path_handler+0x102>
	snprintf(content, 256, HTTP_HUMIDITY_PAGE_TEMPLATE_STR, hs);
#else
	char humidity[6];
	uint8_t buffer[4];
	dht11_t dht11;
	dht11_init (&dht11, DHT11_IO_GPIO_Port, DHT11_IO_Pin);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106e:	4936      	ldr	r1, [pc, #216]	; (8001148 <http_humidity_path_handler+0x110>)
 8001070:	4618      	mov	r0, r3
 8001072:	f002 f8c0 	bl	80031f6 <dht11_init>
	dht_status_t status = dht11_read (&dht11, buffer, sizeof(buffer));
 8001076:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2204      	movs	r2, #4
 8001080:	4618      	mov	r0, r3
 8001082:	f002 f9cf 	bl	8003424 <dht11_read>
 8001086:	4603      	mov	r3, r0
 8001088:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (status == DHT_OK)
 800108c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10e      	bne.n	80010b2 <http_humidity_path_handler+0x7a>
	{
		dht11_to_str(buffer, sizeof(buffer), humidity, NULL);
 8001094:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001098:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800109c:	2300      	movs	r3, #0
 800109e:	2104      	movs	r1, #4
 80010a0:	f002 fa18 	bl	80034d4 <dht11_to_str>
		printf("humidity = %s %%\n", humidity);
 80010a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a8:	4619      	mov	r1, r3
 80010aa:	4828      	ldr	r0, [pc, #160]	; (800114c <http_humidity_path_handler+0x114>)
 80010ac:	f01d fce6 	bl	801ea7c <iprintf>
 80010b0:	e00c      	b.n	80010cc <http_humidity_path_handler+0x94>
	}
	else
	{
		printf("dht11_read() error: %u\n", status);
 80010b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80010b6:	4619      	mov	r1, r3
 80010b8:	4825      	ldr	r0, [pc, #148]	; (8001150 <http_humidity_path_handler+0x118>)
 80010ba:	f01d fcdf 	bl	801ea7c <iprintf>
		strncpy(humidity, "--", sizeof(humidity));
 80010be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c2:	2206      	movs	r2, #6
 80010c4:	4923      	ldr	r1, [pc, #140]	; (8001154 <http_humidity_path_handler+0x11c>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f01d ff0a 	bl	801eee0 <strncpy>
	}
	snprintf(content, 256, HTTP_HUMIDITY_PAGE_TEMPLATE_STR, humidity);
 80010cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <http_humidity_path_handler+0x120>)
 80010d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010d8:	f01d fe18 	bl	801ed0c <sniprintf>
#endif

	int content_len = strlen(content);
 80010dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010de:	f7ff f877 	bl	80001d0 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6858      	ldr	r0, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6819      	ldr	r1, [r3, #0]
 80010ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <http_humidity_path_handler+0x124>)
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	23c8      	movs	r3, #200	; 0xc8
 80010f8:	4a19      	ldr	r2, [pc, #100]	; (8001160 <http_humidity_path_handler+0x128>)
 80010fa:	f01d fe07 	bl	801ed0c <sniprintf>
	int header_len = strlen(out->data);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f864 	bl	80001d0 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
	if(out->length < header_len + content_len)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001114:	440a      	add	r2, r1
 8001116:	4293      	cmp	r3, r2
 8001118:	d204      	bcs.n	8001124 <http_humidity_path_handler+0xec>
	{
		free(content);
 800111a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800111c:	f01c ff54 	bl	801dfc8 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8001120:	2304      	movs	r3, #4
 8001122:	e00a      	b.n	800113a <http_humidity_path_handler+0x102>
	}
	strncat(out->data, content, content_len);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800112a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800112c:	4618      	mov	r0, r3
 800112e:	f01d feb2 	bl	801ee96 <strncat>
	free(content);
 8001132:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001134:	f01c ff48 	bl	801dfc8 <free>
	return HTTP_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3748      	adds	r7, #72	; 0x48
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08021a48 	.word	0x08021a48
 8001148:	40020c00 	.word	0x40020c00
 800114c:	08021a68 	.word	0x08021a68
 8001150:	08021974 	.word	0x08021974
 8001154:	0802198c 	.word	0x0802198c
 8001158:	08021a7c 	.word	0x08021a7c
 800115c:	08021a44 	.word	0x08021a44
 8001160:	080219cc 	.word	0x080219cc

08001164 <http_led_toggle_handler>:

void http_led_toggle_handler(bool LED[4])
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <http_led_toggle_handler+0x48>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e010      	b.n	800119a <http_led_toggle_handler+0x36>
	{
		if (LED[i])
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <http_led_toggle_handler+0x30>
		{
			BSP_LED_Toggle(led[i]);
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f001 ffe0 	bl	8003154 <BSP_LED_Toggle>
	for(size_t i = 0; i < 4; i++)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d9eb      	bls.n	8001178 <http_led_toggle_handler+0x14>
		}
	}
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	08021ab0 	.word	0x08021ab0

080011b0 <http_led_on_handler>:

void http_led_on_handler(bool LED[4])
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <http_led_on_handler+0x48>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e010      	b.n	80011e6 <http_led_on_handler+0x36>
	{
		if (LED[i])
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <http_led_on_handler+0x30>
		{
			BSP_LED_On(led[i]);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 ff86 	bl	80030ec <BSP_LED_On>
	for(size_t i = 0; i < 4; i++)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d9eb      	bls.n	80011c4 <http_led_on_handler+0x14>
		}
	}
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	08021ab0 	.word	0x08021ab0

080011fc <http_led_off_handler>:

void http_led_off_handler(bool LED[4])
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <http_led_off_handler+0x48>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	e010      	b.n	8001232 <http_led_off_handler+0x36>
	{
		if (LED[i])
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d007      	beq.n	800122c <http_led_off_handler+0x30>
		{
			BSP_LED_Off(led[i]);
 800121c:	f107 0208 	add.w	r2, r7, #8
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f001 ff7a 	bl	8003120 <BSP_LED_Off>
	for(size_t i = 0; i < 4; i++)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d9eb      	bls.n	8001210 <http_led_off_handler+0x14>
		}
	}
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	08021ab0 	.word	0x08021ab0

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f003 fca9 	bl	8004ba4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8001252:	2001      	movs	r0, #1
 8001254:	f001 fed2 	bl	8002ffc <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8001258:	2000      	movs	r0, #0
 800125a:	f001 fecf 	bl	8002ffc <BSP_LED_Init>
  BSP_LED_Init(LED5);
 800125e:	2002      	movs	r0, #2
 8001260:	f001 fecc 	bl	8002ffc <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8001264:	2003      	movs	r0, #3
 8001266:	f001 fec9 	bl	8002ffc <BSP_LED_Init>
  /* Initialization of DWT module (cortex-m4)*/
  DWT_Init();
 800126a:	f001 fe51 	bl	8002f10 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126e:	f000 f873 	bl	8001358 <SystemClock_Config>
  printf("Semihosting activated\n");
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 f905 	bl	8001480 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001276:	f000 f8d9 	bl	800142c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* WARNING: if you use minicom as a terminal utility,
   * please, add 'pu addcarreturn Yes' to the file ~/.minirc.dfl
   * to attach '\r' after '\n'
   * */
  printf("USART3 initialized\n");
 800127a:	482c      	ldr	r0, [pc, #176]	; (800132c <main+0xe4>)
 800127c:	f01d fc84 	bl	801eb88 <puts>
  NVIC_SetPriorityGrouping(0);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fe0d 	bl	8000ea0 <__NVIC_SetPriorityGrouping>

  lcd_init();
 8001286:	f005 fbfb 	bl	8006a80 <lcd_init>
  /* Use the LCD_CLR_SCR_CMD command
   * to clear the LCD screen */
  lcd_command_set(LCD_CLR_SCR_CMD);
 800128a:	2001      	movs	r0, #1
 800128c:	f005 fbd2 	bl	8006a34 <lcd_command_set>
  lcd_puts("GL Embedded");
 8001290:	4827      	ldr	r0, [pc, #156]	; (8001330 <main+0xe8>)
 8001292:	f005 fc53 	bl	8006b3c <lcd_puts>
  /* Do not forget to set the LCD_LFCR_CMD
   * command when printing more than 16
   * characters because LCD 16x2 is used */
  lcd_command_set(LCD_LFCR_CMD);
 8001296:	20a8      	movs	r0, #168	; 0xa8
 8001298:	f005 fbcc 	bl	8006a34 <lcd_command_set>
  lcd_puts("Starter Kit");
 800129c:	4825      	ldr	r0, [pc, #148]	; (8001334 <main+0xec>)
 800129e:	f005 fc4d 	bl	8006b3c <lcd_puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <main+0xf0>)
 80012a4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80012a8:	461d      	mov	r5, r3
 80012aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f006 f91c 	bl	80074f6 <osThreadCreate>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a1e      	ldr	r2, [pc, #120]	; (800133c <main+0xf4>)
 80012c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpClientTask */
  osThreadDef(tcpClientTask, StartTcpClientTask, osPriorityNormal, 0, 2048);
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <main+0xf8>)
 80012c6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012ca:	461d      	mov	r5, r3
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	6023      	str	r3, [r4, #0]
  tcpClientTaskHandle = osThreadCreate(osThread(tcpClientTask), NULL);
 80012d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f006 f90b 	bl	80074f6 <osThreadCreate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <main+0xfc>)
 80012e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpServerTask */
  osThreadDef(tcpServerTask, StartTcpServerTask, osPriorityNormal, 0, 2048);
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <main+0x100>)
 80012e8:	f107 0414 	add.w	r4, r7, #20
 80012ec:	461d      	mov	r5, r3
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	682b      	ldr	r3, [r5, #0]
 80012f4:	6023      	str	r3, [r4, #0]
  tcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f006 f8fa 	bl	80074f6 <osThreadCreate>
 8001302:	4603      	mov	r3, r0
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <main+0x104>)
 8001306:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpServerTask */
  osThreadDef(udpServerTask, StartUdpServerTask, osPriorityNormal, 0, 2048);
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <main+0x108>)
 800130a:	463c      	mov	r4, r7
 800130c:	461d      	mov	r5, r3
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	682b      	ldr	r3, [r5, #0]
 8001314:	6023      	str	r3, [r4, #0]
  udpServerTaskHandle = osThreadCreate(osThread(udpServerTask), NULL);
 8001316:	463b      	mov	r3, r7
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f006 f8eb 	bl	80074f6 <osThreadCreate>
 8001320:	4603      	mov	r3, r0
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <main+0x10c>)
 8001324:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001326:	f006 f8cf 	bl	80074c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800132a:	e7fe      	b.n	800132a <main+0xe2>
 800132c:	08021ab4 	.word	0x08021ab4
 8001330:	08021ac8 	.word	0x08021ac8
 8001334:	08021ad4 	.word	0x08021ad4
 8001338:	08021ae0 	.word	0x08021ae0
 800133c:	200144b0 	.word	0x200144b0
 8001340:	08021af4 	.word	0x08021af4
 8001344:	200144f8 	.word	0x200144f8
 8001348:	08021b08 	.word	0x08021b08
 800134c:	20014500 	.word	0x20014500
 8001350:	08021b1c 	.word	0x08021b1c
 8001354:	200144fc 	.word	0x200144fc

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b094      	sub	sp, #80	; 0x50
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f01c fe6c 	bl	801e044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <SystemClock_Config+0xcc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <SystemClock_Config+0xcc>)
 8001386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <SystemClock_Config+0xcc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <SystemClock_Config+0xd0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <SystemClock_Config+0xd0>)
 80013a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c8:	2308      	movs	r3, #8
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013d6:	2307      	movs	r3, #7
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 f824 	bl	800542c <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013ea:	f000 fa57 	bl	800189c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2302      	movs	r3, #2
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2105      	movs	r1, #5
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fa85 	bl	800591c <HAL_RCC_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001418:	f000 fa40 	bl	800189c <Error_Handler>
  }
}
 800141c:	bf00      	nop
 800141e:	3750      	adds	r7, #80	; 0x50
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_USART3_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001464:	f004 ff36 	bl	80062d4 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f000 fa15 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200144b4 	.word	0x200144b4
 800147c:	40004800 	.word	0x40004800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4bb0      	ldr	r3, [pc, #704]	; (800175c <MX_GPIO_Init+0x2dc>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4aaf      	ldr	r2, [pc, #700]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4bad      	ldr	r3, [pc, #692]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4ba9      	ldr	r3, [pc, #676]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4aa8      	ldr	r2, [pc, #672]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4ba6      	ldr	r3, [pc, #664]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4ba2      	ldr	r3, [pc, #648]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4aa1      	ldr	r2, [pc, #644]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b9f      	ldr	r3, [pc, #636]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b9b      	ldr	r3, [pc, #620]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a9a      	ldr	r2, [pc, #616]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b98      	ldr	r3, [pc, #608]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b94      	ldr	r3, [pc, #592]	; (800175c <MX_GPIO_Init+0x2dc>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a93      	ldr	r2, [pc, #588]	; (800175c <MX_GPIO_Init+0x2dc>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b91      	ldr	r3, [pc, #580]	; (800175c <MX_GPIO_Init+0x2dc>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b8d      	ldr	r3, [pc, #564]	; (800175c <MX_GPIO_Init+0x2dc>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a8c      	ldr	r2, [pc, #560]	; (800175c <MX_GPIO_Init+0x2dc>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b8a      	ldr	r3, [pc, #552]	; (800175c <MX_GPIO_Init+0x2dc>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 800153e:	2200      	movs	r2, #0
 8001540:	f64f 4188 	movw	r1, #64648	; 0xfc88
 8001544:	4886      	ldr	r0, [pc, #536]	; (8001760 <MX_GPIO_Init+0x2e0>)
 8001546:	f003 ff25 	bl	8005394 <HAL_GPIO_WritePin>
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2101      	movs	r1, #1
 800154e:	4885      	ldr	r0, [pc, #532]	; (8001764 <MX_GPIO_Init+0x2e4>)
 8001550:	f003 ff20 	bl	8005394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RMII_PHY_RST_Pin|DHT11_IO_Pin|LD4_Pin|LD3_Pin
 8001554:	2200      	movs	r2, #0
 8001556:	f64f 4110 	movw	r1, #64528	; 0xfc10
 800155a:	4883      	ldr	r0, [pc, #524]	; (8001768 <MX_GPIO_Init+0x2e8>)
 800155c:	f003 ff1a 	bl	8005394 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin DISP_RS_Pin DISP_RW_Pin DISP_ENA_Pin
                           DISP_DB4_Pin DISP_DB5_Pin DISP_DB6_Pin DISP_DB7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 8001560:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8001564:	61fb      	str	r3, [r7, #28]
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4879      	ldr	r0, [pc, #484]	; (8001760 <MX_GPIO_Init+0x2e0>)
 800157a:	f003 fc5b 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800157e:	2301      	movs	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4873      	ldr	r0, [pc, #460]	; (8001764 <MX_GPIO_Init+0x2e4>)
 8001596:	f003 fc4d 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800159a:	2308      	movs	r3, #8
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015aa:	2305      	movs	r3, #5
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	486b      	ldr	r0, [pc, #428]	; (8001764 <MX_GPIO_Init+0x2e4>)
 80015b6:	f003 fc3d 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015be:	4b6b      	ldr	r3, [pc, #428]	; (800176c <MX_GPIO_Init+0x2ec>)
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c2:	2302      	movs	r3, #2
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4868      	ldr	r0, [pc, #416]	; (8001770 <MX_GPIO_Init+0x2f0>)
 80015ce:	f003 fc31 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015d2:	2310      	movs	r3, #16
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015e2:	2306      	movs	r3, #6
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4860      	ldr	r0, [pc, #384]	; (8001770 <MX_GPIO_Init+0x2f0>)
 80015ee:	f003 fc21 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 80015f2:	2360      	movs	r3, #96	; 0x60
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001602:	2305      	movs	r3, #5
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4858      	ldr	r0, [pc, #352]	; (8001770 <MX_GPIO_Init+0x2f0>)
 800160e:	f003 fc11 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001612:	2304      	movs	r3, #4
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	4853      	ldr	r0, [pc, #332]	; (8001774 <MX_GPIO_Init+0x2f4>)
 8001626:	f003 fc05 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_PHY_INT_Pin */
  GPIO_InitStruct.Pin = RMII_PHY_INT_Pin;
 800162a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001630:	4b51      	ldr	r3, [pc, #324]	; (8001778 <MX_GPIO_Init+0x2f8>)
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RMII_PHY_INT_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4848      	ldr	r0, [pc, #288]	; (8001760 <MX_GPIO_Init+0x2e0>)
 8001640:	f003 fbf8 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001656:	2305      	movs	r3, #5
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4844      	ldr	r0, [pc, #272]	; (8001774 <MX_GPIO_Init+0x2f4>)
 8001662:	f003 fbe7 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_PHY_RST_Pin DHT11_IO_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = RMII_PHY_RST_Pin|DHT11_IO_Pin|LD4_Pin|LD3_Pin
 8001666:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800166a:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	483a      	ldr	r0, [pc, #232]	; (8001768 <MX_GPIO_Init+0x2e8>)
 8001680:	f003 fbd8 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001684:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001696:	2306      	movs	r3, #6
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4830      	ldr	r0, [pc, #192]	; (8001764 <MX_GPIO_Init+0x2e4>)
 80016a2:	f003 fbc7 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80016a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	482d      	ldr	r0, [pc, #180]	; (8001770 <MX_GPIO_Init+0x2f0>)
 80016bc:	f003 fbba 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80016c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016d2:	230a      	movs	r3, #10
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4824      	ldr	r0, [pc, #144]	; (8001770 <MX_GPIO_Init+0x2f0>)
 80016de:	f003 fba9 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016e2:	2320      	movs	r3, #32
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	481c      	ldr	r0, [pc, #112]	; (8001768 <MX_GPIO_Init+0x2e8>)
 80016f6:	f003 fb9d 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001700:	2312      	movs	r3, #18
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001704:	2301      	movs	r3, #1
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800170c:	2304      	movs	r3, #4
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4817      	ldr	r0, [pc, #92]	; (8001774 <MX_GPIO_Init+0x2f4>)
 8001718:	f003 fb8c 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800171c:	2302      	movs	r3, #2
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_GPIO_Init+0x2fc>)
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	480c      	ldr	r0, [pc, #48]	; (8001760 <MX_GPIO_Init+0x2e0>)
 8001730:	f003 fb80 	bl	8004e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2105      	movs	r1, #5
 8001738:	2006      	movs	r0, #6
 800173a:	f003 fb51 	bl	8004de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800173e:	2006      	movs	r0, #6
 8001740:	f003 fb6a 	bl	8004e18 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2105      	movs	r1, #5
 8001748:	2017      	movs	r0, #23
 800174a:	f003 fb49 	bl	8004de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800174e:	2017      	movs	r0, #23
 8001750:	f003 fb62 	bl	8004e18 <HAL_NVIC_EnableIRQ>

}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	; 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40021000 	.word	0x40021000
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	10110000 	.word	0x10110000
 8001770:	40020000 	.word	0x40020000
 8001774:	40020400 	.word	0x40020400
 8001778:	10210000 	.word	0x10210000
 800177c:	10120000 	.word	0x10120000

08001780 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d113      	bne.n	80017b8 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8001790:	2101      	movs	r1, #1
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001794:	f003 fde6 	bl	8005364 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d112      	bne.n	80017c4 <HAL_GPIO_EXTI_Callback+0x44>
		{
			printf("The blue button is pushed\n");
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x50>)
 80017a0:	f01d f9f2 	bl	801eb88 <puts>
			BSP_LED_Toggle(GREEN);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f001 fcd5 	bl	8003154 <BSP_LED_Toggle>
			osSignalSet (tcpClientTaskHandle, SIGNAL_PUSH_BUTTON);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2102      	movs	r1, #2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 feef 	bl	8007594 <osSignalSet>
	else if (GPIO_Pin == RMII_PHY_INT_Pin)
	{
        /* Get the IT status register value */
        ethernetif_phy_irq();
	}
}
 80017b6:	e005      	b.n	80017c4 <HAL_GPIO_EXTI_Callback+0x44>
	else if (GPIO_Pin == RMII_PHY_INT_Pin)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_EXTI_Callback+0x44>
        ethernetif_phy_irq();
 80017c0:	f005 fa5a 	bl	8006c78 <ethernetif_phy_irq>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40020000 	.word	0x40020000
 80017d0:	08021b30 	.word	0x08021b30
 80017d4:	200144f8 	.word	0x200144f8

080017d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b08f      	sub	sp, #60	; 0x3c
 80017dc:	af04      	add	r7, sp, #16
 80017de:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80017e0:	f005 f9d8 	bl	8006b94 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  struct dhcp *dhcp;
  char msg[16];
  bool dhcp_bound_flag = false;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t offered_ip = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {
	  dhcp = netif_dhcp_data(lwip_get_netif());
 80017ee:	f005 f9c7 	bl	8006b80 <lwip_get_netif>
 80017f2:	4603      	mov	r3, r0
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	61fb      	str	r3, [r7, #28]

	  if (dhcp->state == DHCP_STATE_BOUND && !dhcp_bound_flag)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	795b      	ldrb	r3, [r3, #5]
 80017fc:	2b0a      	cmp	r3, #10
 80017fe:	d12e      	bne.n	800185e <StartDefaultTask+0x86>
 8001800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001804:	f083 0301 	eor.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d027      	beq.n	800185e <StartDefaultTask+0x86>
	  {
		  dhcp_bound_flag = true;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  lcd_command_set(LCD_CLR_SCR_CMD);
 8001814:	2001      	movs	r0, #1
 8001816:	f005 f90d 	bl	8006a34 <lcd_command_set>
		  lcd_puts("DHCP IP address:");
 800181a:	4815      	ldr	r0, [pc, #84]	; (8001870 <StartDefaultTask+0x98>)
 800181c:	f005 f98e 	bl	8006b3c <lcd_puts>
		  lcd_command_set(LCD_LFCR_CMD);
 8001820:	20a8      	movs	r0, #168	; 0xa8
 8001822:	f005 f907 	bl	8006a34 <lcd_command_set>
		  offered_ip = ip4_addr_get_u32(&dhcp->offered_ip_addr);
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	623b      	str	r3, [r7, #32]
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	b2dc      	uxtb	r4, r3
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	0a1b      	lsrs	r3, r3, #8
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001834:	b2db      	uxtb	r3, r3
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001836:	6a3a      	ldr	r2, [r7, #32]
 8001838:	0c12      	lsrs	r2, r2, #16
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 800183a:	b2d2      	uxtb	r2, r2
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 800183c:	6a39      	ldr	r1, [r7, #32]
 800183e:	0e09      	lsrs	r1, r1, #24
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001840:	f107 000c 	add.w	r0, r7, #12
 8001844:	9102      	str	r1, [sp, #8]
 8001846:	9201      	str	r2, [sp, #4]
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	4623      	mov	r3, r4
 800184c:	4a09      	ldr	r2, [pc, #36]	; (8001874 <StartDefaultTask+0x9c>)
 800184e:	2110      	movs	r1, #16
 8001850:	f01d fa5c 	bl	801ed0c <sniprintf>
		  lcd_puts(msg);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4618      	mov	r0, r3
 800185a:	f005 f96f 	bl	8006b3c <lcd_puts>
	  }

	  BSP_LED_Toggle(BLUE);
 800185e:	2003      	movs	r0, #3
 8001860:	f001 fc78 	bl	8003154 <BSP_LED_Toggle>
	  osDelay(1000);
 8001864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001868:	f005 fe7f 	bl	800756a <osDelay>
	  dhcp = netif_dhcp_data(lwip_get_netif());
 800186c:	e7bf      	b.n	80017ee <StartDefaultTask+0x16>
 800186e:	bf00      	nop
 8001870:	08021b4c 	.word	0x08021b4c
 8001874:	08021b60 	.word	0x08021b60

08001878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800188a:	f003 f9ad 	bl	8004be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40010000 	.word	0x40010000

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>
	...

080018a8 <parse_command>:
		parse_version,
		NULL
};

static http_status_t parse_command(const char *token, http_server_request_t *request)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_command() %s\n", token);
	if (strncmp(token, HTTP_GET_STR, HTTP_GET_STR_LEN) == 0)
 80018b2:	2203      	movs	r2, #3
 80018b4:	491a      	ldr	r1, [pc, #104]	; (8001920 <parse_command+0x78>)
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f01d fb00 	bl	801eebc <strncmp>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d103      	bne.n	80018ca <parse_command+0x22>
	{
		request->command = HTTP_GET;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e025      	b.n	8001916 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_PUT_STR, HTTP_PUT_STR_LEN) == 0)
 80018ca:	2203      	movs	r2, #3
 80018cc:	4915      	ldr	r1, [pc, #84]	; (8001924 <parse_command+0x7c>)
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f01d faf4 	bl	801eebc <strncmp>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <parse_command+0x3a>
	{
		request->command = HTTP_PUT;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e019      	b.n	8001916 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_POST_STR, HTTP_POST_STR_LEN) == 0)
 80018e2:	2204      	movs	r2, #4
 80018e4:	4910      	ldr	r1, [pc, #64]	; (8001928 <parse_command+0x80>)
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f01d fae8 	bl	801eebc <strncmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <parse_command+0x52>
	{
		request->command = HTTP_POST;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2202      	movs	r2, #2
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e00d      	b.n	8001916 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_RESET_STR, HTTP_RESET_STR_LEN) == 0)
 80018fa:	2205      	movs	r2, #5
 80018fc:	490b      	ldr	r1, [pc, #44]	; (800192c <parse_command+0x84>)
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f01d fadc 	bl	801eebc <strncmp>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <parse_command+0x6a>
	{
		request->command = HTTP_RESET;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2203      	movs	r2, #3
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e001      	b.n	8001916 <parse_command+0x6e>
	}
	else
	{
		return HTTP_ERR_CMD;
 8001912:	2305      	movs	r3, #5
 8001914:	e000      	b.n	8001918 <parse_command+0x70>
	}
	return HTTP_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08021b78 	.word	0x08021b78
 8001924:	08021b7c 	.word	0x08021b7c
 8001928:	08021b80 	.word	0x08021b80
 800192c:	08021b88 	.word	0x08021b88

08001930 <parse_path>:

static http_status_t parse_path(const char *token, http_server_request_t *request)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_path()\n");
	int len;
	if ((len = strlen(token)) > MAX_PATH_LENGTH)
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7fe fc48 	bl	80001d0 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b10      	cmp	r3, #16
 8001948:	dd01      	ble.n	800194e <parse_path+0x1e>
	{
		return HTTP_ERR_PATH_LEN;
 800194a:	2306      	movs	r3, #6
 800194c:	e008      	b.n	8001960 <parse_path+0x30>
	}
	strncpy(request->path, token, len + 1);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	1c58      	adds	r0, r3, #1
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	461a      	mov	r2, r3
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	f01d fac1 	bl	801eee0 <strncpy>
	HTTP_DEBUG_PRINF("path: %s\n",request->path);
	return HTTP_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <parse_version>:

static http_status_t parse_version(const char *token, http_server_request_t *request)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_version()\n");
	int len;
	if ((len = strlen(token)) > VERSION_LENGTH)
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fc2c 	bl	80001d0 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b09      	cmp	r3, #9
 8001980:	d901      	bls.n	8001986 <parse_version+0x1e>
	{
		return HTTP_ERR_VERSION_LEN;
 8001982:	2307      	movs	r3, #7
 8001984:	e009      	b.n	800199a <parse_version+0x32>
	}
	strncpy(request->version, token, len + 1);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f103 0011 	add.w	r0, r3, #17
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3301      	adds	r3, #1
 8001990:	461a      	mov	r2, r3
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f01d faa4 	bl	801eee0 <strncpy>
	HTTP_DEBUG_PRINF("version: %s\n",request->version);
	return HTTP_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <parse_command_line>:

static http_status_t parse_command_line(const char *line, http_server_request_t *request)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	http_parser_state_t state = HTTP_PARSE_CMD;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
	char *token = strtok((char *)line, " ");
 80019b2:	4916      	ldr	r1, [pc, #88]	; (8001a0c <parse_command_line+0x68>)
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f01d fabd 	bl	801ef34 <strtok>
 80019ba:	6138      	str	r0, [r7, #16]
	http_status_t status;

	while(token != NULL && state != HTTP_PARSE_DONE)
 80019bc:	e01b      	b.n	80019f6 <parse_command_line+0x52>
	{
		HTTP_DEBUG_PRINF("command line token : %s\n", token);

		if (handlers[state])
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <parse_command_line+0x6c>)
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d010      	beq.n	80019ec <parse_command_line+0x48>
		{
			status = handlers[state](token, request);
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <parse_command_line+0x6c>)
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	6938      	ldr	r0, [r7, #16]
 80019d6:	4798      	blx	r3
 80019d8:	4603      	mov	r3, r0
 80019da:	73fb      	strb	r3, [r7, #15]
			HTTP_DEBUG_PRINF("state : %d\n", state);
			if (status != HTTP_OK)
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <parse_command_line+0x42>
			{
				HTTP_DEBUG_PRINF("handlers() error : %d\n", state);
				return status;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	e00e      	b.n	8001a04 <parse_command_line+0x60>
			}
			state++;
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	3301      	adds	r3, #1
 80019ea:	75fb      	strb	r3, [r7, #23]
		}
		token = strtok(NULL, " ");
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <parse_command_line+0x68>)
 80019ee:	2000      	movs	r0, #0
 80019f0:	f01d faa0 	bl	801ef34 <strtok>
 80019f4:	6138      	str	r0, [r7, #16]
	while(token != NULL && state != HTTP_PARSE_DONE)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <parse_command_line+0x5e>
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d1dd      	bne.n	80019be <parse_command_line+0x1a>
	}
	return status;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	08021b90 	.word	0x08021b90
 8001a10:	20000000 	.word	0x20000000

08001a14 <parse_payload>:

static http_status_t parse_payload(const char *payload, http_server_request_t *request)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b096      	sub	sp, #88	; 0x58
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	http_status_t status;
	if (payload == NULL || request == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <parse_payload+0x16>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <parse_payload+0x1a>
	{
		return HTTP_ERR_FAULT;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e034      	b.n	8001a98 <parse_payload+0x84>
	}
	char *content = strstr(payload, HTTP_CONTENT_SEPARATOR);
 8001a2e:	491c      	ldr	r1, [pc, #112]	; (8001aa0 <parse_payload+0x8c>)
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f01d fa68 	bl	801ef06 <strstr>
 8001a36:	6578      	str	r0, [r7, #84]	; 0x54
	if (content != NULL)
 8001a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <parse_payload+0x3e>
	{
		content += sizeof(HTTP_CONTENT_SEPARATOR) - 1;
 8001a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a40:	3304      	adds	r3, #4
 8001a42:	657b      	str	r3, [r7, #84]	; 0x54
		strncpy(request->content, content, MAX_CONTENT_LENGTH);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	331a      	adds	r3, #26
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f01d fa47 	bl	801eee0 <strncpy>
		HTTP_DEBUG_PRINF("content : %s\n", content);
	}

	char *token = strtok((char *)payload, HTTP_HEADER_SEPARATOR);
 8001a52:	4914      	ldr	r1, [pc, #80]	; (8001aa4 <parse_payload+0x90>)
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f01d fa6d 	bl	801ef34 <strtok>
 8001a5a:	6538      	str	r0, [r7, #80]	; 0x50
	if (token == NULL)
 8001a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <parse_payload+0x52>
	{
		return HTTP_ERR_HEADER;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e018      	b.n	8001a98 <parse_payload+0x84>
	}

	char command_line[MAX_COMMAND_LINE_LENGTH];
	strncpy(command_line, token, sizeof(command_line));
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f01d fa36 	bl	801eee0 <strncpy>

	status = parse_command_line((const char *)command_line, request);
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff92 	bl	80019a4 <parse_command_line>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (status != HTTP_OK)
 8001a86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <parse_payload+0x80>
	{
		return status;
 8001a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a92:	e001      	b.n	8001a98 <parse_payload+0x84>
	}

	return status;
 8001a94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3758      	adds	r7, #88	; 0x58
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	08021b94 	.word	0x08021b94
 8001aa4:	08021b9c 	.word	0x08021b9c

08001aa8 <error_code_handler>:

static http_status_t error_code_handler(const char *error_str, unsigned int error_code, const char *error_message, http_buffer_t *out)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
	char *tmp = (char *)malloc(256);
 8001ab6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001aba:	f01c fa7d 	bl	801dfb8 <malloc>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	61fb      	str	r3, [r7, #28]
	if (tmp == NULL)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <error_code_handler+0x24>
		return HTTP_ERR_FAULT;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e036      	b.n	8001b3a <error_code_handler+0x92>
	sprintf(tmp, HTTP_ERROR_MESSAGE_TEMPLATE_STR, error_str, error_str, error_message);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	491b      	ldr	r1, [pc, #108]	; (8001b44 <error_code_handler+0x9c>)
 8001ad6:	69f8      	ldr	r0, [r7, #28]
 8001ad8:	f01d f94c 	bl	801ed74 <siprintf>
	int content_len = strlen(tmp);
 8001adc:	69f8      	ldr	r0, [r7, #28]
 8001ade:	f7fe fb77 	bl	80001d0 <strlen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	61bb      	str	r3, [r7, #24]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, error_code, error_str, content_len);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6858      	ldr	r0, [r3, #4]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <error_code_handler+0xa0>)
 8001afa:	f01d f907 	bl	801ed0c <sniprintf>
	int header_len = strlen(out->data);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fb64 	bl	80001d0 <strlen>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	617b      	str	r3, [r7, #20]
	if (out->length < header_len + content_len)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6979      	ldr	r1, [r7, #20]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	440a      	add	r2, r1
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d204      	bcs.n	8001b24 <error_code_handler+0x7c>
	{
		free(tmp);
 8001b1a:	69f8      	ldr	r0, [r7, #28]
 8001b1c:	f01c fa54 	bl	801dfc8 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8001b20:	2304      	movs	r3, #4
 8001b22:	e00a      	b.n	8001b3a <error_code_handler+0x92>
	}
	strncat(out->data, tmp, content_len);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69f9      	ldr	r1, [r7, #28]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f01d f9b2 	bl	801ee96 <strncat>
	free(tmp);
 8001b32:	69f8      	ldr	r0, [r7, #28]
 8001b34:	f01c fa48 	bl	801dfc8 <free>
	return HTTP_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	08021ba0 	.word	0x08021ba0
 8001b48:	08021c24 	.word	0x08021c24

08001b4c <bad_request_handler>:

static http_status_t bad_request_handler(http_buffer_t *out)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_BAD_REQUEST_ERR_STR, HTTP_BAD_REQUEST_ERR_CODE, HTTP_ERR_400_STR, out);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <bad_request_handler+0x20>)
 8001b58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <bad_request_handler+0x24>)
 8001b5e:	f7ff ffa3 	bl	8001aa8 <error_code_handler>
 8001b62:	4603      	mov	r3, r0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	08021c9c 	.word	0x08021c9c
 8001b70:	08021ca8 	.word	0x08021ca8

08001b74 <not_implemented_handler>:

static http_status_t not_implemented_handler(http_buffer_t *out)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_NOT_IMPLEMENTED_ERR_STR, HTTP_NOT_IMPLEMENTED_ERR_CODE, HTTP_ERR_501_STR, out);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <not_implemented_handler+0x20>)
 8001b80:	f240 11f5 	movw	r1, #501	; 0x1f5
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <not_implemented_handler+0x24>)
 8001b86:	f7ff ff8f 	bl	8001aa8 <error_code_handler>
 8001b8a:	4603      	mov	r3, r0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	08021cb4 	.word	0x08021cb4
 8001b98:	08021cc0 	.word	0x08021cc0

08001b9c <not_found_handler>:

static http_status_t not_found_handler(http_buffer_t *out)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_NOT_FOUND_ERR_STR, HTTP_NOT_FOUND_ERR_CODE, HTTP_ERR_404_STR, out);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <not_found_handler+0x20>)
 8001ba8:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <not_found_handler+0x24>)
 8001bae:	f7ff ff7b 	bl	8001aa8 <error_code_handler>
 8001bb2:	4603      	mov	r3, r0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	08021cd0 	.word	0x08021cd0
 8001bc0:	08021cdc 	.word	0x08021cdc

08001bc4 <reset_content_handler>:

static http_status_t reset_content_handler(http_buffer_t *out)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_RESET_CONTENT_CODE, HTTP_RESET_CONTENT_STR, 0);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6858      	ldr	r0, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <reset_content_handler+0x2c>)
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	23cd      	movs	r3, #205	; 0xcd
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <reset_content_handler+0x30>)
 8001be0:	f01d f894 	bl	801ed0c <sniprintf>
	return HTTP_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08021ce8 	.word	0x08021ce8
 8001bf4:	08021c24 	.word	0x08021c24

08001bf8 <error_handler>:

static http_status_t error_handler(http_status_t status, http_buffer_t *out)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
	switch(status)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d010      	beq.n	8001c2c <error_handler+0x34>
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	dc13      	bgt.n	8001c36 <error_handler+0x3e>
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <error_handler+0x20>
 8001c12:	2b0a      	cmp	r3, #10
 8001c14:	d005      	beq.n	8001c22 <error_handler+0x2a>
 8001c16:	e00e      	b.n	8001c36 <error_handler+0x3e>
	{
	case HTTP_OK:
		return reset_content_handler(out);
 8001c18:	6838      	ldr	r0, [r7, #0]
 8001c1a:	f7ff ffd3 	bl	8001bc4 <reset_content_handler>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	e00d      	b.n	8001c3e <error_handler+0x46>

	case HTTP_ERR_NOT_IMPLEMENTED:
		return not_implemented_handler(out);
 8001c22:	6838      	ldr	r0, [r7, #0]
 8001c24:	f7ff ffa6 	bl	8001b74 <not_implemented_handler>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	e008      	b.n	8001c3e <error_handler+0x46>

	case HTTP_ERR_NOT_FOUND:
		return not_found_handler(out);
 8001c2c:	6838      	ldr	r0, [r7, #0]
 8001c2e:	f7ff ffb5 	bl	8001b9c <not_found_handler>
 8001c32:	4603      	mov	r3, r0
 8001c34:	e003      	b.n	8001c3e <error_handler+0x46>

	default:
	case HTTP_ERR_BAD_REQUEST:
		return bad_request_handler(out);
 8001c36:	6838      	ldr	r0, [r7, #0]
 8001c38:	f7ff ff88 	bl	8001b4c <bad_request_handler>
 8001c3c:	4603      	mov	r3, r0
	}
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <http_root_path_handler>:

http_status_t http_root_path_handler(http_buffer_t *out)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]
	HTTP_DEBUG_PRINF("http_root_path_handler()\n");

	if (out == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <http_root_path_handler+0x12>
	{
		return HTTP_ERR_FAULT;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e026      	b.n	8001ca8 <http_root_path_handler+0x60>
	}
	int content_len = strlen(HTTP_MAIN_PAGE_CONTENT_STR);
 8001c5a:	f240 53dd 	movw	r3, #1501	; 0x5dd
 8001c5e:	60fb      	str	r3, [r7, #12]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6858      	ldr	r0, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <http_root_path_handler+0x68>)
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	23c8      	movs	r3, #200	; 0xc8
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <http_root_path_handler+0x6c>)
 8001c74:	f01d f84a 	bl	801ed0c <sniprintf>
	int header_len = strlen(out->data);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe faa7 	bl	80001d0 <strlen>
 8001c82:	4603      	mov	r3, r0
 8001c84:	60bb      	str	r3, [r7, #8]
	if(out->length < header_len + content_len)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	440a      	add	r2, r1
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d201      	bcs.n	8001c98 <http_root_path_handler+0x50>
		return HTTP_ERR_BUF_OVERFLOW;
 8001c94:	2304      	movs	r3, #4
 8001c96:	e007      	b.n	8001ca8 <http_root_path_handler+0x60>
	strncat(out->data, HTTP_MAIN_PAGE_CONTENT_STR, content_len);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4906      	ldr	r1, [pc, #24]	; (8001cb8 <http_root_path_handler+0x70>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f01d f8f8 	bl	801ee96 <strncat>
	return HTTP_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	08021cf8 	.word	0x08021cf8
 8001cb4:	08021c24 	.word	0x08021c24
 8001cb8:	08021cfc 	.word	0x08021cfc

08001cbc <http_post_request_handler>:
/*
 * End of Weak functions
 * */

http_status_t http_post_request_handler(http_server_request_t *request)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	HTTP_DEBUG_PRINF("http_post_request_handler()\n");

	if (request == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <http_post_request_handler+0x12>
	{
		return HTTP_ERR_FAULT;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e086      	b.n	8001ddc <http_post_request_handler+0x120>
	}

	char action[sizeof("TOGGLE")];
	uint8_t number;
	bool LED[4] = {false, false, false, false};
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
	LED_action_t LED_action;

	char *token = strtok(request->content, "&");
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	331a      	adds	r3, #26
 8001cd6:	4943      	ldr	r1, [pc, #268]	; (8001de4 <http_post_request_handler+0x128>)
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f01d f92b 	bl	801ef34 <strtok>
 8001cde:	61b8      	str	r0, [r7, #24]
	while(token != NULL)
 8001ce0:	e05b      	b.n	8001d9a <http_post_request_handler+0xde>
	{
		HTTP_DEBUG_PRINF("token : %s\n", token);

		if (sscanf(token, "LED%01u=EN", (unsigned int *)&number) > 0)
 8001ce2:	f107 030f 	add.w	r3, r7, #15
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	493f      	ldr	r1, [pc, #252]	; (8001de8 <http_post_request_handler+0x12c>)
 8001cea:	69b8      	ldr	r0, [r7, #24]
 8001cec:	f01d f862 	bl	801edb4 <siscanf>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	dd0d      	ble.n	8001d12 <http_post_request_handler+0x56>
		{
			if (number > 2 && number < 7)
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d90a      	bls.n	8001d12 <http_post_request_handler+0x56>
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d807      	bhi.n	8001d12 <http_post_request_handler+0x56>
			{
				LED[number - 3] = true;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	f107 0220 	add.w	r2, r7, #32
 8001d0a:	4413      	add	r3, r2
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f803 2c18 	strb.w	r2, [r3, #-24]
			}
		}
		if (sscanf(token, "ACTION=%s", action) > 0)
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	461a      	mov	r2, r3
 8001d18:	4934      	ldr	r1, [pc, #208]	; (8001dec <http_post_request_handler+0x130>)
 8001d1a:	69b8      	ldr	r0, [r7, #24]
 8001d1c:	f01d f84a 	bl	801edb4 <siscanf>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dd34      	ble.n	8001d90 <http_post_request_handler+0xd4>
		{
			if (strncmp(action, "TOGGLE", strlen(action)) == 0)
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fa50 	bl	80001d0 <strlen>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	492e      	ldr	r1, [pc, #184]	; (8001df0 <http_post_request_handler+0x134>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f01d f8bf 	bl	801eebc <strncmp>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <http_post_request_handler+0x8e>
			{
				LED_action = LED_TOGGLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	77fb      	strb	r3, [r7, #31]
 8001d48:	e022      	b.n	8001d90 <http_post_request_handler+0xd4>
			}
			else if (strncmp(action, "ON", strlen(action)) == 0)
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fa3e 	bl	80001d0 <strlen>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4926      	ldr	r1, [pc, #152]	; (8001df4 <http_post_request_handler+0x138>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f01d f8ad 	bl	801eebc <strncmp>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <http_post_request_handler+0xb2>
			{
				LED_action = LED_ON;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	77fb      	strb	r3, [r7, #31]
 8001d6c:	e010      	b.n	8001d90 <http_post_request_handler+0xd4>
			}
			else if (strncmp(action, "OFF", strlen(action)) == 0)
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fa2c 	bl	80001d0 <strlen>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	491e      	ldr	r1, [pc, #120]	; (8001df8 <http_post_request_handler+0x13c>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f01d f89b 	bl	801eebc <strncmp>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <http_post_request_handler+0xd4>
			{
				LED_action = LED_OFF;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	77fb      	strb	r3, [r7, #31]
			}
		}
		token = strtok(NULL, "&");
 8001d90:	4914      	ldr	r1, [pc, #80]	; (8001de4 <http_post_request_handler+0x128>)
 8001d92:	2000      	movs	r0, #0
 8001d94:	f01d f8ce 	bl	801ef34 <strtok>
 8001d98:	61b8      	str	r0, [r7, #24]
	while(token != NULL)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1a0      	bne.n	8001ce2 <http_post_request_handler+0x26>
	}

	switch(LED_action)
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d012      	beq.n	8001dcc <http_post_request_handler+0x110>
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	dc16      	bgt.n	8001dd8 <http_post_request_handler+0x11c>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <http_post_request_handler+0xf8>
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d006      	beq.n	8001dc0 <http_post_request_handler+0x104>
	case LED_OFF:
		http_led_off_handler(LED);
		break;

	default:
		break;
 8001db2:	e011      	b.n	8001dd8 <http_post_request_handler+0x11c>
		http_led_toggle_handler(LED);
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f9d3 	bl	8001164 <http_led_toggle_handler>
		break;
 8001dbe:	e00c      	b.n	8001dda <http_post_request_handler+0x11e>
		http_led_on_handler(LED);
 8001dc0:	f107 0308 	add.w	r3, r7, #8
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f9f3 	bl	80011b0 <http_led_on_handler>
		break;
 8001dca:	e006      	b.n	8001dda <http_post_request_handler+0x11e>
		http_led_off_handler(LED);
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fa13 	bl	80011fc <http_led_off_handler>
		break;
 8001dd6:	e000      	b.n	8001dda <http_post_request_handler+0x11e>
		break;
 8001dd8:	bf00      	nop
	}
	return HTTP_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	080222dc 	.word	0x080222dc
 8001de8:	080222e0 	.word	0x080222e0
 8001dec:	080222ec 	.word	0x080222ec
 8001df0:	080222f8 	.word	0x080222f8
 8001df4:	08022300 	.word	0x08022300
 8001df8:	08022304 	.word	0x08022304

08001dfc <request_handler>:

static http_status_t request_handler(http_server_request_t *request, http_buffer_t *out)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("request_handler()\n");
	http_status_t status = HTTP_ERR_NOT_IMPLEMENTED;
 8001e06:	230a      	movs	r3, #10
 8001e08:	73fb      	strb	r3, [r7, #15]

	switch (request->command)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <request_handler+0x1c>
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d045      	beq.n	8001ea2 <request_handler+0xa6>
			status = HTTP_ERR_BAD_REQUEST;
		}
		break;

	default:
		break;
 8001e16:	e057      	b.n	8001ec8 <request_handler+0xcc>
		if (strncmp(request->path, "/", strlen(request->path)) == 0)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	1c5c      	adds	r4, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe f9d5 	bl	80001d0 <strlen>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	492a      	ldr	r1, [pc, #168]	; (8001ed4 <request_handler+0xd8>)
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f01d f845 	bl	801eebc <strncmp>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <request_handler+0x48>
			status = http_root_path_handler(out);
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f7ff ff05 	bl	8001c48 <http_root_path_handler>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	73fb      	strb	r3, [r7, #15]
		break;
 8001e42:	e041      	b.n	8001ec8 <request_handler+0xcc>
		else if (strncmp(request->path, "/temperature", strlen(request->path)) == 0)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1c5c      	adds	r4, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe f9bf 	bl	80001d0 <strlen>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4920      	ldr	r1, [pc, #128]	; (8001ed8 <request_handler+0xdc>)
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f01d f82f 	bl	801eebc <strncmp>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <request_handler+0x74>
			status = http_temperature_path_handler(out);
 8001e64:	6838      	ldr	r0, [r7, #0]
 8001e66:	f7ff f851 	bl	8000f0c <http_temperature_path_handler>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]
		break;
 8001e6e:	e02b      	b.n	8001ec8 <request_handler+0xcc>
		else if (strncmp(request->path, "/humidity", strlen(request->path)) == 0)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1c5c      	adds	r4, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3301      	adds	r3, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe f9a9 	bl	80001d0 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4916      	ldr	r1, [pc, #88]	; (8001edc <request_handler+0xe0>)
 8001e84:	4620      	mov	r0, r4
 8001e86:	f01d f819 	bl	801eebc <strncmp>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <request_handler+0xa0>
			status = http_humidity_path_handler(out);
 8001e90:	6838      	ldr	r0, [r7, #0]
 8001e92:	f7ff f8d1 	bl	8001038 <http_humidity_path_handler>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]
		break;
 8001e9a:	e015      	b.n	8001ec8 <request_handler+0xcc>
			status = HTTP_ERR_NOT_FOUND;
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	73fb      	strb	r3, [r7, #15]
		break;
 8001ea0:	e012      	b.n	8001ec8 <request_handler+0xcc>
		if (request->content)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	331a      	adds	r3, #26
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <request_handler+0xc6>
			status = http_post_request_handler(request);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff06 	bl	8001cbc <http_post_request_handler>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
			if (status == HTTP_OK)
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <request_handler+0xca>
				reset_content_handler(out);
 8001eba:	6838      	ldr	r0, [r7, #0]
 8001ebc:	f7ff fe82 	bl	8001bc4 <reset_content_handler>
		break;
 8001ec0:	e001      	b.n	8001ec6 <request_handler+0xca>
			status = HTTP_ERR_BAD_REQUEST;
 8001ec2:	230b      	movs	r3, #11
 8001ec4:	73fb      	strb	r3, [r7, #15]
		break;
 8001ec6:	bf00      	nop
	}

	return status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	08022308 	.word	0x08022308
 8001ed8:	0802230c 	.word	0x0802230c
 8001edc:	0802231c 	.word	0x0802231c

08001ee0 <is_path_correct>:

static bool is_path_correct(const char *path)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	return (strncmp(path, "/", strlen(path)) == 0
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7fe f971 	bl	80001d0 <strlen>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4914      	ldr	r1, [pc, #80]	; (8001f44 <is_path_correct+0x64>)
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f01c ffe1 	bl	801eebc <strncmp>
 8001efa:	4603      	mov	r3, r0
		|| strncmp(path, "/temperature", strlen(path)) == 0
		|| strncmp(path, "/humidity", strlen(path)) == 0);
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <is_path_correct+0x50>
		|| strncmp(path, "/temperature", strlen(path)) == 0
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe f965 	bl	80001d0 <strlen>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	490f      	ldr	r1, [pc, #60]	; (8001f48 <is_path_correct+0x68>)
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f01c ffd5 	bl	801eebc <strncmp>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <is_path_correct+0x50>
		|| strncmp(path, "/humidity", strlen(path)) == 0);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe f959 	bl	80001d0 <strlen>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	490a      	ldr	r1, [pc, #40]	; (8001f4c <is_path_correct+0x6c>)
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f01c ffc9 	bl	801eebc <strncmp>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <is_path_correct+0x54>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <is_path_correct+0x56>
 8001f34:	2300      	movs	r3, #0
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	08022308 	.word	0x08022308
 8001f48:	0802230c 	.word	0x0802230c
 8001f4c:	0802231c 	.word	0x0802231c

08001f50 <is_command_implemented>:

static bool is_command_implemented(http_command_t command)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
	return (command == HTTP_GET
			|| command == HTTP_POST);
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <is_command_implemented+0x16>
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d101      	bne.n	8001f6a <is_command_implemented+0x1a>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <is_command_implemented+0x1c>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <is_version_correct>:

static bool is_version_correct(const char *version)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	return (strncmp(version, HTTP_VERSION_STR, strlen(version)) == 0);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7fe f921 	bl	80001d0 <strlen>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <is_version_correct+0x30>)
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f01c ff91 	bl	801eebc <strncmp>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	08022328 	.word	0x08022328

08001fb4 <send_answer>:

static int send_answer(int sock, http_buffer_t *out)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	int len = strlen(out->data);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe f904 	bl	80001d0 <strlen>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60fb      	str	r3, [r7, #12]
	if (send(sock, out->data, len, 0) < 0)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f00c f8a7 	bl	800e128 <lwip_send>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da05      	bge.n	8001fec <send_answer+0x38>
	{
		printf("send() error\n");
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <send_answer+0x44>)
 8001fe2:	f01c fdd1 	bl	801eb88 <puts>
		return -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fea:	e000      	b.n	8001fee <send_answer+0x3a>
	}
	return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08022334 	.word	0x08022334

08001ffc <http_server_handler>:

http_status_t http_server_handler(int sock)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b0a0      	sub	sp, #128	; 0x80
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	int nbytes;
	http_status_t status = HTTP_ERR_RCV_TIMEOUT;
 8002004:	2309      	movs	r3, #9
 8002006:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	http_server_request_t request;
	http_buffer_t in;
	http_buffer_t out;

	if (sock < 0) {
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da01      	bge.n	8002014 <http_server_handler+0x18>
		return HTTP_ERR_INVAL;
 8002010:	2302      	movs	r3, #2
 8002012:	e0a9      	b.n	8002168 <http_server_handler+0x16c>
	}

	in.length = MAX_IN_PACKET_LENGTH;
 8002014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002018:	617b      	str	r3, [r7, #20]
	in.data = malloc(in.length);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	4618      	mov	r0, r3
 800201e:	f01b ffcb 	bl	801dfb8 <malloc>
 8002022:	4603      	mov	r3, r0
 8002024:	61bb      	str	r3, [r7, #24]
	if (in.data == NULL)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <http_server_handler+0x34>
	{
		return HTTP_ERR_FAULT;
 800202c:	2301      	movs	r3, #1
 800202e:	e09b      	b.n	8002168 <http_server_handler+0x16c>
	}

	out.length = MAX_OUT_PACKET_LENGTH;
 8002030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002034:	60fb      	str	r3, [r7, #12]
	out.data = malloc(out.length);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4618      	mov	r0, r3
 800203a:	f01b ffbd 	bl	801dfb8 <malloc>
 800203e:	4603      	mov	r3, r0
 8002040:	613b      	str	r3, [r7, #16]
	if (out.data == NULL)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <http_server_handler+0x58>
	{
		free(in.data);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	4618      	mov	r0, r3
 800204c:	f01b ffbc 	bl	801dfc8 <free>
		return HTTP_ERR_FAULT;
 8002050:	2301      	movs	r3, #1
 8002052:	e089      	b.n	8002168 <http_server_handler+0x16c>
	}
	memset(in.data, 0, in.length);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f01b fff2 	bl	801e044 <memset>
	memset(out.data, 0, out.length);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f01b ffec 	bl	801e044 <memset>

	if ( (nbytes = recv(sock, in.data, in.length, 0)) > 0 )
 800206c:	69b9      	ldr	r1, [r7, #24]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	2300      	movs	r3, #0
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f00c f842 	bl	800e0fc <lwip_recv>
 8002078:	67b8      	str	r0, [r7, #120]	; 0x78
 800207a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800207c:	2b00      	cmp	r3, #0
 800207e:	dd5f      	ble.n	8002140 <http_server_handler+0x144>
	{
		status = parse_payload((const char *)in.data, &request);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f107 021c 	add.w	r2, r7, #28
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fcc3 	bl	8001a14 <parse_payload>
 800208e:	4603      	mov	r3, r0
 8002090:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		if (status != HTTP_OK)
 8002094:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <http_server_handler+0xac>
		{
			HTTP_DEBUG_PRINF("parse_payload() error: %d\n", status);
			bad_request_handler(&out);
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fd53 	bl	8001b4c <bad_request_handler>
			goto error_exit;
 80020a6:	e04c      	b.n	8002142 <http_server_handler+0x146>
		}
		if (!is_command_implemented(request.command))
 80020a8:	7f3b      	ldrb	r3, [r7, #28]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff50 	bl	8001f50 <is_command_implemented>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <http_server_handler+0xcc>
		{
			HTTP_DEBUG_PRINF("command not implemented\n");
			not_implemented_handler(&out);
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fd57 	bl	8001b74 <not_implemented_handler>
			goto error_exit;
 80020c6:	e03c      	b.n	8002142 <http_server_handler+0x146>
		}
		if (!is_path_correct((const char *)request.path))
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	3301      	adds	r3, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff06 	bl	8001ee0 <is_path_correct>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f083 0301 	eor.w	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <http_server_handler+0xf0>
		{
			HTTP_DEBUG_PRINF("requested path not found\n");
			not_found_handler(&out);
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fd59 	bl	8001b9c <not_found_handler>
			goto error_exit;
 80020ea:	e02a      	b.n	8002142 <http_server_handler+0x146>
		}
		if (!is_version_correct((const char *)request.version))
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	3311      	adds	r3, #17
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff44 	bl	8001f80 <is_version_correct>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f083 0301 	eor.w	r3, r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <http_server_handler+0x114>
		{
			HTTP_DEBUG_PRINF("wrong protocol version: %s\n",request.version);
			bad_request_handler(&out);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fd1f 	bl	8001b4c <bad_request_handler>
			goto error_exit;
 800210e:	e018      	b.n	8002142 <http_server_handler+0x146>
		}
		// if everything is OK
		status = request_handler(&request, &out);
 8002110:	f107 020c 	add.w	r2, r7, #12
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fe6e 	bl	8001dfc <request_handler>
 8002120:	4603      	mov	r3, r0
 8002122:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (status != HTTP_OK)
 8002126:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <http_server_handler+0x144>
		{
			error_handler(status, &out);
 800212e:	f107 020c 	add.w	r2, r7, #12
 8002132:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fd5d 	bl	8001bf8 <error_handler>
 800213e:	e000      	b.n	8002142 <http_server_handler+0x146>
		}
	}
error_exit:
 8002140:	bf00      	nop
	send_answer(sock, &out);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff33 	bl	8001fb4 <send_answer>
	close(sock);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f00b fb94 	bl	800d87c <lwip_close>

	free(in.data);
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4618      	mov	r0, r3
 8002158:	f01b ff36 	bl	801dfc8 <free>
	free(out.data);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4618      	mov	r0, r3
 8002160:	f01b ff32 	bl	801dfc8 <free>

	return status;
 8002164:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002168:	4618      	mov	r0, r3
 800216a:	3780      	adds	r7, #128	; 0x80
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_MspInit+0x54>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_MspInit+0x54>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_MspInit+0x54>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_MspInit+0x54>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_MspInit+0x54>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_MspInit+0x54>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	210f      	movs	r1, #15
 80021b2:	f06f 0001 	mvn.w	r0, #1
 80021b6:	f002 fe13 	bl	8004de0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_UART_MspInit+0x84>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d12c      	bne.n	8002244 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_UART_MspInit+0x88>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <HAL_UART_MspInit+0x88>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_UART_MspInit+0x88>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_UART_MspInit+0x88>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_UART_MspInit+0x88>)
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_UART_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART3_TX_Pin|UART3_RX_Pin;
 8002222:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002234:	2307      	movs	r3, #7
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <HAL_UART_MspInit+0x8c>)
 8002240:	f002 fdf8 	bl	8004e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40004800 	.word	0x40004800
 8002250:	40023800 	.word	0x40023800
 8002254:	40020c00 	.word	0x40020c00

08002258 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	2019      	movs	r0, #25
 800226e:	f002 fdb7 	bl	8004de0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002272:	2019      	movs	r0, #25
 8002274:	f002 fdd0 	bl	8004e18 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_InitTick+0xa4>)
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_InitTick+0xa4>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6453      	str	r3, [r2, #68]	; 0x44
 8002288:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_InitTick+0xa4>)
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002294:	f107 0210 	add.w	r2, r7, #16
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fd38 	bl	8005d14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80022a4:	f003 fd22 	bl	8005cec <HAL_RCC_GetPCLK2Freq>
 80022a8:	4603      	mov	r3, r0
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	4a13      	ldr	r2, [pc, #76]	; (8002300 <HAL_InitTick+0xa8>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	3b01      	subs	r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_InitTick+0xac>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_InitTick+0xb0>)
 80022c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_InitTick+0xac>)
 80022c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_InitTick+0xac>)
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_InitTick+0xac>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_InitTick+0xac>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022dc:	4809      	ldr	r0, [pc, #36]	; (8002304 <HAL_InitTick+0xac>)
 80022de:	f003 fd4b 	bl	8005d78 <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80022e8:	4806      	ldr	r0, [pc, #24]	; (8002304 <HAL_InitTick+0xac>)
 80022ea:	f003 fd9f 	bl	8005e2c <HAL_TIM_Base_Start_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3730      	adds	r7, #48	; 0x30
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	431bde83 	.word	0x431bde83
 8002304:	20014504 	.word	0x20014504
 8002308:	40010000 	.word	0x40010000

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <NMI_Handler+0x4>

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800233c:	2001      	movs	r0, #1
 800233e:	f003 f85d 	bl	80053fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}

08002346 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800234a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800234e:	f003 f855 	bl	80053fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800235e:	f003 fdd5 	bl	8005f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20014504 	.word	0x20014504

0800236c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <ETH_IRQHandler+0x10>)
 8002372:	f001 fe55 	bl	8004020 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20015e74 	.word	0x20015e74

08002380 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
	return 1;
 8002384:	2301      	movs	r3, #1
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_kill>:

int _kill(int pid, int sig)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <_kill+0x20>)
 800239c:	2216      	movs	r2, #22
 800239e:	601a      	str	r2, [r3, #0]
	return -1;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	2001b118 	.word	0x2001b118

080023b4 <_exit>:

void _exit (int status)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ffe5 	bl	8002390 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023c6:	e7fe      	b.n	80023c6 <_exit+0x12>

080023c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e00a      	b.n	80023f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023da:	f3af 8000 	nop.w
 80023de:	4601      	mov	r1, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	60ba      	str	r2, [r7, #8]
 80023e6:	b2ca      	uxtb	r2, r1
 80023e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbf0      	blt.n	80023da <_read+0x12>
	}

return len;
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e009      	b.n	8002428 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fd63 	bl	8000ee8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	dbf1      	blt.n	8002414 <_write+0x12>
	}
	return len;
 8002430:	687b      	ldr	r3, [r7, #4]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_close>:

int _close(int file)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
	return -1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002462:	605a      	str	r2, [r3, #4]
	return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_isatty>:

int _isatty(int file)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	return 1;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <_sbrk+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <_sbrk+0x60>)
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <_sbrk+0x64>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <_sbrk+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d205      	bcs.n	80024e0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <_sbrk+0x6c>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024de:	e009      	b.n	80024f4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	4a06      	ldr	r2, [pc, #24]	; (8002508 <_sbrk+0x64>)
 80024f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	20020000 	.word	0x20020000
 8002504:	00000400 	.word	0x00000400
 8002508:	20000250 	.word	0x20000250
 800250c:	2001b130 	.word	0x2001b130
 8002510:	2001b118 	.word	0x2001b118

08002514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <SystemInit+0x20>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <SystemInit+0x20>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <StartTcpClientTask>:

static Status resolve_address(const char *server, uint16_t port, struct sockaddr_in *address);
static int connect_server(const struct sockaddr_in *address);

void StartTcpClientTask(void const * argument)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    osEvent event;

    for(;;)
    {
         event = osSignalWait (SIGNAL_PUSH_BUTTON, osWaitForever);
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002548:	2102      	movs	r1, #2
 800254a:	4618      	mov	r0, r3
 800254c:	f005 f862 	bl	8007614 <osSignalWait>

         if (event.status == osEventSignal)  {
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d1f4      	bne.n	8002540 <StartTcpClientTask+0x8>
        	TCP_CLIENT_PRINTF("osSignalWait() received event\n");
 			BSP_LED_Off(GREEN);
 8002556:	2000      	movs	r0, #0
 8002558:	f000 fde2 	bl	8003120 <BSP_LED_Off>
			if (resolve_address(SERVER, PORTNUM, &serv_addr) != STATUS_OK)
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <StartTcpClientTask+0xd4>)
 800255e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002562:	482b      	ldr	r0, [pc, #172]	; (8002610 <StartTcpClientTask+0xd8>)
 8002564:	f000 f85c 	bl	8002620 <resolve_address>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <StartTcpClientTask+0x3e>
			{
		    	BSP_LED_On(ORANGE);
 800256e:	2001      	movs	r0, #1
 8002570:	f000 fdbc 	bl	80030ec <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("resolve_address() error\n");
				continue;
 8002574:	e048      	b.n	8002608 <StartTcpClientTask+0xd0>
			}

			sock_fd = connect_server((const struct sockaddr_in *)&serv_addr);
 8002576:	4825      	ldr	r0, [pc, #148]	; (800260c <StartTcpClientTask+0xd4>)
 8002578:	f000 f88f 	bl	800269a <connect_server>
 800257c:	4603      	mov	r3, r0
 800257e:	4a25      	ldr	r2, [pc, #148]	; (8002614 <StartTcpClientTask+0xdc>)
 8002580:	6013      	str	r3, [r2, #0]
			if (sock_fd == STATUS_ERROR)
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <StartTcpClientTask+0xdc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800258a:	d103      	bne.n	8002594 <StartTcpClientTask+0x5c>
			{
		    	BSP_LED_On(ORANGE);
 800258c:	2001      	movs	r0, #1
 800258e:	f000 fdad 	bl	80030ec <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("connect_server() error\n");
				continue;
 8002592:	e039      	b.n	8002608 <StartTcpClientTask+0xd0>
			}

			const char *message = "This is a Ping-Pong message";
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <StartTcpClientTask+0xe0>)
 8002596:	61fb      	str	r3, [r7, #28]
			if (send(sock_fd, message, strlen(message), 0) < 0)
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <StartTcpClientTask+0xdc>)
 800259a:	681c      	ldr	r4, [r3, #0]
 800259c:	69f8      	ldr	r0, [r7, #28]
 800259e:	f7fd fe17 	bl	80001d0 <strlen>
 80025a2:	4602      	mov	r2, r0
 80025a4:	2300      	movs	r3, #0
 80025a6:	69f9      	ldr	r1, [r7, #28]
 80025a8:	4620      	mov	r0, r4
 80025aa:	f00b fdbd 	bl	800e128 <lwip_send>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	da08      	bge.n	80025c6 <StartTcpClientTask+0x8e>
			{
		    	BSP_LED_On(ORANGE);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f000 fd99 	bl	80030ec <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("send() error\n");
				close(sock_fd);
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <StartTcpClientTask+0xdc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f00b f95c 	bl	800d87c <lwip_close>
				continue;
 80025c4:	e020      	b.n	8002608 <StartTcpClientTask+0xd0>
			}

			int received;
			if( (received = recv(sock_fd, buf, sizeof(buf), 0)) < 0) {
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <StartTcpClientTask+0xdc>)
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	2300      	movs	r3, #0
 80025cc:	2250      	movs	r2, #80	; 0x50
 80025ce:	4913      	ldr	r1, [pc, #76]	; (800261c <StartTcpClientTask+0xe4>)
 80025d0:	f00b fd94 	bl	800e0fc <lwip_recv>
 80025d4:	61b8      	str	r0, [r7, #24]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da08      	bge.n	80025ee <StartTcpClientTask+0xb6>
		    	BSP_LED_On(ORANGE);
 80025dc:	2001      	movs	r0, #1
 80025de:	f000 fd85 	bl	80030ec <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("recv() error\n");
		        close(sock_fd);
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <StartTcpClientTask+0xdc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00b f948 	bl	800d87c <lwip_close>
		        continue;
 80025ec:	e00c      	b.n	8002608 <StartTcpClientTask+0xd0>
		    }
			buf[received] = 0;
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <StartTcpClientTask+0xe4>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]

			TCP_CLIENT_PRINTF("Received from server : %s\n", buf);
			BSP_LED_Off(ORANGE);
 80025f8:	2001      	movs	r0, #1
 80025fa:	f000 fd91 	bl	8003120 <BSP_LED_Off>

			close(sock_fd);
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <StartTcpClientTask+0xdc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f00b f93a 	bl	800d87c <lwip_close>
         event = osSignalWait (SIGNAL_PUSH_BUTTON, osWaitForever);
 8002608:	e79a      	b.n	8002540 <StartTcpClientTask+0x8>
 800260a:	bf00      	nop
 800260c:	20000254 	.word	0x20000254
 8002610:	08022344 	.word	0x08022344
 8002614:	20000264 	.word	0x20000264
 8002618:	08022354 	.word	0x08022354
 800261c:	20000268 	.word	0x20000268

08002620 <resolve_address>:
         }
    }
}

static Status resolve_address(const char *server, uint16_t port, struct sockaddr_in *address)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	460b      	mov	r3, r1
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	817b      	strh	r3, [r7, #10]
	if (server == NULL || address == NULL )	{
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <resolve_address+0x1a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <resolve_address+0x20>
		TCP_CLIENT_PRINTF("resolve_address() argument error\n");
        return STATUS_ERROR;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263e:	e028      	b.n	8002692 <resolve_address+0x72>
	}
	struct hostent *hp;
    if((hp = gethostbyname(server))== NULL) {
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f00a fe15 	bl	800d270 <lwip_gethostbyname>
 8002646:	6178      	str	r0, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <resolve_address+0x34>
    	TCP_CLIENT_PRINTF("gethostbyname() error\n");
        return STATUS_ERROR;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002652:	e01e      	b.n	8002692 <resolve_address+0x72>
    }

    bzero(address, sizeof(*address));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	2300      	movs	r3, #0
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	6053      	str	r3, [r2, #4]
 800265e:	6093      	str	r3, [r2, #8]
 8002660:	60d3      	str	r3, [r2, #12]
    bcopy(hp->h_addr, &address->sin_addr, hp->h_length);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1d18      	adds	r0, r3, #4
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	461a      	mov	r2, r3
 8002672:	f01b fccd 	bl	801e010 <memmove>

    address->sin_family = hp->h_addrtype;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	705a      	strb	r2, [r3, #1]
    address->sin_port = htons(port);
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	4618      	mov	r0, r3
 8002684:	f00c fd92 	bl	800f1ac <lwip_htons>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	805a      	strh	r2, [r3, #2]
    return STATUS_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <connect_server>:

static int connect_server(const struct sockaddr_in *address)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	if (address == NULL) {
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <connect_server+0x14>
		TCP_CLIENT_PRINTF("connect_server() argument error\n");
        return STATUS_ERROR;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ac:	e01c      	b.n	80026e8 <connect_server+0x4e>
	}
	int sock;
    if((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1){
 80026ae:	2200      	movs	r2, #0
 80026b0:	2101      	movs	r1, #1
 80026b2:	2002      	movs	r0, #2
 80026b4:	f00b fe48 	bl	800e348 <lwip_socket>
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c0:	d102      	bne.n	80026c8 <connect_server+0x2e>
    	TCP_CLIENT_PRINTF("socket() error\n");
        return STATUS_ERROR;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c6:	e00f      	b.n	80026e8 <connect_server+0x4e>
    }

    TCP_CLIENT_PRINTF("Server address is %s\n", inet_ntoa(address->sin_addr));

    if(connect(sock, (struct sockaddr *)address, sizeof(*address)) == -1) {
 80026c8:	2210      	movs	r2, #16
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f00b f92b 	bl	800d928 <lwip_connect>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d8:	d105      	bne.n	80026e6 <connect_server+0x4c>
    	TCP_CLIENT_PRINTF("connect() error\n");
        close(sock);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f00b f8ce 	bl	800d87c <lwip_close>
        return STATUS_ERROR;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e4:	e000      	b.n	80026e8 <connect_server+0x4e>
    }
    return sock;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <tcpServerInit>:
#define THREAD_MUTEX_UNLOCK()	osMutexRelease(thread_mutex_id)
#define PRINTF_MUTEX_LOCK() 	osMutexWait (printf_mutex_id, osWaitForever)
#define PRINTF_MUTEX_UNLOCK()	osMutexRelease(printf_mutex_id)

static int tcpServerInit(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	socket_fd = socket(AF_INET, SOCK_STREAM, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2101      	movs	r1, #1
 80026f8:	2002      	movs	r0, #2
 80026fa:	f00b fe25 	bl	800e348 <lwip_socket>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <tcpServerInit+0xc8>)
 8002702:	6013      	str	r3, [r2, #0]
	if (socket_fd == -1) {
 8002704:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <tcpServerInit+0xc8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270c:	d102      	bne.n	8002714 <tcpServerInit+0x24>
		TCP_SERVER_PRINTF("socket() error\n");
		return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002712:	e04e      	b.n	80027b2 <tcpServerInit+0xc2>
	}

	nport = PORTNUM;
 8002714:	4b29      	ldr	r3, [pc, #164]	; (80027bc <tcpServerInit+0xcc>)
 8002716:	2250      	movs	r2, #80	; 0x50
 8002718:	801a      	strh	r2, [r3, #0]
	nport = htons((uint16_t)nport);
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <tcpServerInit+0xcc>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f00c fd44 	bl	800f1ac <lwip_htons>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <tcpServerInit+0xcc>)
 800272a:	801a      	strh	r2, [r3, #0]

	bzero(&serv_addr, sizeof(serv_addr));
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <tcpServerInit+0xd0>)
 800272e:	461a      	mov	r2, r3
 8002730:	2300      	movs	r3, #0
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	6053      	str	r3, [r2, #4]
 8002736:	6093      	str	r3, [r2, #8]
 8002738:	60d3      	str	r3, [r2, #12]

	serv_addr.sin_family = AF_INET;
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <tcpServerInit+0xd0>)
 800273c:	2202      	movs	r2, #2
 800273e:	705a      	strb	r2, [r3, #1]
	serv_addr.sin_addr.s_addr = INADDR_ANY;
 8002740:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <tcpServerInit+0xd0>)
 8002742:	2200      	movs	r2, #0
 8002744:	605a      	str	r2, [r3, #4]
	serv_addr.sin_port = nport;
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <tcpServerInit+0xcc>)
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <tcpServerInit+0xd0>)
 800274c:	805a      	strh	r2, [r3, #2]

	if(bind(socket_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))==-1) {
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <tcpServerInit+0xc8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2210      	movs	r2, #16
 8002754:	491a      	ldr	r1, [pc, #104]	; (80027c0 <tcpServerInit+0xd0>)
 8002756:	4618      	mov	r0, r3
 8002758:	f00b f822 	bl	800d7a0 <lwip_bind>
 800275c:	4603      	mov	r3, r0
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002762:	d107      	bne.n	8002774 <tcpServerInit+0x84>
		TCP_SERVER_PRINTF("bind() error\n");
		close(socket_fd);
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <tcpServerInit+0xc8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f00b f887 	bl	800d87c <lwip_close>
		return -1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002772:	e01e      	b.n	80027b2 <tcpServerInit+0xc2>
	}

	if(listen(socket_fd, 5) == -1) {
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <tcpServerInit+0xc8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2105      	movs	r1, #5
 800277a:	4618      	mov	r0, r3
 800277c:	f00b f954 	bl	800da28 <lwip_listen>
 8002780:	4603      	mov	r3, r0
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002786:	d107      	bne.n	8002798 <tcpServerInit+0xa8>
		TCP_SERVER_PRINTF("listen() error\n");
		close(socket_fd);
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <tcpServerInit+0xc8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f00b f875 	bl	800d87c <lwip_close>
		return -1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002796:	e00c      	b.n	80027b2 <tcpServerInit+0xc2>
	}
	TCP_SERVER_PRINTF("Server is ready\n");

	thread_mutex_id = osMutexCreate (osMutex (thread_mutex));
 8002798:	480a      	ldr	r0, [pc, #40]	; (80027c4 <tcpServerInit+0xd4>)
 800279a:	f004 ff87 	bl	80076ac <osMutexCreate>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <tcpServerInit+0xd8>)
 80027a2:	6013      	str	r3, [r2, #0]
	printf_mutex_id = osMutexCreate (osMutex (printf_mutex));
 80027a4:	4809      	ldr	r0, [pc, #36]	; (80027cc <tcpServerInit+0xdc>)
 80027a6:	f004 ff81 	bl	80076ac <osMutexCreate>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <tcpServerInit+0xe0>)
 80027ae:	6013      	str	r3, [r2, #0]

	return 0;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200002d8 	.word	0x200002d8
 80027bc:	200002dc 	.word	0x200002dc
 80027c0:	200002b8 	.word	0x200002b8
 80027c4:	080264d4 	.word	0x080264d4
 80027c8:	2001454c 	.word	0x2001454c
 80027cc:	080264d8 	.word	0x080264d8
 80027d0:	20014550 	.word	0x20014550

080027d4 <StartTcpServerTask>:

void StartTcpServerTask(void const * argument)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    int accept_fd;
	int addr_len;
	size_t i = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

	osDelay(5000);// wait 5 sec to init lwip stack
 80027e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80027e4:	f004 fec1 	bl	800756a <osDelay>

	if(tcpServerInit() < 0) {
 80027e8:	f7ff ff82 	bl	80026f0 <tcpServerInit>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db7d      	blt.n	80028ee <StartTcpServerTask+0x11a>
		return;
	}

	for(;;)
	{
		  bzero(&client_addr, sizeof(client_addr));
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <StartTcpServerTask+0x124>)
 80027f4:	461a      	mov	r2, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	6053      	str	r3, [r2, #4]
 80027fc:	6093      	str	r3, [r2, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
		  addr_len = sizeof(client_addr);
 8002800:	2310      	movs	r3, #16
 8002802:	60fb      	str	r3, [r7, #12]

		  accept_fd = accept(socket_fd, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len);
 8002804:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <StartTcpServerTask+0x128>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f107 020c 	add.w	r2, r7, #12
 800280c:	493a      	ldr	r1, [pc, #232]	; (80028f8 <StartTcpServerTask+0x124>)
 800280e:	4618      	mov	r0, r3
 8002810:	f00a fea8 	bl	800d564 <lwip_accept>
 8002814:	4603      	mov	r3, r0
 8002816:	613b      	str	r3, [r7, #16]

		  if (accept_fd == -1) {
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800281e:	d10c      	bne.n	800283a <StartTcpServerTask+0x66>
			  PRINTF_MUTEX_LOCK();
 8002820:	4b37      	ldr	r3, [pc, #220]	; (8002900 <StartTcpServerTask+0x12c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002828:	4618      	mov	r0, r3
 800282a:	f004 ff4b 	bl	80076c4 <osMutexWait>
			  TCP_SERVER_PRINTF("accept() error\n");
			  PRINTF_MUTEX_UNLOCK();
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <StartTcpServerTask+0x12c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f004 ff94 	bl	8007760 <osMutexRelease>
			  continue;
 8002838:	e058      	b.n	80028ec <StartTcpServerTask+0x118>
		  }

		  PRINTF_MUTEX_LOCK();
 800283a:	4b31      	ldr	r3, [pc, #196]	; (8002900 <StartTcpServerTask+0x12c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002842:	4618      	mov	r0, r3
 8002844:	f004 ff3e 	bl	80076c4 <osMutexWait>
		  TCP_SERVER_PRINTF("Client: %s\n", inet_ntoa(client_addr.sin_addr));
		  TCP_SERVER_PRINTF("fd: %d\n", accept_fd);
		  PRINTF_MUTEX_UNLOCK();
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <StartTcpServerTask+0x12c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f004 ff87 	bl	8007760 <osMutexRelease>

		  THREAD_MUTEX_LOCK();
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <StartTcpServerTask+0x130>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800285a:	4618      	mov	r0, r3
 800285c:	f004 ff32 	bl	80076c4 <osMutexWait>

		  if (ThreadId[i] != NULL) {
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <StartTcpServerTask+0x134>)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d017      	beq.n	800289c <StartTcpServerTask+0xc8>
			  osThreadTerminate(ThreadId[i]);
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <StartTcpServerTask+0x134>)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	4618      	mov	r0, r3
 8002876:	f004 fe6c 	bl	8007552 <osThreadTerminate>

			  ThreadId[i] = NULL;
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <StartTcpServerTask+0x134>)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2100      	movs	r1, #0
 8002880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			  PRINTF_MUTEX_LOCK();
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <StartTcpServerTask+0x12c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800288c:	4618      	mov	r0, r3
 800288e:	f004 ff19 	bl	80076c4 <osMutexWait>
			  TCP_SERVER_PRINTF("(1)Thread[%d] %p terminated\n",i, ThreadId[i]);
			  PRINTF_MUTEX_UNLOCK();
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <StartTcpServerTask+0x12c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 ff62 	bl	8007760 <osMutexRelease>
		  }
		  //create a new thread
		  ThreadId[i] = osThreadCreate (Servers[i], &accept_fd);
 800289c:	4a1b      	ldr	r2, [pc, #108]	; (800290c <StartTcpServerTask+0x138>)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	f107 0210 	add.w	r2, r7, #16
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 fe23 	bl	80074f6 <osThreadCreate>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4915      	ldr	r1, [pc, #84]	; (8002908 <StartTcpServerTask+0x134>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  PRINTF_MUTEX_LOCK();
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <StartTcpServerTask+0x12c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fefe 	bl	80076c4 <osMutexWait>
		  TCP_SERVER_PRINTF("(1)Thread[%d] %p (fd = %d) created\n",i, ThreadId[i], accept_fd);
		  PRINTF_MUTEX_UNLOCK();
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <StartTcpServerTask+0x12c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f004 ff47 	bl	8007760 <osMutexRelease>

		  if (++i > 4) {
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d901      	bls.n	80028e2 <StartTcpServerTask+0x10e>
			  i = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
		  }

		  THREAD_MUTEX_UNLOCK();
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <StartTcpServerTask+0x130>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 ff3a 	bl	8007760 <osMutexRelease>
		  bzero(&client_addr, sizeof(client_addr));
 80028ec:	e781      	b.n	80027f2 <StartTcpServerTask+0x1e>
		return;
 80028ee:	bf00      	nop

	}
}
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200002c8 	.word	0x200002c8
 80028fc:	200002d8 	.word	0x200002d8
 8002900:	20014550 	.word	0x20014550
 8002904:	2001454c 	.word	0x2001454c
 8002908:	200002e0 	.word	0x200002e0
 800290c:	20000014 	.word	0x20000014

08002910 <ServerThread>:

void ServerThread(void const * argument)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	int accept_fd = *((int *)argument);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	613b      	str	r3, [r7, #16]

	PRINTF_MUTEX_LOCK();
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <ServerThread+0xb8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002926:	4618      	mov	r0, r3
 8002928:	f004 fecc 	bl	80076c4 <osMutexWait>
	TCP_SERVER_PRINTF("(2)Thread (fd = %d) started\n", accept_fd);
	PRINTF_MUTEX_UNLOCK();
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <ServerThread+0xb8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f004 ff15 	bl	8007760 <osMutexRelease>

#if defined(USE_HTTP_SERVER) || !defined(USE_TCP_SERVER)
		PRINTF_MUTEX_LOCK();
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <ServerThread+0xb8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800293e:	4618      	mov	r0, r3
 8002940:	f004 fec0 	bl	80076c4 <osMutexWait>
		http_status_t status = http_server_handler(accept_fd);
 8002944:	6938      	ldr	r0, [r7, #16]
 8002946:	f7ff fb59 	bl	8001ffc <http_server_handler>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
		if (status != HTTP_OK)
		{
			TCP_SERVER_PRINTF("http_server_handler() error: %d\n", status);
		}
		PRINTF_MUTEX_UNLOCK();
 800294e:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <ServerThread+0xb8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f004 ff04 	bl	8007760 <osMutexRelease>
			}
		}
		close(accept_fd);
#endif

		osThreadId id = osThreadGetId ();
 8002958:	f004 fdf4 	bl	8007544 <osThreadGetId>
 800295c:	60b8      	str	r0, [r7, #8]

		THREAD_MUTEX_LOCK();
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <ServerThread+0xbc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002966:	4618      	mov	r0, r3
 8002968:	f004 feac 	bl	80076c4 <osMutexWait>

		for(size_t i = 0; i < 5; i++)
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	e01b      	b.n	80029aa <ServerThread+0x9a>
		{
		  if (ThreadId[i] == id) {
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <ServerThread+0xc0>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d111      	bne.n	80029a4 <ServerThread+0x94>

			  PRINTF_MUTEX_LOCK();
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <ServerThread+0xb8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fe9b 	bl	80076c4 <osMutexWait>
			  TCP_SERVER_PRINTF("(2)Thread[%d] %p (fd = %d) finished\n", i, ThreadId[i], accept_fd);
			  PRINTF_MUTEX_UNLOCK();
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <ServerThread+0xb8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f004 fee4 	bl	8007760 <osMutexRelease>

			  ThreadId[i] = NULL;
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <ServerThread+0xc0>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2100      	movs	r1, #0
 800299e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			  break;
 80029a2:	e005      	b.n	80029b0 <ServerThread+0xa0>
		for(size_t i = 0; i < 5; i++)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3301      	adds	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d9e0      	bls.n	8002972 <ServerThread+0x62>
		  }
		}

		THREAD_MUTEX_UNLOCK();
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <ServerThread+0xbc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f004 fed3 	bl	8007760 <osMutexRelease>

		osThreadTerminate(NULL);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f004 fdc9 	bl	8007552 <osThreadTerminate>
}
 80029c0:	bf00      	nop
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20014550 	.word	0x20014550
 80029cc:	2001454c 	.word	0x2001454c
 80029d0:	200002e0 	.word	0x200002e0

080029d4 <udpServerInit>:
 * static struct sockaddr_in client2_addr;
 * static int socket2_fd;
 */

static int udpServerInit(uint16_t portnum)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	80fb      	strh	r3, [r7, #6]
	uint16_t port;
	int fd = socket(AF_INET, SOCK_DGRAM, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2102      	movs	r1, #2
 80029e2:	2002      	movs	r0, #2
 80029e4:	f00b fcb0 	bl	800e348 <lwip_socket>
 80029e8:	60f8      	str	r0, [r7, #12]
	if (fd == -1) {
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f0:	d10a      	bne.n	8002a08 <udpServerInit+0x34>
		UDP_SERVER_PRINTF("socket() error\n");
 80029f2:	2230      	movs	r2, #48	; 0x30
 80029f4:	4922      	ldr	r1, [pc, #136]	; (8002a80 <udpServerInit+0xac>)
 80029f6:	4823      	ldr	r0, [pc, #140]	; (8002a84 <udpServerInit+0xb0>)
 80029f8:	f01c f840 	bl	801ea7c <iprintf>
 80029fc:	4822      	ldr	r0, [pc, #136]	; (8002a88 <udpServerInit+0xb4>)
 80029fe:	f01c f8c3 	bl	801eb88 <puts>
		return -1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a06:	e037      	b.n	8002a78 <udpServerInit+0xa4>
	}

	port = htons((uint16_t)portnum);
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f00c fbce 	bl	800f1ac <lwip_htons>
 8002a10:	4603      	mov	r3, r0
 8002a12:	817b      	strh	r3, [r7, #10]

	bzero(&serv_addr, sizeof(serv_addr));
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <udpServerInit+0xb8>)
 8002a16:	461a      	mov	r2, r3
 8002a18:	2300      	movs	r3, #0
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	6053      	str	r3, [r2, #4]
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	60d3      	str	r3, [r2, #12]

	serv_addr.sin_family = AF_INET;
 8002a22:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <udpServerInit+0xb8>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	705a      	strb	r2, [r3, #1]
	serv_addr.sin_addr.s_addr = INADDR_ANY;
 8002a28:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <udpServerInit+0xb8>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	605a      	str	r2, [r3, #4]
	serv_addr.sin_port = port;
 8002a2e:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <udpServerInit+0xb8>)
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	8053      	strh	r3, [r2, #2]

	if(bind(fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))==-1) {
 8002a34:	2210      	movs	r2, #16
 8002a36:	4915      	ldr	r1, [pc, #84]	; (8002a8c <udpServerInit+0xb8>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f00a feb1 	bl	800d7a0 <lwip_bind>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a44:	d10d      	bne.n	8002a62 <udpServerInit+0x8e>
		UDP_SERVER_PRINTF("bind() error\n");
 8002a46:	223d      	movs	r2, #61	; 0x3d
 8002a48:	490d      	ldr	r1, [pc, #52]	; (8002a80 <udpServerInit+0xac>)
 8002a4a:	480e      	ldr	r0, [pc, #56]	; (8002a84 <udpServerInit+0xb0>)
 8002a4c:	f01c f816 	bl	801ea7c <iprintf>
 8002a50:	480f      	ldr	r0, [pc, #60]	; (8002a90 <udpServerInit+0xbc>)
 8002a52:	f01c f899 	bl	801eb88 <puts>
		close(fd);
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f00a ff10 	bl	800d87c <lwip_close>
		return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a60:	e00a      	b.n	8002a78 <udpServerInit+0xa4>
	}

	UDP_SERVER_PRINTF("UDP Server is bound to port %d\n", portnum);
 8002a62:	2242      	movs	r2, #66	; 0x42
 8002a64:	4906      	ldr	r1, [pc, #24]	; (8002a80 <udpServerInit+0xac>)
 8002a66:	4807      	ldr	r0, [pc, #28]	; (8002a84 <udpServerInit+0xb0>)
 8002a68:	f01c f808 	bl	801ea7c <iprintf>
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4808      	ldr	r0, [pc, #32]	; (8002a94 <udpServerInit+0xc0>)
 8002a72:	f01c f803 	bl	801ea7c <iprintf>

	return fd;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	080264dc 	.word	0x080264dc
 8002a84:	08022398 	.word	0x08022398
 8002a88:	080223b4 	.word	0x080223b4
 8002a8c:	200002f4 	.word	0x200002f4
 8002a90:	080223c4 	.word	0x080223c4
 8002a94:	080223d4 	.word	0x080223d4

08002a98 <led_status_handler>:
	COMMAND_ERR_ARGUMENT = -7,
	COMMAND_OK = 0
}command_error_t;

static command_error_t led_status_handler(const uint8_t * buffer, size_t len)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]


	return COMMAND_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <gpio_command_handler>:
/*
 * Parameters:
 * buffer - a pointer to the input buffer
 * len - buffer length
 **/
static command_error_t gpio_command_handler(const uint8_t * buffer, size_t len){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]

	int pin_state;
	int pin_num;
	sscanf((const char *)buffer, "GPIOD%d=%d", &pin_num, &pin_state);
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	f107 0208 	add.w	r2, r7, #8
 8002ac2:	4917      	ldr	r1, [pc, #92]	; (8002b20 <gpio_command_handler+0x70>)
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f01c f975 	bl	801edb4 <siscanf>
	if(buffer == 0 || len ==0 || len > CMD_BUFFER_MAX_LEN){
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <gpio_command_handler+0x2c>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <gpio_command_handler+0x2c>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d902      	bls.n	8002ae2 <gpio_command_handler+0x32>
		return COMMAND_ERR_WRONG_FORMAT;
 8002adc:	f06f 0301 	mvn.w	r3, #1
 8002ae0:	e01a      	b.n	8002b18 <gpio_command_handler+0x68>
	}
	if(pin_num < 12 || pin_num > 15){
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b0b      	cmp	r3, #11
 8002ae6:	dd02      	ble.n	8002aee <gpio_command_handler+0x3e>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	dd02      	ble.n	8002af4 <gpio_command_handler+0x44>
		return COMMAND_ERR_GPIO_PIN;
 8002aee:	f06f 0305 	mvn.w	r3, #5
 8002af2:	e011      	b.n	8002b18 <gpio_command_handler+0x68>
	}
	if(pin_state != 0 || pin_state != 1){
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <gpio_command_handler+0x50>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d002      	beq.n	8002b06 <gpio_command_handler+0x56>
		return COMMAND_UNKNOWN_ERROR;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b04:	e008      	b.n	8002b18 <gpio_command_handler+0x68>
	} else {
		HAL_GPIO_WritePin(GPIOD, pin_num, pin_state);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4804      	ldr	r0, [pc, #16]	; (8002b24 <gpio_command_handler+0x74>)
 8002b12:	f002 fc3f 	bl	8005394 <HAL_GPIO_WritePin>
	}
	return COMMAND_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	080223f4 	.word	0x080223f4
 8002b24:	40020c00 	.word	0x40020c00

08002b28 <StartUdpServerTask>:

void StartUdpServerTask(void const * argument)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b0a4      	sub	sp, #144	; 0x90
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	6078      	str	r0, [r7, #4]
	int addr_len;
	int addr2_len;

	osDelay(5000);// wait 5 sec to init lwip stack
 8002b30:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b34:	f004 fd19 	bl	800756a <osDelay>

	if((socket_fd = udpServerInit(PORTNUM)) < 0) {
 8002b38:	f241 602e 	movw	r0, #5678	; 0x162e
 8002b3c:	f7ff ff4a 	bl	80029d4 <udpServerInit>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4ab2      	ldr	r2, [pc, #712]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4bb1      	ldr	r3, [pc, #708]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	da08      	bge.n	8002b60 <StartUdpServerTask+0x38>
		UDP_SERVER_PRINTF("udpServerInit(PORTNUM) error\n");
 8002b4e:	2279      	movs	r2, #121	; 0x79
 8002b50:	49af      	ldr	r1, [pc, #700]	; (8002e10 <StartUdpServerTask+0x2e8>)
 8002b52:	48b0      	ldr	r0, [pc, #704]	; (8002e14 <StartUdpServerTask+0x2ec>)
 8002b54:	f01b ff92 	bl	801ea7c <iprintf>
 8002b58:	48af      	ldr	r0, [pc, #700]	; (8002e18 <StartUdpServerTask+0x2f0>)
 8002b5a:	f01c f815 	bl	801eb88 <puts>
		return;
 8002b5e:	e199      	b.n	8002e94 <StartUdpServerTask+0x36c>
	}

	if((socket2_fd = udpServerInit(PORTNUM2)) < 0) {
 8002b60:	f240 40d2 	movw	r0, #1234	; 0x4d2
 8002b64:	f7ff ff36 	bl	80029d4 <udpServerInit>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4aac      	ldr	r2, [pc, #688]	; (8002e1c <StartUdpServerTask+0x2f4>)
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4bab      	ldr	r3, [pc, #684]	; (8002e1c <StartUdpServerTask+0x2f4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	da08      	bge.n	8002b88 <StartUdpServerTask+0x60>
		UDP_SERVER_PRINTF("udpServerInit(PORTNUM2) error\n");
 8002b76:	227e      	movs	r2, #126	; 0x7e
 8002b78:	49a5      	ldr	r1, [pc, #660]	; (8002e10 <StartUdpServerTask+0x2e8>)
 8002b7a:	48a6      	ldr	r0, [pc, #664]	; (8002e14 <StartUdpServerTask+0x2ec>)
 8002b7c:	f01b ff7e 	bl	801ea7c <iprintf>
 8002b80:	48a7      	ldr	r0, [pc, #668]	; (8002e20 <StartUdpServerTask+0x2f8>)
 8002b82:	f01c f801 	bl	801eb88 <puts>
		return;
 8002b86:	e185      	b.n	8002e94 <StartUdpServerTask+0x36c>
	}

	for(;;)
	{
		bzero(&client_addr, sizeof(client_addr));
 8002b88:	4ba6      	ldr	r3, [pc, #664]	; (8002e24 <StartUdpServerTask+0x2fc>)
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	6053      	str	r3, [r2, #4]
 8002b92:	6093      	str	r3, [r2, #8]
 8002b94:	60d3      	str	r3, [r2, #12]
		addr_len = sizeof(client_addr);
 8002b96:	2310      	movs	r3, #16
 8002b98:	667b      	str	r3, [r7, #100]	; 0x64
		bzero(&client2_addr, sizeof(client2_addr));
 8002b9a:	4ba3      	ldr	r3, [pc, #652]	; (8002e28 <StartUdpServerTask+0x300>)
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	6053      	str	r3, [r2, #4]
 8002ba4:	6093      	str	r3, [r2, #8]
 8002ba6:	60d3      	str	r3, [r2, #12]
		addr2_len = sizeof(client2_addr);
 8002ba8:	2310      	movs	r3, #16
 8002baa:	663b      	str	r3, [r7, #96]	; 0x60
		struct timeval tv;
		int retval;

		/* Watch stdin (fd 0) to see when it has input. */

		FD_ZERO(&rfds);
 8002bac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bba:	e00b      	b.n	8002bd4 <StartUdpServerTask+0xac>
 8002bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd8:	2b07      	cmp	r3, #7
 8002bda:	d9ef      	bls.n	8002bbc <StartUdpServerTask+0x94>
		FD_SET(socket_fd, &rfds);
 8002bdc:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	095a      	lsrs	r2, r3, #5
 8002be2:	0093      	lsls	r3, r2, #2
 8002be4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002be8:	440b      	add	r3, r1
 8002bea:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002bee:	4987      	ldr	r1, [pc, #540]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002bf0:	6809      	ldr	r1, [r1, #0]
 8002bf2:	f001 011f 	and.w	r1, r1, #31
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	fa00 f101 	lsl.w	r1, r0, r1
 8002bfc:	4319      	orrs	r1, r3
 8002bfe:	0093      	lsls	r3, r2, #2
 8002c00:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c04:	4413      	add	r3, r2
 8002c06:	f843 1c30 	str.w	r1, [r3, #-48]
		FD_SET(socket2_fd, &rfds);
 8002c0a:	4b84      	ldr	r3, [pc, #528]	; (8002e1c <StartUdpServerTask+0x2f4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	095a      	lsrs	r2, r3, #5
 8002c10:	0093      	lsls	r3, r2, #2
 8002c12:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002c16:	440b      	add	r3, r1
 8002c18:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002c1c:	497f      	ldr	r1, [pc, #508]	; (8002e1c <StartUdpServerTask+0x2f4>)
 8002c1e:	6809      	ldr	r1, [r1, #0]
 8002c20:	f001 011f 	and.w	r1, r1, #31
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f101 	lsl.w	r1, r0, r1
 8002c2a:	4319      	orrs	r1, r3
 8002c2c:	0093      	lsls	r3, r2, #2
 8002c2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c32:	4413      	add	r3, r2
 8002c34:	f843 1c30 	str.w	r1, [r3, #-48]
		// TODO add the second socket descriptor
		/* Wait up to five seconds. */

		tv.tv_sec = 5;
 8002c38:	f04f 0205 	mov.w	r2, #5
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tv.tv_usec = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	653b      	str	r3, [r7, #80]	; 0x50

		retval = select(FD_SETSIZE, &rfds, NULL, NULL, &tv);
 8002c48:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002c4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2300      	movs	r3, #0
 8002c54:	2200      	movs	r2, #0
 8002c56:	2040      	movs	r0, #64	; 0x40
 8002c58:	f00b fd92 	bl	800e780 <lwip_select>
 8002c5c:	67f8      	str	r0, [r7, #124]	; 0x7c
		/* Don't rely on the value of tv now! */

		if (retval == -1)
 8002c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c64:	d10a      	bne.n	8002c7c <StartUdpServerTask+0x154>
		{
			close(socket_fd);
 8002c66:	4b69      	ldr	r3, [pc, #420]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f00a fe06 	bl	800d87c <lwip_close>
			close(socket2_fd);
 8002c70:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <StartUdpServerTask+0x2f4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f00a fe01 	bl	800d87c <lwip_close>
 8002c7a:	e10b      	b.n	8002e94 <StartUdpServerTask+0x36c>
			break;
		}
		else if (retval)
 8002c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80ff 	beq.w	8002e82 <StartUdpServerTask+0x35a>
		{
			uint8_t buffer[CMD_BUFFER_MAX_LEN];
			uint8_t buffer2[CMD_BUFFER_MAX_LEN];
			const size_t buf_size = sizeof(buffer);
 8002c84:	2320      	movs	r3, #32
 8002c86:	67bb      	str	r3, [r7, #120]	; 0x78
			const size_t buf_size2 = sizeof(buffer2);
 8002c88:	2320      	movs	r3, #32
 8002c8a:	677b      	str	r3, [r7, #116]	; 0x74
			command_error_t  r;
			ssize_t received;
			ssize_t received2;

			if (FD_ISSET(socket_fd, &rfds))
 8002c8c:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c98:	4413      	add	r3, r2
 8002c9a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002c9e:	4a5b      	ldr	r2, [pc, #364]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	f002 021f 	and.w	r2, r2, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d054      	beq.n	8002d5c <StartUdpServerTask+0x234>
			{
				received = recvfrom(socket_fd, buffer, buf_size, MSG_DONTWAIT, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len);
 8002cb2:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	f107 0108 	add.w	r1, r7, #8
 8002cba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	4b58      	ldr	r3, [pc, #352]	; (8002e24 <StartUdpServerTask+0x2fc>)
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cc8:	f00b f986 	bl	800dfd8 <lwip_recvfrom>
 8002ccc:	6738      	str	r0, [r7, #112]	; 0x70

				if (received > 0)
 8002cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	dd43      	ble.n	8002d5c <StartUdpServerTask+0x234>
				{
					if ( (r = led_status_handler(buffer, received)) != COMMAND_OK)
 8002cd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fedb 	bl	8002a98 <led_status_handler>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002ce8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d016      	beq.n	8002d1e <StartUdpServerTask+0x1f6>
					{
						UDP_SERVER_PRINTF("command_handler() returned error code = %d\n", (int)r);
 8002cf0:	22b4      	movs	r2, #180	; 0xb4
 8002cf2:	4947      	ldr	r1, [pc, #284]	; (8002e10 <StartUdpServerTask+0x2e8>)
 8002cf4:	4847      	ldr	r0, [pc, #284]	; (8002e14 <StartUdpServerTask+0x2ec>)
 8002cf6:	f01b fec1 	bl	801ea7c <iprintf>
 8002cfa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002cfe:	4619      	mov	r1, r3
 8002d00:	484a      	ldr	r0, [pc, #296]	; (8002e2c <StartUdpServerTask+0x304>)
 8002d02:	f01b febb 	bl	801ea7c <iprintf>
						if (sendto(socket_fd, "error\n", sizeof("error\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <StartUdpServerTask+0x2fc>)
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2308      	movs	r3, #8
 8002d14:	2207      	movs	r2, #7
 8002d16:	4946      	ldr	r1, [pc, #280]	; (8002e30 <StartUdpServerTask+0x308>)
 8002d18:	f00b fa64 	bl	800e1e4 <lwip_sendto>
 8002d1c:	e01e      	b.n	8002d5c <StartUdpServerTask+0x234>

						}
					}
					else
					{
						UDP_SERVER_PRINTF("command was handles successfully\n");
 8002d1e:	22bc      	movs	r2, #188	; 0xbc
 8002d20:	493b      	ldr	r1, [pc, #236]	; (8002e10 <StartUdpServerTask+0x2e8>)
 8002d22:	483c      	ldr	r0, [pc, #240]	; (8002e14 <StartUdpServerTask+0x2ec>)
 8002d24:	f01b feaa 	bl	801ea7c <iprintf>
 8002d28:	4842      	ldr	r0, [pc, #264]	; (8002e34 <StartUdpServerTask+0x30c>)
 8002d2a:	f01b ff2d 	bl	801eb88 <puts>
						if (sendto(socket_fd, "OK\n", sizeof("OK\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 8002d2e:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <StartUdpServerTask+0x2e4>)
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <StartUdpServerTask+0x2fc>)
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	493e      	ldr	r1, [pc, #248]	; (8002e38 <StartUdpServerTask+0x310>)
 8002d40:	f00b fa50 	bl	800e1e4 <lwip_sendto>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d4a:	d107      	bne.n	8002d5c <StartUdpServerTask+0x234>
						{
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 8002d4c:	22bf      	movs	r2, #191	; 0xbf
 8002d4e:	4930      	ldr	r1, [pc, #192]	; (8002e10 <StartUdpServerTask+0x2e8>)
 8002d50:	4830      	ldr	r0, [pc, #192]	; (8002e14 <StartUdpServerTask+0x2ec>)
 8002d52:	f01b fe93 	bl	801ea7c <iprintf>
 8002d56:	4839      	ldr	r0, [pc, #228]	; (8002e3c <StartUdpServerTask+0x314>)
 8002d58:	f01b ff16 	bl	801eb88 <puts>
						}
					}
				}
			}
			if (FD_ISSET(socket2_fd, &rfds)){
 8002d5c:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <StartUdpServerTask+0x2f4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d68:	4413      	add	r3, r2
 8002d6a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002d6e:	4a2b      	ldr	r2, [pc, #172]	; (8002e1c <StartUdpServerTask+0x2f4>)
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	f002 021f 	and.w	r2, r2, #31
 8002d76:	2101      	movs	r1, #1
 8002d78:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f43f af02 	beq.w	8002b88 <StartUdpServerTask+0x60>
				received2 = recvfrom(socket2_fd, buffer2, buf_size2, MSG_DONTWAIT, (struct sockaddr *)&client2_addr, (socklen_t *)&addr2_len);
 8002d84:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <StartUdpServerTask+0x2f4>)
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <StartUdpServerTask+0x300>)
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2308      	movs	r3, #8
 8002d98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d9a:	f00b f91d 	bl	800dfd8 <lwip_recvfrom>
 8002d9e:	66b8      	str	r0, [r7, #104]	; 0x68
				if (received2 > 0){
 8002da0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f77f aef0 	ble.w	8002b88 <StartUdpServerTask+0x60>
					if ( (r = gpio_command_handler(buffer2, received2)) != COMMAND_OK){
 8002da8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fe7d 	bl	8002ab0 <gpio_command_handler>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002dbc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03d      	beq.n	8002e40 <StartUdpServerTask+0x318>
						UDP_SERVER_PRINTF("command_handler() returned error code = %d\n", (int)r);
 8002dc4:	22c8      	movs	r2, #200	; 0xc8
 8002dc6:	4912      	ldr	r1, [pc, #72]	; (8002e10 <StartUdpServerTask+0x2e8>)
 8002dc8:	4812      	ldr	r0, [pc, #72]	; (8002e14 <StartUdpServerTask+0x2ec>)
 8002dca:	f01b fe57 	bl	801ea7c <iprintf>
 8002dce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4815      	ldr	r0, [pc, #84]	; (8002e2c <StartUdpServerTask+0x304>)
 8002dd6:	f01b fe51 	bl	801ea7c <iprintf>
						if (sendto(socket2_fd, "error\n", sizeof("error\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client2_addr, addr2_len) == -1){
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <StartUdpServerTask+0x2f4>)
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <StartUdpServerTask+0x300>)
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2308      	movs	r3, #8
 8002de8:	2207      	movs	r2, #7
 8002dea:	4911      	ldr	r1, [pc, #68]	; (8002e30 <StartUdpServerTask+0x308>)
 8002dec:	f00b f9fa 	bl	800e1e4 <lwip_sendto>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df6:	f47f aec7 	bne.w	8002b88 <StartUdpServerTask+0x60>
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 8002dfa:	22ca      	movs	r2, #202	; 0xca
 8002dfc:	4904      	ldr	r1, [pc, #16]	; (8002e10 <StartUdpServerTask+0x2e8>)
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <StartUdpServerTask+0x2ec>)
 8002e00:	f01b fe3c 	bl	801ea7c <iprintf>
 8002e04:	480d      	ldr	r0, [pc, #52]	; (8002e3c <StartUdpServerTask+0x314>)
 8002e06:	f01b febf 	bl	801eb88 <puts>
 8002e0a:	e6bd      	b.n	8002b88 <StartUdpServerTask+0x60>
 8002e0c:	20000314 	.word	0x20000314
 8002e10:	080264ec 	.word	0x080264ec
 8002e14:	08022398 	.word	0x08022398
 8002e18:	08022400 	.word	0x08022400
 8002e1c:	20000328 	.word	0x20000328
 8002e20:	08022420 	.word	0x08022420
 8002e24:	20000304 	.word	0x20000304
 8002e28:	20000318 	.word	0x20000318
 8002e2c:	08022440 	.word	0x08022440
 8002e30:	0802246c 	.word	0x0802246c
 8002e34:	08022474 	.word	0x08022474
 8002e38:	08022498 	.word	0x08022498
 8002e3c:	0802249c 	.word	0x0802249c
						}
					}
					else{

						UDP_SERVER_PRINTF("command was handles successfully\n");
 8002e40:	22cf      	movs	r2, #207	; 0xcf
 8002e42:	4916      	ldr	r1, [pc, #88]	; (8002e9c <StartUdpServerTask+0x374>)
 8002e44:	4816      	ldr	r0, [pc, #88]	; (8002ea0 <StartUdpServerTask+0x378>)
 8002e46:	f01b fe19 	bl	801ea7c <iprintf>
 8002e4a:	4816      	ldr	r0, [pc, #88]	; (8002ea4 <StartUdpServerTask+0x37c>)
 8002e4c:	f01b fe9c 	bl	801eb88 <puts>
						if (sendto(socket2_fd, "OK\n", sizeof("OK\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client2_addr, addr2_len) == -1){
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <StartUdpServerTask+0x380>)
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <StartUdpServerTask+0x384>)
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	2204      	movs	r2, #4
 8002e60:	4913      	ldr	r1, [pc, #76]	; (8002eb0 <StartUdpServerTask+0x388>)
 8002e62:	f00b f9bf 	bl	800e1e4 <lwip_sendto>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e6c:	f47f ae8c 	bne.w	8002b88 <StartUdpServerTask+0x60>
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 8002e70:	22d1      	movs	r2, #209	; 0xd1
 8002e72:	490a      	ldr	r1, [pc, #40]	; (8002e9c <StartUdpServerTask+0x374>)
 8002e74:	480a      	ldr	r0, [pc, #40]	; (8002ea0 <StartUdpServerTask+0x378>)
 8002e76:	f01b fe01 	bl	801ea7c <iprintf>
 8002e7a:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <StartUdpServerTask+0x38c>)
 8002e7c:	f01b fe84 	bl	801eb88 <puts>
 8002e80:	e682      	b.n	8002b88 <StartUdpServerTask+0x60>
			}
			// TODO Check activity on the second socket descriptor, implement the handler
		}
		else
		{
			UDP_SERVER_PRINTF("No data within five seconds.\n");
 8002e82:	22dc      	movs	r2, #220	; 0xdc
 8002e84:	4905      	ldr	r1, [pc, #20]	; (8002e9c <StartUdpServerTask+0x374>)
 8002e86:	4806      	ldr	r0, [pc, #24]	; (8002ea0 <StartUdpServerTask+0x378>)
 8002e88:	f01b fdf8 	bl	801ea7c <iprintf>
 8002e8c:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <StartUdpServerTask+0x390>)
 8002e8e:	f01b fe7b 	bl	801eb88 <puts>
	{
 8002e92:	e679      	b.n	8002b88 <StartUdpServerTask+0x60>
		}
	}
}
 8002e94:	3788      	adds	r7, #136	; 0x88
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	080264ec 	.word	0x080264ec
 8002ea0:	08022398 	.word	0x08022398
 8002ea4:	08022474 	.word	0x08022474
 8002ea8:	20000328 	.word	0x20000328
 8002eac:	20000318 	.word	0x20000318
 8002eb0:	08022498 	.word	0x08022498
 8002eb4:	0802249c 	.word	0x0802249c
 8002eb8:	080224b4 	.word	0x080224b4

08002ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ec2:	490e      	ldr	r1, [pc, #56]	; (8002efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec8:	e002      	b.n	8002ed0 <LoopCopyDataInit>

08002eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ece:	3304      	adds	r3, #4

08002ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed4:	d3f9      	bcc.n	8002eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ed8:	4c0b      	ldr	r4, [pc, #44]	; (8002f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002edc:	e001      	b.n	8002ee2 <LoopFillZerobss>

08002ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee0:	3204      	adds	r2, #4

08002ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee4:	d3fb      	bcc.n	8002ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ee6:	f7ff fb15 	bl	8002514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eea:	f01b f83d 	bl	801df68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eee:	f7fe f9ab 	bl	8001248 <main>
  bx  lr    
 8002ef2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002efc:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002f00:	08026bac 	.word	0x08026bac
  ldr r2, =_sbss
 8002f04:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002f08:	2001b12c 	.word	0x2001b12c

08002f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f0c:	e7fe      	b.n	8002f0c <ADC_IRQHandler>
	...

08002f10 <DWT_Init>:
#include "delay.h"

void DWT_Init(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <DWT_Init+0x2c>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <DWT_Init+0x2c>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <DWT_Init+0x30>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <DWT_Init+0x30>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <DWT_Init+0x30>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000edf0 	.word	0xe000edf0
 8002f40:	e0001000 	.word	0xe0001000

08002f44 <DWT_Delay>:

void DWT_Delay(uint32_t Delay)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	uint32_t cyclestamp = DWT->CYCCNT + Delay * (HAL_RCC_GetHCLKFreq() / 1000000);
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <DWT_Delay+0x3c>)
 8002f4e:	685c      	ldr	r4, [r3, #4]
 8002f50:	f002 feac 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <DWT_Delay+0x40>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	0c9b      	lsrs	r3, r3, #18
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	4423      	add	r3, r4
 8002f66:	60fb      	str	r3, [r7, #12]
	while (DWT->CYCCNT < cyclestamp) ;
 8002f68:	bf00      	nop
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <DWT_Delay+0x3c>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d8fa      	bhi.n	8002f6a <DWT_Delay+0x26>
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd90      	pop	{r4, r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e0001000 	.word	0xe0001000
 8002f84:	431bde83 	.word	0x431bde83

08002f88 <DWT_GetCycles>:

uint32_t DWT_GetCycles()
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
	return DWT->CYCCNT;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <DWT_GetCycles+0x14>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e0001000 	.word	0xe0001000

08002fa0 <DWT_Cycles_to_us>:

uint8_t DWT_Cycles_to_us(uint32_t cycles)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	uint32_t clock_in_MHz = (HAL_RCC_GetHCLKFreq() / 1000000);
 8002fa8:	f002 fe80 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <DWT_Cycles_to_us+0x2c>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	0c9b      	lsrs	r3, r3, #18
 8002fb6:	60fb      	str	r3, [r7, #12]
	return (uint8_t)(cycles / clock_in_MHz);
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc0:	b2db      	uxtb	r3, r3
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	431bde83 	.word	0x431bde83

08002fd0 <delay_us>:

void delay_us(uint32_t Delay)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	DWT_Delay(Delay);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ffb3 	bl	8002f44 <DWT_Delay>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <delay_ms>:

void delay_ms(uint32_t Delay)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f001 fe1a 	bl	8004c28 <HAL_Delay>
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <BSP_LED_Init+0x2e>
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	4b33      	ldr	r3, [pc, #204]	; (80030e0 <BSP_LED_Init+0xe4>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4a32      	ldr	r2, [pc, #200]	; (80030e0 <BSP_LED_Init+0xe4>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6313      	str	r3, [r2, #48]	; 0x30
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <BSP_LED_Init+0xe4>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	e034      	b.n	8003094 <BSP_LED_Init+0x98>
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10e      	bne.n	800304e <BSP_LED_Init+0x52>
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <BSP_LED_Init+0xe4>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	4a29      	ldr	r2, [pc, #164]	; (80030e0 <BSP_LED_Init+0xe4>)
 800303a:	f043 0308 	orr.w	r3, r3, #8
 800303e:	6313      	str	r3, [r2, #48]	; 0x30
 8003040:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <BSP_LED_Init+0xe4>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	e022      	b.n	8003094 <BSP_LED_Init+0x98>
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d10e      	bne.n	8003072 <BSP_LED_Init+0x76>
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <BSP_LED_Init+0xe4>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <BSP_LED_Init+0xe4>)
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	6313      	str	r3, [r2, #48]	; 0x30
 8003064:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <BSP_LED_Init+0xe4>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	e010      	b.n	8003094 <BSP_LED_Init+0x98>
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d10d      	bne.n	8003094 <BSP_LED_Init+0x98>
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <BSP_LED_Init+0xe4>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <BSP_LED_Init+0xe4>)
 8003082:	f043 0308 	orr.w	r3, r3, #8
 8003086:	6313      	str	r3, [r2, #48]	; 0x30
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <BSP_LED_Init+0xe4>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <BSP_LED_Init+0xe8>)
 8003098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800309c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309e:	2301      	movs	r3, #1
 80030a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a2:	2301      	movs	r3, #1
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80030a6:	2302      	movs	r3, #2
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <BSP_LED_Init+0xec>)
 80030ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b2:	f107 021c 	add.w	r2, r7, #28
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 febb 	bl	8004e34 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <BSP_LED_Init+0xec>)
 80030c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	4a06      	ldr	r2, [pc, #24]	; (80030e4 <BSP_LED_Init+0xe8>)
 80030ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ce:	2200      	movs	r2, #0
 80030d0:	4619      	mov	r1, r3
 80030d2:	f002 f95f 	bl	8005394 <HAL_GPIO_WritePin>
}
 80030d6:	bf00      	nop
 80030d8:	3730      	adds	r7, #48	; 0x30
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08026500 	.word	0x08026500
 80030e8:	20000028 	.word	0x20000028

080030ec <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <BSP_LED_On+0x2c>)
 80030fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	4a06      	ldr	r2, [pc, #24]	; (800311c <BSP_LED_On+0x30>)
 8003102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003106:	2201      	movs	r2, #1
 8003108:	4619      	mov	r1, r3
 800310a:	f002 f943 	bl	8005394 <HAL_GPIO_WritePin>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000028 	.word	0x20000028
 800311c:	08026500 	.word	0x08026500

08003120 <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	4a07      	ldr	r2, [pc, #28]	; (800314c <BSP_LED_Off+0x2c>)
 800312e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	4a06      	ldr	r2, [pc, #24]	; (8003150 <BSP_LED_Off+0x30>)
 8003136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800313a:	2200      	movs	r2, #0
 800313c:	4619      	mov	r1, r3
 800313e:	f002 f929 	bl	8005394 <HAL_GPIO_WritePin>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000028 	.word	0x20000028
 8003150:	08026500 	.word	0x08026500

08003154 <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	4a07      	ldr	r2, [pc, #28]	; (8003180 <BSP_LED_Toggle+0x2c>)
 8003162:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4906      	ldr	r1, [pc, #24]	; (8003184 <BSP_LED_Toggle+0x30>)
 800316a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f002 f928 	bl	80053c6 <HAL_GPIO_TogglePin>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000028 	.word	0x20000028
 8003184:	08026500 	.word	0x08026500

08003188 <dht11_set_callbacks>:
				init_read_pin_t init_read_pin_func,
				init_write_pin_t init_write_pin_func,
				read_pin_t read_pin_func,
				write_pin_t write_pin_func
			)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
	if (cb == NULL
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d011      	beq.n	80031c0 <dht11_set_callbacks+0x38>
		|| us_delay_func == NULL
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00e      	beq.n	80031c0 <dht11_set_callbacks+0x38>
		|| ms_delay_func == NULL
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00b      	beq.n	80031c0 <dht11_set_callbacks+0x38>
		|| init_read_pin_func == NULL
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <dht11_set_callbacks+0x38>
		|| init_write_pin_func == NULL
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <dht11_set_callbacks+0x38>
		|| read_pin_func == NULL
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <dht11_set_callbacks+0x38>
		|| write_pin_func == NULL)
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <dht11_set_callbacks+0x3c>
	{
		return DHT_ERR_FAULT;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e012      	b.n	80031ea <dht11_set_callbacks+0x62>
	}
	cb->callbacks.us_delay = us_delay_func;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	60da      	str	r2, [r3, #12]
	cb->callbacks.ms_delay = ms_delay_func;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	611a      	str	r2, [r3, #16]
	cb->callbacks.init_read_pin = init_read_pin_func;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	615a      	str	r2, [r3, #20]
	cb->callbacks.init_write_pin = init_write_pin_func;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	619a      	str	r2, [r3, #24]
	cb->callbacks.read_pin = read_pin_func;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	61da      	str	r2, [r3, #28]
	cb->callbacks.write_pin = write_pin_func;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	621a      	str	r2, [r3, #32]
	return DHT_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <dht11_init>:

dht_status_t dht11_init(dht11_t *cb, void *port, uint32_t pin)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
	if (cb == NULL || port == NULL)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <dht11_init+0x18>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <dht11_init+0x1c>
	{
		return DHT_ERR_FAULT;
 800320e:	2301      	movs	r3, #1
 8003210:	e030      	b.n	8003274 <dht11_init+0x7e>
	}
	cb->port = port;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	601a      	str	r2, [r3, #0]
	cb->pin = pin;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	605a      	str	r2, [r3, #4]

#if defined (STM32F407xx) && defined(USE_HAL_DRIVER)
	dht_status_t status = dht11_stm32_init(cb);
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9fe 	bl	8003620 <dht11_stm32_init>
 8003224:	4603      	mov	r3, r0
 8003226:	75fb      	strb	r3, [r7, #23]
	if (status != DHT_OK)
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <dht11_init+0x3c>
	{
		return status;
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	e020      	b.n	8003274 <dht11_init+0x7e>
	}
#endif

	/* If callbacks are not initialized */
	if (cb->callbacks.us_delay == NULL
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d013      	beq.n	8003262 <dht11_init+0x6c>
		|| cb->callbacks.ms_delay == NULL
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00f      	beq.n	8003262 <dht11_init+0x6c>
		|| cb->callbacks.init_read_pin == NULL
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <dht11_init+0x6c>
		|| cb->callbacks.init_write_pin == NULL
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <dht11_init+0x6c>
		|| cb->callbacks.read_pin == NULL
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <dht11_init+0x6c>
		|| cb->callbacks.write_pin == NULL)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <dht11_init+0x70>
	{
		return DHT_ERR_CALLBACKS;
 8003262:	2303      	movs	r3, #3
 8003264:	e006      	b.n	8003274 <dht11_init+0x7e>
	}
	/* If pin reading time is empty there will be default value */
	cb->delay += DHT11_READ_PIN_DFLT_DELAY_USEC;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	7a1b      	ldrb	r3, [r3, #8]
 800326a:	3301      	adds	r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	721a      	strb	r2, [r3, #8]
	//printf("cb->delay = %u\n", cb->delay);
	return DHT_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <wait_while_status>:

static bool wait_while_status(dht11_t *cb, size_t timeout, bool init_status)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	71fb      	strb	r3, [r7, #7]
	size_t counter = timeout / cb->delay;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	7a1b      	ldrb	r3, [r3, #8]
 800328e:	461a      	mov	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	fbb3 f3f2 	udiv	r3, r3, r2
 8003296:	617b      	str	r3, [r7, #20]
	bool status = init_status;
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	74fb      	strb	r3, [r7, #19]
	do {
		cb->callbacks.us_delay(DHT11_READ_PIN_DFLT_DELAY_USEC);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2001      	movs	r0, #1
 80032a2:	4798      	blx	r3
		status = cb->callbacks.read_pin (cb);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	4798      	blx	r3
 80032ac:	4603      	mov	r3, r0
 80032ae:	74fb      	strb	r3, [r7, #19]
	} while((status == init_status) && --counter);
 80032b0:	7cfa      	ldrb	r2, [r7, #19]
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d105      	bne.n	80032c4 <wait_while_status+0x48>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1eb      	bne.n	800329c <wait_while_status+0x20>
	return status;
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <start_condition>:

/* The first DHT11's state is START CONDITION */
static inline bool start_condition (dht11_t *cb)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	cb->callbacks.init_write_pin (cb);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
	cb->callbacks.write_pin (cb, false);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	2100      	movs	r1, #0
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
	cb->callbacks.ms_delay (DHT11_START_DELAY_MSEC);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	2014      	movs	r0, #20
 80032ee:	4798      	blx	r3
	cb->callbacks.write_pin (cb, true);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	2101      	movs	r1, #1
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
	cb->callbacks.init_read_pin (cb);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
	return (wait_while_status(cb, DHT11_START_WAIT_RESP_MAX_USEC, true) == false);
 8003302:	2201      	movs	r2, #1
 8003304:	2128      	movs	r1, #40	; 0x28
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffb8 	bl	800327c <wait_while_status>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f083 0301 	eor.w	r3, r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <read_acknowledge>:

/* The second DHT11's state is READ ACKNOWLEDGE */
static inline bool read_acknowledge (dht11_t *cb)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	wait_while_status(cb, DHT11_ACK_LOW_STATE_USEC, false);
 8003334:	2200      	movs	r2, #0
 8003336:	2150      	movs	r1, #80	; 0x50
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff9f 	bl	800327c <wait_while_status>
	return (wait_while_status(cb, DHT11_ACK_HIGHT_STATE_USEC, true) == false);
 800333e:	2201      	movs	r2, #1
 8003340:	2150      	movs	r1, #80	; 0x50
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff9a 	bl	800327c <wait_while_status>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf14      	ite	ne
 800334e:	2301      	movne	r3, #1
 8003350:	2300      	moveq	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f083 0301 	eor.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <read_data_byte>:

/* The third DHT11's state is READ DATA BYTES */
static inline bool read_data_byte (dht11_t *cb, uint8_t *data)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
	uint8_t received = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
	for(int i = 7 ; i >= 0; i--)
 8003376:	2307      	movs	r3, #7
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	e02b      	b.n	80033d4 <read_data_byte+0x6c>
	{
		wait_while_status(cb, DHT11_DATA_START_USEC, false);
 800337c:	2200      	movs	r2, #0
 800337e:	2132      	movs	r1, #50	; 0x32
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff7b 	bl	800327c <wait_while_status>
		if (wait_while_status(cb, DHT11_DATA_READ_LOW_MAX_USEC, true) == false)
 8003386:	2201      	movs	r2, #1
 8003388:	211c      	movs	r1, #28
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff76 	bl	800327c <wait_while_status>
 8003390:	4603      	mov	r3, r0
 8003392:	f083 0301 	eor.w	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d117      	bne.n	80033cc <read_data_byte+0x64>
		{
			continue;
		}
		if (wait_while_status(cb, DHT11_DATA_READ_HIGHT_USEC, true) == false)
 800339c:	2201      	movs	r2, #1
 800339e:	2146      	movs	r1, #70	; 0x46
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ff6b 	bl	800327c <wait_while_status>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f083 0301 	eor.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <read_data_byte+0x60>
		{
			received |= (1 << i);
 80033b2:	2201      	movs	r2, #1
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	b25a      	sxtb	r2, r3
 80033bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	73fb      	strb	r3, [r7, #15]
 80033c6:	e002      	b.n	80033ce <read_data_byte+0x66>
		}
		else
		{
			return false;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e00a      	b.n	80033e2 <read_data_byte+0x7a>
			continue;
 80033cc:	bf00      	nop
	for(int i = 7 ; i >= 0; i--)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	dad0      	bge.n	800337c <read_data_byte+0x14>
		}
	}
	*data = received;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	701a      	strb	r2, [r3, #0]
	return true;
 80033e0:	2301      	movs	r3, #1
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <calc_crc>:

static uint8_t calc_crc(uint8_t *data)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 0; i < 4; i++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	e009      	b.n	8003410 <calc_crc+0x26>
	{
		crc += data[i];
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4413      	add	r3, r2
 8003402:	781a      	ldrb	r2, [r3, #0]
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	4413      	add	r3, r2
 8003408:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 0; i < 4; i++)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3301      	adds	r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d9f2      	bls.n	80033fc <calc_crc+0x12>
	}
	return crc;
 8003416:	7bfb      	ldrb	r3, [r7, #15]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <dht11_read>:

dht_status_t dht11_read(dht11_t *cb, uint8_t *data, size_t size)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
	uint8_t response[DHT11_DATA_BYTES];
	if (cb == NULL
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <dht11_read+0x18>
		|| data == NULL)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <dht11_read+0x1c>
	{
		return DHT_ERR_FAULT;
 800343c:	2301      	movs	r3, #1
 800343e:	e044      	b.n	80034ca <dht11_read+0xa6>
	}
	if (size < DHT11_DATA_SIZE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d801      	bhi.n	800344a <dht11_read+0x26>
	{
		return DHT_ERR_INVAL;
 8003446:	2302      	movs	r3, #2
 8003448:	e03f      	b.n	80034ca <dht11_read+0xa6>
	}
	if (!start_condition (cb))
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff ff3f 	bl	80032ce <start_condition>
 8003450:	4603      	mov	r3, r0
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <dht11_read+0x3c>
	{
		return DHT_ERR_START_CONDITION;
 800345c:	2304      	movs	r3, #4
 800345e:	e034      	b.n	80034ca <dht11_read+0xa6>
	}
	if (!read_acknowledge (cb))
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7ff ff63 	bl	800332c <read_acknowledge>
 8003466:	4603      	mov	r3, r0
 8003468:	f083 0301 	eor.w	r3, r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <dht11_read+0x52>
	{
		return DHT_ERR_READ_ACK;
 8003472:	2305      	movs	r3, #5
 8003474:	e029      	b.n	80034ca <dht11_read+0xa6>
	}
	for (size_t i = 0; i < DHT11_DATA_BYTES; i++)
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e012      	b.n	80034a2 <dht11_read+0x7e>
	{
		if (!read_data_byte (cb, &response[i]))
 800347c:	f107 0214 	add.w	r2, r7, #20
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	4619      	mov	r1, r3
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff ff6e 	bl	8003368 <read_data_byte>
 800348c:	4603      	mov	r3, r0
 800348e:	f083 0301 	eor.w	r3, r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <dht11_read+0x78>
		{
			return DHT_ERR_READ_DATA;
 8003498:	2306      	movs	r3, #6
 800349a:	e016      	b.n	80034ca <dht11_read+0xa6>
	for (size_t i = 0; i < DHT11_DATA_BYTES; i++)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	3301      	adds	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d9e9      	bls.n	800347c <dht11_read+0x58>
		}
	}
	uint8_t crc = calc_crc(response);
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff9c 	bl	80033ea <calc_crc>
 80034b2:	4603      	mov	r3, r0
 80034b4:	76fb      	strb	r3, [r7, #27]
	if (crc != response[4])
 80034b6:	7e3b      	ldrb	r3, [r7, #24]
 80034b8:	7efa      	ldrb	r2, [r7, #27]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <dht11_read+0x9e>
	{
		return DHT_ERR_CRC;
 80034be:	2307      	movs	r3, #7
 80034c0:	e003      	b.n	80034ca <dht11_read+0xa6>
 80034c2:	697a      	ldr	r2, [r7, #20]
	}
	memcpy(data, response, DHT11_DATA_SIZE);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	601a      	str	r2, [r3, #0]
	return DHT_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <dht11_to_str>:

dht_status_t dht11_to_str(uint8_t *data, size_t size, char *humidity, char *temperature)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
	if (data == NULL)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <dht11_to_str+0x18>
	{
		return DHT_ERR_FAULT;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e026      	b.n	800353a <dht11_to_str+0x66>
	}
	if (size < DHT11_DATA_SIZE)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d801      	bhi.n	80034f6 <dht11_to_str+0x22>
	{
		return DHT_ERR_INVAL;
 80034f2:	2302      	movs	r3, #2
 80034f4:	e021      	b.n	800353a <dht11_to_str+0x66>
	}
	if (humidity)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00c      	beq.n	8003516 <dht11_to_str+0x42>
		snprintf(humidity, DHT11_HUMIDITY_STR_SIZE, "%02u.%01u", data[0], data[1]);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3301      	adds	r3, #1
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <dht11_to_str+0x70>)
 800350e:	2105      	movs	r1, #5
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f01b fbfb 	bl	801ed0c <sniprintf>
	if (temperature)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <dht11_to_str+0x64>
		snprintf(temperature, DHT11_TEMPERATURE_STR_SIZE, "%02u.%01u", data[2], data[3]);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	3302      	adds	r3, #2
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3303      	adds	r3, #3
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	4a05      	ldr	r2, [pc, #20]	; (8003544 <dht11_to_str+0x70>)
 8003530:	2105      	movs	r1, #5
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f01b fbea 	bl	801ed0c <sniprintf>
	return DHT_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	080224d4 	.word	0x080224d4

08003548 <HAL_init_read_pin>:
	uint32_t clock_in_MHz = (HAL_RCC_GetHCLKFreq() / 1000000);
	return (uint8_t)(cycles / clock_in_MHz);
}
#endif
static void HAL_init_read_pin(dht11_t *cb)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = (uint16_t)cb->pin;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	b29b      	uxth	r3, r3
 8003566:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init((GPIO_TypeDef *)cb->port, &GPIO_InitStruct);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f107 020c 	add.w	r2, r7, #12
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fc5a 	bl	8004e34 <HAL_GPIO_Init>
}
 8003580:	bf00      	nop
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_init_write_pin>:

static void HAL_init_write_pin(dht11_t *cb)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = (uint16_t)cb->pin;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035a8:	2311      	movs	r3, #17
 80035aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;//GPIO_SPEED_FREQ_LOW;
 80035b0:	2302      	movs	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init((GPIO_TypeDef *)cb->port, &GPIO_InitStruct);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f107 020c 	add.w	r2, r7, #12
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 fc38 	bl	8004e34 <HAL_GPIO_Init>
}
 80035c4:	bf00      	nop
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_read_pin>:

static bool HAL_read_pin(dht11_t *cb)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin((GPIO_TypeDef *)cb->port, (uint16_t)cb->pin) != GPIO_PIN_RESET);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4619      	mov	r1, r3
 80035e0:	4610      	mov	r0, r2
 80035e2:	f001 febf 	bl	8005364 <HAL_GPIO_ReadPin>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_write_pin>:

static void HAL_write_pin(dht11_t *cb, bool state)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin((GPIO_TypeDef *)cb->port, (uint16_t)cb->pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	b29b      	uxth	r3, r3
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	4619      	mov	r1, r3
 8003614:	f001 febe 	bl	8005394 <HAL_GPIO_WritePin>
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <dht11_stm32_init>:

dht_status_t dht11_stm32_init(dht11_t *cb)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af04      	add	r7, sp, #16
 8003626:	6078      	str	r0, [r7, #4]
	/* Setup callbacks */
	dht_status_t status = dht11_set_callbacks(
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <dht11_stm32_init+0x7c>)
 800362a:	9302      	str	r3, [sp, #8]
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <dht11_stm32_init+0x80>)
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <dht11_stm32_init+0x84>)
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <dht11_stm32_init+0x88>)
 8003636:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <dht11_stm32_init+0x8c>)
 8003638:	491d      	ldr	r1, [pc, #116]	; (80036b0 <dht11_stm32_init+0x90>)
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fda4 	bl	8003188 <dht11_set_callbacks>
 8003640:	4603      	mov	r3, r0
 8003642:	73fb      	strb	r3, [r7, #15]
							HAL_init_read_pin,
							HAL_init_write_pin,
							HAL_read_pin,
							HAL_write_pin
						);
	if (status != DHT_OK)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <dht11_stm32_init+0x2e>
	{
		return status;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	e022      	b.n	8003694 <dht11_stm32_init+0x74>
	}
	/* Initialization of DWT module (cortex-m4)*/
	DWT_Init();
 800364e:	f7ff fc5f 	bl	8002f10 <DWT_Init>
	cb->callbacks.init_read_pin (cb);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	4798      	blx	r3
	/* We are measuring of pin reading time in microseconds */
	uint32_t cycles = DWT_GetCycles();
 800365a:	f7ff fc95 	bl	8002f88 <DWT_GetCycles>
 800365e:	60b8      	str	r0, [r7, #8]
	cb->callbacks.read_pin (cb);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
	cb->delay = DWT_Cycles_to_us(DWT_GetCycles() - cycles);
 8003668:	f7ff fc8e 	bl	8002f88 <DWT_GetCycles>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fc94 	bl	8002fa0 <DWT_Cycles_to_us>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	721a      	strb	r2, [r3, #8]
	/* End of measuring */
	/* Keep line in hight state */
	cb->callbacks.init_write_pin (cb);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	4798      	blx	r3
	cb->callbacks.write_pin(cb, true);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	2101      	movs	r1, #1
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
	return DHT_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	080035fb 	.word	0x080035fb
 80036a0:	080035cd 	.word	0x080035cd
 80036a4:	08003589 	.word	0x08003589
 80036a8:	08003549 	.word	0x08003549
 80036ac:	08004c29 	.word	0x08004c29
 80036b0:	08002f45 	.word	0x08002f45

080036b4 <phy_bootstrap>:
#include <stdio.h>
#define RESET_ASSERT_DELAY_US   500UL
#define BOOTUP_DELAY_US         100UL

void phy_bootstrap()
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80036c8:	2300      	movs	r3, #0
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <phy_bootstrap+0x90>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <phy_bootstrap+0x90>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6313      	str	r3, [r2, #48]	; 0x30
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <phy_bootstrap+0x90>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
	/* Initialization of DWT module (cortex-m4)*/
	DWT_Init();
 80036e4:	f7ff fc14 	bl	8002f10 <DWT_Init>

	/*Configure GPIO pin : RMII_CSR_DV_PIN */
	GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ec:	2301      	movs	r3, #1
 80036ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	4619      	mov	r1, r3
 80036fc:	4812      	ldr	r0, [pc, #72]	; (8003748 <phy_bootstrap+0x94>)
 80036fe:	f001 fb99 	bl	8004e34 <HAL_GPIO_Init>

    /* Reset PHY */
    HAL_GPIO_WritePin(RMII_PHY_RST_GPIO_Port, RMII_PHY_RST_Pin, GPIO_PIN_RESET);
 8003702:	2200      	movs	r2, #0
 8003704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003708:	4810      	ldr	r0, [pc, #64]	; (800374c <phy_bootstrap+0x98>)
 800370a:	f001 fe43 	bl	8005394 <HAL_GPIO_WritePin>
    /* Set PHY address to 0x03 */
    HAL_GPIO_WritePin(RMII_CRS_DV_GPIO_Port, RMII_CRS_DV_Pin, GPIO_PIN_SET);
 800370e:	2201      	movs	r2, #1
 8003710:	2180      	movs	r1, #128	; 0x80
 8003712:	480d      	ldr	r0, [pc, #52]	; (8003748 <phy_bootstrap+0x94>)
 8003714:	f001 fe3e 	bl	8005394 <HAL_GPIO_WritePin>
    /* Reset pin should be asserted for minimum 500 us */
    delay_us(RESET_ASSERT_DELAY_US);
 8003718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800371c:	f7ff fc58 	bl	8002fd0 <delay_us>
    /* Bootup PHY */
    HAL_GPIO_WritePin(RMII_PHY_RST_GPIO_Port, RMII_PHY_RST_Pin, GPIO_PIN_SET);
 8003720:	2201      	movs	r2, #1
 8003722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003726:	4809      	ldr	r0, [pc, #36]	; (800374c <phy_bootstrap+0x98>)
 8003728:	f001 fe34 	bl	8005394 <HAL_GPIO_WritePin>
    /* Bootup delay should be minimum 100 us */
    delay_us(BOOTUP_DELAY_US);
 800372c:	2064      	movs	r0, #100	; 0x64
 800372e:	f7ff fc4f 	bl	8002fd0 <delay_us>

    HAL_GPIO_DeInit(RMII_CRS_DV_GPIO_Port, RMII_CRS_DV_Pin);
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	4804      	ldr	r0, [pc, #16]	; (8003748 <phy_bootstrap+0x94>)
 8003736:	f001 fd19 	bl	800516c <HAL_GPIO_DeInit>
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	40020000 	.word	0x40020000
 800374c:	40020c00 	.word	0x40020c00

08003750 <phy_init>:

void phy_init(ETH_HandleTypeDef *heth)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	// link up/down interrupt via RMII_PHY_INT pin
	uint32_t regval = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

    HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL2, &regval);
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	461a      	mov	r2, r3
 8003762:	211f      	movs	r1, #31
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fcd6 	bl	8004116 <HAL_ETH_ReadPHYRegister>
    regval &= ~(PHY_INT_LEVEL_ACTIVE_MASK);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003770:	60fb      	str	r3, [r7, #12]
    regval |= PHY_INT_LEVEL_ACTIVE_LOW;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	60fb      	str	r3, [r7, #12]
    HAL_ETH_WritePHYRegister(heth, PHY_CONTROL2, regval);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	461a      	mov	r2, r3
 800377a:	211f      	movs	r1, #31
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fd32 	bl	80041e6 <HAL_ETH_WritePHYRegister>

    /* Read Register Configuration */
    HAL_ETH_ReadPHYRegister(heth, PHY_INTERRUPT_CONTROL, &regval);
 8003782:	f107 030c 	add.w	r3, r7, #12
 8003786:	461a      	mov	r2, r3
 8003788:	211b      	movs	r1, #27
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fcc3 	bl	8004116 <HAL_ETH_ReadPHYRegister>

    regval |= (PHY_LINK_UP_INT_EN | PHY_LINK_DOWN_INT_EN);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8003796:	60fb      	str	r3, [r7, #12]

    /* Enable Interrupt on change of link status */
    HAL_ETH_WritePHYRegister(heth, PHY_INTERRUPT_CONTROL, regval);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	461a      	mov	r2, r3
 800379c:	211b      	movs	r1, #27
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fd21 	bl	80041e6 <HAL_ETH_WritePHYRegister>
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_ETH_Autonegotiate>:
  @endverbatim
  * @{
  */
#ifdef KSZ8021RNL_PHY_ADDRESS
HAL_StatusTypeDef HAL_ETH_Autonegotiate(ETH_HandleTypeDef *heth)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]
    uint32_t tickstart = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	74fb      	strb	r3, [r7, #19]

    if (heth == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_ETH_Autonegotiate+0x1e>
    {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e080      	b.n	80038cc <HAL_ETH_Autonegotiate+0x120>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ca:	f001 fa21 	bl	8004c10 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

    /* Wait while link bring up */
    do
    {
        status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_STATUS, &phyreg);
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	461a      	mov	r2, r3
 80037d6:	2101      	movs	r1, #1
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fc9c 	bl	8004116 <HAL_ETH_ReadPHYRegister>
 80037de:	4603      	mov	r3, r0
 80037e0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_ETH_Autonegotiate+0x40>
        {
            return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e06f      	b.n	80038cc <HAL_ETH_Autonegotiate+0x120>
        }

        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80037ec:	f001 fa10 	bl	8004c10 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_ETH_Autonegotiate+0x56>
        {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e064      	b.n	80038cc <HAL_ETH_Autonegotiate+0x120>
        }
    } while (((phyreg & PHY_LINK_IS_UP) != PHY_LINK_IS_UP));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0e1      	beq.n	80037d0 <HAL_ETH_Autonegotiate+0x24>

    status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_CONTROL, &phyreg);
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	461a      	mov	r2, r3
 8003812:	2100      	movs	r1, #0
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fc7e 	bl	8004116 <HAL_ETH_ReadPHYRegister>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_ETH_Autonegotiate+0x7c>
    {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e051      	b.n	80038cc <HAL_ETH_Autonegotiate+0x120>
    }

    /* Enable end restart Auto-Negotiation */
    phyreg |= (PHY_AUTONEGOTIATION_ENABLE | PHY_RESTART_AUTONEGOTIATION);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 800382e:	60fb      	str	r3, [r7, #12]
    status = HAL_ETH_WritePHYRegister(heth, PHY_BASIC_CONTROL, PHY_AUTONEGOTIATION_ENABLE);
 8003830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003834:	2100      	movs	r1, #0
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fcd5 	bl	80041e6 <HAL_ETH_WritePHYRegister>
 800383c:	4603      	mov	r3, r0
 800383e:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_ETH_Autonegotiate+0x9e>
    {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e040      	b.n	80038cc <HAL_ETH_Autonegotiate+0x120>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800384a:	f001 f9e1 	bl	8004c10 <HAL_GetTick>
 800384e:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation is completed */
    do
    {
        HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_STATUS, &phyreg);
 8003850:	f107 030c 	add.w	r3, r7, #12
 8003854:	461a      	mov	r2, r3
 8003856:	2101      	movs	r1, #1
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fc5c 	bl	8004116 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800385e:	f001 f9d7 	bl	8004c10 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_ETH_Autonegotiate+0xc8>
        {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e02b      	b.n	80038cc <HAL_ETH_Autonegotiate+0x120>
        }

    } while (((phyreg & PHY_AUTONEG_COMPLETE) != PHY_AUTONEG_COMPLETE));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0e8      	beq.n	8003850 <HAL_ETH_Autonegotiate+0xa4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL1, &phyreg)) != HAL_OK)
 800387e:	f107 030c 	add.w	r3, r7, #12
 8003882:	461a      	mov	r2, r3
 8003884:	211e      	movs	r1, #30
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fc45 	bl	8004116 <HAL_ETH_ReadPHYRegister>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_ETH_Autonegotiate+0xea>
    {
        /* In case of write timeout */
        return  HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e01a      	b.n	80038cc <HAL_ETH_Autonegotiate+0x120>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if (phyreg & PHY_FULL_DUPLEX)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_ETH_Autonegotiate+0xfe>
    {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e002      	b.n	80038b0 <HAL_ETH_Autonegotiate+0x104>
    }
    else
    {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if (phyreg & PHY_SPEED_10BASE_T)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_ETH_Autonegotiate+0x116>
    {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        (heth->Init).Speed = ETH_SPEED_10M;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	e003      	b.n	80038ca <HAL_ETH_Autonegotiate+0x11e>
    }
    else
    {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        (heth->Init).Speed = ETH_SPEED_100M;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038c8:	609a      	str	r2, [r3, #8]
    }

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_ETH_SetSpeedDuplex>:

HAL_StatusTypeDef HAL_ETH_SetSpeedDuplex(ETH_HandleTypeDef *heth)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]

    if (heth == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_ETH_SetSpeedDuplex+0x1a>
    {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e037      	b.n	800395e <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_CONTROL, &phyreg);
 80038ee:	f107 0308 	add.w	r3, r7, #8
 80038f2:	461a      	mov	r2, r3
 80038f4:	2100      	movs	r1, #0
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fc0d 	bl	8004116 <HAL_ETH_ReadPHYRegister>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_ETH_SetSpeedDuplex+0x36>
    {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e029      	b.n	800395e <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    phyreg &= ~(PHY_SPEED_MASK | PHY_DUPLEX_MASK);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 8003910:	60bb      	str	r3, [r7, #8]
    /* Set MAC Speed and Duplex Mode */
    if (heth->Init.Speed == ETH_SPEED_100M)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391a:	d104      	bne.n	8003926 <HAL_ETH_SetSpeedDuplex+0x52>
    {
        phyreg |= PHY_SPEED_100M;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	e001      	b.n	800392a <HAL_ETH_SetSpeedDuplex+0x56>
    }
    else
    {
        phyreg |= PHY_SPEED_10M;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	60bb      	str	r3, [r7, #8]
    }

    if (heth->Init.DuplexMode == ETH_MODE_FULLDUPLEX)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003932:	d104      	bne.n	800393e <HAL_ETH_SetSpeedDuplex+0x6a>
    {
        phyreg |= PHY_DUPLEX_FULL;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	e001      	b.n	8003942 <HAL_ETH_SetSpeedDuplex+0x6e>
    }
    else
    {
        phyreg |= PHY_DUPLEX_HALF;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	60bb      	str	r3, [r7, #8]
    }

    status = HAL_ETH_WritePHYRegister(heth, PHY_BASIC_CONTROL, phyreg);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	461a      	mov	r2, r3
 8003946:	2100      	movs	r1, #0
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fc4c 	bl	80041e6 <HAL_ETH_WritePHYRegister>
 800394e:	4603      	mov	r3, r0
 8003950:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_ETH_SetSpeedDuplex+0x88>
    {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
    uint32_t hclk = 60000000U;
 8003978:	4b7e      	ldr	r3, [pc, #504]	; (8003b74 <HAL_ETH_Init+0x20c>)
 800397a:	61bb      	str	r3, [r7, #24]
    uint32_t tickstart = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
    uint32_t err = ETH_SUCCESS;
 8003980:	2300      	movs	r3, #0
 8003982:	623b      	str	r3, [r7, #32]
    HAL_StatusTypeDef status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	74fb      	strb	r3, [r7, #19]
    HAL_StatusTypeDef retval = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	77fb      	strb	r3, [r7, #31]

    /* Check the ETH peripheral state */
    if (heth == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_ETH_Init+0x2e>
    {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0e9      	b.n	8003b6a <HAL_ETH_Init+0x202>
    assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
    assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
    assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
    assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

    if (heth->State == HAL_ETH_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_ETH_Init+0x48>
    {
        /* Allocate lock resource and initialize it */
        heth->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            heth->MspInitCallback = HAL_ETH_MspInit;
        }
        heth->MspInitCallback(heth);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC. */
        HAL_ETH_MspInit(heth);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f003 f9a8 	bl	8006d00 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }

    /* Enable SYSCFG Clock */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	4b70      	ldr	r3, [pc, #448]	; (8003b78 <HAL_ETH_Init+0x210>)
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	4a6f      	ldr	r2, [pc, #444]	; (8003b78 <HAL_ETH_Init+0x210>)
 80039ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039be:	6453      	str	r3, [r2, #68]	; 0x44
 80039c0:	4b6d      	ldr	r3, [pc, #436]	; (8003b78 <HAL_ETH_Init+0x210>)
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]

    /* Select MII or RMII Mode*/
    SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80039cc:	4b6b      	ldr	r3, [pc, #428]	; (8003b7c <HAL_ETH_Init+0x214>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a6a      	ldr	r2, [pc, #424]	; (8003b7c <HAL_ETH_Init+0x214>)
 80039d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039d6:	6053      	str	r3, [r2, #4]
    SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80039d8:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <HAL_ETH_Init+0x214>)
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4966      	ldr	r1, [pc, #408]	; (8003b7c <HAL_ETH_Init+0x214>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]

    /*-------------------------------- MAC Initialization ----------------------*/
    /* Get the ETHERNET MACMIIAR value */
    tmpreg1 = (heth->Instance)->MACMIIAR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear CSR Clock Range CR[2:0] bits */
    tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	f023 031c 	bic.w	r3, r3, #28
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get hclk frequency value */
    hclk = HAL_RCC_GetHCLKFreq();
 80039f6:	f002 f959 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 80039fa:	61b8      	str	r0, [r7, #24]

    /* Set CR bits depending on hclk value */
    if ((hclk >= 20000000U) && (hclk < 35000000U))
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4a60      	ldr	r2, [pc, #384]	; (8003b80 <HAL_ETH_Init+0x218>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d908      	bls.n	8003a16 <HAL_ETH_Init+0xae>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4a5f      	ldr	r2, [pc, #380]	; (8003b84 <HAL_ETH_Init+0x21c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d804      	bhi.n	8003a16 <HAL_ETH_Init+0xae>
    {
        /* CSR Clock Range between 20-35 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	f043 0308 	orr.w	r3, r3, #8
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
 8003a14:	e027      	b.n	8003a66 <HAL_ETH_Init+0xfe>
    }
    else if((hclk >= 35000000U) && (hclk < 60000000U))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	4a5a      	ldr	r2, [pc, #360]	; (8003b84 <HAL_ETH_Init+0x21c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d908      	bls.n	8003a30 <HAL_ETH_Init+0xc8>
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	4a54      	ldr	r2, [pc, #336]	; (8003b74 <HAL_ETH_Init+0x20c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d204      	bcs.n	8003a30 <HAL_ETH_Init+0xc8>
    {
        /* CSR Clock Range between 35-60 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	f043 030c 	orr.w	r3, r3, #12
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	e01a      	b.n	8003a66 <HAL_ETH_Init+0xfe>
    }
    else if((hclk >= 60000000U) && (hclk < 100000000U))
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	4a50      	ldr	r2, [pc, #320]	; (8003b74 <HAL_ETH_Init+0x20c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d303      	bcc.n	8003a40 <HAL_ETH_Init+0xd8>
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	4a53      	ldr	r2, [pc, #332]	; (8003b88 <HAL_ETH_Init+0x220>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d911      	bls.n	8003a64 <HAL_ETH_Init+0xfc>
    {
        /* CSR Clock Range between 60-100 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
    }
    else if((hclk >= 100000000U) && (hclk < 150000000U))
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	4a51      	ldr	r2, [pc, #324]	; (8003b88 <HAL_ETH_Init+0x220>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d908      	bls.n	8003a5a <HAL_ETH_Init+0xf2>
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	4a50      	ldr	r2, [pc, #320]	; (8003b8c <HAL_ETH_Init+0x224>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d804      	bhi.n	8003a5a <HAL_ETH_Init+0xf2>
    {
        /* CSR Clock Range between 100-150 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	e005      	b.n	8003a66 <HAL_ETH_Init+0xfe>
    }
    else /* ((hclk >= 150000000) && (hclk <= 183000000)) */
    {
        /* CSR Clock Range between 150-183 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f043 0310 	orr.w	r3, r3, #16
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
 8003a62:	e000      	b.n	8003a66 <HAL_ETH_Init+0xfe>
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003a64:	bf00      	nop
    }

    /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
    (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	611a      	str	r2, [r3, #16]

    status = HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL2, &phyreg);
 8003a6e:	f107 030c 	add.w	r3, r7, #12
 8003a72:	461a      	mov	r2, r3
 8003a74:	211f      	movs	r1, #31
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fb4d 	bl	8004116 <HAL_ETH_ReadPHYRegister>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_ETH_Init+0x122>
    {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06f      	b.n	8003b6a <HAL_ETH_Init+0x202>
    /* Set 25MHz clock mode to enable 50 MHz clock on REF_CLK pin
     * Note: After default bootstrap KSZ8081RND has 50MHz clock mode set
     *       thus REF_CLK pin is not connected and MAC module is
     *       not clocking. So bit ETH_DMABMR_SR in DMABMR register
     *       of MAC subsystem will never cleared */
    phyreg &= ~(PHY_REF_CLOCK_SELECT_MASK);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a90:	60fb      	str	r3, [r7, #12]
    phyreg |= (PHY_REF_CLOCK_SELECT_25MHZ);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a98:	60fb      	str	r3, [r7, #12]
    status = HAL_ETH_WritePHYRegister(heth, PHY_CONTROL2, phyreg);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	211f      	movs	r1, #31
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fba0 	bl	80041e6 <HAL_ETH_WritePHYRegister>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_ETH_Init+0x14c>
    {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e05a      	b.n	8003b6a <HAL_ETH_Init+0x202>
    }

    /* Ethernet Software reset */
    /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
    /* After reset all the registers holds their respective reset values */
    (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003acc:	f001 f8a0 	bl	8004c10 <HAL_GetTick>
 8003ad0:	6178      	str	r0, [r7, #20]

    /* Wait for software reset */
    while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003ad2:	e011      	b.n	8003af8 <HAL_ETH_Init+0x190>
    {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003ad4:	f001 f89c 	bl	8004c10 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ae2:	d909      	bls.n	8003af8 <HAL_ETH_Init+0x190>
        {
            heth->State = HAL_ETH_STATE_TIMEOUT;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(heth);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
                not available, please check your external PHY or the IO configuration */
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e038      	b.n	8003b6a <HAL_ETH_Init+0x202>
    while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e4      	bne.n	8003ad4 <HAL_ETH_Init+0x16c>
        }
    }

    /*-------------------- PHY initialization and configuration ----------------*/
    if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00f      	beq.n	8003b32 <HAL_ETH_Init+0x1ca>
    {
        status = HAL_ETH_Autonegotiate(heth);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fe4a 	bl	80037ac <HAL_ETH_Autonegotiate>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <HAL_ETH_Init+0x1c4>
        {
            err = ETH_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	623b      	str	r3, [r7, #32]
            retval = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	77fb      	strb	r3, [r7, #31]
            goto init_final_stage;
 8003b2a:	e011      	b.n	8003b50 <HAL_ETH_Init+0x1e8>
        }
        else
        {
            retval = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e00e      	b.n	8003b50 <HAL_ETH_Init+0x1e8>
    {
        /* Check parameters */
        assert_param(IS_ETH_SPEED(heth->Init.Speed));
        assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

        status = HAL_ETH_SetSpeedDuplex(heth);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fece 	bl	80038d4 <HAL_ETH_SetSpeedDuplex>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <HAL_ETH_Init+0x1e4>
        {
            err = ETH_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	623b      	str	r3, [r7, #32]
            retval = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77fb      	strb	r3, [r7, #31]
            goto init_final_stage;
 8003b4a:	e001      	b.n	8003b50 <HAL_ETH_Init+0x1e8>
        }
        else
        {
            retval = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	77fb      	strb	r3, [r7, #31]
        }
    }

init_final_stage:
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003b50:	6a39      	ldr	r1, [r7, #32]
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fd06 	bl	8004564 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Return function status */
    return retval;
 8003b68:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3728      	adds	r7, #40	; 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	03938700 	.word	0x03938700
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40013800 	.word	0x40013800
 8003b80:	01312cff 	.word	0x01312cff
 8003b84:	02160ebf 	.word	0x02160ebf
 8003b88:	05f5e0ff 	.word	0x05f5e0ff
 8003b8c:	08f0d17f 	.word	0x08f0d17f

08003b90 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_ETH_DMATxDescListInit+0x20>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e052      	b.n	8003c56 <HAL_ETH_DMATxDescListInit+0xc6>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	e030      	b.n	8003c2e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	015b      	lsls	r3, r3, #5
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bdc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d208      	bcs.n	8003c22 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3301      	adds	r3, #1
 8003c14:	015b      	lsls	r3, r3, #5
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4413      	add	r3, r2
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	60da      	str	r2, [r3, #12]
 8003c20:	e002      	b.n	8003c28 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3ca      	bcc.n	8003bcc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c40:	3310      	adds	r3, #16
 8003c42:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b087      	sub	sp, #28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_ETH_DMARxDescListInit+0x20>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e056      	b.n	8003d30 <HAL_ETH_DMARxDescListInit+0xce>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e034      	b.n	8003d08 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	015b      	lsls	r3, r3, #5
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cae:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003cb6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d208      	bcs.n	8003cfc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	3301      	adds	r3, #1
 8003cee:	015b      	lsls	r3, r3, #5
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	e002      	b.n	8003d02 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3301      	adds	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d3c6      	bcc.n	8003c9e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_ETH_TransmitFrame+0x24>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e0cd      	b.n	8003efc <HAL_ETH_TransmitFrame+0x1c0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0b8      	b.n	8003efc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	da09      	bge.n	8003da8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2212      	movs	r2, #18
 8003d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0a9      	b.n	8003efc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d915      	bls.n	8003dde <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	4a54      	ldr	r2, [pc, #336]	; (8003f08 <HAL_ETH_TransmitFrame+0x1cc>)
 8003db6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dba:	0a9b      	lsrs	r3, r3, #10
 8003dbc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	4b51      	ldr	r3, [pc, #324]	; (8003f08 <HAL_ETH_TransmitFrame+0x1cc>)
 8003dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc6:	0a9b      	lsrs	r3, r3, #10
 8003dc8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e001      	b.n	8003de2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003dde:	2301      	movs	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d11c      	bne.n	8003e22 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003df6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003e02:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e12:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e20:	e04b      	b.n	8003eba <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	e044      	b.n	8003eb2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e36:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d107      	bne.n	8003e4e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e4c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003e56:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d116      	bne.n	8003e90 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003e70:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <HAL_ETH_TransmitFrame+0x1d0>)
 8003e76:	fb02 f203 	mul.w	r2, r2, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003e82:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003e8e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e9e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d3b6      	bcc.n	8003e28 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	3314      	adds	r3, #20
 8003ed8:	2204      	movs	r2, #4
 8003eda:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	ac02b00b 	.word	0xac02b00b
 8003f0c:	fffffa0c 	.word	0xfffffa0c

08003f10 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e074      	b.n	8004014 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003f3a:	e05a      	b.n	8003ff2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f50:	d10d      	bne.n	8003f6e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	461a      	mov	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f6c:	e041      	b.n	8003ff2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	629a      	str	r2, [r3, #40]	; 0x28
 8003f92:	e02e      	b.n	8003ff2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d103      	bne.n	8003fb6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003fc2:	1f1a      	subs	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e010      	b.n	8004014 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	db02      	blt.n	8004002 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d99c      	bls.n	8003f3c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004030:	3314      	adds	r3, #20
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b40      	cmp	r3, #64	; 0x40
 800403a:	d112      	bne.n	8004062 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f002 ff0d 	bl	8006e5c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800404a:	3314      	adds	r3, #20
 800404c:	2240      	movs	r2, #64	; 0x40
 800404e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004060:	e01b      	b.n	800409a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406a:	3314      	adds	r3, #20
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	d111      	bne.n	800409a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f839 	bl	80040ee <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004084:	3314      	adds	r3, #20
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a2:	3314      	adds	r3, #20
 80040a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040a8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b2:	3314      	adds	r3, #20
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040be:	d112      	bne.n	80040e6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f81e 	bl	8004102 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ce:	3314      	adds	r3, #20
 80040d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040d4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	460b      	mov	r3, r1
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b82      	cmp	r3, #130	; 0x82
 8004136:	d101      	bne.n	800413c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
 800413a:	e050      	b.n	80041de <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2282      	movs	r2, #130	; 0x82
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f003 031c 	and.w	r3, r3, #28
 8004152:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8a1b      	ldrh	r3, [r3, #16]
 8004158:	02db      	lsls	r3, r3, #11
 800415a:	b29b      	uxth	r3, r3
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004162:	897b      	ldrh	r3, [r7, #10]
 8004164:	019b      	lsls	r3, r3, #6
 8004166:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f023 0302 	bic.w	r3, r3, #2
 8004176:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004188:	f000 fd42 	bl	8004c10 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800418e:	e015      	b.n	80041bc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004190:	f000 fd3e 	bl	8004c10 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419e:	d309      	bcc.n	80041b4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e014      	b.n	80041de <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e4      	bne.n	8004190 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b086      	sub	sp, #24
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	460b      	mov	r3, r1
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b42      	cmp	r3, #66	; 0x42
 8004206:	d101      	bne.n	800420c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
 800420a:	e04e      	b.n	80042aa <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2242      	movs	r2, #66	; 0x42
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 031c 	and.w	r3, r3, #28
 8004222:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8a1b      	ldrh	r3, [r3, #16]
 8004228:	02db      	lsls	r3, r3, #11
 800422a:	b29b      	uxth	r3, r3
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	019b      	lsls	r3, r3, #6
 8004236:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f043 0302 	orr.w	r3, r3, #2
 8004246:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004262:	f000 fcd5 	bl	8004c10 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004268:	e015      	b.n	8004296 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800426a:	f000 fcd1 	bl	8004c10 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004278:	d309      	bcc.n	800428e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e00d      	b.n	80042aa <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e4      	bne.n	800426a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_ETH_Start+0x16>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e01f      	b.n	8004308 <HAL_ETH_Start+0x56>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fb45 	bl	8004968 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fb7c 	bl	80049dc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fc13 	bl	8004b10 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fbb0 	bl	8004a50 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fbdd 	bl	8004ab0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_ETH_Stop+0x16>
 8004322:	2302      	movs	r3, #2
 8004324:	e01f      	b.n	8004366 <HAL_ETH_Stop+0x56>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fba2 	bl	8004a80 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fbcf 	bl	8004ae0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fb67 	bl	8004a16 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fbe1 	bl	8004b10 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fb27 	bl	80049a2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_ETH_ConfigMAC+0x1c>
 8004388:	2302      	movs	r3, #2
 800438a:	e0e4      	b.n	8004556 <HAL_ETH_ConfigMAC+0x1e6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80b1 	beq.w	8004506 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <HAL_ETH_ConfigMAC+0x1f0>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80043bc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80043c2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80043c8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80043ce:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80043d4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80043da:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80043e0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80043e6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80043ec:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80043f2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80043f8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80043fe:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004416:	2001      	movs	r0, #1
 8004418:	f000 fc06 	bl	8004c28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800442c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004432:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004438:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800443e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004444:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800444a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004456:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004458:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004462:	2001      	movs	r0, #1
 8004464:	f000 fbe0 	bl	8004c28 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004478:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004482:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004492:	4013      	ands	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80044a0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80044a6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80044ac:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80044b2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80044b8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80044d0:	2001      	movs	r0, #1
 80044d2:	f000 fba9 	bl	8004c28 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80044f6:	2001      	movs	r0, #1
 80044f8:	f000 fb96 	bl	8004c28 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	61da      	str	r2, [r3, #28]
 8004504:	e01e      	b.n	8004544 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004514:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004536:	2001      	movs	r0, #1
 8004538:	f000 fb76 	bl	8004c28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	ff20810f 	.word	0xff20810f

08004564 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b0b0      	sub	sp, #192	; 0xc0
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004580:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004588:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800458a:	2300      	movs	r3, #0
 800458c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800458e:	2300      	movs	r3, #0
 8004590:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004592:	2300      	movs	r3, #0
 8004594:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004596:	2300      	movs	r3, #0
 8004598:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800459a:	2300      	movs	r3, #0
 800459c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800459e:	2300      	movs	r3, #0
 80045a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80045aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ae:	663b      	str	r3, [r7, #96]	; 0x60
 80045b0:	e001      	b.n	80045b6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80045b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ba:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80045bc:	2300      	movs	r3, #0
 80045be:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80045c0:	2300      	movs	r3, #0
 80045c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80045d0:	2340      	movs	r3, #64	; 0x40
 80045d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80045ec:	2300      	movs	r3, #0
 80045ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800460a:	2300      	movs	r3, #0
 800460c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004610:	2300      	movs	r3, #0
 8004612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004616:	2300      	movs	r3, #0
 8004618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004622:	2300      	movs	r3, #0
 8004624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004628:	2300      	movs	r3, #0
 800462a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004638:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800463c:	4bac      	ldr	r3, [pc, #688]	; (80048f0 <ETH_MACDMAConfig+0x38c>)
 800463e:	4013      	ands	r3, r2
 8004640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004644:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004648:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800464a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800464c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800464e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004650:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004656:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800465a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800465c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800465e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004664:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004668:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800466a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800466c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800466e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004670:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004674:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004678:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800467a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800468c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004698:	2001      	movs	r0, #1
 800469a:	f000 fac5 	bl	8004c28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046a6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80046a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80046aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80046ac:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80046ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80046b0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80046b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80046b6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80046b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80046bc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80046be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80046c2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80046c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80046c8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80046cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80046d4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80046d6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80046e2:	2001      	movs	r0, #1
 80046e4:	f000 faa0 	bl	8004c28 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046f0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046fa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004704:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004710:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004714:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004718:	4013      	ands	r3, r2
 800471a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800471e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004722:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004724:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004728:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800472a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800472e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004734:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800473a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800473c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004740:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004742:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004754:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004760:	2001      	movs	r0, #1
 8004762:	f000 fa61 	bl	8004c28 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800476e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004770:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004774:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800478a:	2001      	movs	r0, #1
 800478c:	f000 fa4c 	bl	8004c28 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004798:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800479e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047a2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80047a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047ac:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80047ba:	2300      	movs	r3, #0
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80047be:	2304      	movs	r3, #4
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80047c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80047c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80047ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80047d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80047e2:	2300      	movs	r3, #0
 80047e4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ee:	3318      	adds	r3, #24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80047f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047fa:	4b3e      	ldr	r3, [pc, #248]	; (80048f4 <ETH_MACDMAConfig+0x390>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004802:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004804:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004806:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004808:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800480a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800480c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800480e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004810:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004812:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004814:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004816:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004818:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800481a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800481e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004822:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004824:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004836:	3318      	adds	r3, #24
 8004838:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800483c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004846:	3318      	adds	r3, #24
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800484e:	2001      	movs	r0, #1
 8004850:	f000 f9ea 	bl	8004c28 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485c:	3318      	adds	r3, #24
 800485e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004862:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004868:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800486c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004870:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004874:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004878:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800487a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800487c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800487e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800489c:	2001      	movs	r0, #1
 800489e:	f000 f9c3 	bl	8004c28 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048ae:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10f      	bne.n	80048d8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c0:	331c      	adds	r3, #28
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80048cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d4:	331c      	adds	r3, #28
 80048d6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	461a      	mov	r2, r3
 80048de:	2100      	movs	r1, #0
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f809 	bl	80048f8 <ETH_MACAddressConfig>
}
 80048e6:	bf00      	nop
 80048e8:	37c0      	adds	r7, #192	; 0xc0
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	ff20810f 	.word	0xff20810f
 80048f4:	f8de3f23 	.word	0xf8de3f23

080048f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3305      	adds	r3, #5
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	3204      	adds	r2, #4
 8004910:	7812      	ldrb	r2, [r2, #0]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <ETH_MACAddressConfig+0x68>)
 800491a:	4413      	add	r3, r2
 800491c:	461a      	mov	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3303      	adds	r3, #3
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	061a      	lsls	r2, r3, #24
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3302      	adds	r3, #2
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3301      	adds	r3, #1
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	4313      	orrs	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	7812      	ldrb	r2, [r2, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <ETH_MACAddressConfig+0x6c>)
 800494a:	4413      	add	r3, r2
 800494c:	461a      	mov	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	6013      	str	r3, [r2, #0]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40028040 	.word	0x40028040
 8004964:	40028044 	.word	0x40028044

08004968 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800498c:	2001      	movs	r0, #1
 800498e:	f000 f8e9 	bl	8004b64 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0208 	bic.w	r2, r2, #8
 80049bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80049c6:	2001      	movs	r0, #1
 80049c8:	f000 f8cc 	bl	8004b64 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0204 	orr.w	r2, r2, #4
 80049f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a00:	2001      	movs	r0, #1
 8004a02:	f000 f8af 	bl	8004b64 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	601a      	str	r2, [r3, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0204 	bic.w	r2, r2, #4
 8004a30:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f000 f892 	bl	8004b64 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a60:	3318      	adds	r3, #24
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a70:	3318      	adds	r3, #24
 8004a72:	601a      	str	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a90:	3318      	adds	r3, #24
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa0:	3318      	adds	r3, #24
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac0:	3318      	adds	r3, #24
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0202 	orr.w	r2, r2, #2
 8004acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad0:	3318      	adds	r3, #24
 8004ad2:	601a      	str	r2, [r3, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af0:	3318      	adds	r3, #24
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0202 	bic.w	r2, r2, #2
 8004afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b00:	3318      	adds	r3, #24
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b24:	3318      	adds	r3, #24
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b34:	3318      	adds	r3, #24
 8004b36:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b40:	3318      	adds	r3, #24
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004b46:	2001      	movs	r0, #1
 8004b48:	f000 f80c 	bl	8004b64 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b56:	3318      	adds	r3, #24
 8004b58:	601a      	str	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <ETH_Delay+0x38>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <ETH_Delay+0x3c>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	0a5b      	lsrs	r3, r3, #9
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004b80:	bf00      	nop
  } 
  while (Delay --);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1e5a      	subs	r2, r3, #1
 8004b86:	60fa      	str	r2, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f9      	bne.n	8004b80 <ETH_Delay+0x1c>
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000010 	.word	0x20000010
 8004ba0:	10624dd3 	.word	0x10624dd3

08004ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <HAL_Init+0x40>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <HAL_Init+0x40>)
 8004bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_Init+0x40>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <HAL_Init+0x40>)
 8004bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bc0:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_Init+0x40>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a07      	ldr	r2, [pc, #28]	; (8004be4 <HAL_Init+0x40>)
 8004bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bcc:	2003      	movs	r0, #3
 8004bce:	f000 f8fc 	bl	8004dca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f7fd fb40 	bl	8002258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bd8:	f7fd faca 	bl	8002170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40023c00 	.word	0x40023c00

08004be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bec:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_IncTick+0x20>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_IncTick+0x24>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <HAL_IncTick+0x24>)
 8004bfa:	6013      	str	r3, [r2, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	2000003c 	.word	0x2000003c
 8004c0c:	20014554 	.word	0x20014554

08004c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return uwTick;
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_GetTick+0x14>)
 8004c16:	681b      	ldr	r3, [r3, #0]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20014554 	.word	0x20014554

08004c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c30:	f7ff ffee 	bl	8004c10 <HAL_GetTick>
 8004c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c40:	d005      	beq.n	8004c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <HAL_Delay+0x44>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c4e:	bf00      	nop
 8004c50:	f7ff ffde 	bl	8004c10 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d8f7      	bhi.n	8004c50 <HAL_Delay+0x28>
  {
  }
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	2000003c 	.word	0x2000003c

08004c70 <__NVIC_SetPriorityGrouping>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ca2:	4a04      	ldr	r2, [pc, #16]	; (8004cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	60d3      	str	r3, [r2, #12]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	e000ed00 	.word	0xe000ed00

08004cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	0a1b      	lsrs	r3, r3, #8
 8004cc2:	f003 0307 	and.w	r3, r3, #7
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	e000ed00 	.word	0xe000ed00

08004cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	db0b      	blt.n	8004cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	f003 021f 	and.w	r2, r3, #31
 8004cec:	4907      	ldr	r1, [pc, #28]	; (8004d0c <__NVIC_EnableIRQ+0x38>)
 8004cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8004cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	e000e100 	.word	0xe000e100

08004d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	6039      	str	r1, [r7, #0]
 8004d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	db0a      	blt.n	8004d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	490c      	ldr	r1, [pc, #48]	; (8004d5c <__NVIC_SetPriority+0x4c>)
 8004d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2e:	0112      	lsls	r2, r2, #4
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	440b      	add	r3, r1
 8004d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d38:	e00a      	b.n	8004d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	4908      	ldr	r1, [pc, #32]	; (8004d60 <__NVIC_SetPriority+0x50>)
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	3b04      	subs	r3, #4
 8004d48:	0112      	lsls	r2, r2, #4
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	761a      	strb	r2, [r3, #24]
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	e000e100 	.word	0xe000e100
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b089      	sub	sp, #36	; 0x24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f1c3 0307 	rsb	r3, r3, #7
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	bf28      	it	cs
 8004d82:	2304      	movcs	r3, #4
 8004d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	2b06      	cmp	r3, #6
 8004d8c:	d902      	bls.n	8004d94 <NVIC_EncodePriority+0x30>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3b03      	subs	r3, #3
 8004d92:	e000      	b.n	8004d96 <NVIC_EncodePriority+0x32>
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43da      	mvns	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	401a      	ands	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	fa01 f303 	lsl.w	r3, r1, r3
 8004db6:	43d9      	mvns	r1, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dbc:	4313      	orrs	r3, r2
         );
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3724      	adds	r7, #36	; 0x24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff ff4c 	bl	8004c70 <__NVIC_SetPriorityGrouping>
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004df2:	f7ff ff61 	bl	8004cb8 <__NVIC_GetPriorityGrouping>
 8004df6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	6978      	ldr	r0, [r7, #20]
 8004dfe:	f7ff ffb1 	bl	8004d64 <NVIC_EncodePriority>
 8004e02:	4602      	mov	r2, r0
 8004e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ff80 	bl	8004d10 <__NVIC_SetPriority>
}
 8004e10:	bf00      	nop
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff ff54 	bl	8004cd4 <__NVIC_EnableIRQ>
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b089      	sub	sp, #36	; 0x24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e16b      	b.n	8005128 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e50:	2201      	movs	r2, #1
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4013      	ands	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	f040 815a 	bne.w	8005122 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d005      	beq.n	8004e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d130      	bne.n	8004ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	2203      	movs	r2, #3
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 0201 	and.w	r2, r3, #1
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d017      	beq.n	8004f24 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	2203      	movs	r2, #3
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d123      	bne.n	8004f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	08da      	lsrs	r2, r3, #3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3208      	adds	r2, #8
 8004f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	220f      	movs	r2, #15
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	fa02 f303 	lsl.w	r3, r2, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	08da      	lsrs	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3208      	adds	r2, #8
 8004f72:	69b9      	ldr	r1, [r7, #24]
 8004f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	2203      	movs	r2, #3
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 0203 	and.w	r2, r3, #3
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80b4 	beq.w	8005122 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	4b60      	ldr	r3, [pc, #384]	; (8005140 <HAL_GPIO_Init+0x30c>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	4a5f      	ldr	r2, [pc, #380]	; (8005140 <HAL_GPIO_Init+0x30c>)
 8004fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fca:	4b5d      	ldr	r3, [pc, #372]	; (8005140 <HAL_GPIO_Init+0x30c>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fd6:	4a5b      	ldr	r2, [pc, #364]	; (8005144 <HAL_GPIO_Init+0x310>)
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	3302      	adds	r3, #2
 8004fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	220f      	movs	r2, #15
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	; (8005148 <HAL_GPIO_Init+0x314>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d02b      	beq.n	800505a <HAL_GPIO_Init+0x226>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a51      	ldr	r2, [pc, #324]	; (800514c <HAL_GPIO_Init+0x318>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d025      	beq.n	8005056 <HAL_GPIO_Init+0x222>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a50      	ldr	r2, [pc, #320]	; (8005150 <HAL_GPIO_Init+0x31c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01f      	beq.n	8005052 <HAL_GPIO_Init+0x21e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a4f      	ldr	r2, [pc, #316]	; (8005154 <HAL_GPIO_Init+0x320>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d019      	beq.n	800504e <HAL_GPIO_Init+0x21a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a4e      	ldr	r2, [pc, #312]	; (8005158 <HAL_GPIO_Init+0x324>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <HAL_GPIO_Init+0x216>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a4d      	ldr	r2, [pc, #308]	; (800515c <HAL_GPIO_Init+0x328>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00d      	beq.n	8005046 <HAL_GPIO_Init+0x212>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a4c      	ldr	r2, [pc, #304]	; (8005160 <HAL_GPIO_Init+0x32c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <HAL_GPIO_Init+0x20e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a4b      	ldr	r2, [pc, #300]	; (8005164 <HAL_GPIO_Init+0x330>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d101      	bne.n	800503e <HAL_GPIO_Init+0x20a>
 800503a:	2307      	movs	r3, #7
 800503c:	e00e      	b.n	800505c <HAL_GPIO_Init+0x228>
 800503e:	2308      	movs	r3, #8
 8005040:	e00c      	b.n	800505c <HAL_GPIO_Init+0x228>
 8005042:	2306      	movs	r3, #6
 8005044:	e00a      	b.n	800505c <HAL_GPIO_Init+0x228>
 8005046:	2305      	movs	r3, #5
 8005048:	e008      	b.n	800505c <HAL_GPIO_Init+0x228>
 800504a:	2304      	movs	r3, #4
 800504c:	e006      	b.n	800505c <HAL_GPIO_Init+0x228>
 800504e:	2303      	movs	r3, #3
 8005050:	e004      	b.n	800505c <HAL_GPIO_Init+0x228>
 8005052:	2302      	movs	r3, #2
 8005054:	e002      	b.n	800505c <HAL_GPIO_Init+0x228>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <HAL_GPIO_Init+0x228>
 800505a:	2300      	movs	r3, #0
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	f002 0203 	and.w	r2, r2, #3
 8005062:	0092      	lsls	r2, r2, #2
 8005064:	4093      	lsls	r3, r2
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800506c:	4935      	ldr	r1, [pc, #212]	; (8005144 <HAL_GPIO_Init+0x310>)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	089b      	lsrs	r3, r3, #2
 8005072:	3302      	adds	r3, #2
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800507a:	4b3b      	ldr	r3, [pc, #236]	; (8005168 <HAL_GPIO_Init+0x334>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	43db      	mvns	r3, r3
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4013      	ands	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800509e:	4a32      	ldr	r2, [pc, #200]	; (8005168 <HAL_GPIO_Init+0x334>)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050a4:	4b30      	ldr	r3, [pc, #192]	; (8005168 <HAL_GPIO_Init+0x334>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050c8:	4a27      	ldr	r2, [pc, #156]	; (8005168 <HAL_GPIO_Init+0x334>)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050ce:	4b26      	ldr	r3, [pc, #152]	; (8005168 <HAL_GPIO_Init+0x334>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050f2:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <HAL_GPIO_Init+0x334>)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050f8:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <HAL_GPIO_Init+0x334>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800511c:	4a12      	ldr	r2, [pc, #72]	; (8005168 <HAL_GPIO_Init+0x334>)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3301      	adds	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	2b0f      	cmp	r3, #15
 800512c:	f67f ae90 	bls.w	8004e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	3724      	adds	r7, #36	; 0x24
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800
 8005144:	40013800 	.word	0x40013800
 8005148:	40020000 	.word	0x40020000
 800514c:	40020400 	.word	0x40020400
 8005150:	40020800 	.word	0x40020800
 8005154:	40020c00 	.word	0x40020c00
 8005158:	40021000 	.word	0x40021000
 800515c:	40021400 	.word	0x40021400
 8005160:	40021800 	.word	0x40021800
 8005164:	40021c00 	.word	0x40021c00
 8005168:	40013c00 	.word	0x40013c00

0800516c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e0cd      	b.n	8005324 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005188:	2201      	movs	r2, #1
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4013      	ands	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	429a      	cmp	r2, r3
 80051a0:	f040 80bd 	bne.w	800531e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80051a4:	4a65      	ldr	r2, [pc, #404]	; (800533c <HAL_GPIO_DeInit+0x1d0>)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	3302      	adds	r3, #2
 80051ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	220f      	movs	r2, #15
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	4013      	ands	r3, r2
 80051c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a5d      	ldr	r2, [pc, #372]	; (8005340 <HAL_GPIO_DeInit+0x1d4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d02b      	beq.n	8005226 <HAL_GPIO_DeInit+0xba>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a5c      	ldr	r2, [pc, #368]	; (8005344 <HAL_GPIO_DeInit+0x1d8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d025      	beq.n	8005222 <HAL_GPIO_DeInit+0xb6>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a5b      	ldr	r2, [pc, #364]	; (8005348 <HAL_GPIO_DeInit+0x1dc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01f      	beq.n	800521e <HAL_GPIO_DeInit+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a5a      	ldr	r2, [pc, #360]	; (800534c <HAL_GPIO_DeInit+0x1e0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d019      	beq.n	800521a <HAL_GPIO_DeInit+0xae>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a59      	ldr	r2, [pc, #356]	; (8005350 <HAL_GPIO_DeInit+0x1e4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_GPIO_DeInit+0xaa>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a58      	ldr	r2, [pc, #352]	; (8005354 <HAL_GPIO_DeInit+0x1e8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00d      	beq.n	8005212 <HAL_GPIO_DeInit+0xa6>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a57      	ldr	r2, [pc, #348]	; (8005358 <HAL_GPIO_DeInit+0x1ec>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <HAL_GPIO_DeInit+0xa2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a56      	ldr	r2, [pc, #344]	; (800535c <HAL_GPIO_DeInit+0x1f0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <HAL_GPIO_DeInit+0x9e>
 8005206:	2307      	movs	r3, #7
 8005208:	e00e      	b.n	8005228 <HAL_GPIO_DeInit+0xbc>
 800520a:	2308      	movs	r3, #8
 800520c:	e00c      	b.n	8005228 <HAL_GPIO_DeInit+0xbc>
 800520e:	2306      	movs	r3, #6
 8005210:	e00a      	b.n	8005228 <HAL_GPIO_DeInit+0xbc>
 8005212:	2305      	movs	r3, #5
 8005214:	e008      	b.n	8005228 <HAL_GPIO_DeInit+0xbc>
 8005216:	2304      	movs	r3, #4
 8005218:	e006      	b.n	8005228 <HAL_GPIO_DeInit+0xbc>
 800521a:	2303      	movs	r3, #3
 800521c:	e004      	b.n	8005228 <HAL_GPIO_DeInit+0xbc>
 800521e:	2302      	movs	r3, #2
 8005220:	e002      	b.n	8005228 <HAL_GPIO_DeInit+0xbc>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_GPIO_DeInit+0xbc>
 8005226:	2300      	movs	r3, #0
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	f002 0203 	and.w	r2, r2, #3
 800522e:	0092      	lsls	r2, r2, #2
 8005230:	4093      	lsls	r3, r2
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	429a      	cmp	r2, r3
 8005236:	d132      	bne.n	800529e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005238:	4b49      	ldr	r3, [pc, #292]	; (8005360 <HAL_GPIO_DeInit+0x1f4>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	43db      	mvns	r3, r3
 8005240:	4947      	ldr	r1, [pc, #284]	; (8005360 <HAL_GPIO_DeInit+0x1f4>)
 8005242:	4013      	ands	r3, r2
 8005244:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005246:	4b46      	ldr	r3, [pc, #280]	; (8005360 <HAL_GPIO_DeInit+0x1f4>)
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	43db      	mvns	r3, r3
 800524e:	4944      	ldr	r1, [pc, #272]	; (8005360 <HAL_GPIO_DeInit+0x1f4>)
 8005250:	4013      	ands	r3, r2
 8005252:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005254:	4b42      	ldr	r3, [pc, #264]	; (8005360 <HAL_GPIO_DeInit+0x1f4>)
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	43db      	mvns	r3, r3
 800525c:	4940      	ldr	r1, [pc, #256]	; (8005360 <HAL_GPIO_DeInit+0x1f4>)
 800525e:	4013      	ands	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005262:	4b3f      	ldr	r3, [pc, #252]	; (8005360 <HAL_GPIO_DeInit+0x1f4>)
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	43db      	mvns	r3, r3
 800526a:	493d      	ldr	r1, [pc, #244]	; (8005360 <HAL_GPIO_DeInit+0x1f4>)
 800526c:	4013      	ands	r3, r2
 800526e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	220f      	movs	r2, #15
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005280:	4a2e      	ldr	r2, [pc, #184]	; (800533c <HAL_GPIO_DeInit+0x1d0>)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	3302      	adds	r3, #2
 8005288:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	43da      	mvns	r2, r3
 8005290:	482a      	ldr	r0, [pc, #168]	; (800533c <HAL_GPIO_DeInit+0x1d0>)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	089b      	lsrs	r3, r3, #2
 8005296:	400a      	ands	r2, r1
 8005298:	3302      	adds	r3, #2
 800529a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	2103      	movs	r1, #3
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	43db      	mvns	r3, r3
 80052ae:	401a      	ands	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	08da      	lsrs	r2, r3, #3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3208      	adds	r2, #8
 80052bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	220f      	movs	r2, #15
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	43db      	mvns	r3, r3
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	08d2      	lsrs	r2, r2, #3
 80052d4:	4019      	ands	r1, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3208      	adds	r2, #8
 80052da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	2103      	movs	r1, #3
 80052e8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	401a      	ands	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	2101      	movs	r1, #1
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	401a      	ands	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	2103      	movs	r1, #3
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	43db      	mvns	r3, r3
 8005318:	401a      	ands	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	3301      	adds	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b0f      	cmp	r3, #15
 8005328:	f67f af2e 	bls.w	8005188 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40013800 	.word	0x40013800
 8005340:	40020000 	.word	0x40020000
 8005344:	40020400 	.word	0x40020400
 8005348:	40020800 	.word	0x40020800
 800534c:	40020c00 	.word	0x40020c00
 8005350:	40021000 	.word	0x40021000
 8005354:	40021400 	.word	0x40021400
 8005358:	40021800 	.word	0x40021800
 800535c:	40021c00 	.word	0x40021c00
 8005360:	40013c00 	.word	0x40013c00

08005364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
 8005380:	e001      	b.n	8005386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005386:	7bfb      	ldrb	r3, [r7, #15]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]
 80053a0:	4613      	mov	r3, r2
 80053a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053a4:	787b      	ldrb	r3, [r7, #1]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053b0:	e003      	b.n	80053ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053b2:	887b      	ldrh	r3, [r7, #2]
 80053b4:	041a      	lsls	r2, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	619a      	str	r2, [r3, #24]
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	460b      	mov	r3, r1
 80053d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053d8:	887a      	ldrh	r2, [r7, #2]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4013      	ands	r3, r2
 80053de:	041a      	lsls	r2, r3, #16
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	43d9      	mvns	r1, r3
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	400b      	ands	r3, r1
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	619a      	str	r2, [r3, #24]
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d006      	beq.n	8005420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005412:	4a05      	ldr	r2, [pc, #20]	; (8005428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	4618      	mov	r0, r3
 800541c:	f7fc f9b0 	bl	8001780 <HAL_GPIO_EXTI_Callback>
  }
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40013c00 	.word	0x40013c00

0800542c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e264      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d075      	beq.n	8005536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800544a:	4ba3      	ldr	r3, [pc, #652]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
 8005452:	2b04      	cmp	r3, #4
 8005454:	d00c      	beq.n	8005470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005456:	4ba0      	ldr	r3, [pc, #640]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800545e:	2b08      	cmp	r3, #8
 8005460:	d112      	bne.n	8005488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005462:	4b9d      	ldr	r3, [pc, #628]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800546e:	d10b      	bne.n	8005488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005470:	4b99      	ldr	r3, [pc, #612]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d05b      	beq.n	8005534 <HAL_RCC_OscConfig+0x108>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d157      	bne.n	8005534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e23f      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005490:	d106      	bne.n	80054a0 <HAL_RCC_OscConfig+0x74>
 8005492:	4b91      	ldr	r3, [pc, #580]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a90      	ldr	r2, [pc, #576]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e01d      	b.n	80054dc <HAL_RCC_OscConfig+0xb0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCC_OscConfig+0x98>
 80054aa:	4b8b      	ldr	r3, [pc, #556]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a8a      	ldr	r2, [pc, #552]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4b88      	ldr	r3, [pc, #544]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a87      	ldr	r2, [pc, #540]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e00b      	b.n	80054dc <HAL_RCC_OscConfig+0xb0>
 80054c4:	4b84      	ldr	r3, [pc, #528]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a83      	ldr	r2, [pc, #524]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80054ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	4b81      	ldr	r3, [pc, #516]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a80      	ldr	r2, [pc, #512]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80054d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d013      	beq.n	800550c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7ff fb94 	bl	8004c10 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054ec:	f7ff fb90 	bl	8004c10 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	; 0x64
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e204      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fe:	4b76      	ldr	r3, [pc, #472]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0xc0>
 800550a:	e014      	b.n	8005536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550c:	f7ff fb80 	bl	8004c10 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005514:	f7ff fb7c 	bl	8004c10 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e1f0      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005526:	4b6c      	ldr	r3, [pc, #432]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0xe8>
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d063      	beq.n	800560a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005542:	4b65      	ldr	r3, [pc, #404]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800554e:	4b62      	ldr	r3, [pc, #392]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005556:	2b08      	cmp	r3, #8
 8005558:	d11c      	bne.n	8005594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800555a:	4b5f      	ldr	r3, [pc, #380]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d116      	bne.n	8005594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005566:	4b5c      	ldr	r3, [pc, #368]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <HAL_RCC_OscConfig+0x152>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d001      	beq.n	800557e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e1c4      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557e:	4b56      	ldr	r3, [pc, #344]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4952      	ldr	r1, [pc, #328]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 800558e:	4313      	orrs	r3, r2
 8005590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005592:	e03a      	b.n	800560a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d020      	beq.n	80055de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800559c:	4b4f      	ldr	r3, [pc, #316]	; (80056dc <HAL_RCC_OscConfig+0x2b0>)
 800559e:	2201      	movs	r2, #1
 80055a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a2:	f7ff fb35 	bl	8004c10 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055aa:	f7ff fb31 	bl	8004c10 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e1a5      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055bc:	4b46      	ldr	r3, [pc, #280]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0f0      	beq.n	80055aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c8:	4b43      	ldr	r3, [pc, #268]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	4940      	ldr	r1, [pc, #256]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	600b      	str	r3, [r1, #0]
 80055dc:	e015      	b.n	800560a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055de:	4b3f      	ldr	r3, [pc, #252]	; (80056dc <HAL_RCC_OscConfig+0x2b0>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7ff fb14 	bl	8004c10 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ec:	f7ff fb10 	bl	8004c10 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e184      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055fe:	4b36      	ldr	r3, [pc, #216]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	d030      	beq.n	8005678 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d016      	beq.n	800564c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800561e:	4b30      	ldr	r3, [pc, #192]	; (80056e0 <HAL_RCC_OscConfig+0x2b4>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005624:	f7ff faf4 	bl	8004c10 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800562c:	f7ff faf0 	bl	8004c10 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e164      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800563e:	4b26      	ldr	r3, [pc, #152]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 8005640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0x200>
 800564a:	e015      	b.n	8005678 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800564c:	4b24      	ldr	r3, [pc, #144]	; (80056e0 <HAL_RCC_OscConfig+0x2b4>)
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005652:	f7ff fadd 	bl	8004c10 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800565a:	f7ff fad9 	bl	8004c10 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e14d      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800566c:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 800566e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f0      	bne.n	800565a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80a0 	beq.w	80057c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005686:	2300      	movs	r3, #0
 8005688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	4a0e      	ldr	r2, [pc, #56]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a4:	6413      	str	r3, [r2, #64]	; 0x40
 80056a6:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <HAL_RCC_OscConfig+0x2ac>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056b2:	2301      	movs	r3, #1
 80056b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b6:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <HAL_RCC_OscConfig+0x2b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d121      	bne.n	8005706 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c2:	4b08      	ldr	r3, [pc, #32]	; (80056e4 <HAL_RCC_OscConfig+0x2b8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a07      	ldr	r2, [pc, #28]	; (80056e4 <HAL_RCC_OscConfig+0x2b8>)
 80056c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ce:	f7ff fa9f 	bl	8004c10 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d4:	e011      	b.n	80056fa <HAL_RCC_OscConfig+0x2ce>
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800
 80056dc:	42470000 	.word	0x42470000
 80056e0:	42470e80 	.word	0x42470e80
 80056e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e8:	f7ff fa92 	bl	8004c10 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e106      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fa:	4b85      	ldr	r3, [pc, #532]	; (8005910 <HAL_RCC_OscConfig+0x4e4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0f0      	beq.n	80056e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d106      	bne.n	800571c <HAL_RCC_OscConfig+0x2f0>
 800570e:	4b81      	ldr	r3, [pc, #516]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005712:	4a80      	ldr	r2, [pc, #512]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	6713      	str	r3, [r2, #112]	; 0x70
 800571a:	e01c      	b.n	8005756 <HAL_RCC_OscConfig+0x32a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b05      	cmp	r3, #5
 8005722:	d10c      	bne.n	800573e <HAL_RCC_OscConfig+0x312>
 8005724:	4b7b      	ldr	r3, [pc, #492]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005728:	4a7a      	ldr	r2, [pc, #488]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 800572a:	f043 0304 	orr.w	r3, r3, #4
 800572e:	6713      	str	r3, [r2, #112]	; 0x70
 8005730:	4b78      	ldr	r3, [pc, #480]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	4a77      	ldr	r2, [pc, #476]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	6713      	str	r3, [r2, #112]	; 0x70
 800573c:	e00b      	b.n	8005756 <HAL_RCC_OscConfig+0x32a>
 800573e:	4b75      	ldr	r3, [pc, #468]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	4a74      	ldr	r2, [pc, #464]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	6713      	str	r3, [r2, #112]	; 0x70
 800574a:	4b72      	ldr	r3, [pc, #456]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	4a71      	ldr	r2, [pc, #452]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005750:	f023 0304 	bic.w	r3, r3, #4
 8005754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d015      	beq.n	800578a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575e:	f7ff fa57 	bl	8004c10 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005764:	e00a      	b.n	800577c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005766:	f7ff fa53 	bl	8004c10 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e0c5      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577c:	4b65      	ldr	r3, [pc, #404]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0ee      	beq.n	8005766 <HAL_RCC_OscConfig+0x33a>
 8005788:	e014      	b.n	80057b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578a:	f7ff fa41 	bl	8004c10 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7ff fa3d 	bl	8004c10 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e0af      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057a8:	4b5a      	ldr	r3, [pc, #360]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1ee      	bne.n	8005792 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d105      	bne.n	80057c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ba:	4b56      	ldr	r3, [pc, #344]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	4a55      	ldr	r2, [pc, #340]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 80057c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 809b 	beq.w	8005906 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057d0:	4b50      	ldr	r3, [pc, #320]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 030c 	and.w	r3, r3, #12
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d05c      	beq.n	8005896 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d141      	bne.n	8005868 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e4:	4b4c      	ldr	r3, [pc, #304]	; (8005918 <HAL_RCC_OscConfig+0x4ec>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ea:	f7ff fa11 	bl	8004c10 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f2:	f7ff fa0d 	bl	8004c10 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e081      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005804:	4b43      	ldr	r3, [pc, #268]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f0      	bne.n	80057f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	019b      	lsls	r3, r3, #6
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	3b01      	subs	r3, #1
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	061b      	lsls	r3, r3, #24
 8005834:	4937      	ldr	r1, [pc, #220]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 8005836:	4313      	orrs	r3, r2
 8005838:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800583a:	4b37      	ldr	r3, [pc, #220]	; (8005918 <HAL_RCC_OscConfig+0x4ec>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7ff f9e6 	bl	8004c10 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005848:	f7ff f9e2 	bl	8004c10 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e056      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800585a:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x41c>
 8005866:	e04e      	b.n	8005906 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005868:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <HAL_RCC_OscConfig+0x4ec>)
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586e:	f7ff f9cf 	bl	8004c10 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005876:	f7ff f9cb 	bl	8004c10 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e03f      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005888:	4b22      	ldr	r3, [pc, #136]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f0      	bne.n	8005876 <HAL_RCC_OscConfig+0x44a>
 8005894:	e037      	b.n	8005906 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e032      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058a2:	4b1c      	ldr	r3, [pc, #112]	; (8005914 <HAL_RCC_OscConfig+0x4e8>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d028      	beq.n	8005902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d121      	bne.n	8005902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d11a      	bne.n	8005902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058d2:	4013      	ands	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058da:	4293      	cmp	r3, r2
 80058dc:	d111      	bne.n	8005902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	085b      	lsrs	r3, r3, #1
 80058ea:	3b01      	subs	r3, #1
 80058ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d107      	bne.n	8005902 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d001      	beq.n	8005906 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3718      	adds	r7, #24
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40007000 	.word	0x40007000
 8005914:	40023800 	.word	0x40023800
 8005918:	42470060 	.word	0x42470060

0800591c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0cc      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005930:	4b68      	ldr	r3, [pc, #416]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d90c      	bls.n	8005958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593e:	4b65      	ldr	r3, [pc, #404]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005946:	4b63      	ldr	r3, [pc, #396]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	429a      	cmp	r2, r3
 8005952:	d001      	beq.n	8005958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0b8      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d020      	beq.n	80059a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005970:	4b59      	ldr	r3, [pc, #356]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	4a58      	ldr	r2, [pc, #352]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800597a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005988:	4b53      	ldr	r3, [pc, #332]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4a52      	ldr	r2, [pc, #328]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005994:	4b50      	ldr	r3, [pc, #320]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	494d      	ldr	r1, [pc, #308]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d044      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d107      	bne.n	80059ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	4b47      	ldr	r3, [pc, #284]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d119      	bne.n	80059fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e07f      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d003      	beq.n	80059da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d107      	bne.n	80059ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059da:	4b3f      	ldr	r3, [pc, #252]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e06f      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ea:	4b3b      	ldr	r3, [pc, #236]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e067      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059fa:	4b37      	ldr	r3, [pc, #220]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f023 0203 	bic.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4934      	ldr	r1, [pc, #208]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a0c:	f7ff f900 	bl	8004c10 <HAL_GetTick>
 8005a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a12:	e00a      	b.n	8005a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a14:	f7ff f8fc 	bl	8004c10 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e04f      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 020c 	and.w	r2, r3, #12
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d1eb      	bne.n	8005a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d20c      	bcs.n	8005a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e032      	b.n	8005aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a70:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4916      	ldr	r1, [pc, #88]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	490e      	ldr	r1, [pc, #56]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005aa2:	f000 f821 	bl	8005ae8 <HAL_RCC_GetSysClockFreq>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	490a      	ldr	r1, [pc, #40]	; (8005adc <HAL_RCC_ClockConfig+0x1c0>)
 8005ab4:	5ccb      	ldrb	r3, [r1, r3]
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8005abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fc fbc8 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023c00 	.word	0x40023c00
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	08026458 	.word	0x08026458
 8005ae0:	20000010 	.word	0x20000010
 8005ae4:	20000038 	.word	0x20000038

08005ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	607b      	str	r3, [r7, #4]
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	2300      	movs	r3, #0
 8005afa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b00:	4b67      	ldr	r3, [pc, #412]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d00d      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0x40>
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	f200 80bd 	bhi.w	8005c8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <HAL_RCC_GetSysClockFreq+0x34>
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d003      	beq.n	8005b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b1a:	e0b7      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b1c:	4b61      	ldr	r3, [pc, #388]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b1e:	60bb      	str	r3, [r7, #8]
       break;
 8005b20:	e0b7      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b22:	4b61      	ldr	r3, [pc, #388]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005b24:	60bb      	str	r3, [r7, #8]
      break;
 8005b26:	e0b4      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b28:	4b5d      	ldr	r3, [pc, #372]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b32:	4b5b      	ldr	r3, [pc, #364]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d04d      	beq.n	8005bda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3e:	4b58      	ldr	r3, [pc, #352]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	099b      	lsrs	r3, r3, #6
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b4e:	f04f 0100 	mov.w	r1, #0
 8005b52:	ea02 0800 	and.w	r8, r2, r0
 8005b56:	ea03 0901 	and.w	r9, r3, r1
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	014b      	lsls	r3, r1, #5
 8005b68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b6c:	0142      	lsls	r2, r0, #5
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	ebb0 0008 	subs.w	r0, r0, r8
 8005b76:	eb61 0109 	sbc.w	r1, r1, r9
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	018b      	lsls	r3, r1, #6
 8005b84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b88:	0182      	lsls	r2, r0, #6
 8005b8a:	1a12      	subs	r2, r2, r0
 8005b8c:	eb63 0301 	sbc.w	r3, r3, r1
 8005b90:	f04f 0000 	mov.w	r0, #0
 8005b94:	f04f 0100 	mov.w	r1, #0
 8005b98:	00d9      	lsls	r1, r3, #3
 8005b9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b9e:	00d0      	lsls	r0, r2, #3
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	eb12 0208 	adds.w	r2, r2, r8
 8005ba8:	eb43 0309 	adc.w	r3, r3, r9
 8005bac:	f04f 0000 	mov.w	r0, #0
 8005bb0:	f04f 0100 	mov.w	r1, #0
 8005bb4:	0259      	lsls	r1, r3, #9
 8005bb6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005bba:	0250      	lsls	r0, r2, #9
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	f7fa ffec 	bl	8000ba8 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	e04a      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bda:	4b31      	ldr	r3, [pc, #196]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	099b      	lsrs	r3, r3, #6
 8005be0:	461a      	mov	r2, r3
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	ea02 0400 	and.w	r4, r2, r0
 8005bf2:	ea03 0501 	and.w	r5, r3, r1
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	014b      	lsls	r3, r1, #5
 8005c04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c08:	0142      	lsls	r2, r0, #5
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	1b00      	subs	r0, r0, r4
 8005c10:	eb61 0105 	sbc.w	r1, r1, r5
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	018b      	lsls	r3, r1, #6
 8005c1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c22:	0182      	lsls	r2, r0, #6
 8005c24:	1a12      	subs	r2, r2, r0
 8005c26:	eb63 0301 	sbc.w	r3, r3, r1
 8005c2a:	f04f 0000 	mov.w	r0, #0
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	00d9      	lsls	r1, r3, #3
 8005c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c38:	00d0      	lsls	r0, r2, #3
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	1912      	adds	r2, r2, r4
 8005c40:	eb45 0303 	adc.w	r3, r5, r3
 8005c44:	f04f 0000 	mov.w	r0, #0
 8005c48:	f04f 0100 	mov.w	r1, #0
 8005c4c:	0299      	lsls	r1, r3, #10
 8005c4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c52:	0290      	lsls	r0, r2, #10
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	f7fa ffa0 	bl	8000ba8 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	60bb      	str	r3, [r7, #8]
      break;
 8005c8a:	e002      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c8e:	60bb      	str	r3, [r7, #8]
      break;
 8005c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c92:	68bb      	ldr	r3, [r7, #8]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	00f42400 	.word	0x00f42400
 8005ca8:	007a1200 	.word	0x007a1200

08005cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000010 	.word	0x20000010

08005cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cc8:	f7ff fff0 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	0a9b      	lsrs	r3, r3, #10
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	4903      	ldr	r1, [pc, #12]	; (8005ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cda:	5ccb      	ldrb	r3, [r1, r3]
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	08026468 	.word	0x08026468

08005cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cf0:	f7ff ffdc 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	0b5b      	lsrs	r3, r3, #13
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	4903      	ldr	r1, [pc, #12]	; (8005d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d02:	5ccb      	ldrb	r3, [r1, r3]
 8005d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	08026468 	.word	0x08026468

08005d14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	220f      	movs	r2, #15
 8005d22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d24:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_RCC_GetClockConfig+0x5c>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 0203 	and.w	r2, r3, #3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d30:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <HAL_RCC_GetClockConfig+0x5c>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <HAL_RCC_GetClockConfig+0x5c>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d48:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <HAL_RCC_GetClockConfig+0x5c>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	08db      	lsrs	r3, r3, #3
 8005d4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <HAL_RCC_GetClockConfig+0x60>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0207 	and.w	r2, r3, #7
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	601a      	str	r2, [r3, #0]
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40023c00 	.word	0x40023c00

08005d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e041      	b.n	8005e0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f839 	bl	8005e16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f000 f9d8 	bl	800616c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e04e      	b.n	8005ee2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d022      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d01d      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1f      	ldr	r2, [pc, #124]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d018      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <HAL_TIM_Base_Start_IT+0xd0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00e      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_TIM_Base_Start_IT+0x80>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d111      	bne.n	8005ed0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b06      	cmp	r3, #6
 8005ebc:	d010      	beq.n	8005ee0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0201 	orr.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ece:	e007      	b.n	8005ee0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d122      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d11b      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0202 	mvn.w	r2, #2
 8005f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8ee 	bl	8006130 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f8e0 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8f1 	bl	8006144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d122      	bne.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d11b      	bne.n	8005fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0204 	mvn.w	r2, #4
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f8c4 	bl	8006130 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f8b6 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8c7 	bl	8006144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d122      	bne.n	8006010 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d11b      	bne.n	8006010 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0208 	mvn.w	r2, #8
 8005fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2204      	movs	r2, #4
 8005fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f89a 	bl	8006130 <HAL_TIM_IC_CaptureCallback>
 8005ffc:	e005      	b.n	800600a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f88c 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f89d 	bl	8006144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b10      	cmp	r3, #16
 800601c:	d122      	bne.n	8006064 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d11b      	bne.n	8006064 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0210 	mvn.w	r2, #16
 8006034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2208      	movs	r2, #8
 800603a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f870 	bl	8006130 <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f862 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f873 	bl	8006144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b01      	cmp	r3, #1
 8006070:	d10e      	bne.n	8006090 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d107      	bne.n	8006090 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0201 	mvn.w	r2, #1
 8006088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fb fbf4 	bl	8001878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b80      	cmp	r3, #128	; 0x80
 800609c:	d10e      	bne.n	80060bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a8:	2b80      	cmp	r3, #128	; 0x80
 80060aa:	d107      	bne.n	80060bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f902 	bl	80062c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d10e      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b40      	cmp	r3, #64	; 0x40
 80060d6:	d107      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f838 	bl	8006158 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d10e      	bne.n	8006114 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b20      	cmp	r3, #32
 8006102:	d107      	bne.n	8006114 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0220 	mvn.w	r2, #32
 800610c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f8cc 	bl	80062ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a40      	ldr	r2, [pc, #256]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a3d      	ldr	r2, [pc, #244]	; (8006284 <TIM_Base_SetConfig+0x118>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a3c      	ldr	r2, [pc, #240]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3b      	ldr	r2, [pc, #236]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2f      	ldr	r2, [pc, #188]	; (8006280 <TIM_Base_SetConfig+0x114>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d02b      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d027      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2c      	ldr	r2, [pc, #176]	; (8006284 <TIM_Base_SetConfig+0x118>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d023      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2b      	ldr	r2, [pc, #172]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01f      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2a      	ldr	r2, [pc, #168]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01b      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a29      	ldr	r2, [pc, #164]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d017      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <TIM_Base_SetConfig+0x128>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <TIM_Base_SetConfig+0x12c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00f      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <TIM_Base_SetConfig+0x130>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00b      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a25      	ldr	r2, [pc, #148]	; (80062a0 <TIM_Base_SetConfig+0x134>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d007      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a24      	ldr	r2, [pc, #144]	; (80062a4 <TIM_Base_SetConfig+0x138>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <TIM_Base_SetConfig+0x13c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d108      	bne.n	8006230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a0c      	ldr	r2, [pc, #48]	; (8006290 <TIM_Base_SetConfig+0x124>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d103      	bne.n	800626c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	615a      	str	r2, [r3, #20]
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40010400 	.word	0x40010400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800
 80062a0:	40001800 	.word	0x40001800
 80062a4:	40001c00 	.word	0x40001c00
 80062a8:	40002000 	.word	0x40002000

080062ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e03f      	b.n	8006366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fb ff64 	bl	80021c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2224      	movs	r2, #36	; 0x24
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f905 	bl	8006528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800634c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b08a      	sub	sp, #40	; 0x28
 8006372:	af02      	add	r7, sp, #8
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	603b      	str	r3, [r7, #0]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b20      	cmp	r3, #32
 800638c:	d17c      	bne.n	8006488 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_UART_Transmit+0x2c>
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e075      	b.n	800648a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_UART_Transmit+0x3e>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e06e      	b.n	800648a <HAL_UART_Transmit+0x11c>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2221      	movs	r2, #33	; 0x21
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063c2:	f7fe fc25 	bl	8004c10 <HAL_GetTick>
 80063c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063dc:	d108      	bne.n	80063f0 <HAL_UART_Transmit+0x82>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	e003      	b.n	80063f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006400:	e02a      	b.n	8006458 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	2180      	movs	r1, #128	; 0x80
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 f840 	bl	8006492 <UART_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e036      	b.n	800648a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10b      	bne.n	800643a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	3302      	adds	r3, #2
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	e007      	b.n	800644a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1cf      	bne.n	8006402 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2200      	movs	r2, #0
 800646a:	2140      	movs	r1, #64	; 0x40
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f810 	bl	8006492 <UART_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e006      	b.n	800648a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	603b      	str	r3, [r7, #0]
 800649e:	4613      	mov	r3, r2
 80064a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a2:	e02c      	b.n	80064fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064aa:	d028      	beq.n	80064fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80064b2:	f7fe fbad 	bl	8004c10 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d21d      	bcs.n	80064fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695a      	ldr	r2, [r3, #20]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0201 	bic.w	r2, r2, #1
 80064e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e00f      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4013      	ands	r3, r2
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	429a      	cmp	r2, r3
 800650c:	bf0c      	ite	eq
 800650e:	2301      	moveq	r3, #1
 8006510:	2300      	movne	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	429a      	cmp	r2, r3
 800651a:	d0c3      	beq.n	80064a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	b09f      	sub	sp, #124	; 0x7c
 800652e:	af00      	add	r7, sp, #0
 8006530:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800653c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653e:	68d9      	ldr	r1, [r3, #12]
 8006540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	ea40 0301 	orr.w	r3, r0, r1
 8006548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800654a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	431a      	orrs	r2, r3
 8006554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	431a      	orrs	r2, r3
 800655a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	4313      	orrs	r3, r2
 8006560:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800656c:	f021 010c 	bic.w	r1, r1, #12
 8006570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006576:	430b      	orrs	r3, r1
 8006578:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800657a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006586:	6999      	ldr	r1, [r3, #24]
 8006588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	ea40 0301 	orr.w	r3, r0, r1
 8006590:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4bc5      	ldr	r3, [pc, #788]	; (80068ac <UART_SetConfig+0x384>)
 8006598:	429a      	cmp	r2, r3
 800659a:	d004      	beq.n	80065a6 <UART_SetConfig+0x7e>
 800659c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4bc3      	ldr	r3, [pc, #780]	; (80068b0 <UART_SetConfig+0x388>)
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d103      	bne.n	80065ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065a6:	f7ff fba1 	bl	8005cec <HAL_RCC_GetPCLK2Freq>
 80065aa:	6778      	str	r0, [r7, #116]	; 0x74
 80065ac:	e002      	b.n	80065b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ae:	f7ff fb89 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 80065b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065bc:	f040 80b6 	bne.w	800672c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c2:	461c      	mov	r4, r3
 80065c4:	f04f 0500 	mov.w	r5, #0
 80065c8:	4622      	mov	r2, r4
 80065ca:	462b      	mov	r3, r5
 80065cc:	1891      	adds	r1, r2, r2
 80065ce:	6439      	str	r1, [r7, #64]	; 0x40
 80065d0:	415b      	adcs	r3, r3
 80065d2:	647b      	str	r3, [r7, #68]	; 0x44
 80065d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065d8:	1912      	adds	r2, r2, r4
 80065da:	eb45 0303 	adc.w	r3, r5, r3
 80065de:	f04f 0000 	mov.w	r0, #0
 80065e2:	f04f 0100 	mov.w	r1, #0
 80065e6:	00d9      	lsls	r1, r3, #3
 80065e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065ec:	00d0      	lsls	r0, r2, #3
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	1911      	adds	r1, r2, r4
 80065f4:	6639      	str	r1, [r7, #96]	; 0x60
 80065f6:	416b      	adcs	r3, r5
 80065f8:	667b      	str	r3, [r7, #100]	; 0x64
 80065fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	461a      	mov	r2, r3
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	1891      	adds	r1, r2, r2
 8006606:	63b9      	str	r1, [r7, #56]	; 0x38
 8006608:	415b      	adcs	r3, r3
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006610:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006614:	f7fa fac8 	bl	8000ba8 <__aeabi_uldivmod>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4ba5      	ldr	r3, [pc, #660]	; (80068b4 <UART_SetConfig+0x38c>)
 800661e:	fba3 2302 	umull	r2, r3, r3, r2
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	011e      	lsls	r6, r3, #4
 8006626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006628:	461c      	mov	r4, r3
 800662a:	f04f 0500 	mov.w	r5, #0
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	1891      	adds	r1, r2, r2
 8006634:	6339      	str	r1, [r7, #48]	; 0x30
 8006636:	415b      	adcs	r3, r3
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
 800663a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800663e:	1912      	adds	r2, r2, r4
 8006640:	eb45 0303 	adc.w	r3, r5, r3
 8006644:	f04f 0000 	mov.w	r0, #0
 8006648:	f04f 0100 	mov.w	r1, #0
 800664c:	00d9      	lsls	r1, r3, #3
 800664e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006652:	00d0      	lsls	r0, r2, #3
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	1911      	adds	r1, r2, r4
 800665a:	65b9      	str	r1, [r7, #88]	; 0x58
 800665c:	416b      	adcs	r3, r5
 800665e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	461a      	mov	r2, r3
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	1891      	adds	r1, r2, r2
 800666c:	62b9      	str	r1, [r7, #40]	; 0x28
 800666e:	415b      	adcs	r3, r3
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006676:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800667a:	f7fa fa95 	bl	8000ba8 <__aeabi_uldivmod>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4b8c      	ldr	r3, [pc, #560]	; (80068b4 <UART_SetConfig+0x38c>)
 8006684:	fba3 1302 	umull	r1, r3, r3, r2
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	2164      	movs	r1, #100	; 0x64
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	3332      	adds	r3, #50	; 0x32
 8006696:	4a87      	ldr	r2, [pc, #540]	; (80068b4 <UART_SetConfig+0x38c>)
 8006698:	fba2 2303 	umull	r2, r3, r2, r3
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066a4:	441e      	add	r6, r3
 80066a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a8:	4618      	mov	r0, r3
 80066aa:	f04f 0100 	mov.w	r1, #0
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	1894      	adds	r4, r2, r2
 80066b4:	623c      	str	r4, [r7, #32]
 80066b6:	415b      	adcs	r3, r3
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066be:	1812      	adds	r2, r2, r0
 80066c0:	eb41 0303 	adc.w	r3, r1, r3
 80066c4:	f04f 0400 	mov.w	r4, #0
 80066c8:	f04f 0500 	mov.w	r5, #0
 80066cc:	00dd      	lsls	r5, r3, #3
 80066ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066d2:	00d4      	lsls	r4, r2, #3
 80066d4:	4622      	mov	r2, r4
 80066d6:	462b      	mov	r3, r5
 80066d8:	1814      	adds	r4, r2, r0
 80066da:	653c      	str	r4, [r7, #80]	; 0x50
 80066dc:	414b      	adcs	r3, r1
 80066de:	657b      	str	r3, [r7, #84]	; 0x54
 80066e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	461a      	mov	r2, r3
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	1891      	adds	r1, r2, r2
 80066ec:	61b9      	str	r1, [r7, #24]
 80066ee:	415b      	adcs	r3, r3
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066fa:	f7fa fa55 	bl	8000ba8 <__aeabi_uldivmod>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4b6c      	ldr	r3, [pc, #432]	; (80068b4 <UART_SetConfig+0x38c>)
 8006704:	fba3 1302 	umull	r1, r3, r3, r2
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	2164      	movs	r1, #100	; 0x64
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	3332      	adds	r3, #50	; 0x32
 8006716:	4a67      	ldr	r2, [pc, #412]	; (80068b4 <UART_SetConfig+0x38c>)
 8006718:	fba2 2303 	umull	r2, r3, r2, r3
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	f003 0207 	and.w	r2, r3, #7
 8006722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4432      	add	r2, r6
 8006728:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800672a:	e0b9      	b.n	80068a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800672c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800672e:	461c      	mov	r4, r3
 8006730:	f04f 0500 	mov.w	r5, #0
 8006734:	4622      	mov	r2, r4
 8006736:	462b      	mov	r3, r5
 8006738:	1891      	adds	r1, r2, r2
 800673a:	6139      	str	r1, [r7, #16]
 800673c:	415b      	adcs	r3, r3
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006744:	1912      	adds	r2, r2, r4
 8006746:	eb45 0303 	adc.w	r3, r5, r3
 800674a:	f04f 0000 	mov.w	r0, #0
 800674e:	f04f 0100 	mov.w	r1, #0
 8006752:	00d9      	lsls	r1, r3, #3
 8006754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006758:	00d0      	lsls	r0, r2, #3
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	eb12 0804 	adds.w	r8, r2, r4
 8006762:	eb43 0905 	adc.w	r9, r3, r5
 8006766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4618      	mov	r0, r3
 800676c:	f04f 0100 	mov.w	r1, #0
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	008b      	lsls	r3, r1, #2
 800677a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800677e:	0082      	lsls	r2, r0, #2
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7fa fa10 	bl	8000ba8 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4b49      	ldr	r3, [pc, #292]	; (80068b4 <UART_SetConfig+0x38c>)
 800678e:	fba3 2302 	umull	r2, r3, r3, r2
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	011e      	lsls	r6, r3, #4
 8006796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006798:	4618      	mov	r0, r3
 800679a:	f04f 0100 	mov.w	r1, #0
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	1894      	adds	r4, r2, r2
 80067a4:	60bc      	str	r4, [r7, #8]
 80067a6:	415b      	adcs	r3, r3
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067ae:	1812      	adds	r2, r2, r0
 80067b0:	eb41 0303 	adc.w	r3, r1, r3
 80067b4:	f04f 0400 	mov.w	r4, #0
 80067b8:	f04f 0500 	mov.w	r5, #0
 80067bc:	00dd      	lsls	r5, r3, #3
 80067be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067c2:	00d4      	lsls	r4, r2, #3
 80067c4:	4622      	mov	r2, r4
 80067c6:	462b      	mov	r3, r5
 80067c8:	1814      	adds	r4, r2, r0
 80067ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80067cc:	414b      	adcs	r3, r1
 80067ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	008b      	lsls	r3, r1, #2
 80067e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067e8:	0082      	lsls	r2, r0, #2
 80067ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80067ee:	f7fa f9db 	bl	8000ba8 <__aeabi_uldivmod>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4b2f      	ldr	r3, [pc, #188]	; (80068b4 <UART_SetConfig+0x38c>)
 80067f8:	fba3 1302 	umull	r1, r3, r3, r2
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	2164      	movs	r1, #100	; 0x64
 8006800:	fb01 f303 	mul.w	r3, r1, r3
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	3332      	adds	r3, #50	; 0x32
 800680a:	4a2a      	ldr	r2, [pc, #168]	; (80068b4 <UART_SetConfig+0x38c>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	095b      	lsrs	r3, r3, #5
 8006812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006816:	441e      	add	r6, r3
 8006818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800681a:	4618      	mov	r0, r3
 800681c:	f04f 0100 	mov.w	r1, #0
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	1894      	adds	r4, r2, r2
 8006826:	603c      	str	r4, [r7, #0]
 8006828:	415b      	adcs	r3, r3
 800682a:	607b      	str	r3, [r7, #4]
 800682c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006830:	1812      	adds	r2, r2, r0
 8006832:	eb41 0303 	adc.w	r3, r1, r3
 8006836:	f04f 0400 	mov.w	r4, #0
 800683a:	f04f 0500 	mov.w	r5, #0
 800683e:	00dd      	lsls	r5, r3, #3
 8006840:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006844:	00d4      	lsls	r4, r2, #3
 8006846:	4622      	mov	r2, r4
 8006848:	462b      	mov	r3, r5
 800684a:	eb12 0a00 	adds.w	sl, r2, r0
 800684e:	eb43 0b01 	adc.w	fp, r3, r1
 8006852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4618      	mov	r0, r3
 8006858:	f04f 0100 	mov.w	r1, #0
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	008b      	lsls	r3, r1, #2
 8006866:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800686a:	0082      	lsls	r2, r0, #2
 800686c:	4650      	mov	r0, sl
 800686e:	4659      	mov	r1, fp
 8006870:	f7fa f99a 	bl	8000ba8 <__aeabi_uldivmod>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <UART_SetConfig+0x38c>)
 800687a:	fba3 1302 	umull	r1, r3, r3, r2
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	2164      	movs	r1, #100	; 0x64
 8006882:	fb01 f303 	mul.w	r3, r1, r3
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	3332      	adds	r3, #50	; 0x32
 800688c:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <UART_SetConfig+0x38c>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	f003 020f 	and.w	r2, r3, #15
 8006898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4432      	add	r2, r6
 800689e:	609a      	str	r2, [r3, #8]
}
 80068a0:	bf00      	nop
 80068a2:	377c      	adds	r7, #124	; 0x7c
 80068a4:	46bd      	mov	sp, r7
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	bf00      	nop
 80068ac:	40011000 	.word	0x40011000
 80068b0:	40011400 	.word	0x40011400
 80068b4:	51eb851f 	.word	0x51eb851f

080068b8 <DB4_write>:
	{ 0x61, 0xB2, 0xB3, 0xB4, 0xE3, 0x65, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xEF, 0xBE },
	{ 0x70, 0x63, 0xBF, 0x79, 0xE4, 0xD5, 0xE5, 0xC0, 0xC1, 0xE6, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7 }
};
#endif
static void DB4_write(int state)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
	if (state == 1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d106      	bne.n	80068d4 <DB4_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB4_BIT);
 80068c6:	2201      	movs	r2, #1
 80068c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068cc:	4808      	ldr	r0, [pc, #32]	; (80068f0 <DB4_write+0x38>)
 80068ce:	f7fe fd61 	bl	8005394 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB4_BIT);
	}
}
 80068d2:	e008      	b.n	80068e6 <DB4_write+0x2e>
	else if (state == 0)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d105      	bne.n	80068e6 <DB4_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB4_BIT);
 80068da:	2200      	movs	r2, #0
 80068dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068e0:	4803      	ldr	r0, [pc, #12]	; (80068f0 <DB4_write+0x38>)
 80068e2:	f7fe fd57 	bl	8005394 <HAL_GPIO_WritePin>
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40021000 	.word	0x40021000

080068f4 <DB5_write>:

static void DB5_write(int state)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	if (state == 1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d106      	bne.n	8006910 <DB5_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB5_BIT);
 8006902:	2201      	movs	r2, #1
 8006904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006908:	4808      	ldr	r0, [pc, #32]	; (800692c <DB5_write+0x38>)
 800690a:	f7fe fd43 	bl	8005394 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB5_BIT);
	}
}
 800690e:	e008      	b.n	8006922 <DB5_write+0x2e>
	else if (state == 0)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d105      	bne.n	8006922 <DB5_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB5_BIT);
 8006916:	2200      	movs	r2, #0
 8006918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800691c:	4803      	ldr	r0, [pc, #12]	; (800692c <DB5_write+0x38>)
 800691e:	f7fe fd39 	bl	8005394 <HAL_GPIO_WritePin>
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000

08006930 <DB6_write>:

static void DB6_write(int state)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d106      	bne.n	800694c <DB6_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB6_BIT);
 800693e:	2201      	movs	r2, #1
 8006940:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006944:	4808      	ldr	r0, [pc, #32]	; (8006968 <DB6_write+0x38>)
 8006946:	f7fe fd25 	bl	8005394 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB6_BIT);
	}
}
 800694a:	e008      	b.n	800695e <DB6_write+0x2e>
	else if (state == 0)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d105      	bne.n	800695e <DB6_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB6_BIT);
 8006952:	2200      	movs	r2, #0
 8006954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006958:	4803      	ldr	r0, [pc, #12]	; (8006968 <DB6_write+0x38>)
 800695a:	f7fe fd1b 	bl	8005394 <HAL_GPIO_WritePin>
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40021000 	.word	0x40021000

0800696c <DB7_write>:

static void DB7_write(int state)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d106      	bne.n	8006988 <DB7_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB7_BIT);
 800697a:	2201      	movs	r2, #1
 800697c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006980:	4808      	ldr	r0, [pc, #32]	; (80069a4 <DB7_write+0x38>)
 8006982:	f7fe fd07 	bl	8005394 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB7_BIT);
	}
}
 8006986:	e008      	b.n	800699a <DB7_write+0x2e>
	else if (state == 0)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <DB7_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB7_BIT);
 800698e:	2200      	movs	r2, #0
 8006990:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006994:	4803      	ldr	r0, [pc, #12]	; (80069a4 <DB7_write+0x38>)
 8006996:	f7fe fcfd 	bl	8005394 <HAL_GPIO_WritePin>
}
 800699a:	bf00      	nop
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40021000 	.word	0x40021000

080069a8 <lcd_clock>:

static inline void lcd_clock()
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
	lcd_en_set;
 80069ac:	2201      	movs	r2, #1
 80069ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069b2:	4808      	ldr	r0, [pc, #32]	; (80069d4 <lcd_clock+0x2c>)
 80069b4:	f7fe fcee 	bl	8005394 <HAL_GPIO_WritePin>
	delay_us( 10 );
 80069b8:	200a      	movs	r0, #10
 80069ba:	f7fc fb09 	bl	8002fd0 <delay_us>
	lcd_en_clear;
 80069be:	2200      	movs	r2, #0
 80069c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069c4:	4803      	ldr	r0, [pc, #12]	; (80069d4 <lcd_clock+0x2c>)
 80069c6:	f7fe fce5 	bl	8005394 <HAL_GPIO_WritePin>
	delay_us( 10 );
 80069ca:	200a      	movs	r0, #10
 80069cc:	f7fc fb00 	bl	8002fd0 <delay_us>
}
 80069d0:	bf00      	nop
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40021000 	.word	0x40021000

080069d8 <lcd_bus_write>:
	DB6_write,
	DB7_write,
};

static void lcd_bus_write(char data)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	71fb      	strb	r3, [r7, #7]
	delay_us( 100 );
 80069e2:	2064      	movs	r0, #100	; 0x64
 80069e4:	f7fc faf4 	bl	8002fd0 <delay_us>
	for(size_t i = 0; i < 4; i++)
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	e017      	b.n	8006a1e <lcd_bus_write+0x46>
	{
		if (data & ( 1 << i ))
 80069ee:	79fa      	ldrb	r2, [r7, #7]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	fa42 f303 	asr.w	r3, r2, r3
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d006      	beq.n	8006a0c <lcd_bus_write+0x34>
		{
			bit_write[i](1);
 80069fe:	4a0c      	ldr	r2, [pc, #48]	; (8006a30 <lcd_bus_write+0x58>)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a06:	2001      	movs	r0, #1
 8006a08:	4798      	blx	r3
 8006a0a:	e005      	b.n	8006a18 <lcd_bus_write+0x40>
		}
		else
		{
			bit_write[i](0);
 8006a0c:	4a08      	ldr	r2, [pc, #32]	; (8006a30 <lcd_bus_write+0x58>)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a14:	2000      	movs	r0, #0
 8006a16:	4798      	blx	r3
	for(size_t i = 0; i < 4; i++)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d9e4      	bls.n	80069ee <lcd_bus_write+0x16>
		}
	}
	lcd_clock();
 8006a24:	f7ff ffc0 	bl	80069a8 <lcd_clock>
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	20000040 	.word	0x20000040

08006a34 <lcd_command_set>:

void lcd_command_set(char command )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	71fb      	strb	r3, [r7, #7]
	lcd_rs_clear;			/* R/S = 0 */
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2180      	movs	r1, #128	; 0x80
 8006a42:	480e      	ldr	r0, [pc, #56]	; (8006a7c <lcd_command_set+0x48>)
 8006a44:	f7fe fca6 	bl	8005394 <HAL_GPIO_WritePin>
	lcd_rw_clear;
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a4e:	480b      	ldr	r0, [pc, #44]	; (8006a7c <lcd_command_set+0x48>)
 8006a50:	f7fe fca0 	bl	8005394 <HAL_GPIO_WritePin>
	delay_ms( 10 );
 8006a54:	200a      	movs	r0, #10
 8006a56:	f7fc fac6 	bl	8002fe6 <delay_ms>
	lcd_bus_write(command >> 4);
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff ffb9 	bl	80069d8 <lcd_bus_write>
	lcd_bus_write(command & 0x0F);
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff ffb2 	bl	80069d8 <lcd_bus_write>
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40021000 	.word	0x40021000

08006a80 <lcd_init>:

void lcd_init( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
	lcd_rw_clear;
 8006a84:	2200      	movs	r2, #0
 8006a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a8a:	4818      	ldr	r0, [pc, #96]	; (8006aec <lcd_init+0x6c>)
 8006a8c:	f7fe fc82 	bl	8005394 <HAL_GPIO_WritePin>
	lcd_rs_clear;
 8006a90:	2200      	movs	r2, #0
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	4815      	ldr	r0, [pc, #84]	; (8006aec <lcd_init+0x6c>)
 8006a96:	f7fe fc7d 	bl	8005394 <HAL_GPIO_WritePin>

	lcd_bus_write(0x03);
 8006a9a:	2003      	movs	r0, #3
 8006a9c:	f7ff ff9c 	bl	80069d8 <lcd_bus_write>
	delay_ms( 5 );
 8006aa0:	2005      	movs	r0, #5
 8006aa2:	f7fc faa0 	bl	8002fe6 <delay_ms>

	lcd_bus_write(0x03);
 8006aa6:	2003      	movs	r0, #3
 8006aa8:	f7ff ff96 	bl	80069d8 <lcd_bus_write>
	delay_us( 100 );
 8006aac:	2064      	movs	r0, #100	; 0x64
 8006aae:	f7fc fa8f 	bl	8002fd0 <delay_us>

	lcd_bus_write(0x03);
 8006ab2:	2003      	movs	r0, #3
 8006ab4:	f7ff ff90 	bl	80069d8 <lcd_bus_write>

	lcd_bus_write(0x02);
 8006ab8:	2002      	movs	r0, #2
 8006aba:	f7ff ff8d 	bl	80069d8 <lcd_bus_write>
	delay_ms( 10 );
 8006abe:	200a      	movs	r0, #10
 8006ac0:	f7fc fa91 	bl	8002fe6 <delay_ms>

	lcd_command_set(LCD_INIT1_CMD);
 8006ac4:	2028      	movs	r0, #40	; 0x28
 8006ac6:	f7ff ffb5 	bl	8006a34 <lcd_command_set>
	delay_ms( 1 );
 8006aca:	2001      	movs	r0, #1
 8006acc:	f7fc fa8b 	bl	8002fe6 <delay_ms>

	lcd_command_set(LCD_INIT2_CMD);
 8006ad0:	200c      	movs	r0, #12
 8006ad2:	f7ff ffaf 	bl	8006a34 <lcd_command_set>
	delay_ms( 1 );
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	f7fc fa85 	bl	8002fe6 <delay_ms>

	lcd_command_set(LCD_INIT3_CMD);
 8006adc:	2006      	movs	r0, #6
 8006ade:	f7ff ffa9 	bl	8006a34 <lcd_command_set>
	delay_ms( 1 );
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	f7fc fa7f 	bl	8002fe6 <delay_ms>
}
 8006ae8:	bf00      	nop
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40021000 	.word	0x40021000

08006af0 <lcd_putchar>:

void lcd_putchar( char data )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	71fb      	strb	r3, [r7, #7]
	lcd_rs_set;
 8006afa:	2201      	movs	r2, #1
 8006afc:	2180      	movs	r1, #128	; 0x80
 8006afe:	480e      	ldr	r0, [pc, #56]	; (8006b38 <lcd_putchar+0x48>)
 8006b00:	f7fe fc48 	bl	8005394 <HAL_GPIO_WritePin>
	lcd_rw_clear;
 8006b04:	2200      	movs	r2, #0
 8006b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b0a:	480b      	ldr	r0, [pc, #44]	; (8006b38 <lcd_putchar+0x48>)
 8006b0c:	f7fe fc42 	bl	8005394 <HAL_GPIO_WritePin>

	delay_ms( 10 );
 8006b10:	200a      	movs	r0, #10
 8006b12:	f7fc fa68 	bl	8002fe6 <delay_ms>

	lcd_bus_write(data >> 4);
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	091b      	lsrs	r3, r3, #4
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff ff5b 	bl	80069d8 <lcd_bus_write>
	lcd_bus_write(data & 0x0F);
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff ff54 	bl	80069d8 <lcd_bus_write>
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40021000 	.word	0x40021000

08006b3c <lcd_puts>:

bool lcd_puts( char * string )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	if( string == NULL )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <lcd_puts+0x12>
	{
		return false;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e014      	b.n	8006b78 <lcd_puts+0x3c>
	}
	for(size_t i = 0; i < strlen( string ); i++ )
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	e009      	b.n	8006b68 <lcd_puts+0x2c>
	{
		lcd_putchar(string[i]);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4413      	add	r3, r2
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff ffc7 	bl	8006af0 <lcd_putchar>
	for(size_t i = 0; i < strlen( string ); i++ )
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7f9 fb31 	bl	80001d0 <strlen>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d3ee      	bcc.n	8006b54 <lcd_puts+0x18>
	}
	return true;
 8006b76:	2301      	movs	r3, #1
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <lwip_get_netif>:
ip4_addr_t netmask;
ip4_addr_t gw;

/* USER CODE BEGIN 2 */
const struct netif * const lwip_get_netif()
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
	return &gnetif;
 8006b84:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <lwip_get_netif+0x10>)
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	20014560 	.word	0x20014560

08006b94 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006b94:	b5b0      	push	{r4, r5, r7, lr}
 8006b96:	b08a      	sub	sp, #40	; 0x28
 8006b98:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f008 fabb 	bl	800f118 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006ba2:	4b2a      	ldr	r3, [pc, #168]	; (8006c4c <MX_LWIP_Init+0xb8>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006ba8:	4b29      	ldr	r3, [pc, #164]	; (8006c50 <MX_LWIP_Init+0xbc>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006bae:	4b29      	ldr	r3, [pc, #164]	; (8006c54 <MX_LWIP_Init+0xc0>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006bb4:	4b28      	ldr	r3, [pc, #160]	; (8006c58 <MX_LWIP_Init+0xc4>)
 8006bb6:	9302      	str	r3, [sp, #8]
 8006bb8:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <MX_LWIP_Init+0xc8>)
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <MX_LWIP_Init+0xc0>)
 8006bc2:	4a23      	ldr	r2, [pc, #140]	; (8006c50 <MX_LWIP_Init+0xbc>)
 8006bc4:	4921      	ldr	r1, [pc, #132]	; (8006c4c <MX_LWIP_Init+0xb8>)
 8006bc6:	4826      	ldr	r0, [pc, #152]	; (8006c60 <MX_LWIP_Init+0xcc>)
 8006bc8:	f00a f800 	bl	8010bcc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006bcc:	4824      	ldr	r0, [pc, #144]	; (8006c60 <MX_LWIP_Init+0xcc>)
 8006bce:	f00a f9b7 	bl	8010f40 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006bd2:	4b23      	ldr	r3, [pc, #140]	; (8006c60 <MX_LWIP_Init+0xcc>)
 8006bd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006bd8:	089b      	lsrs	r3, r3, #2
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006be4:	481e      	ldr	r0, [pc, #120]	; (8006c60 <MX_LWIP_Init+0xcc>)
 8006be6:	f00a f9bb 	bl	8010f60 <netif_set_up>
 8006bea:	e002      	b.n	8006bf2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006bec:	481c      	ldr	r0, [pc, #112]	; (8006c60 <MX_LWIP_Init+0xcc>)
 8006bee:	f00a fa23 	bl	8011038 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006bf2:	491c      	ldr	r1, [pc, #112]	; (8006c64 <MX_LWIP_Init+0xd0>)
 8006bf4:	481a      	ldr	r0, [pc, #104]	; (8006c60 <MX_LWIP_Init+0xcc>)
 8006bf6:	f00a fab9 	bl	801116c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8006bfe:	f107 0314 	add.w	r3, r7, #20
 8006c02:	2101      	movs	r1, #1
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fde1 	bl	80077cc <osSemaphoreCreate>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4a16      	ldr	r2, [pc, #88]	; (8006c68 <MX_LWIP_Init+0xd4>)
 8006c0e:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8006c10:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <MX_LWIP_Init+0xd8>)
 8006c12:	4a13      	ldr	r2, [pc, #76]	; (8006c60 <MX_LWIP_Init+0xcc>)
 8006c14:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006c16:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <MX_LWIP_Init+0xd4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a14      	ldr	r2, [pc, #80]	; (8006c6c <MX_LWIP_Init+0xd8>)
 8006c1c:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, link_state, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8006c1e:	4b14      	ldr	r3, [pc, #80]	; (8006c70 <MX_LWIP_Init+0xdc>)
 8006c20:	463c      	mov	r4, r7
 8006c22:	461d      	mov	r5, r3
 8006c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	6023      	str	r3, [r4, #0]
  linkStateTaskHandle = osThreadCreate (osThread(LinkThr), &link_arg);
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	490f      	ldr	r1, [pc, #60]	; (8006c6c <MX_LWIP_Init+0xd8>)
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fc60 	bl	80074f6 <osThreadCreate>
 8006c36:	4603      	mov	r3, r0
 8006c38:	4a0e      	ldr	r2, [pc, #56]	; (8006c74 <MX_LWIP_Init+0xe0>)
 8006c3a:	6013      	str	r3, [r2, #0]
  //osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
  //osThreadCreate (osThread(LinkThr), &link_arg);
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006c3c:	4808      	ldr	r0, [pc, #32]	; (8006c60 <MX_LWIP_Init+0xcc>)
 8006c3e:	f012 ff37 	bl	8019ab0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006c42:	bf00      	nop
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bdb0      	pop	{r4, r5, r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20014598 	.word	0x20014598
 8006c50:	2001459c 	.word	0x2001459c
 8006c54:	200145a0 	.word	0x200145a0
 8006c58:	0800f029 	.word	0x0800f029
 8006c5c:	080072fd 	.word	0x080072fd
 8006c60:	20014560 	.word	0x20014560
 8006c64:	08007369 	.word	0x08007369
 8006c68:	20000330 	.word	0x20000330
 8006c6c:	20014558 	.word	0x20014558
 8006c70:	080224e8 	.word	0x080224e8
 8006c74:	2000032c 	.word	0x2000032c

08006c78 <ethernetif_phy_irq>:
/* Global Ethernet handle */
ETH_HandleTypeDef heth;

/* USER CODE BEGIN 3 */
void ethernetif_phy_irq()
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
	osSignalSet (linkStateTaskHandle, SIGNAL_LINK_INTERRUPT);
 8006c7c:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <ethernetif_phy_irq+0x14>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2104      	movs	r1, #4
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fc86 	bl	8007594 <osSignalSet>
}
 8006c88:	bf00      	nop
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	2000032c 	.word	0x2000032c

08006c90 <link_state>:

void link_state(const void * arg)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
    struct link_str *link_arg = (struct link_str *)arg;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	61fb      	str	r3, [r7, #28]
    uint32_t regval = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	61bb      	str	r3, [r7, #24]
    osEvent event;

    for (;;)
    {
    	event = osSignalWait (SIGNAL_LINK_INTERRUPT, osWaitForever);
 8006ca0:	f107 030c 	add.w	r3, r7, #12
 8006ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ca8:	2104      	movs	r1, #4
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fcb2 	bl	8007614 <osSignalWait>

        if (event.status == osEventSignal)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d1f4      	bne.n	8006ca0 <link_state+0x10>
        {
            /* Read PHY_MISR*/
            HAL_ETH_ReadPHYRegister((ETH_HandleTypeDef *)&heth, PHY_INTERRUPT_STATUS, &regval);
 8006cb6:	f107 0318 	add.w	r3, r7, #24
 8006cba:	461a      	mov	r2, r3
 8006cbc:	211b      	movs	r1, #27
 8006cbe:	480f      	ldr	r0, [pc, #60]	; (8006cfc <link_state+0x6c>)
 8006cc0:	f7fd fa29 	bl	8004116 <HAL_ETH_ReadPHYRegister>

            /* Check whether the PHY link is up */
            if (regval & PHY_LINK_INT_UP_OCCURRED)
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <link_state+0x50>
            {
                /* network cable is connected */
                netif_set_link_up(link_arg->netif);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f00a f9e2 	bl	801109c <netif_set_link_up>
				BSP_LED_Off(RED);
 8006cd8:	2002      	movs	r0, #2
 8006cda:	f7fc fa21 	bl	8003120 <BSP_LED_Off>
 8006cde:	e7df      	b.n	8006ca0 <link_state+0x10>
            }
            else if (regval & PHY_LINK_INT_DOWN_OCCURED)
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0da      	beq.n	8006ca0 <link_state+0x10>
            {
            	/* network cable is dis-connected */
                netif_set_link_down(link_arg->netif);
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f00a fa0c 	bl	801110c <netif_set_link_down>
				BSP_LED_On(RED);
 8006cf4:	2002      	movs	r0, #2
 8006cf6:	f7fc f9f9 	bl	80030ec <BSP_LED_On>
    	event = osSignalWait (SIGNAL_LINK_INTERRUPT, osWaitForever);
 8006cfa:	e7d1      	b.n	8006ca0 <link_state+0x10>
 8006cfc:	20015e74 	.word	0x20015e74

08006d00 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08e      	sub	sp, #56	; 0x38
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	60da      	str	r2, [r3, #12]
 8006d16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a4a      	ldr	r2, [pc, #296]	; (8006e48 <HAL_ETH_MspInit+0x148>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	f040 808d 	bne.w	8006e3e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006d24:	2300      	movs	r3, #0
 8006d26:	623b      	str	r3, [r7, #32]
 8006d28:	4b48      	ldr	r3, [pc, #288]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	4a47      	ldr	r2, [pc, #284]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d32:	6313      	str	r3, [r2, #48]	; 0x30
 8006d34:	4b45      	ldr	r3, [pc, #276]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	4a40      	ldr	r2, [pc, #256]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d50:	4b3e      	ldr	r3, [pc, #248]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	4b3a      	ldr	r3, [pc, #232]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	4a39      	ldr	r2, [pc, #228]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d6c:	4b37      	ldr	r3, [pc, #220]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	4b33      	ldr	r3, [pc, #204]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	4a32      	ldr	r2, [pc, #200]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d82:	f043 0304 	orr.w	r3, r3, #4
 8006d86:	6313      	str	r3, [r2, #48]	; 0x30
 8006d88:	4b30      	ldr	r3, [pc, #192]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	4b2c      	ldr	r3, [pc, #176]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	4a2b      	ldr	r2, [pc, #172]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	6313      	str	r3, [r2, #48]	; 0x30
 8006da4:	4b29      	ldr	r3, [pc, #164]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	4a24      	ldr	r2, [pc, #144]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006dba:	f043 0302 	orr.w	r3, r3, #2
 8006dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8006dc0:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <HAL_ETH_MspInit+0x14c>)
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006dcc:	2332      	movs	r3, #50	; 0x32
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ddc:	230b      	movs	r3, #11
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006de4:	4619      	mov	r1, r3
 8006de6:	481a      	ldr	r0, [pc, #104]	; (8006e50 <HAL_ETH_MspInit+0x150>)
 8006de8:	f7fe f824 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006dec:	2386      	movs	r3, #134	; 0x86
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df0:	2302      	movs	r3, #2
 8006df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006dfc:	230b      	movs	r3, #11
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e04:	4619      	mov	r1, r3
 8006e06:	4813      	ldr	r0, [pc, #76]	; (8006e54 <HAL_ETH_MspInit+0x154>)
 8006e08:	f7fe f814 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXEN_Pin|RMII_TXD0_Pin|RMII_TXD1_Pin;
 8006e0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e12:	2302      	movs	r3, #2
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e1e:	230b      	movs	r3, #11
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e26:	4619      	mov	r1, r3
 8006e28:	480b      	ldr	r0, [pc, #44]	; (8006e58 <HAL_ETH_MspInit+0x158>)
 8006e2a:	f7fe f803 	bl	8004e34 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2105      	movs	r1, #5
 8006e32:	203d      	movs	r0, #61	; 0x3d
 8006e34:	f7fd ffd4 	bl	8004de0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006e38:	203d      	movs	r0, #61	; 0x3d
 8006e3a:	f7fd ffed 	bl	8004e18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006e3e:	bf00      	nop
 8006e40:	3738      	adds	r7, #56	; 0x38
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40028000 	.word	0x40028000
 8006e4c:	40023800 	.word	0x40023800
 8006e50:	40020800 	.word	0x40020800
 8006e54:	40020000 	.word	0x40020000
 8006e58:	40020400 	.word	0x40020400

08006e5c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <HAL_ETH_RxCpltCallback+0x1c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fd1b 	bl	80078a4 <osSemaphoreRelease>
}
 8006e6e:	bf00      	nop
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000334 	.word	0x20000334

08006e7c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006e7c:	b5b0      	push	{r4, r5, r7, lr}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006e84:	4b54      	ldr	r3, [pc, #336]	; (8006fd8 <low_level_init+0x15c>)
 8006e86:	4a55      	ldr	r2, [pc, #340]	; (8006fdc <low_level_init+0x160>)
 8006e88:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006e8a:	4b53      	ldr	r3, [pc, #332]	; (8006fd8 <low_level_init+0x15c>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006e90:	4b51      	ldr	r3, [pc, #324]	; (8006fd8 <low_level_init+0x15c>)
 8006e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e96:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006e98:	4b4f      	ldr	r3, [pc, #316]	; (8006fd8 <low_level_init+0x15c>)
 8006e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e9e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = KSZ8021RNL_PHY_ADDRESS;
 8006ea0:	4b4d      	ldr	r3, [pc, #308]	; (8006fd8 <low_level_init+0x15c>)
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x10;
 8006ea6:	2310      	movs	r3, #16
 8006ea8:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x55;
 8006eac:	2355      	movs	r3, #85	; 0x55
 8006eae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0x03;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x00;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x44;
 8006ebe:	2344      	movs	r3, #68	; 0x44
 8006ec0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x12;
 8006ec4:	2312      	movs	r3, #18
 8006ec6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 8006eca:	4a43      	ldr	r2, [pc, #268]	; (8006fd8 <low_level_init+0x15c>)
 8006ecc:	f107 0320 	add.w	r3, r7, #32
 8006ed0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006ed2:	4b41      	ldr	r3, [pc, #260]	; (8006fd8 <low_level_init+0x15c>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006ed8:	4b3f      	ldr	r3, [pc, #252]	; (8006fd8 <low_level_init+0x15c>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006ede:	4b3e      	ldr	r3, [pc, #248]	; (8006fd8 <low_level_init+0x15c>)
 8006ee0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006ee4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  phy_bootstrap();
 8006ee6:	f7fc fbe5 	bl	80036b4 <phy_bootstrap>
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006eea:	483b      	ldr	r0, [pc, #236]	; (8006fd8 <low_level_init+0x15c>)
 8006eec:	f7fc fd3c 	bl	8003968 <HAL_ETH_Init>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hal_eth_init_status == HAL_OK)
 8006ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d108      	bne.n	8006f10 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f04:	f043 0304 	orr.w	r3, r3, #4
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006f10:	2304      	movs	r3, #4
 8006f12:	4a33      	ldr	r2, [pc, #204]	; (8006fe0 <low_level_init+0x164>)
 8006f14:	4933      	ldr	r1, [pc, #204]	; (8006fe4 <low_level_init+0x168>)
 8006f16:	4830      	ldr	r0, [pc, #192]	; (8006fd8 <low_level_init+0x15c>)
 8006f18:	f7fc fe3a 	bl	8003b90 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	4a32      	ldr	r2, [pc, #200]	; (8006fe8 <low_level_init+0x16c>)
 8006f20:	4932      	ldr	r1, [pc, #200]	; (8006fec <low_level_init+0x170>)
 8006f22:	482d      	ldr	r0, [pc, #180]	; (8006fd8 <low_level_init+0x15c>)
 8006f24:	f7fc fe9d 	bl	8003c62 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2206      	movs	r2, #6
 8006f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006f30:	4b29      	ldr	r3, [pc, #164]	; (8006fd8 <low_level_init+0x15c>)
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006f3c:	4b26      	ldr	r3, [pc, #152]	; (8006fd8 <low_level_init+0x15c>)
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	785a      	ldrb	r2, [r3, #1]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006f48:	4b23      	ldr	r3, [pc, #140]	; (8006fd8 <low_level_init+0x15c>)
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	789a      	ldrb	r2, [r3, #2]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006f54:	4b20      	ldr	r3, [pc, #128]	; (8006fd8 <low_level_init+0x15c>)
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	78da      	ldrb	r2, [r3, #3]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006f60:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <low_level_init+0x15c>)
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	791a      	ldrb	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <low_level_init+0x15c>)
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	795a      	ldrb	r2, [r3, #5]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006f7e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f86:	f043 030a 	orr.w	r3, r3, #10
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006f96:	f107 031c 	add.w	r3, r7, #28
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fc15 	bl	80077cc <osSemaphoreCreate>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4a12      	ldr	r2, [pc, #72]	; (8006ff0 <low_level_init+0x174>)
 8006fa6:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006fa8:	4b12      	ldr	r3, [pc, #72]	; (8006ff4 <low_level_init+0x178>)
 8006faa:	f107 0408 	add.w	r4, r7, #8
 8006fae:	461d      	mov	r5, r3
 8006fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fa99 	bl	80074f6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006fc4:	4804      	ldr	r0, [pc, #16]	; (8006fd8 <low_level_init+0x15c>)
 8006fc6:	f7fd f974 	bl	80042b2 <HAL_ETH_Start>

/* USER CODE BEGIN PHY_PRE_CONFIG */
    phy_init(&heth);
 8006fca:	4803      	ldr	r0, [pc, #12]	; (8006fd8 <low_level_init+0x15c>)
 8006fcc:	f7fc fbc0 	bl	8003750 <phy_init>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006fd0:	bf00      	nop
 8006fd2:	3728      	adds	r7, #40	; 0x28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8006fd8:	20015e74 	.word	0x20015e74
 8006fdc:	40028000 	.word	0x40028000
 8006fe0:	20015ebc 	.word	0x20015ebc
 8006fe4:	200145a4 	.word	0x200145a4
 8006fe8:	20014624 	.word	0x20014624
 8006fec:	20015df4 	.word	0x20015df4
 8006ff0:	20000334 	.word	0x20000334
 8006ff4:	08022504 	.word	0x08022504

08006ff8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	; 0x28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007002:	4b4b      	ldr	r3, [pc, #300]	; (8007130 <low_level_output+0x138>)
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800701a:	4b45      	ldr	r3, [pc, #276]	; (8007130 <low_level_output+0x138>)
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	623b      	str	r3, [r7, #32]
 8007028:	e05a      	b.n	80070e0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	da03      	bge.n	800703a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007032:	23f8      	movs	r3, #248	; 0xf8
 8007034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007038:	e05c      	b.n	80070f4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	895b      	ldrh	r3, [r3, #10]
 800703e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007044:	e02f      	b.n	80070a6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	18d0      	adds	r0, r2, r3
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	18d1      	adds	r1, r2, r3
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800705a:	3304      	adds	r3, #4
 800705c:	461a      	mov	r2, r3
 800705e:	f016 ffc9 	bl	801dff4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	da03      	bge.n	8007078 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007070:	23f8      	movs	r3, #248	; 0xf8
 8007072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007076:	e03d      	b.n	80070f4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007088:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007094:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80070a0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	4413      	add	r3, r2
 80070ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d8c8      	bhi.n	8007046 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	18d0      	adds	r0, r2, r3
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	4413      	add	r3, r2
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4619      	mov	r1, r3
 80070c6:	f016 ff95 	bl	801dff4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	623b      	str	r3, [r7, #32]
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1a1      	bne.n	800702a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80070e6:	6979      	ldr	r1, [r7, #20]
 80070e8:	4811      	ldr	r0, [pc, #68]	; (8007130 <low_level_output+0x138>)
 80070ea:	f7fc fe27 	bl	8003d3c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80070f4:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <low_level_output+0x138>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fc:	3314      	adds	r3, #20
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00d      	beq.n	8007124 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <low_level_output+0x138>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007110:	3314      	adds	r3, #20
 8007112:	2220      	movs	r2, #32
 8007114:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007116:	4b06      	ldr	r3, [pc, #24]	; (8007130 <low_level_output+0x138>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711e:	3304      	adds	r3, #4
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007124:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007128:	4618      	mov	r0, r3
 800712a:	3728      	adds	r7, #40	; 0x28
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20015e74 	.word	0x20015e74

08007134 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08c      	sub	sp, #48	; 0x30
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800713c:	2300      	movs	r3, #0
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007140:	2300      	movs	r3, #0
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007158:	484f      	ldr	r0, [pc, #316]	; (8007298 <low_level_input+0x164>)
 800715a:	f7fc fed9 	bl	8003f10 <HAL_ETH_GetReceivedFrame_IT>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <low_level_input+0x34>

    return NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	e092      	b.n	800728e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007168:	4b4b      	ldr	r3, [pc, #300]	; (8007298 <low_level_input+0x164>)
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800716e:	4b4a      	ldr	r3, [pc, #296]	; (8007298 <low_level_input+0x164>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007174:	89fb      	ldrh	r3, [r7, #14]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d007      	beq.n	800718a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800717a:	89fb      	ldrh	r3, [r7, #14]
 800717c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007180:	4619      	mov	r1, r3
 8007182:	2000      	movs	r0, #0
 8007184:	f00a f8bc 	bl	8011300 <pbuf_alloc>
 8007188:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d04b      	beq.n	8007228 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007190:	4b41      	ldr	r3, [pc, #260]	; (8007298 <low_level_input+0x164>)
 8007192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007194:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	62bb      	str	r3, [r7, #40]	; 0x28
 800719e:	e040      	b.n	8007222 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	895b      	ldrh	r3, [r3, #10]
 80071a4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80071aa:	e021      	b.n	80071f0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	18d0      	adds	r0, r2, r3
 80071b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	18d1      	adds	r1, r2, r3
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80071c0:	3304      	adds	r3, #4
 80071c2:	461a      	mov	r2, r3
 80071c4:	f016 ff16 	bl	801dff4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80071d4:	69fa      	ldr	r2, [r7, #28]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	4413      	add	r3, r2
 80071da:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80071de:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80071ea:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d8d6      	bhi.n	80071ac <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	18d0      	adds	r0, r2, r3
 8007206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4619      	mov	r1, r3
 8007210:	f016 fef0 	bl	801dff4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	4413      	add	r3, r2
 800721a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	62bb      	str	r3, [r7, #40]	; 0x28
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1bb      	bne.n	80071a0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007228:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <low_level_input+0x164>)
 800722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	e00b      	b.n	800724c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	3301      	adds	r3, #1
 800724a:	613b      	str	r3, [r7, #16]
 800724c:	4b12      	ldr	r3, [pc, #72]	; (8007298 <low_level_input+0x164>)
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	429a      	cmp	r2, r3
 8007254:	d3ee      	bcc.n	8007234 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007256:	4b10      	ldr	r3, [pc, #64]	; (8007298 <low_level_input+0x164>)
 8007258:	2200      	movs	r2, #0
 800725a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800725c:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <low_level_input+0x164>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007264:	3314      	adds	r3, #20
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00d      	beq.n	800728c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <low_level_input+0x164>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007278:	3314      	adds	r3, #20
 800727a:	2280      	movs	r2, #128	; 0x80
 800727c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800727e:	4b06      	ldr	r3, [pc, #24]	; (8007298 <low_level_input+0x164>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007286:	3308      	adds	r3, #8
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800728e:	4618      	mov	r0, r3
 8007290:	3730      	adds	r7, #48	; 0x30
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20015e74 	.word	0x20015e74

0800729c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80072a8:	4b12      	ldr	r3, [pc, #72]	; (80072f4 <ethernetif_input+0x58>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 faa9 	bl	8007808 <osSemaphoreWait>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f5      	bne.n	80072a8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80072bc:	480e      	ldr	r0, [pc, #56]	; (80072f8 <ethernetif_input+0x5c>)
 80072be:	f016 fd05 	bl	801dccc <sys_mutex_lock>
        p = low_level_input( netif );
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f7ff ff36 	bl	8007134 <low_level_input>
 80072c8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	68f9      	ldr	r1, [r7, #12]
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80072e0:	68b8      	ldr	r0, [r7, #8]
 80072e2:	f00a fb23 	bl	801192c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80072e6:	4804      	ldr	r0, [pc, #16]	; (80072f8 <ethernetif_input+0x5c>)
 80072e8:	f016 fcff 	bl	801dcea <sys_mutex_unlock>
      } while(p!=NULL);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e4      	bne.n	80072bc <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80072f2:	e7d9      	b.n	80072a8 <ethernetif_input+0xc>
 80072f4:	20000334 	.word	0x20000334
 80072f8:	200176d0 	.word	0x200176d0

080072fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <ethernetif_init+0x1c>
 800730a:	4b0e      	ldr	r3, [pc, #56]	; (8007344 <ethernetif_init+0x48>)
 800730c:	f240 2246 	movw	r2, #582	; 0x246
 8007310:	490d      	ldr	r1, [pc, #52]	; (8007348 <ethernetif_init+0x4c>)
 8007312:	480e      	ldr	r0, [pc, #56]	; (800734c <ethernetif_init+0x50>)
 8007314:	f017 fbb2 	bl	801ea7c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2273      	movs	r2, #115	; 0x73
 800731c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2274      	movs	r2, #116	; 0x74
 8007324:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a09      	ldr	r2, [pc, #36]	; (8007350 <ethernetif_init+0x54>)
 800732c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a08      	ldr	r2, [pc, #32]	; (8007354 <ethernetif_init+0x58>)
 8007332:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fda1 	bl	8006e7c <low_level_init>

  return ERR_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	08022518 	.word	0x08022518
 8007348:	08022534 	.word	0x08022534
 800734c:	08022544 	.word	0x08022544
 8007350:	0801ba55 	.word	0x0801ba55
 8007354:	08006ff9 	.word	0x08006ff9

08007358 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800735c:	f7fd fc58 	bl	8004c10 <HAL_GetTick>
 8007360:	4603      	mov	r3, r0
}
 8007362:	4618      	mov	r0, r3
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800737e:	089b      	lsrs	r3, r3, #2
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d05d      	beq.n	8007446 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800738a:	4b34      	ldr	r3, [pc, #208]	; (800745c <ethernetif_update_config+0xf4>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d03f      	beq.n	8007412 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007396:	2100      	movs	r1, #0
 8007398:	4830      	ldr	r0, [pc, #192]	; (800745c <ethernetif_update_config+0xf4>)
 800739a:	f7fc ff24 	bl	80041e6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800739e:	f7fd fc37 	bl	8004c10 <HAL_GetTick>
 80073a2:	4603      	mov	r3, r0
 80073a4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80073a6:	f107 0308 	add.w	r3, r7, #8
 80073aa:	461a      	mov	r2, r3
 80073ac:	2101      	movs	r1, #1
 80073ae:	482b      	ldr	r0, [pc, #172]	; (800745c <ethernetif_update_config+0xf4>)
 80073b0:	f7fc feb1 	bl	8004116 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80073b4:	f7fd fc2c 	bl	8004c10 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073c2:	d828      	bhi.n	8007416 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0eb      	beq.n	80073a6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80073ce:	f107 0308 	add.w	r3, r7, #8
 80073d2:	461a      	mov	r2, r3
 80073d4:	211e      	movs	r1, #30
 80073d6:	4821      	ldr	r0, [pc, #132]	; (800745c <ethernetif_update_config+0xf4>)
 80073d8:	f7fc fe9d 	bl	8004116 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80073e6:	4b1d      	ldr	r3, [pc, #116]	; (800745c <ethernetif_update_config+0xf4>)
 80073e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073ec:	60da      	str	r2, [r3, #12]
 80073ee:	e002      	b.n	80073f6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80073f0:	4b1a      	ldr	r3, [pc, #104]	; (800745c <ethernetif_update_config+0xf4>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007400:	4b16      	ldr	r3, [pc, #88]	; (800745c <ethernetif_update_config+0xf4>)
 8007402:	2200      	movs	r2, #0
 8007404:	609a      	str	r2, [r3, #8]
 8007406:	e016      	b.n	8007436 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007408:	4b14      	ldr	r3, [pc, #80]	; (800745c <ethernetif_update_config+0xf4>)
 800740a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800740e:	609a      	str	r2, [r3, #8]
 8007410:	e011      	b.n	8007436 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007412:	bf00      	nop
 8007414:	e000      	b.n	8007418 <ethernetif_update_config+0xb0>
          goto error;
 8007416:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <ethernetif_update_config+0xf4>)
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	08db      	lsrs	r3, r3, #3
 800741e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007420:	4b0e      	ldr	r3, [pc, #56]	; (800745c <ethernetif_update_config+0xf4>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	085b      	lsrs	r3, r3, #1
 8007426:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007428:	4313      	orrs	r3, r2
 800742a:	b29b      	uxth	r3, r3
 800742c:	461a      	mov	r2, r3
 800742e:	2100      	movs	r1, #0
 8007430:	480a      	ldr	r0, [pc, #40]	; (800745c <ethernetif_update_config+0xf4>)
 8007432:	f7fc fed8 	bl	80041e6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007436:	2100      	movs	r1, #0
 8007438:	4808      	ldr	r0, [pc, #32]	; (800745c <ethernetif_update_config+0xf4>)
 800743a:	f7fc ff99 	bl	8004370 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800743e:	4807      	ldr	r0, [pc, #28]	; (800745c <ethernetif_update_config+0xf4>)
 8007440:	f7fc ff37 	bl	80042b2 <HAL_ETH_Start>
 8007444:	e002      	b.n	800744c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007446:	4805      	ldr	r0, [pc, #20]	; (800745c <ethernetif_update_config+0xf4>)
 8007448:	f7fc ff62 	bl	8004310 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f807 	bl	8007460 <ethernetif_notify_conn_changed>
}
 8007452:	bf00      	nop
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20015e74 	.word	0x20015e74

08007460 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800747e:	2300      	movs	r3, #0
 8007480:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007486:	2b84      	cmp	r3, #132	; 0x84
 8007488:	d005      	beq.n	8007496 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800748a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	3303      	adds	r3, #3
 8007494:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007496:	68fb      	ldr	r3, [r7, #12]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074aa:	f3ef 8305 	mrs	r3, IPSR
 80074ae:	607b      	str	r3, [r7, #4]
  return(result);
 80074b0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bf14      	ite	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	2300      	moveq	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80074cc:	f001 fd14 	bl	8008ef8 <vTaskStartScheduler>
  
  return osOK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80074da:	f7ff ffe3 	bl	80074a4 <inHandlerMode>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80074e4:	f001 fe12 	bl	800910c <xTaskGetTickCountFromISR>
 80074e8:	4603      	mov	r3, r0
 80074ea:	e002      	b.n	80074f2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80074ec:	f001 fdfe 	bl	80090ec <xTaskGetTickCount>
 80074f0:	4603      	mov	r3, r0
  }
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80074f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f8:	b087      	sub	sp, #28
 80074fa:	af02      	add	r7, sp, #8
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685c      	ldr	r4, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800750c:	b29e      	uxth	r6, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff ffad 	bl	8007474 <makeFreeRtosPriority>
 800751a:	4602      	mov	r2, r0
 800751c:	f107 030c 	add.w	r3, r7, #12
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	9200      	str	r2, [sp, #0]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	4632      	mov	r2, r6
 8007528:	4629      	mov	r1, r5
 800752a:	4620      	mov	r0, r4
 800752c:	f001 fad6 	bl	8008adc <xTaskCreate>
 8007530:	4603      	mov	r3, r0
 8007532:	2b01      	cmp	r3, #1
 8007534:	d001      	beq.n	800753a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007536:	2300      	movs	r3, #0
 8007538:	e000      	b.n	800753c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800753a:	68fb      	ldr	r3, [r7, #12]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007544 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8007548:	f002 f8d2 	bl	80096f0 <xTaskGetCurrentTaskHandle>
 800754c:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800754e:	4618      	mov	r0, r3
 8007550:	bd80      	pop	{r7, pc}

08007552 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fc08 	bl	8008d70 <vTaskDelete>
  return osOK;
 8007560:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <osDelay+0x16>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	e000      	b.n	8007582 <osDelay+0x18>
 8007580:	2301      	movs	r3, #1
 8007582:	4618      	mov	r0, r3
 8007584:	f001 fc84 	bl	8008e90 <vTaskDelay>
  
  return osOK;
 8007588:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af02      	add	r7, sp, #8
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80075a6:	f7ff ff7d 	bl	80074a4 <inHandlerMode>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01c      	beq.n	80075ea <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	f107 0208 	add.w	r2, r7, #8
 80075b6:	f107 030c 	add.w	r3, r7, #12
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	4613      	mov	r3, r2
 80075be:	2201      	movs	r2, #1
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f002 fb7f 	bl	8009cc4 <xTaskGenericNotifyFromISR>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d002      	beq.n	80075d2 <osSignalSet+0x3e>
      return 0x80000000;
 80075cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075d0:	e019      	b.n	8007606 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <osSignalSet+0x70>
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <osSignalSet+0x7c>)
 80075da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	e00c      	b.n	8007604 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	f107 0308 	add.w	r3, r7, #8
 80075f0:	2201      	movs	r2, #1
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f002 faa8 	bl	8009b48 <xTaskGenericNotify>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d002      	beq.n	8007604 <osSignalSet+0x70>
    return 0x80000000;
 80075fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007602:	e000      	b.n	8007606 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8007604:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8007614:	b590      	push	{r4, r7, lr}
 8007616:	b089      	sub	sp, #36	; 0x24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762e:	d103      	bne.n	8007638 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8007630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007634:	61fb      	str	r3, [r7, #28]
 8007636:	e009      	b.n	800764c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d006      	beq.n	800764c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <osSignalWait+0x38>
      ticks = 1;
 8007648:	2301      	movs	r3, #1
 800764a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800764c:	f7ff ff2a 	bl	80074a4 <inHandlerMode>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8007656:	2382      	movs	r3, #130	; 0x82
 8007658:	613b      	str	r3, [r7, #16]
 800765a:	e01b      	b.n	8007694 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	f107 0310 	add.w	r3, r7, #16
 8007662:	1d1a      	adds	r2, r3, #4
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2000      	movs	r0, #0
 8007668:	f002 fa0e 	bl	8009a88 <xTaskNotifyWait>
 800766c:	4603      	mov	r3, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	d008      	beq.n	8007684 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <osSignalWait+0x6a>
 8007678:	2300      	movs	r3, #0
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	e00a      	b.n	8007694 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800767e:	2340      	movs	r3, #64	; 0x40
 8007680:	613b      	str	r3, [r7, #16]
 8007682:	e007      	b.n	8007694 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	da02      	bge.n	8007690 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800768a:	2386      	movs	r3, #134	; 0x86
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	e001      	b.n	8007694 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8007690:	2308      	movs	r3, #8
 8007692:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	461c      	mov	r4, r3
 8007698:	f107 0310 	add.w	r3, r7, #16
 800769c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	3724      	adds	r7, #36	; 0x24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd90      	pop	{r4, r7, pc}

080076ac <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80076b4:	2001      	movs	r0, #1
 80076b6:	f000 fbba 	bl	8007e2e <xQueueCreateMutex>
 80076ba:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <osMutexWait+0x18>
    return osErrorParameter;
 80076d8:	2380      	movs	r3, #128	; 0x80
 80076da:	e03a      	b.n	8007752 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e6:	d103      	bne.n	80076f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	e009      	b.n	8007704 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <osMutexWait+0x40>
      ticks = 1;
 8007700:	2301      	movs	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007704:	f7ff fece 	bl	80074a4 <inHandlerMode>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d017      	beq.n	800773e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800770e:	f107 0308 	add.w	r3, r7, #8
 8007712:	461a      	mov	r2, r3
 8007714:	2100      	movs	r1, #0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 ffb4 	bl	8008684 <xQueueReceiveFromISR>
 800771c:	4603      	mov	r3, r0
 800771e:	2b01      	cmp	r3, #1
 8007720:	d001      	beq.n	8007726 <osMutexWait+0x62>
      return osErrorOS;
 8007722:	23ff      	movs	r3, #255	; 0xff
 8007724:	e015      	b.n	8007752 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d011      	beq.n	8007750 <osMutexWait+0x8c>
 800772c:	4b0b      	ldr	r3, [pc, #44]	; (800775c <osMutexWait+0x98>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	e008      	b.n	8007750 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fe93 	bl	800846c <xQueueSemaphoreTake>
 8007746:	4603      	mov	r3, r0
 8007748:	2b01      	cmp	r3, #1
 800774a:	d001      	beq.n	8007750 <osMutexWait+0x8c>
    return osErrorOS;
 800774c:	23ff      	movs	r3, #255	; 0xff
 800774e:	e000      	b.n	8007752 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007768:	2300      	movs	r3, #0
 800776a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800776c:	2300      	movs	r3, #0
 800776e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007770:	f7ff fe98 	bl	80074a4 <inHandlerMode>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d016      	beq.n	80077a8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800777a:	f107 0308 	add.w	r3, r7, #8
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fd06 	bl	8008192 <xQueueGiveFromISR>
 8007786:	4603      	mov	r3, r0
 8007788:	2b01      	cmp	r3, #1
 800778a:	d001      	beq.n	8007790 <osMutexRelease+0x30>
      return osErrorOS;
 800778c:	23ff      	movs	r3, #255	; 0xff
 800778e:	e017      	b.n	80077c0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d013      	beq.n	80077be <osMutexRelease+0x5e>
 8007796:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <osMutexRelease+0x68>)
 8007798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	e00a      	b.n	80077be <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80077a8:	2300      	movs	r3, #0
 80077aa:	2200      	movs	r2, #0
 80077ac:	2100      	movs	r1, #0
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fb56 	bl	8007e60 <xQueueGenericSend>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d001      	beq.n	80077be <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80077ba:	23ff      	movs	r3, #255	; 0xff
 80077bc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80077be:	68fb      	ldr	r3, [r7, #12]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d110      	bne.n	80077fe <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80077dc:	2203      	movs	r2, #3
 80077de:	2100      	movs	r1, #0
 80077e0:	2001      	movs	r0, #1
 80077e2:	f000 fab5 	bl	8007d50 <xQueueGenericCreate>
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d005      	beq.n	80077fa <osSemaphoreCreate+0x2e>
 80077ee:	2300      	movs	r3, #0
 80077f0:	2200      	movs	r2, #0
 80077f2:	2100      	movs	r1, #0
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fb33 	bl	8007e60 <xQueueGenericSend>
    return sema;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	e000      	b.n	8007800 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80077fe:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800781c:	2380      	movs	r3, #128	; 0x80
 800781e:	e03a      	b.n	8007896 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800782a:	d103      	bne.n	8007834 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800782c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e009      	b.n	8007848 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d006      	beq.n	8007848 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <osSemaphoreWait+0x40>
      ticks = 1;
 8007844:	2301      	movs	r3, #1
 8007846:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007848:	f7ff fe2c 	bl	80074a4 <inHandlerMode>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d017      	beq.n	8007882 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007852:	f107 0308 	add.w	r3, r7, #8
 8007856:	461a      	mov	r2, r3
 8007858:	2100      	movs	r1, #0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 ff12 	bl	8008684 <xQueueReceiveFromISR>
 8007860:	4603      	mov	r3, r0
 8007862:	2b01      	cmp	r3, #1
 8007864:	d001      	beq.n	800786a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007866:	23ff      	movs	r3, #255	; 0xff
 8007868:	e015      	b.n	8007896 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d011      	beq.n	8007894 <osSemaphoreWait+0x8c>
 8007870:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <osSemaphoreWait+0x98>)
 8007872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	e008      	b.n	8007894 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007882:	68f9      	ldr	r1, [r7, #12]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fdf1 	bl	800846c <xQueueSemaphoreTake>
 800788a:	4603      	mov	r3, r0
 800788c:	2b01      	cmp	r3, #1
 800788e:	d001      	beq.n	8007894 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007890:	23ff      	movs	r3, #255	; 0xff
 8007892:	e000      	b.n	8007896 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	e000ed04 	.word	0xe000ed04

080078a4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80078b4:	f7ff fdf6 	bl	80074a4 <inHandlerMode>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d016      	beq.n	80078ec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80078be:	f107 0308 	add.w	r3, r7, #8
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fc64 	bl	8008192 <xQueueGiveFromISR>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d001      	beq.n	80078d4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80078d0:	23ff      	movs	r3, #255	; 0xff
 80078d2:	e017      	b.n	8007904 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d013      	beq.n	8007902 <osSemaphoreRelease+0x5e>
 80078da:	4b0c      	ldr	r3, [pc, #48]	; (800790c <osSemaphoreRelease+0x68>)
 80078dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	e00a      	b.n	8007902 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80078ec:	2300      	movs	r3, #0
 80078ee:	2200      	movs	r2, #0
 80078f0:	2100      	movs	r1, #0
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fab4 	bl	8007e60 <xQueueGenericSend>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d001      	beq.n	8007902 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80078fe:	23ff      	movs	r3, #255	; 0xff
 8007900:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007902:	68fb      	ldr	r3, [r7, #12]
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	e000ed04 	.word	0xe000ed04

08007910 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007918:	f7ff fdc4 	bl	80074a4 <inHandlerMode>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007922:	2382      	movs	r3, #130	; 0x82
 8007924:	e003      	b.n	800792e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 ff68 	bl	80087fc <vQueueDelete>

  return osOK; 
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b082      	sub	sp, #8
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	4619      	mov	r1, r3
 800794c:	f000 fa00 	bl	8007d50 <xQueueGenericCreate>
 8007950:	4603      	mov	r3, r0
#endif
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007968:	2300      	movs	r3, #0
 800796a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <osMessagePut+0x1e>
    ticks = 1;
 8007976:	2301      	movs	r3, #1
 8007978:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800797a:	f7ff fd93 	bl	80074a4 <inHandlerMode>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d018      	beq.n	80079b6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007984:	f107 0210 	add.w	r2, r7, #16
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	2300      	movs	r3, #0
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 fb64 	bl	800805c <xQueueGenericSendFromISR>
 8007994:	4603      	mov	r3, r0
 8007996:	2b01      	cmp	r3, #1
 8007998:	d001      	beq.n	800799e <osMessagePut+0x42>
      return osErrorOS;
 800799a:	23ff      	movs	r3, #255	; 0xff
 800799c:	e018      	b.n	80079d0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d014      	beq.n	80079ce <osMessagePut+0x72>
 80079a4:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <osMessagePut+0x7c>)
 80079a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	e00b      	b.n	80079ce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80079b6:	f107 0108 	add.w	r1, r7, #8
 80079ba:	2300      	movs	r3, #0
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 fa4e 	bl	8007e60 <xQueueGenericSend>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d001      	beq.n	80079ce <osMessagePut+0x72>
      return osErrorOS;
 80079ca:	23ff      	movs	r3, #255	; 0xff
 80079cc:	e000      	b.n	80079d0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	e000ed04 	.word	0xe000ed04

080079dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80079dc:	b590      	push	{r4, r7, lr}
 80079de:	b08b      	sub	sp, #44	; 0x2c
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <osMessageGet+0x30>
    event.status = osErrorParameter;
 80079f6:	2380      	movs	r3, #128	; 0x80
 80079f8:	617b      	str	r3, [r7, #20]
    return event;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	461c      	mov	r4, r3
 80079fe:	f107 0314 	add.w	r3, r7, #20
 8007a02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a0a:	e054      	b.n	8007ab6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a1a:	d103      	bne.n	8007a24 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
 8007a22:	e009      	b.n	8007a38 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d006      	beq.n	8007a38 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <osMessageGet+0x5c>
      ticks = 1;
 8007a34:	2301      	movs	r3, #1
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007a38:	f7ff fd34 	bl	80074a4 <inHandlerMode>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d01c      	beq.n	8007a7c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007a42:	f107 0220 	add.w	r2, r7, #32
 8007a46:	f107 0314 	add.w	r3, r7, #20
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	68b8      	ldr	r0, [r7, #8]
 8007a50:	f000 fe18 	bl	8008684 <xQueueReceiveFromISR>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d102      	bne.n	8007a60 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007a5a:	2310      	movs	r3, #16
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e001      	b.n	8007a64 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d01d      	beq.n	8007aa6 <osMessageGet+0xca>
 8007a6a:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <osMessageGet+0xe4>)
 8007a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	e014      	b.n	8007aa6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	3304      	adds	r3, #4
 8007a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a84:	4619      	mov	r1, r3
 8007a86:	68b8      	ldr	r0, [r7, #8]
 8007a88:	f000 fc10 	bl	80082ac <xQueueReceive>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d102      	bne.n	8007a98 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007a92:	2310      	movs	r3, #16
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	e006      	b.n	8007aa6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <osMessageGet+0xc6>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e000      	b.n	8007aa4 <osMessageGet+0xc8>
 8007aa2:	2340      	movs	r3, #64	; 0x40
 8007aa4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	461c      	mov	r4, r3
 8007aaa:	f107 0314 	add.w	r3, r7, #20
 8007aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	372c      	adds	r7, #44	; 0x2c
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd90      	pop	{r4, r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007acc:	f7ff fcea 	bl	80074a4 <inHandlerMode>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fe72 	bl	80087c0 <uxQueueMessagesWaitingFromISR>
 8007adc:	4603      	mov	r3, r0
 8007ade:	e003      	b.n	8007ae8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fe4f 	bl	8008784 <uxQueueMessagesWaiting>
 8007ae6:	4603      	mov	r3, r0
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007af8:	f7ff fcd4 	bl	80074a4 <inHandlerMode>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <osMessageDelete+0x16>
    return osErrorISR;
 8007b02:	2382      	movs	r3, #130	; 0x82
 8007b04:	e003      	b.n	8007b0e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fe78 	bl	80087fc <vQueueDelete>

  return osOK; 
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f103 0208 	add.w	r2, r3, #8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b2e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f103 0208 	add.w	r2, r3, #8
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f103 0208 	add.w	r2, r3, #8
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	601a      	str	r2, [r3, #0]
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bce:	d103      	bne.n	8007bd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e00c      	b.n	8007bf2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3308      	adds	r3, #8
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e002      	b.n	8007be6 <vListInsert+0x2e>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d2f6      	bcs.n	8007be0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6892      	ldr	r2, [r2, #8]
 8007c40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6852      	ldr	r2, [r2, #4]
 8007c4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d103      	bne.n	8007c5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	1e5a      	subs	r2, r3, #1
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007caa:	f002 fa83 	bl	800a1b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cba:	fb01 f303 	mul.w	r3, r1, r3
 8007cbe:	441a      	add	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	68f9      	ldr	r1, [r7, #12]
 8007cde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	441a      	add	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	22ff      	movs	r2, #255	; 0xff
 8007cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	22ff      	movs	r2, #255	; 0xff
 8007cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d114      	bne.n	8007d2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01a      	beq.n	8007d3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	3310      	adds	r3, #16
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f001 fb4d 	bl	80093ac <xTaskRemoveFromEventList>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d012      	beq.n	8007d3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d18:	4b0c      	ldr	r3, [pc, #48]	; (8007d4c <xQueueGenericReset+0xcc>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	e009      	b.n	8007d3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3310      	adds	r3, #16
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff fef1 	bl	8007b16 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3324      	adds	r3, #36	; 0x24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff feec 	bl	8007b16 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d3e:	f002 fa69 	bl	800a214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d42:	2301      	movs	r3, #1
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	613b      	str	r3, [r7, #16]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
 8007d82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	3348      	adds	r3, #72	; 0x48
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f002 fb35 	bl	800a3f8 <pvPortMalloc>
 8007d8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00d      	beq.n	8007db2 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	3348      	adds	r3, #72	; 0x48
 8007d9e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007da0:	79fa      	ldrb	r2, [r7, #7]
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	4613      	mov	r3, r2
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	68b9      	ldr	r1, [r7, #8]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f805 	bl	8007dbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007db2:	69bb      	ldr	r3, [r7, #24]
	}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3720      	adds	r7, #32
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d103      	bne.n	8007dd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e002      	b.n	8007dde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dea:	2101      	movs	r1, #1
 8007dec:	69b8      	ldr	r0, [r7, #24]
 8007dee:	f7ff ff47 	bl	8007c80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00e      	beq.n	8007e26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2100      	movs	r1, #0
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f81d 	bl	8007e60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b086      	sub	sp, #24
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	4603      	mov	r3, r0
 8007e36:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	461a      	mov	r2, r3
 8007e44:	6939      	ldr	r1, [r7, #16]
 8007e46:	6978      	ldr	r0, [r7, #20]
 8007e48:	f7ff ff82 	bl	8007d50 <xQueueGenericCreate>
 8007e4c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff ffd3 	bl	8007dfa <prvInitialiseMutex>

		return xNewQueue;
 8007e54:	68fb      	ldr	r3, [r7, #12]
	}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08e      	sub	sp, #56	; 0x38
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <xQueueGenericSend+0x32>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d103      	bne.n	8007ea0 <xQueueGenericSend+0x40>
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <xQueueGenericSend+0x44>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e000      	b.n	8007ea6 <xQueueGenericSend+0x46>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <xQueueGenericSend+0x60>
	__asm volatile
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ebc:	bf00      	nop
 8007ebe:	e7fe      	b.n	8007ebe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d103      	bne.n	8007ece <xQueueGenericSend+0x6e>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <xQueueGenericSend+0x72>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueGenericSend+0x74>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <xQueueGenericSend+0x8e>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	623b      	str	r3, [r7, #32]
}
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eee:	f001 fc0f 	bl	8009710 <xTaskGetSchedulerState>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <xQueueGenericSend+0x9e>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <xQueueGenericSend+0xa2>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <xQueueGenericSend+0xa4>
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xQueueGenericSend+0xbe>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	61fb      	str	r3, [r7, #28]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f1e:	f002 f949 	bl	800a1b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d302      	bcc.n	8007f34 <xQueueGenericSend+0xd4>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d129      	bne.n	8007f88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f3a:	f000 fc95 	bl	8008868 <prvCopyDataToQueue>
 8007f3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d010      	beq.n	8007f6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	3324      	adds	r3, #36	; 0x24
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f001 fa2d 	bl	80093ac <xTaskRemoveFromEventList>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d013      	beq.n	8007f80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f58:	4b3f      	ldr	r3, [pc, #252]	; (8008058 <xQueueGenericSend+0x1f8>)
 8007f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	e00a      	b.n	8007f80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d007      	beq.n	8007f80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f70:	4b39      	ldr	r3, [pc, #228]	; (8008058 <xQueueGenericSend+0x1f8>)
 8007f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f80:	f002 f948 	bl	800a214 <vPortExitCritical>
				return pdPASS;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e063      	b.n	8008050 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d103      	bne.n	8007f96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f8e:	f002 f941 	bl	800a214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	e05c      	b.n	8008050 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d106      	bne.n	8007faa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f9c:	f107 0314 	add.w	r3, r7, #20
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fa65 	bl	8009470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007faa:	f002 f933 	bl	800a214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fae:	f000 fff3 	bl	8008f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fb2:	f002 f8ff 	bl	800a1b4 <vPortEnterCritical>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fbc:	b25b      	sxtb	r3, r3
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fc2:	d103      	bne.n	8007fcc <xQueueGenericSend+0x16c>
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd2:	b25b      	sxtb	r3, r3
 8007fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fd8:	d103      	bne.n	8007fe2 <xQueueGenericSend+0x182>
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe2:	f002 f917 	bl	800a214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fe6:	1d3a      	adds	r2, r7, #4
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 fa54 	bl	800949c <xTaskCheckForTimeOut>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d124      	bne.n	8008044 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ffc:	f000 fd2c 	bl	8008a58 <prvIsQueueFull>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d018      	beq.n	8008038 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	3310      	adds	r3, #16
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f001 f9a8 	bl	8009364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008016:	f000 fcb7 	bl	8008988 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800801a:	f000 ffcb 	bl	8008fb4 <xTaskResumeAll>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	f47f af7c 	bne.w	8007f1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008026:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <xQueueGenericSend+0x1f8>)
 8008028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	e772      	b.n	8007f1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800803a:	f000 fca5 	bl	8008988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800803e:	f000 ffb9 	bl	8008fb4 <xTaskResumeAll>
 8008042:	e76c      	b.n	8007f1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008046:	f000 fc9f 	bl	8008988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800804a:	f000 ffb3 	bl	8008fb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800804e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008050:	4618      	mov	r0, r3
 8008052:	3738      	adds	r7, #56	; 0x38
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b090      	sub	sp, #64	; 0x40
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008086:	bf00      	nop
 8008088:	e7fe      	b.n	8008088 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d103      	bne.n	8008098 <xQueueGenericSendFromISR+0x3c>
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d101      	bne.n	800809c <xQueueGenericSendFromISR+0x40>
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <xQueueGenericSendFromISR+0x42>
 800809c:	2300      	movs	r3, #0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d103      	bne.n	80080c6 <xQueueGenericSendFromISR+0x6a>
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <xQueueGenericSendFromISR+0x6e>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <xQueueGenericSendFromISR+0x70>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	623b      	str	r3, [r7, #32]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080e6:	f002 f947 	bl	800a378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080ea:	f3ef 8211 	mrs	r2, BASEPRI
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	61fa      	str	r2, [r7, #28]
 8008100:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008102:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	429a      	cmp	r2, r3
 8008110:	d302      	bcc.n	8008118 <xQueueGenericSendFromISR+0xbc>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b02      	cmp	r3, #2
 8008116:	d12f      	bne.n	8008178 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800811e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800812e:	f000 fb9b 	bl	8008868 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008132:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800813a:	d112      	bne.n	8008162 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	2b00      	cmp	r3, #0
 8008142:	d016      	beq.n	8008172 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	3324      	adds	r3, #36	; 0x24
 8008148:	4618      	mov	r0, r3
 800814a:	f001 f92f 	bl	80093ac <xTaskRemoveFromEventList>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00e      	beq.n	8008172 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	601a      	str	r2, [r3, #0]
 8008160:	e007      	b.n	8008172 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008162:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008166:	3301      	adds	r3, #1
 8008168:	b2db      	uxtb	r3, r3
 800816a:	b25a      	sxtb	r2, r3
 800816c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008172:	2301      	movs	r3, #1
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008176:	e001      	b.n	800817c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008178:	2300      	movs	r3, #0
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008186:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800818a:	4618      	mov	r0, r3
 800818c:	3740      	adds	r7, #64	; 0x40
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b08e      	sub	sp, #56	; 0x38
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	623b      	str	r3, [r7, #32]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <xQueueGiveFromISR+0x48>
	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	61fb      	str	r3, [r7, #28]
}
 80081d6:	bf00      	nop
 80081d8:	e7fe      	b.n	80081d8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d103      	bne.n	80081ea <xQueueGiveFromISR+0x58>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <xQueueGiveFromISR+0x5c>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <xQueueGiveFromISR+0x5e>
 80081ee:	2300      	movs	r3, #0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10a      	bne.n	800820a <xQueueGiveFromISR+0x78>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	61bb      	str	r3, [r7, #24]
}
 8008206:	bf00      	nop
 8008208:	e7fe      	b.n	8008208 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800820a:	f002 f8b5 	bl	800a378 <vPortValidateInterruptPriority>
	__asm volatile
 800820e:	f3ef 8211 	mrs	r2, BASEPRI
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	617a      	str	r2, [r7, #20]
 8008224:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008226:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008228:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008236:	429a      	cmp	r2, r3
 8008238:	d22b      	bcs.n	8008292 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800824c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008254:	d112      	bne.n	800827c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d016      	beq.n	800828c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	3324      	adds	r3, #36	; 0x24
 8008262:	4618      	mov	r0, r3
 8008264:	f001 f8a2 	bl	80093ac <xTaskRemoveFromEventList>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00e      	beq.n	800828c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	e007      	b.n	800828c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800827c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008280:	3301      	adds	r3, #1
 8008282:	b2db      	uxtb	r3, r3
 8008284:	b25a      	sxtb	r2, r3
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800828c:	2301      	movs	r3, #1
 800828e:	637b      	str	r3, [r7, #52]	; 0x34
 8008290:	e001      	b.n	8008296 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008292:	2300      	movs	r3, #0
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f383 8811 	msr	BASEPRI, r3
}
 80082a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3738      	adds	r7, #56	; 0x38
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08c      	sub	sp, #48	; 0x30
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082b8:	2300      	movs	r3, #0
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <xQueueReceive+0x30>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	623b      	str	r3, [r7, #32]
}
 80082d8:	bf00      	nop
 80082da:	e7fe      	b.n	80082da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d103      	bne.n	80082ea <xQueueReceive+0x3e>
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <xQueueReceive+0x42>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <xQueueReceive+0x44>
 80082ee:	2300      	movs	r3, #0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <xQueueReceive+0x5e>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	61fb      	str	r3, [r7, #28]
}
 8008306:	bf00      	nop
 8008308:	e7fe      	b.n	8008308 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800830a:	f001 fa01 	bl	8009710 <xTaskGetSchedulerState>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d102      	bne.n	800831a <xQueueReceive+0x6e>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <xQueueReceive+0x72>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <xQueueReceive+0x74>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <xQueueReceive+0x8e>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	61bb      	str	r3, [r7, #24]
}
 8008336:	bf00      	nop
 8008338:	e7fe      	b.n	8008338 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800833a:	f001 ff3b 	bl	800a1b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	2b00      	cmp	r3, #0
 8008348:	d01f      	beq.n	800838a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834e:	f000 faf5 	bl	800893c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	1e5a      	subs	r2, r3, #1
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00f      	beq.n	8008382 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	3310      	adds	r3, #16
 8008366:	4618      	mov	r0, r3
 8008368:	f001 f820 	bl	80093ac <xTaskRemoveFromEventList>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008372:	4b3d      	ldr	r3, [pc, #244]	; (8008468 <xQueueReceive+0x1bc>)
 8008374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008382:	f001 ff47 	bl	800a214 <vPortExitCritical>
				return pdPASS;
 8008386:	2301      	movs	r3, #1
 8008388:	e069      	b.n	800845e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d103      	bne.n	8008398 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008390:	f001 ff40 	bl	800a214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008394:	2300      	movs	r3, #0
 8008396:	e062      	b.n	800845e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800839e:	f107 0310 	add.w	r3, r7, #16
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 f864 	bl	8009470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083a8:	2301      	movs	r3, #1
 80083aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ac:	f001 ff32 	bl	800a214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083b0:	f000 fdf2 	bl	8008f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083b4:	f001 fefe 	bl	800a1b4 <vPortEnterCritical>
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083be:	b25b      	sxtb	r3, r3
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083c4:	d103      	bne.n	80083ce <xQueueReceive+0x122>
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d4:	b25b      	sxtb	r3, r3
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083da:	d103      	bne.n	80083e4 <xQueueReceive+0x138>
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e4:	f001 ff16 	bl	800a214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083e8:	1d3a      	adds	r2, r7, #4
 80083ea:	f107 0310 	add.w	r3, r7, #16
 80083ee:	4611      	mov	r1, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 f853 	bl	800949c <xTaskCheckForTimeOut>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d123      	bne.n	8008444 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fe:	f000 fb15 	bl	8008a2c <prvIsQueueEmpty>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d017      	beq.n	8008438 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	3324      	adds	r3, #36	; 0x24
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	4611      	mov	r1, r2
 8008410:	4618      	mov	r0, r3
 8008412:	f000 ffa7 	bl	8009364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008418:	f000 fab6 	bl	8008988 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800841c:	f000 fdca 	bl	8008fb4 <xTaskResumeAll>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d189      	bne.n	800833a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <xQueueReceive+0x1bc>)
 8008428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	e780      	b.n	800833a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800843a:	f000 faa5 	bl	8008988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800843e:	f000 fdb9 	bl	8008fb4 <xTaskResumeAll>
 8008442:	e77a      	b.n	800833a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008446:	f000 fa9f 	bl	8008988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800844a:	f000 fdb3 	bl	8008fb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800844e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008450:	f000 faec 	bl	8008a2c <prvIsQueueEmpty>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	f43f af6f 	beq.w	800833a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800845c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800845e:	4618      	mov	r0, r3
 8008460:	3730      	adds	r7, #48	; 0x30
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08e      	sub	sp, #56	; 0x38
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008476:	2300      	movs	r3, #0
 8008478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800847e:	2300      	movs	r3, #0
 8008480:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	623b      	str	r3, [r7, #32]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	61fb      	str	r3, [r7, #28]
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084bc:	f001 f928 	bl	8009710 <xTaskGetSchedulerState>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d102      	bne.n	80084cc <xQueueSemaphoreTake+0x60>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <xQueueSemaphoreTake+0x64>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e000      	b.n	80084d2 <xQueueSemaphoreTake+0x66>
 80084d0:	2300      	movs	r3, #0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10a      	bne.n	80084ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	61bb      	str	r3, [r7, #24]
}
 80084e8:	bf00      	nop
 80084ea:	e7fe      	b.n	80084ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ec:	f001 fe62 	bl	800a1b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d024      	beq.n	8008546 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	1e5a      	subs	r2, r3, #1
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d104      	bne.n	8008516 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800850c:	f001 faa8 	bl	8009a60 <pvTaskIncrementMutexHeldCount>
 8008510:	4602      	mov	r2, r0
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008514:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00f      	beq.n	800853e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	3310      	adds	r3, #16
 8008522:	4618      	mov	r0, r3
 8008524:	f000 ff42 	bl	80093ac <xTaskRemoveFromEventList>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d007      	beq.n	800853e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800852e:	4b54      	ldr	r3, [pc, #336]	; (8008680 <xQueueSemaphoreTake+0x214>)
 8008530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800853e:	f001 fe69 	bl	800a214 <vPortExitCritical>
				return pdPASS;
 8008542:	2301      	movs	r3, #1
 8008544:	e097      	b.n	8008676 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d111      	bne.n	8008570 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	617b      	str	r3, [r7, #20]
}
 8008564:	bf00      	nop
 8008566:	e7fe      	b.n	8008566 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008568:	f001 fe54 	bl	800a214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800856c:	2300      	movs	r3, #0
 800856e:	e082      	b.n	8008676 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008576:	f107 030c 	add.w	r3, r7, #12
 800857a:	4618      	mov	r0, r3
 800857c:	f000 ff78 	bl	8009470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008580:	2301      	movs	r3, #1
 8008582:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008584:	f001 fe46 	bl	800a214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008588:	f000 fd06 	bl	8008f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800858c:	f001 fe12 	bl	800a1b4 <vPortEnterCritical>
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008596:	b25b      	sxtb	r3, r3
 8008598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800859c:	d103      	bne.n	80085a6 <xQueueSemaphoreTake+0x13a>
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ac:	b25b      	sxtb	r3, r3
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085b2:	d103      	bne.n	80085bc <xQueueSemaphoreTake+0x150>
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085bc:	f001 fe2a 	bl	800a214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085c0:	463a      	mov	r2, r7
 80085c2:	f107 030c 	add.w	r3, r7, #12
 80085c6:	4611      	mov	r1, r2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 ff67 	bl	800949c <xTaskCheckForTimeOut>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d132      	bne.n	800863a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085d6:	f000 fa29 	bl	8008a2c <prvIsQueueEmpty>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d026      	beq.n	800862e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d109      	bne.n	80085fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80085e8:	f001 fde4 	bl	800a1b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f001 f8ab 	bl	800974c <xTaskPriorityInherit>
 80085f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80085f8:	f001 fe0c 	bl	800a214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	3324      	adds	r3, #36	; 0x24
 8008600:	683a      	ldr	r2, [r7, #0]
 8008602:	4611      	mov	r1, r2
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fead 	bl	8009364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800860a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800860c:	f000 f9bc 	bl	8008988 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008610:	f000 fcd0 	bl	8008fb4 <xTaskResumeAll>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	f47f af68 	bne.w	80084ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800861c:	4b18      	ldr	r3, [pc, #96]	; (8008680 <xQueueSemaphoreTake+0x214>)
 800861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	e75e      	b.n	80084ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800862e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008630:	f000 f9aa 	bl	8008988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008634:	f000 fcbe 	bl	8008fb4 <xTaskResumeAll>
 8008638:	e758      	b.n	80084ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800863a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800863c:	f000 f9a4 	bl	8008988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008640:	f000 fcb8 	bl	8008fb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008644:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008646:	f000 f9f1 	bl	8008a2c <prvIsQueueEmpty>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	f43f af4d 	beq.w	80084ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00d      	beq.n	8008674 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008658:	f001 fdac 	bl	800a1b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800865c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800865e:	f000 f8eb 	bl	8008838 <prvGetDisinheritPriorityAfterTimeout>
 8008662:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800866a:	4618      	mov	r0, r3
 800866c:	f001 f96a 	bl	8009944 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008670:	f001 fdd0 	bl	800a214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008674:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008676:	4618      	mov	r0, r3
 8008678:	3738      	adds	r7, #56	; 0x38
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	e000ed04 	.word	0xe000ed04

08008684 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08e      	sub	sp, #56	; 0x38
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	623b      	str	r3, [r7, #32]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d103      	bne.n	80086be <xQueueReceiveFromISR+0x3a>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <xQueueReceiveFromISR+0x3e>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <xQueueReceiveFromISR+0x40>
 80086c2:	2300      	movs	r3, #0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10a      	bne.n	80086de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	61fb      	str	r3, [r7, #28]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086de:	f001 fe4b 	bl	800a378 <vPortValidateInterruptPriority>
	__asm volatile
 80086e2:	f3ef 8211 	mrs	r2, BASEPRI
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	61ba      	str	r2, [r7, #24]
 80086f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80086fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d02f      	beq.n	800876a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008718:	f000 f910 	bl	800893c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	1e5a      	subs	r2, r3, #1
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800872c:	d112      	bne.n	8008754 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d016      	beq.n	8008764 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	3310      	adds	r3, #16
 800873a:	4618      	mov	r0, r3
 800873c:	f000 fe36 	bl	80093ac <xTaskRemoveFromEventList>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00e      	beq.n	8008764 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00b      	beq.n	8008764 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e007      	b.n	8008764 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008758:	3301      	adds	r3, #1
 800875a:	b2db      	uxtb	r3, r3
 800875c:	b25a      	sxtb	r2, r3
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008764:	2301      	movs	r3, #1
 8008766:	637b      	str	r3, [r7, #52]	; 0x34
 8008768:	e001      	b.n	800876e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800876a:	2300      	movs	r3, #0
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f383 8811 	msr	BASEPRI, r3
}
 8008778:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800877a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800877c:	4618      	mov	r0, r3
 800877e:	3738      	adds	r7, #56	; 0x38
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10a      	bne.n	80087a8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	60bb      	str	r3, [r7, #8]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80087a8:	f001 fd04 	bl	800a1b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80087b2:	f001 fd2f 	bl	800a214 <vPortExitCritical>

	return uxReturn;
 80087b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60fb      	str	r3, [r7, #12]
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80087ee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80087f0:	4618      	mov	r0, r3
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10a      	bne.n	8008824 <vQueueDelete+0x28>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	60bb      	str	r3, [r7, #8]
}
 8008820:	bf00      	nop
 8008822:	e7fe      	b.n	8008822 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f92f 	bl	8008a88 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f001 feb0 	bl	800a590 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d006      	beq.n	8008856 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f1c3 0307 	rsb	r3, r3, #7
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	e001      	b.n	800885a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800885a:	68fb      	ldr	r3, [r7, #12]
	}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008874:	2300      	movs	r3, #0
 8008876:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10d      	bne.n	80088a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d14d      	bne.n	800892a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	4618      	mov	r0, r3
 8008894:	f000 ffd0 	bl	8009838 <xTaskPriorityDisinherit>
 8008898:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	609a      	str	r2, [r3, #8]
 80088a0:	e043      	b.n	800892a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d119      	bne.n	80088dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6858      	ldr	r0, [r3, #4]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	461a      	mov	r2, r3
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	f015 fb9e 	bl	801dff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c0:	441a      	add	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d32b      	bcc.n	800892a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	e026      	b.n	800892a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68d8      	ldr	r0, [r3, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e4:	461a      	mov	r2, r3
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	f015 fb84 	bl	801dff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	68da      	ldr	r2, [r3, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f4:	425b      	negs	r3, r3
 80088f6:	441a      	add	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d207      	bcs.n	8008918 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	425b      	negs	r3, r3
 8008912:	441a      	add	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d105      	bne.n	800892a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	3b01      	subs	r3, #1
 8008928:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008932:	697b      	ldr	r3, [r7, #20]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d018      	beq.n	8008980 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	441a      	add	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	429a      	cmp	r2, r3
 8008966:	d303      	bcc.n	8008970 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68d9      	ldr	r1, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008978:	461a      	mov	r2, r3
 800897a:	6838      	ldr	r0, [r7, #0]
 800897c:	f015 fb3a 	bl	801dff4 <memcpy>
	}
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008990:	f001 fc10 	bl	800a1b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800899a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800899c:	e011      	b.n	80089c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d012      	beq.n	80089cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3324      	adds	r3, #36	; 0x24
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 fcfe 	bl	80093ac <xTaskRemoveFromEventList>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089b6:	f000 fdd3 	bl	8009560 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	3b01      	subs	r3, #1
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	dce9      	bgt.n	800899e <prvUnlockQueue+0x16>
 80089ca:	e000      	b.n	80089ce <prvUnlockQueue+0x46>
					break;
 80089cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	22ff      	movs	r2, #255	; 0xff
 80089d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089d6:	f001 fc1d 	bl	800a214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089da:	f001 fbeb 	bl	800a1b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089e6:	e011      	b.n	8008a0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d012      	beq.n	8008a16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3310      	adds	r3, #16
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 fcd9 	bl	80093ac <xTaskRemoveFromEventList>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a00:	f000 fdae 	bl	8009560 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	dce9      	bgt.n	80089e8 <prvUnlockQueue+0x60>
 8008a14:	e000      	b.n	8008a18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	22ff      	movs	r2, #255	; 0xff
 8008a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a20:	f001 fbf8 	bl	800a214 <vPortExitCritical>
}
 8008a24:	bf00      	nop
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a34:	f001 fbbe 	bl	800a1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d102      	bne.n	8008a46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e001      	b.n	8008a4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a46:	2300      	movs	r3, #0
 8008a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a4a:	f001 fbe3 	bl	800a214 <vPortExitCritical>

	return xReturn;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a60:	f001 fba8 	bl	800a1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d102      	bne.n	8008a76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a70:	2301      	movs	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e001      	b.n	8008a7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a7a:	f001 fbcb 	bl	800a214 <vPortExitCritical>

	return xReturn;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	e016      	b.n	8008ac4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a96:	4a10      	ldr	r2, [pc, #64]	; (8008ad8 <vQueueUnregisterQueue+0x50>)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	4413      	add	r3, r2
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d10b      	bne.n	8008abe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008aa6:	4a0c      	ldr	r2, [pc, #48]	; (8008ad8 <vQueueUnregisterQueue+0x50>)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2100      	movs	r1, #0
 8008aac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008ab0:	4a09      	ldr	r2, [pc, #36]	; (8008ad8 <vQueueUnregisterQueue+0x50>)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	00db      	lsls	r3, r3, #3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	2200      	movs	r2, #0
 8008aba:	605a      	str	r2, [r3, #4]
				break;
 8008abc:	e006      	b.n	8008acc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b07      	cmp	r3, #7
 8008ac8:	d9e5      	bls.n	8008a96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008aca:	bf00      	nop
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	2001768c 	.word	0x2001768c

08008adc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08c      	sub	sp, #48	; 0x30
 8008ae0:	af04      	add	r7, sp, #16
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008aec:	88fb      	ldrh	r3, [r7, #6]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 fc81 	bl	800a3f8 <pvPortMalloc>
 8008af6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00e      	beq.n	8008b1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008afe:	20b4      	movs	r0, #180	; 0xb4
 8008b00:	f001 fc7a 	bl	800a3f8 <pvPortMalloc>
 8008b04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	631a      	str	r2, [r3, #48]	; 0x30
 8008b12:	e005      	b.n	8008b20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b14:	6978      	ldr	r0, [r7, #20]
 8008b16:	f001 fd3b 	bl	800a590 <vPortFree>
 8008b1a:	e001      	b.n	8008b20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d013      	beq.n	8008b4e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b26:	88fa      	ldrh	r2, [r7, #6]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	9302      	str	r3, [sp, #8]
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f80f 	bl	8008b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b42:	69f8      	ldr	r0, [r7, #28]
 8008b44:	f000 f8aa 	bl	8008c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	61bb      	str	r3, [r7, #24]
 8008b4c:	e002      	b.n	8008b54 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b54:	69bb      	ldr	r3, [r7, #24]
	}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3720      	adds	r7, #32
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	f023 0307 	bic.w	r3, r3, #7
 8008b86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	f003 0307 	and.w	r3, r3, #7
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	617b      	str	r3, [r7, #20]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01f      	beq.n	8008bee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	e012      	b.n	8008bda <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	4413      	add	r3, r2
 8008bba:	7819      	ldrb	r1, [r3, #0]
 8008bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3334      	adds	r3, #52	; 0x34
 8008bc4:	460a      	mov	r2, r1
 8008bc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	4413      	add	r3, r2
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d006      	beq.n	8008be2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	61fb      	str	r3, [r7, #28]
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	2b0f      	cmp	r3, #15
 8008bde:	d9e9      	bls.n	8008bb4 <prvInitialiseNewTask+0x54>
 8008be0:	e000      	b.n	8008be4 <prvInitialiseNewTask+0x84>
			{
				break;
 8008be2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bec:	e003      	b.n	8008bf6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	2b06      	cmp	r3, #6
 8008bfa:	d901      	bls.n	8008c00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bfc:	2306      	movs	r3, #6
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0e:	2200      	movs	r2, #0
 8008c10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	3304      	adds	r3, #4
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe ff9d 	bl	8007b56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	3318      	adds	r3, #24
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe ff98 	bl	8007b56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	f1c3 0207 	rsb	r2, r3, #7
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	334c      	adds	r3, #76	; 0x4c
 8008c50:	2260      	movs	r2, #96	; 0x60
 8008c52:	2100      	movs	r1, #0
 8008c54:	4618      	mov	r0, r3
 8008c56:	f015 f9f5 	bl	801e044 <memset>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	4a0c      	ldr	r2, [pc, #48]	; (8008c90 <prvInitialiseNewTask+0x130>)
 8008c5e:	651a      	str	r2, [r3, #80]	; 0x50
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	4a0c      	ldr	r2, [pc, #48]	; (8008c94 <prvInitialiseNewTask+0x134>)
 8008c64:	655a      	str	r2, [r3, #84]	; 0x54
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	4a0b      	ldr	r2, [pc, #44]	; (8008c98 <prvInitialiseNewTask+0x138>)
 8008c6a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	68f9      	ldr	r1, [r7, #12]
 8008c70:	69b8      	ldr	r0, [r7, #24]
 8008c72:	f001 f971 	bl	8009f58 <pxPortInitialiseStack>
 8008c76:	4602      	mov	r2, r0
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c88:	bf00      	nop
 8008c8a:	3720      	adds	r7, #32
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	08026800 	.word	0x08026800
 8008c94:	08026820 	.word	0x08026820
 8008c98:	080267e0 	.word	0x080267e0

08008c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ca4:	f001 fa86 	bl	800a1b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ca8:	4b2a      	ldr	r3, [pc, #168]	; (8008d54 <prvAddNewTaskToReadyList+0xb8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3301      	adds	r3, #1
 8008cae:	4a29      	ldr	r2, [pc, #164]	; (8008d54 <prvAddNewTaskToReadyList+0xb8>)
 8008cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cb2:	4b29      	ldr	r3, [pc, #164]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cba:	4a27      	ldr	r2, [pc, #156]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cc0:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <prvAddNewTaskToReadyList+0xb8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d110      	bne.n	8008cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cc8:	f000 fc6e 	bl	80095a8 <prvInitialiseTaskLists>
 8008ccc:	e00d      	b.n	8008cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cce:	4b23      	ldr	r3, [pc, #140]	; (8008d5c <prvAddNewTaskToReadyList+0xc0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cd6:	4b20      	ldr	r3, [pc, #128]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d802      	bhi.n	8008cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ce4:	4a1c      	ldr	r2, [pc, #112]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cea:	4b1d      	ldr	r3, [pc, #116]	; (8008d60 <prvAddNewTaskToReadyList+0xc4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	4a1b      	ldr	r2, [pc, #108]	; (8008d60 <prvAddNewTaskToReadyList+0xc4>)
 8008cf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	409a      	lsls	r2, r3
 8008cfc:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <prvAddNewTaskToReadyList+0xc8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <prvAddNewTaskToReadyList+0xc8>)
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4a15      	ldr	r2, [pc, #84]	; (8008d68 <prvAddNewTaskToReadyList+0xcc>)
 8008d14:	441a      	add	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f7fe ff27 	bl	8007b70 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d22:	f001 fa77 	bl	800a214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <prvAddNewTaskToReadyList+0xc0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00e      	beq.n	8008d4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d2e:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d207      	bcs.n	8008d4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <prvAddNewTaskToReadyList+0xd0>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000438 	.word	0x20000438
 8008d58:	20000338 	.word	0x20000338
 8008d5c:	20000444 	.word	0x20000444
 8008d60:	20000454 	.word	0x20000454
 8008d64:	20000440 	.word	0x20000440
 8008d68:	2000033c 	.word	0x2000033c
 8008d6c:	e000ed04 	.word	0xe000ed04

08008d70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008d78:	f001 fa1c 	bl	800a1b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d102      	bne.n	8008d88 <vTaskDelete+0x18>
 8008d82:	4b39      	ldr	r3, [pc, #228]	; (8008e68 <vTaskDelete+0xf8>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	e000      	b.n	8008d8a <vTaskDelete+0x1a>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3304      	adds	r3, #4
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fe ff4a 	bl	8007c2a <uxListRemove>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d115      	bne.n	8008dc8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4932      	ldr	r1, [pc, #200]	; (8008e6c <vTaskDelete+0xfc>)
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10a      	bne.n	8008dc8 <vTaskDelete+0x58>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	2201      	movs	r2, #1
 8008db8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbc:	43da      	mvns	r2, r3
 8008dbe:	4b2c      	ldr	r3, [pc, #176]	; (8008e70 <vTaskDelete+0x100>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	4a2a      	ldr	r2, [pc, #168]	; (8008e70 <vTaskDelete+0x100>)
 8008dc6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d004      	beq.n	8008dda <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	3318      	adds	r3, #24
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fe ff28 	bl	8007c2a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008dda:	4b26      	ldr	r3, [pc, #152]	; (8008e74 <vTaskDelete+0x104>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3301      	adds	r3, #1
 8008de0:	4a24      	ldr	r2, [pc, #144]	; (8008e74 <vTaskDelete+0x104>)
 8008de2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008de4:	4b20      	ldr	r3, [pc, #128]	; (8008e68 <vTaskDelete+0xf8>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d10b      	bne.n	8008e06 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3304      	adds	r3, #4
 8008df2:	4619      	mov	r1, r3
 8008df4:	4820      	ldr	r0, [pc, #128]	; (8008e78 <vTaskDelete+0x108>)
 8008df6:	f7fe febb 	bl	8007b70 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008dfa:	4b20      	ldr	r3, [pc, #128]	; (8008e7c <vTaskDelete+0x10c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	4a1e      	ldr	r2, [pc, #120]	; (8008e7c <vTaskDelete+0x10c>)
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	e009      	b.n	8008e1a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008e06:	4b1e      	ldr	r3, [pc, #120]	; (8008e80 <vTaskDelete+0x110>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	4a1c      	ldr	r2, [pc, #112]	; (8008e80 <vTaskDelete+0x110>)
 8008e0e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 fc37 	bl	8009684 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008e16:	f000 fc4b 	bl	80096b0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008e1a:	f001 f9fb 	bl	800a214 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008e1e:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <vTaskDelete+0x114>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d01b      	beq.n	8008e5e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <vTaskDelete+0xf8>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d116      	bne.n	8008e5e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008e30:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <vTaskDelete+0x118>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00a      	beq.n	8008e4e <vTaskDelete+0xde>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	60bb      	str	r3, [r7, #8]
}
 8008e4a:	bf00      	nop
 8008e4c:	e7fe      	b.n	8008e4c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8008e4e:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <vTaskDelete+0x11c>)
 8008e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000338 	.word	0x20000338
 8008e6c:	2000033c 	.word	0x2000033c
 8008e70:	20000440 	.word	0x20000440
 8008e74:	20000454 	.word	0x20000454
 8008e78:	2000040c 	.word	0x2000040c
 8008e7c:	20000420 	.word	0x20000420
 8008e80:	20000438 	.word	0x20000438
 8008e84:	20000444 	.word	0x20000444
 8008e88:	20000460 	.word	0x20000460
 8008e8c:	e000ed04 	.word	0xe000ed04

08008e90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ea2:	4b13      	ldr	r3, [pc, #76]	; (8008ef0 <vTaskDelay+0x60>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <vTaskDelay+0x30>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	60bb      	str	r3, [r7, #8]
}
 8008ebc:	bf00      	nop
 8008ebe:	e7fe      	b.n	8008ebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ec0:	f000 f86a 	bl	8008f98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 ffe0 	bl	8009e8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ecc:	f000 f872 	bl	8008fb4 <xTaskResumeAll>
 8008ed0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d107      	bne.n	8008ee8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ed8:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <vTaskDelay+0x64>)
 8008eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ee8:	bf00      	nop
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20000460 	.word	0x20000460
 8008ef4:	e000ed04 	.word	0xe000ed04

08008ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008efe:	4b1e      	ldr	r3, [pc, #120]	; (8008f78 <vTaskStartScheduler+0x80>)
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	2300      	movs	r3, #0
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	2300      	movs	r3, #0
 8008f08:	2280      	movs	r2, #128	; 0x80
 8008f0a:	491c      	ldr	r1, [pc, #112]	; (8008f7c <vTaskStartScheduler+0x84>)
 8008f0c:	481c      	ldr	r0, [pc, #112]	; (8008f80 <vTaskStartScheduler+0x88>)
 8008f0e:	f7ff fde5 	bl	8008adc <xTaskCreate>
 8008f12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d11b      	bne.n	8008f52 <vTaskStartScheduler+0x5a>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	60bb      	str	r3, [r7, #8]
}
 8008f2c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f2e:	4b15      	ldr	r3, [pc, #84]	; (8008f84 <vTaskStartScheduler+0x8c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	334c      	adds	r3, #76	; 0x4c
 8008f34:	4a14      	ldr	r2, [pc, #80]	; (8008f88 <vTaskStartScheduler+0x90>)
 8008f36:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f38:	4b14      	ldr	r3, [pc, #80]	; (8008f8c <vTaskStartScheduler+0x94>)
 8008f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f40:	4b13      	ldr	r3, [pc, #76]	; (8008f90 <vTaskStartScheduler+0x98>)
 8008f42:	2201      	movs	r2, #1
 8008f44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f46:	4b13      	ldr	r3, [pc, #76]	; (8008f94 <vTaskStartScheduler+0x9c>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f4c:	f001 f890 	bl	800a070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f50:	e00e      	b.n	8008f70 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f58:	d10a      	bne.n	8008f70 <vTaskStartScheduler+0x78>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	607b      	str	r3, [r7, #4]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vTaskStartScheduler+0x76>
}
 8008f70:	bf00      	nop
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	2000045c 	.word	0x2000045c
 8008f7c:	0802256c 	.word	0x0802256c
 8008f80:	08009579 	.word	0x08009579
 8008f84:	20000338 	.word	0x20000338
 8008f88:	20000064 	.word	0x20000064
 8008f8c:	20000458 	.word	0x20000458
 8008f90:	20000444 	.word	0x20000444
 8008f94:	2000043c 	.word	0x2000043c

08008f98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f9c:	4b04      	ldr	r3, [pc, #16]	; (8008fb0 <vTaskSuspendAll+0x18>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	4a03      	ldr	r2, [pc, #12]	; (8008fb0 <vTaskSuspendAll+0x18>)
 8008fa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008fa6:	bf00      	nop
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	20000460 	.word	0x20000460

08008fb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fc2:	4b41      	ldr	r3, [pc, #260]	; (80090c8 <xTaskResumeAll+0x114>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	603b      	str	r3, [r7, #0]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008fe0:	f001 f8e8 	bl	800a1b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fe4:	4b38      	ldr	r3, [pc, #224]	; (80090c8 <xTaskResumeAll+0x114>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	4a37      	ldr	r2, [pc, #220]	; (80090c8 <xTaskResumeAll+0x114>)
 8008fec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fee:	4b36      	ldr	r3, [pc, #216]	; (80090c8 <xTaskResumeAll+0x114>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d161      	bne.n	80090ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ff6:	4b35      	ldr	r3, [pc, #212]	; (80090cc <xTaskResumeAll+0x118>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d05d      	beq.n	80090ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ffe:	e02e      	b.n	800905e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009000:	4b33      	ldr	r3, [pc, #204]	; (80090d0 <xTaskResumeAll+0x11c>)
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3318      	adds	r3, #24
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fe0c 	bl	8007c2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3304      	adds	r3, #4
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe fe07 	bl	8007c2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009020:	2201      	movs	r2, #1
 8009022:	409a      	lsls	r2, r3
 8009024:	4b2b      	ldr	r3, [pc, #172]	; (80090d4 <xTaskResumeAll+0x120>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4313      	orrs	r3, r2
 800902a:	4a2a      	ldr	r2, [pc, #168]	; (80090d4 <xTaskResumeAll+0x120>)
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009032:	4613      	mov	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4a27      	ldr	r2, [pc, #156]	; (80090d8 <xTaskResumeAll+0x124>)
 800903c:	441a      	add	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3304      	adds	r3, #4
 8009042:	4619      	mov	r1, r3
 8009044:	4610      	mov	r0, r2
 8009046:	f7fe fd93 	bl	8007b70 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904e:	4b23      	ldr	r3, [pc, #140]	; (80090dc <xTaskResumeAll+0x128>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	429a      	cmp	r2, r3
 8009056:	d302      	bcc.n	800905e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009058:	4b21      	ldr	r3, [pc, #132]	; (80090e0 <xTaskResumeAll+0x12c>)
 800905a:	2201      	movs	r2, #1
 800905c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800905e:	4b1c      	ldr	r3, [pc, #112]	; (80090d0 <xTaskResumeAll+0x11c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1cc      	bne.n	8009000 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800906c:	f000 fb20 	bl	80096b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009070:	4b1c      	ldr	r3, [pc, #112]	; (80090e4 <xTaskResumeAll+0x130>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d010      	beq.n	800909e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800907c:	f000 f858 	bl	8009130 <xTaskIncrementTick>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009086:	4b16      	ldr	r3, [pc, #88]	; (80090e0 <xTaskResumeAll+0x12c>)
 8009088:	2201      	movs	r2, #1
 800908a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3b01      	subs	r3, #1
 8009090:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1f1      	bne.n	800907c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009098:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <xTaskResumeAll+0x130>)
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800909e:	4b10      	ldr	r3, [pc, #64]	; (80090e0 <xTaskResumeAll+0x12c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090a6:	2301      	movs	r3, #1
 80090a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090aa:	4b0f      	ldr	r3, [pc, #60]	; (80090e8 <xTaskResumeAll+0x134>)
 80090ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090ba:	f001 f8ab 	bl	800a214 <vPortExitCritical>

	return xAlreadyYielded;
 80090be:	68bb      	ldr	r3, [r7, #8]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20000460 	.word	0x20000460
 80090cc:	20000438 	.word	0x20000438
 80090d0:	200003f8 	.word	0x200003f8
 80090d4:	20000440 	.word	0x20000440
 80090d8:	2000033c 	.word	0x2000033c
 80090dc:	20000338 	.word	0x20000338
 80090e0:	2000044c 	.word	0x2000044c
 80090e4:	20000448 	.word	0x20000448
 80090e8:	e000ed04 	.word	0xe000ed04

080090ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <xTaskGetTickCount+0x1c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090f8:	687b      	ldr	r3, [r7, #4]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	2000043c 	.word	0x2000043c

0800910c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009112:	f001 f931 	bl	800a378 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009116:	2300      	movs	r3, #0
 8009118:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800911a:	4b04      	ldr	r3, [pc, #16]	; (800912c <xTaskGetTickCountFromISR+0x20>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009120:	683b      	ldr	r3, [r7, #0]
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	2000043c 	.word	0x2000043c

08009130 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009136:	2300      	movs	r3, #0
 8009138:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800913a:	4b4e      	ldr	r3, [pc, #312]	; (8009274 <xTaskIncrementTick+0x144>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	f040 808e 	bne.w	8009260 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009144:	4b4c      	ldr	r3, [pc, #304]	; (8009278 <xTaskIncrementTick+0x148>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3301      	adds	r3, #1
 800914a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800914c:	4a4a      	ldr	r2, [pc, #296]	; (8009278 <xTaskIncrementTick+0x148>)
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d120      	bne.n	800919a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009158:	4b48      	ldr	r3, [pc, #288]	; (800927c <xTaskIncrementTick+0x14c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <xTaskIncrementTick+0x48>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	603b      	str	r3, [r7, #0]
}
 8009174:	bf00      	nop
 8009176:	e7fe      	b.n	8009176 <xTaskIncrementTick+0x46>
 8009178:	4b40      	ldr	r3, [pc, #256]	; (800927c <xTaskIncrementTick+0x14c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	4b40      	ldr	r3, [pc, #256]	; (8009280 <xTaskIncrementTick+0x150>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a3e      	ldr	r2, [pc, #248]	; (800927c <xTaskIncrementTick+0x14c>)
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	4a3e      	ldr	r2, [pc, #248]	; (8009280 <xTaskIncrementTick+0x150>)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	4b3d      	ldr	r3, [pc, #244]	; (8009284 <xTaskIncrementTick+0x154>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	4a3c      	ldr	r2, [pc, #240]	; (8009284 <xTaskIncrementTick+0x154>)
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	f000 fa8b 	bl	80096b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800919a:	4b3b      	ldr	r3, [pc, #236]	; (8009288 <xTaskIncrementTick+0x158>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d348      	bcc.n	8009236 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091a4:	4b35      	ldr	r3, [pc, #212]	; (800927c <xTaskIncrementTick+0x14c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d104      	bne.n	80091b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ae:	4b36      	ldr	r3, [pc, #216]	; (8009288 <xTaskIncrementTick+0x158>)
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091b4:	601a      	str	r2, [r3, #0]
					break;
 80091b6:	e03e      	b.n	8009236 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b8:	4b30      	ldr	r3, [pc, #192]	; (800927c <xTaskIncrementTick+0x14c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d203      	bcs.n	80091d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091d0:	4a2d      	ldr	r2, [pc, #180]	; (8009288 <xTaskIncrementTick+0x158>)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091d6:	e02e      	b.n	8009236 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	3304      	adds	r3, #4
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fd24 	bl	8007c2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d004      	beq.n	80091f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	3318      	adds	r3, #24
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe fd1b 	bl	8007c2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	2201      	movs	r2, #1
 80091fa:	409a      	lsls	r2, r3
 80091fc:	4b23      	ldr	r3, [pc, #140]	; (800928c <xTaskIncrementTick+0x15c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4313      	orrs	r3, r2
 8009202:	4a22      	ldr	r2, [pc, #136]	; (800928c <xTaskIncrementTick+0x15c>)
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920a:	4613      	mov	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4a1f      	ldr	r2, [pc, #124]	; (8009290 <xTaskIncrementTick+0x160>)
 8009214:	441a      	add	r2, r3
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	3304      	adds	r3, #4
 800921a:	4619      	mov	r1, r3
 800921c:	4610      	mov	r0, r2
 800921e:	f7fe fca7 	bl	8007b70 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	4b1b      	ldr	r3, [pc, #108]	; (8009294 <xTaskIncrementTick+0x164>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	429a      	cmp	r2, r3
 800922e:	d3b9      	bcc.n	80091a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009230:	2301      	movs	r3, #1
 8009232:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009234:	e7b6      	b.n	80091a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009236:	4b17      	ldr	r3, [pc, #92]	; (8009294 <xTaskIncrementTick+0x164>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923c:	4914      	ldr	r1, [pc, #80]	; (8009290 <xTaskIncrementTick+0x160>)
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d901      	bls.n	8009252 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800924e:	2301      	movs	r3, #1
 8009250:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <xTaskIncrementTick+0x168>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d007      	beq.n	800926a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800925a:	2301      	movs	r3, #1
 800925c:	617b      	str	r3, [r7, #20]
 800925e:	e004      	b.n	800926a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009260:	4b0e      	ldr	r3, [pc, #56]	; (800929c <xTaskIncrementTick+0x16c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3301      	adds	r3, #1
 8009266:	4a0d      	ldr	r2, [pc, #52]	; (800929c <xTaskIncrementTick+0x16c>)
 8009268:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800926a:	697b      	ldr	r3, [r7, #20]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	20000460 	.word	0x20000460
 8009278:	2000043c 	.word	0x2000043c
 800927c:	200003f0 	.word	0x200003f0
 8009280:	200003f4 	.word	0x200003f4
 8009284:	20000450 	.word	0x20000450
 8009288:	20000458 	.word	0x20000458
 800928c:	20000440 	.word	0x20000440
 8009290:	2000033c 	.word	0x2000033c
 8009294:	20000338 	.word	0x20000338
 8009298:	2000044c 	.word	0x2000044c
 800929c:	20000448 	.word	0x20000448

080092a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092a6:	4b29      	ldr	r3, [pc, #164]	; (800934c <vTaskSwitchContext+0xac>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092ae:	4b28      	ldr	r3, [pc, #160]	; (8009350 <vTaskSwitchContext+0xb0>)
 80092b0:	2201      	movs	r2, #1
 80092b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092b4:	e044      	b.n	8009340 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80092b6:	4b26      	ldr	r3, [pc, #152]	; (8009350 <vTaskSwitchContext+0xb0>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092bc:	4b25      	ldr	r3, [pc, #148]	; (8009354 <vTaskSwitchContext+0xb4>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	fab3 f383 	clz	r3, r3
 80092c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092ca:	7afb      	ldrb	r3, [r7, #11]
 80092cc:	f1c3 031f 	rsb	r3, r3, #31
 80092d0:	617b      	str	r3, [r7, #20]
 80092d2:	4921      	ldr	r1, [pc, #132]	; (8009358 <vTaskSwitchContext+0xb8>)
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	440b      	add	r3, r1
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	607b      	str	r3, [r7, #4]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <vTaskSwitchContext+0x5a>
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	4613      	mov	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4a14      	ldr	r2, [pc, #80]	; (8009358 <vTaskSwitchContext+0xb8>)
 8009308:	4413      	add	r3, r2
 800930a:	613b      	str	r3, [r7, #16]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	3308      	adds	r3, #8
 800931e:	429a      	cmp	r2, r3
 8009320:	d104      	bne.n	800932c <vTaskSwitchContext+0x8c>
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	605a      	str	r2, [r3, #4]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	4a0a      	ldr	r2, [pc, #40]	; (800935c <vTaskSwitchContext+0xbc>)
 8009334:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <vTaskSwitchContext+0xbc>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	334c      	adds	r3, #76	; 0x4c
 800933c:	4a08      	ldr	r2, [pc, #32]	; (8009360 <vTaskSwitchContext+0xc0>)
 800933e:	6013      	str	r3, [r2, #0]
}
 8009340:	bf00      	nop
 8009342:	371c      	adds	r7, #28
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	20000460 	.word	0x20000460
 8009350:	2000044c 	.word	0x2000044c
 8009354:	20000440 	.word	0x20000440
 8009358:	2000033c 	.word	0x2000033c
 800935c:	20000338 	.word	0x20000338
 8009360:	20000064 	.word	0x20000064

08009364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	60fb      	str	r3, [r7, #12]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800938a:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <vTaskPlaceOnEventList+0x44>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3318      	adds	r3, #24
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fe fc10 	bl	8007bb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009398:	2101      	movs	r1, #1
 800939a:	6838      	ldr	r0, [r7, #0]
 800939c:	f000 fd76 	bl	8009e8c <prvAddCurrentTaskToDelayedList>
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	20000338 	.word	0x20000338

080093ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b086      	sub	sp, #24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10a      	bne.n	80093d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	60fb      	str	r3, [r7, #12]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	3318      	adds	r3, #24
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe fc24 	bl	8007c2a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093e2:	4b1d      	ldr	r3, [pc, #116]	; (8009458 <xTaskRemoveFromEventList+0xac>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d11c      	bne.n	8009424 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fc1b 	bl	8007c2a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	2201      	movs	r2, #1
 80093fa:	409a      	lsls	r2, r3
 80093fc:	4b17      	ldr	r3, [pc, #92]	; (800945c <xTaskRemoveFromEventList+0xb0>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4313      	orrs	r3, r2
 8009402:	4a16      	ldr	r2, [pc, #88]	; (800945c <xTaskRemoveFromEventList+0xb0>)
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4a13      	ldr	r2, [pc, #76]	; (8009460 <xTaskRemoveFromEventList+0xb4>)
 8009414:	441a      	add	r2, r3
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	3304      	adds	r3, #4
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f7fe fba7 	bl	8007b70 <vListInsertEnd>
 8009422:	e005      	b.n	8009430 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	3318      	adds	r3, #24
 8009428:	4619      	mov	r1, r3
 800942a:	480e      	ldr	r0, [pc, #56]	; (8009464 <xTaskRemoveFromEventList+0xb8>)
 800942c:	f7fe fba0 	bl	8007b70 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <xTaskRemoveFromEventList+0xbc>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943a:	429a      	cmp	r2, r3
 800943c:	d905      	bls.n	800944a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800943e:	2301      	movs	r3, #1
 8009440:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009442:	4b0a      	ldr	r3, [pc, #40]	; (800946c <xTaskRemoveFromEventList+0xc0>)
 8009444:	2201      	movs	r2, #1
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	e001      	b.n	800944e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800944e:	697b      	ldr	r3, [r7, #20]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000460 	.word	0x20000460
 800945c:	20000440 	.word	0x20000440
 8009460:	2000033c 	.word	0x2000033c
 8009464:	200003f8 	.word	0x200003f8
 8009468:	20000338 	.word	0x20000338
 800946c:	2000044c 	.word	0x2000044c

08009470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009478:	4b06      	ldr	r3, [pc, #24]	; (8009494 <vTaskInternalSetTimeOutState+0x24>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009480:	4b05      	ldr	r3, [pc, #20]	; (8009498 <vTaskInternalSetTimeOutState+0x28>)
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	605a      	str	r2, [r3, #4]
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	20000450 	.word	0x20000450
 8009498:	2000043c 	.word	0x2000043c

0800949c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	613b      	str	r3, [r7, #16]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	60fb      	str	r3, [r7, #12]
}
 80094da:	bf00      	nop
 80094dc:	e7fe      	b.n	80094dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094de:	f000 fe69 	bl	800a1b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094e2:	4b1d      	ldr	r3, [pc, #116]	; (8009558 <xTaskCheckForTimeOut+0xbc>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094fa:	d102      	bne.n	8009502 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094fc:	2300      	movs	r3, #0
 80094fe:	61fb      	str	r3, [r7, #28]
 8009500:	e023      	b.n	800954a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	4b15      	ldr	r3, [pc, #84]	; (800955c <xTaskCheckForTimeOut+0xc0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	429a      	cmp	r2, r3
 800950c:	d007      	beq.n	800951e <xTaskCheckForTimeOut+0x82>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	429a      	cmp	r2, r3
 8009516:	d302      	bcc.n	800951e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009518:	2301      	movs	r3, #1
 800951a:	61fb      	str	r3, [r7, #28]
 800951c:	e015      	b.n	800954a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	429a      	cmp	r2, r3
 8009526:	d20b      	bcs.n	8009540 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff ff9b 	bl	8009470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800953a:	2300      	movs	r3, #0
 800953c:	61fb      	str	r3, [r7, #28]
 800953e:	e004      	b.n	800954a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009546:	2301      	movs	r3, #1
 8009548:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800954a:	f000 fe63 	bl	800a214 <vPortExitCritical>

	return xReturn;
 800954e:	69fb      	ldr	r3, [r7, #28]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3720      	adds	r7, #32
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	2000043c 	.word	0x2000043c
 800955c:	20000450 	.word	0x20000450

08009560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009560:	b480      	push	{r7}
 8009562:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009564:	4b03      	ldr	r3, [pc, #12]	; (8009574 <vTaskMissedYield+0x14>)
 8009566:	2201      	movs	r2, #1
 8009568:	601a      	str	r2, [r3, #0]
}
 800956a:	bf00      	nop
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	2000044c 	.word	0x2000044c

08009578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009580:	f000 f852 	bl	8009628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009584:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <prvIdleTask+0x28>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d9f9      	bls.n	8009580 <prvIdleTask+0x8>
			{
				taskYIELD();
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <prvIdleTask+0x2c>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800959c:	e7f0      	b.n	8009580 <prvIdleTask+0x8>
 800959e:	bf00      	nop
 80095a0:	2000033c 	.word	0x2000033c
 80095a4:	e000ed04 	.word	0xe000ed04

080095a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095ae:	2300      	movs	r3, #0
 80095b0:	607b      	str	r3, [r7, #4]
 80095b2:	e00c      	b.n	80095ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4a12      	ldr	r2, [pc, #72]	; (8009608 <prvInitialiseTaskLists+0x60>)
 80095c0:	4413      	add	r3, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe faa7 	bl	8007b16 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	3301      	adds	r3, #1
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b06      	cmp	r3, #6
 80095d2:	d9ef      	bls.n	80095b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095d4:	480d      	ldr	r0, [pc, #52]	; (800960c <prvInitialiseTaskLists+0x64>)
 80095d6:	f7fe fa9e 	bl	8007b16 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095da:	480d      	ldr	r0, [pc, #52]	; (8009610 <prvInitialiseTaskLists+0x68>)
 80095dc:	f7fe fa9b 	bl	8007b16 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095e0:	480c      	ldr	r0, [pc, #48]	; (8009614 <prvInitialiseTaskLists+0x6c>)
 80095e2:	f7fe fa98 	bl	8007b16 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095e6:	480c      	ldr	r0, [pc, #48]	; (8009618 <prvInitialiseTaskLists+0x70>)
 80095e8:	f7fe fa95 	bl	8007b16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095ec:	480b      	ldr	r0, [pc, #44]	; (800961c <prvInitialiseTaskLists+0x74>)
 80095ee:	f7fe fa92 	bl	8007b16 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <prvInitialiseTaskLists+0x78>)
 80095f4:	4a05      	ldr	r2, [pc, #20]	; (800960c <prvInitialiseTaskLists+0x64>)
 80095f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095f8:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <prvInitialiseTaskLists+0x7c>)
 80095fa:	4a05      	ldr	r2, [pc, #20]	; (8009610 <prvInitialiseTaskLists+0x68>)
 80095fc:	601a      	str	r2, [r3, #0]
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	2000033c 	.word	0x2000033c
 800960c:	200003c8 	.word	0x200003c8
 8009610:	200003dc 	.word	0x200003dc
 8009614:	200003f8 	.word	0x200003f8
 8009618:	2000040c 	.word	0x2000040c
 800961c:	20000424 	.word	0x20000424
 8009620:	200003f0 	.word	0x200003f0
 8009624:	200003f4 	.word	0x200003f4

08009628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800962e:	e019      	b.n	8009664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009630:	f000 fdc0 	bl	800a1b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009634:	4b10      	ldr	r3, [pc, #64]	; (8009678 <prvCheckTasksWaitingTermination+0x50>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3304      	adds	r3, #4
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe faf2 	bl	8007c2a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009646:	4b0d      	ldr	r3, [pc, #52]	; (800967c <prvCheckTasksWaitingTermination+0x54>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3b01      	subs	r3, #1
 800964c:	4a0b      	ldr	r2, [pc, #44]	; (800967c <prvCheckTasksWaitingTermination+0x54>)
 800964e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009650:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <prvCheckTasksWaitingTermination+0x58>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3b01      	subs	r3, #1
 8009656:	4a0a      	ldr	r2, [pc, #40]	; (8009680 <prvCheckTasksWaitingTermination+0x58>)
 8009658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800965a:	f000 fddb 	bl	800a214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f810 	bl	8009684 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009664:	4b06      	ldr	r3, [pc, #24]	; (8009680 <prvCheckTasksWaitingTermination+0x58>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e1      	bne.n	8009630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	2000040c 	.word	0x2000040c
 800967c:	20000438 	.word	0x20000438
 8009680:	20000420 	.word	0x20000420

08009684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	334c      	adds	r3, #76	; 0x4c
 8009690:	4618      	mov	r0, r3
 8009692:	f015 facf 	bl	801ec34 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	4618      	mov	r0, r3
 800969c:	f000 ff78 	bl	800a590 <vPortFree>
			vPortFree( pxTCB );
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 ff75 	bl	800a590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096a6:	bf00      	nop
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
	...

080096b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096b6:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <prvResetNextTaskUnblockTime+0x38>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d104      	bne.n	80096ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096c0:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <prvResetNextTaskUnblockTime+0x3c>)
 80096c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096c8:	e008      	b.n	80096dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ca:	4b07      	ldr	r3, [pc, #28]	; (80096e8 <prvResetNextTaskUnblockTime+0x38>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	4a04      	ldr	r2, [pc, #16]	; (80096ec <prvResetNextTaskUnblockTime+0x3c>)
 80096da:	6013      	str	r3, [r2, #0]
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	200003f0 	.word	0x200003f0
 80096ec:	20000458 	.word	0x20000458

080096f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80096f6:	4b05      	ldr	r3, [pc, #20]	; (800970c <xTaskGetCurrentTaskHandle+0x1c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80096fc:	687b      	ldr	r3, [r7, #4]
	}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20000338 	.word	0x20000338

08009710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009716:	4b0b      	ldr	r3, [pc, #44]	; (8009744 <xTaskGetSchedulerState+0x34>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d102      	bne.n	8009724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800971e:	2301      	movs	r3, #1
 8009720:	607b      	str	r3, [r7, #4]
 8009722:	e008      	b.n	8009736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009724:	4b08      	ldr	r3, [pc, #32]	; (8009748 <xTaskGetSchedulerState+0x38>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800972c:	2302      	movs	r3, #2
 800972e:	607b      	str	r3, [r7, #4]
 8009730:	e001      	b.n	8009736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009732:	2300      	movs	r3, #0
 8009734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009736:	687b      	ldr	r3, [r7, #4]
	}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	20000444 	.word	0x20000444
 8009748:	20000460 	.word	0x20000460

0800974c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d05e      	beq.n	8009820 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009766:	4b31      	ldr	r3, [pc, #196]	; (800982c <xTaskPriorityInherit+0xe0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	429a      	cmp	r2, r3
 800976e:	d24e      	bcs.n	800980e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	2b00      	cmp	r3, #0
 8009776:	db06      	blt.n	8009786 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009778:	4b2c      	ldr	r3, [pc, #176]	; (800982c <xTaskPriorityInherit+0xe0>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977e:	f1c3 0207 	rsb	r2, r3, #7
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6959      	ldr	r1, [r3, #20]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4a26      	ldr	r2, [pc, #152]	; (8009830 <xTaskPriorityInherit+0xe4>)
 8009798:	4413      	add	r3, r2
 800979a:	4299      	cmp	r1, r3
 800979c:	d12f      	bne.n	80097fe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe fa41 	bl	8007c2a <uxListRemove>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	2201      	movs	r2, #1
 80097b4:	fa02 f303 	lsl.w	r3, r2, r3
 80097b8:	43da      	mvns	r2, r3
 80097ba:	4b1e      	ldr	r3, [pc, #120]	; (8009834 <xTaskPriorityInherit+0xe8>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4013      	ands	r3, r2
 80097c0:	4a1c      	ldr	r2, [pc, #112]	; (8009834 <xTaskPriorityInherit+0xe8>)
 80097c2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097c4:	4b19      	ldr	r3, [pc, #100]	; (800982c <xTaskPriorityInherit+0xe0>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	2201      	movs	r2, #1
 80097d4:	409a      	lsls	r2, r3
 80097d6:	4b17      	ldr	r3, [pc, #92]	; (8009834 <xTaskPriorityInherit+0xe8>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4313      	orrs	r3, r2
 80097dc:	4a15      	ldr	r2, [pc, #84]	; (8009834 <xTaskPriorityInherit+0xe8>)
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4a10      	ldr	r2, [pc, #64]	; (8009830 <xTaskPriorityInherit+0xe4>)
 80097ee:	441a      	add	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	3304      	adds	r3, #4
 80097f4:	4619      	mov	r1, r3
 80097f6:	4610      	mov	r0, r2
 80097f8:	f7fe f9ba 	bl	8007b70 <vListInsertEnd>
 80097fc:	e004      	b.n	8009808 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097fe:	4b0b      	ldr	r3, [pc, #44]	; (800982c <xTaskPriorityInherit+0xe0>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009808:	2301      	movs	r3, #1
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	e008      	b.n	8009820 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <xTaskPriorityInherit+0xe0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	429a      	cmp	r2, r3
 800981a:	d201      	bcs.n	8009820 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800981c:	2301      	movs	r3, #1
 800981e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009820:	68fb      	ldr	r3, [r7, #12]
	}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000338 	.word	0x20000338
 8009830:	2000033c 	.word	0x2000033c
 8009834:	20000440 	.word	0x20000440

08009838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009844:	2300      	movs	r3, #0
 8009846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d06e      	beq.n	800992c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800984e:	4b3a      	ldr	r3, [pc, #232]	; (8009938 <xTaskPriorityDisinherit+0x100>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	429a      	cmp	r2, r3
 8009856:	d00a      	beq.n	800986e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	60fb      	str	r3, [r7, #12]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10a      	bne.n	800988c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	60bb      	str	r3, [r7, #8]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009890:	1e5a      	subs	r2, r3, #1
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989e:	429a      	cmp	r2, r3
 80098a0:	d044      	beq.n	800992c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d140      	bne.n	800992c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	3304      	adds	r3, #4
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe f9bb 	bl	8007c2a <uxListRemove>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d115      	bne.n	80098e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098be:	491f      	ldr	r1, [pc, #124]	; (800993c <xTaskPriorityDisinherit+0x104>)
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10a      	bne.n	80098e6 <xTaskPriorityDisinherit+0xae>
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	2201      	movs	r2, #1
 80098d6:	fa02 f303 	lsl.w	r3, r2, r3
 80098da:	43da      	mvns	r2, r3
 80098dc:	4b18      	ldr	r3, [pc, #96]	; (8009940 <xTaskPriorityDisinherit+0x108>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4013      	ands	r3, r2
 80098e2:	4a17      	ldr	r2, [pc, #92]	; (8009940 <xTaskPriorityDisinherit+0x108>)
 80098e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f2:	f1c3 0207 	rsb	r2, r3, #7
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	2201      	movs	r2, #1
 8009900:	409a      	lsls	r2, r3
 8009902:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <xTaskPriorityDisinherit+0x108>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4313      	orrs	r3, r2
 8009908:	4a0d      	ldr	r2, [pc, #52]	; (8009940 <xTaskPriorityDisinherit+0x108>)
 800990a:	6013      	str	r3, [r2, #0]
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4a08      	ldr	r2, [pc, #32]	; (800993c <xTaskPriorityDisinherit+0x104>)
 800991a:	441a      	add	r2, r3
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	3304      	adds	r3, #4
 8009920:	4619      	mov	r1, r3
 8009922:	4610      	mov	r0, r2
 8009924:	f7fe f924 	bl	8007b70 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009928:	2301      	movs	r3, #1
 800992a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800992c:	697b      	ldr	r3, [r7, #20]
	}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20000338 	.word	0x20000338
 800993c:	2000033c 	.word	0x2000033c
 8009940:	20000440 	.word	0x20000440

08009944 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009952:	2301      	movs	r3, #1
 8009954:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d077      	beq.n	8009a4c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	60fb      	str	r3, [r7, #12]
}
 8009976:	bf00      	nop
 8009978:	e7fe      	b.n	8009978 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d902      	bls.n	800998a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	61fb      	str	r3, [r7, #28]
 8009988:	e002      	b.n	8009990 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	69fa      	ldr	r2, [r7, #28]
 8009996:	429a      	cmp	r2, r3
 8009998:	d058      	beq.n	8009a4c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d153      	bne.n	8009a4c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80099a4:	4b2b      	ldr	r3, [pc, #172]	; (8009a54 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d10a      	bne.n	80099c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	60bb      	str	r3, [r7, #8]
}
 80099c0:	bf00      	nop
 80099c2:	e7fe      	b.n	80099c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	69fa      	ldr	r2, [r7, #28]
 80099ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	db04      	blt.n	80099e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	f1c3 0207 	rsb	r2, r3, #7
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	6959      	ldr	r1, [r3, #20]
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	4613      	mov	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4a19      	ldr	r2, [pc, #100]	; (8009a58 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80099f2:	4413      	add	r3, r2
 80099f4:	4299      	cmp	r1, r3
 80099f6:	d129      	bne.n	8009a4c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	3304      	adds	r3, #4
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe f914 	bl	8007c2a <uxListRemove>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10a      	bne.n	8009a1e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a12:	43da      	mvns	r2, r3
 8009a14:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	4a10      	ldr	r2, [pc, #64]	; (8009a5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009a1c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a22:	2201      	movs	r2, #1
 8009a24:	409a      	lsls	r2, r3
 8009a26:	4b0d      	ldr	r3, [pc, #52]	; (8009a5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	4a0b      	ldr	r2, [pc, #44]	; (8009a5c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a34:	4613      	mov	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4a06      	ldr	r2, [pc, #24]	; (8009a58 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009a3e:	441a      	add	r2, r3
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4619      	mov	r1, r3
 8009a46:	4610      	mov	r0, r2
 8009a48:	f7fe f892 	bl	8007b70 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a4c:	bf00      	nop
 8009a4e:	3720      	adds	r7, #32
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20000338 	.word	0x20000338
 8009a58:	2000033c 	.word	0x2000033c
 8009a5c:	20000440 	.word	0x20000440

08009a60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a64:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d004      	beq.n	8009a76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a6c:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a72:	3201      	adds	r2, #1
 8009a74:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009a76:	4b03      	ldr	r3, [pc, #12]	; (8009a84 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a78:	681b      	ldr	r3, [r3, #0]
	}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	20000338 	.word	0x20000338

08009a88 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009a96:	f000 fb8d 	bl	800a1b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a9a:	4b29      	ldr	r3, [pc, #164]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d01c      	beq.n	8009ae2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009aa8:	4b25      	ldr	r3, [pc, #148]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	43d2      	mvns	r2, r2
 8009ab4:	400a      	ands	r2, r1
 8009ab6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009aba:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00b      	beq.n	8009ae2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009aca:	2101      	movs	r1, #1
 8009acc:	6838      	ldr	r0, [r7, #0]
 8009ace:	f000 f9dd 	bl	8009e8c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009ad2:	4b1c      	ldr	r3, [pc, #112]	; (8009b44 <xTaskNotifyWait+0xbc>)
 8009ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009ae2:	f000 fb97 	bl	800a214 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009ae6:	f000 fb65 	bl	800a1b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009af0:	4b13      	ldr	r3, [pc, #76]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d002      	beq.n	8009b10 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	e00a      	b.n	8009b26 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009b10:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	43d2      	mvns	r2, r2
 8009b1c:	400a      	ands	r2, r1
 8009b1e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8009b22:	2301      	movs	r3, #1
 8009b24:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b26:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8009b30:	f000 fb70 	bl	800a214 <vPortExitCritical>

		return xReturn;
 8009b34:	697b      	ldr	r3, [r7, #20]
	}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000338 	.word	0x20000338
 8009b44:	e000ed04 	.word	0xe000ed04

08009b48 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08a      	sub	sp, #40	; 0x28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	4613      	mov	r3, r2
 8009b56:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <xTaskGenericNotify+0x30>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	61bb      	str	r3, [r7, #24]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009b7c:	f000 fb1a 	bl	800a1b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009b96:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	d82d      	bhi.n	8009c02 <xTaskGenericNotify+0xba>
 8009ba6:	a201      	add	r2, pc, #4	; (adr r2, 8009bac <xTaskGenericNotify+0x64>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009c25 	.word	0x08009c25
 8009bb0:	08009bc1 	.word	0x08009bc1
 8009bb4:	08009bd3 	.word	0x08009bd3
 8009bb8:	08009be3 	.word	0x08009be3
 8009bbc:	08009bed 	.word	0x08009bed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009bd0:	e02b      	b.n	8009c2a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009be0:	e023      	b.n	8009c2a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009bea:	e01e      	b.n	8009c2a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009bec:	7ffb      	ldrb	r3, [r7, #31]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d004      	beq.n	8009bfc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009bf2:	6a3b      	ldr	r3, [r7, #32]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009bfa:	e016      	b.n	8009c2a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009c00:	e013      	b.n	8009c2a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c0c:	d00c      	beq.n	8009c28 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	617b      	str	r3, [r7, #20]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <xTaskGenericNotify+0xda>
					break;
 8009c24:	bf00      	nop
 8009c26:	e000      	b.n	8009c2a <xTaskGenericNotify+0xe2>

					break;
 8009c28:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009c2a:	7ffb      	ldrb	r3, [r7, #31]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d139      	bne.n	8009ca4 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fd fff8 	bl	8007c2a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	2201      	movs	r2, #1
 8009c40:	409a      	lsls	r2, r3
 8009c42:	4b1c      	ldr	r3, [pc, #112]	; (8009cb4 <xTaskGenericNotify+0x16c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	4a1a      	ldr	r2, [pc, #104]	; (8009cb4 <xTaskGenericNotify+0x16c>)
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4a17      	ldr	r2, [pc, #92]	; (8009cb8 <xTaskGenericNotify+0x170>)
 8009c5a:	441a      	add	r2, r3
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f7fd ff84 	bl	8007b70 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00a      	beq.n	8009c86 <xTaskGenericNotify+0x13e>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	613b      	str	r3, [r7, #16]
}
 8009c82:	bf00      	nop
 8009c84:	e7fe      	b.n	8009c84 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8a:	4b0c      	ldr	r3, [pc, #48]	; (8009cbc <xTaskGenericNotify+0x174>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d907      	bls.n	8009ca4 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009c94:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <xTaskGenericNotify+0x178>)
 8009c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009ca4:	f000 fab6 	bl	800a214 <vPortExitCritical>

		return xReturn;
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3728      	adds	r7, #40	; 0x28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000440 	.word	0x20000440
 8009cb8:	2000033c 	.word	0x2000033c
 8009cbc:	20000338 	.word	0x20000338
 8009cc0:	e000ed04 	.word	0xe000ed04

08009cc4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08e      	sub	sp, #56	; 0x38
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10a      	bne.n	8009cf4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cf4:	f000 fb40 	bl	800a378 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009cfc:	f3ef 8211 	mrs	r2, BASEPRI
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	623a      	str	r2, [r7, #32]
 8009d12:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009d14:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d16:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	2202      	movs	r2, #2
 8009d36:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	2b04      	cmp	r3, #4
 8009d3e:	d82f      	bhi.n	8009da0 <xTaskGenericNotifyFromISR+0xdc>
 8009d40:	a201      	add	r2, pc, #4	; (adr r2, 8009d48 <xTaskGenericNotifyFromISR+0x84>)
 8009d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d46:	bf00      	nop
 8009d48:	08009dc3 	.word	0x08009dc3
 8009d4c:	08009d5d 	.word	0x08009d5d
 8009d50:	08009d6f 	.word	0x08009d6f
 8009d54:	08009d7f 	.word	0x08009d7f
 8009d58:	08009d89 	.word	0x08009d89
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009d6c:	e02c      	b.n	8009dc8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009d7c:	e024      	b.n	8009dc8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009d86:	e01f      	b.n	8009dc8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009d88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d004      	beq.n	8009d9a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009d98:	e016      	b.n	8009dc8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009d9e:	e013      	b.n	8009dc8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009daa:	d00c      	beq.n	8009dc6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	61bb      	str	r3, [r7, #24]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009dc2:	bf00      	nop
 8009dc4:	e000      	b.n	8009dc8 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009dc6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009dc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d145      	bne.n	8009e5c <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00a      	beq.n	8009dee <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	617b      	str	r3, [r7, #20]
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dee:	4b21      	ldr	r3, [pc, #132]	; (8009e74 <xTaskGenericNotifyFromISR+0x1b0>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d11c      	bne.n	8009e30 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	3304      	adds	r3, #4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fd ff15 	bl	8007c2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	2201      	movs	r2, #1
 8009e06:	409a      	lsls	r2, r3
 8009e08:	4b1b      	ldr	r3, [pc, #108]	; (8009e78 <xTaskGenericNotifyFromISR+0x1b4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <xTaskGenericNotifyFromISR+0x1b4>)
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4a17      	ldr	r2, [pc, #92]	; (8009e7c <xTaskGenericNotifyFromISR+0x1b8>)
 8009e20:	441a      	add	r2, r3
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	3304      	adds	r3, #4
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f7fd fea1 	bl	8007b70 <vListInsertEnd>
 8009e2e:	e005      	b.n	8009e3c <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e32:	3318      	adds	r3, #24
 8009e34:	4619      	mov	r1, r3
 8009e36:	4812      	ldr	r0, [pc, #72]	; (8009e80 <xTaskGenericNotifyFromISR+0x1bc>)
 8009e38:	f7fd fe9a 	bl	8007b70 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <xTaskGenericNotifyFromISR+0x1c0>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d908      	bls.n	8009e5c <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e52:	2201      	movs	r2, #1
 8009e54:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009e56:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <xTaskGenericNotifyFromISR+0x1c4>)
 8009e58:	2201      	movs	r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f383 8811 	msr	BASEPRI, r3
}
 8009e66:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3738      	adds	r7, #56	; 0x38
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20000460 	.word	0x20000460
 8009e78:	20000440 	.word	0x20000440
 8009e7c:	2000033c 	.word	0x2000033c
 8009e80:	200003f8 	.word	0x200003f8
 8009e84:	20000338 	.word	0x20000338
 8009e88:	2000044c 	.word	0x2000044c

08009e8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e96:	4b29      	ldr	r3, [pc, #164]	; (8009f3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e9c:	4b28      	ldr	r3, [pc, #160]	; (8009f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fd fec1 	bl	8007c2a <uxListRemove>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d10b      	bne.n	8009ec6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009eae:	4b24      	ldr	r3, [pc, #144]	; (8009f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eba:	43da      	mvns	r2, r3
 8009ebc:	4b21      	ldr	r3, [pc, #132]	; (8009f44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	4a20      	ldr	r2, [pc, #128]	; (8009f44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ec4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ecc:	d10a      	bne.n	8009ee4 <prvAddCurrentTaskToDelayedList+0x58>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d007      	beq.n	8009ee4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ed4:	4b1a      	ldr	r3, [pc, #104]	; (8009f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	4619      	mov	r1, r3
 8009edc:	481a      	ldr	r0, [pc, #104]	; (8009f48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ede:	f7fd fe47 	bl	8007b70 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ee2:	e026      	b.n	8009f32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4413      	add	r3, r2
 8009eea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009eec:	4b14      	ldr	r3, [pc, #80]	; (8009f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d209      	bcs.n	8009f10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009efc:	4b13      	ldr	r3, [pc, #76]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3304      	adds	r3, #4
 8009f06:	4619      	mov	r1, r3
 8009f08:	4610      	mov	r0, r2
 8009f0a:	f7fd fe55 	bl	8007bb8 <vListInsert>
}
 8009f0e:	e010      	b.n	8009f32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f10:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	f7fd fe4b 	bl	8007bb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f22:	4b0c      	ldr	r3, [pc, #48]	; (8009f54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d202      	bcs.n	8009f32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f2c:	4a09      	ldr	r2, [pc, #36]	; (8009f54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6013      	str	r3, [r2, #0]
}
 8009f32:	bf00      	nop
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	2000043c 	.word	0x2000043c
 8009f40:	20000338 	.word	0x20000338
 8009f44:	20000440 	.word	0x20000440
 8009f48:	20000424 	.word	0x20000424
 8009f4c:	200003f4 	.word	0x200003f4
 8009f50:	200003f0 	.word	0x200003f0
 8009f54:	20000458 	.word	0x20000458

08009f58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3b04      	subs	r3, #4
 8009f68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3b04      	subs	r3, #4
 8009f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f023 0201 	bic.w	r2, r3, #1
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3b04      	subs	r3, #4
 8009f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f88:	4a0c      	ldr	r2, [pc, #48]	; (8009fbc <pxPortInitialiseStack+0x64>)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3b14      	subs	r3, #20
 8009f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3b04      	subs	r3, #4
 8009f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f06f 0202 	mvn.w	r2, #2
 8009fa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	3b20      	subs	r3, #32
 8009fac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fae:	68fb      	ldr	r3, [r7, #12]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	08009fc1 	.word	0x08009fc1

08009fc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fca:	4b12      	ldr	r3, [pc, #72]	; (800a014 <prvTaskExitError+0x54>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fd2:	d00a      	beq.n	8009fea <prvTaskExitError+0x2a>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	60fb      	str	r3, [r7, #12]
}
 8009fe6:	bf00      	nop
 8009fe8:	e7fe      	b.n	8009fe8 <prvTaskExitError+0x28>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	60bb      	str	r3, [r7, #8]
}
 8009ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ffe:	bf00      	nop
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0fc      	beq.n	800a000 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a006:	bf00      	nop
 800a008:	bf00      	nop
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	20000050 	.word	0x20000050
	...

0800a020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <pxCurrentTCBConst2>)
 800a022:	6819      	ldr	r1, [r3, #0]
 800a024:	6808      	ldr	r0, [r1, #0]
 800a026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02a:	f380 8809 	msr	PSP, r0
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f04f 0000 	mov.w	r0, #0
 800a036:	f380 8811 	msr	BASEPRI, r0
 800a03a:	4770      	bx	lr
 800a03c:	f3af 8000 	nop.w

0800a040 <pxCurrentTCBConst2>:
 800a040:	20000338 	.word	0x20000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop

0800a048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a048:	4808      	ldr	r0, [pc, #32]	; (800a06c <prvPortStartFirstTask+0x24>)
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	6800      	ldr	r0, [r0, #0]
 800a04e:	f380 8808 	msr	MSP, r0
 800a052:	f04f 0000 	mov.w	r0, #0
 800a056:	f380 8814 	msr	CONTROL, r0
 800a05a:	b662      	cpsie	i
 800a05c:	b661      	cpsie	f
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	df00      	svc	0
 800a068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a06a:	bf00      	nop
 800a06c:	e000ed08 	.word	0xe000ed08

0800a070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a076:	4b46      	ldr	r3, [pc, #280]	; (800a190 <xPortStartScheduler+0x120>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a46      	ldr	r2, [pc, #280]	; (800a194 <xPortStartScheduler+0x124>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d10a      	bne.n	800a096 <xPortStartScheduler+0x26>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	613b      	str	r3, [r7, #16]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a096:	4b3e      	ldr	r3, [pc, #248]	; (800a190 <xPortStartScheduler+0x120>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a3f      	ldr	r2, [pc, #252]	; (800a198 <xPortStartScheduler+0x128>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d10a      	bne.n	800a0b6 <xPortStartScheduler+0x46>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	60fb      	str	r3, [r7, #12]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0b6:	4b39      	ldr	r3, [pc, #228]	; (800a19c <xPortStartScheduler+0x12c>)
 800a0b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	22ff      	movs	r2, #255	; 0xff
 800a0c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	4b31      	ldr	r3, [pc, #196]	; (800a1a0 <xPortStartScheduler+0x130>)
 800a0dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0de:	4b31      	ldr	r3, [pc, #196]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a0e0:	2207      	movs	r2, #7
 800a0e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0e4:	e009      	b.n	800a0fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a0e6:	4b2f      	ldr	r3, [pc, #188]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	4a2d      	ldr	r2, [pc, #180]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a0ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	005b      	lsls	r3, r3, #1
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a102:	2b80      	cmp	r3, #128	; 0x80
 800a104:	d0ef      	beq.n	800a0e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a106:	4b27      	ldr	r3, [pc, #156]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f1c3 0307 	rsb	r3, r3, #7
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d00a      	beq.n	800a128 <xPortStartScheduler+0xb8>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	60bb      	str	r3, [r7, #8]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a128:	4b1e      	ldr	r3, [pc, #120]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a132:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a13a:	4a1a      	ldr	r2, [pc, #104]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a13c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	b2da      	uxtb	r2, r3
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a146:	4b18      	ldr	r3, [pc, #96]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a17      	ldr	r2, [pc, #92]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a14c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a152:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a14      	ldr	r2, [pc, #80]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a15c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a15e:	f000 f8dd 	bl	800a31c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a162:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <xPortStartScheduler+0x13c>)
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a168:	f000 f8fc 	bl	800a364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a16c:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <xPortStartScheduler+0x140>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a0f      	ldr	r2, [pc, #60]	; (800a1b0 <xPortStartScheduler+0x140>)
 800a172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a178:	f7ff ff66 	bl	800a048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a17c:	f7ff f890 	bl	80092a0 <vTaskSwitchContext>
	prvTaskExitError();
 800a180:	f7ff ff1e 	bl	8009fc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	e000ed00 	.word	0xe000ed00
 800a194:	410fc271 	.word	0x410fc271
 800a198:	410fc270 	.word	0x410fc270
 800a19c:	e000e400 	.word	0xe000e400
 800a1a0:	20000464 	.word	0x20000464
 800a1a4:	20000468 	.word	0x20000468
 800a1a8:	e000ed20 	.word	0xe000ed20
 800a1ac:	20000050 	.word	0x20000050
 800a1b0:	e000ef34 	.word	0xe000ef34

0800a1b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	607b      	str	r3, [r7, #4]
}
 800a1cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <vPortEnterCritical+0x58>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	4a0d      	ldr	r2, [pc, #52]	; (800a20c <vPortEnterCritical+0x58>)
 800a1d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <vPortEnterCritical+0x58>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d10f      	bne.n	800a200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <vPortEnterCritical+0x5c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <vPortEnterCritical+0x4c>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	603b      	str	r3, [r7, #0]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <vPortEnterCritical+0x4a>
	}
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000050 	.word	0x20000050
 800a210:	e000ed04 	.word	0xe000ed04

0800a214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a21a:	4b12      	ldr	r3, [pc, #72]	; (800a264 <vPortExitCritical+0x50>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <vPortExitCritical+0x24>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	607b      	str	r3, [r7, #4]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <vPortExitCritical+0x50>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4a09      	ldr	r2, [pc, #36]	; (800a264 <vPortExitCritical+0x50>)
 800a240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a242:	4b08      	ldr	r3, [pc, #32]	; (800a264 <vPortExitCritical+0x50>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d105      	bne.n	800a256 <vPortExitCritical+0x42>
 800a24a:	2300      	movs	r3, #0
 800a24c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	f383 8811 	msr	BASEPRI, r3
}
 800a254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20000050 	.word	0x20000050
	...

0800a270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a270:	f3ef 8009 	mrs	r0, PSP
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	4b15      	ldr	r3, [pc, #84]	; (800a2d0 <pxCurrentTCBConst>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	f01e 0f10 	tst.w	lr, #16
 800a280:	bf08      	it	eq
 800a282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28a:	6010      	str	r0, [r2, #0]
 800a28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a294:	f380 8811 	msr	BASEPRI, r0
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f7fe fffe 	bl	80092a0 <vTaskSwitchContext>
 800a2a4:	f04f 0000 	mov.w	r0, #0
 800a2a8:	f380 8811 	msr	BASEPRI, r0
 800a2ac:	bc09      	pop	{r0, r3}
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	6808      	ldr	r0, [r1, #0]
 800a2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b6:	f01e 0f10 	tst.w	lr, #16
 800a2ba:	bf08      	it	eq
 800a2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2c0:	f380 8809 	msr	PSP, r0
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst>:
 800a2d0:	20000338 	.word	0x20000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
}
 800a2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2f2:	f7fe ff1d 	bl	8009130 <xTaskIncrementTick>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <SysTick_Handler+0x40>)
 800a2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	f383 8811 	msr	BASEPRI, r3
}
 800a30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <vPortSetupTimerInterrupt+0x34>)
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a326:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <vPortSetupTimerInterrupt+0x38>)
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a32c:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <vPortSetupTimerInterrupt+0x3c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a0a      	ldr	r2, [pc, #40]	; (800a35c <vPortSetupTimerInterrupt+0x40>)
 800a332:	fba2 2303 	umull	r2, r3, r2, r3
 800a336:	099b      	lsrs	r3, r3, #6
 800a338:	4a09      	ldr	r2, [pc, #36]	; (800a360 <vPortSetupTimerInterrupt+0x44>)
 800a33a:	3b01      	subs	r3, #1
 800a33c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a33e:	4b04      	ldr	r3, [pc, #16]	; (800a350 <vPortSetupTimerInterrupt+0x34>)
 800a340:	2207      	movs	r2, #7
 800a342:	601a      	str	r2, [r3, #0]
}
 800a344:	bf00      	nop
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	e000e010 	.word	0xe000e010
 800a354:	e000e018 	.word	0xe000e018
 800a358:	20000010 	.word	0x20000010
 800a35c:	10624dd3 	.word	0x10624dd3
 800a360:	e000e014 	.word	0xe000e014

0800a364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a374 <vPortEnableVFP+0x10>
 800a368:	6801      	ldr	r1, [r0, #0]
 800a36a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a36e:	6001      	str	r1, [r0, #0]
 800a370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a372:	bf00      	nop
 800a374:	e000ed88 	.word	0xe000ed88

0800a378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a37e:	f3ef 8305 	mrs	r3, IPSR
 800a382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b0f      	cmp	r3, #15
 800a388:	d914      	bls.n	800a3b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a38a:	4a17      	ldr	r2, [pc, #92]	; (800a3e8 <vPortValidateInterruptPriority+0x70>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a394:	4b15      	ldr	r3, [pc, #84]	; (800a3ec <vPortValidateInterruptPriority+0x74>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	7afa      	ldrb	r2, [r7, #11]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d20a      	bcs.n	800a3b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	607b      	str	r3, [r7, #4]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <vPortValidateInterruptPriority+0x78>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3bc:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <vPortValidateInterruptPriority+0x7c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d90a      	bls.n	800a3da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	603b      	str	r3, [r7, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <vPortValidateInterruptPriority+0x60>
	}
 800a3da:	bf00      	nop
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	e000e3f0 	.word	0xe000e3f0
 800a3ec:	20000464 	.word	0x20000464
 800a3f0:	e000ed0c 	.word	0xe000ed0c
 800a3f4:	20000468 	.word	0x20000468

0800a3f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08a      	sub	sp, #40	; 0x28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a404:	f7fe fdc8 	bl	8008f98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a408:	4b5b      	ldr	r3, [pc, #364]	; (800a578 <pvPortMalloc+0x180>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a410:	f000 f920 	bl	800a654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a414:	4b59      	ldr	r3, [pc, #356]	; (800a57c <pvPortMalloc+0x184>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4013      	ands	r3, r2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f040 8093 	bne.w	800a548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01d      	beq.n	800a464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a428:	2208      	movs	r2, #8
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	2b00      	cmp	r3, #0
 800a438:	d014      	beq.n	800a464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f023 0307 	bic.w	r3, r3, #7
 800a440:	3308      	adds	r3, #8
 800a442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <pvPortMalloc+0x6c>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	617b      	str	r3, [r7, #20]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d06e      	beq.n	800a548 <pvPortMalloc+0x150>
 800a46a:	4b45      	ldr	r3, [pc, #276]	; (800a580 <pvPortMalloc+0x188>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	429a      	cmp	r2, r3
 800a472:	d869      	bhi.n	800a548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a474:	4b43      	ldr	r3, [pc, #268]	; (800a584 <pvPortMalloc+0x18c>)
 800a476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a478:	4b42      	ldr	r3, [pc, #264]	; (800a584 <pvPortMalloc+0x18c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a47e:	e004      	b.n	800a48a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	429a      	cmp	r2, r3
 800a492:	d903      	bls.n	800a49c <pvPortMalloc+0xa4>
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1f1      	bne.n	800a480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a49c:	4b36      	ldr	r3, [pc, #216]	; (800a578 <pvPortMalloc+0x180>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d050      	beq.n	800a548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2208      	movs	r2, #8
 800a4ac:	4413      	add	r3, r2
 800a4ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	1ad2      	subs	r2, r2, r3
 800a4c0:	2308      	movs	r3, #8
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d91f      	bls.n	800a508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f003 0307 	and.w	r3, r3, #7
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	613b      	str	r3, [r7, #16]
}
 800a4ec:	bf00      	nop
 800a4ee:	e7fe      	b.n	800a4ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	1ad2      	subs	r2, r2, r3
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a502:	69b8      	ldr	r0, [r7, #24]
 800a504:	f000 f90a 	bl	800a71c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a508:	4b1d      	ldr	r3, [pc, #116]	; (800a580 <pvPortMalloc+0x188>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	4a1b      	ldr	r2, [pc, #108]	; (800a580 <pvPortMalloc+0x188>)
 800a514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a516:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <pvPortMalloc+0x188>)
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <pvPortMalloc+0x190>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d203      	bcs.n	800a52a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a522:	4b17      	ldr	r3, [pc, #92]	; (800a580 <pvPortMalloc+0x188>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a18      	ldr	r2, [pc, #96]	; (800a588 <pvPortMalloc+0x190>)
 800a528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <pvPortMalloc+0x184>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	431a      	orrs	r2, r3
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	2200      	movs	r2, #0
 800a53c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <pvPortMalloc+0x194>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3301      	adds	r3, #1
 800a544:	4a11      	ldr	r2, [pc, #68]	; (800a58c <pvPortMalloc+0x194>)
 800a546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a548:	f7fe fd34 	bl	8008fb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <pvPortMalloc+0x174>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	60fb      	str	r3, [r7, #12]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <pvPortMalloc+0x172>
	return pvReturn;
 800a56c:	69fb      	ldr	r3, [r7, #28]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3728      	adds	r7, #40	; 0x28
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20013cf4 	.word	0x20013cf4
 800a57c:	20013d08 	.word	0x20013d08
 800a580:	20013cf8 	.word	0x20013cf8
 800a584:	20013cec 	.word	0x20013cec
 800a588:	20013cfc 	.word	0x20013cfc
 800a58c:	20013d00 	.word	0x20013d00

0800a590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d04d      	beq.n	800a63e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5a2:	2308      	movs	r3, #8
 800a5a4:	425b      	negs	r3, r3
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	4b24      	ldr	r3, [pc, #144]	; (800a648 <vPortFree+0xb8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <vPortFree+0x44>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60fb      	str	r3, [r7, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00a      	beq.n	800a5f2 <vPortFree+0x62>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	60bb      	str	r3, [r7, #8]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	4b14      	ldr	r3, [pc, #80]	; (800a648 <vPortFree+0xb8>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01e      	beq.n	800a63e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d11a      	bne.n	800a63e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <vPortFree+0xb8>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	43db      	mvns	r3, r3
 800a612:	401a      	ands	r2, r3
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a618:	f7fe fcbe 	bl	8008f98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <vPortFree+0xbc>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4413      	add	r3, r2
 800a626:	4a09      	ldr	r2, [pc, #36]	; (800a64c <vPortFree+0xbc>)
 800a628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a62a:	6938      	ldr	r0, [r7, #16]
 800a62c:	f000 f876 	bl	800a71c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <vPortFree+0xc0>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3301      	adds	r3, #1
 800a636:	4a06      	ldr	r2, [pc, #24]	; (800a650 <vPortFree+0xc0>)
 800a638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a63a:	f7fe fcbb 	bl	8008fb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a63e:	bf00      	nop
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20013d08 	.word	0x20013d08
 800a64c:	20013cf8 	.word	0x20013cf8
 800a650:	20013d04 	.word	0x20013d04

0800a654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a65a:	4b29      	ldr	r3, [pc, #164]	; (800a700 <prvHeapInit+0xac>)
 800a65c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a65e:	4b29      	ldr	r3, [pc, #164]	; (800a704 <prvHeapInit+0xb0>)
 800a660:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00c      	beq.n	800a686 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3307      	adds	r3, #7
 800a670:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f023 0307 	bic.w	r3, r3, #7
 800a678:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	4a20      	ldr	r2, [pc, #128]	; (800a704 <prvHeapInit+0xb0>)
 800a682:	4413      	add	r3, r2
 800a684:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a68a:	4a1f      	ldr	r2, [pc, #124]	; (800a708 <prvHeapInit+0xb4>)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a690:	4b1d      	ldr	r3, [pc, #116]	; (800a708 <prvHeapInit+0xb4>)
 800a692:	2200      	movs	r2, #0
 800a694:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	4413      	add	r3, r2
 800a69c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a69e:	2208      	movs	r2, #8
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	1a9b      	subs	r3, r3, r2
 800a6a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f023 0307 	bic.w	r3, r3, #7
 800a6ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	4a16      	ldr	r2, [pc, #88]	; (800a70c <prvHeapInit+0xb8>)
 800a6b2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6b4:	4b15      	ldr	r3, [pc, #84]	; (800a70c <prvHeapInit+0xb8>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6bc:	4b13      	ldr	r3, [pc, #76]	; (800a70c <prvHeapInit+0xb8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	1ad2      	subs	r2, r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6d2:	4b0e      	ldr	r3, [pc, #56]	; (800a70c <prvHeapInit+0xb8>)
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	4a0c      	ldr	r2, [pc, #48]	; (800a710 <prvHeapInit+0xbc>)
 800a6e0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	4a0b      	ldr	r2, [pc, #44]	; (800a714 <prvHeapInit+0xc0>)
 800a6e8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6ea:	4b0b      	ldr	r3, [pc, #44]	; (800a718 <prvHeapInit+0xc4>)
 800a6ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6f0:	601a      	str	r2, [r3, #0]
}
 800a6f2:	bf00      	nop
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	00013880 	.word	0x00013880
 800a704:	2000046c 	.word	0x2000046c
 800a708:	20013cec 	.word	0x20013cec
 800a70c:	20013cf4 	.word	0x20013cf4
 800a710:	20013cfc 	.word	0x20013cfc
 800a714:	20013cf8 	.word	0x20013cf8
 800a718:	20013d08 	.word	0x20013d08

0800a71c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a724:	4b28      	ldr	r3, [pc, #160]	; (800a7c8 <prvInsertBlockIntoFreeList+0xac>)
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	e002      	b.n	800a730 <prvInsertBlockIntoFreeList+0x14>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	429a      	cmp	r2, r3
 800a738:	d8f7      	bhi.n	800a72a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	4413      	add	r3, r2
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d108      	bne.n	800a75e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	441a      	add	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	441a      	add	r2, r3
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d118      	bne.n	800a7a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	4b15      	ldr	r3, [pc, #84]	; (800a7cc <prvInsertBlockIntoFreeList+0xb0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d00d      	beq.n	800a79a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	441a      	add	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	e008      	b.n	800a7ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a79a:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <prvInsertBlockIntoFreeList+0xb0>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	e003      	b.n	800a7ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d002      	beq.n	800a7ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7ba:	bf00      	nop
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	20013cec 	.word	0x20013cec
 800a7cc:	20013cf4 	.word	0x20013cf4

0800a7d0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	22fa      	movs	r2, #250	; 0xfa
 800a7de:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	330c      	adds	r3, #12
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f004 fc7e 	bl	800f0ec <tcpip_send_msg_wait_sem>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a7f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d103      	bne.n	800a804 <netconn_apimsg+0x34>
    return apimsg->err;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a802:	e001      	b.n	800a808 <netconn_apimsg+0x38>
  }
  return err;
 800a804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08c      	sub	sp, #48	; 0x30
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	603a      	str	r2, [r7, #0]
 800a81a:	71fb      	strb	r3, [r7, #7]
 800a81c:	460b      	mov	r3, r1
 800a81e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f001 fa61 	bl	800bcec <netconn_alloc>
 800a82a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d054      	beq.n	800a8dc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a832:	79bb      	ldrb	r3, [r7, #6]
 800a834:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a838:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a83a:	f107 0308 	add.w	r3, r7, #8
 800a83e:	4619      	mov	r1, r3
 800a840:	4829      	ldr	r0, [pc, #164]	; (800a8e8 <netconn_new_with_proto_and_callback+0xd8>)
 800a842:	f7ff ffc5 	bl	800a7d0 <netconn_apimsg>
 800a846:	4603      	mov	r3, r0
 800a848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a84c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a850:	2b00      	cmp	r3, #0
 800a852:	d043      	beq.n	800a8dc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d005      	beq.n	800a868 <netconn_new_with_proto_and_callback+0x58>
 800a85c:	4b23      	ldr	r3, [pc, #140]	; (800a8ec <netconn_new_with_proto_and_callback+0xdc>)
 800a85e:	22a3      	movs	r2, #163	; 0xa3
 800a860:	4923      	ldr	r1, [pc, #140]	; (800a8f0 <netconn_new_with_proto_and_callback+0xe0>)
 800a862:	4824      	ldr	r0, [pc, #144]	; (800a8f4 <netconn_new_with_proto_and_callback+0xe4>)
 800a864:	f014 f90a 	bl	801ea7c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86a:	3310      	adds	r3, #16
 800a86c:	4618      	mov	r0, r3
 800a86e:	f013 f958 	bl	801db22 <sys_mbox_valid>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d105      	bne.n	800a884 <netconn_new_with_proto_and_callback+0x74>
 800a878:	4b1c      	ldr	r3, [pc, #112]	; (800a8ec <netconn_new_with_proto_and_callback+0xdc>)
 800a87a:	22a4      	movs	r2, #164	; 0xa4
 800a87c:	491e      	ldr	r1, [pc, #120]	; (800a8f8 <netconn_new_with_proto_and_callback+0xe8>)
 800a87e:	481d      	ldr	r0, [pc, #116]	; (800a8f4 <netconn_new_with_proto_and_callback+0xe4>)
 800a880:	f014 f8fc 	bl	801ea7c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	3314      	adds	r3, #20
 800a888:	4618      	mov	r0, r3
 800a88a:	f013 f94a 	bl	801db22 <sys_mbox_valid>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <netconn_new_with_proto_and_callback+0x90>
 800a894:	4b15      	ldr	r3, [pc, #84]	; (800a8ec <netconn_new_with_proto_and_callback+0xdc>)
 800a896:	22a6      	movs	r2, #166	; 0xa6
 800a898:	4918      	ldr	r1, [pc, #96]	; (800a8fc <netconn_new_with_proto_and_callback+0xec>)
 800a89a:	4816      	ldr	r0, [pc, #88]	; (800a8f4 <netconn_new_with_proto_and_callback+0xe4>)
 800a89c:	f014 f8ee 	bl	801ea7c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	330c      	adds	r3, #12
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f013 f9cb 	bl	801dc40 <sys_sem_valid>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d105      	bne.n	800a8bc <netconn_new_with_proto_and_callback+0xac>
 800a8b0:	4b0e      	ldr	r3, [pc, #56]	; (800a8ec <netconn_new_with_proto_and_callback+0xdc>)
 800a8b2:	22a9      	movs	r2, #169	; 0xa9
 800a8b4:	4912      	ldr	r1, [pc, #72]	; (800a900 <netconn_new_with_proto_and_callback+0xf0>)
 800a8b6:	480f      	ldr	r0, [pc, #60]	; (800a8f4 <netconn_new_with_proto_and_callback+0xe4>)
 800a8b8:	f014 f8e0 	bl	801ea7c <iprintf>
      sys_sem_free(&conn->op_completed);
 800a8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8be:	330c      	adds	r3, #12
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f013 f9b0 	bl	801dc26 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	3310      	adds	r3, #16
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f013 f8a2 	bl	801da14 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a8d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8d2:	2007      	movs	r0, #7
 800a8d4:	f006 f948 	bl	8010b68 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	e000      	b.n	800a8de <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3730      	adds	r7, #48	; 0x30
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	0800bcc1 	.word	0x0800bcc1
 800a8ec:	08022574 	.word	0x08022574
 800a8f0:	080225a8 	.word	0x080225a8
 800a8f4:	080225cc 	.word	0x080225cc
 800a8f8:	080225f4 	.word	0x080225f4
 800a8fc:	0802260c 	.word	0x0802260c
 800a900:	08022630 	.word	0x08022630

0800a904 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08c      	sub	sp, #48	; 0x30
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	e014      	b.n	800a940 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a91a:	2329      	movs	r3, #41	; 0x29
 800a91c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a91e:	f107 030c 	add.w	r3, r7, #12
 800a922:	4619      	mov	r1, r3
 800a924:	4808      	ldr	r0, [pc, #32]	; (800a948 <netconn_prepare_delete+0x44>)
 800a926:	f7ff ff53 	bl	800a7d0 <netconn_apimsg>
 800a92a:	4603      	mov	r3, r0
 800a92c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a930:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <netconn_prepare_delete+0x3a>
    return err;
 800a938:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a93c:	e000      	b.n	800a940 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3730      	adds	r7, #48	; 0x30
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	0800c225 	.word	0x0800c225

0800a94c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <netconn_delete+0x12>
    return ERR_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	e00d      	b.n	800a97a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff ffd0 	bl	800a904 <netconn_prepare_delete>
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <netconn_delete+0x2a>
    netconn_free(conn);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 fa29 	bl	800bdc8 <netconn_free>
  }
  return err;
 800a976:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b08e      	sub	sp, #56	; 0x38
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
 800a990:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d109      	bne.n	800a9ac <netconn_getaddr+0x28>
 800a998:	4b1d      	ldr	r3, [pc, #116]	; (800aa10 <netconn_getaddr+0x8c>)
 800a99a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a99e:	491d      	ldr	r1, [pc, #116]	; (800aa14 <netconn_getaddr+0x90>)
 800a9a0:	481d      	ldr	r0, [pc, #116]	; (800aa18 <netconn_getaddr+0x94>)
 800a9a2:	f014 f86b 	bl	801ea7c <iprintf>
 800a9a6:	f06f 030f 	mvn.w	r3, #15
 800a9aa:	e02d      	b.n	800aa08 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d109      	bne.n	800a9c6 <netconn_getaddr+0x42>
 800a9b2:	4b17      	ldr	r3, [pc, #92]	; (800aa10 <netconn_getaddr+0x8c>)
 800a9b4:	f240 1213 	movw	r2, #275	; 0x113
 800a9b8:	4918      	ldr	r1, [pc, #96]	; (800aa1c <netconn_getaddr+0x98>)
 800a9ba:	4817      	ldr	r0, [pc, #92]	; (800aa18 <netconn_getaddr+0x94>)
 800a9bc:	f014 f85e 	bl	801ea7c <iprintf>
 800a9c0:	f06f 030f 	mvn.w	r3, #15
 800a9c4:	e020      	b.n	800aa08 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d109      	bne.n	800a9e0 <netconn_getaddr+0x5c>
 800a9cc:	4b10      	ldr	r3, [pc, #64]	; (800aa10 <netconn_getaddr+0x8c>)
 800a9ce:	f44f 728a 	mov.w	r2, #276	; 0x114
 800a9d2:	4913      	ldr	r1, [pc, #76]	; (800aa20 <netconn_getaddr+0x9c>)
 800a9d4:	4810      	ldr	r0, [pc, #64]	; (800aa18 <netconn_getaddr+0x94>)
 800a9d6:	f014 f851 	bl	801ea7c <iprintf>
 800a9da:	f06f 030f 	mvn.w	r3, #15
 800a9de:	e013      	b.n	800aa08 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800a9f2:	f107 0314 	add.w	r3, r7, #20
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	480a      	ldr	r0, [pc, #40]	; (800aa24 <netconn_getaddr+0xa0>)
 800a9fa:	f7ff fee9 	bl	800a7d0 <netconn_apimsg>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800aa04:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3738      	adds	r7, #56	; 0x38
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	08022574 	.word	0x08022574
 800aa14:	0802264c 	.word	0x0802264c
 800aa18:	080225cc 	.word	0x080225cc
 800aa1c:	0802266c 	.word	0x0802266c
 800aa20:	0802268c 	.word	0x0802268c
 800aa24:	0800ce1d 	.word	0x0800ce1d

0800aa28 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08e      	sub	sp, #56	; 0x38
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	4613      	mov	r3, r2
 800aa34:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d109      	bne.n	800aa50 <netconn_bind+0x28>
 800aa3c:	4b11      	ldr	r3, [pc, #68]	; (800aa84 <netconn_bind+0x5c>)
 800aa3e:	f44f 729c 	mov.w	r2, #312	; 0x138
 800aa42:	4911      	ldr	r1, [pc, #68]	; (800aa88 <netconn_bind+0x60>)
 800aa44:	4811      	ldr	r0, [pc, #68]	; (800aa8c <netconn_bind+0x64>)
 800aa46:	f014 f819 	bl	801ea7c <iprintf>
 800aa4a:	f06f 030f 	mvn.w	r3, #15
 800aa4e:	e015      	b.n	800aa7c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d101      	bne.n	800aa5a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800aa56:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <netconn_bind+0x68>)
 800aa58:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800aa62:	88fb      	ldrh	r3, [r7, #6]
 800aa64:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800aa66:	f107 0314 	add.w	r3, r7, #20
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4809      	ldr	r0, [pc, #36]	; (800aa94 <netconn_bind+0x6c>)
 800aa6e:	f7ff feaf 	bl	800a7d0 <netconn_apimsg>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800aa78:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3738      	adds	r7, #56	; 0x38
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	08022574 	.word	0x08022574
 800aa88:	080226ac 	.word	0x080226ac
 800aa8c:	080225cc 	.word	0x080225cc
 800aa90:	080266c0 	.word	0x080266c0
 800aa94:	0800c3ed 	.word	0x0800c3ed

0800aa98 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08e      	sub	sp, #56	; 0x38
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d109      	bne.n	800aac0 <netconn_connect+0x28>
 800aaac:	4b11      	ldr	r3, [pc, #68]	; (800aaf4 <netconn_connect+0x5c>)
 800aaae:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800aab2:	4911      	ldr	r1, [pc, #68]	; (800aaf8 <netconn_connect+0x60>)
 800aab4:	4811      	ldr	r0, [pc, #68]	; (800aafc <netconn_connect+0x64>)
 800aab6:	f013 ffe1 	bl	801ea7c <iprintf>
 800aaba:	f06f 030f 	mvn.w	r3, #15
 800aabe:	e015      	b.n	800aaec <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800aac6:	4b0e      	ldr	r3, [pc, #56]	; (800ab00 <netconn_connect+0x68>)
 800aac8:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800aad2:	88fb      	ldrh	r3, [r7, #6]
 800aad4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800aad6:	f107 0314 	add.w	r3, r7, #20
 800aada:	4619      	mov	r1, r3
 800aadc:	4809      	ldr	r0, [pc, #36]	; (800ab04 <netconn_connect+0x6c>)
 800aade:	f7ff fe77 	bl	800a7d0 <netconn_apimsg>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800aae8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3738      	adds	r7, #56	; 0x38
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	08022574 	.word	0x08022574
 800aaf8:	080226e8 	.word	0x080226e8
 800aafc:	080225cc 	.word	0x080225cc
 800ab00:	080266c0 	.word	0x080266c0
 800ab04:	0800c581 	.word	0x0800c581

0800ab08 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08c      	sub	sp, #48	; 0x30
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d109      	bne.n	800ab2a <netconn_disconnect+0x22>
 800ab16:	4b0d      	ldr	r3, [pc, #52]	; (800ab4c <netconn_disconnect+0x44>)
 800ab18:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ab1c:	490c      	ldr	r1, [pc, #48]	; (800ab50 <netconn_disconnect+0x48>)
 800ab1e:	480d      	ldr	r0, [pc, #52]	; (800ab54 <netconn_disconnect+0x4c>)
 800ab20:	f013 ffac 	bl	801ea7c <iprintf>
 800ab24:	f06f 030f 	mvn.w	r3, #15
 800ab28:	e00c      	b.n	800ab44 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800ab2e:	f107 030c 	add.w	r3, r7, #12
 800ab32:	4619      	mov	r1, r3
 800ab34:	4808      	ldr	r0, [pc, #32]	; (800ab58 <netconn_disconnect+0x50>)
 800ab36:	f7ff fe4b 	bl	800a7d0 <netconn_apimsg>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ab40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3730      	adds	r7, #48	; 0x30
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	08022574 	.word	0x08022574
 800ab50:	08022708 	.word	0x08022708
 800ab54:	080225cc 	.word	0x080225cc
 800ab58:	0800c6fd 	.word	0x0800c6fd

0800ab5c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08c      	sub	sp, #48	; 0x30
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d109      	bne.n	800ab82 <netconn_listen_with_backlog+0x26>
 800ab6e:	4b0d      	ldr	r3, [pc, #52]	; (800aba4 <netconn_listen_with_backlog+0x48>)
 800ab70:	f240 12bb 	movw	r2, #443	; 0x1bb
 800ab74:	490c      	ldr	r1, [pc, #48]	; (800aba8 <netconn_listen_with_backlog+0x4c>)
 800ab76:	480d      	ldr	r0, [pc, #52]	; (800abac <netconn_listen_with_backlog+0x50>)
 800ab78:	f013 ff80 	bl	801ea7c <iprintf>
 800ab7c:	f06f 030f 	mvn.w	r3, #15
 800ab80:	e00c      	b.n	800ab9c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ab86:	f107 030c 	add.w	r3, r7, #12
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4808      	ldr	r0, [pc, #32]	; (800abb0 <netconn_listen_with_backlog+0x54>)
 800ab8e:	f7ff fe1f 	bl	800a7d0 <netconn_apimsg>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ab98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3730      	adds	r7, #48	; 0x30
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	08022574 	.word	0x08022574
 800aba8:	0802272c 	.word	0x0802272c
 800abac:	080225cc 	.word	0x080225cc
 800abb0:	0800c739 	.word	0x0800c739

0800abb4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d109      	bne.n	800abd8 <netconn_accept+0x24>
 800abc4:	4b3d      	ldr	r3, [pc, #244]	; (800acbc <netconn_accept+0x108>)
 800abc6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800abca:	493d      	ldr	r1, [pc, #244]	; (800acc0 <netconn_accept+0x10c>)
 800abcc:	483d      	ldr	r0, [pc, #244]	; (800acc4 <netconn_accept+0x110>)
 800abce:	f013 ff55 	bl	801ea7c <iprintf>
 800abd2:	f06f 030f 	mvn.w	r3, #15
 800abd6:	e06c      	b.n	800acb2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <netconn_accept+0x44>
 800abe4:	4b35      	ldr	r3, [pc, #212]	; (800acbc <netconn_accept+0x108>)
 800abe6:	f240 12e3 	movw	r2, #483	; 0x1e3
 800abea:	4937      	ldr	r1, [pc, #220]	; (800acc8 <netconn_accept+0x114>)
 800abec:	4835      	ldr	r0, [pc, #212]	; (800acc4 <netconn_accept+0x110>)
 800abee:	f013 ff45 	bl	801ea7c <iprintf>
 800abf2:	f06f 030f 	mvn.w	r3, #15
 800abf6:	e05c      	b.n	800acb2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fb99 	bl	800b330 <netconn_err>
 800abfe:	4603      	mov	r3, r0
 800ac00:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800ac02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800ac0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac0e:	e050      	b.n	800acb2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3314      	adds	r3, #20
 800ac14:	4618      	mov	r0, r3
 800ac16:	f012 ff84 	bl	801db22 <sys_mbox_valid>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <netconn_accept+0x78>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	7f1b      	ldrb	r3, [r3, #28]
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800ac2c:	f06f 030e 	mvn.w	r3, #14
 800ac30:	e03f      	b.n	800acb2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	7f1b      	ldrb	r3, [r3, #28]
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00e      	beq.n	800ac5c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3314      	adds	r3, #20
 800ac42:	f107 020c 	add.w	r2, r7, #12
 800ac46:	4611      	mov	r1, r2
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f012 ff4e 	bl	801daea <sys_arch_mbox_tryfetch>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac54:	d10a      	bne.n	800ac6c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ac56:	f06f 0306 	mvn.w	r3, #6
 800ac5a:	e02a      	b.n	800acb2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	3314      	adds	r3, #20
 800ac60:	f107 010c 	add.w	r1, r7, #12
 800ac64:	2200      	movs	r2, #0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f012 ff00 	bl	801da6c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d005      	beq.n	800ac80 <netconn_accept+0xcc>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2101      	movs	r1, #1
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f107 0213 	add.w	r2, r7, #19
 800ac86:	4611      	mov	r1, r2
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 fbff 	bl	800b48c <lwip_netconn_is_err_msg>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800ac94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac98:	e00b      	b.n	800acb2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d102      	bne.n	800aca6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800aca0:	f06f 030e 	mvn.w	r3, #14
 800aca4:	e005      	b.n	800acb2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800acb0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3718      	adds	r7, #24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	08022574 	.word	0x08022574
 800acc0:	0802274c 	.word	0x0802274c
 800acc4:	080225cc 	.word	0x080225cc
 800acc8:	0802276c 	.word	0x0802276c

0800accc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800acda:	2300      	movs	r3, #0
 800acdc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d109      	bne.n	800acf8 <netconn_recv_data+0x2c>
 800ace4:	4b58      	ldr	r3, [pc, #352]	; (800ae48 <netconn_recv_data+0x17c>)
 800ace6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800acea:	4958      	ldr	r1, [pc, #352]	; (800ae4c <netconn_recv_data+0x180>)
 800acec:	4858      	ldr	r0, [pc, #352]	; (800ae50 <netconn_recv_data+0x184>)
 800acee:	f013 fec5 	bl	801ea7c <iprintf>
 800acf2:	f06f 030f 	mvn.w	r3, #15
 800acf6:	e0a2      	b.n	800ae3e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2200      	movs	r2, #0
 800acfc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d109      	bne.n	800ad18 <netconn_recv_data+0x4c>
 800ad04:	4b50      	ldr	r3, [pc, #320]	; (800ae48 <netconn_recv_data+0x17c>)
 800ad06:	f240 224a 	movw	r2, #586	; 0x24a
 800ad0a:	4952      	ldr	r1, [pc, #328]	; (800ae54 <netconn_recv_data+0x188>)
 800ad0c:	4850      	ldr	r0, [pc, #320]	; (800ae50 <netconn_recv_data+0x184>)
 800ad0e:	f013 feb5 	bl	801ea7c <iprintf>
 800ad12:	f06f 030f 	mvn.w	r3, #15
 800ad16:	e092      	b.n	800ae3e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	3310      	adds	r3, #16
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f012 ff00 	bl	801db22 <sys_mbox_valid>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10e      	bne.n	800ad46 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 fb01 	bl	800b330 <netconn_err>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ad32:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ad3a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ad3e:	e07e      	b.n	800ae3e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800ad40:	f06f 030a 	mvn.w	r3, #10
 800ad44:	e07b      	b.n	800ae3e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	7f1b      	ldrb	r3, [r3, #28]
 800ad4a:	f003 0302 	and.w	r3, r3, #2
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d10f      	bne.n	800ad72 <netconn_recv_data+0xa6>
 800ad52:	79fb      	ldrb	r3, [r7, #7]
 800ad54:	f003 0304 	and.w	r3, r3, #4
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10a      	bne.n	800ad72 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	7f1b      	ldrb	r3, [r3, #28]
 800ad60:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d104      	bne.n	800ad72 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d023      	beq.n	800adba <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3310      	adds	r3, #16
 800ad76:	f107 0218 	add.w	r2, r7, #24
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f012 feb4 	bl	801daea <sys_arch_mbox_tryfetch>
 800ad82:	4603      	mov	r3, r0
 800ad84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad88:	d11f      	bne.n	800adca <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 fad0 	bl	800b330 <netconn_err>
 800ad90:	4603      	mov	r3, r0
 800ad92:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800ad94:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ad9c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ada0:	e04d      	b.n	800ae3e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	7f1b      	ldrb	r3, [r3, #28]
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800adae:	f06f 030a 	mvn.w	r3, #10
 800adb2:	e044      	b.n	800ae3e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800adb4:	f06f 0306 	mvn.w	r3, #6
 800adb8:	e041      	b.n	800ae3e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3310      	adds	r3, #16
 800adbe:	f107 0118 	add.w	r1, r7, #24
 800adc2:	2200      	movs	r2, #0
 800adc4:	4618      	mov	r0, r3
 800adc6:	f012 fe51 	bl	801da6c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800add2:	2b10      	cmp	r3, #16
 800add4:	d117      	bne.n	800ae06 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	f107 0217 	add.w	r2, r7, #23
 800addc:	4611      	mov	r1, r2
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 fb54 	bl	800b48c <lwip_netconn_is_err_msg>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d009      	beq.n	800adfe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800adea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adee:	f113 0f0f 	cmn.w	r3, #15
 800adf2:	d101      	bne.n	800adf8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	e022      	b.n	800ae3e <netconn_recv_data+0x172>
      }
      return err;
 800adf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adfc:	e01f      	b.n	800ae3e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	891b      	ldrh	r3, [r3, #8]
 800ae02:	83fb      	strh	r3, [r7, #30]
 800ae04:	e00d      	b.n	800ae22 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d106      	bne.n	800ae1a <netconn_recv_data+0x14e>
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <netconn_recv_data+0x17c>)
 800ae0e:	f240 2291 	movw	r2, #657	; 0x291
 800ae12:	4911      	ldr	r1, [pc, #68]	; (800ae58 <netconn_recv_data+0x18c>)
 800ae14:	480e      	ldr	r0, [pc, #56]	; (800ae50 <netconn_recv_data+0x184>)
 800ae16:	f013 fe31 	bl	801ea7c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	891b      	ldrh	r3, [r3, #8]
 800ae20:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d005      	beq.n	800ae36 <netconn_recv_data+0x16a>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2e:	8bfa      	ldrh	r2, [r7, #30]
 800ae30:	2101      	movs	r1, #1
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ae36:	69ba      	ldr	r2, [r7, #24]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3720      	adds	r7, #32
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	08022574 	.word	0x08022574
 800ae4c:	0802278c 	.word	0x0802278c
 800ae50:	080225cc 	.word	0x080225cc
 800ae54:	080227ac 	.word	0x080227ac
 800ae58:	080227c8 	.word	0x080227c8

0800ae5c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d005      	beq.n	800ae7a <netconn_tcp_recvd_msg+0x1e>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae76:	2b10      	cmp	r3, #16
 800ae78:	d009      	beq.n	800ae8e <netconn_tcp_recvd_msg+0x32>
 800ae7a:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <netconn_tcp_recvd_msg+0x50>)
 800ae7c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800ae80:	490b      	ldr	r1, [pc, #44]	; (800aeb0 <netconn_tcp_recvd_msg+0x54>)
 800ae82:	480c      	ldr	r0, [pc, #48]	; (800aeb4 <netconn_tcp_recvd_msg+0x58>)
 800ae84:	f013 fdfa 	bl	801ea7c <iprintf>
 800ae88:	f06f 030f 	mvn.w	r3, #15
 800ae8c:	e00a      	b.n	800aea4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	4806      	ldr	r0, [pc, #24]	; (800aeb8 <netconn_tcp_recvd_msg+0x5c>)
 800ae9e:	f7ff fc97 	bl	800a7d0 <netconn_apimsg>
 800aea2:	4603      	mov	r3, r0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	08022574 	.word	0x08022574
 800aeb0:	080227d4 	.word	0x080227d4
 800aeb4:	080225cc 	.word	0x080225cc
 800aeb8:	0800c903 	.word	0x0800c903

0800aebc <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08c      	sub	sp, #48	; 0x30
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d005      	beq.n	800aed8 <netconn_tcp_recvd+0x1c>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aed4:	2b10      	cmp	r3, #16
 800aed6:	d009      	beq.n	800aeec <netconn_tcp_recvd+0x30>
 800aed8:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <netconn_tcp_recvd+0x50>)
 800aeda:	f240 22b5 	movw	r2, #693	; 0x2b5
 800aede:	490c      	ldr	r1, [pc, #48]	; (800af10 <netconn_tcp_recvd+0x54>)
 800aee0:	480c      	ldr	r0, [pc, #48]	; (800af14 <netconn_tcp_recvd+0x58>)
 800aee2:	f013 fdcb 	bl	801ea7c <iprintf>
 800aee6:	f06f 030f 	mvn.w	r3, #15
 800aeea:	e00b      	b.n	800af04 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800aeec:	f107 030c 	add.w	r3, r7, #12
 800aef0:	461a      	mov	r2, r3
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7ff ffb1 	bl	800ae5c <netconn_tcp_recvd_msg>
 800aefa:	4603      	mov	r3, r0
 800aefc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800af00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800af04:	4618      	mov	r0, r3
 800af06:	3730      	adds	r7, #48	; 0x30
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	08022574 	.word	0x08022574
 800af10:	080227d4 	.word	0x080227d4
 800af14:	080225cc 	.word	0x080225cc

0800af18 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b090      	sub	sp, #64	; 0x40
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	4613      	mov	r3, r2
 800af24:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	3310      	adds	r3, #16
 800af2a:	4618      	mov	r0, r3
 800af2c:	f012 fdf9 	bl	801db22 <sys_mbox_valid>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d102      	bne.n	800af3c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800af36:	f06f 030a 	mvn.w	r3, #10
 800af3a:	e06d      	b.n	800b018 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	7f1b      	ldrb	r3, [r3, #28]
 800af40:	b25b      	sxtb	r3, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	da07      	bge.n	800af56 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	7f1b      	ldrb	r3, [r3, #28]
 800af4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800af54:	e039      	b.n	800afca <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	461a      	mov	r2, r3
 800af5a:	68b9      	ldr	r1, [r7, #8]
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f7ff feb5 	bl	800accc <netconn_recv_data>
 800af62:	4603      	mov	r3, r0
 800af64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800af68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800af70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af74:	e050      	b.n	800b018 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	f003 0308 	and.w	r3, r3, #8
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10e      	bne.n	800afa4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <netconn_recv_data_tcp+0x7a>
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	891b      	ldrh	r3, [r3, #8]
 800af90:	e000      	b.n	800af94 <netconn_recv_data_tcp+0x7c>
 800af92:	2301      	movs	r3, #1
 800af94:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800af96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af98:	f107 0214 	add.w	r2, r7, #20
 800af9c:	4619      	mov	r1, r3
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f7ff ff5c 	bl	800ae5c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d134      	bne.n	800b014 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800afaa:	79fb      	ldrb	r3, [r7, #7]
 800afac:	f003 0310 	and.w	r3, r3, #16
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d009      	beq.n	800afc8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	7f1b      	ldrb	r3, [r3, #28]
 800afb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800afc2:	f06f 0306 	mvn.w	r3, #6
 800afc6:	e027      	b.n	800b018 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800afc8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d005      	beq.n	800afde <netconn_recv_data_tcp+0xc6>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd6:	2200      	movs	r2, #0
 800afd8:	2101      	movs	r1, #1
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10f      	bne.n	800b006 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 f9a2 	bl	800b330 <netconn_err>
 800afec:	4603      	mov	r3, r0
 800afee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800aff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <netconn_recv_data_tcp+0xe8>
          return err;
 800affa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800affe:	e00b      	b.n	800b018 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b000:	f06f 030d 	mvn.w	r3, #13
 800b004:	e008      	b.n	800b018 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b006:	2101      	movs	r1, #1
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f000 f961 	bl	800b2d0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b00e:	f06f 030e 	mvn.w	r3, #14
 800b012:	e001      	b.n	800b018 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b014:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3740      	adds	r7, #64	; 0x40
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	4613      	mov	r3, r2
 800b02c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d005      	beq.n	800b040 <netconn_recv_tcp_pbuf_flags+0x20>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b03c:	2b10      	cmp	r3, #16
 800b03e:	d009      	beq.n	800b054 <netconn_recv_tcp_pbuf_flags+0x34>
 800b040:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <netconn_recv_tcp_pbuf_flags+0x4c>)
 800b042:	f240 3225 	movw	r2, #805	; 0x325
 800b046:	490a      	ldr	r1, [pc, #40]	; (800b070 <netconn_recv_tcp_pbuf_flags+0x50>)
 800b048:	480a      	ldr	r0, [pc, #40]	; (800b074 <netconn_recv_tcp_pbuf_flags+0x54>)
 800b04a:	f013 fd17 	bl	801ea7c <iprintf>
 800b04e:	f06f 030f 	mvn.w	r3, #15
 800b052:	e006      	b.n	800b062 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800b054:	79fb      	ldrb	r3, [r7, #7]
 800b056:	461a      	mov	r2, r3
 800b058:	68b9      	ldr	r1, [r7, #8]
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f7ff ff5c 	bl	800af18 <netconn_recv_data_tcp>
 800b060:	4603      	mov	r3, r0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	08022574 	.word	0x08022574
 800b070:	080227d4 	.word	0x080227d4
 800b074:	080225cc 	.word	0x080225cc

0800b078 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	4613      	mov	r3, r2
 800b084:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d005      	beq.n	800b098 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b094:	2b10      	cmp	r3, #16
 800b096:	d109      	bne.n	800b0ac <netconn_recv_udp_raw_netbuf_flags+0x34>
 800b098:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800b09a:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800b09e:	490a      	ldr	r1, [pc, #40]	; (800b0c8 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800b0a0:	480a      	ldr	r0, [pc, #40]	; (800b0cc <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800b0a2:	f013 fceb 	bl	801ea7c <iprintf>
 800b0a6:	f06f 030f 	mvn.w	r3, #15
 800b0aa:	e006      	b.n	800b0ba <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b0ac:	79fb      	ldrb	r3, [r7, #7]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	68b9      	ldr	r1, [r7, #8]
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f7ff fe0a 	bl	800accc <netconn_recv_data>
 800b0b8:	4603      	mov	r3, r0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	08022574 	.word	0x08022574
 800b0c8:	080227f8 	.word	0x080227f8
 800b0cc:	080225cc 	.word	0x080225cc

0800b0d0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08c      	sub	sp, #48	; 0x30
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d109      	bne.n	800b0f4 <netconn_send+0x24>
 800b0e0:	4b0e      	ldr	r3, [pc, #56]	; (800b11c <netconn_send+0x4c>)
 800b0e2:	f240 32b2 	movw	r2, #946	; 0x3b2
 800b0e6:	490e      	ldr	r1, [pc, #56]	; (800b120 <netconn_send+0x50>)
 800b0e8:	480e      	ldr	r0, [pc, #56]	; (800b124 <netconn_send+0x54>)
 800b0ea:	f013 fcc7 	bl	801ea7c <iprintf>
 800b0ee:	f06f 030f 	mvn.w	r3, #15
 800b0f2:	e00e      	b.n	800b112 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800b0fc:	f107 030c 	add.w	r3, r7, #12
 800b100:	4619      	mov	r1, r3
 800b102:	4809      	ldr	r0, [pc, #36]	; (800b128 <netconn_send+0x58>)
 800b104:	f7ff fb64 	bl	800a7d0 <netconn_apimsg>
 800b108:	4603      	mov	r3, r0
 800b10a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b10e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b112:	4618      	mov	r0, r3
 800b114:	3730      	adds	r7, #48	; 0x30
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	08022574 	.word	0x08022574
 800b120:	08022830 	.word	0x08022830
 800b124:	080225cc 	.word	0x080225cc
 800b128:	0800c869 	.word	0x0800c869

0800b12c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af02      	add	r7, sp, #8
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b142:	78fa      	ldrb	r2, [r7, #3]
 800b144:	f107 0110 	add.w	r1, r7, #16
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	4613      	mov	r3, r2
 800b14e:	2201      	movs	r2, #1
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f000 f805 	bl	800b160 <netconn_write_vectors_partly>
 800b156:	4603      	mov	r3, r0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b092      	sub	sp, #72	; 0x48
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	4611      	mov	r1, r2
 800b16c:	461a      	mov	r2, r3
 800b16e:	460b      	mov	r3, r1
 800b170:	80fb      	strh	r3, [r7, #6]
 800b172:	4613      	mov	r3, r2
 800b174:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d109      	bne.n	800b190 <netconn_write_vectors_partly+0x30>
 800b17c:	4b4e      	ldr	r3, [pc, #312]	; (800b2b8 <netconn_write_vectors_partly+0x158>)
 800b17e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b182:	494e      	ldr	r1, [pc, #312]	; (800b2bc <netconn_write_vectors_partly+0x15c>)
 800b184:	484e      	ldr	r0, [pc, #312]	; (800b2c0 <netconn_write_vectors_partly+0x160>)
 800b186:	f013 fc79 	bl	801ea7c <iprintf>
 800b18a:	f06f 030f 	mvn.w	r3, #15
 800b18e:	e08e      	b.n	800b2ae <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b198:	2b10      	cmp	r3, #16
 800b19a:	d009      	beq.n	800b1b0 <netconn_write_vectors_partly+0x50>
 800b19c:	4b46      	ldr	r3, [pc, #280]	; (800b2b8 <netconn_write_vectors_partly+0x158>)
 800b19e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b1a2:	4948      	ldr	r1, [pc, #288]	; (800b2c4 <netconn_write_vectors_partly+0x164>)
 800b1a4:	4846      	ldr	r0, [pc, #280]	; (800b2c0 <netconn_write_vectors_partly+0x160>)
 800b1a6:	f013 fc69 	bl	801ea7c <iprintf>
 800b1aa:	f06f 0305 	mvn.w	r3, #5
 800b1ae:	e07e      	b.n	800b2ae <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	7f1b      	ldrb	r3, [r3, #28]
 800b1b4:	f003 0302 	and.w	r3, r3, #2
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d104      	bne.n	800b1c6 <netconn_write_vectors_partly+0x66>
 800b1bc:	797b      	ldrb	r3, [r7, #5]
 800b1be:	f003 0304 	and.w	r3, r3, #4
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <netconn_write_vectors_partly+0x6a>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <netconn_write_vectors_partly+0x6c>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b1d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d005      	beq.n	800b1e4 <netconn_write_vectors_partly+0x84>
 800b1d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d102      	bne.n	800b1e4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b1de:	f06f 0305 	mvn.w	r3, #5
 800b1e2:	e064      	b.n	800b2ae <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	643b      	str	r3, [r7, #64]	; 0x40
 800b1ec:	e015      	b.n	800b21a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f0:	00db      	lsls	r3, r3, #3
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1fa:	4413      	add	r3, r2
 800b1fc:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800b1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b200:	00db      	lsls	r3, r3, #3
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	4413      	add	r3, r2
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d202      	bcs.n	800b214 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800b20e:	f06f 0305 	mvn.w	r3, #5
 800b212:	e04c      	b.n	800b2ae <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800b214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b216:	3301      	adds	r3, #1
 800b218:	643b      	str	r3, [r7, #64]	; 0x40
 800b21a:	88fb      	ldrh	r3, [r7, #6]
 800b21c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b21e:	429a      	cmp	r2, r3
 800b220:	dbe5      	blt.n	800b1ee <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800b222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	e040      	b.n	800b2ae <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800b22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b22e:	2b00      	cmp	r3, #0
 800b230:	da0a      	bge.n	800b248 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800b232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b234:	2b00      	cmp	r3, #0
 800b236:	d102      	bne.n	800b23e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800b238:	f06f 0305 	mvn.w	r3, #5
 800b23c:	e037      	b.n	800b2ae <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800b23e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b242:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b258:	797b      	ldrb	r3, [r7, #5]
 800b25a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800b25e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b260:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b266:	f107 0314 	add.w	r3, r7, #20
 800b26a:	4619      	mov	r1, r3
 800b26c:	4816      	ldr	r0, [pc, #88]	; (800b2c8 <netconn_write_vectors_partly+0x168>)
 800b26e:	f7ff faaf 	bl	800a7d0 <netconn_apimsg>
 800b272:	4603      	mov	r3, r0
 800b274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800b278:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d114      	bne.n	800b2aa <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800b280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b28a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800b28c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10a      	bne.n	800b2aa <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b298:	429a      	cmp	r2, r3
 800b29a:	d006      	beq.n	800b2aa <netconn_write_vectors_partly+0x14a>
 800b29c:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <netconn_write_vectors_partly+0x158>)
 800b29e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b2a2:	490a      	ldr	r1, [pc, #40]	; (800b2cc <netconn_write_vectors_partly+0x16c>)
 800b2a4:	4806      	ldr	r0, [pc, #24]	; (800b2c0 <netconn_write_vectors_partly+0x160>)
 800b2a6:	f013 fbe9 	bl	801ea7c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800b2aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3748      	adds	r7, #72	; 0x48
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	08022574 	.word	0x08022574
 800b2bc:	0802284c 	.word	0x0802284c
 800b2c0:	080225cc 	.word	0x080225cc
 800b2c4:	08022868 	.word	0x08022868
 800b2c8:	0800cd05 	.word	0x0800cd05
 800b2cc:	0802288c 	.word	0x0802288c

0800b2d0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08c      	sub	sp, #48	; 0x30
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d109      	bne.n	800b2f6 <netconn_close_shutdown+0x26>
 800b2e2:	4b0f      	ldr	r3, [pc, #60]	; (800b320 <netconn_close_shutdown+0x50>)
 800b2e4:	f240 4247 	movw	r2, #1095	; 0x447
 800b2e8:	490e      	ldr	r1, [pc, #56]	; (800b324 <netconn_close_shutdown+0x54>)
 800b2ea:	480f      	ldr	r0, [pc, #60]	; (800b328 <netconn_close_shutdown+0x58>)
 800b2ec:	f013 fbc6 	bl	801ea7c <iprintf>
 800b2f0:	f06f 030f 	mvn.w	r3, #15
 800b2f4:	e010      	b.n	800b318 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b2fa:	78fb      	ldrb	r3, [r7, #3]
 800b2fc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b2fe:	2329      	movs	r3, #41	; 0x29
 800b300:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b302:	f107 030c 	add.w	r3, r7, #12
 800b306:	4619      	mov	r1, r3
 800b308:	4808      	ldr	r0, [pc, #32]	; (800b32c <netconn_close_shutdown+0x5c>)
 800b30a:	f7ff fa61 	bl	800a7d0 <netconn_apimsg>
 800b30e:	4603      	mov	r3, r0
 800b310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b314:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3730      	adds	r7, #48	; 0x30
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	08022574 	.word	0x08022574
 800b324:	080228b0 	.word	0x080228b0
 800b328:	080225cc 	.word	0x080225cc
 800b32c:	0800cf29 	.word	0x0800cf29

0800b330 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d101      	bne.n	800b342 <netconn_err+0x12>
    return ERR_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	e00d      	b.n	800b35e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b342:	f012 fcfd 	bl	801dd40 <sys_arch_protect>
 800b346:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	7a1b      	ldrb	r3, [r3, #8]
 800b34c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f012 fd01 	bl	801dd5c <sys_arch_unprotect>
  return err;
 800b35a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
	...

0800b368 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b08a      	sub	sp, #40	; 0x28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d109      	bne.n	800b38c <netconn_gethostbyname+0x24>
 800b378:	4b24      	ldr	r3, [pc, #144]	; (800b40c <netconn_gethostbyname+0xa4>)
 800b37a:	f240 5204 	movw	r2, #1284	; 0x504
 800b37e:	4924      	ldr	r1, [pc, #144]	; (800b410 <netconn_gethostbyname+0xa8>)
 800b380:	4824      	ldr	r0, [pc, #144]	; (800b414 <netconn_gethostbyname+0xac>)
 800b382:	f013 fb7b 	bl	801ea7c <iprintf>
 800b386:	f06f 030f 	mvn.w	r3, #15
 800b38a:	e03b      	b.n	800b404 <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d109      	bne.n	800b3a6 <netconn_gethostbyname+0x3e>
 800b392:	4b1e      	ldr	r3, [pc, #120]	; (800b40c <netconn_gethostbyname+0xa4>)
 800b394:	f240 5205 	movw	r2, #1285	; 0x505
 800b398:	491f      	ldr	r1, [pc, #124]	; (800b418 <netconn_gethostbyname+0xb0>)
 800b39a:	481e      	ldr	r0, [pc, #120]	; (800b414 <netconn_gethostbyname+0xac>)
 800b39c:	f013 fb6e 	bl	801ea7c <iprintf>
 800b3a0:	f06f 030f 	mvn.w	r3, #15
 800b3a4:	e02e      	b.n	800b404 <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 800b3a6:	f107 030f 	add.w	r3, r7, #15
 800b3aa:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 800b3ac:	f107 0310 	add.w	r3, r7, #16
 800b3b0:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	2100      	movs	r1, #0
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f012 fbcd 	bl	801db5e <sys_sem_new>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d002      	beq.n	800b3d6 <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 800b3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d4:	e016      	b.n	800b404 <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 800b3d6:	69fa      	ldr	r2, [r7, #28]
 800b3d8:	f107 0314 	add.w	r3, r7, #20
 800b3dc:	4619      	mov	r1, r3
 800b3de:	480f      	ldr	r0, [pc, #60]	; (800b41c <netconn_gethostbyname+0xb4>)
 800b3e0:	f003 fe84 	bl	800f0ec <tcpip_send_msg_wait_sem>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f012 fc1a 	bl	801dc26 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 800b3f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 800b3fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3fe:	e001      	b.n	800b404 <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 800b400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3728      	adds	r7, #40	; 0x28
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	08022574 	.word	0x08022574
 800b410:	080228cc 	.word	0x080228cc
 800b414:	080225cc 	.word	0x080225cc
 800b418:	080228f0 	.word	0x080228f0
 800b41c:	0800d085 	.word	0x0800d085

0800b420 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	4603      	mov	r3, r0
 800b428:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b42a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b42e:	f113 0f0d 	cmn.w	r3, #13
 800b432:	d009      	beq.n	800b448 <lwip_netconn_err_to_msg+0x28>
 800b434:	f113 0f0d 	cmn.w	r3, #13
 800b438:	dc0c      	bgt.n	800b454 <lwip_netconn_err_to_msg+0x34>
 800b43a:	f113 0f0f 	cmn.w	r3, #15
 800b43e:	d007      	beq.n	800b450 <lwip_netconn_err_to_msg+0x30>
 800b440:	f113 0f0e 	cmn.w	r3, #14
 800b444:	d002      	beq.n	800b44c <lwip_netconn_err_to_msg+0x2c>
 800b446:	e005      	b.n	800b454 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <lwip_netconn_err_to_msg+0x54>)
 800b44a:	e00e      	b.n	800b46a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <lwip_netconn_err_to_msg+0x58>)
 800b44e:	e00c      	b.n	800b46a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b450:	4b0a      	ldr	r3, [pc, #40]	; (800b47c <lwip_netconn_err_to_msg+0x5c>)
 800b452:	e00a      	b.n	800b46a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d005      	beq.n	800b468 <lwip_netconn_err_to_msg+0x48>
 800b45c:	4b08      	ldr	r3, [pc, #32]	; (800b480 <lwip_netconn_err_to_msg+0x60>)
 800b45e:	227d      	movs	r2, #125	; 0x7d
 800b460:	4908      	ldr	r1, [pc, #32]	; (800b484 <lwip_netconn_err_to_msg+0x64>)
 800b462:	4809      	ldr	r0, [pc, #36]	; (800b488 <lwip_netconn_err_to_msg+0x68>)
 800b464:	f013 fb0a 	bl	801ea7c <iprintf>
      return NULL;
 800b468:	2300      	movs	r3, #0
  }
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	08026508 	.word	0x08026508
 800b478:	08026509 	.word	0x08026509
 800b47c:	0802650a 	.word	0x0802650a
 800b480:	08022914 	.word	0x08022914
 800b484:	08022948 	.word	0x08022948
 800b488:	08022958 	.word	0x08022958

0800b48c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d105      	bne.n	800b4a8 <lwip_netconn_is_err_msg+0x1c>
 800b49c:	4b12      	ldr	r3, [pc, #72]	; (800b4e8 <lwip_netconn_is_err_msg+0x5c>)
 800b49e:	2285      	movs	r2, #133	; 0x85
 800b4a0:	4912      	ldr	r1, [pc, #72]	; (800b4ec <lwip_netconn_is_err_msg+0x60>)
 800b4a2:	4813      	ldr	r0, [pc, #76]	; (800b4f0 <lwip_netconn_is_err_msg+0x64>)
 800b4a4:	f013 faea 	bl	801ea7c <iprintf>

  if (msg == &netconn_aborted) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a12      	ldr	r2, [pc, #72]	; (800b4f4 <lwip_netconn_is_err_msg+0x68>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d104      	bne.n	800b4ba <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	22f3      	movs	r2, #243	; 0xf3
 800b4b4:	701a      	strb	r2, [r3, #0]
    return 1;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e012      	b.n	800b4e0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a0e      	ldr	r2, [pc, #56]	; (800b4f8 <lwip_netconn_is_err_msg+0x6c>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d104      	bne.n	800b4cc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	22f2      	movs	r2, #242	; 0xf2
 800b4c6:	701a      	strb	r2, [r3, #0]
    return 1;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e009      	b.n	800b4e0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a0b      	ldr	r2, [pc, #44]	; (800b4fc <lwip_netconn_is_err_msg+0x70>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d104      	bne.n	800b4de <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	22f1      	movs	r2, #241	; 0xf1
 800b4d8:	701a      	strb	r2, [r3, #0]
    return 1;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e000      	b.n	800b4e0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	08022914 	.word	0x08022914
 800b4ec:	08022980 	.word	0x08022980
 800b4f0:	08022958 	.word	0x08022958
 800b4f4:	08026508 	.word	0x08026508
 800b4f8:	08026509 	.word	0x08026509
 800b4fc:	0802650a 	.word	0x0802650a

0800b500 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d105      	bne.n	800b520 <recv_udp+0x20>
 800b514:	4b34      	ldr	r3, [pc, #208]	; (800b5e8 <recv_udp+0xe8>)
 800b516:	22e5      	movs	r2, #229	; 0xe5
 800b518:	4934      	ldr	r1, [pc, #208]	; (800b5ec <recv_udp+0xec>)
 800b51a:	4835      	ldr	r0, [pc, #212]	; (800b5f0 <recv_udp+0xf0>)
 800b51c:	f013 faae 	bl	801ea7c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d105      	bne.n	800b532 <recv_udp+0x32>
 800b526:	4b30      	ldr	r3, [pc, #192]	; (800b5e8 <recv_udp+0xe8>)
 800b528:	22e6      	movs	r2, #230	; 0xe6
 800b52a:	4932      	ldr	r1, [pc, #200]	; (800b5f4 <recv_udp+0xf4>)
 800b52c:	4830      	ldr	r0, [pc, #192]	; (800b5f0 <recv_udp+0xf0>)
 800b52e:	f013 faa5 	bl	801ea7c <iprintf>
  conn = (struct netconn *)arg;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d103      	bne.n	800b544 <recv_udp+0x44>
    pbuf_free(p);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f006 f9f5 	bl	801192c <pbuf_free>
    return;
 800b542:	e04d      	b.n	800b5e0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d005      	beq.n	800b55a <recv_udp+0x5a>
 800b54e:	4b26      	ldr	r3, [pc, #152]	; (800b5e8 <recv_udp+0xe8>)
 800b550:	22ee      	movs	r2, #238	; 0xee
 800b552:	4929      	ldr	r1, [pc, #164]	; (800b5f8 <recv_udp+0xf8>)
 800b554:	4826      	ldr	r0, [pc, #152]	; (800b5f0 <recv_udp+0xf0>)
 800b556:	f013 fa91 	bl	801ea7c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	3310      	adds	r3, #16
 800b55e:	4618      	mov	r0, r3
 800b560:	f012 fadf 	bl	801db22 <sys_mbox_valid>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d103      	bne.n	800b572 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f006 f9de 	bl	801192c <pbuf_free>
    return;
 800b570:	e036      	b.n	800b5e0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b572:	2006      	movs	r0, #6
 800b574:	f005 faa6 	bl	8010ac4 <memp_malloc>
 800b578:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d103      	bne.n	800b588 <recv_udp+0x88>
    pbuf_free(p);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f006 f9d3 	bl	801192c <pbuf_free>
    return;
 800b586:	e02b      	b.n	800b5e0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <recv_udp+0xa0>
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	e000      	b.n	800b5a2 <recv_udp+0xa2>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	69ba      	ldr	r2, [r7, #24]
 800b5a4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b5aa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	891b      	ldrh	r3, [r3, #8]
 800b5b0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	3310      	adds	r3, #16
 800b5b6:	69b9      	ldr	r1, [r7, #24]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f012 fa3d 	bl	801da38 <sys_mbox_trypost>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d003      	beq.n	800b5cc <recv_udp+0xcc>
    netbuf_delete(buf);
 800b5c4:	69b8      	ldr	r0, [r7, #24]
 800b5c6:	f001 fdc1 	bl	800d14c <netbuf_delete>
    return;
 800b5ca:	e009      	b.n	800b5e0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d005      	beq.n	800b5e0 <recv_udp+0xe0>
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	8afa      	ldrh	r2, [r7, #22]
 800b5da:	2100      	movs	r1, #0
 800b5dc:	69f8      	ldr	r0, [r7, #28]
 800b5de:	4798      	blx	r3
  }
}
 800b5e0:	3720      	adds	r7, #32
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	08022914 	.word	0x08022914
 800b5ec:	0802298c 	.word	0x0802298c
 800b5f0:	08022958 	.word	0x08022958
 800b5f4:	080229b0 	.word	0x080229b0
 800b5f8:	080229d0 	.word	0x080229d0

0800b5fc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
 800b608:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d106      	bne.n	800b61e <recv_tcp+0x22>
 800b610:	4b36      	ldr	r3, [pc, #216]	; (800b6ec <recv_tcp+0xf0>)
 800b612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b616:	4936      	ldr	r1, [pc, #216]	; (800b6f0 <recv_tcp+0xf4>)
 800b618:	4836      	ldr	r0, [pc, #216]	; (800b6f4 <recv_tcp+0xf8>)
 800b61a:	f013 fa2f 	bl	801ea7c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d106      	bne.n	800b632 <recv_tcp+0x36>
 800b624:	4b31      	ldr	r3, [pc, #196]	; (800b6ec <recv_tcp+0xf0>)
 800b626:	f240 122d 	movw	r2, #301	; 0x12d
 800b62a:	4933      	ldr	r1, [pc, #204]	; (800b6f8 <recv_tcp+0xfc>)
 800b62c:	4831      	ldr	r0, [pc, #196]	; (800b6f4 <recv_tcp+0xf8>)
 800b62e:	f013 fa25 	bl	801ea7c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d006      	beq.n	800b648 <recv_tcp+0x4c>
 800b63a:	4b2c      	ldr	r3, [pc, #176]	; (800b6ec <recv_tcp+0xf0>)
 800b63c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b640:	492e      	ldr	r1, [pc, #184]	; (800b6fc <recv_tcp+0x100>)
 800b642:	482c      	ldr	r0, [pc, #176]	; (800b6f4 <recv_tcp+0xf8>)
 800b644:	f013 fa1a 	bl	801ea7c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d102      	bne.n	800b658 <recv_tcp+0x5c>
    return ERR_VAL;
 800b652:	f06f 0305 	mvn.w	r3, #5
 800b656:	e045      	b.n	800b6e4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d006      	beq.n	800b670 <recv_tcp+0x74>
 800b662:	4b22      	ldr	r3, [pc, #136]	; (800b6ec <recv_tcp+0xf0>)
 800b664:	f240 1235 	movw	r2, #309	; 0x135
 800b668:	4925      	ldr	r1, [pc, #148]	; (800b700 <recv_tcp+0x104>)
 800b66a:	4822      	ldr	r0, [pc, #136]	; (800b6f4 <recv_tcp+0xf8>)
 800b66c:	f013 fa06 	bl	801ea7c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	3310      	adds	r3, #16
 800b674:	4618      	mov	r0, r3
 800b676:	f012 fa54 	bl	801db22 <sys_mbox_valid>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10d      	bne.n	800b69c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d008      	beq.n	800b698 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	891b      	ldrh	r3, [r3, #8]
 800b68a:	4619      	mov	r1, r3
 800b68c:	68b8      	ldr	r0, [r7, #8]
 800b68e:	f007 fa91 	bl	8012bb4 <tcp_recved>
      pbuf_free(p);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f006 f94a 	bl	801192c <pbuf_free>
    }
    return ERR_OK;
 800b698:	2300      	movs	r3, #0
 800b69a:	e023      	b.n	800b6e4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d005      	beq.n	800b6ae <recv_tcp+0xb2>
    msg = p;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	891b      	ldrh	r3, [r3, #8]
 800b6aa:	83fb      	strh	r3, [r7, #30]
 800b6ac:	e003      	b.n	800b6b6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b6ae:	4b15      	ldr	r3, [pc, #84]	; (800b704 <recv_tcp+0x108>)
 800b6b0:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	3310      	adds	r3, #16
 800b6ba:	69b9      	ldr	r1, [r7, #24]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f012 f9bb 	bl	801da38 <sys_mbox_trypost>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b6c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6cc:	e00a      	b.n	800b6e4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d005      	beq.n	800b6e2 <recv_tcp+0xe6>
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6da:	8bfa      	ldrh	r2, [r7, #30]
 800b6dc:	2100      	movs	r1, #0
 800b6de:	6978      	ldr	r0, [r7, #20]
 800b6e0:	4798      	blx	r3
  }

  return ERR_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3720      	adds	r7, #32
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	08022914 	.word	0x08022914
 800b6f0:	080229f0 	.word	0x080229f0
 800b6f4:	08022958 	.word	0x08022958
 800b6f8:	08022a14 	.word	0x08022a14
 800b6fc:	08022a34 	.word	0x08022a34
 800b700:	08022a4c 	.word	0x08022a4c
 800b704:	0802650a 	.word	0x0802650a

0800b708 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d106      	bne.n	800b72a <poll_tcp+0x22>
 800b71c:	4b29      	ldr	r3, [pc, #164]	; (800b7c4 <poll_tcp+0xbc>)
 800b71e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b722:	4929      	ldr	r1, [pc, #164]	; (800b7c8 <poll_tcp+0xc0>)
 800b724:	4829      	ldr	r0, [pc, #164]	; (800b7cc <poll_tcp+0xc4>)
 800b726:	f013 f9a9 	bl	801ea7c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	785b      	ldrb	r3, [r3, #1]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d104      	bne.n	800b73c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b732:	2101      	movs	r1, #1
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f001 f919 	bl	800c96c <lwip_netconn_do_writemore>
 800b73a:	e016      	b.n	800b76a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	785b      	ldrb	r3, [r3, #1]
 800b740:	2b04      	cmp	r3, #4
 800b742:	d112      	bne.n	800b76a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00a      	beq.n	800b762 <poll_tcp+0x5a>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6a1b      	ldr	r3, [r3, #32]
 800b750:	7a5b      	ldrb	r3, [r3, #9]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d005      	beq.n	800b762 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	7a5a      	ldrb	r2, [r3, #9]
 800b75c:	3a01      	subs	r2, #1
 800b75e:	b2d2      	uxtb	r2, r2
 800b760:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b762:	2101      	movs	r1, #1
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f000 fbf7 	bl	800bf58 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	7f1b      	ldrb	r3, [r3, #28]
 800b76e:	f003 0310 	and.w	r3, r3, #16
 800b772:	2b00      	cmp	r3, #0
 800b774:	d021      	beq.n	800b7ba <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d01d      	beq.n	800b7ba <poll_tcp+0xb2>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b786:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b78a:	d316      	bcc.n	800b7ba <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b794:	2b04      	cmp	r3, #4
 800b796:	d810      	bhi.n	800b7ba <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	7f1b      	ldrb	r3, [r3, #28]
 800b79c:	f023 0310 	bic.w	r3, r3, #16
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d005      	beq.n	800b7ba <poll_tcp+0xb2>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2102      	movs	r1, #2
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	08022914 	.word	0x08022914
 800b7c8:	08022a6c 	.word	0x08022a6c
 800b7cc:	08022958 	.word	0x08022958

0800b7d0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d106      	bne.n	800b7f6 <sent_tcp+0x26>
 800b7e8:	4b20      	ldr	r3, [pc, #128]	; (800b86c <sent_tcp+0x9c>)
 800b7ea:	f240 1293 	movw	r2, #403	; 0x193
 800b7ee:	4920      	ldr	r1, [pc, #128]	; (800b870 <sent_tcp+0xa0>)
 800b7f0:	4820      	ldr	r0, [pc, #128]	; (800b874 <sent_tcp+0xa4>)
 800b7f2:	f013 f943 	bl	801ea7c <iprintf>

  if (conn) {
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d032      	beq.n	800b862 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	785b      	ldrb	r3, [r3, #1]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d104      	bne.n	800b80e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b804:	2101      	movs	r1, #1
 800b806:	6978      	ldr	r0, [r7, #20]
 800b808:	f001 f8b0 	bl	800c96c <lwip_netconn_do_writemore>
 800b80c:	e007      	b.n	800b81e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	785b      	ldrb	r3, [r3, #1]
 800b812:	2b04      	cmp	r3, #4
 800b814:	d103      	bne.n	800b81e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b816:	2101      	movs	r1, #1
 800b818:	6978      	ldr	r0, [r7, #20]
 800b81a:	f000 fb9d 	bl	800bf58 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d01d      	beq.n	800b862 <sent_tcp+0x92>
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b82e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b832:	d316      	bcc.n	800b862 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	d810      	bhi.n	800b862 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	7f1b      	ldrb	r3, [r3, #28]
 800b844:	f023 0310 	bic.w	r3, r3, #16
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	2b00      	cmp	r3, #0
 800b854:	d005      	beq.n	800b862 <sent_tcp+0x92>
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	88fa      	ldrh	r2, [r7, #6]
 800b85c:	2102      	movs	r1, #2
 800b85e:	6978      	ldr	r0, [r7, #20]
 800b860:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	08022914 	.word	0x08022914
 800b870:	08022a6c 	.word	0x08022a6c
 800b874:	08022958 	.word	0x08022958

0800b878 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	460b      	mov	r3, r1
 800b882:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d106      	bne.n	800b89c <err_tcp+0x24>
 800b88e:	4b5f      	ldr	r3, [pc, #380]	; (800ba0c <err_tcp+0x194>)
 800b890:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b894:	495e      	ldr	r1, [pc, #376]	; (800ba10 <err_tcp+0x198>)
 800b896:	485f      	ldr	r0, [pc, #380]	; (800ba14 <err_tcp+0x19c>)
 800b898:	f013 f8f0 	bl	801ea7c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b89c:	f012 fa50 	bl	801dd40 <sys_arch_protect>
 800b8a0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	78fa      	ldrb	r2, [r7, #3]
 800b8ac:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	7f1b      	ldrb	r3, [r3, #28]
 800b8b2:	f043 0301 	orr.w	r3, r3, #1
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	785b      	ldrb	r3, [r3, #1]
 800b8c0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b8c8:	69b8      	ldr	r0, [r7, #24]
 800b8ca:	f012 fa47 	bl	801dd5c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d005      	beq.n	800b8e2 <err_tcp+0x6a>
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2104      	movs	r1, #4
 800b8de:	69f8      	ldr	r0, [r7, #28]
 800b8e0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d005      	beq.n	800b8f6 <err_tcp+0x7e>
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	69f8      	ldr	r0, [r7, #28]
 800b8f4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d005      	beq.n	800b90a <err_tcp+0x92>
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2200      	movs	r2, #0
 800b904:	2102      	movs	r1, #2
 800b906:	69f8      	ldr	r0, [r7, #28]
 800b908:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b90a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff fd86 	bl	800b420 <lwip_netconn_err_to_msg>
 800b914:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	3310      	adds	r3, #16
 800b91a:	4618      	mov	r0, r3
 800b91c:	f012 f901 	bl	801db22 <sys_mbox_valid>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d005      	beq.n	800b932 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	3310      	adds	r3, #16
 800b92a:	6939      	ldr	r1, [r7, #16]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f012 f883 	bl	801da38 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	3314      	adds	r3, #20
 800b936:	4618      	mov	r0, r3
 800b938:	f012 f8f3 	bl	801db22 <sys_mbox_valid>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d005      	beq.n	800b94e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	3314      	adds	r3, #20
 800b946:	6939      	ldr	r1, [r7, #16]
 800b948:	4618      	mov	r0, r3
 800b94a:	f012 f875 	bl	801da38 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d005      	beq.n	800b960 <err_tcp+0xe8>
 800b954:	7dfb      	ldrb	r3, [r7, #23]
 800b956:	2b04      	cmp	r3, #4
 800b958:	d002      	beq.n	800b960 <err_tcp+0xe8>
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	d143      	bne.n	800b9e8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	7f1b      	ldrb	r3, [r3, #28]
 800b964:	f003 0304 	and.w	r3, r3, #4
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bf14      	ite	ne
 800b96c:	2301      	movne	r3, #1
 800b96e:	2300      	moveq	r3, #0
 800b970:	b2db      	uxtb	r3, r3
 800b972:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	7f1b      	ldrb	r3, [r3, #28]
 800b978:	f023 0304 	bic.w	r3, r3, #4
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d13b      	bne.n	800ba00 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d106      	bne.n	800b99e <err_tcp+0x126>
 800b990:	4b1e      	ldr	r3, [pc, #120]	; (800ba0c <err_tcp+0x194>)
 800b992:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b996:	4920      	ldr	r1, [pc, #128]	; (800ba18 <err_tcp+0x1a0>)
 800b998:	481e      	ldr	r0, [pc, #120]	; (800ba14 <err_tcp+0x19c>)
 800b99a:	f013 f86f 	bl	801ea7c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	2b04      	cmp	r3, #4
 800b9a2:	d104      	bne.n	800b9ae <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	6a1b      	ldr	r3, [r3, #32]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	711a      	strb	r2, [r3, #4]
 800b9ac:	e003      	b.n	800b9b6 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	78fa      	ldrb	r2, [r7, #3]
 800b9b4:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	330c      	adds	r3, #12
 800b9be:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b9c0:	68b8      	ldr	r0, [r7, #8]
 800b9c2:	f012 f93d 	bl	801dc40 <sys_sem_valid>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d106      	bne.n	800b9da <err_tcp+0x162>
 800b9cc:	4b0f      	ldr	r3, [pc, #60]	; (800ba0c <err_tcp+0x194>)
 800b9ce:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b9d2:	4912      	ldr	r1, [pc, #72]	; (800ba1c <err_tcp+0x1a4>)
 800b9d4:	480f      	ldr	r0, [pc, #60]	; (800ba14 <err_tcp+0x19c>)
 800b9d6:	f013 f851 	bl	801ea7c <iprintf>
      conn->current_msg = NULL;
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b9e0:	68b8      	ldr	r0, [r7, #8]
 800b9e2:	f012 f913 	bl	801dc0c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b9e6:	e00b      	b.n	800ba00 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	6a1b      	ldr	r3, [r3, #32]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <err_tcp+0x18a>
 800b9f0:	4b06      	ldr	r3, [pc, #24]	; (800ba0c <err_tcp+0x194>)
 800b9f2:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b9f6:	490a      	ldr	r1, [pc, #40]	; (800ba20 <err_tcp+0x1a8>)
 800b9f8:	4806      	ldr	r0, [pc, #24]	; (800ba14 <err_tcp+0x19c>)
 800b9fa:	f013 f83f 	bl	801ea7c <iprintf>
  }
}
 800b9fe:	e000      	b.n	800ba02 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800ba00:	bf00      	nop
}
 800ba02:	bf00      	nop
 800ba04:	3720      	adds	r7, #32
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	08022914 	.word	0x08022914
 800ba10:	08022a6c 	.word	0x08022a6c
 800ba14:	08022958 	.word	0x08022958
 800ba18:	08022a7c 	.word	0x08022a7c
 800ba1c:	08022a98 	.word	0x08022a98
 800ba20:	08022ab4 	.word	0x08022ab4

0800ba24 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f008 f89b 	bl	8013b70 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ba3a:	490a      	ldr	r1, [pc, #40]	; (800ba64 <setup_tcp+0x40>)
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f008 f8a9 	bl	8013b94 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ba42:	4909      	ldr	r1, [pc, #36]	; (800ba68 <setup_tcp+0x44>)
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f008 f8c7 	bl	8013bd8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	4907      	ldr	r1, [pc, #28]	; (800ba6c <setup_tcp+0x48>)
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f008 f91e 	bl	8013c90 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ba54:	4906      	ldr	r1, [pc, #24]	; (800ba70 <setup_tcp+0x4c>)
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f008 f8e0 	bl	8013c1c <tcp_err>
}
 800ba5c:	bf00      	nop
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	0800b5fd 	.word	0x0800b5fd
 800ba68:	0800b7d1 	.word	0x0800b7d1
 800ba6c:	0800b709 	.word	0x0800b709
 800ba70:	0800b879 	.word	0x0800b879

0800ba74 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800ba74:	b590      	push	{r4, r7, lr}
 800ba76:	b089      	sub	sp, #36	; 0x24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d102      	bne.n	800ba92 <accept_function+0x1e>
    return ERR_VAL;
 800ba8c:	f06f 0305 	mvn.w	r3, #5
 800ba90:	e0a1      	b.n	800bbd6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	3314      	adds	r3, #20
 800ba96:	4618      	mov	r0, r3
 800ba98:	f012 f843 	bl	801db22 <sys_mbox_valid>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d102      	bne.n	800baa8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800baa2:	f06f 0305 	mvn.w	r3, #5
 800baa6:	e096      	b.n	800bbd6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d11b      	bne.n	800bae6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	f103 0414 	add.w	r4, r3, #20
 800bab4:	f06f 000c 	mvn.w	r0, #12
 800bab8:	f7ff fcb2 	bl	800b420 <lwip_netconn_err_to_msg>
 800babc:	4603      	mov	r3, r0
 800babe:	4619      	mov	r1, r3
 800bac0:	4620      	mov	r0, r4
 800bac2:	f011 ffb9 	bl	801da38 <sys_mbox_trypost>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d109      	bne.n	800bae0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d005      	beq.n	800bae0 <accept_function+0x6c>
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	2200      	movs	r2, #0
 800bada:	2100      	movs	r1, #0
 800badc:	69f8      	ldr	r0, [r7, #28]
 800bade:	4798      	blx	r3
    }
    return ERR_VAL;
 800bae0:	f06f 0305 	mvn.w	r3, #5
 800bae4:	e077      	b.n	800bbd6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800bae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d006      	beq.n	800bafc <accept_function+0x88>
 800baee:	4b3c      	ldr	r3, [pc, #240]	; (800bbe0 <accept_function+0x16c>)
 800baf0:	f240 222a 	movw	r2, #554	; 0x22a
 800baf4:	493b      	ldr	r1, [pc, #236]	; (800bbe4 <accept_function+0x170>)
 800baf6:	483c      	ldr	r0, [pc, #240]	; (800bbe8 <accept_function+0x174>)
 800baf8:	f012 ffc0 	bl	801ea7c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	781a      	ldrb	r2, [r3, #0]
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	4619      	mov	r1, r3
 800bb06:	4610      	mov	r0, r2
 800bb08:	f000 f8f0 	bl	800bcec <netconn_alloc>
 800bb0c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d11b      	bne.n	800bb4c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	f103 0414 	add.w	r4, r3, #20
 800bb1a:	f06f 000c 	mvn.w	r0, #12
 800bb1e:	f7ff fc7f 	bl	800b420 <lwip_netconn_err_to_msg>
 800bb22:	4603      	mov	r3, r0
 800bb24:	4619      	mov	r1, r3
 800bb26:	4620      	mov	r0, r4
 800bb28:	f011 ff86 	bl	801da38 <sys_mbox_trypost>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d109      	bne.n	800bb46 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d005      	beq.n	800bb46 <accept_function+0xd2>
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3e:	2200      	movs	r2, #0
 800bb40:	2100      	movs	r1, #0
 800bb42:	69f8      	ldr	r0, [r7, #28]
 800bb44:	4798      	blx	r3
    }
    return ERR_MEM;
 800bb46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb4a:	e044      	b.n	800bbd6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800bb52:	69b8      	ldr	r0, [r7, #24]
 800bb54:	f7ff ff66 	bl	800ba24 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	3314      	adds	r3, #20
 800bb5c:	69b9      	ldr	r1, [r7, #24]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f011 ff6a 	bl	801da38 <sys_mbox_trypost>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d02a      	beq.n	800bbc0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800bb70:	2100      	movs	r1, #0
 800bb72:	6978      	ldr	r0, [r7, #20]
 800bb74:	f007 fffc 	bl	8013b70 <tcp_arg>
    tcp_recv(pcb, NULL);
 800bb78:	2100      	movs	r1, #0
 800bb7a:	6978      	ldr	r0, [r7, #20]
 800bb7c:	f008 f80a 	bl	8013b94 <tcp_recv>
    tcp_sent(pcb, NULL);
 800bb80:	2100      	movs	r1, #0
 800bb82:	6978      	ldr	r0, [r7, #20]
 800bb84:	f008 f828 	bl	8013bd8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	6978      	ldr	r0, [r7, #20]
 800bb8e:	f008 f87f 	bl	8013c90 <tcp_poll>
    tcp_err(pcb, NULL);
 800bb92:	2100      	movs	r1, #0
 800bb94:	6978      	ldr	r0, [r7, #20]
 800bb96:	f008 f841 	bl	8013c1c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	3310      	adds	r3, #16
 800bba4:	4618      	mov	r0, r3
 800bba6:	f011 ff35 	bl	801da14 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	3310      	adds	r3, #16
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f011 ffc8 	bl	801db44 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800bbb4:	69b8      	ldr	r0, [r7, #24]
 800bbb6:	f000 f907 	bl	800bdc8 <netconn_free>
    return ERR_MEM;
 800bbba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbbe:	e00a      	b.n	800bbd6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d005      	beq.n	800bbd4 <accept_function+0x160>
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	2200      	movs	r2, #0
 800bbce:	2100      	movs	r1, #0
 800bbd0:	69f8      	ldr	r0, [r7, #28]
 800bbd2:	4798      	blx	r3
  }

  return ERR_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3724      	adds	r7, #36	; 0x24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd90      	pop	{r4, r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	08022914 	.word	0x08022914
 800bbe4:	08022ad0 	.word	0x08022ad0
 800bbe8:	08022958 	.word	0x08022958

0800bbec <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800bbec:	b590      	push	{r4, r7, lr}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d006      	beq.n	800bc10 <pcb_new+0x24>
 800bc02:	4b2b      	ldr	r3, [pc, #172]	; (800bcb0 <pcb_new+0xc4>)
 800bc04:	f240 2265 	movw	r2, #613	; 0x265
 800bc08:	492a      	ldr	r1, [pc, #168]	; (800bcb4 <pcb_new+0xc8>)
 800bc0a:	482b      	ldr	r0, [pc, #172]	; (800bcb8 <pcb_new+0xcc>)
 800bc0c:	f012 ff36 	bl	801ea7c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc1a:	2b10      	cmp	r3, #16
 800bc1c:	d022      	beq.n	800bc64 <pcb_new+0x78>
 800bc1e:	2b20      	cmp	r3, #32
 800bc20:	d133      	bne.n	800bc8a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681c      	ldr	r4, [r3, #0]
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f00d fb68 	bl	80192fe <udp_new_ip_type>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d02a      	beq.n	800bc92 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b22      	cmp	r3, #34	; 0x22
 800bc44:	d104      	bne.n	800bc50 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6858      	ldr	r0, [r3, #4]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	4917      	ldr	r1, [pc, #92]	; (800bcbc <pcb_new+0xd0>)
 800bc5e:	f00d fad5 	bl	801920c <udp_recv>
      }
      break;
 800bc62:	e016      	b.n	800bc92 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681c      	ldr	r4, [r3, #0]
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f007 ff72 	bl	8013b54 <tcp_new_ip_type>
 800bc70:	4603      	mov	r3, r0
 800bc72:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00b      	beq.n	800bc96 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff fece 	bl	800ba24 <setup_tcp>
      }
      break;
 800bc88:	e005      	b.n	800bc96 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	22fa      	movs	r2, #250	; 0xfa
 800bc8e:	711a      	strb	r2, [r3, #4]
      return;
 800bc90:	e00a      	b.n	800bca8 <pcb_new+0xbc>
      break;
 800bc92:	bf00      	nop
 800bc94:	e000      	b.n	800bc98 <pcb_new+0xac>
      break;
 800bc96:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d102      	bne.n	800bca8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	22ff      	movs	r2, #255	; 0xff
 800bca6:	711a      	strb	r2, [r3, #4]
  }
}
 800bca8:	3714      	adds	r7, #20
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd90      	pop	{r4, r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	08022914 	.word	0x08022914
 800bcb4:	08022af8 	.word	0x08022af8
 800bcb8:	08022958 	.word	0x08022958
 800bcbc:	0800b501 	.word	0x0800b501

0800bcc0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d102      	bne.n	800bce2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f7ff ff85 	bl	800bbec <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800bce2:	bf00      	nop
 800bce4:	3710      	adds	r7, #16
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
	...

0800bcec <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	6039      	str	r1, [r7, #0]
 800bcf6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800bcfc:	2007      	movs	r0, #7
 800bcfe:	f004 fee1 	bl	8010ac4 <memp_malloc>
 800bd02:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d101      	bne.n	800bd0e <netconn_alloc+0x22>
    return NULL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e052      	b.n	800bdb4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	79fa      	ldrb	r2, [r7, #7]
 800bd18:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800bd20:	79fb      	ldrb	r3, [r7, #7]
 800bd22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd26:	2b10      	cmp	r3, #16
 800bd28:	d004      	beq.n	800bd34 <netconn_alloc+0x48>
 800bd2a:	2b20      	cmp	r3, #32
 800bd2c:	d105      	bne.n	800bd3a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800bd2e:	2306      	movs	r3, #6
 800bd30:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bd32:	e00a      	b.n	800bd4a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800bd34:	2306      	movs	r3, #6
 800bd36:	617b      	str	r3, [r7, #20]
      break;
 800bd38:	e007      	b.n	800bd4a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800bd3a:	4b20      	ldr	r3, [pc, #128]	; (800bdbc <netconn_alloc+0xd0>)
 800bd3c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800bd40:	491f      	ldr	r1, [pc, #124]	; (800bdc0 <netconn_alloc+0xd4>)
 800bd42:	4820      	ldr	r0, [pc, #128]	; (800bdc4 <netconn_alloc+0xd8>)
 800bd44:	f012 fe9a 	bl	801ea7c <iprintf>
      goto free_and_return;
 800bd48:	e02f      	b.n	800bdaa <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3310      	adds	r3, #16
 800bd4e:	6979      	ldr	r1, [r7, #20]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f011 fe41 	bl	801d9d8 <sys_mbox_new>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d125      	bne.n	800bda8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	330c      	adds	r3, #12
 800bd60:	2100      	movs	r1, #0
 800bd62:	4618      	mov	r0, r3
 800bd64:	f011 fefb 	bl	801db5e <sys_sem_new>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d005      	beq.n	800bd7a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3310      	adds	r3, #16
 800bd72:	4618      	mov	r0, r3
 800bd74:	f011 fe4e 	bl	801da14 <sys_mbox_free>
    goto free_and_return;
 800bd78:	e017      	b.n	800bdaa <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	3314      	adds	r3, #20
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f011 fee0 	bl	801db44 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2200      	movs	r2, #0
 800bd88:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd90:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	7cfa      	ldrb	r2, [r7, #19]
 800bda2:	771a      	strb	r2, [r3, #28]
  return conn;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	e005      	b.n	800bdb4 <netconn_alloc+0xc8>
    goto free_and_return;
 800bda8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800bdaa:	68f9      	ldr	r1, [r7, #12]
 800bdac:	2007      	movs	r0, #7
 800bdae:	f004 fedb 	bl	8010b68 <memp_free>
  return NULL;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3718      	adds	r7, #24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	08022914 	.word	0x08022914
 800bdc0:	08022b18 	.word	0x08022b18
 800bdc4:	08022958 	.word	0x08022958

0800bdc8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d006      	beq.n	800bde6 <netconn_free+0x1e>
 800bdd8:	4b1b      	ldr	r3, [pc, #108]	; (800be48 <netconn_free+0x80>)
 800bdda:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bdde:	491b      	ldr	r1, [pc, #108]	; (800be4c <netconn_free+0x84>)
 800bde0:	481b      	ldr	r0, [pc, #108]	; (800be50 <netconn_free+0x88>)
 800bde2:	f012 fe4b 	bl	801ea7c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	3310      	adds	r3, #16
 800bdea:	4618      	mov	r0, r3
 800bdec:	f011 fe99 	bl	801db22 <sys_mbox_valid>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d006      	beq.n	800be04 <netconn_free+0x3c>
 800bdf6:	4b14      	ldr	r3, [pc, #80]	; (800be48 <netconn_free+0x80>)
 800bdf8:	f240 3223 	movw	r2, #803	; 0x323
 800bdfc:	4915      	ldr	r1, [pc, #84]	; (800be54 <netconn_free+0x8c>)
 800bdfe:	4814      	ldr	r0, [pc, #80]	; (800be50 <netconn_free+0x88>)
 800be00:	f012 fe3c 	bl	801ea7c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3314      	adds	r3, #20
 800be08:	4618      	mov	r0, r3
 800be0a:	f011 fe8a 	bl	801db22 <sys_mbox_valid>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d006      	beq.n	800be22 <netconn_free+0x5a>
 800be14:	4b0c      	ldr	r3, [pc, #48]	; (800be48 <netconn_free+0x80>)
 800be16:	f240 3226 	movw	r2, #806	; 0x326
 800be1a:	490f      	ldr	r1, [pc, #60]	; (800be58 <netconn_free+0x90>)
 800be1c:	480c      	ldr	r0, [pc, #48]	; (800be50 <netconn_free+0x88>)
 800be1e:	f012 fe2d 	bl	801ea7c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	330c      	adds	r3, #12
 800be26:	4618      	mov	r0, r3
 800be28:	f011 fefd 	bl	801dc26 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	330c      	adds	r3, #12
 800be30:	4618      	mov	r0, r3
 800be32:	f011 ff16 	bl	801dc62 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800be36:	6879      	ldr	r1, [r7, #4]
 800be38:	2007      	movs	r0, #7
 800be3a:	f004 fe95 	bl	8010b68 <memp_free>
}
 800be3e:	bf00      	nop
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	08022914 	.word	0x08022914
 800be4c:	08022b40 	.word	0x08022b40
 800be50:	08022958 	.word	0x08022958
 800be54:	08022b70 	.word	0x08022b70
 800be58:	08022bac 	.word	0x08022bac

0800be5c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	3310      	adds	r3, #16
 800be68:	4618      	mov	r0, r3
 800be6a:	f011 fe5a 	bl	801db22 <sys_mbox_valid>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d02f      	beq.n	800bed4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800be74:	e018      	b.n	800bea8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be7e:	2b10      	cmp	r3, #16
 800be80:	d10e      	bne.n	800bea0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	f107 020f 	add.w	r2, r7, #15
 800be88:	4611      	mov	r1, r2
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff fafe 	bl	800b48c <lwip_netconn_is_err_msg>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d108      	bne.n	800bea8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	4618      	mov	r0, r3
 800be9a:	f005 fd47 	bl	801192c <pbuf_free>
 800be9e:	e003      	b.n	800bea8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 f952 	bl	800d14c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3310      	adds	r3, #16
 800beac:	f107 0210 	add.w	r2, r7, #16
 800beb0:	4611      	mov	r1, r2
 800beb2:	4618      	mov	r0, r3
 800beb4:	f011 fe19 	bl	801daea <sys_arch_mbox_tryfetch>
 800beb8:	4603      	mov	r3, r0
 800beba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bebe:	d1da      	bne.n	800be76 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	3310      	adds	r3, #16
 800bec4:	4618      	mov	r0, r3
 800bec6:	f011 fda5 	bl	801da14 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3310      	adds	r3, #16
 800bece:	4618      	mov	r0, r3
 800bed0:	f011 fe38 	bl	801db44 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3314      	adds	r3, #20
 800bed8:	4618      	mov	r0, r3
 800beda:	f011 fe22 	bl	801db22 <sys_mbox_valid>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d034      	beq.n	800bf4e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bee4:	e01d      	b.n	800bf22 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	f107 020e 	add.w	r2, r7, #14
 800beec:	4611      	mov	r1, r2
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff facc 	bl	800b48c <lwip_netconn_is_err_msg>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d113      	bne.n	800bf22 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800befe:	6978      	ldr	r0, [r7, #20]
 800bf00:	f7ff ffac 	bl	800be5c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d007      	beq.n	800bf1c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f006 fc87 	bl	8012824 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800bf1c:	6978      	ldr	r0, [r7, #20]
 800bf1e:	f7ff ff53 	bl	800bdc8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3314      	adds	r3, #20
 800bf26:	f107 0210 	add.w	r2, r7, #16
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f011 fddc 	bl	801daea <sys_arch_mbox_tryfetch>
 800bf32:	4603      	mov	r3, r0
 800bf34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf38:	d1d5      	bne.n	800bee6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3314      	adds	r3, #20
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f011 fd68 	bl	801da14 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	3314      	adds	r3, #20
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f011 fdfb 	bl	801db44 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800bf4e:	bf00      	nop
 800bf50:	3718      	adds	r7, #24
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
	...

0800bf58 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d106      	bne.n	800bf7c <lwip_netconn_do_close_internal+0x24>
 800bf6e:	4ba1      	ldr	r3, [pc, #644]	; (800c1f4 <lwip_netconn_do_close_internal+0x29c>)
 800bf70:	f240 32a2 	movw	r2, #930	; 0x3a2
 800bf74:	49a0      	ldr	r1, [pc, #640]	; (800c1f8 <lwip_netconn_do_close_internal+0x2a0>)
 800bf76:	48a1      	ldr	r0, [pc, #644]	; (800c1fc <lwip_netconn_do_close_internal+0x2a4>)
 800bf78:	f012 fd80 	bl	801ea7c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf84:	2b10      	cmp	r3, #16
 800bf86:	d006      	beq.n	800bf96 <lwip_netconn_do_close_internal+0x3e>
 800bf88:	4b9a      	ldr	r3, [pc, #616]	; (800c1f4 <lwip_netconn_do_close_internal+0x29c>)
 800bf8a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800bf8e:	499c      	ldr	r1, [pc, #624]	; (800c200 <lwip_netconn_do_close_internal+0x2a8>)
 800bf90:	489a      	ldr	r0, [pc, #616]	; (800c1fc <lwip_netconn_do_close_internal+0x2a4>)
 800bf92:	f012 fd73 	bl	801ea7c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	785b      	ldrb	r3, [r3, #1]
 800bf9a:	2b04      	cmp	r3, #4
 800bf9c:	d006      	beq.n	800bfac <lwip_netconn_do_close_internal+0x54>
 800bf9e:	4b95      	ldr	r3, [pc, #596]	; (800c1f4 <lwip_netconn_do_close_internal+0x29c>)
 800bfa0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800bfa4:	4997      	ldr	r1, [pc, #604]	; (800c204 <lwip_netconn_do_close_internal+0x2ac>)
 800bfa6:	4895      	ldr	r0, [pc, #596]	; (800c1fc <lwip_netconn_do_close_internal+0x2a4>)
 800bfa8:	f012 fd68 	bl	801ea7c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d106      	bne.n	800bfc2 <lwip_netconn_do_close_internal+0x6a>
 800bfb4:	4b8f      	ldr	r3, [pc, #572]	; (800c1f4 <lwip_netconn_do_close_internal+0x29c>)
 800bfb6:	f240 32a5 	movw	r2, #933	; 0x3a5
 800bfba:	4993      	ldr	r1, [pc, #588]	; (800c208 <lwip_netconn_do_close_internal+0x2b0>)
 800bfbc:	488f      	ldr	r0, [pc, #572]	; (800c1fc <lwip_netconn_do_close_internal+0x2a4>)
 800bfbe:	f012 fd5d 	bl	801ea7c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d106      	bne.n	800bfd8 <lwip_netconn_do_close_internal+0x80>
 800bfca:	4b8a      	ldr	r3, [pc, #552]	; (800c1f4 <lwip_netconn_do_close_internal+0x29c>)
 800bfcc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bfd0:	498e      	ldr	r1, [pc, #568]	; (800c20c <lwip_netconn_do_close_internal+0x2b4>)
 800bfd2:	488a      	ldr	r0, [pc, #552]	; (800c1fc <lwip_netconn_do_close_internal+0x2a4>)
 800bfd4:	f012 fd52 	bl	801ea7c <iprintf>

  tpcb = conn->pcb.tcp;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a1b      	ldr	r3, [r3, #32]
 800bfe2:	7a1b      	ldrb	r3, [r3, #8]
 800bfe4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
 800bfe8:	f003 0301 	and.w	r3, r3, #1
 800bfec:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
 800bff0:	f003 0302 	and.w	r3, r3, #2
 800bff4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800bff6:	7bfb      	ldrb	r3, [r7, #15]
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d102      	bne.n	800c002 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800bffc:	2301      	movs	r3, #1
 800bffe:	75bb      	strb	r3, [r7, #22]
 800c000:	e01f      	b.n	800c042 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00e      	beq.n	800c026 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c00c:	2b05      	cmp	r3, #5
 800c00e:	d007      	beq.n	800c020 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c014:	2b06      	cmp	r3, #6
 800c016:	d003      	beq.n	800c020 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c01c:	2b08      	cmp	r3, #8
 800c01e:	d102      	bne.n	800c026 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c020:	2301      	movs	r3, #1
 800c022:	75bb      	strb	r3, [r7, #22]
 800c024:	e00d      	b.n	800c042 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c026:	7b7b      	ldrb	r3, [r7, #13]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d008      	beq.n	800c03e <lwip_netconn_do_close_internal+0xe6>
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	8b5b      	ldrh	r3, [r3, #26]
 800c030:	f003 0310 	and.w	r3, r3, #16
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c038:	2301      	movs	r3, #1
 800c03a:	75bb      	strb	r3, [r7, #22]
 800c03c:	e001      	b.n	800c042 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c042:	7dbb      	ldrb	r3, [r7, #22]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d003      	beq.n	800c050 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c048:	2100      	movs	r1, #0
 800c04a:	6938      	ldr	r0, [r7, #16]
 800c04c:	f007 fd90 	bl	8013b70 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	7d1b      	ldrb	r3, [r3, #20]
 800c054:	2b01      	cmp	r3, #1
 800c056:	d104      	bne.n	800c062 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c058:	2100      	movs	r1, #0
 800c05a:	6938      	ldr	r0, [r7, #16]
 800c05c:	f007 fe00 	bl	8013c60 <tcp_accept>
 800c060:	e01d      	b.n	800c09e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c062:	7bbb      	ldrb	r3, [r7, #14]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d007      	beq.n	800c078 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c068:	2100      	movs	r1, #0
 800c06a:	6938      	ldr	r0, [r7, #16]
 800c06c:	f007 fd92 	bl	8013b94 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c070:	2100      	movs	r1, #0
 800c072:	6938      	ldr	r0, [r7, #16]
 800c074:	f007 fdf4 	bl	8013c60 <tcp_accept>
    }
    if (shut_tx) {
 800c078:	7b7b      	ldrb	r3, [r7, #13]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d003      	beq.n	800c086 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c07e:	2100      	movs	r1, #0
 800c080:	6938      	ldr	r0, [r7, #16]
 800c082:	f007 fda9 	bl	8013bd8 <tcp_sent>
    }
    if (shut_close) {
 800c086:	7dbb      	ldrb	r3, [r7, #22]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d008      	beq.n	800c09e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c08c:	2200      	movs	r2, #0
 800c08e:	2100      	movs	r1, #0
 800c090:	6938      	ldr	r0, [r7, #16]
 800c092:	f007 fdfd 	bl	8013c90 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c096:	2100      	movs	r1, #0
 800c098:	6938      	ldr	r0, [r7, #16]
 800c09a:	f007 fdbf 	bl	8013c1c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c09e:	7dbb      	ldrb	r3, [r7, #22]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d005      	beq.n	800c0b0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c0a4:	6938      	ldr	r0, [r7, #16]
 800c0a6:	f006 fa77 	bl	8012598 <tcp_close>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	75fb      	strb	r3, [r7, #23]
 800c0ae:	e007      	b.n	800c0c0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	7b7a      	ldrb	r2, [r7, #13]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6938      	ldr	r0, [r7, #16]
 800c0b8:	f006 fa9a 	bl	80125f0 <tcp_shutdown>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c0c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d102      	bne.n	800c0ce <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	757b      	strb	r3, [r7, #21]
 800c0cc:	e016      	b.n	800c0fc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0d6:	d10f      	bne.n	800c0f8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a1b      	ldr	r3, [r3, #32]
 800c0dc:	7a5b      	ldrb	r3, [r3, #9]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10c      	bne.n	800c0fc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c0e6:	7dbb      	ldrb	r3, [r7, #22]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d007      	beq.n	800c0fc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c0ec:	6938      	ldr	r0, [r7, #16]
 800c0ee:	f006 fb99 	bl	8012824 <tcp_abort>
          err = ERR_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	75fb      	strb	r3, [r7, #23]
 800c0f6:	e001      	b.n	800c0fc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c0fc:	7d7b      	ldrb	r3, [r7, #21]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d044      	beq.n	800c18c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a1b      	ldr	r3, [r3, #32]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	330c      	adds	r3, #12
 800c10a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a1b      	ldr	r3, [r3, #32]
 800c110:	7dfa      	ldrb	r2, [r7, #23]
 800c112:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d129      	bne.n	800c17c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c128:	7dbb      	ldrb	r3, [r7, #22]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d005      	beq.n	800c148 <lwip_netconn_do_close_internal+0x1f0>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c140:	2200      	movs	r2, #0
 800c142:	2104      	movs	r1, #4
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	4798      	blx	r3
      }
      if (shut_rx) {
 800c148:	7bbb      	ldrb	r3, [r7, #14]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d009      	beq.n	800c162 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c152:	2b00      	cmp	r3, #0
 800c154:	d005      	beq.n	800c162 <lwip_netconn_do_close_internal+0x20a>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15a:	2200      	movs	r2, #0
 800c15c:	2100      	movs	r1, #0
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	4798      	blx	r3
      }
      if (shut_tx) {
 800c162:	7b7b      	ldrb	r3, [r7, #13]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d009      	beq.n	800c17c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d005      	beq.n	800c17c <lwip_netconn_do_close_internal+0x224>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	2200      	movs	r2, #0
 800c176:	2102      	movs	r1, #2
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c17c:	78fb      	ldrb	r3, [r7, #3]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d002      	beq.n	800c188 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c182:	68b8      	ldr	r0, [r7, #8]
 800c184:	f011 fd42 	bl	801dc0c <sys_sem_signal>
    }
    return ERR_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	e02e      	b.n	800c1ea <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800c18c:	7d7b      	ldrb	r3, [r7, #21]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d11e      	bne.n	800c1d0 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	7d1b      	ldrb	r3, [r3, #20]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d106      	bne.n	800c1a8 <lwip_netconn_do_close_internal+0x250>
 800c19a:	4b16      	ldr	r3, [pc, #88]	; (800c1f4 <lwip_netconn_do_close_internal+0x29c>)
 800c19c:	f240 4241 	movw	r2, #1089	; 0x441
 800c1a0:	491b      	ldr	r1, [pc, #108]	; (800c210 <lwip_netconn_do_close_internal+0x2b8>)
 800c1a2:	4816      	ldr	r0, [pc, #88]	; (800c1fc <lwip_netconn_do_close_internal+0x2a4>)
 800c1a4:	f012 fc6a 	bl	801ea7c <iprintf>
    if (shut_tx) {
 800c1a8:	7b7b      	ldrb	r3, [r7, #13]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800c1ae:	4919      	ldr	r1, [pc, #100]	; (800c214 <lwip_netconn_do_close_internal+0x2bc>)
 800c1b0:	6938      	ldr	r0, [r7, #16]
 800c1b2:	f007 fd11 	bl	8013bd8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	4917      	ldr	r1, [pc, #92]	; (800c218 <lwip_netconn_do_close_internal+0x2c0>)
 800c1ba:	6938      	ldr	r0, [r7, #16]
 800c1bc:	f007 fd68 	bl	8013c90 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c1c0:	4916      	ldr	r1, [pc, #88]	; (800c21c <lwip_netconn_do_close_internal+0x2c4>)
 800c1c2:	6938      	ldr	r0, [r7, #16]
 800c1c4:	f007 fd2a 	bl	8013c1c <tcp_err>
    tcp_arg(tpcb, conn);
 800c1c8:	6879      	ldr	r1, [r7, #4]
 800c1ca:	6938      	ldr	r0, [r7, #16]
 800c1cc:	f007 fcd0 	bl	8013b70 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c1d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d106      	bne.n	800c1e6 <lwip_netconn_do_close_internal+0x28e>
 800c1d8:	4b06      	ldr	r3, [pc, #24]	; (800c1f4 <lwip_netconn_do_close_internal+0x29c>)
 800c1da:	f240 424d 	movw	r2, #1101	; 0x44d
 800c1de:	4910      	ldr	r1, [pc, #64]	; (800c220 <lwip_netconn_do_close_internal+0x2c8>)
 800c1e0:	4806      	ldr	r0, [pc, #24]	; (800c1fc <lwip_netconn_do_close_internal+0x2a4>)
 800c1e2:	f012 fc4b 	bl	801ea7c <iprintf>
  return err;
 800c1e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3718      	adds	r7, #24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	08022914 	.word	0x08022914
 800c1f8:	08022be8 	.word	0x08022be8
 800c1fc:	08022958 	.word	0x08022958
 800c200:	08022bf8 	.word	0x08022bf8
 800c204:	08022c18 	.word	0x08022c18
 800c208:	08022c3c 	.word	0x08022c3c
 800c20c:	08022a7c 	.word	0x08022a7c
 800c210:	08022c50 	.word	0x08022c50
 800c214:	0800b7d1 	.word	0x0800b7d1
 800c218:	0800b709 	.word	0x0800b709
 800c21c:	0800b879 	.word	0x0800b879
 800c220:	08022c74 	.word	0x08022c74

0800c224 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	785b      	ldrb	r3, [r3, #1]
 800c236:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c238:	7afb      	ldrb	r3, [r7, #11]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00d      	beq.n	800c25a <lwip_netconn_do_delconn+0x36>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c248:	2b10      	cmp	r3, #16
 800c24a:	d006      	beq.n	800c25a <lwip_netconn_do_delconn+0x36>
 800c24c:	4b60      	ldr	r3, [pc, #384]	; (800c3d0 <lwip_netconn_do_delconn+0x1ac>)
 800c24e:	f240 425e 	movw	r2, #1118	; 0x45e
 800c252:	4960      	ldr	r1, [pc, #384]	; (800c3d4 <lwip_netconn_do_delconn+0x1b0>)
 800c254:	4860      	ldr	r0, [pc, #384]	; (800c3d8 <lwip_netconn_do_delconn+0x1b4>)
 800c256:	f012 fc11 	bl	801ea7c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c25a:	7afb      	ldrb	r3, [r7, #11]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d005      	beq.n	800c26c <lwip_netconn_do_delconn+0x48>
 800c260:	7afb      	ldrb	r3, [r7, #11]
 800c262:	2b02      	cmp	r3, #2
 800c264:	d002      	beq.n	800c26c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c266:	7afb      	ldrb	r3, [r7, #11]
 800c268:	2b03      	cmp	r3, #3
 800c26a:	d109      	bne.n	800c280 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c26c:	7afb      	ldrb	r3, [r7, #11]
 800c26e:	2b03      	cmp	r3, #3
 800c270:	d10a      	bne.n	800c288 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	7f1b      	ldrb	r3, [r3, #28]
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d103      	bne.n	800c288 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	22fb      	movs	r2, #251	; 0xfb
 800c284:	711a      	strb	r2, [r3, #4]
 800c286:	e097      	b.n	800c3b8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c288:	7afb      	ldrb	r3, [r7, #11]
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	d10d      	bne.n	800c2aa <lwip_netconn_do_delconn+0x86>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	7f1b      	ldrb	r3, [r3, #28]
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d106      	bne.n	800c2aa <lwip_netconn_do_delconn+0x86>
 800c29c:	4b4c      	ldr	r3, [pc, #304]	; (800c3d0 <lwip_netconn_do_delconn+0x1ac>)
 800c29e:	f240 427a 	movw	r2, #1146	; 0x47a
 800c2a2:	494e      	ldr	r1, [pc, #312]	; (800c3dc <lwip_netconn_do_delconn+0x1b8>)
 800c2a4:	484c      	ldr	r0, [pc, #304]	; (800c3d8 <lwip_netconn_do_delconn+0x1b4>)
 800c2a6:	f012 fbe9 	bl	801ea7c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7ff fdd1 	bl	800be5c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d05f      	beq.n	800c384 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2ce:	2b10      	cmp	r3, #16
 800c2d0:	d00d      	beq.n	800c2ee <lwip_netconn_do_delconn+0xca>
 800c2d2:	2b20      	cmp	r3, #32
 800c2d4:	d151      	bne.n	800c37a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f00c ffb0 	bl	801924c <udp_remove>
          break;
 800c2ec:	e046      	b.n	800c37c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	6a1b      	ldr	r3, [r3, #32]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d006      	beq.n	800c306 <lwip_netconn_do_delconn+0xe2>
 800c2f8:	4b35      	ldr	r3, [pc, #212]	; (800c3d0 <lwip_netconn_do_delconn+0x1ac>)
 800c2fa:	f240 4294 	movw	r2, #1172	; 0x494
 800c2fe:	4938      	ldr	r1, [pc, #224]	; (800c3e0 <lwip_netconn_do_delconn+0x1bc>)
 800c300:	4835      	ldr	r0, [pc, #212]	; (800c3d8 <lwip_netconn_do_delconn+0x1b4>)
 800c302:	f012 fbbb 	bl	801ea7c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2204      	movs	r2, #4
 800c30c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2203      	movs	r2, #3
 800c312:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2100      	movs	r1, #0
 800c322:	4618      	mov	r0, r3
 800c324:	f7ff fe18 	bl	800bf58 <lwip_netconn_do_close_internal>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d04b      	beq.n	800c3c6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	785b      	ldrb	r3, [r3, #1]
 800c334:	2b04      	cmp	r3, #4
 800c336:	d006      	beq.n	800c346 <lwip_netconn_do_delconn+0x122>
 800c338:	4b25      	ldr	r3, [pc, #148]	; (800c3d0 <lwip_netconn_do_delconn+0x1ac>)
 800c33a:	f240 429a 	movw	r2, #1178	; 0x49a
 800c33e:	4929      	ldr	r1, [pc, #164]	; (800c3e4 <lwip_netconn_do_delconn+0x1c0>)
 800c340:	4825      	ldr	r0, [pc, #148]	; (800c3d8 <lwip_netconn_do_delconn+0x1b4>)
 800c342:	f012 fb9b 	bl	801ea7c <iprintf>
            UNLOCK_TCPIP_CORE();
 800c346:	4828      	ldr	r0, [pc, #160]	; (800c3e8 <lwip_netconn_do_delconn+0x1c4>)
 800c348:	f011 fccf 	bl	801dcea <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	330c      	adds	r3, #12
 800c352:	2100      	movs	r1, #0
 800c354:	4618      	mov	r0, r3
 800c356:	f011 fc28 	bl	801dbaa <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c35a:	4823      	ldr	r0, [pc, #140]	; (800c3e8 <lwip_netconn_do_delconn+0x1c4>)
 800c35c:	f011 fcb6 	bl	801dccc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	785b      	ldrb	r3, [r3, #1]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d02d      	beq.n	800c3c6 <lwip_netconn_do_delconn+0x1a2>
 800c36a:	4b19      	ldr	r3, [pc, #100]	; (800c3d0 <lwip_netconn_do_delconn+0x1ac>)
 800c36c:	f240 429e 	movw	r2, #1182	; 0x49e
 800c370:	491c      	ldr	r1, [pc, #112]	; (800c3e4 <lwip_netconn_do_delconn+0x1c0>)
 800c372:	4819      	ldr	r0, [pc, #100]	; (800c3d8 <lwip_netconn_do_delconn+0x1b4>)
 800c374:	f012 fb82 	bl	801ea7c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c378:	e025      	b.n	800c3c6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c37a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2200      	movs	r2, #0
 800c382:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d007      	beq.n	800c39e <lwip_netconn_do_delconn+0x17a>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	6810      	ldr	r0, [r2, #0]
 800c398:	2200      	movs	r2, #0
 800c39a:	2100      	movs	r1, #0
 800c39c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d007      	beq.n	800c3b8 <lwip_netconn_do_delconn+0x194>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	6810      	ldr	r0, [r2, #0]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2102      	movs	r1, #2
 800c3b6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	330c      	adds	r3, #12
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f011 fc3e 	bl	801dc40 <sys_sem_valid>
 800c3c4:	e000      	b.n	800c3c8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800c3c6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	08022914 	.word	0x08022914
 800c3d4:	08022c84 	.word	0x08022c84
 800c3d8:	08022958 	.word	0x08022958
 800c3dc:	08022c98 	.word	0x08022c98
 800c3e0:	08022cb8 	.word	0x08022cb8
 800c3e4:	08022cd4 	.word	0x08022cd4
 800c3e8:	200176d0 	.word	0x200176d0

0800c3ec <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d025      	beq.n	800c44e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c40c:	2b10      	cmp	r3, #16
 800c40e:	d00e      	beq.n	800c42e <lwip_netconn_do_bind+0x42>
 800c410:	2b20      	cmp	r3, #32
 800c412:	d119      	bne.n	800c448 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6858      	ldr	r0, [r3, #4]
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	6899      	ldr	r1, [r3, #8]
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	899b      	ldrh	r3, [r3, #12]
 800c422:	461a      	mov	r2, r3
 800c424:	f00c fdd4 	bl	8018fd0 <udp_bind>
 800c428:	4603      	mov	r3, r0
 800c42a:	73fb      	strb	r3, [r7, #15]
        break;
 800c42c:	e011      	b.n	800c452 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	6858      	ldr	r0, [r3, #4]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	6899      	ldr	r1, [r3, #8]
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	899b      	ldrh	r3, [r3, #12]
 800c43c:	461a      	mov	r2, r3
 800c43e:	f006 f9fd 	bl	801283c <tcp_bind>
 800c442:	4603      	mov	r3, r0
 800c444:	73fb      	strb	r3, [r7, #15]
        break;
 800c446:	e004      	b.n	800c452 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c448:	23fa      	movs	r3, #250	; 0xfa
 800c44a:	73fb      	strb	r3, [r7, #15]
        break;
 800c44c:	e001      	b.n	800c452 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800c44e:	23fa      	movs	r3, #250	; 0xfa
 800c450:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	7bfa      	ldrb	r2, [r7, #15]
 800c456:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c458:	bf00      	nop
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	4613      	mov	r3, r2
 800c46c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800c46e:	2300      	movs	r3, #0
 800c470:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d102      	bne.n	800c482 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800c47c:	f06f 0305 	mvn.w	r3, #5
 800c480:	e070      	b.n	800c564 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	785b      	ldrb	r3, [r3, #1]
 800c486:	2b03      	cmp	r3, #3
 800c488:	d006      	beq.n	800c498 <lwip_netconn_do_connected+0x38>
 800c48a:	4b38      	ldr	r3, [pc, #224]	; (800c56c <lwip_netconn_do_connected+0x10c>)
 800c48c:	f240 5223 	movw	r2, #1315	; 0x523
 800c490:	4937      	ldr	r1, [pc, #220]	; (800c570 <lwip_netconn_do_connected+0x110>)
 800c492:	4838      	ldr	r0, [pc, #224]	; (800c574 <lwip_netconn_do_connected+0x114>)
 800c494:	f012 faf2 	bl	801ea7c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	6a1b      	ldr	r3, [r3, #32]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10c      	bne.n	800c4ba <lwip_netconn_do_connected+0x5a>
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	7f1b      	ldrb	r3, [r3, #28]
 800c4a4:	f003 0304 	and.w	r3, r3, #4
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d106      	bne.n	800c4ba <lwip_netconn_do_connected+0x5a>
 800c4ac:	4b2f      	ldr	r3, [pc, #188]	; (800c56c <lwip_netconn_do_connected+0x10c>)
 800c4ae:	f240 5224 	movw	r2, #1316	; 0x524
 800c4b2:	4931      	ldr	r1, [pc, #196]	; (800c578 <lwip_netconn_do_connected+0x118>)
 800c4b4:	482f      	ldr	r0, [pc, #188]	; (800c574 <lwip_netconn_do_connected+0x114>)
 800c4b6:	f012 fae1 	bl	801ea7c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	6a1b      	ldr	r3, [r3, #32]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d008      	beq.n	800c4d4 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	6a1b      	ldr	r3, [r3, #32]
 800c4c6:	79fa      	ldrb	r2, [r7, #7]
 800c4c8:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	330c      	adds	r3, #12
 800c4d2:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4dc:	2b10      	cmp	r3, #16
 800c4de:	d106      	bne.n	800c4ee <lwip_netconn_do_connected+0x8e>
 800c4e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d102      	bne.n	800c4ee <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800c4e8:	69b8      	ldr	r0, [r7, #24]
 800c4ea:	f7ff fa9b 	bl	800ba24 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	7f1b      	ldrb	r3, [r3, #28]
 800c4f2:	f003 0304 	and.w	r3, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	bf0c      	ite	eq
 800c4fa:	2301      	moveq	r3, #1
 800c4fc:	2300      	movne	r3, #0
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	7f1b      	ldrb	r3, [r3, #28]
 800c506:	f023 0304 	bic.w	r3, r3, #4
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d002      	beq.n	800c51c <lwip_netconn_do_connected+0xbc>
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10c      	bne.n	800c536 <lwip_netconn_do_connected+0xd6>
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d102      	bne.n	800c528 <lwip_netconn_do_connected+0xc8>
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d006      	beq.n	800c536 <lwip_netconn_do_connected+0xd6>
 800c528:	4b10      	ldr	r3, [pc, #64]	; (800c56c <lwip_netconn_do_connected+0x10c>)
 800c52a:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800c52e:	4913      	ldr	r1, [pc, #76]	; (800c57c <lwip_netconn_do_connected+0x11c>)
 800c530:	4810      	ldr	r0, [pc, #64]	; (800c574 <lwip_netconn_do_connected+0x114>)
 800c532:	f012 faa3 	bl	801ea7c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	2200      	movs	r2, #0
 800c53a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	2200      	movs	r2, #0
 800c540:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c546:	2b00      	cmp	r3, #0
 800c548:	d005      	beq.n	800c556 <lwip_netconn_do_connected+0xf6>
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54e:	2200      	movs	r2, #0
 800c550:	2102      	movs	r1, #2
 800c552:	69b8      	ldr	r0, [r7, #24]
 800c554:	4798      	blx	r3

  if (was_blocking) {
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d002      	beq.n	800c562 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800c55c:	69f8      	ldr	r0, [r7, #28]
 800c55e:	f011 fb55 	bl	801dc0c <sys_sem_signal>
  }
  return ERR_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3720      	adds	r7, #32
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	08022914 	.word	0x08022914
 800c570:	08022cdc 	.word	0x08022cdc
 800c574:	08022958 	.word	0x08022958
 800c578:	08022cfc 	.word	0x08022cfc
 800c57c:	08022d3c 	.word	0x08022d3c

0800c580 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d102      	bne.n	800c59c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800c596:	23f1      	movs	r3, #241	; 0xf1
 800c598:	75fb      	strb	r3, [r7, #23]
 800c59a:	e09b      	b.n	800c6d4 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5a6:	2b10      	cmp	r3, #16
 800c5a8:	d00f      	beq.n	800c5ca <lwip_netconn_do_connect+0x4a>
 800c5aa:	2b20      	cmp	r3, #32
 800c5ac:	f040 8087 	bne.w	800c6be <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6858      	ldr	r0, [r3, #4]
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	6899      	ldr	r1, [r3, #8]
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	899b      	ldrh	r3, [r3, #12]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f00c fd8e 	bl	80190e0 <udp_connect>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	75fb      	strb	r3, [r7, #23]
        break;
 800c5c8:	e084      	b.n	800c6d4 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	785b      	ldrb	r3, [r3, #1]
 800c5d0:	2b03      	cmp	r3, #3
 800c5d2:	d102      	bne.n	800c5da <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800c5d4:	23f7      	movs	r3, #247	; 0xf7
 800c5d6:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800c5d8:	e07b      	b.n	800c6d2 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	785b      	ldrb	r3, [r3, #1]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800c5e4:	23f6      	movs	r3, #246	; 0xf6
 800c5e6:	75fb      	strb	r3, [r7, #23]
        break;
 800c5e8:	e073      	b.n	800c6d2 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7ff fa18 	bl	800ba24 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6858      	ldr	r0, [r3, #4]
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	6899      	ldr	r1, [r3, #8]
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	899a      	ldrh	r2, [r3, #12]
 800c602:	4b38      	ldr	r3, [pc, #224]	; (800c6e4 <lwip_netconn_do_connect+0x164>)
 800c604:	f006 fb6c 	bl	8012ce0 <tcp_connect>
 800c608:	4603      	mov	r3, r0
 800c60a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800c60c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d15e      	bne.n	800c6d2 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	7f1b      	ldrb	r3, [r3, #28]
 800c61a:	f003 0302 	and.w	r3, r3, #2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	bf14      	ite	ne
 800c622:	2301      	movne	r3, #1
 800c624:	2300      	moveq	r3, #0
 800c626:	b2db      	uxtb	r3, r3
 800c628:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2203      	movs	r2, #3
 800c630:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c632:	7bfb      	ldrb	r3, [r7, #15]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d009      	beq.n	800c64c <lwip_netconn_do_connect+0xcc>
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	7f1a      	ldrb	r2, [r3, #28]
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f042 0204 	orr.w	r2, r2, #4
 800c646:	b2d2      	uxtb	r2, r2
 800c648:	771a      	strb	r2, [r3, #28]
 800c64a:	e008      	b.n	800c65e <lwip_netconn_do_connect+0xde>
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	7f1a      	ldrb	r2, [r3, #28]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f022 0204 	bic.w	r2, r2, #4
 800c65a:	b2d2      	uxtb	r2, r2
 800c65c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d002      	beq.n	800c66a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800c664:	23fb      	movs	r3, #251	; 0xfb
 800c666:	75fb      	strb	r3, [r7, #23]
        break;
 800c668:	e033      	b.n	800c6d2 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	693a      	ldr	r2, [r7, #16]
 800c670:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	785b      	ldrb	r3, [r3, #1]
 800c678:	2b03      	cmp	r3, #3
 800c67a:	d006      	beq.n	800c68a <lwip_netconn_do_connect+0x10a>
 800c67c:	4b1a      	ldr	r3, [pc, #104]	; (800c6e8 <lwip_netconn_do_connect+0x168>)
 800c67e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800c682:	491a      	ldr	r1, [pc, #104]	; (800c6ec <lwip_netconn_do_connect+0x16c>)
 800c684:	481a      	ldr	r0, [pc, #104]	; (800c6f0 <lwip_netconn_do_connect+0x170>)
 800c686:	f012 f9f9 	bl	801ea7c <iprintf>
              UNLOCK_TCPIP_CORE();
 800c68a:	481a      	ldr	r0, [pc, #104]	; (800c6f4 <lwip_netconn_do_connect+0x174>)
 800c68c:	f011 fb2d 	bl	801dcea <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	330c      	adds	r3, #12
 800c696:	2100      	movs	r1, #0
 800c698:	4618      	mov	r0, r3
 800c69a:	f011 fa86 	bl	801dbaa <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800c69e:	4815      	ldr	r0, [pc, #84]	; (800c6f4 <lwip_netconn_do_connect+0x174>)
 800c6a0:	f011 fb14 	bl	801dccc <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	785b      	ldrb	r3, [r3, #1]
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d116      	bne.n	800c6dc <lwip_netconn_do_connect+0x15c>
 800c6ae:	4b0e      	ldr	r3, [pc, #56]	; (800c6e8 <lwip_netconn_do_connect+0x168>)
 800c6b0:	f240 5274 	movw	r2, #1396	; 0x574
 800c6b4:	490d      	ldr	r1, [pc, #52]	; (800c6ec <lwip_netconn_do_connect+0x16c>)
 800c6b6:	480e      	ldr	r0, [pc, #56]	; (800c6f0 <lwip_netconn_do_connect+0x170>)
 800c6b8:	f012 f9e0 	bl	801ea7c <iprintf>
              return;
 800c6bc:	e00e      	b.n	800c6dc <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800c6be:	4b0a      	ldr	r3, [pc, #40]	; (800c6e8 <lwip_netconn_do_connect+0x168>)
 800c6c0:	f240 527d 	movw	r2, #1405	; 0x57d
 800c6c4:	490c      	ldr	r1, [pc, #48]	; (800c6f8 <lwip_netconn_do_connect+0x178>)
 800c6c6:	480a      	ldr	r0, [pc, #40]	; (800c6f0 <lwip_netconn_do_connect+0x170>)
 800c6c8:	f012 f9d8 	bl	801ea7c <iprintf>
 800c6cc:	23fa      	movs	r3, #250	; 0xfa
 800c6ce:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800c6d0:	e000      	b.n	800c6d4 <lwip_netconn_do_connect+0x154>
        break;
 800c6d2:	bf00      	nop
    }
  }
  msg->err = err;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	7dfa      	ldrb	r2, [r7, #23]
 800c6d8:	711a      	strb	r2, [r3, #4]
 800c6da:	e000      	b.n	800c6de <lwip_netconn_do_connect+0x15e>
              return;
 800c6dc:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800c6de:	3718      	adds	r7, #24
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	0800c461 	.word	0x0800c461
 800c6e8:	08022914 	.word	0x08022914
 800c6ec:	08022cd4 	.word	0x08022cd4
 800c6f0:	08022958 	.word	0x08022958
 800c6f4:	200176d0 	.word	0x200176d0
 800c6f8:	08022d5c 	.word	0x08022d5c

0800c6fc <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c712:	2b20      	cmp	r3, #32
 800c714:	d109      	bne.n	800c72a <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f00c fd4d 	bl	80191bc <udp_disconnect>
    msg->err = ERR_OK;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2200      	movs	r2, #0
 800c726:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c728:	e002      	b.n	800c730 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	22fa      	movs	r2, #250	; 0xfa
 800c72e:	711a      	strb	r2, [r3, #4]
}
 800c730:	bf00      	nop
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d07f      	beq.n	800c84e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c758:	2b10      	cmp	r3, #16
 800c75a:	d175      	bne.n	800c848 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	785b      	ldrb	r3, [r3, #1]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d165      	bne.n	800c832 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d002      	beq.n	800c778 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800c772:	23fa      	movs	r3, #250	; 0xfa
 800c774:	72fb      	strb	r3, [r7, #11]
 800c776:	e06c      	b.n	800c852 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800c778:	23ff      	movs	r3, #255	; 0xff
 800c77a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	f107 020b 	add.w	r2, r7, #11
 800c786:	7cf9      	ldrb	r1, [r7, #19]
 800c788:	4618      	mov	r0, r3
 800c78a:	f006 f90f 	bl	80129ac <tcp_listen_with_backlog_and_err>
 800c78e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d05d      	beq.n	800c852 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3310      	adds	r3, #16
 800c79c:	4618      	mov	r0, r3
 800c79e:	f011 f9c0 	bl	801db22 <sys_mbox_valid>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3310      	adds	r3, #16
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f011 f930 	bl	801da14 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	3310      	adds	r3, #16
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f011 f9c2 	bl	801db44 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	3314      	adds	r3, #20
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f011 f9a9 	bl	801db22 <sys_mbox_valid>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d108      	bne.n	800c7e8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3314      	adds	r3, #20
 800c7dc:	2106      	movs	r1, #6
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f011 f8fa 	bl	801d9d8 <sys_mbox_new>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800c7e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d118      	bne.n	800c822 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2202      	movs	r2, #2
 800c7f6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	685a      	ldr	r2, [r3, #4]
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4619      	mov	r1, r3
 800c80c:	4610      	mov	r0, r2
 800c80e:	f007 f9af 	bl	8013b70 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	4912      	ldr	r1, [pc, #72]	; (800c864 <lwip_netconn_do_listen+0x12c>)
 800c81a:	4618      	mov	r0, r3
 800c81c:	f007 fa20 	bl	8013c60 <tcp_accept>
 800c820:	e017      	b.n	800c852 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f005 feb8 	bl	8012598 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2200      	movs	r2, #0
 800c82e:	605a      	str	r2, [r3, #4]
 800c830:	e00f      	b.n	800c852 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	785b      	ldrb	r3, [r3, #1]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d102      	bne.n	800c842 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	72fb      	strb	r3, [r7, #11]
 800c840:	e007      	b.n	800c852 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800c842:	23f5      	movs	r3, #245	; 0xf5
 800c844:	72fb      	strb	r3, [r7, #11]
 800c846:	e004      	b.n	800c852 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800c848:	23f0      	movs	r3, #240	; 0xf0
 800c84a:	72fb      	strb	r3, [r7, #11]
 800c84c:	e001      	b.n	800c852 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800c84e:	23f5      	movs	r3, #245	; 0xf5
 800c850:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800c852:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c85a:	bf00      	nop
 800c85c:	3718      	adds	r7, #24
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	0800ba75 	.word	0x0800ba75

0800c868 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fe fd59 	bl	800b330 <netconn_err>
 800c87e:	4603      	mov	r3, r0
 800c880:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d134      	bne.n	800c8f4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d02d      	beq.n	800c8f0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c89e:	2b20      	cmp	r3, #32
 800c8a0:	d123      	bne.n	800c8ea <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10c      	bne.n	800c8c6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	4610      	mov	r0, r2
 800c8bc:	f00c f99e 	bl	8018bfc <udp_send>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800c8c4:	e016      	b.n	800c8f4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	6858      	ldr	r0, [r3, #4]
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	6819      	ldr	r1, [r3, #0]
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	f103 0208 	add.w	r2, r3, #8
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	899b      	ldrh	r3, [r3, #12]
 800c8e0:	f00c f9c0 	bl	8018c64 <udp_sendto>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	73fb      	strb	r3, [r7, #15]
          break;
 800c8e8:	e004      	b.n	800c8f4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800c8ea:	23f5      	movs	r3, #245	; 0xf5
 800c8ec:	73fb      	strb	r3, [r7, #15]
          break;
 800c8ee:	e001      	b.n	800c8f4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800c8f0:	23f5      	movs	r3, #245	; 0xf5
 800c8f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	7bfa      	ldrb	r2, [r7, #15]
 800c8f8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c8fa:	bf00      	nop
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b086      	sub	sp, #24
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	2200      	movs	r2, #0
 800c912:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d022      	beq.n	800c964 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c928:	2b10      	cmp	r3, #16
 800c92a:	d11b      	bne.n	800c964 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c938:	d202      	bcs.n	800c940 <lwip_netconn_do_recv+0x3e>
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	e001      	b.n	800c944 <lwip_netconn_do_recv+0x42>
 800c940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c944:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	89fa      	ldrh	r2, [r7, #14]
 800c94e:	4611      	mov	r1, r2
 800c950:	4618      	mov	r0, r3
 800c952:	f006 f92f 	bl	8012bb4 <tcp_recved>
        remaining -= recved;
 800c956:	89fb      	ldrh	r3, [r7, #14]
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	1ad3      	subs	r3, r2, r3
 800c95c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1e6      	bne.n	800c932 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c964:	bf00      	nop
 800c966:	3718      	adds	r7, #24
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	460b      	mov	r3, r1
 800c976:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c978:	2300      	movs	r3, #0
 800c97a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d106      	bne.n	800c990 <lwip_netconn_do_writemore+0x24>
 800c982:	4b96      	ldr	r3, [pc, #600]	; (800cbdc <lwip_netconn_do_writemore+0x270>)
 800c984:	f240 6273 	movw	r2, #1651	; 0x673
 800c988:	4995      	ldr	r1, [pc, #596]	; (800cbe0 <lwip_netconn_do_writemore+0x274>)
 800c98a:	4896      	ldr	r0, [pc, #600]	; (800cbe4 <lwip_netconn_do_writemore+0x278>)
 800c98c:	f012 f876 	bl	801ea7c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	785b      	ldrb	r3, [r3, #1]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d006      	beq.n	800c9a6 <lwip_netconn_do_writemore+0x3a>
 800c998:	4b90      	ldr	r3, [pc, #576]	; (800cbdc <lwip_netconn_do_writemore+0x270>)
 800c99a:	f240 6274 	movw	r2, #1652	; 0x674
 800c99e:	4992      	ldr	r1, [pc, #584]	; (800cbe8 <lwip_netconn_do_writemore+0x27c>)
 800c9a0:	4890      	ldr	r0, [pc, #576]	; (800cbe4 <lwip_netconn_do_writemore+0x278>)
 800c9a2:	f012 f86b 	bl	801ea7c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a1b      	ldr	r3, [r3, #32]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d106      	bne.n	800c9bc <lwip_netconn_do_writemore+0x50>
 800c9ae:	4b8b      	ldr	r3, [pc, #556]	; (800cbdc <lwip_netconn_do_writemore+0x270>)
 800c9b0:	f240 6275 	movw	r2, #1653	; 0x675
 800c9b4:	498d      	ldr	r1, [pc, #564]	; (800cbec <lwip_netconn_do_writemore+0x280>)
 800c9b6:	488b      	ldr	r0, [pc, #556]	; (800cbe4 <lwip_netconn_do_writemore+0x278>)
 800c9b8:	f012 f860 	bl	801ea7c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d106      	bne.n	800c9d2 <lwip_netconn_do_writemore+0x66>
 800c9c4:	4b85      	ldr	r3, [pc, #532]	; (800cbdc <lwip_netconn_do_writemore+0x270>)
 800c9c6:	f240 6276 	movw	r2, #1654	; 0x676
 800c9ca:	4989      	ldr	r1, [pc, #548]	; (800cbf0 <lwip_netconn_do_writemore+0x284>)
 800c9cc:	4885      	ldr	r0, [pc, #532]	; (800cbe4 <lwip_netconn_do_writemore+0x278>)
 800c9ce:	f012 f855 	bl	801ea7c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a1b      	ldr	r3, [r3, #32]
 800c9d6:	699a      	ldr	r2, [r3, #24]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d306      	bcc.n	800c9f0 <lwip_netconn_do_writemore+0x84>
 800c9e2:	4b7e      	ldr	r3, [pc, #504]	; (800cbdc <lwip_netconn_do_writemore+0x270>)
 800c9e4:	f240 6277 	movw	r2, #1655	; 0x677
 800c9e8:	4982      	ldr	r1, [pc, #520]	; (800cbf4 <lwip_netconn_do_writemore+0x288>)
 800c9ea:	487e      	ldr	r0, [pc, #504]	; (800cbe4 <lwip_netconn_do_writemore+0x278>)
 800c9ec:	f012 f846 	bl	801ea7c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a1b      	ldr	r3, [r3, #32]
 800c9f4:	899b      	ldrh	r3, [r3, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d106      	bne.n	800ca08 <lwip_netconn_do_writemore+0x9c>
 800c9fa:	4b78      	ldr	r3, [pc, #480]	; (800cbdc <lwip_netconn_do_writemore+0x270>)
 800c9fc:	f240 6279 	movw	r2, #1657	; 0x679
 800ca00:	497d      	ldr	r1, [pc, #500]	; (800cbf8 <lwip_netconn_do_writemore+0x28c>)
 800ca02:	4878      	ldr	r0, [pc, #480]	; (800cbe4 <lwip_netconn_do_writemore+0x278>)
 800ca04:	f012 f83a 	bl	801ea7c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a1b      	ldr	r3, [r3, #32]
 800ca0c:	7f1b      	ldrb	r3, [r3, #28]
 800ca0e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7f1b      	ldrb	r3, [r3, #28]
 800ca14:	f003 0302 	and.w	r3, r3, #2
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d104      	bne.n	800ca26 <lwip_netconn_do_writemore+0xba>
 800ca1c:	7ebb      	ldrb	r3, [r7, #26]
 800ca1e:	f003 0304 	and.w	r3, r3, #4
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <lwip_netconn_do_writemore+0xbe>
 800ca26:	2301      	movs	r3, #1
 800ca28:	e000      	b.n	800ca2c <lwip_netconn_do_writemore+0xc0>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6a1b      	ldr	r3, [r3, #32]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6a1b      	ldr	r3, [r3, #32]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca58:	d307      	bcc.n	800ca6a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ca5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca5e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ca60:	7ebb      	ldrb	r3, [r7, #26]
 800ca62:	f043 0302 	orr.w	r3, r3, #2
 800ca66:	76bb      	strb	r3, [r7, #26]
 800ca68:	e001      	b.n	800ca6e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ca76:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ca78:	89fa      	ldrh	r2, [r7, #14]
 800ca7a:	8bbb      	ldrh	r3, [r7, #28]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d216      	bcs.n	800caae <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ca80:	89fb      	ldrh	r3, [r7, #14]
 800ca82:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ca84:	7e3b      	ldrb	r3, [r7, #24]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00d      	beq.n	800caa6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ca8a:	8bbb      	ldrh	r3, [r7, #28]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10e      	bne.n	800caae <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d102      	bne.n	800caa0 <lwip_netconn_do_writemore+0x134>
 800ca9a:	f06f 0306 	mvn.w	r3, #6
 800ca9e:	e000      	b.n	800caa2 <lwip_netconn_do_writemore+0x136>
 800caa0:	2300      	movs	r3, #0
 800caa2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800caa4:	e07d      	b.n	800cba2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800caa6:	7ebb      	ldrb	r3, [r7, #26]
 800caa8:	f043 0302 	orr.w	r3, r3, #2
 800caac:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	691a      	ldr	r2, [r3, #16]
 800cab4:	8bbb      	ldrh	r3, [r7, #28]
 800cab6:	441a      	add	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a1b      	ldr	r3, [r3, #32]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d906      	bls.n	800cad2 <lwip_netconn_do_writemore+0x166>
 800cac4:	4b45      	ldr	r3, [pc, #276]	; (800cbdc <lwip_netconn_do_writemore+0x270>)
 800cac6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800caca:	494c      	ldr	r1, [pc, #304]	; (800cbfc <lwip_netconn_do_writemore+0x290>)
 800cacc:	4845      	ldr	r0, [pc, #276]	; (800cbe4 <lwip_netconn_do_writemore+0x278>)
 800cace:	f011 ffd5 	bl	801ea7c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800cad2:	8bbb      	ldrh	r3, [r7, #28]
 800cad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cad8:	4293      	cmp	r3, r2
 800cada:	d103      	bne.n	800cae4 <lwip_netconn_do_writemore+0x178>
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cae2:	d209      	bcs.n	800caf8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800cae8:	8bba      	ldrh	r2, [r7, #28]
 800caea:	429a      	cmp	r2, r3
 800caec:	d10b      	bne.n	800cb06 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	899b      	ldrh	r3, [r3, #12]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d906      	bls.n	800cb06 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800caf8:	2301      	movs	r3, #1
 800cafa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800cafc:	7ebb      	ldrb	r3, [r7, #26]
 800cafe:	f043 0302 	orr.w	r3, r3, #2
 800cb02:	76bb      	strb	r3, [r7, #26]
 800cb04:	e001      	b.n	800cb0a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6858      	ldr	r0, [r3, #4]
 800cb0e:	7ebb      	ldrb	r3, [r7, #26]
 800cb10:	8bba      	ldrh	r2, [r7, #28]
 800cb12:	6979      	ldr	r1, [r7, #20]
 800cb14:	f009 ff6c 	bl	80169f0 <tcp_write>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800cb1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d12c      	bne.n	800cb7e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a1b      	ldr	r3, [r3, #32]
 800cb28:	6999      	ldr	r1, [r3, #24]
 800cb2a:	8bba      	ldrh	r2, [r7, #28]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	440a      	add	r2, r1
 800cb32:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a1b      	ldr	r3, [r3, #32]
 800cb38:	6919      	ldr	r1, [r3, #16]
 800cb3a:	8bba      	ldrh	r2, [r7, #28]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	440a      	add	r2, r1
 800cb42:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6a1b      	ldr	r3, [r3, #32]
 800cb48:	691a      	ldr	r2, [r3, #16]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d113      	bne.n	800cb7e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	899a      	ldrh	r2, [r3, #12]
 800cb5c:	3a01      	subs	r2, #1
 800cb5e:	b292      	uxth	r2, r2
 800cb60:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	899b      	ldrh	r3, [r3, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d008      	beq.n	800cb7e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6a1b      	ldr	r3, [r3, #32]
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	3208      	adds	r2, #8
 800cb74:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800cb7e:	7e7b      	ldrb	r3, [r7, #25]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d004      	beq.n	800cb8e <lwip_netconn_do_writemore+0x222>
 800cb84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f43f af50 	beq.w	800ca2e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800cb8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d004      	beq.n	800cba0 <lwip_netconn_do_writemore+0x234>
 800cb96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb9e:	d146      	bne.n	800cc2e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800cba0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800cba2:	7e3b      	ldrb	r3, [r7, #24]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d02b      	beq.n	800cc00 <lwip_netconn_do_writemore+0x294>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6a1b      	ldr	r3, [r3, #32]
 800cbac:	699a      	ldr	r2, [r3, #24]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a1b      	ldr	r3, [r3, #32]
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d223      	bcs.n	800cc00 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d005      	beq.n	800cbcc <lwip_netconn_do_writemore+0x260>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2103      	movs	r1, #3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	7f1b      	ldrb	r3, [r3, #28]
 800cbd0:	f043 0310 	orr.w	r3, r3, #16
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	771a      	strb	r2, [r3, #28]
 800cbda:	e028      	b.n	800cc2e <lwip_netconn_do_writemore+0x2c2>
 800cbdc:	08022914 	.word	0x08022914
 800cbe0:	08022a6c 	.word	0x08022a6c
 800cbe4:	08022958 	.word	0x08022958
 800cbe8:	08022d74 	.word	0x08022d74
 800cbec:	08022a7c 	.word	0x08022a7c
 800cbf0:	08022d94 	.word	0x08022d94
 800cbf4:	08022dac 	.word	0x08022dac
 800cbf8:	08022dec 	.word	0x08022dec
 800cbfc:	08022e14 	.word	0x08022e14
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cc08:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800cc0c:	d305      	bcc.n	800cc1a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800cc16:	2b04      	cmp	r3, #4
 800cc18:	d909      	bls.n	800cc2e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d005      	beq.n	800cc2e <lwip_netconn_do_writemore+0x2c2>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc26:	2200      	movs	r2, #0
 800cc28:	2103      	movs	r1, #3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800cc2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d11d      	bne.n	800cc72 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a1b      	ldr	r3, [r3, #32]
 800cc3a:	699a      	ldr	r2, [r3, #24]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a1b      	ldr	r3, [r3, #32]
 800cc40:	695b      	ldr	r3, [r3, #20]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d002      	beq.n	800cc4c <lwip_netconn_do_writemore+0x2e0>
 800cc46:	7e3b      	ldrb	r3, [r7, #24]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f00a fd13 	bl	8017680 <tcp_output>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800cc5e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cc62:	f113 0f04 	cmn.w	r3, #4
 800cc66:	d12c      	bne.n	800ccc2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cc68:	7b3b      	ldrb	r3, [r7, #12]
 800cc6a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	76fb      	strb	r3, [r7, #27]
 800cc70:	e027      	b.n	800ccc2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800cc72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc7a:	d120      	bne.n	800ccbe <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f00a fcfd 	bl	8017680 <tcp_output>
 800cc86:	4603      	mov	r3, r0
 800cc88:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800cc8a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cc8e:	f113 0f04 	cmn.w	r3, #4
 800cc92:	d104      	bne.n	800cc9e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cc94:	7b7b      	ldrb	r3, [r7, #13]
 800cc96:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	76fb      	strb	r3, [r7, #27]
 800cc9c:	e011      	b.n	800ccc2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800cc9e:	7e3b      	ldrb	r3, [r7, #24]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00e      	beq.n	800ccc2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a1b      	ldr	r3, [r3, #32]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d102      	bne.n	800ccb4 <lwip_netconn_do_writemore+0x348>
 800ccae:	f06f 0306 	mvn.w	r3, #6
 800ccb2:	e000      	b.n	800ccb6 <lwip_netconn_do_writemore+0x34a>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	76fb      	strb	r3, [r7, #27]
 800ccbc:	e001      	b.n	800ccc2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ccc2:	7efb      	ldrb	r3, [r7, #27]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d015      	beq.n	800ccf4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a1b      	ldr	r3, [r3, #32]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	330c      	adds	r3, #12
 800ccd0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a1b      	ldr	r3, [r3, #32]
 800ccd6:	7ffa      	ldrb	r2, [r7, #31]
 800ccd8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cce6:	78fb      	ldrb	r3, [r7, #3]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d006      	beq.n	800ccfa <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ccec:	68b8      	ldr	r0, [r7, #8]
 800ccee:	f010 ff8d 	bl	801dc0c <sys_sem_signal>
 800ccf2:	e002      	b.n	800ccfa <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ccf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccf8:	e000      	b.n	800ccfc <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3720      	adds	r7, #32
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fe fb0b 	bl	800b330 <netconn_err>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cd1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d166      	bne.n	800cdf4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd30:	2b10      	cmp	r3, #16
 800cd32:	d15d      	bne.n	800cdf0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	785b      	ldrb	r3, [r3, #1]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d002      	beq.n	800cd44 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800cd3e:	23fb      	movs	r3, #251	; 0xfb
 800cd40:	73fb      	strb	r3, [r7, #15]
 800cd42:	e057      	b.n	800cdf4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d04d      	beq.n	800cdea <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2201      	movs	r2, #1
 800cd54:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6a1b      	ldr	r3, [r3, #32]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d006      	beq.n	800cd6e <lwip_netconn_do_write+0x6a>
 800cd60:	4b28      	ldr	r3, [pc, #160]	; (800ce04 <lwip_netconn_do_write+0x100>)
 800cd62:	f240 7223 	movw	r2, #1827	; 0x723
 800cd66:	4928      	ldr	r1, [pc, #160]	; (800ce08 <lwip_netconn_do_write+0x104>)
 800cd68:	4828      	ldr	r0, [pc, #160]	; (800ce0c <lwip_netconn_do_write+0x108>)
 800cd6a:	f011 fe87 	bl	801ea7c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	695b      	ldr	r3, [r3, #20]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d106      	bne.n	800cd84 <lwip_netconn_do_write+0x80>
 800cd76:	4b23      	ldr	r3, [pc, #140]	; (800ce04 <lwip_netconn_do_write+0x100>)
 800cd78:	f240 7224 	movw	r2, #1828	; 0x724
 800cd7c:	4924      	ldr	r1, [pc, #144]	; (800ce10 <lwip_netconn_do_write+0x10c>)
 800cd7e:	4823      	ldr	r0, [pc, #140]	; (800ce0c <lwip_netconn_do_write+0x108>)
 800cd80:	f011 fe7c 	bl	801ea7c <iprintf>
        msg->conn->current_msg = msg;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2100      	movs	r1, #0
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fdea 	bl	800c96c <lwip_netconn_do_writemore>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d02e      	beq.n	800cdfc <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	785b      	ldrb	r3, [r3, #1]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d006      	beq.n	800cdb6 <lwip_netconn_do_write+0xb2>
 800cda8:	4b16      	ldr	r3, [pc, #88]	; (800ce04 <lwip_netconn_do_write+0x100>)
 800cdaa:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800cdae:	4919      	ldr	r1, [pc, #100]	; (800ce14 <lwip_netconn_do_write+0x110>)
 800cdb0:	4816      	ldr	r0, [pc, #88]	; (800ce0c <lwip_netconn_do_write+0x108>)
 800cdb2:	f011 fe63 	bl	801ea7c <iprintf>
          UNLOCK_TCPIP_CORE();
 800cdb6:	4818      	ldr	r0, [pc, #96]	; (800ce18 <lwip_netconn_do_write+0x114>)
 800cdb8:	f010 ff97 	bl	801dcea <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	330c      	adds	r3, #12
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f010 fef0 	bl	801dbaa <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800cdca:	4813      	ldr	r0, [pc, #76]	; (800ce18 <lwip_netconn_do_write+0x114>)
 800cdcc:	f010 ff7e 	bl	801dccc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	785b      	ldrb	r3, [r3, #1]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d110      	bne.n	800cdfc <lwip_netconn_do_write+0xf8>
 800cdda:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <lwip_netconn_do_write+0x100>)
 800cddc:	f240 722c 	movw	r2, #1836	; 0x72c
 800cde0:	490c      	ldr	r1, [pc, #48]	; (800ce14 <lwip_netconn_do_write+0x110>)
 800cde2:	480a      	ldr	r0, [pc, #40]	; (800ce0c <lwip_netconn_do_write+0x108>)
 800cde4:	f011 fe4a 	bl	801ea7c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800cde8:	e008      	b.n	800cdfc <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800cdea:	23f5      	movs	r3, #245	; 0xf5
 800cdec:	73fb      	strb	r3, [r7, #15]
 800cdee:	e001      	b.n	800cdf4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800cdf0:	23fa      	movs	r3, #250	; 0xfa
 800cdf2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	7bfa      	ldrb	r2, [r7, #15]
 800cdf8:	711a      	strb	r2, [r3, #4]
 800cdfa:	e000      	b.n	800cdfe <lwip_netconn_do_write+0xfa>
        return;
 800cdfc:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	08022914 	.word	0x08022914
 800ce08:	08022cb8 	.word	0x08022cb8
 800ce0c:	08022958 	.word	0x08022958
 800ce10:	08022e40 	.word	0x08022e40
 800ce14:	08022cd4 	.word	0x08022cd4
 800ce18:	200176d0 	.word	0x200176d0

0800ce1c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d06b      	beq.n	800cf0a <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	7c1b      	ldrb	r3, [r3, #16]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d007      	beq.n	800ce4a <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	685a      	ldr	r2, [r3, #4]
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	6812      	ldr	r2, [r2, #0]
 800ce46:	601a      	str	r2, [r3, #0]
 800ce48:	e006      	b.n	800ce58 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	6852      	ldr	r2, [r2, #4]
 800ce56:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce68:	2b10      	cmp	r3, #16
 800ce6a:	d021      	beq.n	800ceb0 <lwip_netconn_do_getaddr+0x94>
 800ce6c:	2b20      	cmp	r3, #32
 800ce6e:	d144      	bne.n	800cefa <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	7c1b      	ldrb	r3, [r3, #16]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d007      	beq.n	800ce88 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	685a      	ldr	r2, [r3, #4]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	8a52      	ldrh	r2, [r2, #18]
 800ce84:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800ce86:	e044      	b.n	800cf12 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	7c1b      	ldrb	r3, [r3, #16]
 800ce90:	f003 0304 	and.w	r3, r3, #4
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d103      	bne.n	800cea0 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	22f5      	movs	r2, #245	; 0xf5
 800ce9c:	711a      	strb	r2, [r3, #4]
        break;
 800ce9e:	e038      	b.n	800cf12 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	685a      	ldr	r2, [r3, #4]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	8a92      	ldrh	r2, [r2, #20]
 800ceac:	801a      	strh	r2, [r3, #0]
        break;
 800ceae:	e030      	b.n	800cf12 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	7c1b      	ldrb	r3, [r3, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10f      	bne.n	800ced8 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d005      	beq.n	800ced0 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	7d1b      	ldrb	r3, [r3, #20]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d103      	bne.n	800ced8 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	22f5      	movs	r2, #245	; 0xf5
 800ced4:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800ced6:	e01c      	b.n	800cf12 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	7c1b      	ldrb	r3, [r3, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d004      	beq.n	800ceea <lwip_netconn_do_getaddr+0xce>
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	8adb      	ldrh	r3, [r3, #22]
 800cee8:	e003      	b.n	800cef2 <lwip_netconn_do_getaddr+0xd6>
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	8b1b      	ldrh	r3, [r3, #24]
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	68d2      	ldr	r2, [r2, #12]
 800cef6:	8013      	strh	r3, [r2, #0]
        break;
 800cef8:	e00b      	b.n	800cf12 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800cefa:	4b08      	ldr	r3, [pc, #32]	; (800cf1c <lwip_netconn_do_getaddr+0x100>)
 800cefc:	f240 727d 	movw	r2, #1917	; 0x77d
 800cf00:	4907      	ldr	r1, [pc, #28]	; (800cf20 <lwip_netconn_do_getaddr+0x104>)
 800cf02:	4808      	ldr	r0, [pc, #32]	; (800cf24 <lwip_netconn_do_getaddr+0x108>)
 800cf04:	f011 fdba 	bl	801ea7c <iprintf>
        break;
 800cf08:	e003      	b.n	800cf12 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	22f5      	movs	r2, #245	; 0xf5
 800cf0e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cf10:	bf00      	nop
 800cf12:	bf00      	nop
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	08022914 	.word	0x08022914
 800cf20:	08022e54 	.word	0x08022e54
 800cf24:	08022958 	.word	0x08022958

0800cf28 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	785b      	ldrb	r3, [r3, #1]
 800cf3a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d069      	beq.n	800d01a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800cf50:	2b10      	cmp	r3, #16
 800cf52:	d162      	bne.n	800d01a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cf58:	2b03      	cmp	r3, #3
 800cf5a:	d002      	beq.n	800cf62 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800cf5c:	7afb      	ldrb	r3, [r7, #11]
 800cf5e:	2b02      	cmp	r3, #2
 800cf60:	d05b      	beq.n	800d01a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800cf62:	7afb      	ldrb	r3, [r7, #11]
 800cf64:	2b03      	cmp	r3, #3
 800cf66:	d103      	bne.n	800cf70 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	22f5      	movs	r2, #245	; 0xf5
 800cf6c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800cf6e:	e059      	b.n	800d024 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800cf70:	7afb      	ldrb	r3, [r7, #11]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d103      	bne.n	800cf7e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	22fb      	movs	r2, #251	; 0xfb
 800cf7a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800cf7c:	e052      	b.n	800d024 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	7a1b      	ldrb	r3, [r3, #8]
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d004      	beq.n	800cf94 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe ff64 	bl	800be5c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	6a1b      	ldr	r3, [r3, #32]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d006      	beq.n	800cfac <lwip_netconn_do_close+0x84>
 800cf9e:	4b23      	ldr	r3, [pc, #140]	; (800d02c <lwip_netconn_do_close+0x104>)
 800cfa0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800cfa4:	4922      	ldr	r1, [pc, #136]	; (800d030 <lwip_netconn_do_close+0x108>)
 800cfa6:	4823      	ldr	r0, [pc, #140]	; (800d034 <lwip_netconn_do_close+0x10c>)
 800cfa8:	f011 fd68 	bl	801ea7c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2204      	movs	r2, #4
 800cfb2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe ffc8 	bl	800bf58 <lwip_netconn_do_close_internal>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d029      	beq.n	800d022 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	785b      	ldrb	r3, [r3, #1]
 800cfd4:	2b04      	cmp	r3, #4
 800cfd6:	d006      	beq.n	800cfe6 <lwip_netconn_do_close+0xbe>
 800cfd8:	4b14      	ldr	r3, [pc, #80]	; (800d02c <lwip_netconn_do_close+0x104>)
 800cfda:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800cfde:	4916      	ldr	r1, [pc, #88]	; (800d038 <lwip_netconn_do_close+0x110>)
 800cfe0:	4814      	ldr	r0, [pc, #80]	; (800d034 <lwip_netconn_do_close+0x10c>)
 800cfe2:	f011 fd4b 	bl	801ea7c <iprintf>
        UNLOCK_TCPIP_CORE();
 800cfe6:	4815      	ldr	r0, [pc, #84]	; (800d03c <lwip_netconn_do_close+0x114>)
 800cfe8:	f010 fe7f 	bl	801dcea <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	330c      	adds	r3, #12
 800cff2:	2100      	movs	r1, #0
 800cff4:	4618      	mov	r0, r3
 800cff6:	f010 fdd8 	bl	801dbaa <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800cffa:	4810      	ldr	r0, [pc, #64]	; (800d03c <lwip_netconn_do_close+0x114>)
 800cffc:	f010 fe66 	bl	801dccc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	785b      	ldrb	r3, [r3, #1]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00b      	beq.n	800d022 <lwip_netconn_do_close+0xfa>
 800d00a:	4b08      	ldr	r3, [pc, #32]	; (800d02c <lwip_netconn_do_close+0x104>)
 800d00c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800d010:	4909      	ldr	r1, [pc, #36]	; (800d038 <lwip_netconn_do_close+0x110>)
 800d012:	4808      	ldr	r0, [pc, #32]	; (800d034 <lwip_netconn_do_close+0x10c>)
 800d014:	f011 fd32 	bl	801ea7c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800d018:	e003      	b.n	800d022 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	22f5      	movs	r2, #245	; 0xf5
 800d01e:	711a      	strb	r2, [r3, #4]
 800d020:	e000      	b.n	800d024 <lwip_netconn_do_close+0xfc>
      return;
 800d022:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	08022914 	.word	0x08022914
 800d030:	08022cb8 	.word	0x08022cb8
 800d034:	08022958 	.word	0x08022958
 800d038:	08022cd4 	.word	0x08022cd4
 800d03c:	200176d0 	.word	0x200176d0

0800d040 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d104      	bne.n	800d060 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	22fa      	movs	r2, #250	; 0xfa
 800d05c:	701a      	strb	r2, [r3, #0]
 800d05e:	e008      	b.n	800d072 <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	2200      	movs	r2, #0
 800d066:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	6812      	ldr	r2, [r2, #0]
 800d070:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	4618      	mov	r0, r3
 800d078:	f010 fdc8 	bl	801dc0c <sys_sem_signal>
}
 800d07c:	bf00      	nop
 800d07e:	3718      	adds	r7, #24
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 800d084:	b590      	push	{r4, r7, lr}
 800d086:	b087      	sub	sp, #28
 800d088:	af02      	add	r7, sp, #8
 800d08a:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 800d090:	2300      	movs	r3, #0
 800d092:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6818      	ldr	r0, [r3, #0]
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6859      	ldr	r1, [r3, #4]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	68dc      	ldr	r4, [r3, #12]
 800d0a0:	7afb      	ldrb	r3, [r7, #11]
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	4a15      	ldr	r2, [pc, #84]	; (800d0fc <lwip_netconn_do_gethostbyname+0x78>)
 800d0a8:	f003 f83e 	bl	8010128 <dns_gethostbyname_addrtype>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	f993 3000 	ldrsb.w	r3, [r3]
 800d0b8:	f113 0f05 	cmn.w	r3, #5
 800d0bc:	d119      	bne.n	800d0f2 <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 800d0be:	4810      	ldr	r0, [pc, #64]	; (800d100 <lwip_netconn_do_gethostbyname+0x7c>)
 800d0c0:	f010 fe13 	bl	801dcea <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f010 fd6d 	bl	801dbaa <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 800d0d0:	480b      	ldr	r0, [pc, #44]	; (800d100 <lwip_netconn_do_gethostbyname+0x7c>)
 800d0d2:	f010 fdfb 	bl	801dccc <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	f993 3000 	ldrsb.w	r3, [r3]
 800d0de:	f113 0f05 	cmn.w	r3, #5
 800d0e2:	d106      	bne.n	800d0f2 <lwip_netconn_do_gethostbyname+0x6e>
 800d0e4:	4b07      	ldr	r3, [pc, #28]	; (800d104 <lwip_netconn_do_gethostbyname+0x80>)
 800d0e6:	f640 0271 	movw	r2, #2161	; 0x871
 800d0ea:	4907      	ldr	r1, [pc, #28]	; (800d108 <lwip_netconn_do_gethostbyname+0x84>)
 800d0ec:	4807      	ldr	r0, [pc, #28]	; (800d10c <lwip_netconn_do_gethostbyname+0x88>)
 800d0ee:	f011 fcc5 	bl	801ea7c <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d0f2:	bf00      	nop
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd90      	pop	{r4, r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	0800d041 	.word	0x0800d041
 800d100:	200176d0 	.word	0x200176d0
 800d104:	08022914 	.word	0x08022914
 800d108:	08022e6c 	.word	0x08022e6c
 800d10c:	08022958 	.word	0x08022958

0800d110 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	4603      	mov	r3, r0
 800d118:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800d11a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	dc04      	bgt.n	800d12c <err_to_errno+0x1c>
 800d122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d126:	f113 0f10 	cmn.w	r3, #16
 800d12a:	da01      	bge.n	800d130 <err_to_errno+0x20>
    return EIO;
 800d12c:	2305      	movs	r3, #5
 800d12e:	e005      	b.n	800d13c <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800d130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d134:	425b      	negs	r3, r3
 800d136:	4a04      	ldr	r2, [pc, #16]	; (800d148 <err_to_errno+0x38>)
 800d138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	0802650c 	.word	0x0802650c

0800d14c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d013      	beq.n	800d182 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00b      	beq.n	800d17a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4618      	mov	r0, r3
 800d168:	f004 fbe0 	bl	801192c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	605a      	str	r2, [r3, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685a      	ldr	r2, [r3, #4]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800d17a:	6879      	ldr	r1, [r7, #4]
 800d17c:	2006      	movs	r0, #6
 800d17e:	f003 fcf3 	bl	8010b68 <memp_free>
  }
}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
	...

0800d18c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d106      	bne.n	800d1a8 <netbuf_free+0x1c>
 800d19a:	4b0d      	ldr	r3, [pc, #52]	; (800d1d0 <netbuf_free+0x44>)
 800d19c:	2281      	movs	r2, #129	; 0x81
 800d19e:	490d      	ldr	r1, [pc, #52]	; (800d1d4 <netbuf_free+0x48>)
 800d1a0:	480d      	ldr	r0, [pc, #52]	; (800d1d8 <netbuf_free+0x4c>)
 800d1a2:	f011 fc6b 	bl	801ea7c <iprintf>
 800d1a6:	e00f      	b.n	800d1c8 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d004      	beq.n	800d1ba <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f004 fbb9 	bl	801192c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	605a      	str	r2, [r3, #4]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	08022e94 	.word	0x08022e94
 800d1d4:	08022f30 	.word	0x08022f30
 800d1d8:	08022ee4 	.word	0x08022ee4

0800d1dc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d108      	bne.n	800d202 <netbuf_ref+0x26>
 800d1f0:	4b1c      	ldr	r3, [pc, #112]	; (800d264 <netbuf_ref+0x88>)
 800d1f2:	2299      	movs	r2, #153	; 0x99
 800d1f4:	491c      	ldr	r1, [pc, #112]	; (800d268 <netbuf_ref+0x8c>)
 800d1f6:	481d      	ldr	r0, [pc, #116]	; (800d26c <netbuf_ref+0x90>)
 800d1f8:	f011 fc40 	bl	801ea7c <iprintf>
 800d1fc:	f06f 030f 	mvn.w	r3, #15
 800d200:	e02b      	b.n	800d25a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d004      	beq.n	800d214 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4618      	mov	r0, r3
 800d210:	f004 fb8c 	bl	801192c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800d214:	2241      	movs	r2, #65	; 0x41
 800d216:	2100      	movs	r1, #0
 800d218:	2036      	movs	r0, #54	; 0x36
 800d21a:	f004 f871 	bl	8011300 <pbuf_alloc>
 800d21e:	4602      	mov	r2, r0
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d105      	bne.n	800d238 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2200      	movs	r2, #0
 800d230:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800d232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d236:	e010      	b.n	800d25a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	88fa      	ldrh	r2, [r7, #6]
 800d246:	811a      	strh	r2, [r3, #8]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	6812      	ldr	r2, [r2, #0]
 800d24c:	891b      	ldrh	r3, [r3, #8]
 800d24e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	08022e94 	.word	0x08022e94
 800d268:	08022f4c 	.word	0x08022f4c
 800d26c:	08022ee4 	.word	0x08022ee4

0800d270 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent *
lwip_gethostbyname(const char *name)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
 800d278:	f107 0308 	add.w	r3, r7, #8
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7fe f872 	bl	800b368 <netconn_gethostbyname>
 800d284:	4603      	mov	r3, r0
 800d286:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d004      	beq.n	800d29a <lwip_gethostbyname+0x2a>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
 800d290:	4b17      	ldr	r3, [pc, #92]	; (800d2f0 <lwip_gethostbyname+0x80>)
 800d292:	22d2      	movs	r2, #210	; 0xd2
 800d294:	601a      	str	r2, [r3, #0]
    return NULL;
 800d296:	2300      	movs	r3, #0
 800d298:	e025      	b.n	800d2e6 <lwip_gethostbyname+0x76>
  }

  /* fill hostent */
  s_hostent_addr = addr;
 800d29a:	4a16      	ldr	r2, [pc, #88]	; (800d2f4 <lwip_gethostbyname+0x84>)
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	6013      	str	r3, [r2, #0]
  s_phostent_addr[0] = &s_hostent_addr;
 800d2a0:	4b15      	ldr	r3, [pc, #84]	; (800d2f8 <lwip_gethostbyname+0x88>)
 800d2a2:	4a14      	ldr	r2, [pc, #80]	; (800d2f4 <lwip_gethostbyname+0x84>)
 800d2a4:	601a      	str	r2, [r3, #0]
  s_phostent_addr[1] = NULL;
 800d2a6:	4b14      	ldr	r3, [pc, #80]	; (800d2f8 <lwip_gethostbyname+0x88>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	605a      	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
 800d2ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d2b0:	6879      	ldr	r1, [r7, #4]
 800d2b2:	4812      	ldr	r0, [pc, #72]	; (800d2fc <lwip_gethostbyname+0x8c>)
 800d2b4:	f011 fe14 	bl	801eee0 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
 800d2b8:	4b10      	ldr	r3, [pc, #64]	; (800d2fc <lwip_gethostbyname+0x8c>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
 800d2c0:	4b0f      	ldr	r3, [pc, #60]	; (800d300 <lwip_gethostbyname+0x90>)
 800d2c2:	4a0e      	ldr	r2, [pc, #56]	; (800d2fc <lwip_gethostbyname+0x8c>)
 800d2c4:	601a      	str	r2, [r3, #0]
  s_aliases = NULL;
 800d2c6:	4b0f      	ldr	r3, [pc, #60]	; (800d304 <lwip_gethostbyname+0x94>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	601a      	str	r2, [r3, #0]
  s_hostent.h_aliases = &s_aliases;
 800d2cc:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <lwip_gethostbyname+0x90>)
 800d2ce:	4a0d      	ldr	r2, [pc, #52]	; (800d304 <lwip_gethostbyname+0x94>)
 800d2d0:	605a      	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
 800d2d2:	4b0b      	ldr	r3, [pc, #44]	; (800d300 <lwip_gethostbyname+0x90>)
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	609a      	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
 800d2d8:	4b09      	ldr	r3, [pc, #36]	; (800d300 <lwip_gethostbyname+0x90>)
 800d2da:	2204      	movs	r2, #4
 800d2dc:	60da      	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char **)&s_phostent_addr;
 800d2de:	4b08      	ldr	r3, [pc, #32]	; (800d300 <lwip_gethostbyname+0x90>)
 800d2e0:	4a05      	ldr	r2, [pc, #20]	; (800d2f8 <lwip_gethostbyname+0x88>)
 800d2e2:	611a      	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
 800d2e4:	4b06      	ldr	r3, [pc, #24]	; (800d300 <lwip_gethostbyname+0x90>)
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	200176cc 	.word	0x200176cc
 800d2f4:	20013d0c 	.word	0x20013d0c
 800d2f8:	20013d10 	.word	0x20013d10
 800d2fc:	20013d18 	.word	0x20013d18
 800d300:	20013e1c 	.word	0x20013e1c
 800d304:	20013e30 	.word	0x20013e30

0800d308 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2b00      	cmp	r3, #0
 800d318:	db02      	blt.n	800d320 <tryget_socket_unconn_nouse+0x18>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	dd01      	ble.n	800d324 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800d320:	2300      	movs	r3, #0
 800d322:	e003      	b.n	800d32c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	011b      	lsls	r3, r3, #4
 800d328:	4a03      	ldr	r2, [pc, #12]	; (800d338 <tryget_socket_unconn_nouse+0x30>)
 800d32a:	4413      	add	r3, r2
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3714      	adds	r7, #20
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	20013e34 	.word	0x20013e34

0800d33c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff ffdf 	bl	800d308 <tryget_socket_unconn_nouse>
 800d34a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800d34c:	68fb      	ldr	r3, [r7, #12]
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7ff ffd2 	bl	800d308 <tryget_socket_unconn_nouse>
 800d364:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 800d366:	68fb      	ldr	r3, [r7, #12]
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7ff ffdf 	bl	800d33c <tryget_socket_unconn>
 800d37e:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d005      	beq.n	800d392 <tryget_socket+0x22>
    if (sock->conn) {
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d001      	beq.n	800d392 <tryget_socket+0x22>
      return sock;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	e000      	b.n	800d394 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7ff ffe3 	bl	800d370 <tryget_socket>
 800d3aa:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d104      	bne.n	800d3bc <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800d3b2:	4b05      	ldr	r3, [pc, #20]	; (800d3c8 <get_socket+0x2c>)
 800d3b4:	2209      	movs	r2, #9
 800d3b6:	601a      	str	r2, [r3, #0]
    return NULL;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	e000      	b.n	800d3be <get_socket+0x22>
  }
  return sock;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	2001b118 	.word	0x2001b118

0800d3cc <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	60fb      	str	r3, [r7, #12]
 800d3da:	e052      	b.n	800d482 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800d3dc:	f010 fcb0 	bl	801dd40 <sys_arch_protect>
 800d3e0:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800d3e2:	4a2c      	ldr	r2, [pc, #176]	; (800d494 <alloc_socket+0xc8>)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	011b      	lsls	r3, r3, #4
 800d3e8:	4413      	add	r3, r2
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d142      	bne.n	800d476 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800d3f0:	4a28      	ldr	r2, [pc, #160]	; (800d494 <alloc_socket+0xc8>)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	011b      	lsls	r3, r3, #4
 800d3f6:	4413      	add	r3, r2
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800d3fc:	68b8      	ldr	r0, [r7, #8]
 800d3fe:	f010 fcad 	bl	801dd5c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800d402:	4a24      	ldr	r2, [pc, #144]	; (800d494 <alloc_socket+0xc8>)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	011b      	lsls	r3, r3, #4
 800d408:	4413      	add	r3, r2
 800d40a:	3304      	adds	r3, #4
 800d40c:	2200      	movs	r2, #0
 800d40e:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800d410:	4a20      	ldr	r2, [pc, #128]	; (800d494 <alloc_socket+0xc8>)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	4413      	add	r3, r2
 800d418:	330e      	adds	r3, #14
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d006      	beq.n	800d42e <alloc_socket+0x62>
 800d420:	4b1d      	ldr	r3, [pc, #116]	; (800d498 <alloc_socket+0xcc>)
 800d422:	f240 220e 	movw	r2, #526	; 0x20e
 800d426:	491d      	ldr	r1, [pc, #116]	; (800d49c <alloc_socket+0xd0>)
 800d428:	481d      	ldr	r0, [pc, #116]	; (800d4a0 <alloc_socket+0xd4>)
 800d42a:	f011 fb27 	bl	801ea7c <iprintf>
      sockets[i].rcvevent   = 0;
 800d42e:	4a19      	ldr	r2, [pc, #100]	; (800d494 <alloc_socket+0xc8>)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	011b      	lsls	r3, r3, #4
 800d434:	4413      	add	r3, r2
 800d436:	3308      	adds	r3, #8
 800d438:	2200      	movs	r2, #0
 800d43a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d444:	2b10      	cmp	r3, #16
 800d446:	d102      	bne.n	800d44e <alloc_socket+0x82>
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <alloc_socket+0x86>
 800d44e:	2301      	movs	r3, #1
 800d450:	e000      	b.n	800d454 <alloc_socket+0x88>
 800d452:	2300      	movs	r3, #0
 800d454:	b299      	uxth	r1, r3
 800d456:	4a0f      	ldr	r2, [pc, #60]	; (800d494 <alloc_socket+0xc8>)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	011b      	lsls	r3, r3, #4
 800d45c:	4413      	add	r3, r2
 800d45e:	330a      	adds	r3, #10
 800d460:	460a      	mov	r2, r1
 800d462:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800d464:	4a0b      	ldr	r2, [pc, #44]	; (800d494 <alloc_socket+0xc8>)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	011b      	lsls	r3, r3, #4
 800d46a:	4413      	add	r3, r2
 800d46c:	330c      	adds	r3, #12
 800d46e:	2200      	movs	r2, #0
 800d470:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	e00a      	b.n	800d48c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800d476:	68b8      	ldr	r0, [r7, #8]
 800d478:	f010 fc70 	bl	801dd5c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	3301      	adds	r3, #1
 800d480:	60fb      	str	r3, [r7, #12]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2b03      	cmp	r3, #3
 800d486:	dda9      	ble.n	800d3dc <alloc_socket+0x10>
  }
  return -1;
 800d488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	20013e34 	.word	0x20013e34
 800d498:	0802302c 	.word	0x0802302c
 800d49c:	08023060 	.word	0x08023060
 800d4a0:	08023080 	.word	0x08023080

0800d4a4 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	6852      	ldr	r2, [r2, #4]
 800d4b8:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]
  return 1;
 800d4ce:	2301      	movs	r3, #1
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3714      	adds	r7, #20
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00d      	beq.n	800d50c <free_socket_free_elements+0x30>
    if (is_tcp) {
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d005      	beq.n	800d502 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f004 fa16 	bl	801192c <pbuf_free>
 800d500:	e004      	b.n	800d50c <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4618      	mov	r0, r3
 800d508:	f7ff fe20 	bl	800d14c <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d002      	beq.n	800d518 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800d512:	68b8      	ldr	r0, [r7, #8]
 800d514:	f7fd fa1a 	bl	800a94c <netconn_delete>
  }
}
 800d518:	bf00      	nop
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800d52a:	f010 fc09 	bl	801dd40 <sys_arch_protect>
 800d52e:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800d530:	f107 0308 	add.w	r3, r7, #8
 800d534:	f107 020c 	add.w	r2, r7, #12
 800d538:	6839      	ldr	r1, [r7, #0]
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7ff ffb2 	bl	800d4a4 <free_socket_locked>
 800d540:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800d542:	6978      	ldr	r0, [r7, #20]
 800d544:	f010 fc0a 	bl	801dd5c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d006      	beq.n	800d55c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f107 0208 	add.w	r2, r7, #8
 800d554:	4619      	mov	r1, r3
 800d556:	6838      	ldr	r0, [r7, #0]
 800d558:	f7ff ffc0 	bl	800d4dc <free_socket_free_elements>
  }
}
 800d55c:	bf00      	nop
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800d564:	b590      	push	{r4, r7, lr}
 800d566:	b099      	sub	sp, #100	; 0x64
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7ff ff11 	bl	800d39c <get_socket>
 800d57a:	65f8      	str	r0, [r7, #92]	; 0x5c
  if (!sock) {
 800d57c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d102      	bne.n	800d588 <lwip_accept+0x24>
    return -1;
 800d582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d586:	e0f9      	b.n	800d77c <lwip_accept+0x218>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800d588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d590:	4611      	mov	r1, r2
 800d592:	4618      	mov	r0, r3
 800d594:	f7fd fb0e 	bl	800abb4 <netconn_accept>
 800d598:	4603      	mov	r3, r0
 800d59a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800d59e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d02c      	beq.n	800d600 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800d5a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5b0:	2b10      	cmp	r3, #16
 800d5b2:	d008      	beq.n	800d5c6 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800d5b4:	235f      	movs	r3, #95	; 0x5f
 800d5b6:	633b      	str	r3, [r7, #48]	; 0x30
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d01d      	beq.n	800d5fa <lwip_accept+0x96>
 800d5be:	4a71      	ldr	r2, [pc, #452]	; (800d784 <lwip_accept+0x220>)
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c2:	6013      	str	r3, [r2, #0]
 800d5c4:	e019      	b.n	800d5fa <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800d5c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d5ca:	f113 0f0f 	cmn.w	r3, #15
 800d5ce:	d108      	bne.n	800d5e2 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800d5d0:	2316      	movs	r3, #22
 800d5d2:	637b      	str	r3, [r7, #52]	; 0x34
 800d5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00f      	beq.n	800d5fa <lwip_accept+0x96>
 800d5da:	4a6a      	ldr	r2, [pc, #424]	; (800d784 <lwip_accept+0x220>)
 800d5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5de:	6013      	str	r3, [r2, #0]
 800d5e0:	e00b      	b.n	800d5fa <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800d5e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff fd92 	bl	800d110 <err_to_errno>
 800d5ec:	63b8      	str	r0, [r7, #56]	; 0x38
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <lwip_accept+0x96>
 800d5f4:	4a63      	ldr	r2, [pc, #396]	; (800d784 <lwip_accept+0x220>)
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f8:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800d5fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5fe:	e0bd      	b.n	800d77c <lwip_accept+0x218>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800d600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d602:	2b00      	cmp	r3, #0
 800d604:	d106      	bne.n	800d614 <lwip_accept+0xb0>
 800d606:	4b60      	ldr	r3, [pc, #384]	; (800d788 <lwip_accept+0x224>)
 800d608:	f240 228b 	movw	r2, #651	; 0x28b
 800d60c:	495f      	ldr	r1, [pc, #380]	; (800d78c <lwip_accept+0x228>)
 800d60e:	4860      	ldr	r0, [pc, #384]	; (800d790 <lwip_accept+0x22c>)
 800d610:	f011 fa34 	bl	801ea7c <iprintf>

  newsock = alloc_socket(newconn, 1);
 800d614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d616:	2101      	movs	r1, #1
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff fed7 	bl	800d3cc <alloc_socket>
 800d61e:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800d620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d626:	d10e      	bne.n	800d646 <lwip_accept+0xe2>
    netconn_delete(newconn);
 800d628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fd f98e 	bl	800a94c <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800d630:	2317      	movs	r3, #23
 800d632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d636:	2b00      	cmp	r3, #0
 800d638:	d002      	beq.n	800d640 <lwip_accept+0xdc>
 800d63a:	4a52      	ldr	r2, [pc, #328]	; (800d784 <lwip_accept+0x220>)
 800d63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d644:	e09a      	b.n	800d77c <lwip_accept+0x218>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800d646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d648:	2b00      	cmp	r3, #0
 800d64a:	db02      	blt.n	800d652 <lwip_accept+0xee>
 800d64c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d64e:	2b03      	cmp	r3, #3
 800d650:	dd06      	ble.n	800d660 <lwip_accept+0xfc>
 800d652:	4b4d      	ldr	r3, [pc, #308]	; (800d788 <lwip_accept+0x224>)
 800d654:	f44f 7225 	mov.w	r2, #660	; 0x294
 800d658:	494e      	ldr	r1, [pc, #312]	; (800d794 <lwip_accept+0x230>)
 800d65a:	484d      	ldr	r0, [pc, #308]	; (800d790 <lwip_accept+0x22c>)
 800d65c:	f011 fa0e 	bl	801ea7c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800d660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d662:	011b      	lsls	r3, r3, #4
 800d664:	4a4c      	ldr	r2, [pc, #304]	; (800d798 <lwip_accept+0x234>)
 800d666:	4413      	add	r3, r2
 800d668:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800d66a:	f010 fb69 	bl	801dd40 <sys_arch_protect>
 800d66e:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800d670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d672:	699b      	ldr	r3, [r3, #24]
 800d674:	b21b      	sxth	r3, r3
 800d676:	43db      	mvns	r3, r3
 800d678:	b21b      	sxth	r3, r3
 800d67a:	65bb      	str	r3, [r7, #88]	; 0x58
  newconn->socket = newsock;
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d680:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800d682:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d684:	f010 fb6a 	bl	801dd5c <sys_arch_unprotect>

  if (newconn->callback) {
 800d688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d012      	beq.n	800d6b6 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800d690:	4842      	ldr	r0, [pc, #264]	; (800d79c <lwip_accept+0x238>)
 800d692:	f010 fb1b 	bl	801dccc <sys_mutex_lock>
    while (recvevent > 0) {
 800d696:	e008      	b.n	800d6aa <lwip_accept+0x146>
      recvevent--;
 800d698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d69a:	3b01      	subs	r3, #1
 800d69c:	65bb      	str	r3, [r7, #88]	; 0x58
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800d69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4798      	blx	r3
    while (recvevent > 0) {
 800d6aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	dcf3      	bgt.n	800d698 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800d6b0:	483a      	ldr	r0, [pc, #232]	; (800d79c <lwip_accept+0x238>)
 800d6b2:	f010 fb1a 	bl	801dcea <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d056      	beq.n	800d76a <lwip_accept+0x206>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d053      	beq.n	800d76a <lwip_accept+0x206>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800d6c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6c4:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800d6c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f7fd f959 	bl	800a984 <netconn_getaddr>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800d6d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d016      	beq.n	800d70e <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800d6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fd f932 	bl	800a94c <netconn_delete>
      free_socket(nsock, 1);
 800d6e8:	2101      	movs	r1, #1
 800d6ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d6ec:	f7ff ff18 	bl	800d520 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800d6f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7ff fd0b 	bl	800d110 <err_to_errno>
 800d6fa:	6478      	str	r0, [r7, #68]	; 0x44
 800d6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <lwip_accept+0x1a4>
 800d702:	4a20      	ldr	r2, [pc, #128]	; (800d784 <lwip_accept+0x220>)
 800d704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d706:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800d708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d70c:	e036      	b.n	800d77c <lwip_accept+0x218>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800d70e:	f107 0314 	add.w	r3, r7, #20
 800d712:	2210      	movs	r2, #16
 800d714:	701a      	strb	r2, [r3, #0]
 800d716:	f107 0314 	add.w	r3, r7, #20
 800d71a:	2202      	movs	r2, #2
 800d71c:	705a      	strb	r2, [r3, #1]
 800d71e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d720:	f107 0414 	add.w	r4, r7, #20
 800d724:	4618      	mov	r0, r3
 800d726:	f001 fd41 	bl	800f1ac <lwip_htons>
 800d72a:	4603      	mov	r3, r0
 800d72c:	8063      	strh	r3, [r4, #2]
 800d72e:	f107 0314 	add.w	r3, r7, #20
 800d732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d734:	605a      	str	r2, [r3, #4]
 800d736:	f107 0314 	add.w	r3, r7, #20
 800d73a:	3308      	adds	r3, #8
 800d73c:	2208      	movs	r2, #8
 800d73e:	2100      	movs	r1, #0
 800d740:	4618      	mov	r0, r3
 800d742:	f010 fc7f 	bl	801e044 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	7d3a      	ldrb	r2, [r7, #20]
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d903      	bls.n	800d758 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800d750:	7d3b      	ldrb	r3, [r7, #20]
 800d752:	461a      	mov	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	f107 0314 	add.w	r3, r7, #20
 800d760:	4619      	mov	r1, r3
 800d762:	68b8      	ldr	r0, [r7, #8]
 800d764:	f010 fc46 	bl	801dff4 <memcpy>
  if ((addr != NULL) && (addrlen != NULL)) {
 800d768:	bf00      	nop
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800d76a:	2300      	movs	r3, #0
 800d76c:	643b      	str	r3, [r7, #64]	; 0x40
 800d76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d770:	2b00      	cmp	r3, #0
 800d772:	d002      	beq.n	800d77a <lwip_accept+0x216>
 800d774:	4a03      	ldr	r2, [pc, #12]	; (800d784 <lwip_accept+0x220>)
 800d776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d778:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800d77a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3764      	adds	r7, #100	; 0x64
 800d780:	46bd      	mov	sp, r7
 800d782:	bd90      	pop	{r4, r7, pc}
 800d784:	2001b118 	.word	0x2001b118
 800d788:	0802302c 	.word	0x0802302c
 800d78c:	080230a8 	.word	0x080230a8
 800d790:	08023080 	.word	0x08023080
 800d794:	080230b8 	.word	0x080230b8
 800d798:	20013e34 	.word	0x20013e34
 800d79c:	200176d0 	.word	0x200176d0

0800d7a0 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b08a      	sub	sp, #40	; 0x28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f7ff fdf5 	bl	800d39c <get_socket>
 800d7b2:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d102      	bne.n	800d7c0 <lwip_bind+0x20>
    return -1;
 800d7ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7be:	e051      	b.n	800d864 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b10      	cmp	r3, #16
 800d7c4:	d108      	bne.n	800d7d8 <lwip_bind+0x38>
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	785b      	ldrb	r3, [r3, #1]
 800d7ca:	2b02      	cmp	r3, #2
 800d7cc:	d104      	bne.n	800d7d8 <lwip_bind+0x38>
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	f003 0303 	and.w	r3, r3, #3
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d014      	beq.n	800d802 <lwip_bind+0x62>
 800d7d8:	4b24      	ldr	r3, [pc, #144]	; (800d86c <lwip_bind+0xcc>)
 800d7da:	f240 22e2 	movw	r2, #738	; 0x2e2
 800d7de:	4924      	ldr	r1, [pc, #144]	; (800d870 <lwip_bind+0xd0>)
 800d7e0:	4824      	ldr	r0, [pc, #144]	; (800d874 <lwip_bind+0xd4>)
 800d7e2:	f011 f94b 	bl	801ea7c <iprintf>
 800d7e6:	f06f 000f 	mvn.w	r0, #15
 800d7ea:	f7ff fc91 	bl	800d110 <err_to_errno>
 800d7ee:	6178      	str	r0, [r7, #20]
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d002      	beq.n	800d7fc <lwip_bind+0x5c>
 800d7f6:	4a20      	ldr	r2, [pc, #128]	; (800d878 <lwip_bind+0xd8>)
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	6013      	str	r3, [r2, #0]
 800d7fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d800:	e030      	b.n	800d864 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	613b      	str	r3, [r7, #16]
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	885b      	ldrh	r3, [r3, #2]
 800d80c:	4618      	mov	r0, r3
 800d80e:	f001 fccd 	bl	800f1ac <lwip_htons>
 800d812:	4603      	mov	r3, r0
 800d814:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800d816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d81c:	f107 0110 	add.w	r1, r7, #16
 800d820:	4618      	mov	r0, r3
 800d822:	f7fd f901 	bl	800aa28 <netconn_bind>
 800d826:	4603      	mov	r3, r0
 800d828:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800d82c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d830:	2b00      	cmp	r3, #0
 800d832:	d00e      	beq.n	800d852 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800d834:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d838:	4618      	mov	r0, r3
 800d83a:	f7ff fc69 	bl	800d110 <err_to_errno>
 800d83e:	61b8      	str	r0, [r7, #24]
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d002      	beq.n	800d84c <lwip_bind+0xac>
 800d846:	4a0c      	ldr	r2, [pc, #48]	; (800d878 <lwip_bind+0xd8>)
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d84c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d850:	e008      	b.n	800d864 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800d852:	2300      	movs	r3, #0
 800d854:	61fb      	str	r3, [r7, #28]
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d002      	beq.n	800d862 <lwip_bind+0xc2>
 800d85c:	4a06      	ldr	r2, [pc, #24]	; (800d878 <lwip_bind+0xd8>)
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3728      	adds	r7, #40	; 0x28
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	0802302c 	.word	0x0802302c
 800d870:	080230d0 	.word	0x080230d0
 800d874:	08023080 	.word	0x08023080
 800d878:	2001b118 	.word	0x2001b118

0800d87c <lwip_close>:

int
lwip_close(int s)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800d884:	2300      	movs	r3, #0
 800d886:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7ff fd87 	bl	800d39c <get_socket>
 800d88e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d102      	bne.n	800d89c <lwip_close+0x20>
    return -1;
 800d896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d89a:	e039      	b.n	800d910 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00b      	beq.n	800d8bc <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8ae:	2b10      	cmp	r3, #16
 800d8b0:	bf0c      	ite	eq
 800d8b2:	2301      	moveq	r3, #1
 800d8b4:	2300      	movne	r3, #0
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	617b      	str	r3, [r7, #20]
 800d8ba:	e00a      	b.n	800d8d2 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d006      	beq.n	800d8d2 <lwip_close+0x56>
 800d8c4:	4b14      	ldr	r3, [pc, #80]	; (800d918 <lwip_close+0x9c>)
 800d8c6:	f44f 7245 	mov.w	r2, #788	; 0x314
 800d8ca:	4914      	ldr	r1, [pc, #80]	; (800d91c <lwip_close+0xa0>)
 800d8cc:	4814      	ldr	r0, [pc, #80]	; (800d920 <lwip_close+0xa4>)
 800d8ce:	f011 f8d5 	bl	801ea7c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fd f814 	bl	800a904 <netconn_prepare_delete>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d8e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00e      	beq.n	800d906 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800d8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7ff fc0f 	bl	800d110 <err_to_errno>
 800d8f2:	60b8      	str	r0, [r7, #8]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d002      	beq.n	800d900 <lwip_close+0x84>
 800d8fa:	4a0a      	ldr	r2, [pc, #40]	; (800d924 <lwip_close+0xa8>)
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d904:	e004      	b.n	800d910 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800d906:	6979      	ldr	r1, [r7, #20]
 800d908:	6938      	ldr	r0, [r7, #16]
 800d90a:	f7ff fe09 	bl	800d520 <free_socket>
  set_errno(0);
  return 0;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	0802302c 	.word	0x0802302c
 800d91c:	080230ec 	.word	0x080230ec
 800d920:	08023080 	.word	0x08023080
 800d924:	2001b118 	.word	0x2001b118

0800d928 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b08a      	sub	sp, #40	; 0x28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f7ff fd31 	bl	800d39c <get_socket>
 800d93a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d102      	bne.n	800d948 <lwip_connect+0x20>
    return -1;
 800d942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d946:	e062      	b.n	800da0e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	785b      	ldrb	r3, [r3, #1]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d108      	bne.n	800d962 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800d950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4618      	mov	r0, r3
 800d956:	f7fd f8d7 	bl	800ab08 <netconn_disconnect>
 800d95a:	4603      	mov	r3, r0
 800d95c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800d960:	e039      	b.n	800d9d6 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b10      	cmp	r3, #16
 800d966:	d10c      	bne.n	800d982 <lwip_connect+0x5a>
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	785b      	ldrb	r3, [r3, #1]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d003      	beq.n	800d978 <lwip_connect+0x50>
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	785b      	ldrb	r3, [r3, #1]
 800d974:	2b02      	cmp	r3, #2
 800d976:	d104      	bne.n	800d982 <lwip_connect+0x5a>
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	f003 0303 	and.w	r3, r3, #3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d014      	beq.n	800d9ac <lwip_connect+0x84>
 800d982:	4b25      	ldr	r3, [pc, #148]	; (800da18 <lwip_connect+0xf0>)
 800d984:	f240 3247 	movw	r2, #839	; 0x347
 800d988:	4924      	ldr	r1, [pc, #144]	; (800da1c <lwip_connect+0xf4>)
 800d98a:	4825      	ldr	r0, [pc, #148]	; (800da20 <lwip_connect+0xf8>)
 800d98c:	f011 f876 	bl	801ea7c <iprintf>
 800d990:	f06f 000f 	mvn.w	r0, #15
 800d994:	f7ff fbbc 	bl	800d110 <err_to_errno>
 800d998:	61f8      	str	r0, [r7, #28]
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d002      	beq.n	800d9a6 <lwip_connect+0x7e>
 800d9a0:	4a20      	ldr	r2, [pc, #128]	; (800da24 <lwip_connect+0xfc>)
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9aa:	e030      	b.n	800da0e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	613b      	str	r3, [r7, #16]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	885b      	ldrh	r3, [r3, #2]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f001 fbf8 	bl	800f1ac <lwip_htons>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	847b      	strh	r3, [r7, #34]	; 0x22
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d9c6:	f107 0110 	add.w	r1, r7, #16
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fd f864 	bl	800aa98 <netconn_connect>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  if (err != ERR_OK) {
 800d9d6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00e      	beq.n	800d9fc <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800d9de:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff fb94 	bl	800d110 <err_to_errno>
 800d9e8:	6178      	str	r0, [r7, #20]
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <lwip_connect+0xce>
 800d9f0:	4a0c      	ldr	r2, [pc, #48]	; (800da24 <lwip_connect+0xfc>)
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9fa:	e008      	b.n	800da0e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	61bb      	str	r3, [r7, #24]
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d002      	beq.n	800da0c <lwip_connect+0xe4>
 800da06:	4a07      	ldr	r2, [pc, #28]	; (800da24 <lwip_connect+0xfc>)
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800da0c:	2300      	movs	r3, #0
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3728      	adds	r7, #40	; 0x28
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	0802302c 	.word	0x0802302c
 800da1c:	08023104 	.word	0x08023104
 800da20:	08023080 	.word	0x08023080
 800da24:	2001b118 	.word	0x2001b118

0800da28 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f7ff fcb2 	bl	800d39c <get_socket>
 800da38:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d102      	bne.n	800da46 <lwip_listen+0x1e>
    return -1;
 800da40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da44:	e03e      	b.n	800dac4 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2bfe      	cmp	r3, #254	; 0xfe
 800da4a:	dc03      	bgt.n	800da54 <lwip_listen+0x2c>
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800da52:	e000      	b.n	800da56 <lwip_listen+0x2e>
 800da54:	23ff      	movs	r3, #255	; 0xff
 800da56:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	b2d2      	uxtb	r2, r2
 800da60:	4611      	mov	r1, r2
 800da62:	4618      	mov	r0, r3
 800da64:	f7fd f87a 	bl	800ab5c <netconn_listen_with_backlog>
 800da68:	4603      	mov	r3, r0
 800da6a:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800da6c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d01e      	beq.n	800dab2 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da7e:	2b10      	cmp	r3, #16
 800da80:	d008      	beq.n	800da94 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800da82:	235f      	movs	r3, #95	; 0x5f
 800da84:	60fb      	str	r3, [r7, #12]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00f      	beq.n	800daac <lwip_listen+0x84>
 800da8c:	4a0f      	ldr	r2, [pc, #60]	; (800dacc <lwip_listen+0xa4>)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6013      	str	r3, [r2, #0]
 800da92:	e00b      	b.n	800daac <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800da94:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800da98:	4618      	mov	r0, r3
 800da9a:	f7ff fb39 	bl	800d110 <err_to_errno>
 800da9e:	6138      	str	r0, [r7, #16]
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <lwip_listen+0x84>
 800daa6:	4a09      	ldr	r2, [pc, #36]	; (800dacc <lwip_listen+0xa4>)
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800daac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dab0:	e008      	b.n	800dac4 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800dab2:	2300      	movs	r3, #0
 800dab4:	617b      	str	r3, [r7, #20]
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <lwip_listen+0x9a>
 800dabc:	4a03      	ldr	r2, [pc, #12]	; (800dacc <lwip_listen+0xa4>)
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3720      	adds	r7, #32
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	2001b118 	.word	0x2001b118

0800dad0 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b08c      	sub	sp, #48	; 0x30
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
 800dadc:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800dade:	2308      	movs	r3, #8
 800dae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  ssize_t recvd = 0;
 800dae4:	2300      	movs	r3, #0
 800dae6:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	db01      	blt.n	800daf2 <lwip_recv_tcp+0x22>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	e001      	b.n	800daf6 <lwip_recv_tcp+0x26>
 800daf2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800daf6:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <lwip_recv_tcp+0x3c>
 800dafe:	4b74      	ldr	r3, [pc, #464]	; (800dcd0 <lwip_recv_tcp+0x200>)
 800db00:	f240 329e 	movw	r2, #926	; 0x39e
 800db04:	4973      	ldr	r1, [pc, #460]	; (800dcd4 <lwip_recv_tcp+0x204>)
 800db06:	4874      	ldr	r0, [pc, #464]	; (800dcd8 <lwip_recv_tcp+0x208>)
 800db08:	f010 ffb8 	bl	801ea7c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db16:	2b10      	cmp	r3, #16
 800db18:	d006      	beq.n	800db28 <lwip_recv_tcp+0x58>
 800db1a:	4b6d      	ldr	r3, [pc, #436]	; (800dcd0 <lwip_recv_tcp+0x200>)
 800db1c:	f240 329f 	movw	r2, #927	; 0x39f
 800db20:	496e      	ldr	r1, [pc, #440]	; (800dcdc <lwip_recv_tcp+0x20c>)
 800db22:	486d      	ldr	r0, [pc, #436]	; (800dcd8 <lwip_recv_tcp+0x208>)
 800db24:	f010 ffaa 	bl	801ea7c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	f003 0308 	and.w	r3, r3, #8
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d005      	beq.n	800db3e <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800db32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db36:	f043 0304 	orr.w	r3, r3, #4
 800db3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d003      	beq.n	800db4e <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	617b      	str	r3, [r7, #20]
 800db4c:	e036      	b.n	800dbbc <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800db56:	f107 0114 	add.w	r1, r7, #20
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fd fa60 	bl	800b020 <netconn_recv_tcp_pbuf_flags>
 800db60:	4603      	mov	r3, r0
 800db62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800db66:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d019      	beq.n	800dba2 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800db6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db70:	2b00      	cmp	r3, #0
 800db72:	f300 808d 	bgt.w	800dc90 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800db76:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7ff fac8 	bl	800d110 <err_to_errno>
 800db80:	61f8      	str	r0, [r7, #28]
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d002      	beq.n	800db8e <lwip_recv_tcp+0xbe>
 800db88:	4a55      	ldr	r2, [pc, #340]	; (800dce0 <lwip_recv_tcp+0x210>)
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800db8e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800db92:	f113 0f0f 	cmn.w	r3, #15
 800db96:	d101      	bne.n	800db9c <lwip_recv_tcp+0xcc>
          return 0;
 800db98:	2300      	movs	r3, #0
 800db9a:	e094      	b.n	800dcc6 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800db9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dba0:	e091      	b.n	800dcc6 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d106      	bne.n	800dbb6 <lwip_recv_tcp+0xe6>
 800dba8:	4b49      	ldr	r3, [pc, #292]	; (800dcd0 <lwip_recv_tcp+0x200>)
 800dbaa:	f240 32c5 	movw	r2, #965	; 0x3c5
 800dbae:	494d      	ldr	r1, [pc, #308]	; (800dce4 <lwip_recv_tcp+0x214>)
 800dbb0:	4849      	ldr	r0, [pc, #292]	; (800dcd8 <lwip_recv_tcp+0x208>)
 800dbb2:	f010 ff63 	bl	801ea7c <iprintf>
      sock->lastdata.pbuf = p;
 800dbb6:	697a      	ldr	r2, [r7, #20]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	891b      	ldrh	r3, [r3, #8]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	dd03      	ble.n	800dbd0 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	891b      	ldrh	r3, [r3, #8]
 800dbcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dbce:	e001      	b.n	800dbd4 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if (recvd + copylen < recvd) {
 800dbd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd8:	4413      	add	r3, r2
 800dbda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	dd03      	ble.n	800dbe8 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800dbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	43db      	mvns	r3, r3
 800dbe6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800dbe8:	6978      	ldr	r0, [r7, #20]
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	18d1      	adds	r1, r2, r3
 800dbf0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	f004 f8a0 	bl	8011d38 <pbuf_copy_partial>

    recvd += copylen;
 800dbf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbfc:	4413      	add	r3, r2
 800dbfe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800dc00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc04:	429a      	cmp	r2, r3
 800dc06:	da06      	bge.n	800dc16 <lwip_recv_tcp+0x146>
 800dc08:	4b31      	ldr	r3, [pc, #196]	; (800dcd0 <lwip_recv_tcp+0x200>)
 800dc0a:	f240 32dd 	movw	r2, #989	; 0x3dd
 800dc0e:	4936      	ldr	r1, [pc, #216]	; (800dce8 <lwip_recv_tcp+0x218>)
 800dc10:	4831      	ldr	r0, [pc, #196]	; (800dcd8 <lwip_recv_tcp+0x208>)
 800dc12:	f010 ff33 	bl	801ea7c <iprintf>
    recv_left -= copylen;
 800dc16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc1a:	1ad3      	subs	r3, r2, r3
 800dc1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d123      	bne.n	800dc70 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	891b      	ldrh	r3, [r3, #8]
 800dc2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d906      	bls.n	800dc40 <lwip_recv_tcp+0x170>
 800dc32:	4b27      	ldr	r3, [pc, #156]	; (800dcd0 <lwip_recv_tcp+0x200>)
 800dc34:	f240 32e3 	movw	r2, #995	; 0x3e3
 800dc38:	492c      	ldr	r1, [pc, #176]	; (800dcec <lwip_recv_tcp+0x21c>)
 800dc3a:	4827      	ldr	r0, [pc, #156]	; (800dcd8 <lwip_recv_tcp+0x208>)
 800dc3c:	f010 ff1e 	bl	801ea7c <iprintf>
      if (p->tot_len - copylen > 0) {
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	891b      	ldrh	r3, [r3, #8]
 800dc44:	461a      	mov	r2, r3
 800dc46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc48:	1ad3      	subs	r3, r2, r3
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	dd09      	ble.n	800dc62 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc52:	4611      	mov	r1, r2
 800dc54:	4618      	mov	r0, r3
 800dc56:	f003 fe36 	bl	80118c6 <pbuf_free_header>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	605a      	str	r2, [r3, #4]
 800dc60:	e006      	b.n	800dc70 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2200      	movs	r2, #0
 800dc66:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f003 fe5e 	bl	801192c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800dc70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc74:	f043 0314 	orr.w	r3, r3, #20
 800dc78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	dd08      	ble.n	800dc94 <lwip_recv_tcp+0x1c4>
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	f003 0301 	and.w	r3, r3, #1
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f43f af58 	beq.w	800db3e <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800dc8e:	e001      	b.n	800dc94 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800dc90:	bf00      	nop
 800dc92:	e000      	b.n	800dc96 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800dc94:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dd0b      	ble.n	800dcb4 <lwip_recv_tcp+0x1e4>
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	f003 0301 	and.w	r3, r3, #1
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d106      	bne.n	800dcb4 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcac:	4611      	mov	r1, r2
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7fd f904 	bl	800aebc <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	61bb      	str	r3, [r7, #24]
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d002      	beq.n	800dcc4 <lwip_recv_tcp+0x1f4>
 800dcbe:	4a08      	ldr	r2, [pc, #32]	; (800dce0 <lwip_recv_tcp+0x210>)
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	6013      	str	r3, [r2, #0]
  return recvd;
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3730      	adds	r7, #48	; 0x30
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	0802302c 	.word	0x0802302c
 800dcd4:	08023124 	.word	0x08023124
 800dcd8:	08023080 	.word	0x08023080
 800dcdc:	08023134 	.word	0x08023134
 800dce0:	2001b118 	.word	0x2001b118
 800dce4:	08023158 	.word	0x08023158
 800dce8:	08023164 	.word	0x08023164
 800dcec:	0802318c 	.word	0x0802318c

0800dcf0 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800dcf0:	b590      	push	{r4, r7, lr}
 800dcf2:	b08b      	sub	sp, #44	; 0x2c
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	603b      	str	r3, [r7, #0]
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800dd00:	2300      	movs	r3, #0
 800dd02:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d106      	bne.n	800dd18 <lwip_sock_make_addr+0x28>
 800dd0a:	4b2b      	ldr	r3, [pc, #172]	; (800ddb8 <lwip_sock_make_addr+0xc8>)
 800dd0c:	f240 4207 	movw	r2, #1031	; 0x407
 800dd10:	492a      	ldr	r1, [pc, #168]	; (800ddbc <lwip_sock_make_addr+0xcc>)
 800dd12:	482b      	ldr	r0, [pc, #172]	; (800ddc0 <lwip_sock_make_addr+0xd0>)
 800dd14:	f010 feb2 	bl	801ea7c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d106      	bne.n	800dd2c <lwip_sock_make_addr+0x3c>
 800dd1e:	4b26      	ldr	r3, [pc, #152]	; (800ddb8 <lwip_sock_make_addr+0xc8>)
 800dd20:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800dd24:	4927      	ldr	r1, [pc, #156]	; (800ddc4 <lwip_sock_make_addr+0xd4>)
 800dd26:	4826      	ldr	r0, [pc, #152]	; (800ddc0 <lwip_sock_make_addr+0xd0>)
 800dd28:	f010 fea8 	bl	801ea7c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800dd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d106      	bne.n	800dd40 <lwip_sock_make_addr+0x50>
 800dd32:	4b21      	ldr	r3, [pc, #132]	; (800ddb8 <lwip_sock_make_addr+0xc8>)
 800dd34:	f240 4209 	movw	r2, #1033	; 0x409
 800dd38:	4923      	ldr	r1, [pc, #140]	; (800ddc8 <lwip_sock_make_addr+0xd8>)
 800dd3a:	4821      	ldr	r0, [pc, #132]	; (800ddc0 <lwip_sock_make_addr+0xd0>)
 800dd3c:	f010 fe9e 	bl	801ea7c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800dd40:	f107 0314 	add.w	r3, r7, #20
 800dd44:	2210      	movs	r2, #16
 800dd46:	701a      	strb	r2, [r3, #0]
 800dd48:	f107 0314 	add.w	r3, r7, #20
 800dd4c:	2202      	movs	r2, #2
 800dd4e:	705a      	strb	r2, [r3, #1]
 800dd50:	f107 0414 	add.w	r4, r7, #20
 800dd54:	88fb      	ldrh	r3, [r7, #6]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f001 fa28 	bl	800f1ac <lwip_htons>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	8063      	strh	r3, [r4, #2]
 800dd60:	f107 0314 	add.w	r3, r7, #20
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	6812      	ldr	r2, [r2, #0]
 800dd68:	605a      	str	r2, [r3, #4]
 800dd6a:	f107 0314 	add.w	r3, r7, #20
 800dd6e:	3308      	adds	r3, #8
 800dd70:	2208      	movs	r2, #8
 800dd72:	2100      	movs	r1, #0
 800dd74:	4618      	mov	r0, r3
 800dd76:	f010 f965 	bl	801e044 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	7d3a      	ldrb	r2, [r7, #20]
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d202      	bcs.n	800dd8a <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800dd84:	2301      	movs	r3, #1
 800dd86:	627b      	str	r3, [r7, #36]	; 0x24
 800dd88:	e008      	b.n	800dd9c <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800dd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	7d3a      	ldrb	r2, [r7, #20]
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d903      	bls.n	800dd9c <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800dd94:	7d3b      	ldrb	r3, [r7, #20]
 800dd96:	461a      	mov	r2, r3
 800dd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9a:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	f107 0314 	add.w	r3, r7, #20
 800dda4:	4619      	mov	r1, r3
 800dda6:	6838      	ldr	r0, [r7, #0]
 800dda8:	f010 f924 	bl	801dff4 <memcpy>
  return truncated;
 800ddac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	372c      	adds	r7, #44	; 0x2c
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd90      	pop	{r4, r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	0802302c 	.word	0x0802302c
 800ddbc:	0802319c 	.word	0x0802319c
 800ddc0:	08023080 	.word	0x08023080
 800ddc4:	080231b0 	.word	0x080231b0
 800ddc8:	080231c0 	.word	0x080231c0

0800ddcc <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b088      	sub	sp, #32
 800ddd0:	af02      	add	r7, sp, #8
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
 800ddd8:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <lwip_recv_tcp_from+0x18>
    return 0;
 800dde0:	2300      	movs	r3, #0
 800dde2:	e021      	b.n	800de28 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d01d      	beq.n	800de26 <lwip_recv_tcp_from+0x5a>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d01a      	beq.n	800de26 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6818      	ldr	r0, [r3, #0]
 800ddf4:	f107 0216 	add.w	r2, r7, #22
 800ddf8:	f107 0110 	add.w	r1, r7, #16
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	f7fc fdc1 	bl	800a984 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00e      	beq.n	800de26 <lwip_recv_tcp_from+0x5a>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00b      	beq.n	800de26 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6818      	ldr	r0, [r3, #0]
 800de12:	8afa      	ldrh	r2, [r7, #22]
 800de14:	f107 0110 	add.w	r1, r7, #16
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	f7ff ff67 	bl	800dcf0 <lwip_sock_make_addr>
 800de22:	4603      	mov	r3, r0
 800de24:	e000      	b.n	800de28 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800de26:	2300      	movs	r3, #0
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800de30:	b590      	push	{r4, r7, lr}
 800de32:	b08d      	sub	sp, #52	; 0x34
 800de34:	af02      	add	r7, sp, #8
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d10d      	bne.n	800de62 <lwip_recvfrom_udp_raw+0x32>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	dd09      	ble.n	800de62 <lwip_recvfrom_udp_raw+0x32>
 800de4e:	4b5e      	ldr	r3, [pc, #376]	; (800dfc8 <lwip_recvfrom_udp_raw+0x198>)
 800de50:	f240 4249 	movw	r2, #1097	; 0x449
 800de54:	495d      	ldr	r1, [pc, #372]	; (800dfcc <lwip_recvfrom_udp_raw+0x19c>)
 800de56:	485e      	ldr	r0, [pc, #376]	; (800dfd0 <lwip_recvfrom_udp_raw+0x1a0>)
 800de58:	f010 fe10 	bl	801ea7c <iprintf>
 800de5c:	f06f 030f 	mvn.w	r3, #15
 800de60:	e0ae      	b.n	800dfc0 <lwip_recvfrom_udp_raw+0x190>

  if (flags & MSG_DONTWAIT) {
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	f003 0308 	and.w	r3, r3, #8
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d003      	beq.n	800de74 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800de6c:	2304      	movs	r3, #4
 800de6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de72:	e002      	b.n	800de7a <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800de74:	2300      	movs	r3, #0
 800de76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d11f      	bne.n	800dec6 <lwip_recvfrom_udp_raw+0x96>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800de8e:	f107 0110 	add.w	r1, r7, #16
 800de92:	4618      	mov	r0, r3
 800de94:	f7fd f8f0 	bl	800b078 <netconn_recv_udp_raw_netbuf_flags>
 800de98:	4603      	mov	r3, r0
 800de9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800de9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d002      	beq.n	800deac <lwip_recvfrom_udp_raw+0x7c>
      return err;
 800dea6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800deaa:	e089      	b.n	800dfc0 <lwip_recvfrom_udp_raw+0x190>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d106      	bne.n	800dec0 <lwip_recvfrom_udp_raw+0x90>
 800deb2:	4b45      	ldr	r3, [pc, #276]	; (800dfc8 <lwip_recvfrom_udp_raw+0x198>)
 800deb4:	f240 425e 	movw	r2, #1118	; 0x45e
 800deb8:	4946      	ldr	r1, [pc, #280]	; (800dfd4 <lwip_recvfrom_udp_raw+0x1a4>)
 800deba:	4845      	ldr	r0, [pc, #276]	; (800dfd0 <lwip_recvfrom_udp_raw+0x1a0>)
 800debc:	f010 fdde 	bl	801ea7c <iprintf>
    sock->lastdata.netbuf = buf;
 800dec0:	693a      	ldr	r2, [r7, #16]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	891b      	ldrh	r3, [r3, #8]
 800decc:	837b      	strh	r3, [r7, #26]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ded2:	2300      	movs	r3, #0
 800ded4:	61fb      	str	r3, [r7, #28]
 800ded6:	e029      	b.n	800df2c <lwip_recvfrom_udp_raw+0xfc>
    u16_t len_left = (u16_t)(buflen - copied);
 800ded8:	8b7a      	ldrh	r2, [r7, #26]
 800deda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dedc:	1ad3      	subs	r3, r2, r3
 800dede:	833b      	strh	r3, [r7, #24]
    if (msg->msg_iov[i].iov_len > len_left) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	689a      	ldr	r2, [r3, #8]
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	4413      	add	r3, r2
 800deea:	685a      	ldr	r2, [r3, #4]
 800deec:	8b3b      	ldrh	r3, [r7, #24]
 800deee:	429a      	cmp	r2, r3
 800def0:	d902      	bls.n	800def8 <lwip_recvfrom_udp_raw+0xc8>
      copylen = len_left;
 800def2:	8b3b      	ldrh	r3, [r7, #24]
 800def4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800def6:	e006      	b.n	800df06 <lwip_recvfrom_udp_raw+0xd6>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	689a      	ldr	r2, [r3, #8]
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	00db      	lsls	r3, r3, #3
 800df00:	4413      	add	r3, r2
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	6818      	ldr	r0, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	689a      	ldr	r2, [r3, #8]
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	00db      	lsls	r3, r3, #3
 800df12:	4413      	add	r3, r2
 800df14:	6819      	ldr	r1, [r3, #0]
 800df16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800df1a:	f003 ff0d 	bl	8011d38 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800df1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800df20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df22:	4413      	add	r3, r2
 800df24:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	3301      	adds	r3, #1
 800df2a:	61fb      	str	r3, [r7, #28]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	69fa      	ldr	r2, [r7, #28]
 800df32:	429a      	cmp	r2, r3
 800df34:	da03      	bge.n	800df3e <lwip_recvfrom_udp_raw+0x10e>
 800df36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800df38:	8b7b      	ldrh	r3, [r7, #26]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d3cc      	bcc.n	800ded8 <lwip_recvfrom_udp_raw+0xa8>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d01a      	beq.n	800df7c <lwip_recvfrom_udp_raw+0x14c>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d016      	beq.n	800df7c <lwip_recvfrom_udp_raw+0x14c>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d012      	beq.n	800df7c <lwip_recvfrom_udp_raw+0x14c>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00e      	beq.n	800df7c <lwip_recvfrom_udp_raw+0x14c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6818      	ldr	r0, [r3, #0]
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	f103 0108 	add.w	r1, r3, #8
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	3304      	adds	r3, #4
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	4623      	mov	r3, r4
 800df78:	f7ff feba 	bl	800dcf0 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	691b      	ldr	r3, [r3, #16]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d007      	beq.n	800df9a <lwip_recvfrom_udp_raw+0x16a>
    u8_t wrote_msg = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800df8e:	7dfb      	ldrb	r3, [r7, #23]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d102      	bne.n	800df9a <lwip_recvfrom_udp_raw+0x16a>
      msg->msg_controllen = 0;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d106      	bne.n	800dfb2 <lwip_recvfrom_udp_raw+0x182>
    sock->lastdata.netbuf = NULL;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7ff f8cd 	bl	800d14c <netbuf_delete>
  }
  if (datagram_len) {
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <lwip_recvfrom_udp_raw+0x18e>
    *datagram_len = buflen;
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	8b7a      	ldrh	r2, [r7, #26]
 800dfbc:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	372c      	adds	r7, #44	; 0x2c
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd90      	pop	{r4, r7, pc}
 800dfc8:	0802302c 	.word	0x0802302c
 800dfcc:	080231d0 	.word	0x080231d0
 800dfd0:	08023080 	.word	0x08023080
 800dfd4:	080231fc 	.word	0x080231fc

0800dfd8 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b096      	sub	sp, #88	; 0x58
 800dfdc:	af02      	add	r7, sp, #8
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	607a      	str	r2, [r7, #4]
 800dfe4:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f7ff f9d8 	bl	800d39c <get_socket>
 800dfec:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800dfee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d102      	bne.n	800dffa <lwip_recvfrom+0x22>
    return -1;
 800dff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dff8:	e078      	b.n	800e0ec <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800dffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e004:	2b10      	cmp	r3, #16
 800e006:	d112      	bne.n	800e02e <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	68b9      	ldr	r1, [r7, #8]
 800e00e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e010:	f7ff fd5e 	bl	800dad0 <lwip_recv_tcp>
 800e014:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800e016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	4b35      	ldr	r3, [pc, #212]	; (800e0f4 <lwip_recvfrom+0x11c>)
 800e020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e022:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e024:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e026:	f7ff fed1 	bl	800ddcc <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800e02a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e02c:	e05e      	b.n	800e0ec <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800e03a:	2300      	movs	r3, #0
 800e03c:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800e046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e04a:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800e04c:	2301      	movs	r3, #1
 800e04e:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800e050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e052:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800e054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e056:	2b00      	cmp	r3, #0
 800e058:	d002      	beq.n	800e060 <lwip_recvfrom+0x88>
 800e05a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	e000      	b.n	800e062 <lwip_recvfrom+0x8a>
 800e060:	2300      	movs	r3, #0
 800e062:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800e064:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800e068:	f107 0214 	add.w	r2, r7, #20
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	460b      	mov	r3, r1
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e076:	f7ff fedb 	bl	800de30 <lwip_recvfrom_udp_raw>
 800e07a:	4603      	mov	r3, r0
 800e07c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800e080:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00e      	beq.n	800e0a6 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800e088:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7ff f83f 	bl	800d110 <err_to_errno>
 800e092:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e096:	2b00      	cmp	r3, #0
 800e098:	d002      	beq.n	800e0a0 <lwip_recvfrom+0xc8>
 800e09a:	4a17      	ldr	r2, [pc, #92]	; (800e0f8 <lwip_recvfrom+0x120>)
 800e09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09e:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800e0a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0a4:	e022      	b.n	800e0ec <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800e0a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	bf28      	it	cs
 800e0b0:	4613      	movcs	r3, r2
 800e0b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d206      	bcs.n	800e0c8 <lwip_recvfrom+0xf0>
 800e0ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e0bc:	461a      	mov	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	bf28      	it	cs
 800e0c4:	4613      	movcs	r3, r2
 800e0c6:	e001      	b.n	800e0cc <lwip_recvfrom+0xf4>
 800e0c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e0cc:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800e0ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d002      	beq.n	800e0da <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800e0d4:	69ba      	ldr	r2, [r7, #24]
 800e0d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0d8:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800e0da:	2300      	movs	r3, #0
 800e0dc:	643b      	str	r3, [r7, #64]	; 0x40
 800e0de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <lwip_recvfrom+0x112>
 800e0e4:	4a04      	ldr	r2, [pc, #16]	; (800e0f8 <lwip_recvfrom+0x120>)
 800e0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800e0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3750      	adds	r7, #80	; 0x50
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	08023208 	.word	0x08023208
 800e0f8:	2001b118 	.word	0x2001b118

0800e0fc <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af02      	add	r7, sp, #8
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800e10a:	2300      	movs	r3, #0
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	2300      	movs	r3, #0
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	68b9      	ldr	r1, [r7, #8]
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f7ff ff5d 	bl	800dfd8 <lwip_recvfrom>
 800e11e:	4603      	mov	r3, r0
}
 800e120:	4618      	mov	r0, r3
 800e122:	3710      	adds	r7, #16
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	; 0x28
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
 800e134:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f7ff f930 	bl	800d39c <get_socket>
 800e13c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d102      	bne.n	800e14a <lwip_send+0x22>
    return -1;
 800e144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e148:	e046      	b.n	800e1d8 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e154:	2b10      	cmp	r3, #16
 800e156:	d00b      	beq.n	800e170 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800e158:	2300      	movs	r3, #0
 800e15a:	9301      	str	r3, [sp, #4]
 800e15c:	2300      	movs	r3, #0
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	68b9      	ldr	r1, [r7, #8]
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 f83c 	bl	800e1e4 <lwip_sendto>
 800e16c:	4603      	mov	r3, r0
 800e16e:	e033      	b.n	800e1d8 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800e176:	2b00      	cmp	r3, #0
 800e178:	d001      	beq.n	800e17e <lwip_send+0x56>
 800e17a:	2203      	movs	r2, #3
 800e17c:	e000      	b.n	800e180 <lwip_send+0x58>
 800e17e:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	105b      	asrs	r3, r3, #1
 800e184:	b25b      	sxtb	r3, r3
 800e186:	f003 0304 	and.w	r3, r3, #4
 800e18a:	b25b      	sxtb	r3, r3
 800e18c:	4313      	orrs	r3, r2
 800e18e:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800e190:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800e192:	2300      	movs	r3, #0
 800e194:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	6818      	ldr	r0, [r3, #0]
 800e19a:	7efa      	ldrb	r2, [r7, #27]
 800e19c:	f107 0310 	add.w	r3, r7, #16
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	68b9      	ldr	r1, [r7, #8]
 800e1a8:	f7fc ffc0 	bl	800b12c <netconn_write_partly>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800e1b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fe ffab 	bl	800d110 <err_to_errno>
 800e1ba:	6178      	str	r0, [r7, #20]
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d002      	beq.n	800e1c8 <lwip_send+0xa0>
 800e1c2:	4a07      	ldr	r2, [pc, #28]	; (800e1e0 <lwip_send+0xb8>)
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800e1c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <lwip_send+0xac>
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	e001      	b.n	800e1d8 <lwip_send+0xb0>
 800e1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3720      	adds	r7, #32
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	2001b118 	.word	0x2001b118

0800e1e4 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b08e      	sub	sp, #56	; 0x38
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
 800e1f0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f7ff f8d2 	bl	800d39c <get_socket>
 800e1f8:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800e1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d102      	bne.n	800e206 <lwip_sendto+0x22>
    return -1;
 800e200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e204:	e093      	b.n	800e32e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800e206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e210:	2b10      	cmp	r3, #16
 800e212:	d107      	bne.n	800e224 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	68b9      	ldr	r1, [r7, #8]
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	f7ff ff84 	bl	800e128 <lwip_send>
 800e220:	4603      	mov	r3, r0
 800e222:	e084      	b.n	800e32e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e22a:	d30a      	bcc.n	800e242 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800e22c:	235a      	movs	r3, #90	; 0x5a
 800e22e:	623b      	str	r3, [r7, #32]
 800e230:	6a3b      	ldr	r3, [r7, #32]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d002      	beq.n	800e23c <lwip_sendto+0x58>
 800e236:	4a40      	ldr	r2, [pc, #256]	; (800e338 <lwip_sendto+0x154>)
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e23c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e240:	e075      	b.n	800e32e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800e246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d102      	bne.n	800e252 <lwip_sendto+0x6e>
 800e24c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d023      	beq.n	800e29a <lwip_sendto+0xb6>
 800e252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e254:	2b10      	cmp	r3, #16
 800e256:	d10b      	bne.n	800e270 <lwip_sendto+0x8c>
 800e258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d008      	beq.n	800e270 <lwip_sendto+0x8c>
 800e25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e260:	785b      	ldrb	r3, [r3, #1]
 800e262:	2b02      	cmp	r3, #2
 800e264:	d104      	bne.n	800e270 <lwip_sendto+0x8c>
 800e266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e268:	f003 0303 	and.w	r3, r3, #3
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d014      	beq.n	800e29a <lwip_sendto+0xb6>
 800e270:	4b32      	ldr	r3, [pc, #200]	; (800e33c <lwip_sendto+0x158>)
 800e272:	f240 6252 	movw	r2, #1618	; 0x652
 800e276:	4932      	ldr	r1, [pc, #200]	; (800e340 <lwip_sendto+0x15c>)
 800e278:	4832      	ldr	r0, [pc, #200]	; (800e344 <lwip_sendto+0x160>)
 800e27a:	f010 fbff 	bl	801ea7c <iprintf>
 800e27e:	f06f 000f 	mvn.w	r0, #15
 800e282:	f7fe ff45 	bl	800d110 <err_to_errno>
 800e286:	62b8      	str	r0, [r7, #40]	; 0x28
 800e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d002      	beq.n	800e294 <lwip_sendto+0xb0>
 800e28e:	4a2a      	ldr	r2, [pc, #168]	; (800e338 <lwip_sendto+0x154>)
 800e290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e292:	6013      	str	r3, [r2, #0]
 800e294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e298:	e049      	b.n	800e32e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800e29a:	2300      	movs	r3, #0
 800e29c:	617b      	str	r3, [r7, #20]
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800e2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00a      	beq.n	800e2be <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800e2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	61bb      	str	r3, [r7, #24]
 800e2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2b0:	885b      	ldrh	r3, [r3, #2]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f000 ff7a 	bl	800f1ac <lwip_htons>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e2bc:	e003      	b.n	800e2c6 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	86fb      	strh	r3, [r7, #54]	; 0x36
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800e2c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e2c8:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800e2ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e2cc:	f107 0310 	add.w	r3, r7, #16
 800e2d0:	68b9      	ldr	r1, [r7, #8]
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7fe ff82 	bl	800d1dc <netbuf_ref>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800e2de:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d10a      	bne.n	800e2fc <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f107 0210 	add.w	r2, r7, #16
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fc feed 	bl	800b0d0 <netconn_send>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800e2fc:	f107 0310 	add.w	r3, r7, #16
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe ff43 	bl	800d18c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800e306:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fe ff00 	bl	800d110 <err_to_errno>
 800e310:	6278      	str	r0, [r7, #36]	; 0x24
 800e312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e314:	2b00      	cmp	r3, #0
 800e316:	d002      	beq.n	800e31e <lwip_sendto+0x13a>
 800e318:	4a07      	ldr	r2, [pc, #28]	; (800e338 <lwip_sendto+0x154>)
 800e31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800e31e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800e322:	2b00      	cmp	r3, #0
 800e324:	d101      	bne.n	800e32a <lwip_sendto+0x146>
 800e326:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e328:	e001      	b.n	800e32e <lwip_sendto+0x14a>
 800e32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3738      	adds	r7, #56	; 0x38
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	2001b118 	.word	0x2001b118
 800e33c:	0802302c 	.word	0x0802302c
 800e340:	0802330c 	.word	0x0802330c
 800e344:	08023080 	.word	0x08023080

0800e348 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	2b03      	cmp	r3, #3
 800e358:	d009      	beq.n	800e36e <lwip_socket+0x26>
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	2b03      	cmp	r3, #3
 800e35e:	dc23      	bgt.n	800e3a8 <lwip_socket+0x60>
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d019      	beq.n	800e39a <lwip_socket+0x52>
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d009      	beq.n	800e380 <lwip_socket+0x38>
 800e36c:	e01c      	b.n	800e3a8 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	b2db      	uxtb	r3, r3
 800e372:	4a22      	ldr	r2, [pc, #136]	; (800e3fc <lwip_socket+0xb4>)
 800e374:	4619      	mov	r1, r3
 800e376:	2040      	movs	r0, #64	; 0x40
 800e378:	f7fc fa4a 	bl	800a810 <netconn_new_with_proto_and_callback>
 800e37c:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800e37e:	e019      	b.n	800e3b4 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b88      	cmp	r3, #136	; 0x88
 800e384:	d101      	bne.n	800e38a <lwip_socket+0x42>
 800e386:	2321      	movs	r3, #33	; 0x21
 800e388:	e000      	b.n	800e38c <lwip_socket+0x44>
 800e38a:	2320      	movs	r3, #32
 800e38c:	4a1b      	ldr	r2, [pc, #108]	; (800e3fc <lwip_socket+0xb4>)
 800e38e:	2100      	movs	r1, #0
 800e390:	4618      	mov	r0, r3
 800e392:	f7fc fa3d 	bl	800a810 <netconn_new_with_proto_and_callback>
 800e396:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800e398:	e00c      	b.n	800e3b4 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800e39a:	4a18      	ldr	r2, [pc, #96]	; (800e3fc <lwip_socket+0xb4>)
 800e39c:	2100      	movs	r1, #0
 800e39e:	2010      	movs	r0, #16
 800e3a0:	f7fc fa36 	bl	800a810 <netconn_new_with_proto_and_callback>
 800e3a4:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800e3a6:	e005      	b.n	800e3b4 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800e3a8:	4b15      	ldr	r3, [pc, #84]	; (800e400 <lwip_socket+0xb8>)
 800e3aa:	2216      	movs	r2, #22
 800e3ac:	601a      	str	r2, [r3, #0]
      return -1;
 800e3ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3b2:	e01e      	b.n	800e3f2 <lwip_socket+0xaa>
  }

  if (!conn) {
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d105      	bne.n	800e3c6 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800e3ba:	4b11      	ldr	r3, [pc, #68]	; (800e400 <lwip_socket+0xb8>)
 800e3bc:	2269      	movs	r2, #105	; 0x69
 800e3be:	601a      	str	r2, [r3, #0]
    return -1;
 800e3c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3c4:	e015      	b.n	800e3f2 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	6978      	ldr	r0, [r7, #20]
 800e3ca:	f7fe ffff 	bl	800d3cc <alloc_socket>
 800e3ce:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3d6:	d108      	bne.n	800e3ea <lwip_socket+0xa2>
    netconn_delete(conn);
 800e3d8:	6978      	ldr	r0, [r7, #20]
 800e3da:	f7fc fab7 	bl	800a94c <netconn_delete>
    set_errno(ENFILE);
 800e3de:	4b08      	ldr	r3, [pc, #32]	; (800e400 <lwip_socket+0xb8>)
 800e3e0:	2217      	movs	r2, #23
 800e3e2:	601a      	str	r2, [r3, #0]
    return -1;
 800e3e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3e8:	e003      	b.n	800e3f2 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800e3f0:	693b      	ldr	r3, [r7, #16]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3718      	adds	r7, #24
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	0800ebb9 	.word	0x0800ebb9
 800e400:	2001b118 	.word	0x2001b118

0800e404 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800e40c:	480c      	ldr	r0, [pc, #48]	; (800e440 <lwip_link_select_cb+0x3c>)
 800e40e:	f00f fc5d 	bl	801dccc <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 800e412:	4b0c      	ldr	r3, [pc, #48]	; (800e444 <lwip_link_select_cb+0x40>)
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 800e41a:	4b0a      	ldr	r3, [pc, #40]	; (800e444 <lwip_link_select_cb+0x40>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 800e422:	4b08      	ldr	r3, [pc, #32]	; (800e444 <lwip_link_select_cb+0x40>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 800e42a:	4a06      	ldr	r2, [pc, #24]	; (800e444 <lwip_link_select_cb+0x40>)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800e430:	4803      	ldr	r0, [pc, #12]	; (800e440 <lwip_link_select_cb+0x3c>)
 800e432:	f00f fc5a 	bl	801dcea <sys_mutex_unlock>
}
 800e436:	bf00      	nop
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	200176d0 	.word	0x200176d0
 800e444:	20013e74 	.word	0x20013e74

0800e448 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800e450:	481b      	ldr	r0, [pc, #108]	; (800e4c0 <lwip_unlink_select_cb+0x78>)
 800e452:	f00f fc3b 	bl	801dccc <sys_mutex_lock>
  if (select_cb->next != NULL) {
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d004      	beq.n	800e468 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	6852      	ldr	r2, [r2, #4]
 800e466:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 800e468:	4b16      	ldr	r3, [pc, #88]	; (800e4c4 <lwip_unlink_select_cb+0x7c>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d10f      	bne.n	800e492 <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d006      	beq.n	800e488 <lwip_unlink_select_cb+0x40>
 800e47a:	4b13      	ldr	r3, [pc, #76]	; (800e4c8 <lwip_unlink_select_cb+0x80>)
 800e47c:	f240 720d 	movw	r2, #1805	; 0x70d
 800e480:	4912      	ldr	r1, [pc, #72]	; (800e4cc <lwip_unlink_select_cb+0x84>)
 800e482:	4813      	ldr	r0, [pc, #76]	; (800e4d0 <lwip_unlink_select_cb+0x88>)
 800e484:	f010 fafa 	bl	801ea7c <iprintf>
    select_cb_list = select_cb->next;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a0d      	ldr	r2, [pc, #52]	; (800e4c4 <lwip_unlink_select_cb+0x7c>)
 800e48e:	6013      	str	r3, [r2, #0]
 800e490:	e00f      	b.n	800e4b2 <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d106      	bne.n	800e4a8 <lwip_unlink_select_cb+0x60>
 800e49a:	4b0b      	ldr	r3, [pc, #44]	; (800e4c8 <lwip_unlink_select_cb+0x80>)
 800e49c:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 800e4a0:	490c      	ldr	r1, [pc, #48]	; (800e4d4 <lwip_unlink_select_cb+0x8c>)
 800e4a2:	480b      	ldr	r0, [pc, #44]	; (800e4d0 <lwip_unlink_select_cb+0x88>)
 800e4a4:	f010 faea 	bl	801ea7c <iprintf>
    select_cb->prev->next = select_cb->next;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	6812      	ldr	r2, [r2, #0]
 800e4b0:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800e4b2:	4803      	ldr	r0, [pc, #12]	; (800e4c0 <lwip_unlink_select_cb+0x78>)
 800e4b4:	f00f fc19 	bl	801dcea <sys_mutex_unlock>
}
 800e4b8:	bf00      	nop
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	200176d0 	.word	0x200176d0
 800e4c4:	20013e74 	.word	0x20013e74
 800e4c8:	0802302c 	.word	0x0802302c
 800e4cc:	0802332c 	.word	0x0802332c
 800e4d0:	08023080 	.word	0x08023080
 800e4d4:	08023344 	.word	0x08023344

0800e4d8 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b098      	sub	sp, #96	; 0x60
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
 800e4e4:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 800e4ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4ee:	653b      	str	r3, [r7, #80]	; 0x50
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	657b      	str	r3, [r7, #84]	; 0x54
 800e4f4:	e007      	b.n	800e506 <lwip_selscan+0x2e>
 800e4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f8:	1c5a      	adds	r2, r3, #1
 800e4fa:	653a      	str	r2, [r7, #80]	; 0x50
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	701a      	strb	r2, [r3, #0]
 800e500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e502:	3301      	adds	r3, #1
 800e504:	657b      	str	r3, [r7, #84]	; 0x54
 800e506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e508:	2b07      	cmp	r3, #7
 800e50a:	d9f4      	bls.n	800e4f6 <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 800e50c:	f107 031c 	add.w	r3, r7, #28
 800e510:	64bb      	str	r3, [r7, #72]	; 0x48
 800e512:	2300      	movs	r3, #0
 800e514:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e516:	e007      	b.n	800e528 <lwip_selscan+0x50>
 800e518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	64ba      	str	r2, [r7, #72]	; 0x48
 800e51e:	2200      	movs	r2, #0
 800e520:	701a      	strb	r2, [r3, #0]
 800e522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e524:	3301      	adds	r3, #1
 800e526:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e52a:	2b07      	cmp	r3, #7
 800e52c:	d9f4      	bls.n	800e518 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 800e52e:	f107 0314 	add.w	r3, r7, #20
 800e532:	643b      	str	r3, [r7, #64]	; 0x40
 800e534:	2300      	movs	r3, #0
 800e536:	647b      	str	r3, [r7, #68]	; 0x44
 800e538:	e007      	b.n	800e54a <lwip_selscan+0x72>
 800e53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e53c:	1c5a      	adds	r2, r3, #1
 800e53e:	643a      	str	r2, [r7, #64]	; 0x40
 800e540:	2200      	movs	r2, #0
 800e542:	701a      	strb	r2, [r3, #0]
 800e544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e546:	3301      	adds	r3, #1
 800e548:	647b      	str	r3, [r7, #68]	; 0x44
 800e54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e54c:	2b07      	cmp	r3, #7
 800e54e:	d9f4      	bls.n	800e53a <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800e550:	2300      	movs	r3, #0
 800e552:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e554:	e0e1      	b.n	800e71a <lwip_selscan+0x242>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00d      	beq.n	800e578 <lwip_selscan+0xa0>
 800e55c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e55e:	095a      	lsrs	r2, r3, #5
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e566:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e568:	f002 021f 	and.w	r2, r2, #31
 800e56c:	2101      	movs	r1, #1
 800e56e:	fa01 f202 	lsl.w	r2, r1, r2
 800e572:	4013      	ands	r3, r2
 800e574:	2b00      	cmp	r3, #0
 800e576:	d123      	bne.n	800e5c0 <lwip_selscan+0xe8>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d00d      	beq.n	800e59a <lwip_selscan+0xc2>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 800e57e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e580:	095a      	lsrs	r2, r3, #5
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e58a:	f002 021f 	and.w	r2, r2, #31
 800e58e:	2101      	movs	r1, #1
 800e590:	fa01 f202 	lsl.w	r2, r1, r2
 800e594:	4013      	ands	r3, r2
 800e596:	2b00      	cmp	r3, #0
 800e598:	d112      	bne.n	800e5c0 <lwip_selscan+0xe8>
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f000 80b8 	beq.w	800e712 <lwip_selscan+0x23a>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 800e5a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5a4:	095a      	lsrs	r2, r3, #5
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e5ae:	f002 021f 	and.w	r2, r2, #31
 800e5b2:	2101      	movs	r1, #1
 800e5b4:	fa01 f202 	lsl.w	r2, r1, r2
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 80a9 	beq.w	800e712 <lwip_selscan+0x23a>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 800e5c0:	f00f fbbe 	bl	801dd40 <sys_arch_protect>
 800e5c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 800e5c6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e5c8:	f7fe fec5 	bl	800d356 <tryget_socket_unconn_locked>
 800e5cc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f000 8098 	beq.w	800e706 <lwip_selscan+0x22e>
      void *lastdata = sock->lastdata.pbuf;
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 800e5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5de:	891b      	ldrh	r3, [r3, #8]
 800e5e0:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e4:	895b      	ldrh	r3, [r3, #10]
 800e5e6:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ea:	899b      	ldrh	r3, [r3, #12]
 800e5ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 800e5ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5f0:	f00f fbb4 	bl	801dd5c <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d02c      	beq.n	800e654 <lwip_selscan+0x17c>
 800e5fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5fc:	095a      	lsrs	r2, r3, #5
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e606:	f002 021f 	and.w	r2, r2, #31
 800e60a:	2101      	movs	r1, #1
 800e60c:	fa01 f202 	lsl.w	r2, r1, r2
 800e610:	4013      	ands	r3, r2
 800e612:	2b00      	cmp	r3, #0
 800e614:	d01e      	beq.n	800e654 <lwip_selscan+0x17c>
 800e616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d103      	bne.n	800e624 <lwip_selscan+0x14c>
 800e61c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800e620:	2b00      	cmp	r3, #0
 800e622:	dd17      	ble.n	800e654 <lwip_selscan+0x17c>
        FD_SET(i, &lreadset);
 800e624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e626:	095a      	lsrs	r2, r3, #5
 800e628:	0093      	lsls	r3, r2, #2
 800e62a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800e62e:	440b      	add	r3, r1
 800e630:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e634:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e636:	f001 011f 	and.w	r1, r1, #31
 800e63a:	2001      	movs	r0, #1
 800e63c:	fa00 f101 	lsl.w	r1, r0, r1
 800e640:	4319      	orrs	r1, r3
 800e642:	0093      	lsls	r3, r2, #2
 800e644:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e648:	4413      	add	r3, r2
 800e64a:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 800e64e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e650:	3301      	adds	r3, #1
 800e652:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d028      	beq.n	800e6ac <lwip_selscan+0x1d4>
 800e65a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e65c:	095a      	lsrs	r2, r3, #5
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e666:	f002 021f 	and.w	r2, r2, #31
 800e66a:	2101      	movs	r1, #1
 800e66c:	fa01 f202 	lsl.w	r2, r1, r2
 800e670:	4013      	ands	r3, r2
 800e672:	2b00      	cmp	r3, #0
 800e674:	d01a      	beq.n	800e6ac <lwip_selscan+0x1d4>
 800e676:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d017      	beq.n	800e6ac <lwip_selscan+0x1d4>
        FD_SET(i, &lwriteset);
 800e67c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e67e:	095a      	lsrs	r2, r3, #5
 800e680:	0093      	lsls	r3, r2, #2
 800e682:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800e686:	440b      	add	r3, r1
 800e688:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e68c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e68e:	f001 011f 	and.w	r1, r1, #31
 800e692:	2001      	movs	r0, #1
 800e694:	fa00 f101 	lsl.w	r1, r0, r1
 800e698:	4319      	orrs	r1, r3
 800e69a:	0093      	lsls	r3, r2, #2
 800e69c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e6a0:	4413      	add	r3, r2
 800e6a2:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 800e6a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d030      	beq.n	800e714 <lwip_selscan+0x23c>
 800e6b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6b4:	095a      	lsrs	r2, r3, #5
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e6be:	f002 021f 	and.w	r2, r2, #31
 800e6c2:	2101      	movs	r1, #1
 800e6c4:	fa01 f202 	lsl.w	r2, r1, r2
 800e6c8:	4013      	ands	r3, r2
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d022      	beq.n	800e714 <lwip_selscan+0x23c>
 800e6ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d01f      	beq.n	800e714 <lwip_selscan+0x23c>
        FD_SET(i, &lexceptset);
 800e6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6d6:	095a      	lsrs	r2, r3, #5
 800e6d8:	0093      	lsls	r3, r2, #2
 800e6da:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800e6de:	440b      	add	r3, r1
 800e6e0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800e6e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e6e6:	f001 011f 	and.w	r1, r1, #31
 800e6ea:	2001      	movs	r0, #1
 800e6ec:	fa00 f101 	lsl.w	r1, r0, r1
 800e6f0:	4319      	orrs	r1, r3
 800e6f2:	0093      	lsls	r3, r2, #2
 800e6f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e6f8:	4413      	add	r3, r2
 800e6fa:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 800e6fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e700:	3301      	adds	r3, #1
 800e702:	65bb      	str	r3, [r7, #88]	; 0x58
 800e704:	e006      	b.n	800e714 <lwip_selscan+0x23c>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 800e706:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e708:	f00f fb28 	bl	801dd5c <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 800e70c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e710:	e02b      	b.n	800e76a <lwip_selscan+0x292>
      continue;
 800e712:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800e714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e716:	3301      	adds	r3, #1
 800e718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e71a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	429a      	cmp	r2, r3
 800e720:	f6ff af19 	blt.w	800e556 <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 800e724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e726:	461a      	mov	r2, r3
 800e728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e72c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e730:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 800e734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e736:	461a      	mov	r2, r3
 800e738:	f107 031c 	add.w	r3, r7, #28
 800e73c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e740:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 800e744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e746:	461a      	mov	r2, r3
 800e748:	f107 0314 	add.w	r3, r7, #20
 800e74c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e750:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 800e754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e756:	2b00      	cmp	r3, #0
 800e758:	da06      	bge.n	800e768 <lwip_selscan+0x290>
 800e75a:	4b06      	ldr	r3, [pc, #24]	; (800e774 <lwip_selscan+0x29c>)
 800e75c:	f240 7269 	movw	r2, #1897	; 0x769
 800e760:	4905      	ldr	r1, [pc, #20]	; (800e778 <lwip_selscan+0x2a0>)
 800e762:	4806      	ldr	r0, [pc, #24]	; (800e77c <lwip_selscan+0x2a4>)
 800e764:	f010 f98a 	bl	801ea7c <iprintf>
  return nready;
 800e768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3760      	adds	r7, #96	; 0x60
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	0802302c 	.word	0x0802302c
 800e778:	0802335c 	.word	0x0802335c
 800e77c:	08023080 	.word	0x08023080

0800e780 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b0a0      	sub	sp, #128	; 0x80
 800e784:	af04      	add	r7, sp, #16
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	60b9      	str	r1, [r7, #8]
 800e78a:	607a      	str	r2, [r7, #4]
 800e78c:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 800e78e:	2300      	movs	r3, #0
 800e790:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2b00      	cmp	r3, #0
 800e796:	db02      	blt.n	800e79e <lwip_select+0x1e>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2b40      	cmp	r3, #64	; 0x40
 800e79c:	dd05      	ble.n	800e7aa <lwip_select+0x2a>
    set_errno(EINVAL);
 800e79e:	4b84      	ldr	r3, [pc, #528]	; (800e9b0 <lwip_select+0x230>)
 800e7a0:	2216      	movs	r2, #22
 800e7a2:	601a      	str	r2, [r3, #0]
    return -1;
 800e7a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7a8:	e1b5      	b.n	800eb16 <lwip_select+0x396>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800e7aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e7ae:	9302      	str	r3, [sp, #8]
 800e7b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e7b4:	9301      	str	r3, [sp, #4]
 800e7b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	68b9      	ldr	r1, [r7, #8]
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f7ff fe88 	bl	800e4d8 <lwip_selscan>
 800e7c8:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 800e7ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	da05      	bge.n	800e7dc <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 800e7d0:	4b77      	ldr	r3, [pc, #476]	; (800e9b0 <lwip_select+0x230>)
 800e7d2:	2209      	movs	r2, #9
 800e7d4:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 800e7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7da:	e19c      	b.n	800eb16 <lwip_select+0x396>
  } else if (nready > 0) {
 800e7dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f300 8177 	bgt.w	800ead2 <lwip_select+0x352>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 800e7e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d009      	beq.n	800e7fe <lwip_select+0x7e>
 800e7ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	d104      	bne.n	800e7fe <lwip_select+0x7e>
 800e7f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 8169 	beq.w	800ead0 <lwip_select+0x350>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 800e7fe:	f107 0310 	add.w	r3, r7, #16
 800e802:	2224      	movs	r2, #36	; 0x24
 800e804:	2100      	movs	r1, #0
 800e806:	4618      	mov	r0, r3
 800e808:	f00f fc1c 	bl	801e044 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 800e818:	f107 0310 	add.w	r3, r7, #16
 800e81c:	3320      	adds	r3, #32
 800e81e:	2100      	movs	r1, #0
 800e820:	4618      	mov	r0, r3
 800e822:	f00f f99c 	bl	801db5e <sys_sem_new>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d005      	beq.n	800e838 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 800e82c:	4b60      	ldr	r3, [pc, #384]	; (800e9b0 <lwip_select+0x230>)
 800e82e:	220c      	movs	r2, #12
 800e830:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 800e832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e836:	e16e      	b.n	800eb16 <lwip_select+0x396>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800e838:	f107 0310 	add.w	r3, r7, #16
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7ff fde1 	bl	800e404 <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800e846:	2300      	movs	r3, #0
 800e848:	663b      	str	r3, [r7, #96]	; 0x60
 800e84a:	e06b      	b.n	800e924 <lwip_select+0x1a4>
        if ((readset && FD_ISSET(i, readset)) ||
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00d      	beq.n	800e86e <lwip_select+0xee>
 800e852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e854:	095a      	lsrs	r2, r3, #5
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e85c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e85e:	f002 021f 	and.w	r2, r2, #31
 800e862:	2101      	movs	r1, #1
 800e864:	fa01 f202 	lsl.w	r2, r1, r2
 800e868:	4013      	ands	r3, r2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d121      	bne.n	800e8b2 <lwip_select+0x132>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00d      	beq.n	800e890 <lwip_select+0x110>
            (writeset && FD_ISSET(i, writeset)) ||
 800e874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e876:	095a      	lsrs	r2, r3, #5
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e87e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e880:	f002 021f 	and.w	r2, r2, #31
 800e884:	2101      	movs	r1, #1
 800e886:	fa01 f202 	lsl.w	r2, r1, r2
 800e88a:	4013      	ands	r3, r2
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d110      	bne.n	800e8b2 <lwip_select+0x132>
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d043      	beq.n	800e91e <lwip_select+0x19e>
            (exceptset && FD_ISSET(i, exceptset))) {
 800e896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e898:	095a      	lsrs	r2, r3, #5
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e8a2:	f002 021f 	and.w	r2, r2, #31
 800e8a6:	2101      	movs	r1, #1
 800e8a8:	fa01 f202 	lsl.w	r2, r1, r2
 800e8ac:	4013      	ands	r3, r2
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d035      	beq.n	800e91e <lwip_select+0x19e>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800e8b2:	f00f fa45 	bl	801dd40 <sys_arch_protect>
 800e8b6:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800e8b8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e8ba:	f7fe fd4c 	bl	800d356 <tryget_socket_unconn_locked>
 800e8be:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 800e8c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d01f      	beq.n	800e906 <lwip_select+0x186>
            sock->select_waiting++;
 800e8c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8c8:	7b9b      	ldrb	r3, [r3, #14]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8d0:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 800e8d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8d4:	7b9b      	ldrb	r3, [r3, #14]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d111      	bne.n	800e8fe <lwip_select+0x17e>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 800e8da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8dc:	7b9b      	ldrb	r3, [r3, #14]
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	b2da      	uxtb	r2, r3
 800e8e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8e4:	739a      	strb	r2, [r3, #14]
              nready = -1;
 800e8e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8ea:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 800e8ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8ee:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 800e8f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e8f2:	f00f fa33 	bl	801dd5c <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 800e8f6:	4b2e      	ldr	r3, [pc, #184]	; (800e9b0 <lwip_select+0x230>)
 800e8f8:	2210      	movs	r2, #16
 800e8fa:	601a      	str	r2, [r3, #0]
              break;
 800e8fc:	e016      	b.n	800e92c <lwip_select+0x1ac>
            }
            SYS_ARCH_UNPROTECT(lev);
 800e8fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e900:	f00f fa2c 	bl	801dd5c <sys_arch_unprotect>
 800e904:	e00b      	b.n	800e91e <lwip_select+0x19e>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 800e906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e90a:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 800e90c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e90e:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 800e910:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e912:	f00f fa23 	bl	801dd5c <sys_arch_unprotect>
            set_errno(EBADF);
 800e916:	4b26      	ldr	r3, [pc, #152]	; (800e9b0 <lwip_select+0x230>)
 800e918:	2209      	movs	r2, #9
 800e91a:	601a      	str	r2, [r3, #0]
            break;
 800e91c:	e006      	b.n	800e92c <lwip_select+0x1ac>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800e91e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e920:	3301      	adds	r3, #1
 800e922:	663b      	str	r3, [r7, #96]	; 0x60
 800e924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	429a      	cmp	r2, r3
 800e92a:	db8f      	blt.n	800e84c <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 800e92c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e92e:	2b00      	cmp	r3, #0
 800e930:	db3b      	blt.n	800e9aa <lwip_select+0x22a>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800e932:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e936:	9302      	str	r3, [sp, #8]
 800e938:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e93c:	9301      	str	r3, [sp, #4]
 800e93e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	68b9      	ldr	r1, [r7, #8]
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f7ff fdc4 	bl	800e4d8 <lwip_selscan>
 800e950:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 800e952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e954:	2b00      	cmp	r3, #0
 800e956:	d128      	bne.n	800e9aa <lwip_select+0x22a>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 800e958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d102      	bne.n	800e964 <lwip_select+0x1e4>
            /* Wait forever */
            msectimeout = 0;
 800e95e:	2300      	movs	r3, #0
 800e960:	667b      	str	r3, [r7, #100]	; 0x64
 800e962:	e01a      	b.n	800e99a <lwip_select+0x21a>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 800e964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e96e:	fb03 f202 	mul.w	r2, r3, r2
 800e972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e97a:	490e      	ldr	r1, [pc, #56]	; (800e9b4 <lwip_select+0x234>)
 800e97c:	fb81 0103 	smull	r0, r1, r1, r3
 800e980:	1189      	asrs	r1, r1, #6
 800e982:	17db      	asrs	r3, r3, #31
 800e984:	1acb      	subs	r3, r1, r3
 800e986:	4413      	add	r3, r2
 800e988:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 800e98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	dc02      	bgt.n	800e996 <lwip_select+0x216>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 800e990:	2301      	movs	r3, #1
 800e992:	667b      	str	r3, [r7, #100]	; 0x64
 800e994:	e001      	b.n	800e99a <lwip_select+0x21a>
            } else {
              msectimeout = (u32_t)msecs_long;
 800e996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e998:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 800e99a:	f107 0310 	add.w	r3, r7, #16
 800e99e:	3320      	adds	r3, #32
 800e9a0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f00f f901 	bl	801dbaa <sys_arch_sem_wait>
 800e9a8:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	663b      	str	r3, [r7, #96]	; 0x60
 800e9ae:	e065      	b.n	800ea7c <lwip_select+0x2fc>
 800e9b0:	2001b118 	.word	0x2001b118
 800e9b4:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00d      	beq.n	800e9da <lwip_select+0x25a>
 800e9be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9c0:	095a      	lsrs	r2, r3, #5
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e9ca:	f002 021f 	and.w	r2, r2, #31
 800e9ce:	2101      	movs	r1, #1
 800e9d0:	fa01 f202 	lsl.w	r2, r1, r2
 800e9d4:	4013      	ands	r3, r2
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d121      	bne.n	800ea1e <lwip_select+0x29e>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00d      	beq.n	800e9fc <lwip_select+0x27c>
            (writeset && FD_ISSET(i, writeset)) ||
 800e9e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9e2:	095a      	lsrs	r2, r3, #5
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e9ec:	f002 021f 	and.w	r2, r2, #31
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	fa01 f202 	lsl.w	r2, r1, r2
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d110      	bne.n	800ea1e <lwip_select+0x29e>
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d039      	beq.n	800ea76 <lwip_select+0x2f6>
            (exceptset && FD_ISSET(i, exceptset))) {
 800ea02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea04:	095a      	lsrs	r2, r3, #5
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea0e:	f002 021f 	and.w	r2, r2, #31
 800ea12:	2101      	movs	r1, #1
 800ea14:	fa01 f202 	lsl.w	r2, r1, r2
 800ea18:	4013      	ands	r3, r2
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d02b      	beq.n	800ea76 <lwip_select+0x2f6>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800ea1e:	f00f f98f 	bl	801dd40 <sys_arch_protect>
 800ea22:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800ea24:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ea26:	f7fe fc96 	bl	800d356 <tryget_socket_unconn_locked>
 800ea2a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 800ea2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d018      	beq.n	800ea64 <lwip_select+0x2e4>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 800ea32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea34:	7b9b      	ldrb	r3, [r3, #14]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d106      	bne.n	800ea48 <lwip_select+0x2c8>
 800ea3a:	4b39      	ldr	r3, [pc, #228]	; (800eb20 <lwip_select+0x3a0>)
 800ea3c:	f640 023c 	movw	r2, #2108	; 0x83c
 800ea40:	4938      	ldr	r1, [pc, #224]	; (800eb24 <lwip_select+0x3a4>)
 800ea42:	4839      	ldr	r0, [pc, #228]	; (800eb28 <lwip_select+0x3a8>)
 800ea44:	f010 f81a 	bl	801ea7c <iprintf>
            if (sock->select_waiting > 0) {
 800ea48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea4a:	7b9b      	ldrb	r3, [r3, #14]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d005      	beq.n	800ea5c <lwip_select+0x2dc>
              sock->select_waiting--;
 800ea50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea52:	7b9b      	ldrb	r3, [r3, #14]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	b2da      	uxtb	r2, r3
 800ea58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea5a:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 800ea5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ea5e:	f00f f97d 	bl	801dd5c <sys_arch_unprotect>
 800ea62:	e008      	b.n	800ea76 <lwip_select+0x2f6>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 800ea64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ea66:	f00f f979 	bl	801dd5c <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 800ea6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea6e:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 800ea70:	4b2e      	ldr	r3, [pc, #184]	; (800eb2c <lwip_select+0x3ac>)
 800ea72:	2209      	movs	r2, #9
 800ea74:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800ea76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea78:	3301      	adds	r3, #1
 800ea7a:	663b      	str	r3, [r7, #96]	; 0x60
 800ea7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea80:	429a      	cmp	r2, r3
 800ea82:	db99      	blt.n	800e9b8 <lwip_select+0x238>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800ea84:	f107 0310 	add.w	r3, r7, #16
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fcdd 	bl	800e448 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 800ea8e:	f107 0310 	add.w	r3, r7, #16
 800ea92:	3320      	adds	r3, #32
 800ea94:	4618      	mov	r0, r3
 800ea96:	f00f f8c6 	bl	801dc26 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 800ea9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	da02      	bge.n	800eaa6 <lwip_select+0x326>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 800eaa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaa4:	e037      	b.n	800eb16 <lwip_select+0x396>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 800eaa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaac:	d011      	beq.n	800ead2 <lwip_select+0x352>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800eaae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eab2:	9302      	str	r3, [sp, #8]
 800eab4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eab8:	9301      	str	r3, [sp, #4]
 800eaba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800eabe:	9300      	str	r3, [sp, #0]
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	68b9      	ldr	r1, [r7, #8]
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f7ff fd06 	bl	800e4d8 <lwip_selscan>
 800eacc:	66b8      	str	r0, [r7, #104]	; 0x68
 800eace:	e000      	b.n	800ead2 <lwip_select+0x352>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
 800ead0:	bf00      	nop
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d007      	beq.n	800eae8 <lwip_select+0x368>
    *readset = lreadset;
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	461a      	mov	r2, r3
 800eadc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800eae0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eae4:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d007      	beq.n	800eafe <lwip_select+0x37e>
    *writeset = lwriteset;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eaf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eafa:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d007      	beq.n	800eb14 <lwip_select+0x394>
    *exceptset = lexceptset;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	461a      	mov	r2, r3
 800eb08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eb0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eb10:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 800eb14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3770      	adds	r7, #112	; 0x70
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	0802302c 	.word	0x0802302c
 800eb24:	08023368 	.word	0x08023368
 800eb28:	08023080 	.word	0x08023080
 800eb2c:	2001b118 	.word	0x2001b118

0800eb30 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b087      	sub	sp, #28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
 800eb3c:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800eb3e:	2300      	movs	r3, #0
 800eb40:	617b      	str	r3, [r7, #20]
 800eb42:	e02c      	b.n	800eb9e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	695a      	ldr	r2, [r3, #20]
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	00db      	lsls	r3, r3, #3
 800eb4c:	4413      	add	r3, r2
 800eb4e:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d11e      	bne.n	800eb98 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d009      	beq.n	800eb74 <lwip_poll_should_wake+0x44>
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	f003 0301 	and.w	r3, r3, #1
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d001      	beq.n	800eb74 <lwip_poll_should_wake+0x44>
        return 1;
 800eb70:	2301      	movs	r3, #1
 800eb72:	e01a      	b.n	800ebaa <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d009      	beq.n	800eb8e <lwip_poll_should_wake+0x5e>
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	f003 0302 	and.w	r3, r3, #2
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d001      	beq.n	800eb8e <lwip_poll_should_wake+0x5e>
        return 1;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e00d      	b.n	800ebaa <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800eb8e:	6a3b      	ldr	r3, [r7, #32]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d001      	beq.n	800eb98 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800eb94:	2301      	movs	r3, #1
 800eb96:	e008      	b.n	800ebaa <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	617b      	str	r3, [r7, #20]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	697a      	ldr	r2, [r7, #20]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d3cd      	bcc.n	800eb44 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	371c      	adds	r7, #28
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr
	...

0800ebb8 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b08a      	sub	sp, #40	; 0x28
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	70fb      	strb	r3, [r7, #3]
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	f000 80a4 	beq.w	800ed18 <event_callback+0x160>
    s = conn->socket;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	699b      	ldr	r3, [r3, #24]
 800ebd4:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800ebd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	da18      	bge.n	800ec0e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800ebdc:	f00f f8b0 	bl	801dd40 <sys_arch_protect>
 800ebe0:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	699b      	ldr	r3, [r3, #24]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	da0b      	bge.n	800ec02 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800ebea:	78fb      	ldrb	r3, [r7, #3]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d104      	bne.n	800ebfa <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	699b      	ldr	r3, [r3, #24]
 800ebf4:	1e5a      	subs	r2, r3, #1
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ebfa:	69f8      	ldr	r0, [r7, #28]
 800ebfc:	f00f f8ae 	bl	801dd5c <sys_arch_unprotect>
        return;
 800ec00:	e08d      	b.n	800ed1e <event_callback+0x166>
      }
      s = conn->socket;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	699b      	ldr	r3, [r3, #24]
 800ec06:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ec08:	69f8      	ldr	r0, [r7, #28]
 800ec0a:	f00f f8a7 	bl	801dd5c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800ec0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec10:	f7fe fbc4 	bl	800d39c <get_socket>
 800ec14:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d07f      	beq.n	800ed1c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800ec20:	f00f f88e 	bl	801dd40 <sys_arch_protect>
 800ec24:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800ec26:	78fb      	ldrb	r3, [r7, #3]
 800ec28:	2b04      	cmp	r3, #4
 800ec2a:	d83e      	bhi.n	800ecaa <event_callback+0xf2>
 800ec2c:	a201      	add	r2, pc, #4	; (adr r2, 800ec34 <event_callback+0x7c>)
 800ec2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec32:	bf00      	nop
 800ec34:	0800ec49 	.word	0x0800ec49
 800ec38:	0800ec6b 	.word	0x0800ec6b
 800ec3c:	0800ec83 	.word	0x0800ec83
 800ec40:	0800ec97 	.word	0x0800ec97
 800ec44:	0800eca3 	.word	0x0800eca3
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	3301      	adds	r3, #1
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	b21a      	sxth	r2, r3
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	dd2a      	ble.n	800ecba <event_callback+0x102>
        check_waiters = 0;
 800ec64:	2300      	movs	r3, #0
 800ec66:	623b      	str	r3, [r7, #32]
      }
      break;
 800ec68:	e027      	b.n	800ecba <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	3b01      	subs	r3, #1
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	b21a      	sxth	r2, r3
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	623b      	str	r3, [r7, #32]
      break;
 800ec80:	e01c      	b.n	800ecbc <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	895b      	ldrh	r3, [r3, #10]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d001      	beq.n	800ec8e <event_callback+0xd6>
        check_waiters = 0;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	2201      	movs	r2, #1
 800ec92:	815a      	strh	r2, [r3, #10]
      break;
 800ec94:	e012      	b.n	800ecbc <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	623b      	str	r3, [r7, #32]
      break;
 800eca0:	e00c      	b.n	800ecbc <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	2201      	movs	r2, #1
 800eca6:	819a      	strh	r2, [r3, #12]
      break;
 800eca8:	e008      	b.n	800ecbc <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800ecaa:	4b1e      	ldr	r3, [pc, #120]	; (800ed24 <event_callback+0x16c>)
 800ecac:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800ecb0:	491d      	ldr	r1, [pc, #116]	; (800ed28 <event_callback+0x170>)
 800ecb2:	481e      	ldr	r0, [pc, #120]	; (800ed2c <event_callback+0x174>)
 800ecb4:	f00f fee2 	bl	801ea7c <iprintf>
      break;
 800ecb8:	e000      	b.n	800ecbc <event_callback+0x104>
      break;
 800ecba:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	7b9b      	ldrb	r3, [r3, #14]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d025      	beq.n	800ed10 <event_callback+0x158>
 800ecc4:	6a3b      	ldr	r3, [r7, #32]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d022      	beq.n	800ed10 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	bfcc      	ite	gt
 800ecd4:	2301      	movgt	r3, #1
 800ecd6:	2300      	movle	r3, #0
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	895b      	ldrh	r3, [r3, #10]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	bf14      	ite	ne
 800ece4:	2301      	movne	r3, #1
 800ece6:	2300      	moveq	r3, #0
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	899b      	ldrh	r3, [r3, #12]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	bf14      	ite	ne
 800ecf4:	2301      	movne	r3, #1
 800ecf6:	2300      	moveq	r3, #0
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800ecfc:	69f8      	ldr	r0, [r7, #28]
 800ecfe:	f00f f82d 	bl	801dd5c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	693a      	ldr	r2, [r7, #16]
 800ed06:	6979      	ldr	r1, [r7, #20]
 800ed08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed0a:	f000 f811 	bl	800ed30 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800ed0e:	e006      	b.n	800ed1e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800ed10:	69f8      	ldr	r0, [r7, #28]
 800ed12:	f00f f823 	bl	801dd5c <sys_arch_unprotect>
 800ed16:	e002      	b.n	800ed1e <event_callback+0x166>
    return;
 800ed18:	bf00      	nop
 800ed1a:	e000      	b.n	800ed1e <event_callback+0x166>
      return;
 800ed1c:	bf00      	nop
  }
  done_socket(sock);
}
 800ed1e:	3728      	adds	r7, #40	; 0x28
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	0802302c 	.word	0x0802302c
 800ed28:	080233a8 	.word	0x080233a8
 800ed2c:	08023080 	.word	0x08023080

0800ed30 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b088      	sub	sp, #32
 800ed34:	af02      	add	r7, sp, #8
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
 800ed3c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ed3e:	4b3e      	ldr	r3, [pc, #248]	; (800ee38 <select_check_waiters+0x108>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	617b      	str	r3, [r7, #20]
 800ed44:	e06f      	b.n	800ee26 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	69db      	ldr	r3, [r3, #28]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d168      	bne.n	800ee20 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	695b      	ldr	r3, [r3, #20]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d009      	beq.n	800ed6e <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	68f9      	ldr	r1, [r7, #12]
 800ed64:	6978      	ldr	r0, [r7, #20]
 800ed66:	f7ff fee3 	bl	800eb30 <lwip_poll_should_wake>
 800ed6a:	6138      	str	r0, [r7, #16]
 800ed6c:	e04d      	b.n	800ee0a <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d014      	beq.n	800ed9e <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d010      	beq.n	800ed9e <select_check_waiters+0x6e>
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	0952      	lsrs	r2, r2, #5
 800ed84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	f002 021f 	and.w	r2, r2, #31
 800ed8e:	2101      	movs	r1, #1
 800ed90:	fa01 f202 	lsl.w	r2, r1, r2
 800ed94:	4013      	ands	r3, r2
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d001      	beq.n	800ed9e <select_check_waiters+0x6e>
            do_signal = 1;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d017      	beq.n	800edd4 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d114      	bne.n	800edd4 <select_check_waiters+0xa4>
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d010      	beq.n	800edd4 <select_check_waiters+0xa4>
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	68db      	ldr	r3, [r3, #12]
 800edb6:	68fa      	ldr	r2, [r7, #12]
 800edb8:	0952      	lsrs	r2, r2, #5
 800edba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	f002 021f 	and.w	r2, r2, #31
 800edc4:	2101      	movs	r1, #1
 800edc6:	fa01 f202 	lsl.w	r2, r1, r2
 800edca:	4013      	ands	r3, r2
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <select_check_waiters+0xa4>
            do_signal = 1;
 800edd0:	2301      	movs	r3, #1
 800edd2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d017      	beq.n	800ee0a <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d114      	bne.n	800ee0a <select_check_waiters+0xda>
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	691b      	ldr	r3, [r3, #16]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d010      	beq.n	800ee0a <select_check_waiters+0xda>
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	691b      	ldr	r3, [r3, #16]
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	0952      	lsrs	r2, r2, #5
 800edf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	f002 021f 	and.w	r2, r2, #31
 800edfa:	2101      	movs	r1, #1
 800edfc:	fa01 f202 	lsl.w	r2, r1, r2
 800ee00:	4013      	ands	r3, r2
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d001      	beq.n	800ee0a <select_check_waiters+0xda>
            do_signal = 1;
 800ee06:	2301      	movs	r3, #1
 800ee08:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d007      	beq.n	800ee20 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2201      	movs	r2, #1
 800ee14:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	3320      	adds	r3, #32
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f00e fef6 	bl	801dc0c <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	617b      	str	r3, [r7, #20]
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d18c      	bne.n	800ed46 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800ee2c:	bf00      	nop
 800ee2e:	bf00      	nop
 800ee30:	3718      	adds	r7, #24
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	20013e74 	.word	0x20013e74

0800ee3c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ee46:	f009 fcdf 	bl	8018808 <sys_timeouts_sleeptime>
 800ee4a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee52:	d10b      	bne.n	800ee6c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ee54:	4813      	ldr	r0, [pc, #76]	; (800eea4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ee56:	f00e ff48 	bl	801dcea <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	6839      	ldr	r1, [r7, #0]
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f00e fe04 	bl	801da6c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ee64:	480f      	ldr	r0, [pc, #60]	; (800eea4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ee66:	f00e ff31 	bl	801dccc <sys_mutex_lock>
    return;
 800ee6a:	e018      	b.n	800ee9e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d102      	bne.n	800ee78 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ee72:	f009 fc8f 	bl	8018794 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ee76:	e7e6      	b.n	800ee46 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ee78:	480a      	ldr	r0, [pc, #40]	; (800eea4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ee7a:	f00e ff36 	bl	801dcea <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	6839      	ldr	r1, [r7, #0]
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f00e fdf2 	bl	801da6c <sys_arch_mbox_fetch>
 800ee88:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ee8a:	4806      	ldr	r0, [pc, #24]	; (800eea4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ee8c:	f00e ff1e 	bl	801dccc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee96:	d102      	bne.n	800ee9e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ee98:	f009 fc7c 	bl	8018794 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ee9c:	e7d3      	b.n	800ee46 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	200176d0 	.word	0x200176d0

0800eea8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800eeb0:	4810      	ldr	r0, [pc, #64]	; (800eef4 <tcpip_thread+0x4c>)
 800eeb2:	f00e ff0b 	bl	801dccc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800eeb6:	4b10      	ldr	r3, [pc, #64]	; (800eef8 <tcpip_thread+0x50>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d005      	beq.n	800eeca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800eebe:	4b0e      	ldr	r3, [pc, #56]	; (800eef8 <tcpip_thread+0x50>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4a0e      	ldr	r2, [pc, #56]	; (800eefc <tcpip_thread+0x54>)
 800eec4:	6812      	ldr	r2, [r2, #0]
 800eec6:	4610      	mov	r0, r2
 800eec8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800eeca:	f107 030c 	add.w	r3, r7, #12
 800eece:	4619      	mov	r1, r3
 800eed0:	480b      	ldr	r0, [pc, #44]	; (800ef00 <tcpip_thread+0x58>)
 800eed2:	f7ff ffb3 	bl	800ee3c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d106      	bne.n	800eeea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800eedc:	4b09      	ldr	r3, [pc, #36]	; (800ef04 <tcpip_thread+0x5c>)
 800eede:	2291      	movs	r2, #145	; 0x91
 800eee0:	4909      	ldr	r1, [pc, #36]	; (800ef08 <tcpip_thread+0x60>)
 800eee2:	480a      	ldr	r0, [pc, #40]	; (800ef0c <tcpip_thread+0x64>)
 800eee4:	f00f fdca 	bl	801ea7c <iprintf>
      continue;
 800eee8:	e003      	b.n	800eef2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f000 f80f 	bl	800ef10 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800eef2:	e7ea      	b.n	800eeca <tcpip_thread+0x22>
 800eef4:	200176d0 	.word	0x200176d0
 800eef8:	20013e78 	.word	0x20013e78
 800eefc:	20013e7c 	.word	0x20013e7c
 800ef00:	20013e80 	.word	0x20013e80
 800ef04:	080233fc 	.word	0x080233fc
 800ef08:	0802342c 	.word	0x0802342c
 800ef0c:	0802344c 	.word	0x0802344c

0800ef10 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d026      	beq.n	800ef6e <tcpip_thread_handle_msg+0x5e>
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	dc2b      	bgt.n	800ef7c <tcpip_thread_handle_msg+0x6c>
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d002      	beq.n	800ef2e <tcpip_thread_handle_msg+0x1e>
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d015      	beq.n	800ef58 <tcpip_thread_handle_msg+0x48>
 800ef2c:	e026      	b.n	800ef7c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	6850      	ldr	r0, [r2, #4]
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	6892      	ldr	r2, [r2, #8]
 800ef3a:	4611      	mov	r1, r2
 800ef3c:	4798      	blx	r3
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d004      	beq.n	800ef4e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f002 fcef 	bl	801192c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ef4e:	6879      	ldr	r1, [r7, #4]
 800ef50:	2009      	movs	r0, #9
 800ef52:	f001 fe09 	bl	8010b68 <memp_free>
      break;
 800ef56:	e018      	b.n	800ef8a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	6892      	ldr	r2, [r2, #8]
 800ef60:	4610      	mov	r0, r2
 800ef62:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ef64:	6879      	ldr	r1, [r7, #4]
 800ef66:	2008      	movs	r0, #8
 800ef68:	f001 fdfe 	bl	8010b68 <memp_free>
      break;
 800ef6c:	e00d      	b.n	800ef8a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	6892      	ldr	r2, [r2, #8]
 800ef76:	4610      	mov	r0, r2
 800ef78:	4798      	blx	r3
      break;
 800ef7a:	e006      	b.n	800ef8a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ef7c:	4b05      	ldr	r3, [pc, #20]	; (800ef94 <tcpip_thread_handle_msg+0x84>)
 800ef7e:	22cf      	movs	r2, #207	; 0xcf
 800ef80:	4905      	ldr	r1, [pc, #20]	; (800ef98 <tcpip_thread_handle_msg+0x88>)
 800ef82:	4806      	ldr	r0, [pc, #24]	; (800ef9c <tcpip_thread_handle_msg+0x8c>)
 800ef84:	f00f fd7a 	bl	801ea7c <iprintf>
      break;
 800ef88:	bf00      	nop
  }
}
 800ef8a:	bf00      	nop
 800ef8c:	3708      	adds	r7, #8
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	080233fc 	.word	0x080233fc
 800ef98:	0802342c 	.word	0x0802342c
 800ef9c:	0802344c 	.word	0x0802344c

0800efa0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b086      	sub	sp, #24
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800efac:	481a      	ldr	r0, [pc, #104]	; (800f018 <tcpip_inpkt+0x78>)
 800efae:	f00e fdb8 	bl	801db22 <sys_mbox_valid>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d105      	bne.n	800efc4 <tcpip_inpkt+0x24>
 800efb8:	4b18      	ldr	r3, [pc, #96]	; (800f01c <tcpip_inpkt+0x7c>)
 800efba:	22fc      	movs	r2, #252	; 0xfc
 800efbc:	4918      	ldr	r1, [pc, #96]	; (800f020 <tcpip_inpkt+0x80>)
 800efbe:	4819      	ldr	r0, [pc, #100]	; (800f024 <tcpip_inpkt+0x84>)
 800efc0:	f00f fd5c 	bl	801ea7c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800efc4:	2009      	movs	r0, #9
 800efc6:	f001 fd7d 	bl	8010ac4 <memp_malloc>
 800efca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d102      	bne.n	800efd8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800efd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efd6:	e01a      	b.n	800f00e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	2200      	movs	r2, #0
 800efdc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	68ba      	ldr	r2, [r7, #8]
 800efe8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800eff0:	6979      	ldr	r1, [r7, #20]
 800eff2:	4809      	ldr	r0, [pc, #36]	; (800f018 <tcpip_inpkt+0x78>)
 800eff4:	f00e fd20 	bl	801da38 <sys_mbox_trypost>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d006      	beq.n	800f00c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800effe:	6979      	ldr	r1, [r7, #20]
 800f000:	2009      	movs	r0, #9
 800f002:	f001 fdb1 	bl	8010b68 <memp_free>
    return ERR_MEM;
 800f006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f00a:	e000      	b.n	800f00e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f00c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3718      	adds	r7, #24
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	20013e80 	.word	0x20013e80
 800f01c:	080233fc 	.word	0x080233fc
 800f020:	08023474 	.word	0x08023474
 800f024:	0802344c 	.word	0x0802344c

0800f028 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f038:	f003 0318 	and.w	r3, r3, #24
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d006      	beq.n	800f04e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f040:	4a08      	ldr	r2, [pc, #32]	; (800f064 <tcpip_input+0x3c>)
 800f042:	6839      	ldr	r1, [r7, #0]
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f7ff ffab 	bl	800efa0 <tcpip_inpkt>
 800f04a:	4603      	mov	r3, r0
 800f04c:	e005      	b.n	800f05a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f04e:	4a06      	ldr	r2, [pc, #24]	; (800f068 <tcpip_input+0x40>)
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7ff ffa4 	bl	800efa0 <tcpip_inpkt>
 800f058:	4603      	mov	r3, r0
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3708      	adds	r7, #8
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	0801d82d 	.word	0x0801d82d
 800f068:	0801c4b1 	.word	0x0801c4b1

0800f06c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f076:	4819      	ldr	r0, [pc, #100]	; (800f0dc <tcpip_try_callback+0x70>)
 800f078:	f00e fd53 	bl	801db22 <sys_mbox_valid>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d106      	bne.n	800f090 <tcpip_try_callback+0x24>
 800f082:	4b17      	ldr	r3, [pc, #92]	; (800f0e0 <tcpip_try_callback+0x74>)
 800f084:	f240 125d 	movw	r2, #349	; 0x15d
 800f088:	4916      	ldr	r1, [pc, #88]	; (800f0e4 <tcpip_try_callback+0x78>)
 800f08a:	4817      	ldr	r0, [pc, #92]	; (800f0e8 <tcpip_try_callback+0x7c>)
 800f08c:	f00f fcf6 	bl	801ea7c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f090:	2008      	movs	r0, #8
 800f092:	f001 fd17 	bl	8010ac4 <memp_malloc>
 800f096:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d102      	bne.n	800f0a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f09e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0a2:	e017      	b.n	800f0d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	683a      	ldr	r2, [r7, #0]
 800f0b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f0b6:	68f9      	ldr	r1, [r7, #12]
 800f0b8:	4808      	ldr	r0, [pc, #32]	; (800f0dc <tcpip_try_callback+0x70>)
 800f0ba:	f00e fcbd 	bl	801da38 <sys_mbox_trypost>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d006      	beq.n	800f0d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f0c4:	68f9      	ldr	r1, [r7, #12]
 800f0c6:	2008      	movs	r0, #8
 800f0c8:	f001 fd4e 	bl	8010b68 <memp_free>
    return ERR_MEM;
 800f0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0d0:	e000      	b.n	800f0d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3710      	adds	r7, #16
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	20013e80 	.word	0x20013e80
 800f0e0:	080233fc 	.word	0x080233fc
 800f0e4:	08023474 	.word	0x08023474
 800f0e8:	0802344c 	.word	0x0802344c

0800f0ec <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f0f8:	4806      	ldr	r0, [pc, #24]	; (800f114 <tcpip_send_msg_wait_sem+0x28>)
 800f0fa:	f00e fde7 	bl	801dccc <sys_mutex_lock>
  fn(apimsg);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	68b8      	ldr	r0, [r7, #8]
 800f102:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f104:	4803      	ldr	r0, [pc, #12]	; (800f114 <tcpip_send_msg_wait_sem+0x28>)
 800f106:	f00e fdf0 	bl	801dcea <sys_mutex_unlock>
  return ERR_OK;
 800f10a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	200176d0 	.word	0x200176d0

0800f118 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af02      	add	r7, sp, #8
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f122:	f001 f845 	bl	80101b0 <lwip_init>

  tcpip_init_done = initfunc;
 800f126:	4a17      	ldr	r2, [pc, #92]	; (800f184 <tcpip_init+0x6c>)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f12c:	4a16      	ldr	r2, [pc, #88]	; (800f188 <tcpip_init+0x70>)
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f132:	2106      	movs	r1, #6
 800f134:	4815      	ldr	r0, [pc, #84]	; (800f18c <tcpip_init+0x74>)
 800f136:	f00e fc4f 	bl	801d9d8 <sys_mbox_new>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d006      	beq.n	800f14e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f140:	4b13      	ldr	r3, [pc, #76]	; (800f190 <tcpip_init+0x78>)
 800f142:	f240 2261 	movw	r2, #609	; 0x261
 800f146:	4913      	ldr	r1, [pc, #76]	; (800f194 <tcpip_init+0x7c>)
 800f148:	4813      	ldr	r0, [pc, #76]	; (800f198 <tcpip_init+0x80>)
 800f14a:	f00f fc97 	bl	801ea7c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f14e:	4813      	ldr	r0, [pc, #76]	; (800f19c <tcpip_init+0x84>)
 800f150:	f00e fda2 	bl	801dc98 <sys_mutex_new>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d006      	beq.n	800f168 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f15a:	4b0d      	ldr	r3, [pc, #52]	; (800f190 <tcpip_init+0x78>)
 800f15c:	f240 2265 	movw	r2, #613	; 0x265
 800f160:	490f      	ldr	r1, [pc, #60]	; (800f1a0 <tcpip_init+0x88>)
 800f162:	480d      	ldr	r0, [pc, #52]	; (800f198 <tcpip_init+0x80>)
 800f164:	f00f fc8a 	bl	801ea7c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f168:	2300      	movs	r3, #0
 800f16a:	9300      	str	r3, [sp, #0]
 800f16c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f170:	2200      	movs	r2, #0
 800f172:	490c      	ldr	r1, [pc, #48]	; (800f1a4 <tcpip_init+0x8c>)
 800f174:	480c      	ldr	r0, [pc, #48]	; (800f1a8 <tcpip_init+0x90>)
 800f176:	f00e fdc5 	bl	801dd04 <sys_thread_new>
}
 800f17a:	bf00      	nop
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	20013e78 	.word	0x20013e78
 800f188:	20013e7c 	.word	0x20013e7c
 800f18c:	20013e80 	.word	0x20013e80
 800f190:	080233fc 	.word	0x080233fc
 800f194:	08023484 	.word	0x08023484
 800f198:	0802344c 	.word	0x0802344c
 800f19c:	200176d0 	.word	0x200176d0
 800f1a0:	080234a8 	.word	0x080234a8
 800f1a4:	0800eea9 	.word	0x0800eea9
 800f1a8:	080234cc 	.word	0x080234cc

0800f1ac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f1b6:	88fb      	ldrh	r3, [r7, #6]
 800f1b8:	021b      	lsls	r3, r3, #8
 800f1ba:	b21a      	sxth	r2, r3
 800f1bc:	88fb      	ldrh	r3, [r7, #6]
 800f1be:	0a1b      	lsrs	r3, r3, #8
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	b21b      	sxth	r3, r3
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	b21b      	sxth	r3, r3
 800f1c8:	b29b      	uxth	r3, r3
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	370c      	adds	r7, #12
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d4:	4770      	bx	lr

0800f1d6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f1d6:	b480      	push	{r7}
 800f1d8:	b083      	sub	sp, #12
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	061a      	lsls	r2, r3, #24
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	021b      	lsls	r3, r3, #8
 800f1e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f1ea:	431a      	orrs	r2, r3
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	0a1b      	lsrs	r3, r3, #8
 800f1f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f1f4:	431a      	orrs	r2, r3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	0e1b      	lsrs	r3, r3, #24
 800f1fa:	4313      	orrs	r3, r2
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	370c      	adds	r7, #12
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr

0800f208 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 800f208:	b480      	push	{r7}
 800f20a:	b087      	sub	sp, #28
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	60b9      	str	r1, [r7, #8]
 800f212:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	1c5a      	adds	r2, r3, #1
 800f218:	60fa      	str	r2, [r7, #12]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	1c5a      	adds	r2, r3, #1
 800f222:	60ba      	str	r2, [r7, #8]
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 800f228:	7dfa      	ldrb	r2, [r7, #23]
 800f22a:	7dbb      	ldrb	r3, [r7, #22]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d016      	beq.n	800f25e <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 800f230:	7dfb      	ldrb	r3, [r7, #23]
 800f232:	f043 0320 	orr.w	r3, r3, #32
 800f236:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800f238:	7d7b      	ldrb	r3, [r7, #21]
 800f23a:	2b60      	cmp	r3, #96	; 0x60
 800f23c:	d90c      	bls.n	800f258 <lwip_strnicmp+0x50>
 800f23e:	7d7b      	ldrb	r3, [r7, #21]
 800f240:	2b7a      	cmp	r3, #122	; 0x7a
 800f242:	d809      	bhi.n	800f258 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800f244:	7dbb      	ldrb	r3, [r7, #22]
 800f246:	f043 0320 	orr.w	r3, r3, #32
 800f24a:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 800f24c:	7d7a      	ldrb	r2, [r7, #21]
 800f24e:	7d3b      	ldrb	r3, [r7, #20]
 800f250:	429a      	cmp	r2, r3
 800f252:	d003      	beq.n	800f25c <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800f254:	2301      	movs	r3, #1
 800f256:	e00c      	b.n	800f272 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800f258:	2301      	movs	r3, #1
 800f25a:	e00a      	b.n	800f272 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800f25c:	bf00      	nop
      }
    }
    len--;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	3b01      	subs	r3, #1
 800f262:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d002      	beq.n	800f270 <lwip_strnicmp+0x68>
 800f26a:	7dfb      	ldrb	r3, [r7, #23]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d1d1      	bne.n	800f214 <lwip_strnicmp+0xc>
  return 0;
 800f270:	2300      	movs	r3, #0
}
 800f272:	4618      	mov	r0, r3
 800f274:	371c      	adds	r7, #28
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800f27e:	b480      	push	{r7}
 800f280:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800f282:	bf00      	nop
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	4603      	mov	r3, r0
 800f294:	6039      	str	r1, [r7, #0]
 800f296:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800f298:	79fb      	ldrb	r3, [r7, #7]
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d80f      	bhi.n	800f2be <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d006      	beq.n	800f2b2 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	4909      	ldr	r1, [pc, #36]	; (800f2cc <dns_setserver+0x40>)
 800f2a8:	683a      	ldr	r2, [r7, #0]
 800f2aa:	6812      	ldr	r2, [r2, #0]
 800f2ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800f2b0:	e005      	b.n	800f2be <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800f2b2:	79fb      	ldrb	r3, [r7, #7]
 800f2b4:	4905      	ldr	r1, [pc, #20]	; (800f2cc <dns_setserver+0x40>)
 800f2b6:	4a06      	ldr	r2, [pc, #24]	; (800f2d0 <dns_setserver+0x44>)
 800f2b8:	6812      	ldr	r2, [r2, #0]
 800f2ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f2be:	bf00      	nop
 800f2c0:	370c      	adds	r7, #12
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	20014308 	.word	0x20014308
 800f2d0:	080266c0 	.word	0x080266c0

0800f2d4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800f2d8:	f000 fc54 	bl	800fb84 <dns_check_entries>
}
 800f2dc:	bf00      	nop
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	73fb      	strb	r3, [r7, #15]
 800f2ee:	e02e      	b.n	800f34e <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800f2f0:	7bfa      	ldrb	r2, [r7, #15]
 800f2f2:	491b      	ldr	r1, [pc, #108]	; (800f360 <dns_lookup+0x80>)
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	011b      	lsls	r3, r3, #4
 800f2f8:	4413      	add	r3, r2
 800f2fa:	011b      	lsls	r3, r3, #4
 800f2fc:	440b      	add	r3, r1
 800f2fe:	330a      	adds	r3, #10
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	2b03      	cmp	r3, #3
 800f304:	d120      	bne.n	800f348 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 800f306:	7bfa      	ldrb	r2, [r7, #15]
 800f308:	4613      	mov	r3, r2
 800f30a:	011b      	lsls	r3, r3, #4
 800f30c:	4413      	add	r3, r2
 800f30e:	011b      	lsls	r3, r3, #4
 800f310:	3310      	adds	r3, #16
 800f312:	4a13      	ldr	r2, [pc, #76]	; (800f360 <dns_lookup+0x80>)
 800f314:	4413      	add	r3, r2
 800f316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f31a:	4619      	mov	r1, r3
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f7ff ff73 	bl	800f208 <lwip_strnicmp>
 800f322:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800f324:	2b00      	cmp	r3, #0
 800f326:	d10f      	bne.n	800f348 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00a      	beq.n	800f344 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 800f32e:	7bfa      	ldrb	r2, [r7, #15]
 800f330:	490b      	ldr	r1, [pc, #44]	; (800f360 <dns_lookup+0x80>)
 800f332:	4613      	mov	r3, r2
 800f334:	011b      	lsls	r3, r3, #4
 800f336:	4413      	add	r3, r2
 800f338:	011b      	lsls	r3, r3, #4
 800f33a:	440b      	add	r3, r1
 800f33c:	3304      	adds	r3, #4
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	e007      	b.n	800f358 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f348:	7bfb      	ldrb	r3, [r7, #15]
 800f34a:	3301      	adds	r3, #1
 800f34c:	73fb      	strb	r3, [r7, #15]
 800f34e:	7bfb      	ldrb	r3, [r7, #15]
 800f350:	2b03      	cmp	r3, #3
 800f352:	d9cd      	bls.n	800f2f0 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 800f354:	f06f 030f 	mvn.w	r3, #15
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3710      	adds	r7, #16
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}
 800f360:	20013e98 	.word	0x20013e98

0800f364 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b088      	sub	sp, #32
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	4613      	mov	r3, r2
 800f370:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 800f372:	88fb      	ldrh	r3, [r7, #6]
 800f374:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 800f376:	8b7b      	ldrh	r3, [r7, #26]
 800f378:	4619      	mov	r1, r3
 800f37a:	68b8      	ldr	r0, [r7, #8]
 800f37c:	f002 feb8 	bl	80120f0 <pbuf_try_get_at>
 800f380:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	2b00      	cmp	r3, #0
 800f386:	db04      	blt.n	800f392 <dns_compare_name+0x2e>
 800f388:	8b7b      	ldrh	r3, [r7, #26]
 800f38a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f38e:	4293      	cmp	r3, r2
 800f390:	d102      	bne.n	800f398 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 800f392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f396:	e06c      	b.n	800f472 <dns_compare_name+0x10e>
    }
    response_offset++;
 800f398:	8b7b      	ldrh	r3, [r7, #26]
 800f39a:	3301      	adds	r3, #1
 800f39c:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f3a4:	2bc0      	cmp	r3, #192	; 0xc0
 800f3a6:	d144      	bne.n	800f432 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 800f3a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3ac:	e061      	b.n	800f472 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 800f3ae:	8b7b      	ldrh	r3, [r7, #26]
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	68b8      	ldr	r0, [r7, #8]
 800f3b4:	f002 fe9c 	bl	80120f0 <pbuf_try_get_at>
 800f3b8:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	da02      	bge.n	800f3c6 <dns_compare_name+0x62>
          return 0xFFFF;
 800f3c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3c4:	e055      	b.n	800f472 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	74fb      	strb	r3, [r7, #19]
 800f3cc:	7cfb      	ldrb	r3, [r7, #19]
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	4a2a      	ldr	r2, [pc, #168]	; (800f47c <dns_compare_name+0x118>)
 800f3d2:	4413      	add	r3, r2
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	f003 0303 	and.w	r3, r3, #3
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d103      	bne.n	800f3e6 <dns_compare_name+0x82>
 800f3de:	7cfb      	ldrb	r3, [r7, #19]
 800f3e0:	f103 0220 	add.w	r2, r3, #32
 800f3e4:	e000      	b.n	800f3e8 <dns_compare_name+0x84>
 800f3e6:	7cfa      	ldrb	r2, [r7, #19]
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	74bb      	strb	r3, [r7, #18]
 800f3ec:	7cbb      	ldrb	r3, [r7, #18]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	4922      	ldr	r1, [pc, #136]	; (800f47c <dns_compare_name+0x118>)
 800f3f2:	440b      	add	r3, r1
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	f003 0303 	and.w	r3, r3, #3
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d102      	bne.n	800f404 <dns_compare_name+0xa0>
 800f3fe:	7cbb      	ldrb	r3, [r7, #18]
 800f400:	3320      	adds	r3, #32
 800f402:	e000      	b.n	800f406 <dns_compare_name+0xa2>
 800f404:	7cbb      	ldrb	r3, [r7, #18]
 800f406:	429a      	cmp	r2, r3
 800f408:	d002      	beq.n	800f410 <dns_compare_name+0xac>
          return 0xFFFF;
 800f40a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f40e:	e030      	b.n	800f472 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 800f410:	8b7b      	ldrh	r3, [r7, #26]
 800f412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f416:	4293      	cmp	r3, r2
 800f418:	d102      	bne.n	800f420 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 800f41a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f41e:	e028      	b.n	800f472 <dns_compare_name+0x10e>
        }
        response_offset++;
 800f420:	8b7b      	ldrh	r3, [r7, #26]
 800f422:	3301      	adds	r3, #1
 800f424:	837b      	strh	r3, [r7, #26]
        ++query;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	3301      	adds	r3, #1
 800f42a:	60fb      	str	r3, [r7, #12]
        --n;
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	3b01      	subs	r3, #1
 800f430:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	2b00      	cmp	r3, #0
 800f436:	dcba      	bgt.n	800f3ae <dns_compare_name+0x4a>
      }
      ++query;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	3301      	adds	r3, #1
 800f43c:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 800f43e:	8b7b      	ldrh	r3, [r7, #26]
 800f440:	4619      	mov	r1, r3
 800f442:	68b8      	ldr	r0, [r7, #8]
 800f444:	f002 fe54 	bl	80120f0 <pbuf_try_get_at>
 800f448:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	da02      	bge.n	800f456 <dns_compare_name+0xf2>
      return 0xFFFF;
 800f450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f454:	e00d      	b.n	800f472 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d18c      	bne.n	800f376 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 800f45c:	8b7b      	ldrh	r3, [r7, #26]
 800f45e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f462:	4293      	cmp	r3, r2
 800f464:	d102      	bne.n	800f46c <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 800f466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f46a:	e002      	b.n	800f472 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 800f46c:	8b7b      	ldrh	r3, [r7, #26]
 800f46e:	3301      	adds	r3, #1
 800f470:	b29b      	uxth	r3, r3
}
 800f472:	4618      	mov	r0, r3
 800f474:	3720      	adds	r7, #32
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	080266dc 	.word	0x080266dc

0800f480 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 800f48c:	887b      	ldrh	r3, [r7, #2]
 800f48e:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 800f490:	89fb      	ldrh	r3, [r7, #14]
 800f492:	1c5a      	adds	r2, r3, #1
 800f494:	81fa      	strh	r2, [r7, #14]
 800f496:	4619      	mov	r1, r3
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f002 fe29 	bl	80120f0 <pbuf_try_get_at>
 800f49e:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	db02      	blt.n	800f4ac <dns_skip_name+0x2c>
 800f4a6:	89fb      	ldrh	r3, [r7, #14]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d102      	bne.n	800f4b2 <dns_skip_name+0x32>
      return 0xFFFF;
 800f4ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4b0:	e02f      	b.n	800f512 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f4b8:	2bc0      	cmp	r3, #192	; 0xc0
 800f4ba:	d01e      	beq.n	800f4fa <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 800f4bc:	89fa      	ldrh	r2, [r7, #14]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	8912      	ldrh	r2, [r2, #8]
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	db02      	blt.n	800f4d0 <dns_skip_name+0x50>
        return 0xFFFF;
 800f4ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4ce:	e020      	b.n	800f512 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	89fb      	ldrh	r3, [r7, #14]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 800f4da:	89fb      	ldrh	r3, [r7, #14]
 800f4dc:	4619      	mov	r1, r3
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f002 fe06 	bl	80120f0 <pbuf_try_get_at>
 800f4e4:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	da02      	bge.n	800f4f2 <dns_skip_name+0x72>
      return 0xFFFF;
 800f4ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4f0:	e00f      	b.n	800f512 <dns_skip_name+0x92>
    }
  } while (n != 0);
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d1cb      	bne.n	800f490 <dns_skip_name+0x10>
 800f4f8:	e000      	b.n	800f4fc <dns_skip_name+0x7c>
      break;
 800f4fa:	bf00      	nop

  if (offset == 0xFFFF) {
 800f4fc:	89fb      	ldrh	r3, [r7, #14]
 800f4fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f502:	4293      	cmp	r3, r2
 800f504:	d102      	bne.n	800f50c <dns_skip_name+0x8c>
    return 0xFFFF;
 800f506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f50a:	e002      	b.n	800f512 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 800f50c:	89fb      	ldrh	r3, [r7, #14]
 800f50e:	3301      	adds	r3, #1
 800f510:	b29b      	uxth	r3, r3
}
 800f512:	4618      	mov	r0, r3
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
	...

0800f51c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b090      	sub	sp, #64	; 0x40
 800f520:	af00      	add	r7, sp, #0
 800f522:	4603      	mov	r3, r0
 800f524:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800f526:	79fa      	ldrb	r2, [r7, #7]
 800f528:	4613      	mov	r3, r2
 800f52a:	011b      	lsls	r3, r3, #4
 800f52c:	4413      	add	r3, r2
 800f52e:	011b      	lsls	r3, r3, #4
 800f530:	4a6c      	ldr	r2, [pc, #432]	; (800f6e4 <dns_send+0x1c8>)
 800f532:	4413      	add	r3, r2
 800f534:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	7adb      	ldrb	r3, [r3, #11]
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d906      	bls.n	800f54c <dns_send+0x30>
 800f53e:	4b6a      	ldr	r3, [pc, #424]	; (800f6e8 <dns_send+0x1cc>)
 800f540:	f240 22fa 	movw	r2, #762	; 0x2fa
 800f544:	4969      	ldr	r1, [pc, #420]	; (800f6ec <dns_send+0x1d0>)
 800f546:	486a      	ldr	r0, [pc, #424]	; (800f6f0 <dns_send+0x1d4>)
 800f548:	f00f fa98 	bl	801ea7c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54e:	7adb      	ldrb	r3, [r3, #11]
 800f550:	461a      	mov	r2, r3
 800f552:	4b68      	ldr	r3, [pc, #416]	; (800f6f4 <dns_send+0x1d8>)
 800f554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d109      	bne.n	800f570 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800f55c:	79fb      	ldrb	r3, [r7, #7]
 800f55e:	2100      	movs	r1, #0
 800f560:	4618      	mov	r0, r3
 800f562:	f000 f959 	bl	800f818 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800f566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f568:	2200      	movs	r2, #0
 800f56a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	e0b4      	b.n	800f6da <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800f570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f572:	3310      	adds	r3, #16
 800f574:	4618      	mov	r0, r3
 800f576:	f7f0 fe2b 	bl	80001d0 <strlen>
 800f57a:	4603      	mov	r3, r0
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	3312      	adds	r3, #18
 800f580:	b29b      	uxth	r3, r3
 800f582:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f586:	4619      	mov	r1, r3
 800f588:	2036      	movs	r0, #54	; 0x36
 800f58a:	f001 feb9 	bl	8011300 <pbuf_alloc>
 800f58e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800f590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f592:	2b00      	cmp	r3, #0
 800f594:	f000 8095 	beq.w	800f6c2 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800f598:	f107 0310 	add.w	r3, r7, #16
 800f59c:	220c      	movs	r2, #12
 800f59e:	2100      	movs	r1, #0
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f00e fd4f 	bl	801e044 <memset>
    hdr.id = lwip_htons(entry->txid);
 800f5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a8:	891b      	ldrh	r3, [r3, #8]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7ff fdfe 	bl	800f1ac <lwip_htons>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800f5b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f5bc:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800f5be:	f107 0310 	add.w	r3, r7, #16
 800f5c2:	220c      	movs	r2, #12
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5c8:	f002 fc64 	bl	8011e94 <pbuf_take>
    hostname = entry->name;
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ce:	3310      	adds	r3, #16
 800f5d0:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800f5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800f5d8:	230c      	movs	r3, #12
 800f5da:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5de:	3301      	adds	r3, #1
 800f5e0:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800f5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f5ec:	e007      	b.n	800f5fe <dns_send+0xe2>
        ++n;
 800f5ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	2b2e      	cmp	r3, #46	; 0x2e
 800f604:	d003      	beq.n	800f60e <dns_send+0xf2>
 800f606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d1ef      	bne.n	800f5ee <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800f60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f612:	1ad3      	subs	r3, r2, r3
 800f614:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800f616:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800f618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f61c:	4413      	add	r3, r2
 800f61e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f622:	4293      	cmp	r3, r2
 800f624:	dc53      	bgt.n	800f6ce <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800f626:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f62a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f62c:	4619      	mov	r1, r3
 800f62e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f630:	f002 fd80 	bl	8012134 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800f634:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f636:	3301      	adds	r3, #1
 800f638:	b29b      	uxth	r3, r3
 800f63a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f63c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f63e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f640:	f002 fcba 	bl	8011fb8 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800f644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f648:	b29a      	uxth	r2, r3
 800f64a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f64c:	4413      	add	r3, r2
 800f64e:	b29b      	uxth	r3, r3
 800f650:	3301      	adds	r3, #1
 800f652:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800f654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1bf      	bne.n	800f5dc <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800f65c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f65e:	2200      	movs	r2, #0
 800f660:	4619      	mov	r1, r3
 800f662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f664:	f002 fd66 	bl	8012134 <pbuf_put_at>
    query_idx++;
 800f668:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f66a:	3301      	adds	r3, #1
 800f66c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800f66e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f672:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800f674:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f678:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800f67a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f67c:	f107 010c 	add.w	r1, r7, #12
 800f680:	2204      	movs	r2, #4
 800f682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f684:	f002 fc98 	bl	8011fb8 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	7bdb      	ldrb	r3, [r3, #15]
 800f68c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800f690:	2335      	movs	r3, #53	; 0x35
 800f692:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	7adb      	ldrb	r3, [r3, #11]
 800f698:	009b      	lsls	r3, r3, #2
 800f69a:	4a16      	ldr	r2, [pc, #88]	; (800f6f4 <dns_send+0x1d8>)
 800f69c:	4413      	add	r3, r2
 800f69e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800f6a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f6a4:	4a14      	ldr	r2, [pc, #80]	; (800f6f8 <dns_send+0x1dc>)
 800f6a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f6aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6ac:	69fa      	ldr	r2, [r7, #28]
 800f6ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6b0:	f009 fad8 	bl	8018c64 <udp_sendto>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800f6ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6bc:	f002 f936 	bl	801192c <pbuf_free>
 800f6c0:	e002      	b.n	800f6c8 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800f6c2:	23ff      	movs	r3, #255	; 0xff
 800f6c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800f6c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f6cc:	e005      	b.n	800f6da <dns_send+0x1be>
        goto overflow_return;
 800f6ce:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800f6d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6d2:	f002 f92b 	bl	801192c <pbuf_free>
  return ERR_VAL;
 800f6d6:	f06f 0305 	mvn.w	r3, #5
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3740      	adds	r7, #64	; 0x40
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	20013e98 	.word	0x20013e98
 800f6e8:	080234dc 	.word	0x080234dc
 800f6ec:	0802350c 	.word	0x0802350c
 800f6f0:	08023524 	.word	0x08023524
 800f6f4:	20014308 	.word	0x20014308
 800f6f8:	20013e84 	.word	0x20013e84

0800f6fc <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800f702:	202e      	movs	r0, #46	; 0x2e
 800f704:	f009 fdfb 	bl	80192fe <udp_new_ip_type>
 800f708:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d101      	bne.n	800f714 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 800f710:	2300      	movs	r3, #0
 800f712:	e026      	b.n	800f762 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 800f714:	f00f fa40 	bl	801eb98 <rand>
 800f718:	4603      	mov	r3, r0
 800f71a:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 800f71c:	88fb      	ldrh	r3, [r7, #6]
 800f71e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f722:	d308      	bcc.n	800f736 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 800f724:	88fb      	ldrh	r3, [r7, #6]
 800f726:	461a      	mov	r2, r3
 800f728:	4910      	ldr	r1, [pc, #64]	; (800f76c <dns_alloc_random_port+0x70>)
 800f72a:	68b8      	ldr	r0, [r7, #8]
 800f72c:	f009 fc50 	bl	8018fd0 <udp_bind>
 800f730:	4603      	mov	r3, r0
 800f732:	73fb      	strb	r3, [r7, #15]
 800f734:	e001      	b.n	800f73a <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 800f736:	23f8      	movs	r3, #248	; 0xf8
 800f738:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 800f73a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f73e:	f113 0f08 	cmn.w	r3, #8
 800f742:	d0e7      	beq.n	800f714 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 800f744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d004      	beq.n	800f756 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 800f74c:	68b8      	ldr	r0, [r7, #8]
 800f74e:	f009 fd7d 	bl	801924c <udp_remove>
    return NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	e005      	b.n	800f762 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 800f756:	2200      	movs	r2, #0
 800f758:	4905      	ldr	r1, [pc, #20]	; (800f770 <dns_alloc_random_port+0x74>)
 800f75a:	68b8      	ldr	r0, [r7, #8]
 800f75c:	f009 fd56 	bl	801920c <udp_recv>
  return pcb;
 800f760:	68bb      	ldr	r3, [r7, #8]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3710      	adds	r7, #16
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	080266c0 	.word	0x080266c0
 800f770:	0800fc1d 	.word	0x0800fc1d

0800f774 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 800f774:	b590      	push	{r4, r7, lr}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800f77a:	2300      	movs	r3, #0
 800f77c:	71fb      	strb	r3, [r7, #7]
 800f77e:	e008      	b.n	800f792 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 800f780:	79fb      	ldrb	r3, [r7, #7]
 800f782:	4a23      	ldr	r2, [pc, #140]	; (800f810 <dns_alloc_pcb+0x9c>)
 800f784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d006      	beq.n	800f79a <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800f78c:	79fb      	ldrb	r3, [r7, #7]
 800f78e:	3301      	adds	r3, #1
 800f790:	71fb      	strb	r3, [r7, #7]
 800f792:	79fb      	ldrb	r3, [r7, #7]
 800f794:	2b03      	cmp	r3, #3
 800f796:	d9f3      	bls.n	800f780 <dns_alloc_pcb+0xc>
 800f798:	e000      	b.n	800f79c <dns_alloc_pcb+0x28>
      break;
 800f79a:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 800f79c:	79fb      	ldrb	r3, [r7, #7]
 800f79e:	2b03      	cmp	r3, #3
 800f7a0:	d811      	bhi.n	800f7c6 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 800f7a2:	79fc      	ldrb	r4, [r7, #7]
 800f7a4:	f7ff ffaa 	bl	800f6fc <dns_alloc_random_port>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	4a19      	ldr	r2, [pc, #100]	; (800f810 <dns_alloc_pcb+0x9c>)
 800f7ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 800f7b0:	79fb      	ldrb	r3, [r7, #7]
 800f7b2:	4a17      	ldr	r2, [pc, #92]	; (800f810 <dns_alloc_pcb+0x9c>)
 800f7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d004      	beq.n	800f7c6 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 800f7bc:	4a15      	ldr	r2, [pc, #84]	; (800f814 <dns_alloc_pcb+0xa0>)
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	7013      	strb	r3, [r2, #0]
      return i;
 800f7c2:	79fb      	ldrb	r3, [r7, #7]
 800f7c4:	e020      	b.n	800f808 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	71fb      	strb	r3, [r7, #7]
 800f7ca:	4b12      	ldr	r3, [pc, #72]	; (800f814 <dns_alloc_pcb+0xa0>)
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	71bb      	strb	r3, [r7, #6]
 800f7d2:	e015      	b.n	800f800 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 800f7d4:	79bb      	ldrb	r3, [r7, #6]
 800f7d6:	2b03      	cmp	r3, #3
 800f7d8:	d901      	bls.n	800f7de <dns_alloc_pcb+0x6a>
      idx = 0;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 800f7de:	79bb      	ldrb	r3, [r7, #6]
 800f7e0:	4a0b      	ldr	r2, [pc, #44]	; (800f810 <dns_alloc_pcb+0x9c>)
 800f7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d004      	beq.n	800f7f4 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 800f7ea:	4a0a      	ldr	r2, [pc, #40]	; (800f814 <dns_alloc_pcb+0xa0>)
 800f7ec:	79bb      	ldrb	r3, [r7, #6]
 800f7ee:	7013      	strb	r3, [r2, #0]
      return idx;
 800f7f0:	79bb      	ldrb	r3, [r7, #6]
 800f7f2:	e009      	b.n	800f808 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800f7f4:	79fb      	ldrb	r3, [r7, #7]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	71fb      	strb	r3, [r7, #7]
 800f7fa:	79bb      	ldrb	r3, [r7, #6]
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	71bb      	strb	r3, [r7, #6]
 800f800:	79fb      	ldrb	r3, [r7, #7]
 800f802:	2b03      	cmp	r3, #3
 800f804:	d9e6      	bls.n	800f7d4 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 800f806:	2304      	movs	r3, #4
}
 800f808:	4618      	mov	r0, r3
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd90      	pop	{r4, r7, pc}
 800f810:	20013e84 	.word	0x20013e84
 800f814:	20013e94 	.word	0x20013e94

0800f818 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800f818:	b590      	push	{r4, r7, lr}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	4603      	mov	r3, r0
 800f820:	6039      	str	r1, [r7, #0]
 800f822:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f824:	2300      	movs	r3, #0
 800f826:	73fb      	strb	r3, [r7, #15]
 800f828:	e03d      	b.n	800f8a6 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800f82a:	7bfa      	ldrb	r2, [r7, #15]
 800f82c:	4957      	ldr	r1, [pc, #348]	; (800f98c <dns_call_found+0x174>)
 800f82e:	4613      	mov	r3, r2
 800f830:	005b      	lsls	r3, r3, #1
 800f832:	4413      	add	r3, r2
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	440b      	add	r3, r1
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d030      	beq.n	800f8a0 <dns_call_found+0x88>
 800f83e:	7bfa      	ldrb	r2, [r7, #15]
 800f840:	4952      	ldr	r1, [pc, #328]	; (800f98c <dns_call_found+0x174>)
 800f842:	4613      	mov	r3, r2
 800f844:	005b      	lsls	r3, r3, #1
 800f846:	4413      	add	r3, r2
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	440b      	add	r3, r1
 800f84c:	3308      	adds	r3, #8
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	79fa      	ldrb	r2, [r7, #7]
 800f852:	429a      	cmp	r2, r3
 800f854:	d124      	bne.n	800f8a0 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800f856:	7bfa      	ldrb	r2, [r7, #15]
 800f858:	494c      	ldr	r1, [pc, #304]	; (800f98c <dns_call_found+0x174>)
 800f85a:	4613      	mov	r3, r2
 800f85c:	005b      	lsls	r3, r3, #1
 800f85e:	4413      	add	r3, r2
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	440b      	add	r3, r1
 800f864:	681c      	ldr	r4, [r3, #0]
 800f866:	79fa      	ldrb	r2, [r7, #7]
 800f868:	4613      	mov	r3, r2
 800f86a:	011b      	lsls	r3, r3, #4
 800f86c:	4413      	add	r3, r2
 800f86e:	011b      	lsls	r3, r3, #4
 800f870:	3310      	adds	r3, #16
 800f872:	4a47      	ldr	r2, [pc, #284]	; (800f990 <dns_call_found+0x178>)
 800f874:	1898      	adds	r0, r3, r2
 800f876:	7bfa      	ldrb	r2, [r7, #15]
 800f878:	4944      	ldr	r1, [pc, #272]	; (800f98c <dns_call_found+0x174>)
 800f87a:	4613      	mov	r3, r2
 800f87c:	005b      	lsls	r3, r3, #1
 800f87e:	4413      	add	r3, r2
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	440b      	add	r3, r1
 800f884:	3304      	adds	r3, #4
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	461a      	mov	r2, r3
 800f88a:	6839      	ldr	r1, [r7, #0]
 800f88c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800f88e:	7bfa      	ldrb	r2, [r7, #15]
 800f890:	493e      	ldr	r1, [pc, #248]	; (800f98c <dns_call_found+0x174>)
 800f892:	4613      	mov	r3, r2
 800f894:	005b      	lsls	r3, r3, #1
 800f896:	4413      	add	r3, r2
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	440b      	add	r3, r1
 800f89c:	2200      	movs	r2, #0
 800f89e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f8a0:	7bfb      	ldrb	r3, [r7, #15]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	73fb      	strb	r3, [r7, #15]
 800f8a6:	7bfb      	ldrb	r3, [r7, #15]
 800f8a8:	2b03      	cmp	r3, #3
 800f8aa:	d9be      	bls.n	800f82a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	73fb      	strb	r3, [r7, #15]
 800f8b0:	e031      	b.n	800f916 <dns_call_found+0xfe>
    if (i == idx) {
 800f8b2:	7bfa      	ldrb	r2, [r7, #15]
 800f8b4:	79fb      	ldrb	r3, [r7, #7]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d029      	beq.n	800f90e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800f8ba:	7bfa      	ldrb	r2, [r7, #15]
 800f8bc:	4934      	ldr	r1, [pc, #208]	; (800f990 <dns_call_found+0x178>)
 800f8be:	4613      	mov	r3, r2
 800f8c0:	011b      	lsls	r3, r3, #4
 800f8c2:	4413      	add	r3, r2
 800f8c4:	011b      	lsls	r3, r3, #4
 800f8c6:	440b      	add	r3, r1
 800f8c8:	330a      	adds	r3, #10
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	2b02      	cmp	r3, #2
 800f8ce:	d11f      	bne.n	800f910 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800f8d0:	7bfa      	ldrb	r2, [r7, #15]
 800f8d2:	492f      	ldr	r1, [pc, #188]	; (800f990 <dns_call_found+0x178>)
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	011b      	lsls	r3, r3, #4
 800f8d8:	4413      	add	r3, r2
 800f8da:	011b      	lsls	r3, r3, #4
 800f8dc:	440b      	add	r3, r1
 800f8de:	330f      	adds	r3, #15
 800f8e0:	7819      	ldrb	r1, [r3, #0]
 800f8e2:	79fa      	ldrb	r2, [r7, #7]
 800f8e4:	482a      	ldr	r0, [pc, #168]	; (800f990 <dns_call_found+0x178>)
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	011b      	lsls	r3, r3, #4
 800f8ea:	4413      	add	r3, r2
 800f8ec:	011b      	lsls	r3, r3, #4
 800f8ee:	4403      	add	r3, r0
 800f8f0:	330f      	adds	r3, #15
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	4299      	cmp	r1, r3
 800f8f6:	d10b      	bne.n	800f910 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f8f8:	79fa      	ldrb	r2, [r7, #7]
 800f8fa:	4925      	ldr	r1, [pc, #148]	; (800f990 <dns_call_found+0x178>)
 800f8fc:	4613      	mov	r3, r2
 800f8fe:	011b      	lsls	r3, r3, #4
 800f900:	4413      	add	r3, r2
 800f902:	011b      	lsls	r3, r3, #4
 800f904:	440b      	add	r3, r1
 800f906:	330f      	adds	r3, #15
 800f908:	2204      	movs	r2, #4
 800f90a:	701a      	strb	r2, [r3, #0]
        break;
 800f90c:	e006      	b.n	800f91c <dns_call_found+0x104>
      continue; /* only check other requests */
 800f90e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f910:	7bfb      	ldrb	r3, [r7, #15]
 800f912:	3301      	adds	r3, #1
 800f914:	73fb      	strb	r3, [r7, #15]
 800f916:	7bfb      	ldrb	r3, [r7, #15]
 800f918:	2b03      	cmp	r3, #3
 800f91a:	d9ca      	bls.n	800f8b2 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800f91c:	79fa      	ldrb	r2, [r7, #7]
 800f91e:	491c      	ldr	r1, [pc, #112]	; (800f990 <dns_call_found+0x178>)
 800f920:	4613      	mov	r3, r2
 800f922:	011b      	lsls	r3, r3, #4
 800f924:	4413      	add	r3, r2
 800f926:	011b      	lsls	r3, r3, #4
 800f928:	440b      	add	r3, r1
 800f92a:	330f      	adds	r3, #15
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	2b03      	cmp	r3, #3
 800f930:	d827      	bhi.n	800f982 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800f932:	79fa      	ldrb	r2, [r7, #7]
 800f934:	4916      	ldr	r1, [pc, #88]	; (800f990 <dns_call_found+0x178>)
 800f936:	4613      	mov	r3, r2
 800f938:	011b      	lsls	r3, r3, #4
 800f93a:	4413      	add	r3, r2
 800f93c:	011b      	lsls	r3, r3, #4
 800f93e:	440b      	add	r3, r1
 800f940:	330f      	adds	r3, #15
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	461a      	mov	r2, r3
 800f946:	4b13      	ldr	r3, [pc, #76]	; (800f994 <dns_call_found+0x17c>)
 800f948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f009 fc7d 	bl	801924c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800f952:	79fa      	ldrb	r2, [r7, #7]
 800f954:	490e      	ldr	r1, [pc, #56]	; (800f990 <dns_call_found+0x178>)
 800f956:	4613      	mov	r3, r2
 800f958:	011b      	lsls	r3, r3, #4
 800f95a:	4413      	add	r3, r2
 800f95c:	011b      	lsls	r3, r3, #4
 800f95e:	440b      	add	r3, r1
 800f960:	330f      	adds	r3, #15
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	4619      	mov	r1, r3
 800f966:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <dns_call_found+0x17c>)
 800f968:	2200      	movs	r2, #0
 800f96a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f96e:	79fa      	ldrb	r2, [r7, #7]
 800f970:	4907      	ldr	r1, [pc, #28]	; (800f990 <dns_call_found+0x178>)
 800f972:	4613      	mov	r3, r2
 800f974:	011b      	lsls	r3, r3, #4
 800f976:	4413      	add	r3, r2
 800f978:	011b      	lsls	r3, r3, #4
 800f97a:	440b      	add	r3, r1
 800f97c:	330f      	adds	r3, #15
 800f97e:	2204      	movs	r2, #4
 800f980:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800f982:	bf00      	nop
 800f984:	3714      	adds	r7, #20
 800f986:	46bd      	mov	sp, r7
 800f988:	bd90      	pop	{r4, r7, pc}
 800f98a:	bf00      	nop
 800f98c:	200142d8 	.word	0x200142d8
 800f990:	20013e98 	.word	0x20013e98
 800f994:	20013e84 	.word	0x20013e84

0800f998 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800f99e:	f00f f8fb 	bl	801eb98 <rand>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	71fb      	strb	r3, [r7, #7]
 800f9aa:	e01a      	b.n	800f9e2 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f9ac:	79fa      	ldrb	r2, [r7, #7]
 800f9ae:	4911      	ldr	r1, [pc, #68]	; (800f9f4 <dns_create_txid+0x5c>)
 800f9b0:	4613      	mov	r3, r2
 800f9b2:	011b      	lsls	r3, r3, #4
 800f9b4:	4413      	add	r3, r2
 800f9b6:	011b      	lsls	r3, r3, #4
 800f9b8:	440b      	add	r3, r1
 800f9ba:	330a      	adds	r3, #10
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	2b02      	cmp	r3, #2
 800f9c0:	d10c      	bne.n	800f9dc <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800f9c2:	79fa      	ldrb	r2, [r7, #7]
 800f9c4:	490b      	ldr	r1, [pc, #44]	; (800f9f4 <dns_create_txid+0x5c>)
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	011b      	lsls	r3, r3, #4
 800f9ca:	4413      	add	r3, r2
 800f9cc:	011b      	lsls	r3, r3, #4
 800f9ce:	440b      	add	r3, r1
 800f9d0:	3308      	adds	r3, #8
 800f9d2:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f9d4:	88ba      	ldrh	r2, [r7, #4]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d100      	bne.n	800f9dc <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800f9da:	e7e0      	b.n	800f99e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f9dc:	79fb      	ldrb	r3, [r7, #7]
 800f9de:	3301      	adds	r3, #1
 800f9e0:	71fb      	strb	r3, [r7, #7]
 800f9e2:	79fb      	ldrb	r3, [r7, #7]
 800f9e4:	2b03      	cmp	r3, #3
 800f9e6:	d9e1      	bls.n	800f9ac <dns_create_txid+0x14>
    }
  }

  return txid;
 800f9e8:	88bb      	ldrh	r3, [r7, #4]
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	20013e98 	.word	0x20013e98

0800f9f8 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800fa00:	2300      	movs	r3, #0
 800fa02:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d00d      	beq.n	800fa26 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	7adb      	ldrb	r3, [r3, #11]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d109      	bne.n	800fa26 <dns_backupserver_available+0x2e>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	7adb      	ldrb	r3, [r3, #11]
 800fa16:	3301      	adds	r3, #1
 800fa18:	4a06      	ldr	r2, [pc, #24]	; (800fa34 <dns_backupserver_available+0x3c>)
 800fa1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d001      	beq.n	800fa26 <dns_backupserver_available+0x2e>
      ret = 1;
 800fa22:	2301      	movs	r3, #1
 800fa24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fa26:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3714      	adds	r7, #20
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr
 800fa34:	20014308 	.word	0x20014308

0800fa38 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	4603      	mov	r3, r0
 800fa40:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800fa42:	79fa      	ldrb	r2, [r7, #7]
 800fa44:	4613      	mov	r3, r2
 800fa46:	011b      	lsls	r3, r3, #4
 800fa48:	4413      	add	r3, r2
 800fa4a:	011b      	lsls	r3, r3, #4
 800fa4c:	4a48      	ldr	r2, [pc, #288]	; (800fb70 <dns_check_entry+0x138>)
 800fa4e:	4413      	add	r3, r2
 800fa50:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800fa52:	79fb      	ldrb	r3, [r7, #7]
 800fa54:	2b03      	cmp	r3, #3
 800fa56:	d906      	bls.n	800fa66 <dns_check_entry+0x2e>
 800fa58:	4b46      	ldr	r3, [pc, #280]	; (800fb74 <dns_check_entry+0x13c>)
 800fa5a:	f240 421c 	movw	r2, #1052	; 0x41c
 800fa5e:	4946      	ldr	r1, [pc, #280]	; (800fb78 <dns_check_entry+0x140>)
 800fa60:	4846      	ldr	r0, [pc, #280]	; (800fb7c <dns_check_entry+0x144>)
 800fa62:	f00f f80b 	bl	801ea7c <iprintf>

  switch (entry->state) {
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	7a9b      	ldrb	r3, [r3, #10]
 800fa6a:	2b03      	cmp	r3, #3
 800fa6c:	d86f      	bhi.n	800fb4e <dns_check_entry+0x116>
 800fa6e:	a201      	add	r2, pc, #4	; (adr r2, 800fa74 <dns_check_entry+0x3c>)
 800fa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa74:	0800fb5f 	.word	0x0800fb5f
 800fa78:	0800fa85 	.word	0x0800fa85
 800fa7c:	0800fab7 	.word	0x0800fab7
 800fa80:	0800fb2d 	.word	0x0800fb2d
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800fa84:	f7ff ff88 	bl	800f998 <dns_create_txid>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2202      	movs	r2, #2
 800fa94:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	2201      	movs	r2, #1
 800faa0:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2200      	movs	r2, #0
 800faa6:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800faa8:	79fb      	ldrb	r3, [r7, #7]
 800faaa:	4618      	mov	r0, r3
 800faac:	f7ff fd36 	bl	800f51c <dns_send>
 800fab0:	4603      	mov	r3, r0
 800fab2:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800fab4:	e058      	b.n	800fb68 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	7b1b      	ldrb	r3, [r3, #12]
 800faba:	3b01      	subs	r3, #1
 800fabc:	b2da      	uxtb	r2, r3
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	731a      	strb	r2, [r3, #12]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	7b1b      	ldrb	r3, [r3, #12]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d14b      	bne.n	800fb62 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	7b5b      	ldrb	r3, [r3, #13]
 800face:	3301      	adds	r3, #1
 800fad0:	b2da      	uxtb	r2, r3
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	735a      	strb	r2, [r3, #13]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	7b5b      	ldrb	r3, [r3, #13]
 800fada:	2b04      	cmp	r3, #4
 800fadc:	d11b      	bne.n	800fb16 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800fade:	68f8      	ldr	r0, [r7, #12]
 800fae0:	f7ff ff8a 	bl	800f9f8 <dns_backupserver_available>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00c      	beq.n	800fb04 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	7adb      	ldrb	r3, [r3, #11]
 800faee:	3301      	adds	r3, #1
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2201      	movs	r2, #1
 800fafa:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2200      	movs	r2, #0
 800fb00:	735a      	strb	r2, [r3, #13]
 800fb02:	e00c      	b.n	800fb1e <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800fb04:	79fb      	ldrb	r3, [r7, #7]
 800fb06:	2100      	movs	r1, #0
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7ff fe85 	bl	800f818 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2200      	movs	r2, #0
 800fb12:	729a      	strb	r2, [r3, #10]
            break;
 800fb14:	e028      	b.n	800fb68 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	7b5a      	ldrb	r2, [r3, #13]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800fb1e:	79fb      	ldrb	r3, [r7, #7]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7ff fcfb 	bl	800f51c <dns_send>
 800fb26:	4603      	mov	r3, r0
 800fb28:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800fb2a:	e01a      	b.n	800fb62 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d008      	beq.n	800fb46 <dns_check_entry+0x10e>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	1e5a      	subs	r2, r3, #1
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	601a      	str	r2, [r3, #0]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d10f      	bne.n	800fb66 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	729a      	strb	r2, [r3, #10]
      }
      break;
 800fb4c:	e00b      	b.n	800fb66 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800fb4e:	4b09      	ldr	r3, [pc, #36]	; (800fb74 <dns_check_entry+0x13c>)
 800fb50:	f240 425b 	movw	r2, #1115	; 0x45b
 800fb54:	490a      	ldr	r1, [pc, #40]	; (800fb80 <dns_check_entry+0x148>)
 800fb56:	4809      	ldr	r0, [pc, #36]	; (800fb7c <dns_check_entry+0x144>)
 800fb58:	f00e ff90 	bl	801ea7c <iprintf>
      break;
 800fb5c:	e004      	b.n	800fb68 <dns_check_entry+0x130>
      break;
 800fb5e:	bf00      	nop
 800fb60:	e002      	b.n	800fb68 <dns_check_entry+0x130>
      break;
 800fb62:	bf00      	nop
 800fb64:	e000      	b.n	800fb68 <dns_check_entry+0x130>
      break;
 800fb66:	bf00      	nop
  }
}
 800fb68:	bf00      	nop
 800fb6a:	3710      	adds	r7, #16
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}
 800fb70:	20013e98 	.word	0x20013e98
 800fb74:	080234dc 	.word	0x080234dc
 800fb78:	0802354c 	.word	0x0802354c
 800fb7c:	08023524 	.word	0x08023524
 800fb80:	08023568 	.word	0x08023568

0800fb84 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	71fb      	strb	r3, [r7, #7]
 800fb8e:	e006      	b.n	800fb9e <dns_check_entries+0x1a>
    dns_check_entry(i);
 800fb90:	79fb      	ldrb	r3, [r7, #7]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7ff ff50 	bl	800fa38 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fb98:	79fb      	ldrb	r3, [r7, #7]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	71fb      	strb	r3, [r7, #7]
 800fb9e:	79fb      	ldrb	r3, [r7, #7]
 800fba0:	2b03      	cmp	r3, #3
 800fba2:	d9f5      	bls.n	800fb90 <dns_check_entries+0xc>
  }
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
	...

0800fbb0 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	6039      	str	r1, [r7, #0]
 800fbba:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 800fbbc:	79fa      	ldrb	r2, [r7, #7]
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	011b      	lsls	r3, r3, #4
 800fbc2:	4413      	add	r3, r2
 800fbc4:	011b      	lsls	r3, r3, #4
 800fbc6:	4a13      	ldr	r2, [pc, #76]	; (800fc14 <dns_correct_response+0x64>)
 800fbc8:	4413      	add	r3, r2
 800fbca:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2203      	movs	r2, #3
 800fbd0:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a0e      	ldr	r2, [pc, #56]	; (800fc18 <dns_correct_response+0x68>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d902      	bls.n	800fbe8 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	4a0c      	ldr	r2, [pc, #48]	; (800fc18 <dns_correct_response+0x68>)
 800fbe6:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	1d1a      	adds	r2, r3, #4
 800fbec:	79fb      	ldrb	r3, [r7, #7]
 800fbee:	4611      	mov	r1, r2
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff fe11 	bl	800f818 <dns_call_found>

  if (entry->ttl == 0) {
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d106      	bne.n	800fc0c <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	7a9b      	ldrb	r3, [r3, #10]
 800fc02:	2b03      	cmp	r3, #3
 800fc04:	d102      	bne.n	800fc0c <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	729a      	strb	r2, [r3, #10]
    }
  }
}
 800fc0c:	bf00      	nop
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	20013e98 	.word	0x20013e98
 800fc18:	00093a80 	.word	0x00093a80

0800fc1c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800fc1c:	b590      	push	{r4, r7, lr}
 800fc1e:	b091      	sub	sp, #68	; 0x44
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	607a      	str	r2, [r7, #4]
 800fc28:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	891b      	ldrh	r3, [r3, #8]
 800fc2e:	2b0f      	cmp	r3, #15
 800fc30:	f240 811e 	bls.w	800fe70 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 800fc34:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800fc38:	2300      	movs	r3, #0
 800fc3a:	220c      	movs	r2, #12
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f002 f87b 	bl	8011d38 <pbuf_copy_partial>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b0c      	cmp	r3, #12
 800fc46:	f040 8115 	bne.w	800fe74 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 800fc4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7ff faad 	bl	800f1ac <lwip_htons>
 800fc52:	4603      	mov	r3, r0
 800fc54:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fc56:	2300      	movs	r3, #0
 800fc58:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800fc5c:	e102      	b.n	800fe64 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 800fc5e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800fc62:	4613      	mov	r3, r2
 800fc64:	011b      	lsls	r3, r3, #4
 800fc66:	4413      	add	r3, r2
 800fc68:	011b      	lsls	r3, r3, #4
 800fc6a:	4a92      	ldr	r2, [pc, #584]	; (800feb4 <dns_recv+0x298>)
 800fc6c:	4413      	add	r3, r2
 800fc6e:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 800fc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc72:	7a9b      	ldrb	r3, [r3, #10]
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	f040 80f0 	bne.w	800fe5a <dns_recv+0x23e>
          (entry->txid == txid)) {
 800fc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc7c:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 800fc7e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fc80:	429a      	cmp	r2, r3
 800fc82:	f040 80ea 	bne.w	800fe5a <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 800fc86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff fa8f 	bl	800f1ac <lwip_htons>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 800fc92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7ff fa89 	bl	800f1ac <lwip_htons>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	87fb      	strh	r3, [r7, #62]	; 0x3e

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800fc9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fca2:	b25b      	sxtb	r3, r3
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	f280 80e7 	bge.w	800fe78 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 800fcaa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	f040 80e5 	bne.w	800fe7c <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	681a      	ldr	r2, [r3, #0]
 800fcb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcb8:	7adb      	ldrb	r3, [r3, #11]
 800fcba:	4619      	mov	r1, r3
 800fcbc:	4b7e      	ldr	r3, [pc, #504]	; (800feb8 <dns_recv+0x29c>)
 800fcbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	f040 80dc 	bne.w	800fe80 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 800fcc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcca:	3310      	adds	r3, #16
 800fccc:	220c      	movs	r2, #12
 800fcce:	6879      	ldr	r1, [r7, #4]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7ff fb47 	bl	800f364 <dns_compare_name>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 800fcda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fcdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fce0:	4293      	cmp	r3, r2
 800fce2:	f000 80cf 	beq.w	800fe84 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 800fce6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fce8:	f107 0114 	add.w	r1, r7, #20
 800fcec:	2204      	movs	r2, #4
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f002 f822 	bl	8011d38 <pbuf_copy_partial>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b04      	cmp	r3, #4
 800fcf8:	f040 80c6 	bne.w	800fe88 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 800fcfc:	8afb      	ldrh	r3, [r7, #22]
 800fcfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd02:	f040 80c3 	bne.w	800fe8c <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 800fd06:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 800fd08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd0c:	f040 80be 	bne.w	800fe8c <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 800fd10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd12:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800fd16:	4293      	cmp	r3, r2
 800fd18:	f200 80ba 	bhi.w	800fe90 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 800fd1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd1e:	3304      	adds	r3, #4
 800fd20:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800fd22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd26:	f003 030f 	and.w	r3, r3, #15
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d078      	beq.n	800fe20 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 800fd2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd30:	f7ff fe62 	bl	800f9f8 <dns_backupserver_available>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d07a      	beq.n	800fe30 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 800fd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd3c:	2203      	movs	r2, #3
 800fd3e:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 800fd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd42:	2201      	movs	r2, #1
 800fd44:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 800fd46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7ff fe74 	bl	800fa38 <dns_check_entry>

            goto ignore_packet;
 800fd50:	e0a9      	b.n	800fea6 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 800fd52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd54:	4619      	mov	r1, r3
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f7ff fb92 	bl	800f480 <dns_skip_name>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 800fd60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd66:	4293      	cmp	r3, r2
 800fd68:	f000 8094 	beq.w	800fe94 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 800fd6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd6e:	f107 0118 	add.w	r1, r7, #24
 800fd72:	220a      	movs	r2, #10
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f001 ffdf 	bl	8011d38 <pbuf_copy_partial>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b0a      	cmp	r3, #10
 800fd7e:	f040 808b 	bne.w	800fe98 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 800fd82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd84:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	f200 8087 	bhi.w	800fe9c <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 800fd8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd90:	330a      	adds	r3, #10
 800fd92:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800fd94:	8b7b      	ldrh	r3, [r7, #26]
 800fd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd9a:	d12b      	bne.n	800fdf4 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800fd9c:	8b3b      	ldrh	r3, [r7, #24]
 800fd9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fda2:	d127      	bne.n	800fdf4 <dns_recv+0x1d8>
 800fda4:	8c3b      	ldrh	r3, [r7, #32]
 800fda6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fdaa:	d123      	bne.n	800fdf4 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 800fdac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fdae:	f107 0110 	add.w	r1, r7, #16
 800fdb2:	2204      	movs	r2, #4
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f001 ffbf 	bl	8011d38 <pbuf_copy_partial>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b04      	cmp	r3, #4
 800fdbe:	d16f      	bne.n	800fea0 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 800fdc0:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800fdc4:	6939      	ldr	r1, [r7, #16]
 800fdc6:	483b      	ldr	r0, [pc, #236]	; (800feb4 <dns_recv+0x298>)
 800fdc8:	4613      	mov	r3, r2
 800fdca:	011b      	lsls	r3, r3, #4
 800fdcc:	4413      	add	r3, r2
 800fdce:	011b      	lsls	r3, r3, #4
 800fdd0:	4403      	add	r3, r0
 800fdd2:	3304      	adds	r3, #4
 800fdd4:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f001 fda8 	bl	801192c <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7ff f9f9 	bl	800f1d6 <lwip_htonl>
 800fde4:	4602      	mov	r2, r0
 800fde6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fdea:	4611      	mov	r1, r2
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7ff fedf 	bl	800fbb0 <dns_correct_response>
 800fdf2:	e05c      	b.n	800feae <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 800fdf4:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800fdf6:	8c3b      	ldrh	r3, [r7, #32]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff f9d7 	bl	800f1ac <lwip_htons>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	4423      	add	r3, r4
 800fe02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe06:	da4d      	bge.n	800fea4 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 800fe08:	8c3b      	ldrh	r3, [r7, #32]
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7ff f9ce 	bl	800f1ac <lwip_htons>
 800fe10:	4603      	mov	r3, r0
 800fe12:	461a      	mov	r2, r3
 800fe14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe16:	4413      	add	r3, r2
 800fe18:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 800fe1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fe1c:	3b01      	subs	r3, #1
 800fe1e:	87fb      	strh	r3, [r7, #62]	; 0x3e
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 800fe20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d004      	beq.n	800fe30 <dns_recv+0x214>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	891b      	ldrh	r3, [r3, #8]
 800fe2a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d390      	bcc.n	800fd52 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f001 fd7b 	bl	801192c <pbuf_free>
        dns_call_found(i, NULL);
 800fe36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7ff fceb 	bl	800f818 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 800fe42:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800fe46:	491b      	ldr	r1, [pc, #108]	; (800feb4 <dns_recv+0x298>)
 800fe48:	4613      	mov	r3, r2
 800fe4a:	011b      	lsls	r3, r3, #4
 800fe4c:	4413      	add	r3, r2
 800fe4e:	011b      	lsls	r3, r3, #4
 800fe50:	440b      	add	r3, r1
 800fe52:	330a      	adds	r3, #10
 800fe54:	2200      	movs	r2, #0
 800fe56:	701a      	strb	r2, [r3, #0]
        return;
 800fe58:	e029      	b.n	800feae <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fe5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fe5e:	3301      	adds	r3, #1
 800fe60:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800fe64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fe68:	2b03      	cmp	r3, #3
 800fe6a:	f67f aef8 	bls.w	800fc5e <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 800fe6e:	e001      	b.n	800fe74 <dns_recv+0x258>
    goto ignore_packet;
 800fe70:	bf00      	nop
 800fe72:	e018      	b.n	800fea6 <dns_recv+0x28a>
ignore_packet:
 800fe74:	bf00      	nop
 800fe76:	e016      	b.n	800fea6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fe78:	bf00      	nop
 800fe7a:	e014      	b.n	800fea6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fe7c:	bf00      	nop
 800fe7e:	e012      	b.n	800fea6 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 800fe80:	bf00      	nop
 800fe82:	e010      	b.n	800fea6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fe84:	bf00      	nop
 800fe86:	e00e      	b.n	800fea6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fe88:	bf00      	nop
 800fe8a:	e00c      	b.n	800fea6 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fe8c:	bf00      	nop
 800fe8e:	e00a      	b.n	800fea6 <dns_recv+0x28a>
          goto ignore_packet;
 800fe90:	bf00      	nop
 800fe92:	e008      	b.n	800fea6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800fe94:	bf00      	nop
 800fe96:	e006      	b.n	800fea6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800fe98:	bf00      	nop
 800fe9a:	e004      	b.n	800fea6 <dns_recv+0x28a>
              goto ignore_packet;
 800fe9c:	bf00      	nop
 800fe9e:	e002      	b.n	800fea6 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 800fea0:	bf00      	nop
 800fea2:	e000      	b.n	800fea6 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800fea4:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f001 fd40 	bl	801192c <pbuf_free>
  return;
 800feac:	bf00      	nop
}
 800feae:	3744      	adds	r7, #68	; 0x44
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd90      	pop	{r4, r7, pc}
 800feb4:	20013e98 	.word	0x20013e98
 800feb8:	20014308 	.word	0x20014308

0800febc <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b08a      	sub	sp, #40	; 0x28
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
 800fec8:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 800feca:	2300      	movs	r3, #0
 800fecc:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fece:	2300      	movs	r3, #0
 800fed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fed4:	e056      	b.n	800ff84 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800fed6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800feda:	4990      	ldr	r1, [pc, #576]	; (801011c <dns_enqueue+0x260>)
 800fedc:	4613      	mov	r3, r2
 800fede:	011b      	lsls	r3, r3, #4
 800fee0:	4413      	add	r3, r2
 800fee2:	011b      	lsls	r3, r3, #4
 800fee4:	440b      	add	r3, r1
 800fee6:	330a      	adds	r3, #10
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	2b02      	cmp	r3, #2
 800feec:	d145      	bne.n	800ff7a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 800feee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fef2:	4613      	mov	r3, r2
 800fef4:	011b      	lsls	r3, r3, #4
 800fef6:	4413      	add	r3, r2
 800fef8:	011b      	lsls	r3, r3, #4
 800fefa:	3310      	adds	r3, #16
 800fefc:	4a87      	ldr	r2, [pc, #540]	; (801011c <dns_enqueue+0x260>)
 800fefe:	4413      	add	r3, r2
 800ff00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff04:	4619      	mov	r1, r3
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f7ff f97e 	bl	800f208 <lwip_strnicmp>
 800ff0c:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d133      	bne.n	800ff7a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800ff12:	2300      	movs	r3, #0
 800ff14:	76fb      	strb	r3, [r7, #27]
 800ff16:	e02d      	b.n	800ff74 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 800ff18:	7efa      	ldrb	r2, [r7, #27]
 800ff1a:	4981      	ldr	r1, [pc, #516]	; (8010120 <dns_enqueue+0x264>)
 800ff1c:	4613      	mov	r3, r2
 800ff1e:	005b      	lsls	r3, r3, #1
 800ff20:	4413      	add	r3, r2
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	440b      	add	r3, r1
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d120      	bne.n	800ff6e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 800ff2c:	7efa      	ldrb	r2, [r7, #27]
 800ff2e:	497c      	ldr	r1, [pc, #496]	; (8010120 <dns_enqueue+0x264>)
 800ff30:	4613      	mov	r3, r2
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	4413      	add	r3, r2
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	440b      	add	r3, r1
 800ff3a:	687a      	ldr	r2, [r7, #4]
 800ff3c:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 800ff3e:	7efa      	ldrb	r2, [r7, #27]
 800ff40:	4977      	ldr	r1, [pc, #476]	; (8010120 <dns_enqueue+0x264>)
 800ff42:	4613      	mov	r3, r2
 800ff44:	005b      	lsls	r3, r3, #1
 800ff46:	4413      	add	r3, r2
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	440b      	add	r3, r1
 800ff4c:	3304      	adds	r3, #4
 800ff4e:	683a      	ldr	r2, [r7, #0]
 800ff50:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 800ff52:	7efa      	ldrb	r2, [r7, #27]
 800ff54:	4972      	ldr	r1, [pc, #456]	; (8010120 <dns_enqueue+0x264>)
 800ff56:	4613      	mov	r3, r2
 800ff58:	005b      	lsls	r3, r3, #1
 800ff5a:	4413      	add	r3, r2
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	440b      	add	r3, r1
 800ff60:	3308      	adds	r3, #8
 800ff62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ff66:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 800ff68:	f06f 0304 	mvn.w	r3, #4
 800ff6c:	e0d1      	b.n	8010112 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800ff6e:	7efb      	ldrb	r3, [r7, #27]
 800ff70:	3301      	adds	r3, #1
 800ff72:	76fb      	strb	r3, [r7, #27]
 800ff74:	7efb      	ldrb	r3, [r7, #27]
 800ff76:	2b03      	cmp	r3, #3
 800ff78:	d9ce      	bls.n	800ff18 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ff7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff7e:	3301      	adds	r3, #1
 800ff80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff88:	2b03      	cmp	r3, #3
 800ff8a:	d9a4      	bls.n	800fed6 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 800ff92:	2304      	movs	r3, #4
 800ff94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ff98:	2300      	movs	r3, #0
 800ff9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff9e:	e027      	b.n	800fff0 <dns_enqueue+0x134>
    entry = &dns_table[i];
 800ffa0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	011b      	lsls	r3, r3, #4
 800ffa8:	4413      	add	r3, r2
 800ffaa:	011b      	lsls	r3, r3, #4
 800ffac:	4a5b      	ldr	r2, [pc, #364]	; (801011c <dns_enqueue+0x260>)
 800ffae:	4413      	add	r3, r2
 800ffb0:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 800ffb2:	6a3b      	ldr	r3, [r7, #32]
 800ffb4:	7a9b      	ldrb	r3, [r3, #10]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d01f      	beq.n	800fffa <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 800ffba:	6a3b      	ldr	r3, [r7, #32]
 800ffbc:	7a9b      	ldrb	r3, [r3, #10]
 800ffbe:	2b03      	cmp	r3, #3
 800ffc0:	d111      	bne.n	800ffe6 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 800ffc2:	4b58      	ldr	r3, [pc, #352]	; (8010124 <dns_enqueue+0x268>)
 800ffc4:	781a      	ldrb	r2, [r3, #0]
 800ffc6:	6a3b      	ldr	r3, [r7, #32]
 800ffc8:	7b9b      	ldrb	r3, [r3, #14]
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 800ffce:	7eba      	ldrb	r2, [r7, #26]
 800ffd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d906      	bls.n	800ffe6 <dns_enqueue+0x12a>
        lseq = age;
 800ffd8:	7ebb      	ldrb	r3, [r7, #26]
 800ffda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 800ffde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffe2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ffe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffea:	3301      	adds	r3, #1
 800ffec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fff4:	2b03      	cmp	r3, #3
 800fff6:	d9d3      	bls.n	800ffa0 <dns_enqueue+0xe4>
 800fff8:	e000      	b.n	800fffc <dns_enqueue+0x140>
      break;
 800fffa:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 800fffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010000:	2b04      	cmp	r3, #4
 8010002:	d11f      	bne.n	8010044 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8010004:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010008:	2b03      	cmp	r3, #3
 801000a:	d80b      	bhi.n	8010024 <dns_enqueue+0x168>
 801000c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8010010:	4942      	ldr	r1, [pc, #264]	; (801011c <dns_enqueue+0x260>)
 8010012:	4613      	mov	r3, r2
 8010014:	011b      	lsls	r3, r3, #4
 8010016:	4413      	add	r3, r2
 8010018:	011b      	lsls	r3, r3, #4
 801001a:	440b      	add	r3, r1
 801001c:	330a      	adds	r3, #10
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	2b03      	cmp	r3, #3
 8010022:	d002      	beq.n	801002a <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 8010024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010028:	e073      	b.n	8010112 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 801002a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801002e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 8010032:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010036:	4613      	mov	r3, r2
 8010038:	011b      	lsls	r3, r3, #4
 801003a:	4413      	add	r3, r2
 801003c:	011b      	lsls	r3, r3, #4
 801003e:	4a37      	ldr	r2, [pc, #220]	; (801011c <dns_enqueue+0x260>)
 8010040:	4413      	add	r3, r2
 8010042:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 8010044:	2300      	movs	r3, #0
 8010046:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8010048:	2300      	movs	r3, #0
 801004a:	76fb      	strb	r3, [r7, #27]
 801004c:	e015      	b.n	801007a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 801004e:	7efa      	ldrb	r2, [r7, #27]
 8010050:	4933      	ldr	r1, [pc, #204]	; (8010120 <dns_enqueue+0x264>)
 8010052:	4613      	mov	r3, r2
 8010054:	005b      	lsls	r3, r3, #1
 8010056:	4413      	add	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	440b      	add	r3, r1
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d108      	bne.n	8010074 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 8010062:	7efa      	ldrb	r2, [r7, #27]
 8010064:	4613      	mov	r3, r2
 8010066:	005b      	lsls	r3, r3, #1
 8010068:	4413      	add	r3, r2
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	4a2c      	ldr	r2, [pc, #176]	; (8010120 <dns_enqueue+0x264>)
 801006e:	4413      	add	r3, r2
 8010070:	61fb      	str	r3, [r7, #28]
      break;
 8010072:	e005      	b.n	8010080 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8010074:	7efb      	ldrb	r3, [r7, #27]
 8010076:	3301      	adds	r3, #1
 8010078:	76fb      	strb	r3, [r7, #27]
 801007a:	7efb      	ldrb	r3, [r7, #27]
 801007c:	2b03      	cmp	r3, #3
 801007e:	d9e6      	bls.n	801004e <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d102      	bne.n	801008c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 8010086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801008a:	e042      	b.n	8010112 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010092:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 8010094:	6a3b      	ldr	r3, [r7, #32]
 8010096:	2201      	movs	r2, #1
 8010098:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 801009a:	4b22      	ldr	r3, [pc, #136]	; (8010124 <dns_enqueue+0x268>)
 801009c:	781a      	ldrb	r2, [r3, #0]
 801009e:	6a3b      	ldr	r3, [r7, #32]
 80100a0:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 80100a2:	69fb      	ldr	r3, [r7, #28]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	683a      	ldr	r2, [r7, #0]
 80100ac:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	2bff      	cmp	r3, #255	; 0xff
 80100b2:	bf28      	it	cs
 80100b4:	23ff      	movcs	r3, #255	; 0xff
 80100b6:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 80100b8:	6a3b      	ldr	r3, [r7, #32]
 80100ba:	3310      	adds	r3, #16
 80100bc:	697a      	ldr	r2, [r7, #20]
 80100be:	68f9      	ldr	r1, [r7, #12]
 80100c0:	4618      	mov	r0, r3
 80100c2:	f00d ff97 	bl	801dff4 <memcpy>
  entry->name[namelen] = 0;
 80100c6:	6a3a      	ldr	r2, [r7, #32]
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	4413      	add	r3, r2
 80100cc:	3310      	adds	r3, #16
 80100ce:	2200      	movs	r2, #0
 80100d0:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 80100d2:	f7ff fb4f 	bl	800f774 <dns_alloc_pcb>
 80100d6:	4603      	mov	r3, r0
 80100d8:	461a      	mov	r2, r3
 80100da:	6a3b      	ldr	r3, [r7, #32]
 80100dc:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 80100de:	6a3b      	ldr	r3, [r7, #32]
 80100e0:	7bdb      	ldrb	r3, [r3, #15]
 80100e2:	2b03      	cmp	r3, #3
 80100e4:	d908      	bls.n	80100f8 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 80100e6:	6a3b      	ldr	r3, [r7, #32]
 80100e8:	2200      	movs	r2, #0
 80100ea:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	2200      	movs	r2, #0
 80100f0:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 80100f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100f6:	e00c      	b.n	8010112 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 80100f8:	4b0a      	ldr	r3, [pc, #40]	; (8010124 <dns_enqueue+0x268>)
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	3301      	adds	r3, #1
 80100fe:	b2da      	uxtb	r2, r3
 8010100:	4b08      	ldr	r3, [pc, #32]	; (8010124 <dns_enqueue+0x268>)
 8010102:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 8010104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010108:	4618      	mov	r0, r3
 801010a:	f7ff fc95 	bl	800fa38 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 801010e:	f06f 0304 	mvn.w	r3, #4
}
 8010112:	4618      	mov	r0, r3
 8010114:	3728      	adds	r7, #40	; 0x28
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	20013e98 	.word	0x20013e98
 8010120:	200142d8 	.word	0x200142d8
 8010124:	20013e95 	.word	0x20013e95

08010128 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b086      	sub	sp, #24
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
 8010134:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d006      	beq.n	801014a <dns_gethostbyname_addrtype+0x22>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d003      	beq.n	801014a <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d102      	bne.n	8010150 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 801014a:	f06f 030f 	mvn.w	r3, #15
 801014e:	e029      	b.n	80101a4 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f7f0 f83d 	bl	80001d0 <strlen>
 8010156:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	2bff      	cmp	r3, #255	; 0xff
 801015c:	d902      	bls.n	8010164 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 801015e:	f06f 030f 	mvn.w	r3, #15
 8010162:	e01f      	b.n	80101a4 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8010164:	68b9      	ldr	r1, [r7, #8]
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f00c fbfe 	bl	801c968 <ip4addr_aton>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d001      	beq.n	8010176 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8010172:	2300      	movs	r3, #0
 8010174:	e016      	b.n	80101a4 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 8010176:	68b9      	ldr	r1, [r7, #8]
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f7ff f8b1 	bl	800f2e0 <dns_lookup>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d101      	bne.n	8010188 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 8010184:	2300      	movs	r3, #0
 8010186:	e00d      	b.n	80101a4 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 8010188:	4b08      	ldr	r3, [pc, #32]	; (80101ac <dns_gethostbyname_addrtype+0x84>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d102      	bne.n	8010196 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 8010190:	f06f 0305 	mvn.w	r3, #5
 8010194:	e006      	b.n	80101a4 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	6979      	ldr	r1, [r7, #20]
 801019c:	68f8      	ldr	r0, [r7, #12]
 801019e:	f7ff fe8d 	bl	800febc <dns_enqueue>
 80101a2:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3718      	adds	r7, #24
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	20014308 	.word	0x20014308

080101b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80101ba:	f00d fd5f 	bl	801dc7c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80101be:	f000 f8d7 	bl	8010370 <mem_init>
  memp_init();
 80101c2:	f000 fc33 	bl	8010a2c <memp_init>
  pbuf_init();
  netif_init();
 80101c6:	f000 fcf9 	bl	8010bbc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80101ca:	f008 fb55 	bl	8018878 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80101ce:	f001 ffd3 	bl	8012178 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80101d2:	f7ff f854 	bl	800f27e <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80101d6:	f008 fa95 	bl	8018704 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80101da:	bf00      	nop
 80101dc:	3708      	adds	r7, #8
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
	...

080101e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	4603      	mov	r3, r0
 80101ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80101ee:	4b05      	ldr	r3, [pc, #20]	; (8010204 <ptr_to_mem+0x20>)
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	88fb      	ldrh	r3, [r7, #6]
 80101f4:	4413      	add	r3, r2
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	370c      	adds	r7, #12
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	20014310 	.word	0x20014310

08010208 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010208:	b480      	push	{r7}
 801020a:	b083      	sub	sp, #12
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010210:	4b05      	ldr	r3, [pc, #20]	; (8010228 <mem_to_ptr+0x20>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	b29b      	uxth	r3, r3
}
 801021a:	4618      	mov	r0, r3
 801021c:	370c      	adds	r7, #12
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	20014310 	.word	0x20014310

0801022c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801022c:	b590      	push	{r4, r7, lr}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010234:	4b45      	ldr	r3, [pc, #276]	; (801034c <plug_holes+0x120>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	429a      	cmp	r2, r3
 801023c:	d206      	bcs.n	801024c <plug_holes+0x20>
 801023e:	4b44      	ldr	r3, [pc, #272]	; (8010350 <plug_holes+0x124>)
 8010240:	f240 12df 	movw	r2, #479	; 0x1df
 8010244:	4943      	ldr	r1, [pc, #268]	; (8010354 <plug_holes+0x128>)
 8010246:	4844      	ldr	r0, [pc, #272]	; (8010358 <plug_holes+0x12c>)
 8010248:	f00e fc18 	bl	801ea7c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801024c:	4b43      	ldr	r3, [pc, #268]	; (801035c <plug_holes+0x130>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	429a      	cmp	r2, r3
 8010254:	d306      	bcc.n	8010264 <plug_holes+0x38>
 8010256:	4b3e      	ldr	r3, [pc, #248]	; (8010350 <plug_holes+0x124>)
 8010258:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801025c:	4940      	ldr	r1, [pc, #256]	; (8010360 <plug_holes+0x134>)
 801025e:	483e      	ldr	r0, [pc, #248]	; (8010358 <plug_holes+0x12c>)
 8010260:	f00e fc0c 	bl	801ea7c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	791b      	ldrb	r3, [r3, #4]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d006      	beq.n	801027a <plug_holes+0x4e>
 801026c:	4b38      	ldr	r3, [pc, #224]	; (8010350 <plug_holes+0x124>)
 801026e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010272:	493c      	ldr	r1, [pc, #240]	; (8010364 <plug_holes+0x138>)
 8010274:	4838      	ldr	r0, [pc, #224]	; (8010358 <plug_holes+0x12c>)
 8010276:	f00e fc01 	bl	801ea7c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	881b      	ldrh	r3, [r3, #0]
 801027e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010282:	d906      	bls.n	8010292 <plug_holes+0x66>
 8010284:	4b32      	ldr	r3, [pc, #200]	; (8010350 <plug_holes+0x124>)
 8010286:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801028a:	4937      	ldr	r1, [pc, #220]	; (8010368 <plug_holes+0x13c>)
 801028c:	4832      	ldr	r0, [pc, #200]	; (8010358 <plug_holes+0x12c>)
 801028e:	f00e fbf5 	bl	801ea7c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	881b      	ldrh	r3, [r3, #0]
 8010296:	4618      	mov	r0, r3
 8010298:	f7ff ffa4 	bl	80101e4 <ptr_to_mem>
 801029c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d024      	beq.n	80102f0 <plug_holes+0xc4>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	791b      	ldrb	r3, [r3, #4]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d120      	bne.n	80102f0 <plug_holes+0xc4>
 80102ae:	4b2b      	ldr	r3, [pc, #172]	; (801035c <plug_holes+0x130>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	68fa      	ldr	r2, [r7, #12]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d01b      	beq.n	80102f0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80102b8:	4b2c      	ldr	r3, [pc, #176]	; (801036c <plug_holes+0x140>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d102      	bne.n	80102c8 <plug_holes+0x9c>
      lfree = mem;
 80102c2:	4a2a      	ldr	r2, [pc, #168]	; (801036c <plug_holes+0x140>)
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	881a      	ldrh	r2, [r3, #0]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80102d8:	d00a      	beq.n	80102f0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	881b      	ldrh	r3, [r3, #0]
 80102de:	4618      	mov	r0, r3
 80102e0:	f7ff ff80 	bl	80101e4 <ptr_to_mem>
 80102e4:	4604      	mov	r4, r0
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7ff ff8e 	bl	8010208 <mem_to_ptr>
 80102ec:	4603      	mov	r3, r0
 80102ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	885b      	ldrh	r3, [r3, #2]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7ff ff75 	bl	80101e4 <ptr_to_mem>
 80102fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	429a      	cmp	r2, r3
 8010302:	d01f      	beq.n	8010344 <plug_holes+0x118>
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	791b      	ldrb	r3, [r3, #4]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d11b      	bne.n	8010344 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801030c:	4b17      	ldr	r3, [pc, #92]	; (801036c <plug_holes+0x140>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	429a      	cmp	r2, r3
 8010314:	d102      	bne.n	801031c <plug_holes+0xf0>
      lfree = pmem;
 8010316:	4a15      	ldr	r2, [pc, #84]	; (801036c <plug_holes+0x140>)
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	881a      	ldrh	r2, [r3, #0]
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801032c:	d00a      	beq.n	8010344 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	881b      	ldrh	r3, [r3, #0]
 8010332:	4618      	mov	r0, r3
 8010334:	f7ff ff56 	bl	80101e4 <ptr_to_mem>
 8010338:	4604      	mov	r4, r0
 801033a:	68b8      	ldr	r0, [r7, #8]
 801033c:	f7ff ff64 	bl	8010208 <mem_to_ptr>
 8010340:	4603      	mov	r3, r0
 8010342:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010344:	bf00      	nop
 8010346:	3714      	adds	r7, #20
 8010348:	46bd      	mov	sp, r7
 801034a:	bd90      	pop	{r4, r7, pc}
 801034c:	20014310 	.word	0x20014310
 8010350:	08023588 	.word	0x08023588
 8010354:	080235b8 	.word	0x080235b8
 8010358:	080235d0 	.word	0x080235d0
 801035c:	20014314 	.word	0x20014314
 8010360:	080235f8 	.word	0x080235f8
 8010364:	08023614 	.word	0x08023614
 8010368:	08023630 	.word	0x08023630
 801036c:	2001431c 	.word	0x2001431c

08010370 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010376:	4b1f      	ldr	r3, [pc, #124]	; (80103f4 <mem_init+0x84>)
 8010378:	3303      	adds	r3, #3
 801037a:	f023 0303 	bic.w	r3, r3, #3
 801037e:	461a      	mov	r2, r3
 8010380:	4b1d      	ldr	r3, [pc, #116]	; (80103f8 <mem_init+0x88>)
 8010382:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010384:	4b1c      	ldr	r3, [pc, #112]	; (80103f8 <mem_init+0x88>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010390:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2200      	movs	r2, #0
 8010396:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801039e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80103a2:	f7ff ff1f 	bl	80101e4 <ptr_to_mem>
 80103a6:	4603      	mov	r3, r0
 80103a8:	4a14      	ldr	r2, [pc, #80]	; (80103fc <mem_init+0x8c>)
 80103aa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80103ac:	4b13      	ldr	r3, [pc, #76]	; (80103fc <mem_init+0x8c>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2201      	movs	r2, #1
 80103b2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80103b4:	4b11      	ldr	r3, [pc, #68]	; (80103fc <mem_init+0x8c>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80103bc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80103be:	4b0f      	ldr	r3, [pc, #60]	; (80103fc <mem_init+0x8c>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80103c6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80103c8:	4b0b      	ldr	r3, [pc, #44]	; (80103f8 <mem_init+0x88>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4a0c      	ldr	r2, [pc, #48]	; (8010400 <mem_init+0x90>)
 80103ce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80103d0:	480c      	ldr	r0, [pc, #48]	; (8010404 <mem_init+0x94>)
 80103d2:	f00d fc61 	bl	801dc98 <sys_mutex_new>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d006      	beq.n	80103ea <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80103dc:	4b0a      	ldr	r3, [pc, #40]	; (8010408 <mem_init+0x98>)
 80103de:	f240 221f 	movw	r2, #543	; 0x21f
 80103e2:	490a      	ldr	r1, [pc, #40]	; (801040c <mem_init+0x9c>)
 80103e4:	480a      	ldr	r0, [pc, #40]	; (8010410 <mem_init+0xa0>)
 80103e6:	f00e fb49 	bl	801ea7c <iprintf>
  }
}
 80103ea:	bf00      	nop
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	200176ec 	.word	0x200176ec
 80103f8:	20014310 	.word	0x20014310
 80103fc:	20014314 	.word	0x20014314
 8010400:	2001431c 	.word	0x2001431c
 8010404:	20014318 	.word	0x20014318
 8010408:	08023588 	.word	0x08023588
 801040c:	0802365c 	.word	0x0802365c
 8010410:	080235d0 	.word	0x080235d0

08010414 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b086      	sub	sp, #24
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7ff fef3 	bl	8010208 <mem_to_ptr>
 8010422:	4603      	mov	r3, r0
 8010424:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	881b      	ldrh	r3, [r3, #0]
 801042a:	4618      	mov	r0, r3
 801042c:	f7ff feda 	bl	80101e4 <ptr_to_mem>
 8010430:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	885b      	ldrh	r3, [r3, #2]
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff fed4 	bl	80101e4 <ptr_to_mem>
 801043c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	881b      	ldrh	r3, [r3, #0]
 8010442:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010446:	d818      	bhi.n	801047a <mem_link_valid+0x66>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	885b      	ldrh	r3, [r3, #2]
 801044c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010450:	d813      	bhi.n	801047a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010456:	8afa      	ldrh	r2, [r7, #22]
 8010458:	429a      	cmp	r2, r3
 801045a:	d004      	beq.n	8010466 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	881b      	ldrh	r3, [r3, #0]
 8010460:	8afa      	ldrh	r2, [r7, #22]
 8010462:	429a      	cmp	r2, r3
 8010464:	d109      	bne.n	801047a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010466:	4b08      	ldr	r3, [pc, #32]	; (8010488 <mem_link_valid+0x74>)
 8010468:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801046a:	693a      	ldr	r2, [r7, #16]
 801046c:	429a      	cmp	r2, r3
 801046e:	d006      	beq.n	801047e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	885b      	ldrh	r3, [r3, #2]
 8010474:	8afa      	ldrh	r2, [r7, #22]
 8010476:	429a      	cmp	r2, r3
 8010478:	d001      	beq.n	801047e <mem_link_valid+0x6a>
    return 0;
 801047a:	2300      	movs	r3, #0
 801047c:	e000      	b.n	8010480 <mem_link_valid+0x6c>
  }
  return 1;
 801047e:	2301      	movs	r3, #1
}
 8010480:	4618      	mov	r0, r3
 8010482:	3718      	adds	r7, #24
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	20014314 	.word	0x20014314

0801048c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b088      	sub	sp, #32
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d070      	beq.n	801057c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f003 0303 	and.w	r3, r3, #3
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00d      	beq.n	80104c0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80104a4:	4b37      	ldr	r3, [pc, #220]	; (8010584 <mem_free+0xf8>)
 80104a6:	f240 2273 	movw	r2, #627	; 0x273
 80104aa:	4937      	ldr	r1, [pc, #220]	; (8010588 <mem_free+0xfc>)
 80104ac:	4837      	ldr	r0, [pc, #220]	; (801058c <mem_free+0x100>)
 80104ae:	f00e fae5 	bl	801ea7c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80104b2:	f00d fc45 	bl	801dd40 <sys_arch_protect>
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f00d fc4f 	bl	801dd5c <sys_arch_unprotect>
    return;
 80104be:	e05e      	b.n	801057e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3b08      	subs	r3, #8
 80104c4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80104c6:	4b32      	ldr	r3, [pc, #200]	; (8010590 <mem_free+0x104>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	69fa      	ldr	r2, [r7, #28]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d306      	bcc.n	80104de <mem_free+0x52>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f103 020c 	add.w	r2, r3, #12
 80104d6:	4b2f      	ldr	r3, [pc, #188]	; (8010594 <mem_free+0x108>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d90d      	bls.n	80104fa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80104de:	4b29      	ldr	r3, [pc, #164]	; (8010584 <mem_free+0xf8>)
 80104e0:	f240 227f 	movw	r2, #639	; 0x27f
 80104e4:	492c      	ldr	r1, [pc, #176]	; (8010598 <mem_free+0x10c>)
 80104e6:	4829      	ldr	r0, [pc, #164]	; (801058c <mem_free+0x100>)
 80104e8:	f00e fac8 	bl	801ea7c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80104ec:	f00d fc28 	bl	801dd40 <sys_arch_protect>
 80104f0:	6138      	str	r0, [r7, #16]
 80104f2:	6938      	ldr	r0, [r7, #16]
 80104f4:	f00d fc32 	bl	801dd5c <sys_arch_unprotect>
    return;
 80104f8:	e041      	b.n	801057e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80104fa:	4828      	ldr	r0, [pc, #160]	; (801059c <mem_free+0x110>)
 80104fc:	f00d fbe6 	bl	801dccc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	791b      	ldrb	r3, [r3, #4]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d110      	bne.n	801052a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010508:	4b1e      	ldr	r3, [pc, #120]	; (8010584 <mem_free+0xf8>)
 801050a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801050e:	4924      	ldr	r1, [pc, #144]	; (80105a0 <mem_free+0x114>)
 8010510:	481e      	ldr	r0, [pc, #120]	; (801058c <mem_free+0x100>)
 8010512:	f00e fab3 	bl	801ea7c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010516:	4821      	ldr	r0, [pc, #132]	; (801059c <mem_free+0x110>)
 8010518:	f00d fbe7 	bl	801dcea <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801051c:	f00d fc10 	bl	801dd40 <sys_arch_protect>
 8010520:	6178      	str	r0, [r7, #20]
 8010522:	6978      	ldr	r0, [r7, #20]
 8010524:	f00d fc1a 	bl	801dd5c <sys_arch_unprotect>
    return;
 8010528:	e029      	b.n	801057e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801052a:	69f8      	ldr	r0, [r7, #28]
 801052c:	f7ff ff72 	bl	8010414 <mem_link_valid>
 8010530:	4603      	mov	r3, r0
 8010532:	2b00      	cmp	r3, #0
 8010534:	d110      	bne.n	8010558 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010536:	4b13      	ldr	r3, [pc, #76]	; (8010584 <mem_free+0xf8>)
 8010538:	f240 2295 	movw	r2, #661	; 0x295
 801053c:	4919      	ldr	r1, [pc, #100]	; (80105a4 <mem_free+0x118>)
 801053e:	4813      	ldr	r0, [pc, #76]	; (801058c <mem_free+0x100>)
 8010540:	f00e fa9c 	bl	801ea7c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010544:	4815      	ldr	r0, [pc, #84]	; (801059c <mem_free+0x110>)
 8010546:	f00d fbd0 	bl	801dcea <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801054a:	f00d fbf9 	bl	801dd40 <sys_arch_protect>
 801054e:	61b8      	str	r0, [r7, #24]
 8010550:	69b8      	ldr	r0, [r7, #24]
 8010552:	f00d fc03 	bl	801dd5c <sys_arch_unprotect>
    return;
 8010556:	e012      	b.n	801057e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	2200      	movs	r2, #0
 801055c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801055e:	4b12      	ldr	r3, [pc, #72]	; (80105a8 <mem_free+0x11c>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	69fa      	ldr	r2, [r7, #28]
 8010564:	429a      	cmp	r2, r3
 8010566:	d202      	bcs.n	801056e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010568:	4a0f      	ldr	r2, [pc, #60]	; (80105a8 <mem_free+0x11c>)
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801056e:	69f8      	ldr	r0, [r7, #28]
 8010570:	f7ff fe5c 	bl	801022c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010574:	4809      	ldr	r0, [pc, #36]	; (801059c <mem_free+0x110>)
 8010576:	f00d fbb8 	bl	801dcea <sys_mutex_unlock>
 801057a:	e000      	b.n	801057e <mem_free+0xf2>
    return;
 801057c:	bf00      	nop
}
 801057e:	3720      	adds	r7, #32
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	08023588 	.word	0x08023588
 8010588:	08023678 	.word	0x08023678
 801058c:	080235d0 	.word	0x080235d0
 8010590:	20014310 	.word	0x20014310
 8010594:	20014314 	.word	0x20014314
 8010598:	0802369c 	.word	0x0802369c
 801059c:	20014318 	.word	0x20014318
 80105a0:	080236b8 	.word	0x080236b8
 80105a4:	080236e0 	.word	0x080236e0
 80105a8:	2001431c 	.word	0x2001431c

080105ac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b088      	sub	sp, #32
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	460b      	mov	r3, r1
 80105b6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80105b8:	887b      	ldrh	r3, [r7, #2]
 80105ba:	3303      	adds	r3, #3
 80105bc:	b29b      	uxth	r3, r3
 80105be:	f023 0303 	bic.w	r3, r3, #3
 80105c2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80105c4:	8bfb      	ldrh	r3, [r7, #30]
 80105c6:	2b0b      	cmp	r3, #11
 80105c8:	d801      	bhi.n	80105ce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80105ca:	230c      	movs	r3, #12
 80105cc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80105ce:	8bfb      	ldrh	r3, [r7, #30]
 80105d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80105d4:	d803      	bhi.n	80105de <mem_trim+0x32>
 80105d6:	8bfa      	ldrh	r2, [r7, #30]
 80105d8:	887b      	ldrh	r3, [r7, #2]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d201      	bcs.n	80105e2 <mem_trim+0x36>
    return NULL;
 80105de:	2300      	movs	r3, #0
 80105e0:	e0d8      	b.n	8010794 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80105e2:	4b6e      	ldr	r3, [pc, #440]	; (801079c <mem_trim+0x1f0>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d304      	bcc.n	80105f6 <mem_trim+0x4a>
 80105ec:	4b6c      	ldr	r3, [pc, #432]	; (80107a0 <mem_trim+0x1f4>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d306      	bcc.n	8010604 <mem_trim+0x58>
 80105f6:	4b6b      	ldr	r3, [pc, #428]	; (80107a4 <mem_trim+0x1f8>)
 80105f8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80105fc:	496a      	ldr	r1, [pc, #424]	; (80107a8 <mem_trim+0x1fc>)
 80105fe:	486b      	ldr	r0, [pc, #428]	; (80107ac <mem_trim+0x200>)
 8010600:	f00e fa3c 	bl	801ea7c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010604:	4b65      	ldr	r3, [pc, #404]	; (801079c <mem_trim+0x1f0>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	687a      	ldr	r2, [r7, #4]
 801060a:	429a      	cmp	r2, r3
 801060c:	d304      	bcc.n	8010618 <mem_trim+0x6c>
 801060e:	4b64      	ldr	r3, [pc, #400]	; (80107a0 <mem_trim+0x1f4>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	429a      	cmp	r2, r3
 8010616:	d307      	bcc.n	8010628 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010618:	f00d fb92 	bl	801dd40 <sys_arch_protect>
 801061c:	60b8      	str	r0, [r7, #8]
 801061e:	68b8      	ldr	r0, [r7, #8]
 8010620:	f00d fb9c 	bl	801dd5c <sys_arch_unprotect>
    return rmem;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	e0b5      	b.n	8010794 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	3b08      	subs	r3, #8
 801062c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801062e:	69b8      	ldr	r0, [r7, #24]
 8010630:	f7ff fdea 	bl	8010208 <mem_to_ptr>
 8010634:	4603      	mov	r3, r0
 8010636:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	881a      	ldrh	r2, [r3, #0]
 801063c:	8afb      	ldrh	r3, [r7, #22]
 801063e:	1ad3      	subs	r3, r2, r3
 8010640:	b29b      	uxth	r3, r3
 8010642:	3b08      	subs	r3, #8
 8010644:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010646:	8bfa      	ldrh	r2, [r7, #30]
 8010648:	8abb      	ldrh	r3, [r7, #20]
 801064a:	429a      	cmp	r2, r3
 801064c:	d906      	bls.n	801065c <mem_trim+0xb0>
 801064e:	4b55      	ldr	r3, [pc, #340]	; (80107a4 <mem_trim+0x1f8>)
 8010650:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010654:	4956      	ldr	r1, [pc, #344]	; (80107b0 <mem_trim+0x204>)
 8010656:	4855      	ldr	r0, [pc, #340]	; (80107ac <mem_trim+0x200>)
 8010658:	f00e fa10 	bl	801ea7c <iprintf>
  if (newsize > size) {
 801065c:	8bfa      	ldrh	r2, [r7, #30]
 801065e:	8abb      	ldrh	r3, [r7, #20]
 8010660:	429a      	cmp	r2, r3
 8010662:	d901      	bls.n	8010668 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010664:	2300      	movs	r3, #0
 8010666:	e095      	b.n	8010794 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010668:	8bfa      	ldrh	r2, [r7, #30]
 801066a:	8abb      	ldrh	r3, [r7, #20]
 801066c:	429a      	cmp	r2, r3
 801066e:	d101      	bne.n	8010674 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	e08f      	b.n	8010794 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010674:	484f      	ldr	r0, [pc, #316]	; (80107b4 <mem_trim+0x208>)
 8010676:	f00d fb29 	bl	801dccc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	881b      	ldrh	r3, [r3, #0]
 801067e:	4618      	mov	r0, r3
 8010680:	f7ff fdb0 	bl	80101e4 <ptr_to_mem>
 8010684:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	791b      	ldrb	r3, [r3, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d13f      	bne.n	801070e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010696:	d106      	bne.n	80106a6 <mem_trim+0xfa>
 8010698:	4b42      	ldr	r3, [pc, #264]	; (80107a4 <mem_trim+0x1f8>)
 801069a:	f240 22f5 	movw	r2, #757	; 0x2f5
 801069e:	4946      	ldr	r1, [pc, #280]	; (80107b8 <mem_trim+0x20c>)
 80106a0:	4842      	ldr	r0, [pc, #264]	; (80107ac <mem_trim+0x200>)
 80106a2:	f00e f9eb 	bl	801ea7c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	881b      	ldrh	r3, [r3, #0]
 80106aa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80106ac:	8afa      	ldrh	r2, [r7, #22]
 80106ae:	8bfb      	ldrh	r3, [r7, #30]
 80106b0:	4413      	add	r3, r2
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	3308      	adds	r3, #8
 80106b6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80106b8:	4b40      	ldr	r3, [pc, #256]	; (80107bc <mem_trim+0x210>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	693a      	ldr	r2, [r7, #16]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d106      	bne.n	80106d0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80106c2:	89fb      	ldrh	r3, [r7, #14]
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7ff fd8d 	bl	80101e4 <ptr_to_mem>
 80106ca:	4603      	mov	r3, r0
 80106cc:	4a3b      	ldr	r2, [pc, #236]	; (80107bc <mem_trim+0x210>)
 80106ce:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80106d0:	89fb      	ldrh	r3, [r7, #14]
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7ff fd86 	bl	80101e4 <ptr_to_mem>
 80106d8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	2200      	movs	r2, #0
 80106de:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	89ba      	ldrh	r2, [r7, #12]
 80106e4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	8afa      	ldrh	r2, [r7, #22]
 80106ea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80106ec:	69bb      	ldr	r3, [r7, #24]
 80106ee:	89fa      	ldrh	r2, [r7, #14]
 80106f0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	881b      	ldrh	r3, [r3, #0]
 80106f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80106fa:	d047      	beq.n	801078c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	881b      	ldrh	r3, [r3, #0]
 8010700:	4618      	mov	r0, r3
 8010702:	f7ff fd6f 	bl	80101e4 <ptr_to_mem>
 8010706:	4602      	mov	r2, r0
 8010708:	89fb      	ldrh	r3, [r7, #14]
 801070a:	8053      	strh	r3, [r2, #2]
 801070c:	e03e      	b.n	801078c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801070e:	8bfb      	ldrh	r3, [r7, #30]
 8010710:	f103 0214 	add.w	r2, r3, #20
 8010714:	8abb      	ldrh	r3, [r7, #20]
 8010716:	429a      	cmp	r2, r3
 8010718:	d838      	bhi.n	801078c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801071a:	8afa      	ldrh	r2, [r7, #22]
 801071c:	8bfb      	ldrh	r3, [r7, #30]
 801071e:	4413      	add	r3, r2
 8010720:	b29b      	uxth	r3, r3
 8010722:	3308      	adds	r3, #8
 8010724:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	881b      	ldrh	r3, [r3, #0]
 801072a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801072e:	d106      	bne.n	801073e <mem_trim+0x192>
 8010730:	4b1c      	ldr	r3, [pc, #112]	; (80107a4 <mem_trim+0x1f8>)
 8010732:	f240 3216 	movw	r2, #790	; 0x316
 8010736:	4920      	ldr	r1, [pc, #128]	; (80107b8 <mem_trim+0x20c>)
 8010738:	481c      	ldr	r0, [pc, #112]	; (80107ac <mem_trim+0x200>)
 801073a:	f00e f99f 	bl	801ea7c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801073e:	89fb      	ldrh	r3, [r7, #14]
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff fd4f 	bl	80101e4 <ptr_to_mem>
 8010746:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010748:	4b1c      	ldr	r3, [pc, #112]	; (80107bc <mem_trim+0x210>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	693a      	ldr	r2, [r7, #16]
 801074e:	429a      	cmp	r2, r3
 8010750:	d202      	bcs.n	8010758 <mem_trim+0x1ac>
      lfree = mem2;
 8010752:	4a1a      	ldr	r2, [pc, #104]	; (80107bc <mem_trim+0x210>)
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	2200      	movs	r2, #0
 801075c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	881a      	ldrh	r2, [r3, #0]
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	8afa      	ldrh	r2, [r7, #22]
 801076a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	89fa      	ldrh	r2, [r7, #14]
 8010770:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	881b      	ldrh	r3, [r3, #0]
 8010776:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801077a:	d007      	beq.n	801078c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	4618      	mov	r0, r3
 8010782:	f7ff fd2f 	bl	80101e4 <ptr_to_mem>
 8010786:	4602      	mov	r2, r0
 8010788:	89fb      	ldrh	r3, [r7, #14]
 801078a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801078c:	4809      	ldr	r0, [pc, #36]	; (80107b4 <mem_trim+0x208>)
 801078e:	f00d faac 	bl	801dcea <sys_mutex_unlock>
  return rmem;
 8010792:	687b      	ldr	r3, [r7, #4]
}
 8010794:	4618      	mov	r0, r3
 8010796:	3720      	adds	r7, #32
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	20014310 	.word	0x20014310
 80107a0:	20014314 	.word	0x20014314
 80107a4:	08023588 	.word	0x08023588
 80107a8:	08023714 	.word	0x08023714
 80107ac:	080235d0 	.word	0x080235d0
 80107b0:	0802372c 	.word	0x0802372c
 80107b4:	20014318 	.word	0x20014318
 80107b8:	0802374c 	.word	0x0802374c
 80107bc:	2001431c 	.word	0x2001431c

080107c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b088      	sub	sp, #32
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	4603      	mov	r3, r0
 80107c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80107ca:	88fb      	ldrh	r3, [r7, #6]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d101      	bne.n	80107d4 <mem_malloc+0x14>
    return NULL;
 80107d0:	2300      	movs	r3, #0
 80107d2:	e0e2      	b.n	801099a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80107d4:	88fb      	ldrh	r3, [r7, #6]
 80107d6:	3303      	adds	r3, #3
 80107d8:	b29b      	uxth	r3, r3
 80107da:	f023 0303 	bic.w	r3, r3, #3
 80107de:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80107e0:	8bbb      	ldrh	r3, [r7, #28]
 80107e2:	2b0b      	cmp	r3, #11
 80107e4:	d801      	bhi.n	80107ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80107e6:	230c      	movs	r3, #12
 80107e8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80107ea:	8bbb      	ldrh	r3, [r7, #28]
 80107ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80107f0:	d803      	bhi.n	80107fa <mem_malloc+0x3a>
 80107f2:	8bba      	ldrh	r2, [r7, #28]
 80107f4:	88fb      	ldrh	r3, [r7, #6]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d201      	bcs.n	80107fe <mem_malloc+0x3e>
    return NULL;
 80107fa:	2300      	movs	r3, #0
 80107fc:	e0cd      	b.n	801099a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80107fe:	4869      	ldr	r0, [pc, #420]	; (80109a4 <mem_malloc+0x1e4>)
 8010800:	f00d fa64 	bl	801dccc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010804:	4b68      	ldr	r3, [pc, #416]	; (80109a8 <mem_malloc+0x1e8>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff fcfd 	bl	8010208 <mem_to_ptr>
 801080e:	4603      	mov	r3, r0
 8010810:	83fb      	strh	r3, [r7, #30]
 8010812:	e0b7      	b.n	8010984 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010814:	8bfb      	ldrh	r3, [r7, #30]
 8010816:	4618      	mov	r0, r3
 8010818:	f7ff fce4 	bl	80101e4 <ptr_to_mem>
 801081c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	791b      	ldrb	r3, [r3, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	f040 80a7 	bne.w	8010976 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	881b      	ldrh	r3, [r3, #0]
 801082c:	461a      	mov	r2, r3
 801082e:	8bfb      	ldrh	r3, [r7, #30]
 8010830:	1ad3      	subs	r3, r2, r3
 8010832:	f1a3 0208 	sub.w	r2, r3, #8
 8010836:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010838:	429a      	cmp	r2, r3
 801083a:	f0c0 809c 	bcc.w	8010976 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	881b      	ldrh	r3, [r3, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	8bfb      	ldrh	r3, [r7, #30]
 8010846:	1ad3      	subs	r3, r2, r3
 8010848:	f1a3 0208 	sub.w	r2, r3, #8
 801084c:	8bbb      	ldrh	r3, [r7, #28]
 801084e:	3314      	adds	r3, #20
 8010850:	429a      	cmp	r2, r3
 8010852:	d333      	bcc.n	80108bc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010854:	8bfa      	ldrh	r2, [r7, #30]
 8010856:	8bbb      	ldrh	r3, [r7, #28]
 8010858:	4413      	add	r3, r2
 801085a:	b29b      	uxth	r3, r3
 801085c:	3308      	adds	r3, #8
 801085e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010860:	8a7b      	ldrh	r3, [r7, #18]
 8010862:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010866:	d106      	bne.n	8010876 <mem_malloc+0xb6>
 8010868:	4b50      	ldr	r3, [pc, #320]	; (80109ac <mem_malloc+0x1ec>)
 801086a:	f240 3287 	movw	r2, #903	; 0x387
 801086e:	4950      	ldr	r1, [pc, #320]	; (80109b0 <mem_malloc+0x1f0>)
 8010870:	4850      	ldr	r0, [pc, #320]	; (80109b4 <mem_malloc+0x1f4>)
 8010872:	f00e f903 	bl	801ea7c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010876:	8a7b      	ldrh	r3, [r7, #18]
 8010878:	4618      	mov	r0, r3
 801087a:	f7ff fcb3 	bl	80101e4 <ptr_to_mem>
 801087e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2200      	movs	r2, #0
 8010884:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	881a      	ldrh	r2, [r3, #0]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	8bfa      	ldrh	r2, [r7, #30]
 8010892:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	8a7a      	ldrh	r2, [r7, #18]
 8010898:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2201      	movs	r2, #1
 801089e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80108a8:	d00b      	beq.n	80108c2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7ff fc98 	bl	80101e4 <ptr_to_mem>
 80108b4:	4602      	mov	r2, r0
 80108b6:	8a7b      	ldrh	r3, [r7, #18]
 80108b8:	8053      	strh	r3, [r2, #2]
 80108ba:	e002      	b.n	80108c2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80108bc:	697b      	ldr	r3, [r7, #20]
 80108be:	2201      	movs	r2, #1
 80108c0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80108c2:	4b39      	ldr	r3, [pc, #228]	; (80109a8 <mem_malloc+0x1e8>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	697a      	ldr	r2, [r7, #20]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d127      	bne.n	801091c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80108cc:	4b36      	ldr	r3, [pc, #216]	; (80109a8 <mem_malloc+0x1e8>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80108d2:	e005      	b.n	80108e0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80108d4:	69bb      	ldr	r3, [r7, #24]
 80108d6:	881b      	ldrh	r3, [r3, #0]
 80108d8:	4618      	mov	r0, r3
 80108da:	f7ff fc83 	bl	80101e4 <ptr_to_mem>
 80108de:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	791b      	ldrb	r3, [r3, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d004      	beq.n	80108f2 <mem_malloc+0x132>
 80108e8:	4b33      	ldr	r3, [pc, #204]	; (80109b8 <mem_malloc+0x1f8>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	69ba      	ldr	r2, [r7, #24]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d1f0      	bne.n	80108d4 <mem_malloc+0x114>
          }
          lfree = cur;
 80108f2:	4a2d      	ldr	r2, [pc, #180]	; (80109a8 <mem_malloc+0x1e8>)
 80108f4:	69bb      	ldr	r3, [r7, #24]
 80108f6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80108f8:	4b2b      	ldr	r3, [pc, #172]	; (80109a8 <mem_malloc+0x1e8>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	4b2e      	ldr	r3, [pc, #184]	; (80109b8 <mem_malloc+0x1f8>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	429a      	cmp	r2, r3
 8010902:	d00b      	beq.n	801091c <mem_malloc+0x15c>
 8010904:	4b28      	ldr	r3, [pc, #160]	; (80109a8 <mem_malloc+0x1e8>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	791b      	ldrb	r3, [r3, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d006      	beq.n	801091c <mem_malloc+0x15c>
 801090e:	4b27      	ldr	r3, [pc, #156]	; (80109ac <mem_malloc+0x1ec>)
 8010910:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010914:	4929      	ldr	r1, [pc, #164]	; (80109bc <mem_malloc+0x1fc>)
 8010916:	4827      	ldr	r0, [pc, #156]	; (80109b4 <mem_malloc+0x1f4>)
 8010918:	f00e f8b0 	bl	801ea7c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801091c:	4821      	ldr	r0, [pc, #132]	; (80109a4 <mem_malloc+0x1e4>)
 801091e:	f00d f9e4 	bl	801dcea <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010922:	8bba      	ldrh	r2, [r7, #28]
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	4413      	add	r3, r2
 8010928:	3308      	adds	r3, #8
 801092a:	4a23      	ldr	r2, [pc, #140]	; (80109b8 <mem_malloc+0x1f8>)
 801092c:	6812      	ldr	r2, [r2, #0]
 801092e:	4293      	cmp	r3, r2
 8010930:	d906      	bls.n	8010940 <mem_malloc+0x180>
 8010932:	4b1e      	ldr	r3, [pc, #120]	; (80109ac <mem_malloc+0x1ec>)
 8010934:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010938:	4921      	ldr	r1, [pc, #132]	; (80109c0 <mem_malloc+0x200>)
 801093a:	481e      	ldr	r0, [pc, #120]	; (80109b4 <mem_malloc+0x1f4>)
 801093c:	f00e f89e 	bl	801ea7c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	f003 0303 	and.w	r3, r3, #3
 8010946:	2b00      	cmp	r3, #0
 8010948:	d006      	beq.n	8010958 <mem_malloc+0x198>
 801094a:	4b18      	ldr	r3, [pc, #96]	; (80109ac <mem_malloc+0x1ec>)
 801094c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010950:	491c      	ldr	r1, [pc, #112]	; (80109c4 <mem_malloc+0x204>)
 8010952:	4818      	ldr	r0, [pc, #96]	; (80109b4 <mem_malloc+0x1f4>)
 8010954:	f00e f892 	bl	801ea7c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	f003 0303 	and.w	r3, r3, #3
 801095e:	2b00      	cmp	r3, #0
 8010960:	d006      	beq.n	8010970 <mem_malloc+0x1b0>
 8010962:	4b12      	ldr	r3, [pc, #72]	; (80109ac <mem_malloc+0x1ec>)
 8010964:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010968:	4917      	ldr	r1, [pc, #92]	; (80109c8 <mem_malloc+0x208>)
 801096a:	4812      	ldr	r0, [pc, #72]	; (80109b4 <mem_malloc+0x1f4>)
 801096c:	f00e f886 	bl	801ea7c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	3308      	adds	r3, #8
 8010974:	e011      	b.n	801099a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010976:	8bfb      	ldrh	r3, [r7, #30]
 8010978:	4618      	mov	r0, r3
 801097a:	f7ff fc33 	bl	80101e4 <ptr_to_mem>
 801097e:	4603      	mov	r3, r0
 8010980:	881b      	ldrh	r3, [r3, #0]
 8010982:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010984:	8bfa      	ldrh	r2, [r7, #30]
 8010986:	8bbb      	ldrh	r3, [r7, #28]
 8010988:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801098c:	429a      	cmp	r2, r3
 801098e:	f4ff af41 	bcc.w	8010814 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010992:	4804      	ldr	r0, [pc, #16]	; (80109a4 <mem_malloc+0x1e4>)
 8010994:	f00d f9a9 	bl	801dcea <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010998:	2300      	movs	r3, #0
}
 801099a:	4618      	mov	r0, r3
 801099c:	3720      	adds	r7, #32
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	20014318 	.word	0x20014318
 80109a8:	2001431c 	.word	0x2001431c
 80109ac:	08023588 	.word	0x08023588
 80109b0:	0802374c 	.word	0x0802374c
 80109b4:	080235d0 	.word	0x080235d0
 80109b8:	20014314 	.word	0x20014314
 80109bc:	08023760 	.word	0x08023760
 80109c0:	0802377c 	.word	0x0802377c
 80109c4:	080237ac 	.word	0x080237ac
 80109c8:	080237dc 	.word	0x080237dc

080109cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b085      	sub	sp, #20
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	2200      	movs	r2, #0
 80109da:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	689b      	ldr	r3, [r3, #8]
 80109e0:	3303      	adds	r3, #3
 80109e2:	f023 0303 	bic.w	r3, r3, #3
 80109e6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80109e8:	2300      	movs	r3, #0
 80109ea:	60fb      	str	r3, [r7, #12]
 80109ec:	e011      	b.n	8010a12 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	889b      	ldrh	r3, [r3, #4]
 8010a04:	461a      	mov	r2, r3
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	4413      	add	r3, r2
 8010a0a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	60fb      	str	r3, [r7, #12]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	88db      	ldrh	r3, [r3, #6]
 8010a16:	461a      	mov	r2, r3
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	dbe7      	blt.n	80109ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010a1e:	bf00      	nop
 8010a20:	bf00      	nop
 8010a22:	3714      	adds	r7, #20
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr

08010a2c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010a32:	2300      	movs	r3, #0
 8010a34:	80fb      	strh	r3, [r7, #6]
 8010a36:	e009      	b.n	8010a4c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010a38:	88fb      	ldrh	r3, [r7, #6]
 8010a3a:	4a08      	ldr	r2, [pc, #32]	; (8010a5c <memp_init+0x30>)
 8010a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7ff ffc3 	bl	80109cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010a46:	88fb      	ldrh	r3, [r7, #6]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	80fb      	strh	r3, [r7, #6]
 8010a4c:	88fb      	ldrh	r3, [r7, #6]
 8010a4e:	2b0d      	cmp	r3, #13
 8010a50:	d9f2      	bls.n	8010a38 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010a52:	bf00      	nop
 8010a54:	bf00      	nop
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	08026630 	.word	0x08026630

08010a60 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010a68:	f00d f96a 	bl	801dd40 <sys_arch_protect>
 8010a6c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d015      	beq.n	8010aa8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	68ba      	ldr	r2, [r7, #8]
 8010a82:	6812      	ldr	r2, [r2, #0]
 8010a84:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	f003 0303 	and.w	r3, r3, #3
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d006      	beq.n	8010a9e <do_memp_malloc_pool+0x3e>
 8010a90:	4b09      	ldr	r3, [pc, #36]	; (8010ab8 <do_memp_malloc_pool+0x58>)
 8010a92:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010a96:	4909      	ldr	r1, [pc, #36]	; (8010abc <do_memp_malloc_pool+0x5c>)
 8010a98:	4809      	ldr	r0, [pc, #36]	; (8010ac0 <do_memp_malloc_pool+0x60>)
 8010a9a:	f00d ffef 	bl	801ea7c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010a9e:	68f8      	ldr	r0, [r7, #12]
 8010aa0:	f00d f95c 	bl	801dd5c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	e003      	b.n	8010ab0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f00d f957 	bl	801dd5c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010aae:	2300      	movs	r3, #0
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	080238a0 	.word	0x080238a0
 8010abc:	080238d0 	.word	0x080238d0
 8010ac0:	080238f4 	.word	0x080238f4

08010ac4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	4603      	mov	r3, r0
 8010acc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010ace:	79fb      	ldrb	r3, [r7, #7]
 8010ad0:	2b0d      	cmp	r3, #13
 8010ad2:	d908      	bls.n	8010ae6 <memp_malloc+0x22>
 8010ad4:	4b0a      	ldr	r3, [pc, #40]	; (8010b00 <memp_malloc+0x3c>)
 8010ad6:	f240 1257 	movw	r2, #343	; 0x157
 8010ada:	490a      	ldr	r1, [pc, #40]	; (8010b04 <memp_malloc+0x40>)
 8010adc:	480a      	ldr	r0, [pc, #40]	; (8010b08 <memp_malloc+0x44>)
 8010ade:	f00d ffcd 	bl	801ea7c <iprintf>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e008      	b.n	8010af8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010ae6:	79fb      	ldrb	r3, [r7, #7]
 8010ae8:	4a08      	ldr	r2, [pc, #32]	; (8010b0c <memp_malloc+0x48>)
 8010aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7ff ffb6 	bl	8010a60 <do_memp_malloc_pool>
 8010af4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010af6:	68fb      	ldr	r3, [r7, #12]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	080238a0 	.word	0x080238a0
 8010b04:	08023930 	.word	0x08023930
 8010b08:	080238f4 	.word	0x080238f4
 8010b0c:	08026630 	.word	0x08026630

08010b10 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	f003 0303 	and.w	r3, r3, #3
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d006      	beq.n	8010b32 <do_memp_free_pool+0x22>
 8010b24:	4b0d      	ldr	r3, [pc, #52]	; (8010b5c <do_memp_free_pool+0x4c>)
 8010b26:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010b2a:	490d      	ldr	r1, [pc, #52]	; (8010b60 <do_memp_free_pool+0x50>)
 8010b2c:	480d      	ldr	r0, [pc, #52]	; (8010b64 <do_memp_free_pool+0x54>)
 8010b2e:	f00d ffa5 	bl	801ea7c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010b36:	f00d f903 	bl	801dd40 <sys_arch_protect>
 8010b3a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	681a      	ldr	r2, [r3, #0]
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	68db      	ldr	r3, [r3, #12]
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010b4e:	68b8      	ldr	r0, [r7, #8]
 8010b50:	f00d f904 	bl	801dd5c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010b54:	bf00      	nop
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	080238a0 	.word	0x080238a0
 8010b60:	08023950 	.word	0x08023950
 8010b64:	080238f4 	.word	0x080238f4

08010b68 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	4603      	mov	r3, r0
 8010b70:	6039      	str	r1, [r7, #0]
 8010b72:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010b74:	79fb      	ldrb	r3, [r7, #7]
 8010b76:	2b0d      	cmp	r3, #13
 8010b78:	d907      	bls.n	8010b8a <memp_free+0x22>
 8010b7a:	4b0c      	ldr	r3, [pc, #48]	; (8010bac <memp_free+0x44>)
 8010b7c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010b80:	490b      	ldr	r1, [pc, #44]	; (8010bb0 <memp_free+0x48>)
 8010b82:	480c      	ldr	r0, [pc, #48]	; (8010bb4 <memp_free+0x4c>)
 8010b84:	f00d ff7a 	bl	801ea7c <iprintf>
 8010b88:	e00c      	b.n	8010ba4 <memp_free+0x3c>

  if (mem == NULL) {
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d008      	beq.n	8010ba2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010b90:	79fb      	ldrb	r3, [r7, #7]
 8010b92:	4a09      	ldr	r2, [pc, #36]	; (8010bb8 <memp_free+0x50>)
 8010b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b98:	6839      	ldr	r1, [r7, #0]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7ff ffb8 	bl	8010b10 <do_memp_free_pool>
 8010ba0:	e000      	b.n	8010ba4 <memp_free+0x3c>
    return;
 8010ba2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	080238a0 	.word	0x080238a0
 8010bb0:	08023970 	.word	0x08023970
 8010bb4:	080238f4 	.word	0x080238f4
 8010bb8:	08026630 	.word	0x08026630

08010bbc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010bc0:	bf00      	nop
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
	...

08010bcc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b086      	sub	sp, #24
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	60b9      	str	r1, [r7, #8]
 8010bd6:	607a      	str	r2, [r7, #4]
 8010bd8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d108      	bne.n	8010bf2 <netif_add+0x26>
 8010be0:	4b5b      	ldr	r3, [pc, #364]	; (8010d50 <netif_add+0x184>)
 8010be2:	f240 1227 	movw	r2, #295	; 0x127
 8010be6:	495b      	ldr	r1, [pc, #364]	; (8010d54 <netif_add+0x188>)
 8010be8:	485b      	ldr	r0, [pc, #364]	; (8010d58 <netif_add+0x18c>)
 8010bea:	f00d ff47 	bl	801ea7c <iprintf>
 8010bee:	2300      	movs	r3, #0
 8010bf0:	e0a9      	b.n	8010d46 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d108      	bne.n	8010c0a <netif_add+0x3e>
 8010bf8:	4b55      	ldr	r3, [pc, #340]	; (8010d50 <netif_add+0x184>)
 8010bfa:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010bfe:	4957      	ldr	r1, [pc, #348]	; (8010d5c <netif_add+0x190>)
 8010c00:	4855      	ldr	r0, [pc, #340]	; (8010d58 <netif_add+0x18c>)
 8010c02:	f00d ff3b 	bl	801ea7c <iprintf>
 8010c06:	2300      	movs	r3, #0
 8010c08:	e09d      	b.n	8010d46 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d101      	bne.n	8010c14 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010c10:	4b53      	ldr	r3, [pc, #332]	; (8010d60 <netif_add+0x194>)
 8010c12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d101      	bne.n	8010c1e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010c1a:	4b51      	ldr	r3, [pc, #324]	; (8010d60 <netif_add+0x194>)
 8010c1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d101      	bne.n	8010c28 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010c24:	4b4e      	ldr	r3, [pc, #312]	; (8010d60 <netif_add+0x194>)
 8010c26:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2200      	movs	r2, #0
 8010c32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2200      	movs	r2, #0
 8010c38:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	4a49      	ldr	r2, [pc, #292]	; (8010d64 <netif_add+0x198>)
 8010c3e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2200      	movs	r2, #0
 8010c44:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	3324      	adds	r3, #36	; 0x24
 8010c52:	2204      	movs	r2, #4
 8010c54:	2100      	movs	r1, #0
 8010c56:	4618      	mov	r0, r3
 8010c58:	f00d f9f4 	bl	801e044 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	6a3a      	ldr	r2, [r7, #32]
 8010c66:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010c68:	4b3f      	ldr	r3, [pc, #252]	; (8010d68 <netif_add+0x19c>)
 8010c6a:	781a      	ldrb	r2, [r3, #0]
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c76:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	687a      	ldr	r2, [r7, #4]
 8010c7c:	68b9      	ldr	r1, [r7, #8]
 8010c7e:	68f8      	ldr	r0, [r7, #12]
 8010c80:	f000 f914 	bl	8010eac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c86:	68f8      	ldr	r0, [r7, #12]
 8010c88:	4798      	blx	r3
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d001      	beq.n	8010c94 <netif_add+0xc8>
    return NULL;
 8010c90:	2300      	movs	r3, #0
 8010c92:	e058      	b.n	8010d46 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010c9a:	2bff      	cmp	r3, #255	; 0xff
 8010c9c:	d103      	bne.n	8010ca6 <netif_add+0xda>
        netif->num = 0;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010caa:	4b30      	ldr	r3, [pc, #192]	; (8010d6c <netif_add+0x1a0>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	617b      	str	r3, [r7, #20]
 8010cb0:	e02b      	b.n	8010d0a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010cb2:	697a      	ldr	r2, [r7, #20]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d106      	bne.n	8010cc8 <netif_add+0xfc>
 8010cba:	4b25      	ldr	r3, [pc, #148]	; (8010d50 <netif_add+0x184>)
 8010cbc:	f240 128b 	movw	r2, #395	; 0x18b
 8010cc0:	492b      	ldr	r1, [pc, #172]	; (8010d70 <netif_add+0x1a4>)
 8010cc2:	4825      	ldr	r0, [pc, #148]	; (8010d58 <netif_add+0x18c>)
 8010cc4:	f00d feda 	bl	801ea7c <iprintf>
        num_netifs++;
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	3301      	adds	r3, #1
 8010ccc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	2bff      	cmp	r3, #255	; 0xff
 8010cd2:	dd06      	ble.n	8010ce2 <netif_add+0x116>
 8010cd4:	4b1e      	ldr	r3, [pc, #120]	; (8010d50 <netif_add+0x184>)
 8010cd6:	f240 128d 	movw	r2, #397	; 0x18d
 8010cda:	4926      	ldr	r1, [pc, #152]	; (8010d74 <netif_add+0x1a8>)
 8010cdc:	481e      	ldr	r0, [pc, #120]	; (8010d58 <netif_add+0x18c>)
 8010cde:	f00d fecd 	bl	801ea7c <iprintf>
        if (netif2->num == netif->num) {
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d108      	bne.n	8010d04 <netif_add+0x138>
          netif->num++;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8010d02:	e005      	b.n	8010d10 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	617b      	str	r3, [r7, #20]
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d1d0      	bne.n	8010cb2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d1be      	bne.n	8010c94 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010d1c:	2bfe      	cmp	r3, #254	; 0xfe
 8010d1e:	d103      	bne.n	8010d28 <netif_add+0x15c>
    netif_num = 0;
 8010d20:	4b11      	ldr	r3, [pc, #68]	; (8010d68 <netif_add+0x19c>)
 8010d22:	2200      	movs	r2, #0
 8010d24:	701a      	strb	r2, [r3, #0]
 8010d26:	e006      	b.n	8010d36 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010d2e:	3301      	adds	r3, #1
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	4b0d      	ldr	r3, [pc, #52]	; (8010d68 <netif_add+0x19c>)
 8010d34:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010d36:	4b0d      	ldr	r3, [pc, #52]	; (8010d6c <netif_add+0x1a0>)
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010d3e:	4a0b      	ldr	r2, [pc, #44]	; (8010d6c <netif_add+0x1a0>)
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010d44:	68fb      	ldr	r3, [r7, #12]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3718      	adds	r7, #24
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	0802398c 	.word	0x0802398c
 8010d54:	08023a20 	.word	0x08023a20
 8010d58:	080239dc 	.word	0x080239dc
 8010d5c:	08023a3c 	.word	0x08023a3c
 8010d60:	080266c0 	.word	0x080266c0
 8010d64:	0801118f 	.word	0x0801118f
 8010d68:	20014358 	.word	0x20014358
 8010d6c:	2001b0b8 	.word	0x2001b0b8
 8010d70:	08023a60 	.word	0x08023a60
 8010d74:	08023a74 	.word	0x08023a74

08010d78 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010d82:	6839      	ldr	r1, [r7, #0]
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f003 f929 	bl	8013fdc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010d8a:	6839      	ldr	r1, [r7, #0]
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f008 fac3 	bl	8019318 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010d92:	bf00      	nop
 8010d94:	3708      	adds	r7, #8
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
	...

08010d9c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b086      	sub	sp, #24
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	60f8      	str	r0, [r7, #12]
 8010da4:	60b9      	str	r1, [r7, #8]
 8010da6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d106      	bne.n	8010dbc <netif_do_set_ipaddr+0x20>
 8010dae:	4b1d      	ldr	r3, [pc, #116]	; (8010e24 <netif_do_set_ipaddr+0x88>)
 8010db0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010db4:	491c      	ldr	r1, [pc, #112]	; (8010e28 <netif_do_set_ipaddr+0x8c>)
 8010db6:	481d      	ldr	r0, [pc, #116]	; (8010e2c <netif_do_set_ipaddr+0x90>)
 8010db8:	f00d fe60 	bl	801ea7c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d106      	bne.n	8010dd0 <netif_do_set_ipaddr+0x34>
 8010dc2:	4b18      	ldr	r3, [pc, #96]	; (8010e24 <netif_do_set_ipaddr+0x88>)
 8010dc4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010dc8:	4917      	ldr	r1, [pc, #92]	; (8010e28 <netif_do_set_ipaddr+0x8c>)
 8010dca:	4818      	ldr	r0, [pc, #96]	; (8010e2c <netif_do_set_ipaddr+0x90>)
 8010dcc:	f00d fe56 	bl	801ea7c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	681a      	ldr	r2, [r3, #0]
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	3304      	adds	r3, #4
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d01c      	beq.n	8010e18 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	3304      	adds	r3, #4
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010dee:	f107 0314 	add.w	r3, r7, #20
 8010df2:	4619      	mov	r1, r3
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f7ff ffbf 	bl	8010d78 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d002      	beq.n	8010e06 <netif_do_set_ipaddr+0x6a>
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	e000      	b.n	8010e08 <netif_do_set_ipaddr+0x6c>
 8010e06:	2300      	movs	r3, #0
 8010e08:	68fa      	ldr	r2, [r7, #12]
 8010e0a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010e0c:	2101      	movs	r1, #1
 8010e0e:	68f8      	ldr	r0, [r7, #12]
 8010e10:	f000 f8d2 	bl	8010fb8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010e14:	2301      	movs	r3, #1
 8010e16:	e000      	b.n	8010e1a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010e18:	2300      	movs	r3, #0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3718      	adds	r7, #24
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	0802398c 	.word	0x0802398c
 8010e28:	08023aa4 	.word	0x08023aa4
 8010e2c:	080239dc 	.word	0x080239dc

08010e30 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b085      	sub	sp, #20
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	60b9      	str	r1, [r7, #8]
 8010e3a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	3308      	adds	r3, #8
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d00a      	beq.n	8010e60 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <netif_do_set_netmask+0x26>
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	e000      	b.n	8010e58 <netif_do_set_netmask+0x28>
 8010e56:	2300      	movs	r3, #0
 8010e58:	68fa      	ldr	r2, [r7, #12]
 8010e5a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	e000      	b.n	8010e62 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010e60:	2300      	movs	r3, #0
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3714      	adds	r7, #20
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr

08010e6e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010e6e:	b480      	push	{r7}
 8010e70:	b085      	sub	sp, #20
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	60f8      	str	r0, [r7, #12]
 8010e76:	60b9      	str	r1, [r7, #8]
 8010e78:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	330c      	adds	r3, #12
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d00a      	beq.n	8010e9e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d002      	beq.n	8010e94 <netif_do_set_gw+0x26>
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	e000      	b.n	8010e96 <netif_do_set_gw+0x28>
 8010e94:	2300      	movs	r3, #0
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e000      	b.n	8010ea0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010e9e:	2300      	movs	r3, #0
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3714      	adds	r7, #20
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr

08010eac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b088      	sub	sp, #32
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	607a      	str	r2, [r7, #4]
 8010eb8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d101      	bne.n	8010ecc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010ec8:	4b1c      	ldr	r3, [pc, #112]	; (8010f3c <netif_set_addr+0x90>)
 8010eca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d101      	bne.n	8010ed6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010ed2:	4b1a      	ldr	r3, [pc, #104]	; (8010f3c <netif_set_addr+0x90>)
 8010ed4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d101      	bne.n	8010ee0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010edc:	4b17      	ldr	r3, [pc, #92]	; (8010f3c <netif_set_addr+0x90>)
 8010ede:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d003      	beq.n	8010eee <netif_set_addr+0x42>
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <netif_set_addr+0x46>
 8010eee:	2301      	movs	r3, #1
 8010ef0:	e000      	b.n	8010ef4 <netif_set_addr+0x48>
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d006      	beq.n	8010f0a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010efc:	f107 0310 	add.w	r3, r7, #16
 8010f00:	461a      	mov	r2, r3
 8010f02:	68b9      	ldr	r1, [r7, #8]
 8010f04:	68f8      	ldr	r0, [r7, #12]
 8010f06:	f7ff ff49 	bl	8010d9c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010f0a:	69fa      	ldr	r2, [r7, #28]
 8010f0c:	6879      	ldr	r1, [r7, #4]
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f7ff ff8e 	bl	8010e30 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010f14:	69ba      	ldr	r2, [r7, #24]
 8010f16:	6839      	ldr	r1, [r7, #0]
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f7ff ffa8 	bl	8010e6e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d106      	bne.n	8010f32 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010f24:	f107 0310 	add.w	r3, r7, #16
 8010f28:	461a      	mov	r2, r3
 8010f2a:	68b9      	ldr	r1, [r7, #8]
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f7ff ff35 	bl	8010d9c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010f32:	bf00      	nop
 8010f34:	3720      	adds	r7, #32
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	080266c0 	.word	0x080266c0

08010f40 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010f40:	b480      	push	{r7}
 8010f42:	b083      	sub	sp, #12
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010f48:	4a04      	ldr	r2, [pc, #16]	; (8010f5c <netif_set_default+0x1c>)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010f4e:	bf00      	nop
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop
 8010f5c:	2001b0bc 	.word	0x2001b0bc

08010f60 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d107      	bne.n	8010f7e <netif_set_up+0x1e>
 8010f6e:	4b0f      	ldr	r3, [pc, #60]	; (8010fac <netif_set_up+0x4c>)
 8010f70:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010f74:	490e      	ldr	r1, [pc, #56]	; (8010fb0 <netif_set_up+0x50>)
 8010f76:	480f      	ldr	r0, [pc, #60]	; (8010fb4 <netif_set_up+0x54>)
 8010f78:	f00d fd80 	bl	801ea7c <iprintf>
 8010f7c:	e013      	b.n	8010fa6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f84:	f003 0301 	and.w	r3, r3, #1
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d10c      	bne.n	8010fa6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f92:	f043 0301 	orr.w	r3, r3, #1
 8010f96:	b2da      	uxtb	r2, r3
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010f9e:	2103      	movs	r1, #3
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 f809 	bl	8010fb8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	0802398c 	.word	0x0802398c
 8010fb0:	08023b14 	.word	0x08023b14
 8010fb4:	080239dc 	.word	0x080239dc

08010fb8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d106      	bne.n	8010fd8 <netif_issue_reports+0x20>
 8010fca:	4b18      	ldr	r3, [pc, #96]	; (801102c <netif_issue_reports+0x74>)
 8010fcc:	f240 326d 	movw	r2, #877	; 0x36d
 8010fd0:	4917      	ldr	r1, [pc, #92]	; (8011030 <netif_issue_reports+0x78>)
 8010fd2:	4818      	ldr	r0, [pc, #96]	; (8011034 <netif_issue_reports+0x7c>)
 8010fd4:	f00d fd52 	bl	801ea7c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010fde:	f003 0304 	and.w	r3, r3, #4
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d01e      	beq.n	8011024 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010fec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d017      	beq.n	8011024 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010ff4:	78fb      	ldrb	r3, [r7, #3]
 8010ff6:	f003 0301 	and.w	r3, r3, #1
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d013      	beq.n	8011026 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	3304      	adds	r3, #4
 8011002:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011004:	2b00      	cmp	r3, #0
 8011006:	d00e      	beq.n	8011026 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801100e:	f003 0308 	and.w	r3, r3, #8
 8011012:	2b00      	cmp	r3, #0
 8011014:	d007      	beq.n	8011026 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	3304      	adds	r3, #4
 801101a:	4619      	mov	r1, r3
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f00b f807 	bl	801c030 <etharp_request>
 8011022:	e000      	b.n	8011026 <netif_issue_reports+0x6e>
    return;
 8011024:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011026:	3708      	adds	r7, #8
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}
 801102c:	0802398c 	.word	0x0802398c
 8011030:	08023b30 	.word	0x08023b30
 8011034:	080239dc 	.word	0x080239dc

08011038 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b082      	sub	sp, #8
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d107      	bne.n	8011056 <netif_set_down+0x1e>
 8011046:	4b12      	ldr	r3, [pc, #72]	; (8011090 <netif_set_down+0x58>)
 8011048:	f240 329b 	movw	r2, #923	; 0x39b
 801104c:	4911      	ldr	r1, [pc, #68]	; (8011094 <netif_set_down+0x5c>)
 801104e:	4812      	ldr	r0, [pc, #72]	; (8011098 <netif_set_down+0x60>)
 8011050:	f00d fd14 	bl	801ea7c <iprintf>
 8011054:	e019      	b.n	801108a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801105c:	f003 0301 	and.w	r3, r3, #1
 8011060:	2b00      	cmp	r3, #0
 8011062:	d012      	beq.n	801108a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801106a:	f023 0301 	bic.w	r3, r3, #1
 801106e:	b2da      	uxtb	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801107c:	f003 0308 	and.w	r3, r3, #8
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f00a fb8d 	bl	801b7a4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	0802398c 	.word	0x0802398c
 8011094:	08023b54 	.word	0x08023b54
 8011098:	080239dc 	.word	0x080239dc

0801109c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d107      	bne.n	80110ba <netif_set_link_up+0x1e>
 80110aa:	4b15      	ldr	r3, [pc, #84]	; (8011100 <netif_set_link_up+0x64>)
 80110ac:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80110b0:	4914      	ldr	r1, [pc, #80]	; (8011104 <netif_set_link_up+0x68>)
 80110b2:	4815      	ldr	r0, [pc, #84]	; (8011108 <netif_set_link_up+0x6c>)
 80110b4:	f00d fce2 	bl	801ea7c <iprintf>
 80110b8:	e01e      	b.n	80110f8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80110c0:	f003 0304 	and.w	r3, r3, #4
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d117      	bne.n	80110f8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80110ce:	f043 0304 	orr.w	r3, r3, #4
 80110d2:	b2da      	uxtb	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f008 fd66 	bl	8019bac <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80110e0:	2103      	movs	r1, #3
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f7ff ff68 	bl	8010fb8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	69db      	ldr	r3, [r3, #28]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d003      	beq.n	80110f8 <netif_set_link_up+0x5c>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	69db      	ldr	r3, [r3, #28]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	0802398c 	.word	0x0802398c
 8011104:	08023b74 	.word	0x08023b74
 8011108:	080239dc 	.word	0x080239dc

0801110c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d107      	bne.n	801112a <netif_set_link_down+0x1e>
 801111a:	4b11      	ldr	r3, [pc, #68]	; (8011160 <netif_set_link_down+0x54>)
 801111c:	f240 4206 	movw	r2, #1030	; 0x406
 8011120:	4910      	ldr	r1, [pc, #64]	; (8011164 <netif_set_link_down+0x58>)
 8011122:	4811      	ldr	r0, [pc, #68]	; (8011168 <netif_set_link_down+0x5c>)
 8011124:	f00d fcaa 	bl	801ea7c <iprintf>
 8011128:	e017      	b.n	801115a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011130:	f003 0304 	and.w	r3, r3, #4
 8011134:	2b00      	cmp	r3, #0
 8011136:	d010      	beq.n	801115a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801113e:	f023 0304 	bic.w	r3, r3, #4
 8011142:	b2da      	uxtb	r2, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	69db      	ldr	r3, [r3, #28]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d003      	beq.n	801115a <netif_set_link_down+0x4e>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	69db      	ldr	r3, [r3, #28]
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}
 8011160:	0802398c 	.word	0x0802398c
 8011164:	08023b98 	.word	0x08023b98
 8011168:	080239dc 	.word	0x080239dc

0801116c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d002      	beq.n	8011182 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	683a      	ldr	r2, [r7, #0]
 8011180:	61da      	str	r2, [r3, #28]
  }
}
 8011182:	bf00      	nop
 8011184:	370c      	adds	r7, #12
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr

0801118e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801118e:	b480      	push	{r7}
 8011190:	b085      	sub	sp, #20
 8011192:	af00      	add	r7, sp, #0
 8011194:	60f8      	str	r0, [r7, #12]
 8011196:	60b9      	str	r1, [r7, #8]
 8011198:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801119a:	f06f 030b 	mvn.w	r3, #11
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3714      	adds	r7, #20
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr
	...

080111ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b085      	sub	sp, #20
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	4603      	mov	r3, r0
 80111b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80111b6:	79fb      	ldrb	r3, [r7, #7]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d013      	beq.n	80111e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80111bc:	4b0d      	ldr	r3, [pc, #52]	; (80111f4 <netif_get_by_index+0x48>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	60fb      	str	r3, [r7, #12]
 80111c2:	e00c      	b.n	80111de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80111ca:	3301      	adds	r3, #1
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	79fa      	ldrb	r2, [r7, #7]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d101      	bne.n	80111d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	e006      	b.n	80111e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	60fb      	str	r3, [r7, #12]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d1ef      	bne.n	80111c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80111e4:	2300      	movs	r3, #0
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3714      	adds	r7, #20
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	2001b0b8 	.word	0x2001b0b8

080111f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80111fe:	f00c fd9f 	bl	801dd40 <sys_arch_protect>
 8011202:	6038      	str	r0, [r7, #0]
 8011204:	4b0d      	ldr	r3, [pc, #52]	; (801123c <pbuf_free_ooseq+0x44>)
 8011206:	2200      	movs	r2, #0
 8011208:	701a      	strb	r2, [r3, #0]
 801120a:	6838      	ldr	r0, [r7, #0]
 801120c:	f00c fda6 	bl	801dd5c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011210:	4b0b      	ldr	r3, [pc, #44]	; (8011240 <pbuf_free_ooseq+0x48>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	607b      	str	r3, [r7, #4]
 8011216:	e00a      	b.n	801122e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801121c:	2b00      	cmp	r3, #0
 801121e:	d003      	beq.n	8011228 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f002 ff19 	bl	8014058 <tcp_free_ooseq>
      return;
 8011226:	e005      	b.n	8011234 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	607b      	str	r3, [r7, #4]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d1f1      	bne.n	8011218 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	2001b0c0 	.word	0x2001b0c0
 8011240:	2001b0c8 	.word	0x2001b0c8

08011244 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801124c:	f7ff ffd4 	bl	80111f8 <pbuf_free_ooseq>
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801125e:	f00c fd6f 	bl	801dd40 <sys_arch_protect>
 8011262:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011264:	4b0f      	ldr	r3, [pc, #60]	; (80112a4 <pbuf_pool_is_empty+0x4c>)
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801126a:	4b0e      	ldr	r3, [pc, #56]	; (80112a4 <pbuf_pool_is_empty+0x4c>)
 801126c:	2201      	movs	r2, #1
 801126e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f00c fd73 	bl	801dd5c <sys_arch_unprotect>

  if (!queued) {
 8011276:	78fb      	ldrb	r3, [r7, #3]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d10f      	bne.n	801129c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801127c:	2100      	movs	r1, #0
 801127e:	480a      	ldr	r0, [pc, #40]	; (80112a8 <pbuf_pool_is_empty+0x50>)
 8011280:	f7fd fef4 	bl	800f06c <tcpip_try_callback>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d008      	beq.n	801129c <pbuf_pool_is_empty+0x44>
 801128a:	f00c fd59 	bl	801dd40 <sys_arch_protect>
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	4b04      	ldr	r3, [pc, #16]	; (80112a4 <pbuf_pool_is_empty+0x4c>)
 8011292:	2200      	movs	r2, #0
 8011294:	701a      	strb	r2, [r3, #0]
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f00c fd60 	bl	801dd5c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801129c:	bf00      	nop
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	2001b0c0 	.word	0x2001b0c0
 80112a8:	08011245 	.word	0x08011245

080112ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b085      	sub	sp, #20
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	4611      	mov	r1, r2
 80112b8:	461a      	mov	r2, r3
 80112ba:	460b      	mov	r3, r1
 80112bc:	80fb      	strh	r3, [r7, #6]
 80112be:	4613      	mov	r3, r2
 80112c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	68ba      	ldr	r2, [r7, #8]
 80112cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	88fa      	ldrh	r2, [r7, #6]
 80112d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	88ba      	ldrh	r2, [r7, #4]
 80112d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80112da:	8b3b      	ldrh	r3, [r7, #24]
 80112dc:	b2da      	uxtb	r2, r3
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	7f3a      	ldrb	r2, [r7, #28]
 80112e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2201      	movs	r2, #1
 80112ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2200      	movs	r2, #0
 80112f2:	73da      	strb	r2, [r3, #15]
}
 80112f4:	bf00      	nop
 80112f6:	3714      	adds	r7, #20
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b08c      	sub	sp, #48	; 0x30
 8011304:	af02      	add	r7, sp, #8
 8011306:	4603      	mov	r3, r0
 8011308:	71fb      	strb	r3, [r7, #7]
 801130a:	460b      	mov	r3, r1
 801130c:	80bb      	strh	r3, [r7, #4]
 801130e:	4613      	mov	r3, r2
 8011310:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011312:	79fb      	ldrb	r3, [r7, #7]
 8011314:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011316:	887b      	ldrh	r3, [r7, #2]
 8011318:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801131c:	d07f      	beq.n	801141e <pbuf_alloc+0x11e>
 801131e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011322:	f300 80c8 	bgt.w	80114b6 <pbuf_alloc+0x1b6>
 8011326:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801132a:	d010      	beq.n	801134e <pbuf_alloc+0x4e>
 801132c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011330:	f300 80c1 	bgt.w	80114b6 <pbuf_alloc+0x1b6>
 8011334:	2b01      	cmp	r3, #1
 8011336:	d002      	beq.n	801133e <pbuf_alloc+0x3e>
 8011338:	2b41      	cmp	r3, #65	; 0x41
 801133a:	f040 80bc 	bne.w	80114b6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801133e:	887a      	ldrh	r2, [r7, #2]
 8011340:	88bb      	ldrh	r3, [r7, #4]
 8011342:	4619      	mov	r1, r3
 8011344:	2000      	movs	r0, #0
 8011346:	f000 f8d1 	bl	80114ec <pbuf_alloc_reference>
 801134a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801134c:	e0bd      	b.n	80114ca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801134e:	2300      	movs	r3, #0
 8011350:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011352:	2300      	movs	r3, #0
 8011354:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011356:	88bb      	ldrh	r3, [r7, #4]
 8011358:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801135a:	200d      	movs	r0, #13
 801135c:	f7ff fbb2 	bl	8010ac4 <memp_malloc>
 8011360:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d109      	bne.n	801137c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011368:	f7ff ff76 	bl	8011258 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136e:	2b00      	cmp	r3, #0
 8011370:	d002      	beq.n	8011378 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011374:	f000 fada 	bl	801192c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011378:	2300      	movs	r3, #0
 801137a:	e0a7      	b.n	80114cc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801137c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801137e:	3303      	adds	r3, #3
 8011380:	b29b      	uxth	r3, r3
 8011382:	f023 0303 	bic.w	r3, r3, #3
 8011386:	b29b      	uxth	r3, r3
 8011388:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801138c:	b29b      	uxth	r3, r3
 801138e:	8b7a      	ldrh	r2, [r7, #26]
 8011390:	4293      	cmp	r3, r2
 8011392:	bf28      	it	cs
 8011394:	4613      	movcs	r3, r2
 8011396:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801139a:	3310      	adds	r3, #16
 801139c:	693a      	ldr	r2, [r7, #16]
 801139e:	4413      	add	r3, r2
 80113a0:	3303      	adds	r3, #3
 80113a2:	f023 0303 	bic.w	r3, r3, #3
 80113a6:	4618      	mov	r0, r3
 80113a8:	89f9      	ldrh	r1, [r7, #14]
 80113aa:	8b7a      	ldrh	r2, [r7, #26]
 80113ac:	2300      	movs	r3, #0
 80113ae:	9301      	str	r3, [sp, #4]
 80113b0:	887b      	ldrh	r3, [r7, #2]
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	460b      	mov	r3, r1
 80113b6:	4601      	mov	r1, r0
 80113b8:	6938      	ldr	r0, [r7, #16]
 80113ba:	f7ff ff77 	bl	80112ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	f003 0303 	and.w	r3, r3, #3
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d006      	beq.n	80113d8 <pbuf_alloc+0xd8>
 80113ca:	4b42      	ldr	r3, [pc, #264]	; (80114d4 <pbuf_alloc+0x1d4>)
 80113cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80113d0:	4941      	ldr	r1, [pc, #260]	; (80114d8 <pbuf_alloc+0x1d8>)
 80113d2:	4842      	ldr	r0, [pc, #264]	; (80114dc <pbuf_alloc+0x1dc>)
 80113d4:	f00d fb52 	bl	801ea7c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80113d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113da:	3303      	adds	r3, #3
 80113dc:	f023 0303 	bic.w	r3, r3, #3
 80113e0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80113e4:	d106      	bne.n	80113f4 <pbuf_alloc+0xf4>
 80113e6:	4b3b      	ldr	r3, [pc, #236]	; (80114d4 <pbuf_alloc+0x1d4>)
 80113e8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80113ec:	493c      	ldr	r1, [pc, #240]	; (80114e0 <pbuf_alloc+0x1e0>)
 80113ee:	483b      	ldr	r0, [pc, #236]	; (80114dc <pbuf_alloc+0x1dc>)
 80113f0:	f00d fb44 	bl	801ea7c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80113f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d102      	bne.n	8011400 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	627b      	str	r3, [r7, #36]	; 0x24
 80113fe:	e002      	b.n	8011406 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	693a      	ldr	r2, [r7, #16]
 8011404:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801140a:	8b7a      	ldrh	r2, [r7, #26]
 801140c:	89fb      	ldrh	r3, [r7, #14]
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011412:	2300      	movs	r3, #0
 8011414:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011416:	8b7b      	ldrh	r3, [r7, #26]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d19e      	bne.n	801135a <pbuf_alloc+0x5a>
      break;
 801141c:	e055      	b.n	80114ca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801141e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011420:	3303      	adds	r3, #3
 8011422:	b29b      	uxth	r3, r3
 8011424:	f023 0303 	bic.w	r3, r3, #3
 8011428:	b29a      	uxth	r2, r3
 801142a:	88bb      	ldrh	r3, [r7, #4]
 801142c:	3303      	adds	r3, #3
 801142e:	b29b      	uxth	r3, r3
 8011430:	f023 0303 	bic.w	r3, r3, #3
 8011434:	b29b      	uxth	r3, r3
 8011436:	4413      	add	r3, r2
 8011438:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801143a:	8b3b      	ldrh	r3, [r7, #24]
 801143c:	3310      	adds	r3, #16
 801143e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011440:	8b3a      	ldrh	r2, [r7, #24]
 8011442:	88bb      	ldrh	r3, [r7, #4]
 8011444:	3303      	adds	r3, #3
 8011446:	f023 0303 	bic.w	r3, r3, #3
 801144a:	429a      	cmp	r2, r3
 801144c:	d306      	bcc.n	801145c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801144e:	8afa      	ldrh	r2, [r7, #22]
 8011450:	88bb      	ldrh	r3, [r7, #4]
 8011452:	3303      	adds	r3, #3
 8011454:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011458:	429a      	cmp	r2, r3
 801145a:	d201      	bcs.n	8011460 <pbuf_alloc+0x160>
        return NULL;
 801145c:	2300      	movs	r3, #0
 801145e:	e035      	b.n	80114cc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011460:	8afb      	ldrh	r3, [r7, #22]
 8011462:	4618      	mov	r0, r3
 8011464:	f7ff f9ac 	bl	80107c0 <mem_malloc>
 8011468:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146c:	2b00      	cmp	r3, #0
 801146e:	d101      	bne.n	8011474 <pbuf_alloc+0x174>
        return NULL;
 8011470:	2300      	movs	r3, #0
 8011472:	e02b      	b.n	80114cc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011474:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011476:	3310      	adds	r3, #16
 8011478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801147a:	4413      	add	r3, r2
 801147c:	3303      	adds	r3, #3
 801147e:	f023 0303 	bic.w	r3, r3, #3
 8011482:	4618      	mov	r0, r3
 8011484:	88b9      	ldrh	r1, [r7, #4]
 8011486:	88ba      	ldrh	r2, [r7, #4]
 8011488:	2300      	movs	r3, #0
 801148a:	9301      	str	r3, [sp, #4]
 801148c:	887b      	ldrh	r3, [r7, #2]
 801148e:	9300      	str	r3, [sp, #0]
 8011490:	460b      	mov	r3, r1
 8011492:	4601      	mov	r1, r0
 8011494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011496:	f7ff ff09 	bl	80112ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	f003 0303 	and.w	r3, r3, #3
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d010      	beq.n	80114c8 <pbuf_alloc+0x1c8>
 80114a6:	4b0b      	ldr	r3, [pc, #44]	; (80114d4 <pbuf_alloc+0x1d4>)
 80114a8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80114ac:	490d      	ldr	r1, [pc, #52]	; (80114e4 <pbuf_alloc+0x1e4>)
 80114ae:	480b      	ldr	r0, [pc, #44]	; (80114dc <pbuf_alloc+0x1dc>)
 80114b0:	f00d fae4 	bl	801ea7c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80114b4:	e008      	b.n	80114c8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80114b6:	4b07      	ldr	r3, [pc, #28]	; (80114d4 <pbuf_alloc+0x1d4>)
 80114b8:	f240 1227 	movw	r2, #295	; 0x127
 80114bc:	490a      	ldr	r1, [pc, #40]	; (80114e8 <pbuf_alloc+0x1e8>)
 80114be:	4807      	ldr	r0, [pc, #28]	; (80114dc <pbuf_alloc+0x1dc>)
 80114c0:	f00d fadc 	bl	801ea7c <iprintf>
      return NULL;
 80114c4:	2300      	movs	r3, #0
 80114c6:	e001      	b.n	80114cc <pbuf_alloc+0x1cc>
      break;
 80114c8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80114ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3728      	adds	r7, #40	; 0x28
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	08023bbc 	.word	0x08023bbc
 80114d8:	08023bec 	.word	0x08023bec
 80114dc:	08023c1c 	.word	0x08023c1c
 80114e0:	08023c44 	.word	0x08023c44
 80114e4:	08023c78 	.word	0x08023c78
 80114e8:	08023ca4 	.word	0x08023ca4

080114ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b086      	sub	sp, #24
 80114f0:	af02      	add	r7, sp, #8
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	460b      	mov	r3, r1
 80114f6:	807b      	strh	r3, [r7, #2]
 80114f8:	4613      	mov	r3, r2
 80114fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80114fc:	883b      	ldrh	r3, [r7, #0]
 80114fe:	2b41      	cmp	r3, #65	; 0x41
 8011500:	d009      	beq.n	8011516 <pbuf_alloc_reference+0x2a>
 8011502:	883b      	ldrh	r3, [r7, #0]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d006      	beq.n	8011516 <pbuf_alloc_reference+0x2a>
 8011508:	4b0f      	ldr	r3, [pc, #60]	; (8011548 <pbuf_alloc_reference+0x5c>)
 801150a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801150e:	490f      	ldr	r1, [pc, #60]	; (801154c <pbuf_alloc_reference+0x60>)
 8011510:	480f      	ldr	r0, [pc, #60]	; (8011550 <pbuf_alloc_reference+0x64>)
 8011512:	f00d fab3 	bl	801ea7c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011516:	200c      	movs	r0, #12
 8011518:	f7ff fad4 	bl	8010ac4 <memp_malloc>
 801151c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011524:	2300      	movs	r3, #0
 8011526:	e00b      	b.n	8011540 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011528:	8879      	ldrh	r1, [r7, #2]
 801152a:	887a      	ldrh	r2, [r7, #2]
 801152c:	2300      	movs	r3, #0
 801152e:	9301      	str	r3, [sp, #4]
 8011530:	883b      	ldrh	r3, [r7, #0]
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	460b      	mov	r3, r1
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	68f8      	ldr	r0, [r7, #12]
 801153a:	f7ff feb7 	bl	80112ac <pbuf_init_alloced_pbuf>
  return p;
 801153e:	68fb      	ldr	r3, [r7, #12]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3710      	adds	r7, #16
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	08023bbc 	.word	0x08023bbc
 801154c:	08023cc0 	.word	0x08023cc0
 8011550:	08023c1c 	.word	0x08023c1c

08011554 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b088      	sub	sp, #32
 8011558:	af02      	add	r7, sp, #8
 801155a:	607b      	str	r3, [r7, #4]
 801155c:	4603      	mov	r3, r0
 801155e:	73fb      	strb	r3, [r7, #15]
 8011560:	460b      	mov	r3, r1
 8011562:	81bb      	strh	r3, [r7, #12]
 8011564:	4613      	mov	r3, r2
 8011566:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011568:	7bfb      	ldrb	r3, [r7, #15]
 801156a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801156c:	8a7b      	ldrh	r3, [r7, #18]
 801156e:	3303      	adds	r3, #3
 8011570:	f023 0203 	bic.w	r2, r3, #3
 8011574:	89bb      	ldrh	r3, [r7, #12]
 8011576:	441a      	add	r2, r3
 8011578:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801157a:	429a      	cmp	r2, r3
 801157c:	d901      	bls.n	8011582 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801157e:	2300      	movs	r3, #0
 8011580:	e018      	b.n	80115b4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011582:	6a3b      	ldr	r3, [r7, #32]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d007      	beq.n	8011598 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011588:	8a7b      	ldrh	r3, [r7, #18]
 801158a:	3303      	adds	r3, #3
 801158c:	f023 0303 	bic.w	r3, r3, #3
 8011590:	6a3a      	ldr	r2, [r7, #32]
 8011592:	4413      	add	r3, r2
 8011594:	617b      	str	r3, [r7, #20]
 8011596:	e001      	b.n	801159c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011598:	2300      	movs	r3, #0
 801159a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	89b9      	ldrh	r1, [r7, #12]
 80115a0:	89ba      	ldrh	r2, [r7, #12]
 80115a2:	2302      	movs	r3, #2
 80115a4:	9301      	str	r3, [sp, #4]
 80115a6:	897b      	ldrh	r3, [r7, #10]
 80115a8:	9300      	str	r3, [sp, #0]
 80115aa:	460b      	mov	r3, r1
 80115ac:	6979      	ldr	r1, [r7, #20]
 80115ae:	f7ff fe7d 	bl	80112ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80115b2:	687b      	ldr	r3, [r7, #4]
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3718      	adds	r7, #24
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	460b      	mov	r3, r1
 80115c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d106      	bne.n	80115dc <pbuf_realloc+0x20>
 80115ce:	4b3a      	ldr	r3, [pc, #232]	; (80116b8 <pbuf_realloc+0xfc>)
 80115d0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80115d4:	4939      	ldr	r1, [pc, #228]	; (80116bc <pbuf_realloc+0x100>)
 80115d6:	483a      	ldr	r0, [pc, #232]	; (80116c0 <pbuf_realloc+0x104>)
 80115d8:	f00d fa50 	bl	801ea7c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	891b      	ldrh	r3, [r3, #8]
 80115e0:	887a      	ldrh	r2, [r7, #2]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d263      	bcs.n	80116ae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	891a      	ldrh	r2, [r3, #8]
 80115ea:	887b      	ldrh	r3, [r7, #2]
 80115ec:	1ad3      	subs	r3, r2, r3
 80115ee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80115f0:	887b      	ldrh	r3, [r7, #2]
 80115f2:	817b      	strh	r3, [r7, #10]
  q = p;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80115f8:	e018      	b.n	801162c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	895b      	ldrh	r3, [r3, #10]
 80115fe:	897a      	ldrh	r2, [r7, #10]
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	891a      	ldrh	r2, [r3, #8]
 8011608:	893b      	ldrh	r3, [r7, #8]
 801160a:	1ad3      	subs	r3, r2, r3
 801160c:	b29a      	uxth	r2, r3
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d106      	bne.n	801162c <pbuf_realloc+0x70>
 801161e:	4b26      	ldr	r3, [pc, #152]	; (80116b8 <pbuf_realloc+0xfc>)
 8011620:	f240 12af 	movw	r2, #431	; 0x1af
 8011624:	4927      	ldr	r1, [pc, #156]	; (80116c4 <pbuf_realloc+0x108>)
 8011626:	4826      	ldr	r0, [pc, #152]	; (80116c0 <pbuf_realloc+0x104>)
 8011628:	f00d fa28 	bl	801ea7c <iprintf>
  while (rem_len > q->len) {
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	895b      	ldrh	r3, [r3, #10]
 8011630:	897a      	ldrh	r2, [r7, #10]
 8011632:	429a      	cmp	r2, r3
 8011634:	d8e1      	bhi.n	80115fa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	7b1b      	ldrb	r3, [r3, #12]
 801163a:	f003 030f 	and.w	r3, r3, #15
 801163e:	2b00      	cmp	r3, #0
 8011640:	d121      	bne.n	8011686 <pbuf_realloc+0xca>
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	895b      	ldrh	r3, [r3, #10]
 8011646:	897a      	ldrh	r2, [r7, #10]
 8011648:	429a      	cmp	r2, r3
 801164a:	d01c      	beq.n	8011686 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	7b5b      	ldrb	r3, [r3, #13]
 8011650:	f003 0302 	and.w	r3, r3, #2
 8011654:	2b00      	cmp	r3, #0
 8011656:	d116      	bne.n	8011686 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	b29a      	uxth	r2, r3
 8011662:	897b      	ldrh	r3, [r7, #10]
 8011664:	4413      	add	r3, r2
 8011666:	b29b      	uxth	r3, r3
 8011668:	4619      	mov	r1, r3
 801166a:	68f8      	ldr	r0, [r7, #12]
 801166c:	f7fe ff9e 	bl	80105ac <mem_trim>
 8011670:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d106      	bne.n	8011686 <pbuf_realloc+0xca>
 8011678:	4b0f      	ldr	r3, [pc, #60]	; (80116b8 <pbuf_realloc+0xfc>)
 801167a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801167e:	4912      	ldr	r1, [pc, #72]	; (80116c8 <pbuf_realloc+0x10c>)
 8011680:	480f      	ldr	r0, [pc, #60]	; (80116c0 <pbuf_realloc+0x104>)
 8011682:	f00d f9fb 	bl	801ea7c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	897a      	ldrh	r2, [r7, #10]
 801168a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	895a      	ldrh	r2, [r3, #10]
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d004      	beq.n	80116a6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f000 f943 	bl	801192c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2200      	movs	r2, #0
 80116aa:	601a      	str	r2, [r3, #0]
 80116ac:	e000      	b.n	80116b0 <pbuf_realloc+0xf4>
    return;
 80116ae:	bf00      	nop

}
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	08023bbc 	.word	0x08023bbc
 80116bc:	08023cd4 	.word	0x08023cd4
 80116c0:	08023c1c 	.word	0x08023c1c
 80116c4:	08023cec 	.word	0x08023cec
 80116c8:	08023d04 	.word	0x08023d04

080116cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b086      	sub	sp, #24
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	60f8      	str	r0, [r7, #12]
 80116d4:	60b9      	str	r1, [r7, #8]
 80116d6:	4613      	mov	r3, r2
 80116d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d106      	bne.n	80116ee <pbuf_add_header_impl+0x22>
 80116e0:	4b2b      	ldr	r3, [pc, #172]	; (8011790 <pbuf_add_header_impl+0xc4>)
 80116e2:	f240 12df 	movw	r2, #479	; 0x1df
 80116e6:	492b      	ldr	r1, [pc, #172]	; (8011794 <pbuf_add_header_impl+0xc8>)
 80116e8:	482b      	ldr	r0, [pc, #172]	; (8011798 <pbuf_add_header_impl+0xcc>)
 80116ea:	f00d f9c7 	bl	801ea7c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d003      	beq.n	80116fc <pbuf_add_header_impl+0x30>
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116fa:	d301      	bcc.n	8011700 <pbuf_add_header_impl+0x34>
    return 1;
 80116fc:	2301      	movs	r3, #1
 80116fe:	e043      	b.n	8011788 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d101      	bne.n	801170a <pbuf_add_header_impl+0x3e>
    return 0;
 8011706:	2300      	movs	r3, #0
 8011708:	e03e      	b.n	8011788 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	891a      	ldrh	r2, [r3, #8]
 8011712:	8a7b      	ldrh	r3, [r7, #18]
 8011714:	4413      	add	r3, r2
 8011716:	b29b      	uxth	r3, r3
 8011718:	8a7a      	ldrh	r2, [r7, #18]
 801171a:	429a      	cmp	r2, r3
 801171c:	d901      	bls.n	8011722 <pbuf_add_header_impl+0x56>
    return 1;
 801171e:	2301      	movs	r3, #1
 8011720:	e032      	b.n	8011788 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	7b1b      	ldrb	r3, [r3, #12]
 8011726:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011728:	8a3b      	ldrh	r3, [r7, #16]
 801172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00c      	beq.n	801174c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	685a      	ldr	r2, [r3, #4]
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	425b      	negs	r3, r3
 801173a:	4413      	add	r3, r2
 801173c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	3310      	adds	r3, #16
 8011742:	697a      	ldr	r2, [r7, #20]
 8011744:	429a      	cmp	r2, r3
 8011746:	d20d      	bcs.n	8011764 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011748:	2301      	movs	r3, #1
 801174a:	e01d      	b.n	8011788 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801174c:	79fb      	ldrb	r3, [r7, #7]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d006      	beq.n	8011760 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	685a      	ldr	r2, [r3, #4]
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	425b      	negs	r3, r3
 801175a:	4413      	add	r3, r2
 801175c:	617b      	str	r3, [r7, #20]
 801175e:	e001      	b.n	8011764 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011760:	2301      	movs	r3, #1
 8011762:	e011      	b.n	8011788 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	697a      	ldr	r2, [r7, #20]
 8011768:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	895a      	ldrh	r2, [r3, #10]
 801176e:	8a7b      	ldrh	r3, [r7, #18]
 8011770:	4413      	add	r3, r2
 8011772:	b29a      	uxth	r2, r3
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	891a      	ldrh	r2, [r3, #8]
 801177c:	8a7b      	ldrh	r3, [r7, #18]
 801177e:	4413      	add	r3, r2
 8011780:	b29a      	uxth	r2, r3
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	811a      	strh	r2, [r3, #8]


  return 0;
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3718      	adds	r7, #24
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	08023bbc 	.word	0x08023bbc
 8011794:	08023d20 	.word	0x08023d20
 8011798:	08023c1c 	.word	0x08023c1c

0801179c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80117a6:	2200      	movs	r2, #0
 80117a8:	6839      	ldr	r1, [r7, #0]
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f7ff ff8e 	bl	80116cc <pbuf_add_header_impl>
 80117b0:	4603      	mov	r3, r0
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3708      	adds	r7, #8
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}
	...

080117bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b084      	sub	sp, #16
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d106      	bne.n	80117da <pbuf_remove_header+0x1e>
 80117cc:	4b20      	ldr	r3, [pc, #128]	; (8011850 <pbuf_remove_header+0x94>)
 80117ce:	f240 224b 	movw	r2, #587	; 0x24b
 80117d2:	4920      	ldr	r1, [pc, #128]	; (8011854 <pbuf_remove_header+0x98>)
 80117d4:	4820      	ldr	r0, [pc, #128]	; (8011858 <pbuf_remove_header+0x9c>)
 80117d6:	f00d f951 	bl	801ea7c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d003      	beq.n	80117e8 <pbuf_remove_header+0x2c>
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117e6:	d301      	bcc.n	80117ec <pbuf_remove_header+0x30>
    return 1;
 80117e8:	2301      	movs	r3, #1
 80117ea:	e02c      	b.n	8011846 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d101      	bne.n	80117f6 <pbuf_remove_header+0x3a>
    return 0;
 80117f2:	2300      	movs	r3, #0
 80117f4:	e027      	b.n	8011846 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	895b      	ldrh	r3, [r3, #10]
 80117fe:	89fa      	ldrh	r2, [r7, #14]
 8011800:	429a      	cmp	r2, r3
 8011802:	d908      	bls.n	8011816 <pbuf_remove_header+0x5a>
 8011804:	4b12      	ldr	r3, [pc, #72]	; (8011850 <pbuf_remove_header+0x94>)
 8011806:	f240 2255 	movw	r2, #597	; 0x255
 801180a:	4914      	ldr	r1, [pc, #80]	; (801185c <pbuf_remove_header+0xa0>)
 801180c:	4812      	ldr	r0, [pc, #72]	; (8011858 <pbuf_remove_header+0x9c>)
 801180e:	f00d f935 	bl	801ea7c <iprintf>
 8011812:	2301      	movs	r3, #1
 8011814:	e017      	b.n	8011846 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	685a      	ldr	r2, [r3, #4]
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	441a      	add	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	895a      	ldrh	r2, [r3, #10]
 801182c:	89fb      	ldrh	r3, [r7, #14]
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	b29a      	uxth	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	891a      	ldrh	r2, [r3, #8]
 801183a:	89fb      	ldrh	r3, [r7, #14]
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	b29a      	uxth	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011844:	2300      	movs	r3, #0
}
 8011846:	4618      	mov	r0, r3
 8011848:	3710      	adds	r7, #16
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	08023bbc 	.word	0x08023bbc
 8011854:	08023d20 	.word	0x08023d20
 8011858:	08023c1c 	.word	0x08023c1c
 801185c:	08023d2c 	.word	0x08023d2c

08011860 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	460b      	mov	r3, r1
 801186a:	807b      	strh	r3, [r7, #2]
 801186c:	4613      	mov	r3, r2
 801186e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011870:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011874:	2b00      	cmp	r3, #0
 8011876:	da08      	bge.n	801188a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801187c:	425b      	negs	r3, r3
 801187e:	4619      	mov	r1, r3
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f7ff ff9b 	bl	80117bc <pbuf_remove_header>
 8011886:	4603      	mov	r3, r0
 8011888:	e007      	b.n	801189a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801188a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801188e:	787a      	ldrb	r2, [r7, #1]
 8011890:	4619      	mov	r1, r3
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f7ff ff1a 	bl	80116cc <pbuf_add_header_impl>
 8011898:	4603      	mov	r3, r0
  }
}
 801189a:	4618      	mov	r0, r3
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b082      	sub	sp, #8
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
 80118aa:	460b      	mov	r3, r1
 80118ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80118ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80118b2:	2201      	movs	r2, #1
 80118b4:	4619      	mov	r1, r3
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f7ff ffd2 	bl	8011860 <pbuf_header_impl>
 80118bc:	4603      	mov	r3, r0
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3708      	adds	r7, #8
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}

080118c6 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 80118c6:	b580      	push	{r7, lr}
 80118c8:	b086      	sub	sp, #24
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	6078      	str	r0, [r7, #4]
 80118ce:	460b      	mov	r3, r1
 80118d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 80118d6:	887b      	ldrh	r3, [r7, #2]
 80118d8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80118da:	e01c      	b.n	8011916 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	895b      	ldrh	r3, [r3, #10]
 80118e0:	8a7a      	ldrh	r2, [r7, #18]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d310      	bcc.n	8011908 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	895b      	ldrh	r3, [r3, #10]
 80118ee:	8a7a      	ldrh	r2, [r7, #18]
 80118f0:	1ad3      	subs	r3, r2, r3
 80118f2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2200      	movs	r2, #0
 80118fe:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8011900:	68f8      	ldr	r0, [r7, #12]
 8011902:	f000 f813 	bl	801192c <pbuf_free>
 8011906:	e006      	b.n	8011916 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8011908:	8a7b      	ldrh	r3, [r7, #18]
 801190a:	4619      	mov	r1, r3
 801190c:	6978      	ldr	r0, [r7, #20]
 801190e:	f7ff ff55 	bl	80117bc <pbuf_remove_header>
      free_left = 0;
 8011912:	2300      	movs	r3, #0
 8011914:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8011916:	8a7b      	ldrh	r3, [r7, #18]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d002      	beq.n	8011922 <pbuf_free_header+0x5c>
 801191c:	697b      	ldr	r3, [r7, #20]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d1dc      	bne.n	80118dc <pbuf_free_header+0x16>
    }
  }
  return p;
 8011922:	697b      	ldr	r3, [r7, #20]
}
 8011924:	4618      	mov	r0, r3
 8011926:	3718      	adds	r7, #24
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b088      	sub	sp, #32
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d10b      	bne.n	8011952 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d106      	bne.n	801194e <pbuf_free+0x22>
 8011940:	4b3b      	ldr	r3, [pc, #236]	; (8011a30 <pbuf_free+0x104>)
 8011942:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011946:	493b      	ldr	r1, [pc, #236]	; (8011a34 <pbuf_free+0x108>)
 8011948:	483b      	ldr	r0, [pc, #236]	; (8011a38 <pbuf_free+0x10c>)
 801194a:	f00d f897 	bl	801ea7c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801194e:	2300      	movs	r3, #0
 8011950:	e069      	b.n	8011a26 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011952:	2300      	movs	r3, #0
 8011954:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011956:	e062      	b.n	8011a1e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011958:	f00c f9f2 	bl	801dd40 <sys_arch_protect>
 801195c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	7b9b      	ldrb	r3, [r3, #14]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d106      	bne.n	8011974 <pbuf_free+0x48>
 8011966:	4b32      	ldr	r3, [pc, #200]	; (8011a30 <pbuf_free+0x104>)
 8011968:	f240 22f1 	movw	r2, #753	; 0x2f1
 801196c:	4933      	ldr	r1, [pc, #204]	; (8011a3c <pbuf_free+0x110>)
 801196e:	4832      	ldr	r0, [pc, #200]	; (8011a38 <pbuf_free+0x10c>)
 8011970:	f00d f884 	bl	801ea7c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	7b9b      	ldrb	r3, [r3, #14]
 8011978:	3b01      	subs	r3, #1
 801197a:	b2da      	uxtb	r2, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	739a      	strb	r2, [r3, #14]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	7b9b      	ldrb	r3, [r3, #14]
 8011984:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011986:	69b8      	ldr	r0, [r7, #24]
 8011988:	f00c f9e8 	bl	801dd5c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801198c:	7dfb      	ldrb	r3, [r7, #23]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d143      	bne.n	8011a1a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	7b1b      	ldrb	r3, [r3, #12]
 801199c:	f003 030f 	and.w	r3, r3, #15
 80119a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	7b5b      	ldrb	r3, [r3, #13]
 80119a6:	f003 0302 	and.w	r3, r3, #2
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d011      	beq.n	80119d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	691b      	ldr	r3, [r3, #16]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d106      	bne.n	80119c8 <pbuf_free+0x9c>
 80119ba:	4b1d      	ldr	r3, [pc, #116]	; (8011a30 <pbuf_free+0x104>)
 80119bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80119c0:	491f      	ldr	r1, [pc, #124]	; (8011a40 <pbuf_free+0x114>)
 80119c2:	481d      	ldr	r0, [pc, #116]	; (8011a38 <pbuf_free+0x10c>)
 80119c4:	f00d f85a 	bl	801ea7c <iprintf>
        pc->custom_free_function(p);
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	691b      	ldr	r3, [r3, #16]
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	4798      	blx	r3
 80119d0:	e01d      	b.n	8011a0e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80119d2:	7bfb      	ldrb	r3, [r7, #15]
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	d104      	bne.n	80119e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80119d8:	6879      	ldr	r1, [r7, #4]
 80119da:	200d      	movs	r0, #13
 80119dc:	f7ff f8c4 	bl	8010b68 <memp_free>
 80119e0:	e015      	b.n	8011a0e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80119e2:	7bfb      	ldrb	r3, [r7, #15]
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d104      	bne.n	80119f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80119e8:	6879      	ldr	r1, [r7, #4]
 80119ea:	200c      	movs	r0, #12
 80119ec:	f7ff f8bc 	bl	8010b68 <memp_free>
 80119f0:	e00d      	b.n	8011a0e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80119f2:	7bfb      	ldrb	r3, [r7, #15]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d103      	bne.n	8011a00 <pbuf_free+0xd4>
          mem_free(p);
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f7fe fd47 	bl	801048c <mem_free>
 80119fe:	e006      	b.n	8011a0e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011a00:	4b0b      	ldr	r3, [pc, #44]	; (8011a30 <pbuf_free+0x104>)
 8011a02:	f240 320f 	movw	r2, #783	; 0x30f
 8011a06:	490f      	ldr	r1, [pc, #60]	; (8011a44 <pbuf_free+0x118>)
 8011a08:	480b      	ldr	r0, [pc, #44]	; (8011a38 <pbuf_free+0x10c>)
 8011a0a:	f00d f837 	bl	801ea7c <iprintf>
        }
      }
      count++;
 8011a0e:	7ffb      	ldrb	r3, [r7, #31]
 8011a10:	3301      	adds	r3, #1
 8011a12:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	607b      	str	r3, [r7, #4]
 8011a18:	e001      	b.n	8011a1e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d199      	bne.n	8011958 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011a24:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3720      	adds	r7, #32
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	08023bbc 	.word	0x08023bbc
 8011a34:	08023d20 	.word	0x08023d20
 8011a38:	08023c1c 	.word	0x08023c1c
 8011a3c:	08023d4c 	.word	0x08023d4c
 8011a40:	08023d64 	.word	0x08023d64
 8011a44:	08023d88 	.word	0x08023d88

08011a48 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b085      	sub	sp, #20
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011a50:	2300      	movs	r3, #0
 8011a52:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011a54:	e005      	b.n	8011a62 <pbuf_clen+0x1a>
    ++len;
 8011a56:	89fb      	ldrh	r3, [r7, #14]
 8011a58:	3301      	adds	r3, #1
 8011a5a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d1f6      	bne.n	8011a56 <pbuf_clen+0xe>
  }
  return len;
 8011a68:	89fb      	ldrh	r3, [r7, #14]
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3714      	adds	r7, #20
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr
	...

08011a78 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d016      	beq.n	8011ab4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011a86:	f00c f95b 	bl	801dd40 <sys_arch_protect>
 8011a8a:	60f8      	str	r0, [r7, #12]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	7b9b      	ldrb	r3, [r3, #14]
 8011a90:	3301      	adds	r3, #1
 8011a92:	b2da      	uxtb	r2, r3
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	739a      	strb	r2, [r3, #14]
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	f00c f95f 	bl	801dd5c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	7b9b      	ldrb	r3, [r3, #14]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d106      	bne.n	8011ab4 <pbuf_ref+0x3c>
 8011aa6:	4b05      	ldr	r3, [pc, #20]	; (8011abc <pbuf_ref+0x44>)
 8011aa8:	f240 3242 	movw	r2, #834	; 0x342
 8011aac:	4904      	ldr	r1, [pc, #16]	; (8011ac0 <pbuf_ref+0x48>)
 8011aae:	4805      	ldr	r0, [pc, #20]	; (8011ac4 <pbuf_ref+0x4c>)
 8011ab0:	f00c ffe4 	bl	801ea7c <iprintf>
  }
}
 8011ab4:	bf00      	nop
 8011ab6:	3710      	adds	r7, #16
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	08023bbc 	.word	0x08023bbc
 8011ac0:	08023d9c 	.word	0x08023d9c
 8011ac4:	08023c1c 	.word	0x08023c1c

08011ac8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d002      	beq.n	8011ade <pbuf_cat+0x16>
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d107      	bne.n	8011aee <pbuf_cat+0x26>
 8011ade:	4b20      	ldr	r3, [pc, #128]	; (8011b60 <pbuf_cat+0x98>)
 8011ae0:	f240 3259 	movw	r2, #857	; 0x359
 8011ae4:	491f      	ldr	r1, [pc, #124]	; (8011b64 <pbuf_cat+0x9c>)
 8011ae6:	4820      	ldr	r0, [pc, #128]	; (8011b68 <pbuf_cat+0xa0>)
 8011ae8:	f00c ffc8 	bl	801ea7c <iprintf>
 8011aec:	e034      	b.n	8011b58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	60fb      	str	r3, [r7, #12]
 8011af2:	e00a      	b.n	8011b0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	891a      	ldrh	r2, [r3, #8]
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	891b      	ldrh	r3, [r3, #8]
 8011afc:	4413      	add	r3, r2
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	60fb      	str	r3, [r7, #12]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d1f0      	bne.n	8011af4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	891a      	ldrh	r2, [r3, #8]
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	895b      	ldrh	r3, [r3, #10]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d006      	beq.n	8011b2c <pbuf_cat+0x64>
 8011b1e:	4b10      	ldr	r3, [pc, #64]	; (8011b60 <pbuf_cat+0x98>)
 8011b20:	f240 3262 	movw	r2, #866	; 0x362
 8011b24:	4911      	ldr	r1, [pc, #68]	; (8011b6c <pbuf_cat+0xa4>)
 8011b26:	4810      	ldr	r0, [pc, #64]	; (8011b68 <pbuf_cat+0xa0>)
 8011b28:	f00c ffa8 	bl	801ea7c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d006      	beq.n	8011b42 <pbuf_cat+0x7a>
 8011b34:	4b0a      	ldr	r3, [pc, #40]	; (8011b60 <pbuf_cat+0x98>)
 8011b36:	f240 3263 	movw	r2, #867	; 0x363
 8011b3a:	490d      	ldr	r1, [pc, #52]	; (8011b70 <pbuf_cat+0xa8>)
 8011b3c:	480a      	ldr	r0, [pc, #40]	; (8011b68 <pbuf_cat+0xa0>)
 8011b3e:	f00c ff9d 	bl	801ea7c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	891a      	ldrh	r2, [r3, #8]
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	891b      	ldrh	r3, [r3, #8]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	683a      	ldr	r2, [r7, #0]
 8011b56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011b58:	3710      	adds	r7, #16
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	08023bbc 	.word	0x08023bbc
 8011b64:	08023db0 	.word	0x08023db0
 8011b68:	08023c1c 	.word	0x08023c1c
 8011b6c:	08023de8 	.word	0x08023de8
 8011b70:	08023e18 	.word	0x08023e18

08011b74 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b082      	sub	sp, #8
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
 8011b7c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011b7e:	6839      	ldr	r1, [r7, #0]
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f7ff ffa1 	bl	8011ac8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011b86:	6838      	ldr	r0, [r7, #0]
 8011b88:	f7ff ff76 	bl	8011a78 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011b8c:	bf00      	nop
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b086      	sub	sp, #24
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	617b      	str	r3, [r7, #20]
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d008      	beq.n	8011bbe <pbuf_copy+0x2a>
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d005      	beq.n	8011bbe <pbuf_copy+0x2a>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	891a      	ldrh	r2, [r3, #8]
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	891b      	ldrh	r3, [r3, #8]
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d209      	bcs.n	8011bd2 <pbuf_copy+0x3e>
 8011bbe:	4b57      	ldr	r3, [pc, #348]	; (8011d1c <pbuf_copy+0x188>)
 8011bc0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011bc4:	4956      	ldr	r1, [pc, #344]	; (8011d20 <pbuf_copy+0x18c>)
 8011bc6:	4857      	ldr	r0, [pc, #348]	; (8011d24 <pbuf_copy+0x190>)
 8011bc8:	f00c ff58 	bl	801ea7c <iprintf>
 8011bcc:	f06f 030f 	mvn.w	r3, #15
 8011bd0:	e09f      	b.n	8011d12 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	895b      	ldrh	r3, [r3, #10]
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	1ad2      	subs	r2, r2, r3
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	895b      	ldrh	r3, [r3, #10]
 8011be0:	4619      	mov	r1, r3
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	1acb      	subs	r3, r1, r3
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d306      	bcc.n	8011bf8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	895b      	ldrh	r3, [r3, #10]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	1ad3      	subs	r3, r2, r3
 8011bf4:	60fb      	str	r3, [r7, #12]
 8011bf6:	e005      	b.n	8011c04 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	895b      	ldrh	r3, [r3, #10]
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	1ad3      	subs	r3, r2, r3
 8011c02:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	685a      	ldr	r2, [r3, #4]
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	18d0      	adds	r0, r2, r3
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	685a      	ldr	r2, [r3, #4]
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	4413      	add	r3, r2
 8011c14:	68fa      	ldr	r2, [r7, #12]
 8011c16:	4619      	mov	r1, r3
 8011c18:	f00c f9ec 	bl	801dff4 <memcpy>
    offset_to += len;
 8011c1c:	697a      	ldr	r2, [r7, #20]
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	4413      	add	r3, r2
 8011c22:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011c24:	693a      	ldr	r2, [r7, #16]
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	4413      	add	r3, r2
 8011c2a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	895b      	ldrh	r3, [r3, #10]
 8011c30:	461a      	mov	r2, r3
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d906      	bls.n	8011c46 <pbuf_copy+0xb2>
 8011c38:	4b38      	ldr	r3, [pc, #224]	; (8011d1c <pbuf_copy+0x188>)
 8011c3a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011c3e:	493a      	ldr	r1, [pc, #232]	; (8011d28 <pbuf_copy+0x194>)
 8011c40:	4838      	ldr	r0, [pc, #224]	; (8011d24 <pbuf_copy+0x190>)
 8011c42:	f00c ff1b 	bl	801ea7c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	895b      	ldrh	r3, [r3, #10]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d906      	bls.n	8011c60 <pbuf_copy+0xcc>
 8011c52:	4b32      	ldr	r3, [pc, #200]	; (8011d1c <pbuf_copy+0x188>)
 8011c54:	f240 32da 	movw	r2, #986	; 0x3da
 8011c58:	4934      	ldr	r1, [pc, #208]	; (8011d2c <pbuf_copy+0x198>)
 8011c5a:	4832      	ldr	r0, [pc, #200]	; (8011d24 <pbuf_copy+0x190>)
 8011c5c:	f00c ff0e 	bl	801ea7c <iprintf>
    if (offset_from >= p_from->len) {
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	895b      	ldrh	r3, [r3, #10]
 8011c64:	461a      	mov	r2, r3
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	4293      	cmp	r3, r2
 8011c6a:	d304      	bcc.n	8011c76 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	895b      	ldrh	r3, [r3, #10]
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	4293      	cmp	r3, r2
 8011c80:	d114      	bne.n	8011cac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011c82:	2300      	movs	r3, #0
 8011c84:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d10c      	bne.n	8011cac <pbuf_copy+0x118>
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d009      	beq.n	8011cac <pbuf_copy+0x118>
 8011c98:	4b20      	ldr	r3, [pc, #128]	; (8011d1c <pbuf_copy+0x188>)
 8011c9a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011c9e:	4924      	ldr	r1, [pc, #144]	; (8011d30 <pbuf_copy+0x19c>)
 8011ca0:	4820      	ldr	r0, [pc, #128]	; (8011d24 <pbuf_copy+0x190>)
 8011ca2:	f00c feeb 	bl	801ea7c <iprintf>
 8011ca6:	f06f 030f 	mvn.w	r3, #15
 8011caa:	e032      	b.n	8011d12 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d013      	beq.n	8011cda <pbuf_copy+0x146>
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	895a      	ldrh	r2, [r3, #10]
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	891b      	ldrh	r3, [r3, #8]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d10d      	bne.n	8011cda <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d009      	beq.n	8011cda <pbuf_copy+0x146>
 8011cc6:	4b15      	ldr	r3, [pc, #84]	; (8011d1c <pbuf_copy+0x188>)
 8011cc8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011ccc:	4919      	ldr	r1, [pc, #100]	; (8011d34 <pbuf_copy+0x1a0>)
 8011cce:	4815      	ldr	r0, [pc, #84]	; (8011d24 <pbuf_copy+0x190>)
 8011cd0:	f00c fed4 	bl	801ea7c <iprintf>
 8011cd4:	f06f 0305 	mvn.w	r3, #5
 8011cd8:	e01b      	b.n	8011d12 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d013      	beq.n	8011d08 <pbuf_copy+0x174>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	895a      	ldrh	r2, [r3, #10]
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	891b      	ldrh	r3, [r3, #8]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d10d      	bne.n	8011d08 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d009      	beq.n	8011d08 <pbuf_copy+0x174>
 8011cf4:	4b09      	ldr	r3, [pc, #36]	; (8011d1c <pbuf_copy+0x188>)
 8011cf6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011cfa:	490e      	ldr	r1, [pc, #56]	; (8011d34 <pbuf_copy+0x1a0>)
 8011cfc:	4809      	ldr	r0, [pc, #36]	; (8011d24 <pbuf_copy+0x190>)
 8011cfe:	f00c febd 	bl	801ea7c <iprintf>
 8011d02:	f06f 0305 	mvn.w	r3, #5
 8011d06:	e004      	b.n	8011d12 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	f47f af61 	bne.w	8011bd2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3718      	adds	r7, #24
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	08023bbc 	.word	0x08023bbc
 8011d20:	08023e64 	.word	0x08023e64
 8011d24:	08023c1c 	.word	0x08023c1c
 8011d28:	08023e94 	.word	0x08023e94
 8011d2c:	08023eac 	.word	0x08023eac
 8011d30:	08023ec8 	.word	0x08023ec8
 8011d34:	08023ed8 	.word	0x08023ed8

08011d38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b088      	sub	sp, #32
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	4611      	mov	r1, r2
 8011d44:	461a      	mov	r2, r3
 8011d46:	460b      	mov	r3, r1
 8011d48:	80fb      	strh	r3, [r7, #6]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011d52:	2300      	movs	r3, #0
 8011d54:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d108      	bne.n	8011d6e <pbuf_copy_partial+0x36>
 8011d5c:	4b2b      	ldr	r3, [pc, #172]	; (8011e0c <pbuf_copy_partial+0xd4>)
 8011d5e:	f240 420a 	movw	r2, #1034	; 0x40a
 8011d62:	492b      	ldr	r1, [pc, #172]	; (8011e10 <pbuf_copy_partial+0xd8>)
 8011d64:	482b      	ldr	r0, [pc, #172]	; (8011e14 <pbuf_copy_partial+0xdc>)
 8011d66:	f00c fe89 	bl	801ea7c <iprintf>
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	e04a      	b.n	8011e04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d108      	bne.n	8011d86 <pbuf_copy_partial+0x4e>
 8011d74:	4b25      	ldr	r3, [pc, #148]	; (8011e0c <pbuf_copy_partial+0xd4>)
 8011d76:	f240 420b 	movw	r2, #1035	; 0x40b
 8011d7a:	4927      	ldr	r1, [pc, #156]	; (8011e18 <pbuf_copy_partial+0xe0>)
 8011d7c:	4825      	ldr	r0, [pc, #148]	; (8011e14 <pbuf_copy_partial+0xdc>)
 8011d7e:	f00c fe7d 	bl	801ea7c <iprintf>
 8011d82:	2300      	movs	r3, #0
 8011d84:	e03e      	b.n	8011e04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	61fb      	str	r3, [r7, #28]
 8011d8a:	e034      	b.n	8011df6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011d8c:	88bb      	ldrh	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00a      	beq.n	8011da8 <pbuf_copy_partial+0x70>
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	895b      	ldrh	r3, [r3, #10]
 8011d96:	88ba      	ldrh	r2, [r7, #4]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d305      	bcc.n	8011da8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011d9c:	69fb      	ldr	r3, [r7, #28]
 8011d9e:	895b      	ldrh	r3, [r3, #10]
 8011da0:	88ba      	ldrh	r2, [r7, #4]
 8011da2:	1ad3      	subs	r3, r2, r3
 8011da4:	80bb      	strh	r3, [r7, #4]
 8011da6:	e023      	b.n	8011df0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	895a      	ldrh	r2, [r3, #10]
 8011dac:	88bb      	ldrh	r3, [r7, #4]
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011db2:	8b3a      	ldrh	r2, [r7, #24]
 8011db4:	88fb      	ldrh	r3, [r7, #6]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d901      	bls.n	8011dbe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011dba:	88fb      	ldrh	r3, [r7, #6]
 8011dbc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011dbe:	8b7b      	ldrh	r3, [r7, #26]
 8011dc0:	68ba      	ldr	r2, [r7, #8]
 8011dc2:	18d0      	adds	r0, r2, r3
 8011dc4:	69fb      	ldr	r3, [r7, #28]
 8011dc6:	685a      	ldr	r2, [r3, #4]
 8011dc8:	88bb      	ldrh	r3, [r7, #4]
 8011dca:	4413      	add	r3, r2
 8011dcc:	8b3a      	ldrh	r2, [r7, #24]
 8011dce:	4619      	mov	r1, r3
 8011dd0:	f00c f910 	bl	801dff4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011dd4:	8afa      	ldrh	r2, [r7, #22]
 8011dd6:	8b3b      	ldrh	r3, [r7, #24]
 8011dd8:	4413      	add	r3, r2
 8011dda:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011ddc:	8b7a      	ldrh	r2, [r7, #26]
 8011dde:	8b3b      	ldrh	r3, [r7, #24]
 8011de0:	4413      	add	r3, r2
 8011de2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011de4:	88fa      	ldrh	r2, [r7, #6]
 8011de6:	8b3b      	ldrh	r3, [r7, #24]
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011dec:	2300      	movs	r3, #0
 8011dee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	61fb      	str	r3, [r7, #28]
 8011df6:	88fb      	ldrh	r3, [r7, #6]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d002      	beq.n	8011e02 <pbuf_copy_partial+0xca>
 8011dfc:	69fb      	ldr	r3, [r7, #28]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1c4      	bne.n	8011d8c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011e02:	8afb      	ldrh	r3, [r7, #22]
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3720      	adds	r7, #32
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	08023bbc 	.word	0x08023bbc
 8011e10:	08023f04 	.word	0x08023f04
 8011e14:	08023c1c 	.word	0x08023c1c
 8011e18:	08023f24 	.word	0x08023f24

08011e1c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b087      	sub	sp, #28
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	460b      	mov	r3, r1
 8011e26:	607a      	str	r2, [r7, #4]
 8011e28:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8011e2a:	897b      	ldrh	r3, [r7, #10]
 8011e2c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8011e32:	e007      	b.n	8011e44 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	895b      	ldrh	r3, [r3, #10]
 8011e38:	8afa      	ldrh	r2, [r7, #22]
 8011e3a:	1ad3      	subs	r3, r2, r3
 8011e3c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d004      	beq.n	8011e54 <pbuf_skip_const+0x38>
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	895b      	ldrh	r3, [r3, #10]
 8011e4e:	8afa      	ldrh	r2, [r7, #22]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d2ef      	bcs.n	8011e34 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d002      	beq.n	8011e60 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	8afa      	ldrh	r2, [r7, #22]
 8011e5e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8011e60:	693b      	ldr	r3, [r7, #16]
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	371c      	adds	r7, #28
 8011e66:	46bd      	mov	sp, r7
 8011e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6c:	4770      	bx	lr

08011e6e <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8011e6e:	b580      	push	{r7, lr}
 8011e70:	b086      	sub	sp, #24
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	60f8      	str	r0, [r7, #12]
 8011e76:	460b      	mov	r3, r1
 8011e78:	607a      	str	r2, [r7, #4]
 8011e7a:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8011e7c:	897b      	ldrh	r3, [r7, #10]
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	4619      	mov	r1, r3
 8011e82:	68f8      	ldr	r0, [r7, #12]
 8011e84:	f7ff ffca 	bl	8011e1c <pbuf_skip_const>
 8011e88:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8011e8a:	697b      	ldr	r3, [r7, #20]
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3718      	adds	r7, #24
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b088      	sub	sp, #32
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	60f8      	str	r0, [r7, #12]
 8011e9c:	60b9      	str	r1, [r7, #8]
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8011ea2:	88fb      	ldrh	r3, [r7, #6]
 8011ea4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d109      	bne.n	8011ec4 <pbuf_take+0x30>
 8011eb0:	4b3a      	ldr	r3, [pc, #232]	; (8011f9c <pbuf_take+0x108>)
 8011eb2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8011eb6:	493a      	ldr	r1, [pc, #232]	; (8011fa0 <pbuf_take+0x10c>)
 8011eb8:	483a      	ldr	r0, [pc, #232]	; (8011fa4 <pbuf_take+0x110>)
 8011eba:	f00c fddf 	bl	801ea7c <iprintf>
 8011ebe:	f06f 030f 	mvn.w	r3, #15
 8011ec2:	e067      	b.n	8011f94 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d109      	bne.n	8011ede <pbuf_take+0x4a>
 8011eca:	4b34      	ldr	r3, [pc, #208]	; (8011f9c <pbuf_take+0x108>)
 8011ecc:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8011ed0:	4935      	ldr	r1, [pc, #212]	; (8011fa8 <pbuf_take+0x114>)
 8011ed2:	4834      	ldr	r0, [pc, #208]	; (8011fa4 <pbuf_take+0x110>)
 8011ed4:	f00c fdd2 	bl	801ea7c <iprintf>
 8011ed8:	f06f 030f 	mvn.w	r3, #15
 8011edc:	e05a      	b.n	8011f94 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	891b      	ldrh	r3, [r3, #8]
 8011ee2:	88fa      	ldrh	r2, [r7, #6]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d909      	bls.n	8011efc <pbuf_take+0x68>
 8011ee8:	4b2c      	ldr	r3, [pc, #176]	; (8011f9c <pbuf_take+0x108>)
 8011eea:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8011eee:	492f      	ldr	r1, [pc, #188]	; (8011fac <pbuf_take+0x118>)
 8011ef0:	482c      	ldr	r0, [pc, #176]	; (8011fa4 <pbuf_take+0x110>)
 8011ef2:	f00c fdc3 	bl	801ea7c <iprintf>
 8011ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011efa:	e04b      	b.n	8011f94 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d007      	beq.n	8011f12 <pbuf_take+0x7e>
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d004      	beq.n	8011f12 <pbuf_take+0x7e>
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	891b      	ldrh	r3, [r3, #8]
 8011f0c:	88fa      	ldrh	r2, [r7, #6]
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d902      	bls.n	8011f18 <pbuf_take+0x84>
    return ERR_ARG;
 8011f12:	f06f 030f 	mvn.w	r3, #15
 8011f16:	e03d      	b.n	8011f94 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	61fb      	str	r3, [r7, #28]
 8011f1c:	e028      	b.n	8011f70 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d106      	bne.n	8011f32 <pbuf_take+0x9e>
 8011f24:	4b1d      	ldr	r3, [pc, #116]	; (8011f9c <pbuf_take+0x108>)
 8011f26:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011f2a:	4921      	ldr	r1, [pc, #132]	; (8011fb0 <pbuf_take+0x11c>)
 8011f2c:	481d      	ldr	r0, [pc, #116]	; (8011fa4 <pbuf_take+0x110>)
 8011f2e:	f00c fda5 	bl	801ea7c <iprintf>
    buf_copy_len = total_copy_len;
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	895b      	ldrh	r3, [r3, #10]
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	69bb      	ldr	r3, [r7, #24]
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d902      	bls.n	8011f48 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	895b      	ldrh	r3, [r3, #10]
 8011f46:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	6858      	ldr	r0, [r3, #4]
 8011f4c:	68ba      	ldr	r2, [r7, #8]
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	4413      	add	r3, r2
 8011f52:	69ba      	ldr	r2, [r7, #24]
 8011f54:	4619      	mov	r1, r3
 8011f56:	f00c f84d 	bl	801dff4 <memcpy>
    total_copy_len -= buf_copy_len;
 8011f5a:	697a      	ldr	r2, [r7, #20]
 8011f5c:	69bb      	ldr	r3, [r7, #24]
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8011f62:	693a      	ldr	r2, [r7, #16]
 8011f64:	69bb      	ldr	r3, [r7, #24]
 8011f66:	4413      	add	r3, r2
 8011f68:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	61fb      	str	r3, [r7, #28]
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d1d3      	bne.n	8011f1e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d103      	bne.n	8011f84 <pbuf_take+0xf0>
 8011f7c:	88fb      	ldrh	r3, [r7, #6]
 8011f7e:	693a      	ldr	r2, [r7, #16]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d006      	beq.n	8011f92 <pbuf_take+0xfe>
 8011f84:	4b05      	ldr	r3, [pc, #20]	; (8011f9c <pbuf_take+0x108>)
 8011f86:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8011f8a:	490a      	ldr	r1, [pc, #40]	; (8011fb4 <pbuf_take+0x120>)
 8011f8c:	4805      	ldr	r0, [pc, #20]	; (8011fa4 <pbuf_take+0x110>)
 8011f8e:	f00c fd75 	bl	801ea7c <iprintf>
  return ERR_OK;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3720      	adds	r7, #32
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	08023bbc 	.word	0x08023bbc
 8011fa0:	08023f94 	.word	0x08023f94
 8011fa4:	08023c1c 	.word	0x08023c1c
 8011fa8:	08023fac 	.word	0x08023fac
 8011fac:	08023fc8 	.word	0x08023fc8
 8011fb0:	08023fe8 	.word	0x08023fe8
 8011fb4:	08024000 	.word	0x08024000

08011fb8 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b088      	sub	sp, #32
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	60f8      	str	r0, [r7, #12]
 8011fc0:	60b9      	str	r1, [r7, #8]
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	80fb      	strh	r3, [r7, #6]
 8011fca:	4613      	mov	r3, r2
 8011fcc:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8011fce:	f107 0210 	add.w	r2, r7, #16
 8011fd2:	88bb      	ldrh	r3, [r7, #4]
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	f7ff ff49 	bl	8011e6e <pbuf_skip>
 8011fdc:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8011fde:	69fb      	ldr	r3, [r7, #28]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d047      	beq.n	8012074 <pbuf_take_at+0xbc>
 8011fe4:	69fb      	ldr	r3, [r7, #28]
 8011fe6:	891b      	ldrh	r3, [r3, #8]
 8011fe8:	461a      	mov	r2, r3
 8011fea:	8a3b      	ldrh	r3, [r7, #16]
 8011fec:	4619      	mov	r1, r3
 8011fee:	88fb      	ldrh	r3, [r7, #6]
 8011ff0:	440b      	add	r3, r1
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	db3e      	blt.n	8012074 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8011ff6:	88fb      	ldrh	r3, [r7, #6]
 8011ff8:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	895a      	ldrh	r2, [r3, #10]
 8012002:	8a3b      	ldrh	r3, [r7, #16]
 8012004:	429a      	cmp	r2, r3
 8012006:	d806      	bhi.n	8012016 <pbuf_take_at+0x5e>
 8012008:	4b1d      	ldr	r3, [pc, #116]	; (8012080 <pbuf_take_at+0xc8>)
 801200a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801200e:	491d      	ldr	r1, [pc, #116]	; (8012084 <pbuf_take_at+0xcc>)
 8012010:	481d      	ldr	r0, [pc, #116]	; (8012088 <pbuf_take_at+0xd0>)
 8012012:	f00c fd33 	bl	801ea7c <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	895b      	ldrh	r3, [r3, #10]
 801201a:	461a      	mov	r2, r3
 801201c:	8a3b      	ldrh	r3, [r7, #16]
 801201e:	1ad2      	subs	r2, r2, r3
 8012020:	88fb      	ldrh	r3, [r7, #6]
 8012022:	429a      	cmp	r2, r3
 8012024:	da05      	bge.n	8012032 <pbuf_take_at+0x7a>
 8012026:	69fb      	ldr	r3, [r7, #28]
 8012028:	895a      	ldrh	r2, [r3, #10]
 801202a:	8a3b      	ldrh	r3, [r7, #16]
 801202c:	1ad3      	subs	r3, r2, r3
 801202e:	b29b      	uxth	r3, r3
 8012030:	e000      	b.n	8012034 <pbuf_take_at+0x7c>
 8012032:	88fb      	ldrh	r3, [r7, #6]
 8012034:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8012036:	69fb      	ldr	r3, [r7, #28]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	8a3a      	ldrh	r2, [r7, #16]
 801203c:	4413      	add	r3, r2
 801203e:	8a7a      	ldrh	r2, [r7, #18]
 8012040:	68b9      	ldr	r1, [r7, #8]
 8012042:	4618      	mov	r0, r3
 8012044:	f00b ffd6 	bl	801dff4 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8012048:	8b7a      	ldrh	r2, [r7, #26]
 801204a:	8a7b      	ldrh	r3, [r7, #18]
 801204c:	1ad3      	subs	r3, r2, r3
 801204e:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8012050:	8a7b      	ldrh	r3, [r7, #18]
 8012052:	697a      	ldr	r2, [r7, #20]
 8012054:	4413      	add	r3, r2
 8012056:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8012058:	8b7b      	ldrh	r3, [r7, #26]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d008      	beq.n	8012070 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	8b7a      	ldrh	r2, [r7, #26]
 8012064:	6979      	ldr	r1, [r7, #20]
 8012066:	4618      	mov	r0, r3
 8012068:	f7ff ff14 	bl	8011e94 <pbuf_take>
 801206c:	4603      	mov	r3, r0
 801206e:	e003      	b.n	8012078 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8012070:	2300      	movs	r3, #0
 8012072:	e001      	b.n	8012078 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8012074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012078:	4618      	mov	r0, r3
 801207a:	3720      	adds	r7, #32
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	08023bbc 	.word	0x08023bbc
 8012084:	08024018 	.word	0x08024018
 8012088:	08023c1c 	.word	0x08023c1c

0801208c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
 8012092:	4603      	mov	r3, r0
 8012094:	603a      	str	r2, [r7, #0]
 8012096:	71fb      	strb	r3, [r7, #7]
 8012098:	460b      	mov	r3, r1
 801209a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	8919      	ldrh	r1, [r3, #8]
 80120a0:	88ba      	ldrh	r2, [r7, #4]
 80120a2:	79fb      	ldrb	r3, [r7, #7]
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7ff f92b 	bl	8011300 <pbuf_alloc>
 80120aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d101      	bne.n	80120b6 <pbuf_clone+0x2a>
    return NULL;
 80120b2:	2300      	movs	r3, #0
 80120b4:	e011      	b.n	80120da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80120b6:	6839      	ldr	r1, [r7, #0]
 80120b8:	68f8      	ldr	r0, [r7, #12]
 80120ba:	f7ff fd6b 	bl	8011b94 <pbuf_copy>
 80120be:	4603      	mov	r3, r0
 80120c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80120c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d006      	beq.n	80120d8 <pbuf_clone+0x4c>
 80120ca:	4b06      	ldr	r3, [pc, #24]	; (80120e4 <pbuf_clone+0x58>)
 80120cc:	f240 5224 	movw	r2, #1316	; 0x524
 80120d0:	4905      	ldr	r1, [pc, #20]	; (80120e8 <pbuf_clone+0x5c>)
 80120d2:	4806      	ldr	r0, [pc, #24]	; (80120ec <pbuf_clone+0x60>)
 80120d4:	f00c fcd2 	bl	801ea7c <iprintf>
  return q;
 80120d8:	68fb      	ldr	r3, [r7, #12]
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3710      	adds	r7, #16
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}
 80120e2:	bf00      	nop
 80120e4:	08023bbc 	.word	0x08023bbc
 80120e8:	08024030 	.word	0x08024030
 80120ec:	08023c1c 	.word	0x08023c1c

080120f0 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b084      	sub	sp, #16
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	460b      	mov	r3, r1
 80120fa:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80120fc:	f107 020a 	add.w	r2, r7, #10
 8012100:	887b      	ldrh	r3, [r7, #2]
 8012102:	4619      	mov	r1, r3
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f7ff fe89 	bl	8011e1c <pbuf_skip_const>
 801210a:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00a      	beq.n	8012128 <pbuf_try_get_at+0x38>
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	895a      	ldrh	r2, [r3, #10]
 8012116:	897b      	ldrh	r3, [r7, #10]
 8012118:	429a      	cmp	r2, r3
 801211a:	d905      	bls.n	8012128 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	897a      	ldrh	r2, [r7, #10]
 8012122:	4413      	add	r3, r2
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	e001      	b.n	801212c <pbuf_try_get_at+0x3c>
  }
  return -1;
 8012128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801212c:	4618      	mov	r0, r3
 801212e:	3710      	adds	r7, #16
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}

08012134 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	460b      	mov	r3, r1
 801213e:	807b      	strh	r3, [r7, #2]
 8012140:	4613      	mov	r3, r2
 8012142:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8012144:	f107 020a 	add.w	r2, r7, #10
 8012148:	887b      	ldrh	r3, [r7, #2]
 801214a:	4619      	mov	r1, r3
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7ff fe8e 	bl	8011e6e <pbuf_skip>
 8012152:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00a      	beq.n	8012170 <pbuf_put_at+0x3c>
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	895a      	ldrh	r2, [r3, #10]
 801215e:	897b      	ldrh	r3, [r7, #10]
 8012160:	429a      	cmp	r2, r3
 8012162:	d905      	bls.n	8012170 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	897a      	ldrh	r2, [r7, #10]
 801216a:	4413      	add	r3, r2
 801216c:	787a      	ldrb	r2, [r7, #1]
 801216e:	701a      	strb	r2, [r3, #0]
  }
}
 8012170:	bf00      	nop
 8012172:	3710      	adds	r7, #16
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801217c:	f00c fd0c 	bl	801eb98 <rand>
 8012180:	4603      	mov	r3, r0
 8012182:	b29b      	uxth	r3, r3
 8012184:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012188:	b29b      	uxth	r3, r3
 801218a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801218e:	b29a      	uxth	r2, r3
 8012190:	4b01      	ldr	r3, [pc, #4]	; (8012198 <tcp_init+0x20>)
 8012192:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012194:	bf00      	nop
 8012196:	bd80      	pop	{r7, pc}
 8012198:	20000054 	.word	0x20000054

0801219c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	7d1b      	ldrb	r3, [r3, #20]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d105      	bne.n	80121b8 <tcp_free+0x1c>
 80121ac:	4b06      	ldr	r3, [pc, #24]	; (80121c8 <tcp_free+0x2c>)
 80121ae:	22d4      	movs	r2, #212	; 0xd4
 80121b0:	4906      	ldr	r1, [pc, #24]	; (80121cc <tcp_free+0x30>)
 80121b2:	4807      	ldr	r0, [pc, #28]	; (80121d0 <tcp_free+0x34>)
 80121b4:	f00c fc62 	bl	801ea7c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80121b8:	6879      	ldr	r1, [r7, #4]
 80121ba:	2001      	movs	r0, #1
 80121bc:	f7fe fcd4 	bl	8010b68 <memp_free>
}
 80121c0:	bf00      	nop
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}
 80121c8:	080240bc 	.word	0x080240bc
 80121cc:	080240ec 	.word	0x080240ec
 80121d0:	08024100 	.word	0x08024100

080121d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	7d1b      	ldrb	r3, [r3, #20]
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d105      	bne.n	80121f0 <tcp_free_listen+0x1c>
 80121e4:	4b06      	ldr	r3, [pc, #24]	; (8012200 <tcp_free_listen+0x2c>)
 80121e6:	22df      	movs	r2, #223	; 0xdf
 80121e8:	4906      	ldr	r1, [pc, #24]	; (8012204 <tcp_free_listen+0x30>)
 80121ea:	4807      	ldr	r0, [pc, #28]	; (8012208 <tcp_free_listen+0x34>)
 80121ec:	f00c fc46 	bl	801ea7c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80121f0:	6879      	ldr	r1, [r7, #4]
 80121f2:	2002      	movs	r0, #2
 80121f4:	f7fe fcb8 	bl	8010b68 <memp_free>
}
 80121f8:	bf00      	nop
 80121fa:	3708      	adds	r7, #8
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	080240bc 	.word	0x080240bc
 8012204:	08024128 	.word	0x08024128
 8012208:	08024100 	.word	0x08024100

0801220c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012210:	f001 f9be 	bl	8013590 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012214:	4b07      	ldr	r3, [pc, #28]	; (8012234 <tcp_tmr+0x28>)
 8012216:	781b      	ldrb	r3, [r3, #0]
 8012218:	3301      	adds	r3, #1
 801221a:	b2da      	uxtb	r2, r3
 801221c:	4b05      	ldr	r3, [pc, #20]	; (8012234 <tcp_tmr+0x28>)
 801221e:	701a      	strb	r2, [r3, #0]
 8012220:	4b04      	ldr	r3, [pc, #16]	; (8012234 <tcp_tmr+0x28>)
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	f003 0301 	and.w	r3, r3, #1
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801222c:	f000 fe70 	bl	8012f10 <tcp_slowtmr>
  }
}
 8012230:	bf00      	nop
 8012232:	bd80      	pop	{r7, pc}
 8012234:	20014359 	.word	0x20014359

08012238 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b084      	sub	sp, #16
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d105      	bne.n	8012254 <tcp_remove_listener+0x1c>
 8012248:	4b0d      	ldr	r3, [pc, #52]	; (8012280 <tcp_remove_listener+0x48>)
 801224a:	22ff      	movs	r2, #255	; 0xff
 801224c:	490d      	ldr	r1, [pc, #52]	; (8012284 <tcp_remove_listener+0x4c>)
 801224e:	480e      	ldr	r0, [pc, #56]	; (8012288 <tcp_remove_listener+0x50>)
 8012250:	f00c fc14 	bl	801ea7c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	60fb      	str	r3, [r7, #12]
 8012258:	e00a      	b.n	8012270 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801225e:	683a      	ldr	r2, [r7, #0]
 8012260:	429a      	cmp	r2, r3
 8012262:	d102      	bne.n	801226a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2200      	movs	r2, #0
 8012268:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	60fb      	str	r3, [r7, #12]
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d1f1      	bne.n	801225a <tcp_remove_listener+0x22>
    }
  }
}
 8012276:	bf00      	nop
 8012278:	bf00      	nop
 801227a:	3710      	adds	r7, #16
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	080240bc 	.word	0x080240bc
 8012284:	08024144 	.word	0x08024144
 8012288:	08024100 	.word	0x08024100

0801228c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d106      	bne.n	80122a8 <tcp_listen_closed+0x1c>
 801229a:	4b14      	ldr	r3, [pc, #80]	; (80122ec <tcp_listen_closed+0x60>)
 801229c:	f240 1211 	movw	r2, #273	; 0x111
 80122a0:	4913      	ldr	r1, [pc, #76]	; (80122f0 <tcp_listen_closed+0x64>)
 80122a2:	4814      	ldr	r0, [pc, #80]	; (80122f4 <tcp_listen_closed+0x68>)
 80122a4:	f00c fbea 	bl	801ea7c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	7d1b      	ldrb	r3, [r3, #20]
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d006      	beq.n	80122be <tcp_listen_closed+0x32>
 80122b0:	4b0e      	ldr	r3, [pc, #56]	; (80122ec <tcp_listen_closed+0x60>)
 80122b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80122b6:	4910      	ldr	r1, [pc, #64]	; (80122f8 <tcp_listen_closed+0x6c>)
 80122b8:	480e      	ldr	r0, [pc, #56]	; (80122f4 <tcp_listen_closed+0x68>)
 80122ba:	f00c fbdf 	bl	801ea7c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80122be:	2301      	movs	r3, #1
 80122c0:	60fb      	str	r3, [r7, #12]
 80122c2:	e00b      	b.n	80122dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80122c4:	4a0d      	ldr	r2, [pc, #52]	; (80122fc <tcp_listen_closed+0x70>)
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	6879      	ldr	r1, [r7, #4]
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7ff ffb1 	bl	8012238 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	3301      	adds	r3, #1
 80122da:	60fb      	str	r3, [r7, #12]
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2b03      	cmp	r3, #3
 80122e0:	d9f0      	bls.n	80122c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80122e2:	bf00      	nop
 80122e4:	bf00      	nop
 80122e6:	3710      	adds	r7, #16
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	080240bc 	.word	0x080240bc
 80122f0:	0802416c 	.word	0x0802416c
 80122f4:	08024100 	.word	0x08024100
 80122f8:	08024178 	.word	0x08024178
 80122fc:	08026680 	.word	0x08026680

08012300 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012300:	b5b0      	push	{r4, r5, r7, lr}
 8012302:	b088      	sub	sp, #32
 8012304:	af04      	add	r7, sp, #16
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	460b      	mov	r3, r1
 801230a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d106      	bne.n	8012320 <tcp_close_shutdown+0x20>
 8012312:	4b63      	ldr	r3, [pc, #396]	; (80124a0 <tcp_close_shutdown+0x1a0>)
 8012314:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012318:	4962      	ldr	r1, [pc, #392]	; (80124a4 <tcp_close_shutdown+0x1a4>)
 801231a:	4863      	ldr	r0, [pc, #396]	; (80124a8 <tcp_close_shutdown+0x1a8>)
 801231c:	f00c fbae 	bl	801ea7c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012320:	78fb      	ldrb	r3, [r7, #3]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d066      	beq.n	80123f4 <tcp_close_shutdown+0xf4>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	7d1b      	ldrb	r3, [r3, #20]
 801232a:	2b04      	cmp	r3, #4
 801232c:	d003      	beq.n	8012336 <tcp_close_shutdown+0x36>
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	7d1b      	ldrb	r3, [r3, #20]
 8012332:	2b07      	cmp	r3, #7
 8012334:	d15e      	bne.n	80123f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801233a:	2b00      	cmp	r3, #0
 801233c:	d104      	bne.n	8012348 <tcp_close_shutdown+0x48>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012342:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012346:	d055      	beq.n	80123f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	8b5b      	ldrh	r3, [r3, #26]
 801234c:	f003 0310 	and.w	r3, r3, #16
 8012350:	2b00      	cmp	r3, #0
 8012352:	d106      	bne.n	8012362 <tcp_close_shutdown+0x62>
 8012354:	4b52      	ldr	r3, [pc, #328]	; (80124a0 <tcp_close_shutdown+0x1a0>)
 8012356:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801235a:	4954      	ldr	r1, [pc, #336]	; (80124ac <tcp_close_shutdown+0x1ac>)
 801235c:	4852      	ldr	r0, [pc, #328]	; (80124a8 <tcp_close_shutdown+0x1a8>)
 801235e:	f00c fb8d 	bl	801ea7c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801236a:	687d      	ldr	r5, [r7, #4]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3304      	adds	r3, #4
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	8ad2      	ldrh	r2, [r2, #22]
 8012374:	6879      	ldr	r1, [r7, #4]
 8012376:	8b09      	ldrh	r1, [r1, #24]
 8012378:	9102      	str	r1, [sp, #8]
 801237a:	9201      	str	r2, [sp, #4]
 801237c:	9300      	str	r3, [sp, #0]
 801237e:	462b      	mov	r3, r5
 8012380:	4622      	mov	r2, r4
 8012382:	4601      	mov	r1, r0
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f005 ff3b 	bl	8018200 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f001 fcb0 	bl	8013cf0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012390:	4b47      	ldr	r3, [pc, #284]	; (80124b0 <tcp_close_shutdown+0x1b0>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	429a      	cmp	r2, r3
 8012398:	d105      	bne.n	80123a6 <tcp_close_shutdown+0xa6>
 801239a:	4b45      	ldr	r3, [pc, #276]	; (80124b0 <tcp_close_shutdown+0x1b0>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	4a43      	ldr	r2, [pc, #268]	; (80124b0 <tcp_close_shutdown+0x1b0>)
 80123a2:	6013      	str	r3, [r2, #0]
 80123a4:	e013      	b.n	80123ce <tcp_close_shutdown+0xce>
 80123a6:	4b42      	ldr	r3, [pc, #264]	; (80124b0 <tcp_close_shutdown+0x1b0>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	60fb      	str	r3, [r7, #12]
 80123ac:	e00c      	b.n	80123c8 <tcp_close_shutdown+0xc8>
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d104      	bne.n	80123c2 <tcp_close_shutdown+0xc2>
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	68da      	ldr	r2, [r3, #12]
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	60da      	str	r2, [r3, #12]
 80123c0:	e005      	b.n	80123ce <tcp_close_shutdown+0xce>
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	60fb      	str	r3, [r7, #12]
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d1ef      	bne.n	80123ae <tcp_close_shutdown+0xae>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	60da      	str	r2, [r3, #12]
 80123d4:	4b37      	ldr	r3, [pc, #220]	; (80124b4 <tcp_close_shutdown+0x1b4>)
 80123d6:	2201      	movs	r2, #1
 80123d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80123da:	4b37      	ldr	r3, [pc, #220]	; (80124b8 <tcp_close_shutdown+0x1b8>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d102      	bne.n	80123ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80123e4:	f004 f944 	bl	8016670 <tcp_trigger_input_pcb_close>
 80123e8:	e002      	b.n	80123f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f7ff fed6 	bl	801219c <tcp_free>
      }
      return ERR_OK;
 80123f0:	2300      	movs	r3, #0
 80123f2:	e050      	b.n	8012496 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	7d1b      	ldrb	r3, [r3, #20]
 80123f8:	2b02      	cmp	r3, #2
 80123fa:	d03b      	beq.n	8012474 <tcp_close_shutdown+0x174>
 80123fc:	2b02      	cmp	r3, #2
 80123fe:	dc44      	bgt.n	801248a <tcp_close_shutdown+0x18a>
 8012400:	2b00      	cmp	r3, #0
 8012402:	d002      	beq.n	801240a <tcp_close_shutdown+0x10a>
 8012404:	2b01      	cmp	r3, #1
 8012406:	d02a      	beq.n	801245e <tcp_close_shutdown+0x15e>
 8012408:	e03f      	b.n	801248a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	8adb      	ldrh	r3, [r3, #22]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d021      	beq.n	8012456 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012412:	4b2a      	ldr	r3, [pc, #168]	; (80124bc <tcp_close_shutdown+0x1bc>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	687a      	ldr	r2, [r7, #4]
 8012418:	429a      	cmp	r2, r3
 801241a:	d105      	bne.n	8012428 <tcp_close_shutdown+0x128>
 801241c:	4b27      	ldr	r3, [pc, #156]	; (80124bc <tcp_close_shutdown+0x1bc>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	4a26      	ldr	r2, [pc, #152]	; (80124bc <tcp_close_shutdown+0x1bc>)
 8012424:	6013      	str	r3, [r2, #0]
 8012426:	e013      	b.n	8012450 <tcp_close_shutdown+0x150>
 8012428:	4b24      	ldr	r3, [pc, #144]	; (80124bc <tcp_close_shutdown+0x1bc>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	60bb      	str	r3, [r7, #8]
 801242e:	e00c      	b.n	801244a <tcp_close_shutdown+0x14a>
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	429a      	cmp	r2, r3
 8012438:	d104      	bne.n	8012444 <tcp_close_shutdown+0x144>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	68da      	ldr	r2, [r3, #12]
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	60da      	str	r2, [r3, #12]
 8012442:	e005      	b.n	8012450 <tcp_close_shutdown+0x150>
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	60bb      	str	r3, [r7, #8]
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d1ef      	bne.n	8012430 <tcp_close_shutdown+0x130>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2200      	movs	r2, #0
 8012454:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f7ff fea0 	bl	801219c <tcp_free>
      break;
 801245c:	e01a      	b.n	8012494 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f7ff ff14 	bl	801228c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012464:	6879      	ldr	r1, [r7, #4]
 8012466:	4816      	ldr	r0, [pc, #88]	; (80124c0 <tcp_close_shutdown+0x1c0>)
 8012468:	f001 fc92 	bl	8013d90 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7ff feb1 	bl	80121d4 <tcp_free_listen>
      break;
 8012472:	e00f      	b.n	8012494 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012474:	6879      	ldr	r1, [r7, #4]
 8012476:	480e      	ldr	r0, [pc, #56]	; (80124b0 <tcp_close_shutdown+0x1b0>)
 8012478:	f001 fc8a 	bl	8013d90 <tcp_pcb_remove>
 801247c:	4b0d      	ldr	r3, [pc, #52]	; (80124b4 <tcp_close_shutdown+0x1b4>)
 801247e:	2201      	movs	r2, #1
 8012480:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f7ff fe8a 	bl	801219c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012488:	e004      	b.n	8012494 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f000 f81a 	bl	80124c4 <tcp_close_shutdown_fin>
 8012490:	4603      	mov	r3, r0
 8012492:	e000      	b.n	8012496 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012494:	2300      	movs	r3, #0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bdb0      	pop	{r4, r5, r7, pc}
 801249e:	bf00      	nop
 80124a0:	080240bc 	.word	0x080240bc
 80124a4:	08024190 	.word	0x08024190
 80124a8:	08024100 	.word	0x08024100
 80124ac:	080241b0 	.word	0x080241b0
 80124b0:	2001b0c8 	.word	0x2001b0c8
 80124b4:	2001b0c4 	.word	0x2001b0c4
 80124b8:	2001b0dc 	.word	0x2001b0dc
 80124bc:	2001b0d4 	.word	0x2001b0d4
 80124c0:	2001b0d0 	.word	0x2001b0d0

080124c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d106      	bne.n	80124e0 <tcp_close_shutdown_fin+0x1c>
 80124d2:	4b2e      	ldr	r3, [pc, #184]	; (801258c <tcp_close_shutdown_fin+0xc8>)
 80124d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80124d8:	492d      	ldr	r1, [pc, #180]	; (8012590 <tcp_close_shutdown_fin+0xcc>)
 80124da:	482e      	ldr	r0, [pc, #184]	; (8012594 <tcp_close_shutdown_fin+0xd0>)
 80124dc:	f00c face 	bl	801ea7c <iprintf>

  switch (pcb->state) {
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	7d1b      	ldrb	r3, [r3, #20]
 80124e4:	2b07      	cmp	r3, #7
 80124e6:	d020      	beq.n	801252a <tcp_close_shutdown_fin+0x66>
 80124e8:	2b07      	cmp	r3, #7
 80124ea:	dc2b      	bgt.n	8012544 <tcp_close_shutdown_fin+0x80>
 80124ec:	2b03      	cmp	r3, #3
 80124ee:	d002      	beq.n	80124f6 <tcp_close_shutdown_fin+0x32>
 80124f0:	2b04      	cmp	r3, #4
 80124f2:	d00d      	beq.n	8012510 <tcp_close_shutdown_fin+0x4c>
 80124f4:	e026      	b.n	8012544 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f004 ff84 	bl	8017404 <tcp_send_fin>
 80124fc:	4603      	mov	r3, r0
 80124fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d11f      	bne.n	8012548 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2205      	movs	r2, #5
 801250c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801250e:	e01b      	b.n	8012548 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f004 ff77 	bl	8017404 <tcp_send_fin>
 8012516:	4603      	mov	r3, r0
 8012518:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d114      	bne.n	801254c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2205      	movs	r2, #5
 8012526:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012528:	e010      	b.n	801254c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f004 ff6a 	bl	8017404 <tcp_send_fin>
 8012530:	4603      	mov	r3, r0
 8012532:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d109      	bne.n	8012550 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2209      	movs	r2, #9
 8012540:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012542:	e005      	b.n	8012550 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012544:	2300      	movs	r3, #0
 8012546:	e01c      	b.n	8012582 <tcp_close_shutdown_fin+0xbe>
      break;
 8012548:	bf00      	nop
 801254a:	e002      	b.n	8012552 <tcp_close_shutdown_fin+0x8e>
      break;
 801254c:	bf00      	nop
 801254e:	e000      	b.n	8012552 <tcp_close_shutdown_fin+0x8e>
      break;
 8012550:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d103      	bne.n	8012562 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f005 f890 	bl	8017680 <tcp_output>
 8012560:	e00d      	b.n	801257e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801256a:	d108      	bne.n	801257e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	8b5b      	ldrh	r3, [r3, #26]
 8012570:	f043 0308 	orr.w	r3, r3, #8
 8012574:	b29a      	uxth	r2, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801257a:	2300      	movs	r3, #0
 801257c:	e001      	b.n	8012582 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012582:	4618      	mov	r0, r3
 8012584:	3710      	adds	r7, #16
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	080240bc 	.word	0x080240bc
 8012590:	0802416c 	.word	0x0802416c
 8012594:	08024100 	.word	0x08024100

08012598 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d109      	bne.n	80125ba <tcp_close+0x22>
 80125a6:	4b0f      	ldr	r3, [pc, #60]	; (80125e4 <tcp_close+0x4c>)
 80125a8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80125ac:	490e      	ldr	r1, [pc, #56]	; (80125e8 <tcp_close+0x50>)
 80125ae:	480f      	ldr	r0, [pc, #60]	; (80125ec <tcp_close+0x54>)
 80125b0:	f00c fa64 	bl	801ea7c <iprintf>
 80125b4:	f06f 030f 	mvn.w	r3, #15
 80125b8:	e00f      	b.n	80125da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	7d1b      	ldrb	r3, [r3, #20]
 80125be:	2b01      	cmp	r3, #1
 80125c0:	d006      	beq.n	80125d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	8b5b      	ldrh	r3, [r3, #26]
 80125c6:	f043 0310 	orr.w	r3, r3, #16
 80125ca:	b29a      	uxth	r2, r3
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80125d0:	2101      	movs	r1, #1
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f7ff fe94 	bl	8012300 <tcp_close_shutdown>
 80125d8:	4603      	mov	r3, r0
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3708      	adds	r7, #8
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	080240bc 	.word	0x080240bc
 80125e8:	080241cc 	.word	0x080241cc
 80125ec:	08024100 	.word	0x08024100

080125f0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	60f8      	str	r0, [r7, #12]
 80125f8:	60b9      	str	r1, [r7, #8]
 80125fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d109      	bne.n	8012616 <tcp_shutdown+0x26>
 8012602:	4b26      	ldr	r3, [pc, #152]	; (801269c <tcp_shutdown+0xac>)
 8012604:	f240 2207 	movw	r2, #519	; 0x207
 8012608:	4925      	ldr	r1, [pc, #148]	; (80126a0 <tcp_shutdown+0xb0>)
 801260a:	4826      	ldr	r0, [pc, #152]	; (80126a4 <tcp_shutdown+0xb4>)
 801260c:	f00c fa36 	bl	801ea7c <iprintf>
 8012610:	f06f 030f 	mvn.w	r3, #15
 8012614:	e03d      	b.n	8012692 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	7d1b      	ldrb	r3, [r3, #20]
 801261a:	2b01      	cmp	r3, #1
 801261c:	d102      	bne.n	8012624 <tcp_shutdown+0x34>
    return ERR_CONN;
 801261e:	f06f 030a 	mvn.w	r3, #10
 8012622:	e036      	b.n	8012692 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d01b      	beq.n	8012662 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	8b5b      	ldrh	r3, [r3, #26]
 801262e:	f043 0310 	orr.w	r3, r3, #16
 8012632:	b29a      	uxth	r2, r3
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d005      	beq.n	801264a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801263e:	2101      	movs	r1, #1
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f7ff fe5d 	bl	8012300 <tcp_close_shutdown>
 8012646:	4603      	mov	r3, r0
 8012648:	e023      	b.n	8012692 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801264e:	2b00      	cmp	r3, #0
 8012650:	d007      	beq.n	8012662 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012656:	4618      	mov	r0, r3
 8012658:	f7ff f968 	bl	801192c <pbuf_free>
      pcb->refused_data = NULL;
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2200      	movs	r2, #0
 8012660:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d013      	beq.n	8012690 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	7d1b      	ldrb	r3, [r3, #20]
 801266c:	2b04      	cmp	r3, #4
 801266e:	dc02      	bgt.n	8012676 <tcp_shutdown+0x86>
 8012670:	2b03      	cmp	r3, #3
 8012672:	da02      	bge.n	801267a <tcp_shutdown+0x8a>
 8012674:	e009      	b.n	801268a <tcp_shutdown+0x9a>
 8012676:	2b07      	cmp	r3, #7
 8012678:	d107      	bne.n	801268a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	b2db      	uxtb	r3, r3
 801267e:	4619      	mov	r1, r3
 8012680:	68f8      	ldr	r0, [r7, #12]
 8012682:	f7ff fe3d 	bl	8012300 <tcp_close_shutdown>
 8012686:	4603      	mov	r3, r0
 8012688:	e003      	b.n	8012692 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801268a:	f06f 030a 	mvn.w	r3, #10
 801268e:	e000      	b.n	8012692 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012690:	2300      	movs	r3, #0
}
 8012692:	4618      	mov	r0, r3
 8012694:	3710      	adds	r7, #16
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	080240bc 	.word	0x080240bc
 80126a0:	080241e4 	.word	0x080241e4
 80126a4:	08024100 	.word	0x08024100

080126a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b08e      	sub	sp, #56	; 0x38
 80126ac:	af04      	add	r7, sp, #16
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d107      	bne.n	80126c8 <tcp_abandon+0x20>
 80126b8:	4b52      	ldr	r3, [pc, #328]	; (8012804 <tcp_abandon+0x15c>)
 80126ba:	f240 223d 	movw	r2, #573	; 0x23d
 80126be:	4952      	ldr	r1, [pc, #328]	; (8012808 <tcp_abandon+0x160>)
 80126c0:	4852      	ldr	r0, [pc, #328]	; (801280c <tcp_abandon+0x164>)
 80126c2:	f00c f9db 	bl	801ea7c <iprintf>
 80126c6:	e099      	b.n	80127fc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	7d1b      	ldrb	r3, [r3, #20]
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d106      	bne.n	80126de <tcp_abandon+0x36>
 80126d0:	4b4c      	ldr	r3, [pc, #304]	; (8012804 <tcp_abandon+0x15c>)
 80126d2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80126d6:	494e      	ldr	r1, [pc, #312]	; (8012810 <tcp_abandon+0x168>)
 80126d8:	484c      	ldr	r0, [pc, #304]	; (801280c <tcp_abandon+0x164>)
 80126da:	f00c f9cf 	bl	801ea7c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	7d1b      	ldrb	r3, [r3, #20]
 80126e2:	2b0a      	cmp	r3, #10
 80126e4:	d107      	bne.n	80126f6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80126e6:	6879      	ldr	r1, [r7, #4]
 80126e8:	484a      	ldr	r0, [pc, #296]	; (8012814 <tcp_abandon+0x16c>)
 80126ea:	f001 fb51 	bl	8013d90 <tcp_pcb_remove>
    tcp_free(pcb);
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7ff fd54 	bl	801219c <tcp_free>
 80126f4:	e082      	b.n	80127fc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80126f6:	2300      	movs	r3, #0
 80126f8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80126fa:	2300      	movs	r3, #0
 80126fc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012702:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012708:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012710:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	691b      	ldr	r3, [r3, #16]
 8012716:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	7d1b      	ldrb	r3, [r3, #20]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d126      	bne.n	801276e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	8adb      	ldrh	r3, [r3, #22]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d02e      	beq.n	8012786 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012728:	4b3b      	ldr	r3, [pc, #236]	; (8012818 <tcp_abandon+0x170>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	429a      	cmp	r2, r3
 8012730:	d105      	bne.n	801273e <tcp_abandon+0x96>
 8012732:	4b39      	ldr	r3, [pc, #228]	; (8012818 <tcp_abandon+0x170>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	4a37      	ldr	r2, [pc, #220]	; (8012818 <tcp_abandon+0x170>)
 801273a:	6013      	str	r3, [r2, #0]
 801273c:	e013      	b.n	8012766 <tcp_abandon+0xbe>
 801273e:	4b36      	ldr	r3, [pc, #216]	; (8012818 <tcp_abandon+0x170>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	61fb      	str	r3, [r7, #28]
 8012744:	e00c      	b.n	8012760 <tcp_abandon+0xb8>
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	429a      	cmp	r2, r3
 801274e:	d104      	bne.n	801275a <tcp_abandon+0xb2>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	68da      	ldr	r2, [r3, #12]
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	60da      	str	r2, [r3, #12]
 8012758:	e005      	b.n	8012766 <tcp_abandon+0xbe>
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	68db      	ldr	r3, [r3, #12]
 801275e:	61fb      	str	r3, [r7, #28]
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d1ef      	bne.n	8012746 <tcp_abandon+0x9e>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2200      	movs	r2, #0
 801276a:	60da      	str	r2, [r3, #12]
 801276c:	e00b      	b.n	8012786 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	8adb      	ldrh	r3, [r3, #22]
 8012776:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012778:	6879      	ldr	r1, [r7, #4]
 801277a:	4828      	ldr	r0, [pc, #160]	; (801281c <tcp_abandon+0x174>)
 801277c:	f001 fb08 	bl	8013d90 <tcp_pcb_remove>
 8012780:	4b27      	ldr	r3, [pc, #156]	; (8012820 <tcp_abandon+0x178>)
 8012782:	2201      	movs	r2, #1
 8012784:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801278a:	2b00      	cmp	r3, #0
 801278c:	d004      	beq.n	8012798 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012792:	4618      	mov	r0, r3
 8012794:	f000 ffdc 	bl	8013750 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801279c:	2b00      	cmp	r3, #0
 801279e:	d004      	beq.n	80127aa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127a4:	4618      	mov	r0, r3
 80127a6:	f000 ffd3 	bl	8013750 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d004      	beq.n	80127bc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127b6:	4618      	mov	r0, r3
 80127b8:	f000 ffca 	bl	8013750 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80127bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00e      	beq.n	80127e0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80127c2:	6879      	ldr	r1, [r7, #4]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	3304      	adds	r3, #4
 80127c8:	687a      	ldr	r2, [r7, #4]
 80127ca:	8b12      	ldrh	r2, [r2, #24]
 80127cc:	9202      	str	r2, [sp, #8]
 80127ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80127d0:	9201      	str	r2, [sp, #4]
 80127d2:	9300      	str	r3, [sp, #0]
 80127d4:	460b      	mov	r3, r1
 80127d6:	697a      	ldr	r2, [r7, #20]
 80127d8:	69b9      	ldr	r1, [r7, #24]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f005 fd10 	bl	8018200 <tcp_rst>
    }
    last_state = pcb->state;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	7d1b      	ldrb	r3, [r3, #20]
 80127e4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7ff fcd8 	bl	801219c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d004      	beq.n	80127fc <tcp_abandon+0x154>
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	f06f 010c 	mvn.w	r1, #12
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	4798      	blx	r3
  }
}
 80127fc:	3728      	adds	r7, #40	; 0x28
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	080240bc 	.word	0x080240bc
 8012808:	08024200 	.word	0x08024200
 801280c:	08024100 	.word	0x08024100
 8012810:	0802421c 	.word	0x0802421c
 8012814:	2001b0d8 	.word	0x2001b0d8
 8012818:	2001b0d4 	.word	0x2001b0d4
 801281c:	2001b0c8 	.word	0x2001b0c8
 8012820:	2001b0c4 	.word	0x2001b0c4

08012824 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801282c:	2101      	movs	r1, #1
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7ff ff3a 	bl	80126a8 <tcp_abandon>
}
 8012834:	bf00      	nop
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}

0801283c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b088      	sub	sp, #32
 8012840:	af00      	add	r7, sp, #0
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	4613      	mov	r3, r2
 8012848:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801284a:	2304      	movs	r3, #4
 801284c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d101      	bne.n	8012858 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012854:	4b3e      	ldr	r3, [pc, #248]	; (8012950 <tcp_bind+0x114>)
 8012856:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d109      	bne.n	8012872 <tcp_bind+0x36>
 801285e:	4b3d      	ldr	r3, [pc, #244]	; (8012954 <tcp_bind+0x118>)
 8012860:	f240 22a9 	movw	r2, #681	; 0x2a9
 8012864:	493c      	ldr	r1, [pc, #240]	; (8012958 <tcp_bind+0x11c>)
 8012866:	483d      	ldr	r0, [pc, #244]	; (801295c <tcp_bind+0x120>)
 8012868:	f00c f908 	bl	801ea7c <iprintf>
 801286c:	f06f 030f 	mvn.w	r3, #15
 8012870:	e06a      	b.n	8012948 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	7d1b      	ldrb	r3, [r3, #20]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d009      	beq.n	801288e <tcp_bind+0x52>
 801287a:	4b36      	ldr	r3, [pc, #216]	; (8012954 <tcp_bind+0x118>)
 801287c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012880:	4937      	ldr	r1, [pc, #220]	; (8012960 <tcp_bind+0x124>)
 8012882:	4836      	ldr	r0, [pc, #216]	; (801295c <tcp_bind+0x120>)
 8012884:	f00c f8fa 	bl	801ea7c <iprintf>
 8012888:	f06f 0305 	mvn.w	r3, #5
 801288c:	e05c      	b.n	8012948 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801288e:	88fb      	ldrh	r3, [r7, #6]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d109      	bne.n	80128a8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8012894:	f000 f9de 	bl	8012c54 <tcp_new_port>
 8012898:	4603      	mov	r3, r0
 801289a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801289c:	88fb      	ldrh	r3, [r7, #6]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d135      	bne.n	801290e <tcp_bind+0xd2>
      return ERR_BUF;
 80128a2:	f06f 0301 	mvn.w	r3, #1
 80128a6:	e04f      	b.n	8012948 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80128a8:	2300      	movs	r3, #0
 80128aa:	61fb      	str	r3, [r7, #28]
 80128ac:	e02b      	b.n	8012906 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80128ae:	4a2d      	ldr	r2, [pc, #180]	; (8012964 <tcp_bind+0x128>)
 80128b0:	69fb      	ldr	r3, [r7, #28]
 80128b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	61bb      	str	r3, [r7, #24]
 80128ba:	e01e      	b.n	80128fa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	8adb      	ldrh	r3, [r3, #22]
 80128c0:	88fa      	ldrh	r2, [r7, #6]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d116      	bne.n	80128f4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80128c6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d010      	beq.n	80128ee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80128cc:	69bb      	ldr	r3, [r7, #24]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d00c      	beq.n	80128ee <tcp_bind+0xb2>
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d009      	beq.n	80128ee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d005      	beq.n	80128ee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80128e2:	69bb      	ldr	r3, [r7, #24]
 80128e4:	681a      	ldr	r2, [r3, #0]
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d102      	bne.n	80128f4 <tcp_bind+0xb8>
              return ERR_USE;
 80128ee:	f06f 0307 	mvn.w	r3, #7
 80128f2:	e029      	b.n	8012948 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	61bb      	str	r3, [r7, #24]
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d1dd      	bne.n	80128bc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	3301      	adds	r3, #1
 8012904:	61fb      	str	r3, [r7, #28]
 8012906:	69fa      	ldr	r2, [r7, #28]
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	429a      	cmp	r2, r3
 801290c:	dbcf      	blt.n	80128ae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d00c      	beq.n	801292e <tcp_bind+0xf2>
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d008      	beq.n	801292e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d002      	beq.n	8012928 <tcp_bind+0xec>
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	e000      	b.n	801292a <tcp_bind+0xee>
 8012928:	2300      	movs	r3, #0
 801292a:	68fa      	ldr	r2, [r7, #12]
 801292c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	88fa      	ldrh	r2, [r7, #6]
 8012932:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8012934:	4b0c      	ldr	r3, [pc, #48]	; (8012968 <tcp_bind+0x12c>)
 8012936:	681a      	ldr	r2, [r3, #0]
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	60da      	str	r2, [r3, #12]
 801293c:	4a0a      	ldr	r2, [pc, #40]	; (8012968 <tcp_bind+0x12c>)
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	6013      	str	r3, [r2, #0]
 8012942:	f005 fe1f 	bl	8018584 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8012946:	2300      	movs	r3, #0
}
 8012948:	4618      	mov	r0, r3
 801294a:	3720      	adds	r7, #32
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	080266c0 	.word	0x080266c0
 8012954:	080240bc 	.word	0x080240bc
 8012958:	08024250 	.word	0x08024250
 801295c:	08024100 	.word	0x08024100
 8012960:	08024268 	.word	0x08024268
 8012964:	08026680 	.word	0x08026680
 8012968:	2001b0d4 	.word	0x2001b0d4

0801296c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	4613      	mov	r3, r2
 8012978:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d106      	bne.n	801298e <tcp_accept_null+0x22>
 8012980:	4b07      	ldr	r3, [pc, #28]	; (80129a0 <tcp_accept_null+0x34>)
 8012982:	f240 320f 	movw	r2, #783	; 0x30f
 8012986:	4907      	ldr	r1, [pc, #28]	; (80129a4 <tcp_accept_null+0x38>)
 8012988:	4807      	ldr	r0, [pc, #28]	; (80129a8 <tcp_accept_null+0x3c>)
 801298a:	f00c f877 	bl	801ea7c <iprintf>

  tcp_abort(pcb);
 801298e:	68b8      	ldr	r0, [r7, #8]
 8012990:	f7ff ff48 	bl	8012824 <tcp_abort>

  return ERR_ABRT;
 8012994:	f06f 030c 	mvn.w	r3, #12
}
 8012998:	4618      	mov	r0, r3
 801299a:	3710      	adds	r7, #16
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}
 80129a0:	080240bc 	.word	0x080240bc
 80129a4:	08024290 	.word	0x08024290
 80129a8:	08024100 	.word	0x08024100

080129ac <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b088      	sub	sp, #32
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	460b      	mov	r3, r1
 80129b6:	607a      	str	r2, [r7, #4]
 80129b8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80129ba:	2300      	movs	r3, #0
 80129bc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d109      	bne.n	80129d8 <tcp_listen_with_backlog_and_err+0x2c>
 80129c4:	4b47      	ldr	r3, [pc, #284]	; (8012ae4 <tcp_listen_with_backlog_and_err+0x138>)
 80129c6:	f240 3259 	movw	r2, #857	; 0x359
 80129ca:	4947      	ldr	r1, [pc, #284]	; (8012ae8 <tcp_listen_with_backlog_and_err+0x13c>)
 80129cc:	4847      	ldr	r0, [pc, #284]	; (8012aec <tcp_listen_with_backlog_and_err+0x140>)
 80129ce:	f00c f855 	bl	801ea7c <iprintf>
 80129d2:	23f0      	movs	r3, #240	; 0xf0
 80129d4:	76fb      	strb	r3, [r7, #27]
 80129d6:	e079      	b.n	8012acc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	7d1b      	ldrb	r3, [r3, #20]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d009      	beq.n	80129f4 <tcp_listen_with_backlog_and_err+0x48>
 80129e0:	4b40      	ldr	r3, [pc, #256]	; (8012ae4 <tcp_listen_with_backlog_and_err+0x138>)
 80129e2:	f240 325a 	movw	r2, #858	; 0x35a
 80129e6:	4942      	ldr	r1, [pc, #264]	; (8012af0 <tcp_listen_with_backlog_and_err+0x144>)
 80129e8:	4840      	ldr	r0, [pc, #256]	; (8012aec <tcp_listen_with_backlog_and_err+0x140>)
 80129ea:	f00c f847 	bl	801ea7c <iprintf>
 80129ee:	23f1      	movs	r3, #241	; 0xf1
 80129f0:	76fb      	strb	r3, [r7, #27]
 80129f2:	e06b      	b.n	8012acc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	7d1b      	ldrb	r3, [r3, #20]
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	d104      	bne.n	8012a06 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8012a00:	23f7      	movs	r3, #247	; 0xf7
 8012a02:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012a04:	e062      	b.n	8012acc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8012a06:	2002      	movs	r0, #2
 8012a08:	f7fe f85c 	bl	8010ac4 <memp_malloc>
 8012a0c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8012a0e:	69fb      	ldr	r3, [r7, #28]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d102      	bne.n	8012a1a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8012a14:	23ff      	movs	r3, #255	; 0xff
 8012a16:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012a18:	e058      	b.n	8012acc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	691a      	ldr	r2, [r3, #16]
 8012a1e:	69fb      	ldr	r3, [r7, #28]
 8012a20:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	8ada      	ldrh	r2, [r3, #22]
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	7d5a      	ldrb	r2, [r3, #21]
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	7a5a      	ldrb	r2, [r3, #9]
 8012a3c:	69fb      	ldr	r3, [r7, #28]
 8012a3e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	2200      	movs	r2, #0
 8012a44:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	7ada      	ldrb	r2, [r3, #11]
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	7a9a      	ldrb	r2, [r3, #10]
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	8adb      	ldrh	r3, [r3, #22]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d021      	beq.n	8012aaa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8012a66:	4b23      	ldr	r3, [pc, #140]	; (8012af4 <tcp_listen_with_backlog_and_err+0x148>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	68fa      	ldr	r2, [r7, #12]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d105      	bne.n	8012a7c <tcp_listen_with_backlog_and_err+0xd0>
 8012a70:	4b20      	ldr	r3, [pc, #128]	; (8012af4 <tcp_listen_with_backlog_and_err+0x148>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	4a1f      	ldr	r2, [pc, #124]	; (8012af4 <tcp_listen_with_backlog_and_err+0x148>)
 8012a78:	6013      	str	r3, [r2, #0]
 8012a7a:	e013      	b.n	8012aa4 <tcp_listen_with_backlog_and_err+0xf8>
 8012a7c:	4b1d      	ldr	r3, [pc, #116]	; (8012af4 <tcp_listen_with_backlog_and_err+0x148>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	617b      	str	r3, [r7, #20]
 8012a82:	e00c      	b.n	8012a9e <tcp_listen_with_backlog_and_err+0xf2>
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d104      	bne.n	8012a98 <tcp_listen_with_backlog_and_err+0xec>
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	68da      	ldr	r2, [r3, #12]
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	60da      	str	r2, [r3, #12]
 8012a96:	e005      	b.n	8012aa4 <tcp_listen_with_backlog_and_err+0xf8>
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	68db      	ldr	r3, [r3, #12]
 8012a9c:	617b      	str	r3, [r7, #20]
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d1ef      	bne.n	8012a84 <tcp_listen_with_backlog_and_err+0xd8>
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8012aaa:	68f8      	ldr	r0, [r7, #12]
 8012aac:	f7ff fb76 	bl	801219c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	4a11      	ldr	r2, [pc, #68]	; (8012af8 <tcp_listen_with_backlog_and_err+0x14c>)
 8012ab4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8012ab6:	4b11      	ldr	r3, [pc, #68]	; (8012afc <tcp_listen_with_backlog_and_err+0x150>)
 8012ab8:	681a      	ldr	r2, [r3, #0]
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	60da      	str	r2, [r3, #12]
 8012abe:	4a0f      	ldr	r2, [pc, #60]	; (8012afc <tcp_listen_with_backlog_and_err+0x150>)
 8012ac0:	69fb      	ldr	r3, [r7, #28]
 8012ac2:	6013      	str	r3, [r2, #0]
 8012ac4:	f005 fd5e 	bl	8018584 <tcp_timer_needed>
  res = ERR_OK;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d002      	beq.n	8012ad8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	7efa      	ldrb	r2, [r7, #27]
 8012ad6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012ad8:	69fb      	ldr	r3, [r7, #28]
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3720      	adds	r7, #32
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	080240bc 	.word	0x080240bc
 8012ae8:	080242b0 	.word	0x080242b0
 8012aec:	08024100 	.word	0x08024100
 8012af0:	080242e0 	.word	0x080242e0
 8012af4:	2001b0d4 	.word	0x2001b0d4
 8012af8:	0801296d 	.word	0x0801296d
 8012afc:	2001b0d0 	.word	0x2001b0d0

08012b00 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d106      	bne.n	8012b1c <tcp_update_rcv_ann_wnd+0x1c>
 8012b0e:	4b25      	ldr	r3, [pc, #148]	; (8012ba4 <tcp_update_rcv_ann_wnd+0xa4>)
 8012b10:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012b14:	4924      	ldr	r1, [pc, #144]	; (8012ba8 <tcp_update_rcv_ann_wnd+0xa8>)
 8012b16:	4825      	ldr	r0, [pc, #148]	; (8012bac <tcp_update_rcv_ann_wnd+0xac>)
 8012b18:	f00b ffb0 	bl	801ea7c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b20:	687a      	ldr	r2, [r7, #4]
 8012b22:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012b24:	4413      	add	r3, r2
 8012b26:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012b30:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012b34:	bf28      	it	cs
 8012b36:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012b3a:	b292      	uxth	r2, r2
 8012b3c:	4413      	add	r3, r2
 8012b3e:	68fa      	ldr	r2, [r7, #12]
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	db08      	blt.n	8012b58 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b52:	68fa      	ldr	r2, [r7, #12]
 8012b54:	1ad3      	subs	r3, r2, r3
 8012b56:	e020      	b.n	8012b9a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b60:	1ad3      	subs	r3, r2, r3
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	dd03      	ble.n	8012b6e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012b6c:	e014      	b.n	8012b98 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b80:	d306      	bcc.n	8012b90 <tcp_update_rcv_ann_wnd+0x90>
 8012b82:	4b08      	ldr	r3, [pc, #32]	; (8012ba4 <tcp_update_rcv_ann_wnd+0xa4>)
 8012b84:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012b88:	4909      	ldr	r1, [pc, #36]	; (8012bb0 <tcp_update_rcv_ann_wnd+0xb0>)
 8012b8a:	4808      	ldr	r0, [pc, #32]	; (8012bac <tcp_update_rcv_ann_wnd+0xac>)
 8012b8c:	f00b ff76 	bl	801ea7c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	b29a      	uxth	r2, r3
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012b98:	2300      	movs	r3, #0
  }
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3710      	adds	r7, #16
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	080240bc 	.word	0x080240bc
 8012ba8:	08024318 	.word	0x08024318
 8012bac:	08024100 	.word	0x08024100
 8012bb0:	0802433c 	.word	0x0802433c

08012bb4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d107      	bne.n	8012bd6 <tcp_recved+0x22>
 8012bc6:	4b1f      	ldr	r3, [pc, #124]	; (8012c44 <tcp_recved+0x90>)
 8012bc8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012bcc:	491e      	ldr	r1, [pc, #120]	; (8012c48 <tcp_recved+0x94>)
 8012bce:	481f      	ldr	r0, [pc, #124]	; (8012c4c <tcp_recved+0x98>)
 8012bd0:	f00b ff54 	bl	801ea7c <iprintf>
 8012bd4:	e032      	b.n	8012c3c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	7d1b      	ldrb	r3, [r3, #20]
 8012bda:	2b01      	cmp	r3, #1
 8012bdc:	d106      	bne.n	8012bec <tcp_recved+0x38>
 8012bde:	4b19      	ldr	r3, [pc, #100]	; (8012c44 <tcp_recved+0x90>)
 8012be0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012be4:	491a      	ldr	r1, [pc, #104]	; (8012c50 <tcp_recved+0x9c>)
 8012be6:	4819      	ldr	r0, [pc, #100]	; (8012c4c <tcp_recved+0x98>)
 8012be8:	f00b ff48 	bl	801ea7c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012bf0:	887b      	ldrh	r3, [r7, #2]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012bf6:	89fb      	ldrh	r3, [r7, #14]
 8012bf8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012bfc:	d804      	bhi.n	8012c08 <tcp_recved+0x54>
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c02:	89fa      	ldrh	r2, [r7, #14]
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d204      	bcs.n	8012c12 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012c0e:	851a      	strh	r2, [r3, #40]	; 0x28
 8012c10:	e002      	b.n	8012c18 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	89fa      	ldrh	r2, [r7, #14]
 8012c16:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7ff ff71 	bl	8012b00 <tcp_update_rcv_ann_wnd>
 8012c1e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012c26:	d309      	bcc.n	8012c3c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	8b5b      	ldrh	r3, [r3, #26]
 8012c2c:	f043 0302 	orr.w	r3, r3, #2
 8012c30:	b29a      	uxth	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f004 fd22 	bl	8017680 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012c3c:	3710      	adds	r7, #16
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	bf00      	nop
 8012c44:	080240bc 	.word	0x080240bc
 8012c48:	08024358 	.word	0x08024358
 8012c4c:	08024100 	.word	0x08024100
 8012c50:	08024370 	.word	0x08024370

08012c54 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012c5e:	4b1e      	ldr	r3, [pc, #120]	; (8012cd8 <tcp_new_port+0x84>)
 8012c60:	881b      	ldrh	r3, [r3, #0]
 8012c62:	3301      	adds	r3, #1
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	4b1c      	ldr	r3, [pc, #112]	; (8012cd8 <tcp_new_port+0x84>)
 8012c68:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012c6a:	4b1b      	ldr	r3, [pc, #108]	; (8012cd8 <tcp_new_port+0x84>)
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d103      	bne.n	8012c7e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012c76:	4b18      	ldr	r3, [pc, #96]	; (8012cd8 <tcp_new_port+0x84>)
 8012c78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012c7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012c7e:	2300      	movs	r3, #0
 8012c80:	71fb      	strb	r3, [r7, #7]
 8012c82:	e01e      	b.n	8012cc2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012c84:	79fb      	ldrb	r3, [r7, #7]
 8012c86:	4a15      	ldr	r2, [pc, #84]	; (8012cdc <tcp_new_port+0x88>)
 8012c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	603b      	str	r3, [r7, #0]
 8012c90:	e011      	b.n	8012cb6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	8ada      	ldrh	r2, [r3, #22]
 8012c96:	4b10      	ldr	r3, [pc, #64]	; (8012cd8 <tcp_new_port+0x84>)
 8012c98:	881b      	ldrh	r3, [r3, #0]
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d108      	bne.n	8012cb0 <tcp_new_port+0x5c>
        n++;
 8012c9e:	88bb      	ldrh	r3, [r7, #4]
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012ca4:	88bb      	ldrh	r3, [r7, #4]
 8012ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012caa:	d3d8      	bcc.n	8012c5e <tcp_new_port+0xa>
          return 0;
 8012cac:	2300      	movs	r3, #0
 8012cae:	e00d      	b.n	8012ccc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	603b      	str	r3, [r7, #0]
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d1ea      	bne.n	8012c92 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012cbc:	79fb      	ldrb	r3, [r7, #7]
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	71fb      	strb	r3, [r7, #7]
 8012cc2:	79fb      	ldrb	r3, [r7, #7]
 8012cc4:	2b03      	cmp	r3, #3
 8012cc6:	d9dd      	bls.n	8012c84 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012cc8:	4b03      	ldr	r3, [pc, #12]	; (8012cd8 <tcp_new_port+0x84>)
 8012cca:	881b      	ldrh	r3, [r3, #0]
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	370c      	adds	r7, #12
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr
 8012cd8:	20000054 	.word	0x20000054
 8012cdc:	08026680 	.word	0x08026680

08012ce0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b08a      	sub	sp, #40	; 0x28
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	60b9      	str	r1, [r7, #8]
 8012cea:	603b      	str	r3, [r7, #0]
 8012cec:	4613      	mov	r3, r2
 8012cee:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d109      	bne.n	8012d0e <tcp_connect+0x2e>
 8012cfa:	4b7d      	ldr	r3, [pc, #500]	; (8012ef0 <tcp_connect+0x210>)
 8012cfc:	f240 4235 	movw	r2, #1077	; 0x435
 8012d00:	497c      	ldr	r1, [pc, #496]	; (8012ef4 <tcp_connect+0x214>)
 8012d02:	487d      	ldr	r0, [pc, #500]	; (8012ef8 <tcp_connect+0x218>)
 8012d04:	f00b feba 	bl	801ea7c <iprintf>
 8012d08:	f06f 030f 	mvn.w	r3, #15
 8012d0c:	e0ec      	b.n	8012ee8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d109      	bne.n	8012d28 <tcp_connect+0x48>
 8012d14:	4b76      	ldr	r3, [pc, #472]	; (8012ef0 <tcp_connect+0x210>)
 8012d16:	f240 4236 	movw	r2, #1078	; 0x436
 8012d1a:	4978      	ldr	r1, [pc, #480]	; (8012efc <tcp_connect+0x21c>)
 8012d1c:	4876      	ldr	r0, [pc, #472]	; (8012ef8 <tcp_connect+0x218>)
 8012d1e:	f00b fead 	bl	801ea7c <iprintf>
 8012d22:	f06f 030f 	mvn.w	r3, #15
 8012d26:	e0df      	b.n	8012ee8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	7d1b      	ldrb	r3, [r3, #20]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d009      	beq.n	8012d44 <tcp_connect+0x64>
 8012d30:	4b6f      	ldr	r3, [pc, #444]	; (8012ef0 <tcp_connect+0x210>)
 8012d32:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8012d36:	4972      	ldr	r1, [pc, #456]	; (8012f00 <tcp_connect+0x220>)
 8012d38:	486f      	ldr	r0, [pc, #444]	; (8012ef8 <tcp_connect+0x218>)
 8012d3a:	f00b fe9f 	bl	801ea7c <iprintf>
 8012d3e:	f06f 0309 	mvn.w	r3, #9
 8012d42:	e0d1      	b.n	8012ee8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d002      	beq.n	8012d50 <tcp_connect+0x70>
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	e000      	b.n	8012d52 <tcp_connect+0x72>
 8012d50:	2300      	movs	r3, #0
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	88fa      	ldrh	r2, [r7, #6]
 8012d5a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	7a1b      	ldrb	r3, [r3, #8]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d006      	beq.n	8012d72 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	7a1b      	ldrb	r3, [r3, #8]
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7fe fa1f 	bl	80111ac <netif_get_by_index>
 8012d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8012d70:	e005      	b.n	8012d7e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	3304      	adds	r3, #4
 8012d76:	4618      	mov	r0, r3
 8012d78:	f009 fb00 	bl	801c37c <ip4_route>
 8012d7c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8012d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d102      	bne.n	8012d8a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012d84:	f06f 0303 	mvn.w	r3, #3
 8012d88:	e0ae      	b.n	8012ee8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d003      	beq.n	8012d98 <tcp_connect+0xb8>
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d111      	bne.n	8012dbc <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8012d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d002      	beq.n	8012da4 <tcp_connect+0xc4>
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da0:	3304      	adds	r3, #4
 8012da2:	e000      	b.n	8012da6 <tcp_connect+0xc6>
 8012da4:	2300      	movs	r3, #0
 8012da6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d102      	bne.n	8012db4 <tcp_connect+0xd4>
      return ERR_RTE;
 8012dae:	f06f 0303 	mvn.w	r3, #3
 8012db2:	e099      	b.n	8012ee8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012db4:	69fb      	ldr	r3, [r7, #28]
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	8adb      	ldrh	r3, [r3, #22]
 8012dc0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	8adb      	ldrh	r3, [r3, #22]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d10c      	bne.n	8012de4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8012dca:	f7ff ff43 	bl	8012c54 <tcp_new_port>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	8adb      	ldrh	r3, [r3, #22]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d102      	bne.n	8012de4 <tcp_connect+0x104>
      return ERR_BUF;
 8012dde:	f06f 0301 	mvn.w	r3, #1
 8012de2:	e081      	b.n	8012ee8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012de4:	68f8      	ldr	r0, [r7, #12]
 8012de6:	f001 f867 	bl	8013eb8 <tcp_next_iss>
 8012dea:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	2200      	movs	r2, #0
 8012df0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	697a      	ldr	r2, [r7, #20]
 8012df6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	1e5a      	subs	r2, r3, #1
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	1e5a      	subs	r2, r3, #1
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	1e5a      	subs	r2, r3, #1
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012e16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012e2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012e38:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	3304      	adds	r3, #4
 8012e42:	461a      	mov	r2, r3
 8012e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e46:	f001 f85d 	bl	8013f04 <tcp_eff_send_mss_netif>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	2201      	movs	r2, #1
 8012e56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	683a      	ldr	r2, [r7, #0]
 8012e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012e62:	2102      	movs	r1, #2
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f004 fb1d 	bl	80174a4 <tcp_enqueue_flags>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012e6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d136      	bne.n	8012ee4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2202      	movs	r2, #2
 8012e7a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012e7c:	8b7b      	ldrh	r3, [r7, #26]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d021      	beq.n	8012ec6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012e82:	4b20      	ldr	r3, [pc, #128]	; (8012f04 <tcp_connect+0x224>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	68fa      	ldr	r2, [r7, #12]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d105      	bne.n	8012e98 <tcp_connect+0x1b8>
 8012e8c:	4b1d      	ldr	r3, [pc, #116]	; (8012f04 <tcp_connect+0x224>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	4a1c      	ldr	r2, [pc, #112]	; (8012f04 <tcp_connect+0x224>)
 8012e94:	6013      	str	r3, [r2, #0]
 8012e96:	e013      	b.n	8012ec0 <tcp_connect+0x1e0>
 8012e98:	4b1a      	ldr	r3, [pc, #104]	; (8012f04 <tcp_connect+0x224>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	623b      	str	r3, [r7, #32]
 8012e9e:	e00c      	b.n	8012eba <tcp_connect+0x1da>
 8012ea0:	6a3b      	ldr	r3, [r7, #32]
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	68fa      	ldr	r2, [r7, #12]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	d104      	bne.n	8012eb4 <tcp_connect+0x1d4>
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	68da      	ldr	r2, [r3, #12]
 8012eae:	6a3b      	ldr	r3, [r7, #32]
 8012eb0:	60da      	str	r2, [r3, #12]
 8012eb2:	e005      	b.n	8012ec0 <tcp_connect+0x1e0>
 8012eb4:	6a3b      	ldr	r3, [r7, #32]
 8012eb6:	68db      	ldr	r3, [r3, #12]
 8012eb8:	623b      	str	r3, [r7, #32]
 8012eba:	6a3b      	ldr	r3, [r7, #32]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d1ef      	bne.n	8012ea0 <tcp_connect+0x1c0>
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8012ec6:	4b10      	ldr	r3, [pc, #64]	; (8012f08 <tcp_connect+0x228>)
 8012ec8:	681a      	ldr	r2, [r3, #0]
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	60da      	str	r2, [r3, #12]
 8012ece:	4a0e      	ldr	r2, [pc, #56]	; (8012f08 <tcp_connect+0x228>)
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6013      	str	r3, [r2, #0]
 8012ed4:	f005 fb56 	bl	8018584 <tcp_timer_needed>
 8012ed8:	4b0c      	ldr	r3, [pc, #48]	; (8012f0c <tcp_connect+0x22c>)
 8012eda:	2201      	movs	r2, #1
 8012edc:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012ede:	68f8      	ldr	r0, [r7, #12]
 8012ee0:	f004 fbce 	bl	8017680 <tcp_output>
  }
  return ret;
 8012ee4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3728      	adds	r7, #40	; 0x28
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}
 8012ef0:	080240bc 	.word	0x080240bc
 8012ef4:	08024398 	.word	0x08024398
 8012ef8:	08024100 	.word	0x08024100
 8012efc:	080243b4 	.word	0x080243b4
 8012f00:	080243d0 	.word	0x080243d0
 8012f04:	2001b0d4 	.word	0x2001b0d4
 8012f08:	2001b0c8 	.word	0x2001b0c8
 8012f0c:	2001b0c4 	.word	0x2001b0c4

08012f10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012f10:	b5b0      	push	{r4, r5, r7, lr}
 8012f12:	b090      	sub	sp, #64	; 0x40
 8012f14:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012f16:	2300      	movs	r3, #0
 8012f18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012f1c:	4b94      	ldr	r3, [pc, #592]	; (8013170 <tcp_slowtmr+0x260>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	3301      	adds	r3, #1
 8012f22:	4a93      	ldr	r2, [pc, #588]	; (8013170 <tcp_slowtmr+0x260>)
 8012f24:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012f26:	4b93      	ldr	r3, [pc, #588]	; (8013174 <tcp_slowtmr+0x264>)
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	b2da      	uxtb	r2, r3
 8012f2e:	4b91      	ldr	r3, [pc, #580]	; (8013174 <tcp_slowtmr+0x264>)
 8012f30:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012f36:	4b90      	ldr	r3, [pc, #576]	; (8013178 <tcp_slowtmr+0x268>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012f3c:	e29f      	b.n	801347e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f40:	7d1b      	ldrb	r3, [r3, #20]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d106      	bne.n	8012f54 <tcp_slowtmr+0x44>
 8012f46:	4b8d      	ldr	r3, [pc, #564]	; (801317c <tcp_slowtmr+0x26c>)
 8012f48:	f240 42be 	movw	r2, #1214	; 0x4be
 8012f4c:	498c      	ldr	r1, [pc, #560]	; (8013180 <tcp_slowtmr+0x270>)
 8012f4e:	488d      	ldr	r0, [pc, #564]	; (8013184 <tcp_slowtmr+0x274>)
 8012f50:	f00b fd94 	bl	801ea7c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f56:	7d1b      	ldrb	r3, [r3, #20]
 8012f58:	2b01      	cmp	r3, #1
 8012f5a:	d106      	bne.n	8012f6a <tcp_slowtmr+0x5a>
 8012f5c:	4b87      	ldr	r3, [pc, #540]	; (801317c <tcp_slowtmr+0x26c>)
 8012f5e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012f62:	4989      	ldr	r1, [pc, #548]	; (8013188 <tcp_slowtmr+0x278>)
 8012f64:	4887      	ldr	r0, [pc, #540]	; (8013184 <tcp_slowtmr+0x274>)
 8012f66:	f00b fd89 	bl	801ea7c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6c:	7d1b      	ldrb	r3, [r3, #20]
 8012f6e:	2b0a      	cmp	r3, #10
 8012f70:	d106      	bne.n	8012f80 <tcp_slowtmr+0x70>
 8012f72:	4b82      	ldr	r3, [pc, #520]	; (801317c <tcp_slowtmr+0x26c>)
 8012f74:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012f78:	4984      	ldr	r1, [pc, #528]	; (801318c <tcp_slowtmr+0x27c>)
 8012f7a:	4882      	ldr	r0, [pc, #520]	; (8013184 <tcp_slowtmr+0x274>)
 8012f7c:	f00b fd7e 	bl	801ea7c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	7f9a      	ldrb	r2, [r3, #30]
 8012f84:	4b7b      	ldr	r3, [pc, #492]	; (8013174 <tcp_slowtmr+0x264>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d105      	bne.n	8012f98 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f92:	68db      	ldr	r3, [r3, #12]
 8012f94:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012f96:	e272      	b.n	801347e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012f98:	4b76      	ldr	r3, [pc, #472]	; (8013174 <tcp_slowtmr+0x264>)
 8012f9a:	781a      	ldrb	r2, [r3, #0]
 8012f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f9e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fae:	7d1b      	ldrb	r3, [r3, #20]
 8012fb0:	2b02      	cmp	r3, #2
 8012fb2:	d10a      	bne.n	8012fca <tcp_slowtmr+0xba>
 8012fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fba:	2b05      	cmp	r3, #5
 8012fbc:	d905      	bls.n	8012fca <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8012fc8:	e11e      	b.n	8013208 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fd0:	2b0b      	cmp	r3, #11
 8012fd2:	d905      	bls.n	8012fe0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fd8:	3301      	adds	r3, #1
 8012fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012fde:	e113      	b.n	8013208 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d075      	beq.n	80130d6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d006      	beq.n	8013000 <tcp_slowtmr+0xf0>
 8012ff2:	4b62      	ldr	r3, [pc, #392]	; (801317c <tcp_slowtmr+0x26c>)
 8012ff4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012ff8:	4965      	ldr	r1, [pc, #404]	; (8013190 <tcp_slowtmr+0x280>)
 8012ffa:	4862      	ldr	r0, [pc, #392]	; (8013184 <tcp_slowtmr+0x274>)
 8012ffc:	f00b fd3e 	bl	801ea7c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013004:	2b00      	cmp	r3, #0
 8013006:	d106      	bne.n	8013016 <tcp_slowtmr+0x106>
 8013008:	4b5c      	ldr	r3, [pc, #368]	; (801317c <tcp_slowtmr+0x26c>)
 801300a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801300e:	4961      	ldr	r1, [pc, #388]	; (8013194 <tcp_slowtmr+0x284>)
 8013010:	485c      	ldr	r0, [pc, #368]	; (8013184 <tcp_slowtmr+0x274>)
 8013012:	f00b fd33 	bl	801ea7c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013018:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801301c:	2b0b      	cmp	r3, #11
 801301e:	d905      	bls.n	801302c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013024:	3301      	adds	r3, #1
 8013026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801302a:	e0ed      	b.n	8013208 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801302e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013032:	3b01      	subs	r3, #1
 8013034:	4a58      	ldr	r2, [pc, #352]	; (8013198 <tcp_slowtmr+0x288>)
 8013036:	5cd3      	ldrb	r3, [r2, r3]
 8013038:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801303c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013040:	7c7a      	ldrb	r2, [r7, #17]
 8013042:	429a      	cmp	r2, r3
 8013044:	d907      	bls.n	8013056 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013048:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801304c:	3301      	adds	r3, #1
 801304e:	b2da      	uxtb	r2, r3
 8013050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013052:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013058:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801305c:	7c7a      	ldrb	r2, [r7, #17]
 801305e:	429a      	cmp	r2, r3
 8013060:	f200 80d2 	bhi.w	8013208 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013064:	2301      	movs	r3, #1
 8013066:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801306e:	2b00      	cmp	r3, #0
 8013070:	d108      	bne.n	8013084 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013074:	f005 f9b8 	bl	80183e8 <tcp_zero_window_probe>
 8013078:	4603      	mov	r3, r0
 801307a:	2b00      	cmp	r3, #0
 801307c:	d014      	beq.n	80130a8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801307e:	2300      	movs	r3, #0
 8013080:	623b      	str	r3, [r7, #32]
 8013082:	e011      	b.n	80130a8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801308a:	4619      	mov	r1, r3
 801308c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801308e:	f004 f86d 	bl	801716c <tcp_split_unsent_seg>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d107      	bne.n	80130a8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801309a:	f004 faf1 	bl	8017680 <tcp_output>
 801309e:	4603      	mov	r3, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d101      	bne.n	80130a8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80130a4:	2300      	movs	r3, #0
 80130a6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80130a8:	6a3b      	ldr	r3, [r7, #32]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	f000 80ac 	beq.w	8013208 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80130b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b2:	2200      	movs	r2, #0
 80130b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80130b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80130be:	2b06      	cmp	r3, #6
 80130c0:	f200 80a2 	bhi.w	8013208 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80130c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80130ca:	3301      	adds	r3, #1
 80130cc:	b2da      	uxtb	r2, r3
 80130ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80130d4:	e098      	b.n	8013208 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80130d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80130dc:	2b00      	cmp	r3, #0
 80130de:	db0f      	blt.n	8013100 <tcp_slowtmr+0x1f0>
 80130e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80130e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80130ea:	4293      	cmp	r3, r2
 80130ec:	d008      	beq.n	8013100 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80130ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	3301      	adds	r3, #1
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	b21a      	sxth	r2, r3
 80130fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013102:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013108:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801310c:	429a      	cmp	r2, r3
 801310e:	db7b      	blt.n	8013208 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013112:	f004 fda9 	bl	8017c68 <tcp_rexmit_rto_prepare>
 8013116:	4603      	mov	r3, r0
 8013118:	2b00      	cmp	r3, #0
 801311a:	d007      	beq.n	801312c <tcp_slowtmr+0x21c>
 801311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013120:	2b00      	cmp	r3, #0
 8013122:	d171      	bne.n	8013208 <tcp_slowtmr+0x2f8>
 8013124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013128:	2b00      	cmp	r3, #0
 801312a:	d06d      	beq.n	8013208 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312e:	7d1b      	ldrb	r3, [r3, #20]
 8013130:	2b02      	cmp	r3, #2
 8013132:	d03a      	beq.n	80131aa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801313a:	2b0c      	cmp	r3, #12
 801313c:	bf28      	it	cs
 801313e:	230c      	movcs	r3, #12
 8013140:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013144:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013148:	10db      	asrs	r3, r3, #3
 801314a:	b21b      	sxth	r3, r3
 801314c:	461a      	mov	r2, r3
 801314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013150:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013154:	4413      	add	r3, r2
 8013156:	7efa      	ldrb	r2, [r7, #27]
 8013158:	4910      	ldr	r1, [pc, #64]	; (801319c <tcp_slowtmr+0x28c>)
 801315a:	5c8a      	ldrb	r2, [r1, r2]
 801315c:	4093      	lsls	r3, r2
 801315e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013166:	4293      	cmp	r3, r2
 8013168:	dc1a      	bgt.n	80131a0 <tcp_slowtmr+0x290>
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	b21a      	sxth	r2, r3
 801316e:	e019      	b.n	80131a4 <tcp_slowtmr+0x294>
 8013170:	2001b0cc 	.word	0x2001b0cc
 8013174:	2001435a 	.word	0x2001435a
 8013178:	2001b0c8 	.word	0x2001b0c8
 801317c:	080240bc 	.word	0x080240bc
 8013180:	08024400 	.word	0x08024400
 8013184:	08024100 	.word	0x08024100
 8013188:	0802442c 	.word	0x0802442c
 801318c:	08024458 	.word	0x08024458
 8013190:	08024488 	.word	0x08024488
 8013194:	080244bc 	.word	0x080244bc
 8013198:	08026678 	.word	0x08026678
 801319c:	08026668 	.word	0x08026668
 80131a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80131a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80131aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ac:	2200      	movs	r2, #0
 80131ae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80131b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80131b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80131bc:	4293      	cmp	r3, r2
 80131be:	bf28      	it	cs
 80131c0:	4613      	movcs	r3, r2
 80131c2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80131c4:	8a7b      	ldrh	r3, [r7, #18]
 80131c6:	085b      	lsrs	r3, r3, #1
 80131c8:	b29a      	uxth	r2, r3
 80131ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80131d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80131d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131da:	005b      	lsls	r3, r3, #1
 80131dc:	b29b      	uxth	r3, r3
 80131de:	429a      	cmp	r2, r3
 80131e0:	d206      	bcs.n	80131f0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80131e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131e6:	005b      	lsls	r3, r3, #1
 80131e8:	b29a      	uxth	r2, r3
 80131ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80131f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80131f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80131fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fc:	2200      	movs	r2, #0
 80131fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8013202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013204:	f004 fdaa 	bl	8017d5c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320a:	7d1b      	ldrb	r3, [r3, #20]
 801320c:	2b06      	cmp	r3, #6
 801320e:	d111      	bne.n	8013234 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013212:	8b5b      	ldrh	r3, [r3, #26]
 8013214:	f003 0310 	and.w	r3, r3, #16
 8013218:	2b00      	cmp	r3, #0
 801321a:	d00b      	beq.n	8013234 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801321c:	4b9d      	ldr	r3, [pc, #628]	; (8013494 <tcp_slowtmr+0x584>)
 801321e:	681a      	ldr	r2, [r3, #0]
 8013220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013222:	6a1b      	ldr	r3, [r3, #32]
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	2b28      	cmp	r3, #40	; 0x28
 8013228:	d904      	bls.n	8013234 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801322a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801322e:	3301      	adds	r3, #1
 8013230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013236:	7a5b      	ldrb	r3, [r3, #9]
 8013238:	f003 0308 	and.w	r3, r3, #8
 801323c:	2b00      	cmp	r3, #0
 801323e:	d04c      	beq.n	80132da <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013242:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013244:	2b04      	cmp	r3, #4
 8013246:	d003      	beq.n	8013250 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801324c:	2b07      	cmp	r3, #7
 801324e:	d144      	bne.n	80132da <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013250:	4b90      	ldr	r3, [pc, #576]	; (8013494 <tcp_slowtmr+0x584>)
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013256:	6a1b      	ldr	r3, [r3, #32]
 8013258:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801325c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013260:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8013264:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8013268:	498b      	ldr	r1, [pc, #556]	; (8013498 <tcp_slowtmr+0x588>)
 801326a:	fba1 1303 	umull	r1, r3, r1, r3
 801326e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013270:	429a      	cmp	r2, r3
 8013272:	d90a      	bls.n	801328a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013278:	3301      	adds	r3, #1
 801327a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801327e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013282:	3301      	adds	r3, #1
 8013284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013288:	e027      	b.n	80132da <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801328a:	4b82      	ldr	r3, [pc, #520]	; (8013494 <tcp_slowtmr+0x584>)
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013290:	6a1b      	ldr	r3, [r3, #32]
 8013292:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013296:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80132a0:	4618      	mov	r0, r3
 80132a2:	4b7e      	ldr	r3, [pc, #504]	; (801349c <tcp_slowtmr+0x58c>)
 80132a4:	fb03 f300 	mul.w	r3, r3, r0
 80132a8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80132aa:	497b      	ldr	r1, [pc, #492]	; (8013498 <tcp_slowtmr+0x588>)
 80132ac:	fba1 1303 	umull	r1, r3, r1, r3
 80132b0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d911      	bls.n	80132da <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80132b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132b8:	f005 f856 	bl	8018368 <tcp_keepalive>
 80132bc:	4603      	mov	r3, r0
 80132be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80132c2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d107      	bne.n	80132da <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80132ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80132d0:	3301      	adds	r3, #1
 80132d2:	b2da      	uxtb	r2, r3
 80132d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80132da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d011      	beq.n	8013306 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80132e2:	4b6c      	ldr	r3, [pc, #432]	; (8013494 <tcp_slowtmr+0x584>)
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e8:	6a1b      	ldr	r3, [r3, #32]
 80132ea:	1ad2      	subs	r2, r2, r3
 80132ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80132f2:	4619      	mov	r1, r3
 80132f4:	460b      	mov	r3, r1
 80132f6:	005b      	lsls	r3, r3, #1
 80132f8:	440b      	add	r3, r1
 80132fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d302      	bcc.n	8013306 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8013300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013302:	f000 fea9 	bl	8014058 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013308:	7d1b      	ldrb	r3, [r3, #20]
 801330a:	2b03      	cmp	r3, #3
 801330c:	d10b      	bne.n	8013326 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801330e:	4b61      	ldr	r3, [pc, #388]	; (8013494 <tcp_slowtmr+0x584>)
 8013310:	681a      	ldr	r2, [r3, #0]
 8013312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013314:	6a1b      	ldr	r3, [r3, #32]
 8013316:	1ad3      	subs	r3, r2, r3
 8013318:	2b28      	cmp	r3, #40	; 0x28
 801331a:	d904      	bls.n	8013326 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801331c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013320:	3301      	adds	r3, #1
 8013322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013328:	7d1b      	ldrb	r3, [r3, #20]
 801332a:	2b09      	cmp	r3, #9
 801332c:	d10b      	bne.n	8013346 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801332e:	4b59      	ldr	r3, [pc, #356]	; (8013494 <tcp_slowtmr+0x584>)
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013334:	6a1b      	ldr	r3, [r3, #32]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	2bf0      	cmp	r3, #240	; 0xf0
 801333a:	d904      	bls.n	8013346 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801333c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013340:	3301      	adds	r3, #1
 8013342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801334a:	2b00      	cmp	r3, #0
 801334c:	d060      	beq.n	8013410 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013354:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013358:	f000 fcca 	bl	8013cf0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801335e:	2b00      	cmp	r3, #0
 8013360:	d010      	beq.n	8013384 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013362:	4b4f      	ldr	r3, [pc, #316]	; (80134a0 <tcp_slowtmr+0x590>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013368:	429a      	cmp	r2, r3
 801336a:	d106      	bne.n	801337a <tcp_slowtmr+0x46a>
 801336c:	4b4d      	ldr	r3, [pc, #308]	; (80134a4 <tcp_slowtmr+0x594>)
 801336e:	f240 526d 	movw	r2, #1389	; 0x56d
 8013372:	494d      	ldr	r1, [pc, #308]	; (80134a8 <tcp_slowtmr+0x598>)
 8013374:	484d      	ldr	r0, [pc, #308]	; (80134ac <tcp_slowtmr+0x59c>)
 8013376:	f00b fb81 	bl	801ea7c <iprintf>
        prev->next = pcb->next;
 801337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337c:	68da      	ldr	r2, [r3, #12]
 801337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013380:	60da      	str	r2, [r3, #12]
 8013382:	e00f      	b.n	80133a4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013384:	4b46      	ldr	r3, [pc, #280]	; (80134a0 <tcp_slowtmr+0x590>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801338a:	429a      	cmp	r2, r3
 801338c:	d006      	beq.n	801339c <tcp_slowtmr+0x48c>
 801338e:	4b45      	ldr	r3, [pc, #276]	; (80134a4 <tcp_slowtmr+0x594>)
 8013390:	f240 5271 	movw	r2, #1393	; 0x571
 8013394:	4946      	ldr	r1, [pc, #280]	; (80134b0 <tcp_slowtmr+0x5a0>)
 8013396:	4845      	ldr	r0, [pc, #276]	; (80134ac <tcp_slowtmr+0x59c>)
 8013398:	f00b fb70 	bl	801ea7c <iprintf>
        tcp_active_pcbs = pcb->next;
 801339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	4a3f      	ldr	r2, [pc, #252]	; (80134a0 <tcp_slowtmr+0x590>)
 80133a2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80133a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d013      	beq.n	80133d4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80133ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80133b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80133b4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80133b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b8:	3304      	adds	r3, #4
 80133ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133bc:	8ad2      	ldrh	r2, [r2, #22]
 80133be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80133c0:	8b09      	ldrh	r1, [r1, #24]
 80133c2:	9102      	str	r1, [sp, #8]
 80133c4:	9201      	str	r2, [sp, #4]
 80133c6:	9300      	str	r3, [sp, #0]
 80133c8:	462b      	mov	r3, r5
 80133ca:	4622      	mov	r2, r4
 80133cc:	4601      	mov	r1, r0
 80133ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80133d0:	f004 ff16 	bl	8018200 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80133d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d6:	691b      	ldr	r3, [r3, #16]
 80133d8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80133da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133dc:	7d1b      	ldrb	r3, [r3, #20]
 80133de:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80133e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80133e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80133ea:	6838      	ldr	r0, [r7, #0]
 80133ec:	f7fe fed6 	bl	801219c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80133f0:	4b30      	ldr	r3, [pc, #192]	; (80134b4 <tcp_slowtmr+0x5a4>)
 80133f2:	2200      	movs	r2, #0
 80133f4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d004      	beq.n	8013406 <tcp_slowtmr+0x4f6>
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f06f 010c 	mvn.w	r1, #12
 8013402:	68b8      	ldr	r0, [r7, #8]
 8013404:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013406:	4b2b      	ldr	r3, [pc, #172]	; (80134b4 <tcp_slowtmr+0x5a4>)
 8013408:	781b      	ldrb	r3, [r3, #0]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d037      	beq.n	801347e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801340e:	e590      	b.n	8012f32 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8013410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013412:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801341c:	7f1b      	ldrb	r3, [r3, #28]
 801341e:	3301      	adds	r3, #1
 8013420:	b2da      	uxtb	r2, r3
 8013422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013424:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013428:	7f1a      	ldrb	r2, [r3, #28]
 801342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342c:	7f5b      	ldrb	r3, [r3, #29]
 801342e:	429a      	cmp	r2, r3
 8013430:	d325      	bcc.n	801347e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8013432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013434:	2200      	movs	r2, #0
 8013436:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013438:	4b1e      	ldr	r3, [pc, #120]	; (80134b4 <tcp_slowtmr+0x5a4>)
 801343a:	2200      	movs	r2, #0
 801343c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013444:	2b00      	cmp	r3, #0
 8013446:	d00b      	beq.n	8013460 <tcp_slowtmr+0x550>
 8013448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801344e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013450:	6912      	ldr	r2, [r2, #16]
 8013452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013454:	4610      	mov	r0, r2
 8013456:	4798      	blx	r3
 8013458:	4603      	mov	r3, r0
 801345a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801345e:	e002      	b.n	8013466 <tcp_slowtmr+0x556>
 8013460:	2300      	movs	r3, #0
 8013462:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013466:	4b13      	ldr	r3, [pc, #76]	; (80134b4 <tcp_slowtmr+0x5a4>)
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d000      	beq.n	8013470 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801346e:	e560      	b.n	8012f32 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013470:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013474:	2b00      	cmp	r3, #0
 8013476:	d102      	bne.n	801347e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801347a:	f004 f901 	bl	8017680 <tcp_output>
  while (pcb != NULL) {
 801347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013480:	2b00      	cmp	r3, #0
 8013482:	f47f ad5c 	bne.w	8012f3e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013486:	2300      	movs	r3, #0
 8013488:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801348a:	4b0b      	ldr	r3, [pc, #44]	; (80134b8 <tcp_slowtmr+0x5a8>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013490:	e067      	b.n	8013562 <tcp_slowtmr+0x652>
 8013492:	bf00      	nop
 8013494:	2001b0cc 	.word	0x2001b0cc
 8013498:	10624dd3 	.word	0x10624dd3
 801349c:	000124f8 	.word	0x000124f8
 80134a0:	2001b0c8 	.word	0x2001b0c8
 80134a4:	080240bc 	.word	0x080240bc
 80134a8:	080244f4 	.word	0x080244f4
 80134ac:	08024100 	.word	0x08024100
 80134b0:	08024520 	.word	0x08024520
 80134b4:	2001b0c4 	.word	0x2001b0c4
 80134b8:	2001b0d8 	.word	0x2001b0d8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80134bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134be:	7d1b      	ldrb	r3, [r3, #20]
 80134c0:	2b0a      	cmp	r3, #10
 80134c2:	d006      	beq.n	80134d2 <tcp_slowtmr+0x5c2>
 80134c4:	4b2b      	ldr	r3, [pc, #172]	; (8013574 <tcp_slowtmr+0x664>)
 80134c6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80134ca:	492b      	ldr	r1, [pc, #172]	; (8013578 <tcp_slowtmr+0x668>)
 80134cc:	482b      	ldr	r0, [pc, #172]	; (801357c <tcp_slowtmr+0x66c>)
 80134ce:	f00b fad5 	bl	801ea7c <iprintf>
    pcb_remove = 0;
 80134d2:	2300      	movs	r3, #0
 80134d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80134d8:	4b29      	ldr	r3, [pc, #164]	; (8013580 <tcp_slowtmr+0x670>)
 80134da:	681a      	ldr	r2, [r3, #0]
 80134dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134de:	6a1b      	ldr	r3, [r3, #32]
 80134e0:	1ad3      	subs	r3, r2, r3
 80134e2:	2bf0      	cmp	r3, #240	; 0xf0
 80134e4:	d904      	bls.n	80134f0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80134e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134ea:	3301      	adds	r3, #1
 80134ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80134f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d02f      	beq.n	8013558 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80134f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80134fa:	f000 fbf9 	bl	8013cf0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80134fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013500:	2b00      	cmp	r3, #0
 8013502:	d010      	beq.n	8013526 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013504:	4b1f      	ldr	r3, [pc, #124]	; (8013584 <tcp_slowtmr+0x674>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801350a:	429a      	cmp	r2, r3
 801350c:	d106      	bne.n	801351c <tcp_slowtmr+0x60c>
 801350e:	4b19      	ldr	r3, [pc, #100]	; (8013574 <tcp_slowtmr+0x664>)
 8013510:	f240 52af 	movw	r2, #1455	; 0x5af
 8013514:	491c      	ldr	r1, [pc, #112]	; (8013588 <tcp_slowtmr+0x678>)
 8013516:	4819      	ldr	r0, [pc, #100]	; (801357c <tcp_slowtmr+0x66c>)
 8013518:	f00b fab0 	bl	801ea7c <iprintf>
        prev->next = pcb->next;
 801351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801351e:	68da      	ldr	r2, [r3, #12]
 8013520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013522:	60da      	str	r2, [r3, #12]
 8013524:	e00f      	b.n	8013546 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013526:	4b17      	ldr	r3, [pc, #92]	; (8013584 <tcp_slowtmr+0x674>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801352c:	429a      	cmp	r2, r3
 801352e:	d006      	beq.n	801353e <tcp_slowtmr+0x62e>
 8013530:	4b10      	ldr	r3, [pc, #64]	; (8013574 <tcp_slowtmr+0x664>)
 8013532:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013536:	4915      	ldr	r1, [pc, #84]	; (801358c <tcp_slowtmr+0x67c>)
 8013538:	4810      	ldr	r0, [pc, #64]	; (801357c <tcp_slowtmr+0x66c>)
 801353a:	f00b fa9f 	bl	801ea7c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	4a10      	ldr	r2, [pc, #64]	; (8013584 <tcp_slowtmr+0x674>)
 8013544:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013548:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801354c:	68db      	ldr	r3, [r3, #12]
 801354e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013550:	69f8      	ldr	r0, [r7, #28]
 8013552:	f7fe fe23 	bl	801219c <tcp_free>
 8013556:	e004      	b.n	8013562 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355e:	68db      	ldr	r3, [r3, #12]
 8013560:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013564:	2b00      	cmp	r3, #0
 8013566:	d1a9      	bne.n	80134bc <tcp_slowtmr+0x5ac>
    }
  }
}
 8013568:	bf00      	nop
 801356a:	bf00      	nop
 801356c:	3730      	adds	r7, #48	; 0x30
 801356e:	46bd      	mov	sp, r7
 8013570:	bdb0      	pop	{r4, r5, r7, pc}
 8013572:	bf00      	nop
 8013574:	080240bc 	.word	0x080240bc
 8013578:	0802454c 	.word	0x0802454c
 801357c:	08024100 	.word	0x08024100
 8013580:	2001b0cc 	.word	0x2001b0cc
 8013584:	2001b0d8 	.word	0x2001b0d8
 8013588:	0802457c 	.word	0x0802457c
 801358c:	080245a4 	.word	0x080245a4

08013590 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013596:	4b2d      	ldr	r3, [pc, #180]	; (801364c <tcp_fasttmr+0xbc>)
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	3301      	adds	r3, #1
 801359c:	b2da      	uxtb	r2, r3
 801359e:	4b2b      	ldr	r3, [pc, #172]	; (801364c <tcp_fasttmr+0xbc>)
 80135a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80135a2:	4b2b      	ldr	r3, [pc, #172]	; (8013650 <tcp_fasttmr+0xc0>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80135a8:	e048      	b.n	801363c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	7f9a      	ldrb	r2, [r3, #30]
 80135ae:	4b27      	ldr	r3, [pc, #156]	; (801364c <tcp_fasttmr+0xbc>)
 80135b0:	781b      	ldrb	r3, [r3, #0]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d03f      	beq.n	8013636 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80135b6:	4b25      	ldr	r3, [pc, #148]	; (801364c <tcp_fasttmr+0xbc>)
 80135b8:	781a      	ldrb	r2, [r3, #0]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	8b5b      	ldrh	r3, [r3, #26]
 80135c2:	f003 0301 	and.w	r3, r3, #1
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d010      	beq.n	80135ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	8b5b      	ldrh	r3, [r3, #26]
 80135ce:	f043 0302 	orr.w	r3, r3, #2
 80135d2:	b29a      	uxth	r2, r3
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f004 f851 	bl	8017680 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	8b5b      	ldrh	r3, [r3, #26]
 80135e2:	f023 0303 	bic.w	r3, r3, #3
 80135e6:	b29a      	uxth	r2, r3
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	8b5b      	ldrh	r3, [r3, #26]
 80135f0:	f003 0308 	and.w	r3, r3, #8
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d009      	beq.n	801360c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	8b5b      	ldrh	r3, [r3, #26]
 80135fc:	f023 0308 	bic.w	r3, r3, #8
 8013600:	b29a      	uxth	r2, r3
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f7fe ff5c 	bl	80124c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	68db      	ldr	r3, [r3, #12]
 8013610:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013616:	2b00      	cmp	r3, #0
 8013618:	d00a      	beq.n	8013630 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801361a:	4b0e      	ldr	r3, [pc, #56]	; (8013654 <tcp_fasttmr+0xc4>)
 801361c:	2200      	movs	r2, #0
 801361e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f000 f819 	bl	8013658 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013626:	4b0b      	ldr	r3, [pc, #44]	; (8013654 <tcp_fasttmr+0xc4>)
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d000      	beq.n	8013630 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801362e:	e7b8      	b.n	80135a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	607b      	str	r3, [r7, #4]
 8013634:	e002      	b.n	801363c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d1b3      	bne.n	80135aa <tcp_fasttmr+0x1a>
    }
  }
}
 8013642:	bf00      	nop
 8013644:	bf00      	nop
 8013646:	3708      	adds	r7, #8
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	2001435a 	.word	0x2001435a
 8013650:	2001b0c8 	.word	0x2001b0c8
 8013654:	2001b0c4 	.word	0x2001b0c4

08013658 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013658:	b590      	push	{r4, r7, lr}
 801365a:	b085      	sub	sp, #20
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d109      	bne.n	801367a <tcp_process_refused_data+0x22>
 8013666:	4b37      	ldr	r3, [pc, #220]	; (8013744 <tcp_process_refused_data+0xec>)
 8013668:	f240 6209 	movw	r2, #1545	; 0x609
 801366c:	4936      	ldr	r1, [pc, #216]	; (8013748 <tcp_process_refused_data+0xf0>)
 801366e:	4837      	ldr	r0, [pc, #220]	; (801374c <tcp_process_refused_data+0xf4>)
 8013670:	f00b fa04 	bl	801ea7c <iprintf>
 8013674:	f06f 030f 	mvn.w	r3, #15
 8013678:	e060      	b.n	801373c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801367e:	7b5b      	ldrb	r3, [r3, #13]
 8013680:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013686:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2200      	movs	r2, #0
 801368c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013694:	2b00      	cmp	r3, #0
 8013696:	d00b      	beq.n	80136b0 <tcp_process_refused_data+0x58>
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6918      	ldr	r0, [r3, #16]
 80136a2:	2300      	movs	r3, #0
 80136a4:	68ba      	ldr	r2, [r7, #8]
 80136a6:	6879      	ldr	r1, [r7, #4]
 80136a8:	47a0      	blx	r4
 80136aa:	4603      	mov	r3, r0
 80136ac:	73fb      	strb	r3, [r7, #15]
 80136ae:	e007      	b.n	80136c0 <tcp_process_refused_data+0x68>
 80136b0:	2300      	movs	r3, #0
 80136b2:	68ba      	ldr	r2, [r7, #8]
 80136b4:	6879      	ldr	r1, [r7, #4]
 80136b6:	2000      	movs	r0, #0
 80136b8:	f000 f8a4 	bl	8013804 <tcp_recv_null>
 80136bc:	4603      	mov	r3, r0
 80136be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80136c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d12a      	bne.n	801371e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80136c8:	7bbb      	ldrb	r3, [r7, #14]
 80136ca:	f003 0320 	and.w	r3, r3, #32
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d033      	beq.n	801373a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80136da:	d005      	beq.n	80136e8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136e0:	3301      	adds	r3, #1
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d00b      	beq.n	801370a <tcp_process_refused_data+0xb2>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	6918      	ldr	r0, [r3, #16]
 80136fc:	2300      	movs	r3, #0
 80136fe:	2200      	movs	r2, #0
 8013700:	6879      	ldr	r1, [r7, #4]
 8013702:	47a0      	blx	r4
 8013704:	4603      	mov	r3, r0
 8013706:	73fb      	strb	r3, [r7, #15]
 8013708:	e001      	b.n	801370e <tcp_process_refused_data+0xb6>
 801370a:	2300      	movs	r3, #0
 801370c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801370e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013712:	f113 0f0d 	cmn.w	r3, #13
 8013716:	d110      	bne.n	801373a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013718:	f06f 030c 	mvn.w	r3, #12
 801371c:	e00e      	b.n	801373c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013722:	f113 0f0d 	cmn.w	r3, #13
 8013726:	d102      	bne.n	801372e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013728:	f06f 030c 	mvn.w	r3, #12
 801372c:	e006      	b.n	801373c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8013734:	f06f 0304 	mvn.w	r3, #4
 8013738:	e000      	b.n	801373c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801373a:	2300      	movs	r3, #0
}
 801373c:	4618      	mov	r0, r3
 801373e:	3714      	adds	r7, #20
 8013740:	46bd      	mov	sp, r7
 8013742:	bd90      	pop	{r4, r7, pc}
 8013744:	080240bc 	.word	0x080240bc
 8013748:	080245cc 	.word	0x080245cc
 801374c:	08024100 	.word	0x08024100

08013750 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013758:	e007      	b.n	801376a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f000 f80a 	bl	801377a <tcp_seg_free>
    seg = next;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d1f4      	bne.n	801375a <tcp_segs_free+0xa>
  }
}
 8013770:	bf00      	nop
 8013772:	bf00      	nop
 8013774:	3710      	adds	r7, #16
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}

0801377a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801377a:	b580      	push	{r7, lr}
 801377c:	b082      	sub	sp, #8
 801377e:	af00      	add	r7, sp, #0
 8013780:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d00c      	beq.n	80137a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	685b      	ldr	r3, [r3, #4]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d004      	beq.n	801379a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	4618      	mov	r0, r3
 8013796:	f7fe f8c9 	bl	801192c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801379a:	6879      	ldr	r1, [r7, #4]
 801379c:	2003      	movs	r0, #3
 801379e:	f7fd f9e3 	bl	8010b68 <memp_free>
  }
}
 80137a2:	bf00      	nop
 80137a4:	3708      	adds	r7, #8
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}
	...

080137ac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b084      	sub	sp, #16
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d106      	bne.n	80137c8 <tcp_seg_copy+0x1c>
 80137ba:	4b0f      	ldr	r3, [pc, #60]	; (80137f8 <tcp_seg_copy+0x4c>)
 80137bc:	f240 6282 	movw	r2, #1666	; 0x682
 80137c0:	490e      	ldr	r1, [pc, #56]	; (80137fc <tcp_seg_copy+0x50>)
 80137c2:	480f      	ldr	r0, [pc, #60]	; (8013800 <tcp_seg_copy+0x54>)
 80137c4:	f00b f95a 	bl	801ea7c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80137c8:	2003      	movs	r0, #3
 80137ca:	f7fd f97b 	bl	8010ac4 <memp_malloc>
 80137ce:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d101      	bne.n	80137da <tcp_seg_copy+0x2e>
    return NULL;
 80137d6:	2300      	movs	r3, #0
 80137d8:	e00a      	b.n	80137f0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80137da:	2214      	movs	r2, #20
 80137dc:	6879      	ldr	r1, [r7, #4]
 80137de:	68f8      	ldr	r0, [r7, #12]
 80137e0:	f00a fc08 	bl	801dff4 <memcpy>
  pbuf_ref(cseg->p);
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7fe f945 	bl	8011a78 <pbuf_ref>
  return cseg;
 80137ee:	68fb      	ldr	r3, [r7, #12]
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3710      	adds	r7, #16
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	080240bc 	.word	0x080240bc
 80137fc:	08024610 	.word	0x08024610
 8013800:	08024100 	.word	0x08024100

08013804 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	607a      	str	r2, [r7, #4]
 8013810:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d109      	bne.n	801382c <tcp_recv_null+0x28>
 8013818:	4b12      	ldr	r3, [pc, #72]	; (8013864 <tcp_recv_null+0x60>)
 801381a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801381e:	4912      	ldr	r1, [pc, #72]	; (8013868 <tcp_recv_null+0x64>)
 8013820:	4812      	ldr	r0, [pc, #72]	; (801386c <tcp_recv_null+0x68>)
 8013822:	f00b f92b 	bl	801ea7c <iprintf>
 8013826:	f06f 030f 	mvn.w	r3, #15
 801382a:	e016      	b.n	801385a <tcp_recv_null+0x56>

  if (p != NULL) {
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d009      	beq.n	8013846 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	891b      	ldrh	r3, [r3, #8]
 8013836:	4619      	mov	r1, r3
 8013838:	68b8      	ldr	r0, [r7, #8]
 801383a:	f7ff f9bb 	bl	8012bb4 <tcp_recved>
    pbuf_free(p);
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f7fe f874 	bl	801192c <pbuf_free>
 8013844:	e008      	b.n	8013858 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d104      	bne.n	8013858 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801384e:	68b8      	ldr	r0, [r7, #8]
 8013850:	f7fe fea2 	bl	8012598 <tcp_close>
 8013854:	4603      	mov	r3, r0
 8013856:	e000      	b.n	801385a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013858:	2300      	movs	r3, #0
}
 801385a:	4618      	mov	r0, r3
 801385c:	3710      	adds	r7, #16
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	080240bc 	.word	0x080240bc
 8013868:	0802462c 	.word	0x0802462c
 801386c:	08024100 	.word	0x08024100

08013870 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b086      	sub	sp, #24
 8013874:	af00      	add	r7, sp, #0
 8013876:	4603      	mov	r3, r0
 8013878:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801387e:	2b00      	cmp	r3, #0
 8013880:	db01      	blt.n	8013886 <tcp_kill_prio+0x16>
 8013882:	79fb      	ldrb	r3, [r7, #7]
 8013884:	e000      	b.n	8013888 <tcp_kill_prio+0x18>
 8013886:	237f      	movs	r3, #127	; 0x7f
 8013888:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801388a:	7afb      	ldrb	r3, [r7, #11]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d034      	beq.n	80138fa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013890:	7afb      	ldrb	r3, [r7, #11]
 8013892:	3b01      	subs	r3, #1
 8013894:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013896:	2300      	movs	r3, #0
 8013898:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801389a:	2300      	movs	r3, #0
 801389c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801389e:	4b19      	ldr	r3, [pc, #100]	; (8013904 <tcp_kill_prio+0x94>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	617b      	str	r3, [r7, #20]
 80138a4:	e01f      	b.n	80138e6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	7d5b      	ldrb	r3, [r3, #21]
 80138aa:	7afa      	ldrb	r2, [r7, #11]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d80c      	bhi.n	80138ca <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80138b4:	7afa      	ldrb	r2, [r7, #11]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d112      	bne.n	80138e0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80138ba:	4b13      	ldr	r3, [pc, #76]	; (8013908 <tcp_kill_prio+0x98>)
 80138bc:	681a      	ldr	r2, [r3, #0]
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	6a1b      	ldr	r3, [r3, #32]
 80138c2:	1ad3      	subs	r3, r2, r3
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d80a      	bhi.n	80138e0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80138ca:	4b0f      	ldr	r3, [pc, #60]	; (8013908 <tcp_kill_prio+0x98>)
 80138cc:	681a      	ldr	r2, [r3, #0]
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	6a1b      	ldr	r3, [r3, #32]
 80138d2:	1ad3      	subs	r3, r2, r3
 80138d4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80138da:	697b      	ldr	r3, [r7, #20]
 80138dc:	7d5b      	ldrb	r3, [r3, #21]
 80138de:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	68db      	ldr	r3, [r3, #12]
 80138e4:	617b      	str	r3, [r7, #20]
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d1dc      	bne.n	80138a6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d004      	beq.n	80138fc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80138f2:	6938      	ldr	r0, [r7, #16]
 80138f4:	f7fe ff96 	bl	8012824 <tcp_abort>
 80138f8:	e000      	b.n	80138fc <tcp_kill_prio+0x8c>
    return;
 80138fa:	bf00      	nop
  }
}
 80138fc:	3718      	adds	r7, #24
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	2001b0c8 	.word	0x2001b0c8
 8013908:	2001b0cc 	.word	0x2001b0cc

0801390c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b086      	sub	sp, #24
 8013910:	af00      	add	r7, sp, #0
 8013912:	4603      	mov	r3, r0
 8013914:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013916:	79fb      	ldrb	r3, [r7, #7]
 8013918:	2b08      	cmp	r3, #8
 801391a:	d009      	beq.n	8013930 <tcp_kill_state+0x24>
 801391c:	79fb      	ldrb	r3, [r7, #7]
 801391e:	2b09      	cmp	r3, #9
 8013920:	d006      	beq.n	8013930 <tcp_kill_state+0x24>
 8013922:	4b1a      	ldr	r3, [pc, #104]	; (801398c <tcp_kill_state+0x80>)
 8013924:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8013928:	4919      	ldr	r1, [pc, #100]	; (8013990 <tcp_kill_state+0x84>)
 801392a:	481a      	ldr	r0, [pc, #104]	; (8013994 <tcp_kill_state+0x88>)
 801392c:	f00b f8a6 	bl	801ea7c <iprintf>

  inactivity = 0;
 8013930:	2300      	movs	r3, #0
 8013932:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013934:	2300      	movs	r3, #0
 8013936:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013938:	4b17      	ldr	r3, [pc, #92]	; (8013998 <tcp_kill_state+0x8c>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	617b      	str	r3, [r7, #20]
 801393e:	e017      	b.n	8013970 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	7d1b      	ldrb	r3, [r3, #20]
 8013944:	79fa      	ldrb	r2, [r7, #7]
 8013946:	429a      	cmp	r2, r3
 8013948:	d10f      	bne.n	801396a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801394a:	4b14      	ldr	r3, [pc, #80]	; (801399c <tcp_kill_state+0x90>)
 801394c:	681a      	ldr	r2, [r3, #0]
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	6a1b      	ldr	r3, [r3, #32]
 8013952:	1ad3      	subs	r3, r2, r3
 8013954:	68fa      	ldr	r2, [r7, #12]
 8013956:	429a      	cmp	r2, r3
 8013958:	d807      	bhi.n	801396a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801395a:	4b10      	ldr	r3, [pc, #64]	; (801399c <tcp_kill_state+0x90>)
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	6a1b      	ldr	r3, [r3, #32]
 8013962:	1ad3      	subs	r3, r2, r3
 8013964:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	68db      	ldr	r3, [r3, #12]
 801396e:	617b      	str	r3, [r7, #20]
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d1e4      	bne.n	8013940 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d003      	beq.n	8013984 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801397c:	2100      	movs	r1, #0
 801397e:	6938      	ldr	r0, [r7, #16]
 8013980:	f7fe fe92 	bl	80126a8 <tcp_abandon>
  }
}
 8013984:	bf00      	nop
 8013986:	3718      	adds	r7, #24
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	080240bc 	.word	0x080240bc
 8013990:	08024648 	.word	0x08024648
 8013994:	08024100 	.word	0x08024100
 8013998:	2001b0c8 	.word	0x2001b0c8
 801399c:	2001b0cc 	.word	0x2001b0cc

080139a0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b084      	sub	sp, #16
 80139a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80139a6:	2300      	movs	r3, #0
 80139a8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80139aa:	2300      	movs	r3, #0
 80139ac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80139ae:	4b12      	ldr	r3, [pc, #72]	; (80139f8 <tcp_kill_timewait+0x58>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	60fb      	str	r3, [r7, #12]
 80139b4:	e012      	b.n	80139dc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80139b6:	4b11      	ldr	r3, [pc, #68]	; (80139fc <tcp_kill_timewait+0x5c>)
 80139b8:	681a      	ldr	r2, [r3, #0]
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	6a1b      	ldr	r3, [r3, #32]
 80139be:	1ad3      	subs	r3, r2, r3
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	429a      	cmp	r2, r3
 80139c4:	d807      	bhi.n	80139d6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80139c6:	4b0d      	ldr	r3, [pc, #52]	; (80139fc <tcp_kill_timewait+0x5c>)
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	6a1b      	ldr	r3, [r3, #32]
 80139ce:	1ad3      	subs	r3, r2, r3
 80139d0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	68db      	ldr	r3, [r3, #12]
 80139da:	60fb      	str	r3, [r7, #12]
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d1e9      	bne.n	80139b6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d002      	beq.n	80139ee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80139e8:	68b8      	ldr	r0, [r7, #8]
 80139ea:	f7fe ff1b 	bl	8012824 <tcp_abort>
  }
}
 80139ee:	bf00      	nop
 80139f0:	3710      	adds	r7, #16
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	2001b0d8 	.word	0x2001b0d8
 80139fc:	2001b0cc 	.word	0x2001b0cc

08013a00 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b082      	sub	sp, #8
 8013a04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013a06:	4b10      	ldr	r3, [pc, #64]	; (8013a48 <tcp_handle_closepend+0x48>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013a0c:	e014      	b.n	8013a38 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	68db      	ldr	r3, [r3, #12]
 8013a12:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	8b5b      	ldrh	r3, [r3, #26]
 8013a18:	f003 0308 	and.w	r3, r3, #8
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d009      	beq.n	8013a34 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	8b5b      	ldrh	r3, [r3, #26]
 8013a24:	f023 0308 	bic.w	r3, r3, #8
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f7fe fd48 	bl	80124c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d1e7      	bne.n	8013a0e <tcp_handle_closepend+0xe>
  }
}
 8013a3e:	bf00      	nop
 8013a40:	bf00      	nop
 8013a42:	3708      	adds	r7, #8
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}
 8013a48:	2001b0c8 	.word	0x2001b0c8

08013a4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b084      	sub	sp, #16
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	4603      	mov	r3, r0
 8013a54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a56:	2001      	movs	r0, #1
 8013a58:	f7fd f834 	bl	8010ac4 <memp_malloc>
 8013a5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d126      	bne.n	8013ab2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013a64:	f7ff ffcc 	bl	8013a00 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013a68:	f7ff ff9a 	bl	80139a0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a6c:	2001      	movs	r0, #1
 8013a6e:	f7fd f829 	bl	8010ac4 <memp_malloc>
 8013a72:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d11b      	bne.n	8013ab2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013a7a:	2009      	movs	r0, #9
 8013a7c:	f7ff ff46 	bl	801390c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a80:	2001      	movs	r0, #1
 8013a82:	f7fd f81f 	bl	8010ac4 <memp_malloc>
 8013a86:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d111      	bne.n	8013ab2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013a8e:	2008      	movs	r0, #8
 8013a90:	f7ff ff3c 	bl	801390c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a94:	2001      	movs	r0, #1
 8013a96:	f7fd f815 	bl	8010ac4 <memp_malloc>
 8013a9a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d107      	bne.n	8013ab2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013aa2:	79fb      	ldrb	r3, [r7, #7]
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7ff fee3 	bl	8013870 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013aaa:	2001      	movs	r0, #1
 8013aac:	f7fd f80a 	bl	8010ac4 <memp_malloc>
 8013ab0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d03f      	beq.n	8013b38 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013ab8:	229c      	movs	r2, #156	; 0x9c
 8013aba:	2100      	movs	r1, #0
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f00a fac1 	bl	801e044 <memset>
    pcb->prio = prio;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	79fa      	ldrb	r2, [r7, #7]
 8013ac6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013ace:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	22ff      	movs	r2, #255	; 0xff
 8013ae6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013aee:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	2206      	movs	r2, #6
 8013af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2206      	movs	r2, #6
 8013afc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b04:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	2201      	movs	r2, #1
 8013b0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013b0e:	4b0d      	ldr	r3, [pc, #52]	; (8013b44 <tcp_alloc+0xf8>)
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013b16:	4b0c      	ldr	r3, [pc, #48]	; (8013b48 <tcp_alloc+0xfc>)
 8013b18:	781a      	ldrb	r2, [r3, #0]
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013b24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	4a08      	ldr	r2, [pc, #32]	; (8013b4c <tcp_alloc+0x100>)
 8013b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	4a07      	ldr	r2, [pc, #28]	; (8013b50 <tcp_alloc+0x104>)
 8013b34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013b38:	68fb      	ldr	r3, [r7, #12]
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3710      	adds	r7, #16
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}
 8013b42:	bf00      	nop
 8013b44:	2001b0cc 	.word	0x2001b0cc
 8013b48:	2001435a 	.word	0x2001435a
 8013b4c:	08013805 	.word	0x08013805
 8013b50:	006ddd00 	.word	0x006ddd00

08013b54 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b084      	sub	sp, #16
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013b5e:	2040      	movs	r0, #64	; 0x40
 8013b60:	f7ff ff74 	bl	8013a4c <tcp_alloc>
 8013b64:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013b66:	68fb      	ldr	r3, [r7, #12]
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3710      	adds	r7, #16
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}

08013b70 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013b70:	b480      	push	{r7}
 8013b72:	b083      	sub	sp, #12
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d002      	beq.n	8013b86 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	683a      	ldr	r2, [r7, #0]
 8013b84:	611a      	str	r2, [r3, #16]
  }
}
 8013b86:	bf00      	nop
 8013b88:	370c      	adds	r7, #12
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr
	...

08013b94 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d00e      	beq.n	8013bc2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	7d1b      	ldrb	r3, [r3, #20]
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d106      	bne.n	8013bba <tcp_recv+0x26>
 8013bac:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <tcp_recv+0x38>)
 8013bae:	f240 72df 	movw	r2, #2015	; 0x7df
 8013bb2:	4907      	ldr	r1, [pc, #28]	; (8013bd0 <tcp_recv+0x3c>)
 8013bb4:	4807      	ldr	r0, [pc, #28]	; (8013bd4 <tcp_recv+0x40>)
 8013bb6:	f00a ff61 	bl	801ea7c <iprintf>
    pcb->recv = recv;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	683a      	ldr	r2, [r7, #0]
 8013bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013bc2:	bf00      	nop
 8013bc4:	3708      	adds	r7, #8
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	080240bc 	.word	0x080240bc
 8013bd0:	08024658 	.word	0x08024658
 8013bd4:	08024100 	.word	0x08024100

08013bd8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d00e      	beq.n	8013c06 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	7d1b      	ldrb	r3, [r3, #20]
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d106      	bne.n	8013bfe <tcp_sent+0x26>
 8013bf0:	4b07      	ldr	r3, [pc, #28]	; (8013c10 <tcp_sent+0x38>)
 8013bf2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013bf6:	4907      	ldr	r1, [pc, #28]	; (8013c14 <tcp_sent+0x3c>)
 8013bf8:	4807      	ldr	r0, [pc, #28]	; (8013c18 <tcp_sent+0x40>)
 8013bfa:	f00a ff3f 	bl	801ea7c <iprintf>
    pcb->sent = sent;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	683a      	ldr	r2, [r7, #0]
 8013c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013c06:	bf00      	nop
 8013c08:	3708      	adds	r7, #8
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	080240bc 	.word	0x080240bc
 8013c14:	08024680 	.word	0x08024680
 8013c18:	08024100 	.word	0x08024100

08013c1c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d00e      	beq.n	8013c4a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	7d1b      	ldrb	r3, [r3, #20]
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d106      	bne.n	8013c42 <tcp_err+0x26>
 8013c34:	4b07      	ldr	r3, [pc, #28]	; (8013c54 <tcp_err+0x38>)
 8013c36:	f640 020d 	movw	r2, #2061	; 0x80d
 8013c3a:	4907      	ldr	r1, [pc, #28]	; (8013c58 <tcp_err+0x3c>)
 8013c3c:	4807      	ldr	r0, [pc, #28]	; (8013c5c <tcp_err+0x40>)
 8013c3e:	f00a ff1d 	bl	801ea7c <iprintf>
    pcb->errf = err;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	683a      	ldr	r2, [r7, #0]
 8013c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013c4a:	bf00      	nop
 8013c4c:	3708      	adds	r7, #8
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
 8013c52:	bf00      	nop
 8013c54:	080240bc 	.word	0x080240bc
 8013c58:	080246a8 	.word	0x080246a8
 8013c5c:	08024100 	.word	0x08024100

08013c60 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b085      	sub	sp, #20
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d008      	beq.n	8013c82 <tcp_accept+0x22>
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	7d1b      	ldrb	r3, [r3, #20]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d104      	bne.n	8013c82 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	683a      	ldr	r2, [r7, #0]
 8013c80:	619a      	str	r2, [r3, #24]
  }
}
 8013c82:	bf00      	nop
 8013c84:	3714      	adds	r7, #20
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr
	...

08013c90 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	60f8      	str	r0, [r7, #12]
 8013c98:	60b9      	str	r1, [r7, #8]
 8013c9a:	4613      	mov	r3, r2
 8013c9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d107      	bne.n	8013cb4 <tcp_poll+0x24>
 8013ca4:	4b0e      	ldr	r3, [pc, #56]	; (8013ce0 <tcp_poll+0x50>)
 8013ca6:	f640 023d 	movw	r2, #2109	; 0x83d
 8013caa:	490e      	ldr	r1, [pc, #56]	; (8013ce4 <tcp_poll+0x54>)
 8013cac:	480e      	ldr	r0, [pc, #56]	; (8013ce8 <tcp_poll+0x58>)
 8013cae:	f00a fee5 	bl	801ea7c <iprintf>
 8013cb2:	e011      	b.n	8013cd8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	7d1b      	ldrb	r3, [r3, #20]
 8013cb8:	2b01      	cmp	r3, #1
 8013cba:	d106      	bne.n	8013cca <tcp_poll+0x3a>
 8013cbc:	4b08      	ldr	r3, [pc, #32]	; (8013ce0 <tcp_poll+0x50>)
 8013cbe:	f640 023e 	movw	r2, #2110	; 0x83e
 8013cc2:	490a      	ldr	r1, [pc, #40]	; (8013cec <tcp_poll+0x5c>)
 8013cc4:	4808      	ldr	r0, [pc, #32]	; (8013ce8 <tcp_poll+0x58>)
 8013cc6:	f00a fed9 	bl	801ea7c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	68ba      	ldr	r2, [r7, #8]
 8013cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	79fa      	ldrb	r2, [r7, #7]
 8013cd6:	775a      	strb	r2, [r3, #29]
}
 8013cd8:	3710      	adds	r7, #16
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	080240bc 	.word	0x080240bc
 8013ce4:	080246d0 	.word	0x080246d0
 8013ce8:	08024100 	.word	0x08024100
 8013cec:	080246e8 	.word	0x080246e8

08013cf0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d107      	bne.n	8013d0e <tcp_pcb_purge+0x1e>
 8013cfe:	4b21      	ldr	r3, [pc, #132]	; (8013d84 <tcp_pcb_purge+0x94>)
 8013d00:	f640 0251 	movw	r2, #2129	; 0x851
 8013d04:	4920      	ldr	r1, [pc, #128]	; (8013d88 <tcp_pcb_purge+0x98>)
 8013d06:	4821      	ldr	r0, [pc, #132]	; (8013d8c <tcp_pcb_purge+0x9c>)
 8013d08:	f00a feb8 	bl	801ea7c <iprintf>
 8013d0c:	e037      	b.n	8013d7e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	7d1b      	ldrb	r3, [r3, #20]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d033      	beq.n	8013d7e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013d1a:	2b0a      	cmp	r3, #10
 8013d1c:	d02f      	beq.n	8013d7e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013d22:	2b01      	cmp	r3, #1
 8013d24:	d02b      	beq.n	8013d7e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d007      	beq.n	8013d3e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7fd fdfa 	bl	801192c <pbuf_free>
      pcb->refused_data = NULL;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d002      	beq.n	8013d4c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f000 f986 	bl	8014058 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d52:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7ff fcf9 	bl	8013750 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7ff fcf4 	bl	8013750 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013d7e:	3708      	adds	r7, #8
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	080240bc 	.word	0x080240bc
 8013d88:	08024708 	.word	0x08024708
 8013d8c:	08024100 	.word	0x08024100

08013d90 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b084      	sub	sp, #16
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d106      	bne.n	8013dae <tcp_pcb_remove+0x1e>
 8013da0:	4b3e      	ldr	r3, [pc, #248]	; (8013e9c <tcp_pcb_remove+0x10c>)
 8013da2:	f640 0283 	movw	r2, #2179	; 0x883
 8013da6:	493e      	ldr	r1, [pc, #248]	; (8013ea0 <tcp_pcb_remove+0x110>)
 8013da8:	483e      	ldr	r0, [pc, #248]	; (8013ea4 <tcp_pcb_remove+0x114>)
 8013daa:	f00a fe67 	bl	801ea7c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d106      	bne.n	8013dc2 <tcp_pcb_remove+0x32>
 8013db4:	4b39      	ldr	r3, [pc, #228]	; (8013e9c <tcp_pcb_remove+0x10c>)
 8013db6:	f640 0284 	movw	r2, #2180	; 0x884
 8013dba:	493b      	ldr	r1, [pc, #236]	; (8013ea8 <tcp_pcb_remove+0x118>)
 8013dbc:	4839      	ldr	r0, [pc, #228]	; (8013ea4 <tcp_pcb_remove+0x114>)
 8013dbe:	f00a fe5d 	bl	801ea7c <iprintf>

  TCP_RMV(pcblist, pcb);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	683a      	ldr	r2, [r7, #0]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d105      	bne.n	8013dd8 <tcp_pcb_remove+0x48>
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	68da      	ldr	r2, [r3, #12]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	601a      	str	r2, [r3, #0]
 8013dd6:	e013      	b.n	8013e00 <tcp_pcb_remove+0x70>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	60fb      	str	r3, [r7, #12]
 8013dde:	e00c      	b.n	8013dfa <tcp_pcb_remove+0x6a>
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	683a      	ldr	r2, [r7, #0]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d104      	bne.n	8013df4 <tcp_pcb_remove+0x64>
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	68da      	ldr	r2, [r3, #12]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	60da      	str	r2, [r3, #12]
 8013df2:	e005      	b.n	8013e00 <tcp_pcb_remove+0x70>
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	60fb      	str	r3, [r7, #12]
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d1ef      	bne.n	8013de0 <tcp_pcb_remove+0x50>
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	2200      	movs	r2, #0
 8013e04:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013e06:	6838      	ldr	r0, [r7, #0]
 8013e08:	f7ff ff72 	bl	8013cf0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	7d1b      	ldrb	r3, [r3, #20]
 8013e10:	2b0a      	cmp	r3, #10
 8013e12:	d013      	beq.n	8013e3c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d00f      	beq.n	8013e3c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	8b5b      	ldrh	r3, [r3, #26]
 8013e20:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d009      	beq.n	8013e3c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	8b5b      	ldrh	r3, [r3, #26]
 8013e2c:	f043 0302 	orr.w	r3, r3, #2
 8013e30:	b29a      	uxth	r2, r3
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013e36:	6838      	ldr	r0, [r7, #0]
 8013e38:	f003 fc22 	bl	8017680 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	7d1b      	ldrb	r3, [r3, #20]
 8013e40:	2b01      	cmp	r3, #1
 8013e42:	d020      	beq.n	8013e86 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d006      	beq.n	8013e5a <tcp_pcb_remove+0xca>
 8013e4c:	4b13      	ldr	r3, [pc, #76]	; (8013e9c <tcp_pcb_remove+0x10c>)
 8013e4e:	f640 0293 	movw	r2, #2195	; 0x893
 8013e52:	4916      	ldr	r1, [pc, #88]	; (8013eac <tcp_pcb_remove+0x11c>)
 8013e54:	4813      	ldr	r0, [pc, #76]	; (8013ea4 <tcp_pcb_remove+0x114>)
 8013e56:	f00a fe11 	bl	801ea7c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d006      	beq.n	8013e70 <tcp_pcb_remove+0xe0>
 8013e62:	4b0e      	ldr	r3, [pc, #56]	; (8013e9c <tcp_pcb_remove+0x10c>)
 8013e64:	f640 0294 	movw	r2, #2196	; 0x894
 8013e68:	4911      	ldr	r1, [pc, #68]	; (8013eb0 <tcp_pcb_remove+0x120>)
 8013e6a:	480e      	ldr	r0, [pc, #56]	; (8013ea4 <tcp_pcb_remove+0x114>)
 8013e6c:	f00a fe06 	bl	801ea7c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d006      	beq.n	8013e86 <tcp_pcb_remove+0xf6>
 8013e78:	4b08      	ldr	r3, [pc, #32]	; (8013e9c <tcp_pcb_remove+0x10c>)
 8013e7a:	f640 0296 	movw	r2, #2198	; 0x896
 8013e7e:	490d      	ldr	r1, [pc, #52]	; (8013eb4 <tcp_pcb_remove+0x124>)
 8013e80:	4808      	ldr	r0, [pc, #32]	; (8013ea4 <tcp_pcb_remove+0x114>)
 8013e82:	f00a fdfb 	bl	801ea7c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013e92:	bf00      	nop
 8013e94:	3710      	adds	r7, #16
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	080240bc 	.word	0x080240bc
 8013ea0:	08024724 	.word	0x08024724
 8013ea4:	08024100 	.word	0x08024100
 8013ea8:	08024740 	.word	0x08024740
 8013eac:	08024760 	.word	0x08024760
 8013eb0:	08024778 	.word	0x08024778
 8013eb4:	08024794 	.word	0x08024794

08013eb8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d106      	bne.n	8013ed4 <tcp_next_iss+0x1c>
 8013ec6:	4b0a      	ldr	r3, [pc, #40]	; (8013ef0 <tcp_next_iss+0x38>)
 8013ec8:	f640 02af 	movw	r2, #2223	; 0x8af
 8013ecc:	4909      	ldr	r1, [pc, #36]	; (8013ef4 <tcp_next_iss+0x3c>)
 8013ece:	480a      	ldr	r0, [pc, #40]	; (8013ef8 <tcp_next_iss+0x40>)
 8013ed0:	f00a fdd4 	bl	801ea7c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013ed4:	4b09      	ldr	r3, [pc, #36]	; (8013efc <tcp_next_iss+0x44>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	4b09      	ldr	r3, [pc, #36]	; (8013f00 <tcp_next_iss+0x48>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	4413      	add	r3, r2
 8013ede:	4a07      	ldr	r2, [pc, #28]	; (8013efc <tcp_next_iss+0x44>)
 8013ee0:	6013      	str	r3, [r2, #0]
  return iss;
 8013ee2:	4b06      	ldr	r3, [pc, #24]	; (8013efc <tcp_next_iss+0x44>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3708      	adds	r7, #8
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	080240bc 	.word	0x080240bc
 8013ef4:	080247ac 	.word	0x080247ac
 8013ef8:	08024100 	.word	0x08024100
 8013efc:	20000058 	.word	0x20000058
 8013f00:	2001b0cc 	.word	0x2001b0cc

08013f04 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b086      	sub	sp, #24
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	60b9      	str	r1, [r7, #8]
 8013f0e:	607a      	str	r2, [r7, #4]
 8013f10:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d106      	bne.n	8013f26 <tcp_eff_send_mss_netif+0x22>
 8013f18:	4b14      	ldr	r3, [pc, #80]	; (8013f6c <tcp_eff_send_mss_netif+0x68>)
 8013f1a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013f1e:	4914      	ldr	r1, [pc, #80]	; (8013f70 <tcp_eff_send_mss_netif+0x6c>)
 8013f20:	4814      	ldr	r0, [pc, #80]	; (8013f74 <tcp_eff_send_mss_netif+0x70>)
 8013f22:	f00a fdab 	bl	801ea7c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d101      	bne.n	8013f30 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013f2c:	89fb      	ldrh	r3, [r7, #14]
 8013f2e:	e019      	b.n	8013f64 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013f34:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013f36:	8afb      	ldrh	r3, [r7, #22]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d012      	beq.n	8013f62 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013f3c:	2328      	movs	r3, #40	; 0x28
 8013f3e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013f40:	8afa      	ldrh	r2, [r7, #22]
 8013f42:	8abb      	ldrh	r3, [r7, #20]
 8013f44:	429a      	cmp	r2, r3
 8013f46:	d904      	bls.n	8013f52 <tcp_eff_send_mss_netif+0x4e>
 8013f48:	8afa      	ldrh	r2, [r7, #22]
 8013f4a:	8abb      	ldrh	r3, [r7, #20]
 8013f4c:	1ad3      	subs	r3, r2, r3
 8013f4e:	b29b      	uxth	r3, r3
 8013f50:	e000      	b.n	8013f54 <tcp_eff_send_mss_netif+0x50>
 8013f52:	2300      	movs	r3, #0
 8013f54:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013f56:	8a7a      	ldrh	r2, [r7, #18]
 8013f58:	89fb      	ldrh	r3, [r7, #14]
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	bf28      	it	cs
 8013f5e:	4613      	movcs	r3, r2
 8013f60:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013f62:	89fb      	ldrh	r3, [r7, #14]
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3718      	adds	r7, #24
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	080240bc 	.word	0x080240bc
 8013f70:	080247c8 	.word	0x080247c8
 8013f74:	08024100 	.word	0x08024100

08013f78 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d119      	bne.n	8013fc0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013f8c:	4b10      	ldr	r3, [pc, #64]	; (8013fd0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013f8e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013f92:	4910      	ldr	r1, [pc, #64]	; (8013fd4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013f94:	4810      	ldr	r0, [pc, #64]	; (8013fd8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013f96:	f00a fd71 	bl	801ea7c <iprintf>

  while (pcb != NULL) {
 8013f9a:	e011      	b.n	8013fc0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d108      	bne.n	8013fba <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013fae:	68f8      	ldr	r0, [r7, #12]
 8013fb0:	f7fe fc38 	bl	8012824 <tcp_abort>
      pcb = next;
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	60fb      	str	r3, [r7, #12]
 8013fb8:	e002      	b.n	8013fc0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	68db      	ldr	r3, [r3, #12]
 8013fbe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d1ea      	bne.n	8013f9c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013fc6:	bf00      	nop
 8013fc8:	bf00      	nop
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}
 8013fd0:	080240bc 	.word	0x080240bc
 8013fd4:	080247f0 	.word	0x080247f0
 8013fd8:	08024100 	.word	0x08024100

08013fdc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b084      	sub	sp, #16
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d02a      	beq.n	8014042 <tcp_netif_ip_addr_changed+0x66>
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d026      	beq.n	8014042 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013ff4:	4b15      	ldr	r3, [pc, #84]	; (801404c <tcp_netif_ip_addr_changed+0x70>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f7ff ffbc 	bl	8013f78 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014000:	4b13      	ldr	r3, [pc, #76]	; (8014050 <tcp_netif_ip_addr_changed+0x74>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	4619      	mov	r1, r3
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f7ff ffb6 	bl	8013f78 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d017      	beq.n	8014042 <tcp_netif_ip_addr_changed+0x66>
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d013      	beq.n	8014042 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801401a:	4b0e      	ldr	r3, [pc, #56]	; (8014054 <tcp_netif_ip_addr_changed+0x78>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	60fb      	str	r3, [r7, #12]
 8014020:	e00c      	b.n	801403c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	681a      	ldr	r2, [r3, #0]
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	429a      	cmp	r2, r3
 801402c:	d103      	bne.n	8014036 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	681a      	ldr	r2, [r3, #0]
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	68db      	ldr	r3, [r3, #12]
 801403a:	60fb      	str	r3, [r7, #12]
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d1ef      	bne.n	8014022 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014042:	bf00      	nop
 8014044:	3710      	adds	r7, #16
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	2001b0c8 	.word	0x2001b0c8
 8014050:	2001b0d4 	.word	0x2001b0d4
 8014054:	2001b0d0 	.word	0x2001b0d0

08014058 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b082      	sub	sp, #8
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014064:	2b00      	cmp	r3, #0
 8014066:	d007      	beq.n	8014078 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801406c:	4618      	mov	r0, r3
 801406e:	f7ff fb6f 	bl	8013750 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2200      	movs	r2, #0
 8014076:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014078:	bf00      	nop
 801407a:	3708      	adds	r7, #8
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014080:	b590      	push	{r4, r7, lr}
 8014082:	b08d      	sub	sp, #52	; 0x34
 8014084:	af04      	add	r7, sp, #16
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d105      	bne.n	801409c <tcp_input+0x1c>
 8014090:	4b9b      	ldr	r3, [pc, #620]	; (8014300 <tcp_input+0x280>)
 8014092:	2283      	movs	r2, #131	; 0x83
 8014094:	499b      	ldr	r1, [pc, #620]	; (8014304 <tcp_input+0x284>)
 8014096:	489c      	ldr	r0, [pc, #624]	; (8014308 <tcp_input+0x288>)
 8014098:	f00a fcf0 	bl	801ea7c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	4a9a      	ldr	r2, [pc, #616]	; (801430c <tcp_input+0x28c>)
 80140a2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	895b      	ldrh	r3, [r3, #10]
 80140a8:	2b13      	cmp	r3, #19
 80140aa:	f240 83c4 	bls.w	8014836 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80140ae:	4b98      	ldr	r3, [pc, #608]	; (8014310 <tcp_input+0x290>)
 80140b0:	695b      	ldr	r3, [r3, #20]
 80140b2:	4a97      	ldr	r2, [pc, #604]	; (8014310 <tcp_input+0x290>)
 80140b4:	6812      	ldr	r2, [r2, #0]
 80140b6:	4611      	mov	r1, r2
 80140b8:	4618      	mov	r0, r3
 80140ba:	f008 fc13 	bl	801c8e4 <ip4_addr_isbroadcast_u32>
 80140be:	4603      	mov	r3, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f040 83ba 	bne.w	801483a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80140c6:	4b92      	ldr	r3, [pc, #584]	; (8014310 <tcp_input+0x290>)
 80140c8:	695b      	ldr	r3, [r3, #20]
 80140ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80140ce:	2be0      	cmp	r3, #224	; 0xe0
 80140d0:	f000 83b3 	beq.w	801483a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80140d4:	4b8d      	ldr	r3, [pc, #564]	; (801430c <tcp_input+0x28c>)
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	899b      	ldrh	r3, [r3, #12]
 80140da:	b29b      	uxth	r3, r3
 80140dc:	4618      	mov	r0, r3
 80140de:	f7fb f865 	bl	800f1ac <lwip_htons>
 80140e2:	4603      	mov	r3, r0
 80140e4:	0b1b      	lsrs	r3, r3, #12
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	009b      	lsls	r3, r3, #2
 80140ec:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80140ee:	7cbb      	ldrb	r3, [r7, #18]
 80140f0:	2b13      	cmp	r3, #19
 80140f2:	f240 83a4 	bls.w	801483e <tcp_input+0x7be>
 80140f6:	7cbb      	ldrb	r3, [r7, #18]
 80140f8:	b29a      	uxth	r2, r3
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	891b      	ldrh	r3, [r3, #8]
 80140fe:	429a      	cmp	r2, r3
 8014100:	f200 839d 	bhi.w	801483e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014104:	7cbb      	ldrb	r3, [r7, #18]
 8014106:	b29b      	uxth	r3, r3
 8014108:	3b14      	subs	r3, #20
 801410a:	b29a      	uxth	r2, r3
 801410c:	4b81      	ldr	r3, [pc, #516]	; (8014314 <tcp_input+0x294>)
 801410e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014110:	4b81      	ldr	r3, [pc, #516]	; (8014318 <tcp_input+0x298>)
 8014112:	2200      	movs	r2, #0
 8014114:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	895a      	ldrh	r2, [r3, #10]
 801411a:	7cbb      	ldrb	r3, [r7, #18]
 801411c:	b29b      	uxth	r3, r3
 801411e:	429a      	cmp	r2, r3
 8014120:	d309      	bcc.n	8014136 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014122:	4b7c      	ldr	r3, [pc, #496]	; (8014314 <tcp_input+0x294>)
 8014124:	881a      	ldrh	r2, [r3, #0]
 8014126:	4b7d      	ldr	r3, [pc, #500]	; (801431c <tcp_input+0x29c>)
 8014128:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801412a:	7cbb      	ldrb	r3, [r7, #18]
 801412c:	4619      	mov	r1, r3
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f7fd fb44 	bl	80117bc <pbuf_remove_header>
 8014134:	e04e      	b.n	80141d4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d105      	bne.n	801414a <tcp_input+0xca>
 801413e:	4b70      	ldr	r3, [pc, #448]	; (8014300 <tcp_input+0x280>)
 8014140:	22c2      	movs	r2, #194	; 0xc2
 8014142:	4977      	ldr	r1, [pc, #476]	; (8014320 <tcp_input+0x2a0>)
 8014144:	4870      	ldr	r0, [pc, #448]	; (8014308 <tcp_input+0x288>)
 8014146:	f00a fc99 	bl	801ea7c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801414a:	2114      	movs	r1, #20
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f7fd fb35 	bl	80117bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	895a      	ldrh	r2, [r3, #10]
 8014156:	4b71      	ldr	r3, [pc, #452]	; (801431c <tcp_input+0x29c>)
 8014158:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801415a:	4b6e      	ldr	r3, [pc, #440]	; (8014314 <tcp_input+0x294>)
 801415c:	881a      	ldrh	r2, [r3, #0]
 801415e:	4b6f      	ldr	r3, [pc, #444]	; (801431c <tcp_input+0x29c>)
 8014160:	881b      	ldrh	r3, [r3, #0]
 8014162:	1ad3      	subs	r3, r2, r3
 8014164:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014166:	4b6d      	ldr	r3, [pc, #436]	; (801431c <tcp_input+0x29c>)
 8014168:	881b      	ldrh	r3, [r3, #0]
 801416a:	4619      	mov	r1, r3
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f7fd fb25 	bl	80117bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	895b      	ldrh	r3, [r3, #10]
 8014178:	8a3a      	ldrh	r2, [r7, #16]
 801417a:	429a      	cmp	r2, r3
 801417c:	f200 8361 	bhi.w	8014842 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	4a64      	ldr	r2, [pc, #400]	; (8014318 <tcp_input+0x298>)
 8014188:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	8a3a      	ldrh	r2, [r7, #16]
 8014190:	4611      	mov	r1, r2
 8014192:	4618      	mov	r0, r3
 8014194:	f7fd fb12 	bl	80117bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	891a      	ldrh	r2, [r3, #8]
 801419c:	8a3b      	ldrh	r3, [r7, #16]
 801419e:	1ad3      	subs	r3, r2, r3
 80141a0:	b29a      	uxth	r2, r3
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	895b      	ldrh	r3, [r3, #10]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d005      	beq.n	80141ba <tcp_input+0x13a>
 80141ae:	4b54      	ldr	r3, [pc, #336]	; (8014300 <tcp_input+0x280>)
 80141b0:	22df      	movs	r2, #223	; 0xdf
 80141b2:	495c      	ldr	r1, [pc, #368]	; (8014324 <tcp_input+0x2a4>)
 80141b4:	4854      	ldr	r0, [pc, #336]	; (8014308 <tcp_input+0x288>)
 80141b6:	f00a fc61 	bl	801ea7c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	891a      	ldrh	r2, [r3, #8]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	891b      	ldrh	r3, [r3, #8]
 80141c4:	429a      	cmp	r2, r3
 80141c6:	d005      	beq.n	80141d4 <tcp_input+0x154>
 80141c8:	4b4d      	ldr	r3, [pc, #308]	; (8014300 <tcp_input+0x280>)
 80141ca:	22e0      	movs	r2, #224	; 0xe0
 80141cc:	4956      	ldr	r1, [pc, #344]	; (8014328 <tcp_input+0x2a8>)
 80141ce:	484e      	ldr	r0, [pc, #312]	; (8014308 <tcp_input+0x288>)
 80141d0:	f00a fc54 	bl	801ea7c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80141d4:	4b4d      	ldr	r3, [pc, #308]	; (801430c <tcp_input+0x28c>)
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	881b      	ldrh	r3, [r3, #0]
 80141da:	b29b      	uxth	r3, r3
 80141dc:	4a4b      	ldr	r2, [pc, #300]	; (801430c <tcp_input+0x28c>)
 80141de:	6814      	ldr	r4, [r2, #0]
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fa ffe3 	bl	800f1ac <lwip_htons>
 80141e6:	4603      	mov	r3, r0
 80141e8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80141ea:	4b48      	ldr	r3, [pc, #288]	; (801430c <tcp_input+0x28c>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	885b      	ldrh	r3, [r3, #2]
 80141f0:	b29b      	uxth	r3, r3
 80141f2:	4a46      	ldr	r2, [pc, #280]	; (801430c <tcp_input+0x28c>)
 80141f4:	6814      	ldr	r4, [r2, #0]
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7fa ffd8 	bl	800f1ac <lwip_htons>
 80141fc:	4603      	mov	r3, r0
 80141fe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014200:	4b42      	ldr	r3, [pc, #264]	; (801430c <tcp_input+0x28c>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	4a41      	ldr	r2, [pc, #260]	; (801430c <tcp_input+0x28c>)
 8014208:	6814      	ldr	r4, [r2, #0]
 801420a:	4618      	mov	r0, r3
 801420c:	f7fa ffe3 	bl	800f1d6 <lwip_htonl>
 8014210:	4603      	mov	r3, r0
 8014212:	6063      	str	r3, [r4, #4]
 8014214:	6863      	ldr	r3, [r4, #4]
 8014216:	4a45      	ldr	r2, [pc, #276]	; (801432c <tcp_input+0x2ac>)
 8014218:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801421a:	4b3c      	ldr	r3, [pc, #240]	; (801430c <tcp_input+0x28c>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	689b      	ldr	r3, [r3, #8]
 8014220:	4a3a      	ldr	r2, [pc, #232]	; (801430c <tcp_input+0x28c>)
 8014222:	6814      	ldr	r4, [r2, #0]
 8014224:	4618      	mov	r0, r3
 8014226:	f7fa ffd6 	bl	800f1d6 <lwip_htonl>
 801422a:	4603      	mov	r3, r0
 801422c:	60a3      	str	r3, [r4, #8]
 801422e:	68a3      	ldr	r3, [r4, #8]
 8014230:	4a3f      	ldr	r2, [pc, #252]	; (8014330 <tcp_input+0x2b0>)
 8014232:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014234:	4b35      	ldr	r3, [pc, #212]	; (801430c <tcp_input+0x28c>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	89db      	ldrh	r3, [r3, #14]
 801423a:	b29b      	uxth	r3, r3
 801423c:	4a33      	ldr	r2, [pc, #204]	; (801430c <tcp_input+0x28c>)
 801423e:	6814      	ldr	r4, [r2, #0]
 8014240:	4618      	mov	r0, r3
 8014242:	f7fa ffb3 	bl	800f1ac <lwip_htons>
 8014246:	4603      	mov	r3, r0
 8014248:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801424a:	4b30      	ldr	r3, [pc, #192]	; (801430c <tcp_input+0x28c>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	899b      	ldrh	r3, [r3, #12]
 8014250:	b29b      	uxth	r3, r3
 8014252:	4618      	mov	r0, r3
 8014254:	f7fa ffaa 	bl	800f1ac <lwip_htons>
 8014258:	4603      	mov	r3, r0
 801425a:	b2db      	uxtb	r3, r3
 801425c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014260:	b2da      	uxtb	r2, r3
 8014262:	4b34      	ldr	r3, [pc, #208]	; (8014334 <tcp_input+0x2b4>)
 8014264:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	891a      	ldrh	r2, [r3, #8]
 801426a:	4b33      	ldr	r3, [pc, #204]	; (8014338 <tcp_input+0x2b8>)
 801426c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801426e:	4b31      	ldr	r3, [pc, #196]	; (8014334 <tcp_input+0x2b4>)
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	f003 0303 	and.w	r3, r3, #3
 8014276:	2b00      	cmp	r3, #0
 8014278:	d00c      	beq.n	8014294 <tcp_input+0x214>
    tcplen++;
 801427a:	4b2f      	ldr	r3, [pc, #188]	; (8014338 <tcp_input+0x2b8>)
 801427c:	881b      	ldrh	r3, [r3, #0]
 801427e:	3301      	adds	r3, #1
 8014280:	b29a      	uxth	r2, r3
 8014282:	4b2d      	ldr	r3, [pc, #180]	; (8014338 <tcp_input+0x2b8>)
 8014284:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	891a      	ldrh	r2, [r3, #8]
 801428a:	4b2b      	ldr	r3, [pc, #172]	; (8014338 <tcp_input+0x2b8>)
 801428c:	881b      	ldrh	r3, [r3, #0]
 801428e:	429a      	cmp	r2, r3
 8014290:	f200 82d9 	bhi.w	8014846 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014294:	2300      	movs	r3, #0
 8014296:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014298:	4b28      	ldr	r3, [pc, #160]	; (801433c <tcp_input+0x2bc>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	61bb      	str	r3, [r7, #24]
 801429e:	e09d      	b.n	80143dc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80142a0:	69bb      	ldr	r3, [r7, #24]
 80142a2:	7d1b      	ldrb	r3, [r3, #20]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d105      	bne.n	80142b4 <tcp_input+0x234>
 80142a8:	4b15      	ldr	r3, [pc, #84]	; (8014300 <tcp_input+0x280>)
 80142aa:	22fb      	movs	r2, #251	; 0xfb
 80142ac:	4924      	ldr	r1, [pc, #144]	; (8014340 <tcp_input+0x2c0>)
 80142ae:	4816      	ldr	r0, [pc, #88]	; (8014308 <tcp_input+0x288>)
 80142b0:	f00a fbe4 	bl	801ea7c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80142b4:	69bb      	ldr	r3, [r7, #24]
 80142b6:	7d1b      	ldrb	r3, [r3, #20]
 80142b8:	2b0a      	cmp	r3, #10
 80142ba:	d105      	bne.n	80142c8 <tcp_input+0x248>
 80142bc:	4b10      	ldr	r3, [pc, #64]	; (8014300 <tcp_input+0x280>)
 80142be:	22fc      	movs	r2, #252	; 0xfc
 80142c0:	4920      	ldr	r1, [pc, #128]	; (8014344 <tcp_input+0x2c4>)
 80142c2:	4811      	ldr	r0, [pc, #68]	; (8014308 <tcp_input+0x288>)
 80142c4:	f00a fbda 	bl	801ea7c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80142c8:	69bb      	ldr	r3, [r7, #24]
 80142ca:	7d1b      	ldrb	r3, [r3, #20]
 80142cc:	2b01      	cmp	r3, #1
 80142ce:	d105      	bne.n	80142dc <tcp_input+0x25c>
 80142d0:	4b0b      	ldr	r3, [pc, #44]	; (8014300 <tcp_input+0x280>)
 80142d2:	22fd      	movs	r2, #253	; 0xfd
 80142d4:	491c      	ldr	r1, [pc, #112]	; (8014348 <tcp_input+0x2c8>)
 80142d6:	480c      	ldr	r0, [pc, #48]	; (8014308 <tcp_input+0x288>)
 80142d8:	f00a fbd0 	bl	801ea7c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	7a1b      	ldrb	r3, [r3, #8]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d033      	beq.n	801434c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	7a1a      	ldrb	r2, [r3, #8]
 80142e8:	4b09      	ldr	r3, [pc, #36]	; (8014310 <tcp_input+0x290>)
 80142ea:	685b      	ldr	r3, [r3, #4]
 80142ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80142f0:	3301      	adds	r3, #1
 80142f2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d029      	beq.n	801434c <tcp_input+0x2cc>
      prev = pcb;
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	61fb      	str	r3, [r7, #28]
      continue;
 80142fc:	e06b      	b.n	80143d6 <tcp_input+0x356>
 80142fe:	bf00      	nop
 8014300:	08024824 	.word	0x08024824
 8014304:	08024858 	.word	0x08024858
 8014308:	08024870 	.word	0x08024870
 801430c:	20014370 	.word	0x20014370
 8014310:	200176d4 	.word	0x200176d4
 8014314:	20014374 	.word	0x20014374
 8014318:	20014378 	.word	0x20014378
 801431c:	20014376 	.word	0x20014376
 8014320:	08024898 	.word	0x08024898
 8014324:	080248a8 	.word	0x080248a8
 8014328:	080248b4 	.word	0x080248b4
 801432c:	20014380 	.word	0x20014380
 8014330:	20014384 	.word	0x20014384
 8014334:	2001438c 	.word	0x2001438c
 8014338:	2001438a 	.word	0x2001438a
 801433c:	2001b0c8 	.word	0x2001b0c8
 8014340:	080248d4 	.word	0x080248d4
 8014344:	080248fc 	.word	0x080248fc
 8014348:	08024928 	.word	0x08024928
    }

    if (pcb->remote_port == tcphdr->src &&
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	8b1a      	ldrh	r2, [r3, #24]
 8014350:	4b94      	ldr	r3, [pc, #592]	; (80145a4 <tcp_input+0x524>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	881b      	ldrh	r3, [r3, #0]
 8014356:	b29b      	uxth	r3, r3
 8014358:	429a      	cmp	r2, r3
 801435a:	d13a      	bne.n	80143d2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	8ada      	ldrh	r2, [r3, #22]
 8014360:	4b90      	ldr	r3, [pc, #576]	; (80145a4 <tcp_input+0x524>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	885b      	ldrh	r3, [r3, #2]
 8014366:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014368:	429a      	cmp	r2, r3
 801436a:	d132      	bne.n	80143d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	685a      	ldr	r2, [r3, #4]
 8014370:	4b8d      	ldr	r3, [pc, #564]	; (80145a8 <tcp_input+0x528>)
 8014372:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014374:	429a      	cmp	r2, r3
 8014376:	d12c      	bne.n	80143d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014378:	69bb      	ldr	r3, [r7, #24]
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	4b8a      	ldr	r3, [pc, #552]	; (80145a8 <tcp_input+0x528>)
 801437e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014380:	429a      	cmp	r2, r3
 8014382:	d126      	bne.n	80143d2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	69ba      	ldr	r2, [r7, #24]
 801438a:	429a      	cmp	r2, r3
 801438c:	d106      	bne.n	801439c <tcp_input+0x31c>
 801438e:	4b87      	ldr	r3, [pc, #540]	; (80145ac <tcp_input+0x52c>)
 8014390:	f240 120d 	movw	r2, #269	; 0x10d
 8014394:	4986      	ldr	r1, [pc, #536]	; (80145b0 <tcp_input+0x530>)
 8014396:	4887      	ldr	r0, [pc, #540]	; (80145b4 <tcp_input+0x534>)
 8014398:	f00a fb70 	bl	801ea7c <iprintf>
      if (prev != NULL) {
 801439c:	69fb      	ldr	r3, [r7, #28]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d00a      	beq.n	80143b8 <tcp_input+0x338>
        prev->next = pcb->next;
 80143a2:	69bb      	ldr	r3, [r7, #24]
 80143a4:	68da      	ldr	r2, [r3, #12]
 80143a6:	69fb      	ldr	r3, [r7, #28]
 80143a8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80143aa:	4b83      	ldr	r3, [pc, #524]	; (80145b8 <tcp_input+0x538>)
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	69bb      	ldr	r3, [r7, #24]
 80143b0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80143b2:	4a81      	ldr	r2, [pc, #516]	; (80145b8 <tcp_input+0x538>)
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80143b8:	69bb      	ldr	r3, [r7, #24]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	69ba      	ldr	r2, [r7, #24]
 80143be:	429a      	cmp	r2, r3
 80143c0:	d111      	bne.n	80143e6 <tcp_input+0x366>
 80143c2:	4b7a      	ldr	r3, [pc, #488]	; (80145ac <tcp_input+0x52c>)
 80143c4:	f240 1215 	movw	r2, #277	; 0x115
 80143c8:	497c      	ldr	r1, [pc, #496]	; (80145bc <tcp_input+0x53c>)
 80143ca:	487a      	ldr	r0, [pc, #488]	; (80145b4 <tcp_input+0x534>)
 80143cc:	f00a fb56 	bl	801ea7c <iprintf>
      break;
 80143d0:	e009      	b.n	80143e6 <tcp_input+0x366>
    }
    prev = pcb;
 80143d2:	69bb      	ldr	r3, [r7, #24]
 80143d4:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	68db      	ldr	r3, [r3, #12]
 80143da:	61bb      	str	r3, [r7, #24]
 80143dc:	69bb      	ldr	r3, [r7, #24]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	f47f af5e 	bne.w	80142a0 <tcp_input+0x220>
 80143e4:	e000      	b.n	80143e8 <tcp_input+0x368>
      break;
 80143e6:	bf00      	nop
  }

  if (pcb == NULL) {
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	f040 8095 	bne.w	801451a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80143f0:	4b73      	ldr	r3, [pc, #460]	; (80145c0 <tcp_input+0x540>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	61bb      	str	r3, [r7, #24]
 80143f6:	e03f      	b.n	8014478 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80143f8:	69bb      	ldr	r3, [r7, #24]
 80143fa:	7d1b      	ldrb	r3, [r3, #20]
 80143fc:	2b0a      	cmp	r3, #10
 80143fe:	d006      	beq.n	801440e <tcp_input+0x38e>
 8014400:	4b6a      	ldr	r3, [pc, #424]	; (80145ac <tcp_input+0x52c>)
 8014402:	f240 121f 	movw	r2, #287	; 0x11f
 8014406:	496f      	ldr	r1, [pc, #444]	; (80145c4 <tcp_input+0x544>)
 8014408:	486a      	ldr	r0, [pc, #424]	; (80145b4 <tcp_input+0x534>)
 801440a:	f00a fb37 	bl	801ea7c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	7a1b      	ldrb	r3, [r3, #8]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d009      	beq.n	801442a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014416:	69bb      	ldr	r3, [r7, #24]
 8014418:	7a1a      	ldrb	r2, [r3, #8]
 801441a:	4b63      	ldr	r3, [pc, #396]	; (80145a8 <tcp_input+0x528>)
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014422:	3301      	adds	r3, #1
 8014424:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014426:	429a      	cmp	r2, r3
 8014428:	d122      	bne.n	8014470 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801442a:	69bb      	ldr	r3, [r7, #24]
 801442c:	8b1a      	ldrh	r2, [r3, #24]
 801442e:	4b5d      	ldr	r3, [pc, #372]	; (80145a4 <tcp_input+0x524>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	881b      	ldrh	r3, [r3, #0]
 8014434:	b29b      	uxth	r3, r3
 8014436:	429a      	cmp	r2, r3
 8014438:	d11b      	bne.n	8014472 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801443a:	69bb      	ldr	r3, [r7, #24]
 801443c:	8ada      	ldrh	r2, [r3, #22]
 801443e:	4b59      	ldr	r3, [pc, #356]	; (80145a4 <tcp_input+0x524>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	885b      	ldrh	r3, [r3, #2]
 8014444:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014446:	429a      	cmp	r2, r3
 8014448:	d113      	bne.n	8014472 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801444a:	69bb      	ldr	r3, [r7, #24]
 801444c:	685a      	ldr	r2, [r3, #4]
 801444e:	4b56      	ldr	r3, [pc, #344]	; (80145a8 <tcp_input+0x528>)
 8014450:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014452:	429a      	cmp	r2, r3
 8014454:	d10d      	bne.n	8014472 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014456:	69bb      	ldr	r3, [r7, #24]
 8014458:	681a      	ldr	r2, [r3, #0]
 801445a:	4b53      	ldr	r3, [pc, #332]	; (80145a8 <tcp_input+0x528>)
 801445c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801445e:	429a      	cmp	r2, r3
 8014460:	d107      	bne.n	8014472 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014462:	69b8      	ldr	r0, [r7, #24]
 8014464:	f000 fb54 	bl	8014b10 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f7fd fa5f 	bl	801192c <pbuf_free>
        return;
 801446e:	e1f0      	b.n	8014852 <tcp_input+0x7d2>
        continue;
 8014470:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	68db      	ldr	r3, [r3, #12]
 8014476:	61bb      	str	r3, [r7, #24]
 8014478:	69bb      	ldr	r3, [r7, #24]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d1bc      	bne.n	80143f8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801447e:	2300      	movs	r3, #0
 8014480:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014482:	4b51      	ldr	r3, [pc, #324]	; (80145c8 <tcp_input+0x548>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	617b      	str	r3, [r7, #20]
 8014488:	e02a      	b.n	80144e0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	7a1b      	ldrb	r3, [r3, #8]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d00c      	beq.n	80144ac <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	7a1a      	ldrb	r2, [r3, #8]
 8014496:	4b44      	ldr	r3, [pc, #272]	; (80145a8 <tcp_input+0x528>)
 8014498:	685b      	ldr	r3, [r3, #4]
 801449a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801449e:	3301      	adds	r3, #1
 80144a0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80144a2:	429a      	cmp	r2, r3
 80144a4:	d002      	beq.n	80144ac <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	61fb      	str	r3, [r7, #28]
        continue;
 80144aa:	e016      	b.n	80144da <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	8ada      	ldrh	r2, [r3, #22]
 80144b0:	4b3c      	ldr	r3, [pc, #240]	; (80145a4 <tcp_input+0x524>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	885b      	ldrh	r3, [r3, #2]
 80144b6:	b29b      	uxth	r3, r3
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d10c      	bne.n	80144d6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	4b39      	ldr	r3, [pc, #228]	; (80145a8 <tcp_input+0x528>)
 80144c2:	695b      	ldr	r3, [r3, #20]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d00f      	beq.n	80144e8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80144c8:	697b      	ldr	r3, [r7, #20]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d00d      	beq.n	80144ea <tcp_input+0x46a>
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d009      	beq.n	80144ea <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80144d6:	697b      	ldr	r3, [r7, #20]
 80144d8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	68db      	ldr	r3, [r3, #12]
 80144de:	617b      	str	r3, [r7, #20]
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d1d1      	bne.n	801448a <tcp_input+0x40a>
 80144e6:	e000      	b.n	80144ea <tcp_input+0x46a>
            break;
 80144e8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d014      	beq.n	801451a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80144f0:	69fb      	ldr	r3, [r7, #28]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d00a      	beq.n	801450c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	68da      	ldr	r2, [r3, #12]
 80144fa:	69fb      	ldr	r3, [r7, #28]
 80144fc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80144fe:	4b32      	ldr	r3, [pc, #200]	; (80145c8 <tcp_input+0x548>)
 8014500:	681a      	ldr	r2, [r3, #0]
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014506:	4a30      	ldr	r2, [pc, #192]	; (80145c8 <tcp_input+0x548>)
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801450c:	6978      	ldr	r0, [r7, #20]
 801450e:	f000 fa01 	bl	8014914 <tcp_listen_input>
      }
      pbuf_free(p);
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f7fd fa0a 	bl	801192c <pbuf_free>
      return;
 8014518:	e19b      	b.n	8014852 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801451a:	69bb      	ldr	r3, [r7, #24]
 801451c:	2b00      	cmp	r3, #0
 801451e:	f000 8160 	beq.w	80147e2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014522:	4b2a      	ldr	r3, [pc, #168]	; (80145cc <tcp_input+0x54c>)
 8014524:	2200      	movs	r2, #0
 8014526:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	891a      	ldrh	r2, [r3, #8]
 801452c:	4b27      	ldr	r3, [pc, #156]	; (80145cc <tcp_input+0x54c>)
 801452e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014530:	4a26      	ldr	r2, [pc, #152]	; (80145cc <tcp_input+0x54c>)
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014536:	4b1b      	ldr	r3, [pc, #108]	; (80145a4 <tcp_input+0x524>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	4a24      	ldr	r2, [pc, #144]	; (80145cc <tcp_input+0x54c>)
 801453c:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801453e:	4b24      	ldr	r3, [pc, #144]	; (80145d0 <tcp_input+0x550>)
 8014540:	2200      	movs	r2, #0
 8014542:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014544:	4b23      	ldr	r3, [pc, #140]	; (80145d4 <tcp_input+0x554>)
 8014546:	2200      	movs	r2, #0
 8014548:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801454a:	4b23      	ldr	r3, [pc, #140]	; (80145d8 <tcp_input+0x558>)
 801454c:	2200      	movs	r2, #0
 801454e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014550:	4b22      	ldr	r3, [pc, #136]	; (80145dc <tcp_input+0x55c>)
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	f003 0308 	and.w	r3, r3, #8
 8014558:	2b00      	cmp	r3, #0
 801455a:	d006      	beq.n	801456a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	7b5b      	ldrb	r3, [r3, #13]
 8014560:	f043 0301 	orr.w	r3, r3, #1
 8014564:	b2da      	uxtb	r2, r3
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801456a:	69bb      	ldr	r3, [r7, #24]
 801456c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801456e:	2b00      	cmp	r3, #0
 8014570:	d038      	beq.n	80145e4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014572:	69b8      	ldr	r0, [r7, #24]
 8014574:	f7ff f870 	bl	8013658 <tcp_process_refused_data>
 8014578:	4603      	mov	r3, r0
 801457a:	f113 0f0d 	cmn.w	r3, #13
 801457e:	d007      	beq.n	8014590 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014580:	69bb      	ldr	r3, [r7, #24]
 8014582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014584:	2b00      	cmp	r3, #0
 8014586:	d02d      	beq.n	80145e4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014588:	4b15      	ldr	r3, [pc, #84]	; (80145e0 <tcp_input+0x560>)
 801458a:	881b      	ldrh	r3, [r3, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d029      	beq.n	80145e4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014590:	69bb      	ldr	r3, [r7, #24]
 8014592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014594:	2b00      	cmp	r3, #0
 8014596:	f040 8104 	bne.w	80147a2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801459a:	69b8      	ldr	r0, [r7, #24]
 801459c:	f003 fe82 	bl	80182a4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80145a0:	e0ff      	b.n	80147a2 <tcp_input+0x722>
 80145a2:	bf00      	nop
 80145a4:	20014370 	.word	0x20014370
 80145a8:	200176d4 	.word	0x200176d4
 80145ac:	08024824 	.word	0x08024824
 80145b0:	08024950 	.word	0x08024950
 80145b4:	08024870 	.word	0x08024870
 80145b8:	2001b0c8 	.word	0x2001b0c8
 80145bc:	0802497c 	.word	0x0802497c
 80145c0:	2001b0d8 	.word	0x2001b0d8
 80145c4:	080249a8 	.word	0x080249a8
 80145c8:	2001b0d0 	.word	0x2001b0d0
 80145cc:	2001435c 	.word	0x2001435c
 80145d0:	20014390 	.word	0x20014390
 80145d4:	2001438d 	.word	0x2001438d
 80145d8:	20014388 	.word	0x20014388
 80145dc:	2001438c 	.word	0x2001438c
 80145e0:	2001438a 	.word	0x2001438a
      }
    }
    tcp_input_pcb = pcb;
 80145e4:	4a9c      	ldr	r2, [pc, #624]	; (8014858 <tcp_input+0x7d8>)
 80145e6:	69bb      	ldr	r3, [r7, #24]
 80145e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80145ea:	69b8      	ldr	r0, [r7, #24]
 80145ec:	f000 fb0a 	bl	8014c04 <tcp_process>
 80145f0:	4603      	mov	r3, r0
 80145f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80145f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80145f8:	f113 0f0d 	cmn.w	r3, #13
 80145fc:	f000 80d3 	beq.w	80147a6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8014600:	4b96      	ldr	r3, [pc, #600]	; (801485c <tcp_input+0x7dc>)
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	f003 0308 	and.w	r3, r3, #8
 8014608:	2b00      	cmp	r3, #0
 801460a:	d015      	beq.n	8014638 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014612:	2b00      	cmp	r3, #0
 8014614:	d008      	beq.n	8014628 <tcp_input+0x5a8>
 8014616:	69bb      	ldr	r3, [r7, #24]
 8014618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801461c:	69ba      	ldr	r2, [r7, #24]
 801461e:	6912      	ldr	r2, [r2, #16]
 8014620:	f06f 010d 	mvn.w	r1, #13
 8014624:	4610      	mov	r0, r2
 8014626:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014628:	69b9      	ldr	r1, [r7, #24]
 801462a:	488d      	ldr	r0, [pc, #564]	; (8014860 <tcp_input+0x7e0>)
 801462c:	f7ff fbb0 	bl	8013d90 <tcp_pcb_remove>
        tcp_free(pcb);
 8014630:	69b8      	ldr	r0, [r7, #24]
 8014632:	f7fd fdb3 	bl	801219c <tcp_free>
 8014636:	e0c1      	b.n	80147bc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8014638:	2300      	movs	r3, #0
 801463a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801463c:	4b89      	ldr	r3, [pc, #548]	; (8014864 <tcp_input+0x7e4>)
 801463e:	881b      	ldrh	r3, [r3, #0]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d01d      	beq.n	8014680 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014644:	4b87      	ldr	r3, [pc, #540]	; (8014864 <tcp_input+0x7e4>)
 8014646:	881b      	ldrh	r3, [r3, #0]
 8014648:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014650:	2b00      	cmp	r3, #0
 8014652:	d00a      	beq.n	801466a <tcp_input+0x5ea>
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801465a:	69ba      	ldr	r2, [r7, #24]
 801465c:	6910      	ldr	r0, [r2, #16]
 801465e:	89fa      	ldrh	r2, [r7, #14]
 8014660:	69b9      	ldr	r1, [r7, #24]
 8014662:	4798      	blx	r3
 8014664:	4603      	mov	r3, r0
 8014666:	74fb      	strb	r3, [r7, #19]
 8014668:	e001      	b.n	801466e <tcp_input+0x5ee>
 801466a:	2300      	movs	r3, #0
 801466c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801466e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014672:	f113 0f0d 	cmn.w	r3, #13
 8014676:	f000 8098 	beq.w	80147aa <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801467a:	4b7a      	ldr	r3, [pc, #488]	; (8014864 <tcp_input+0x7e4>)
 801467c:	2200      	movs	r2, #0
 801467e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014680:	69b8      	ldr	r0, [r7, #24]
 8014682:	f000 f907 	bl	8014894 <tcp_input_delayed_close>
 8014686:	4603      	mov	r3, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	f040 8090 	bne.w	80147ae <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801468e:	4b76      	ldr	r3, [pc, #472]	; (8014868 <tcp_input+0x7e8>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d041      	beq.n	801471a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014696:	69bb      	ldr	r3, [r7, #24]
 8014698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801469a:	2b00      	cmp	r3, #0
 801469c:	d006      	beq.n	80146ac <tcp_input+0x62c>
 801469e:	4b73      	ldr	r3, [pc, #460]	; (801486c <tcp_input+0x7ec>)
 80146a0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80146a4:	4972      	ldr	r1, [pc, #456]	; (8014870 <tcp_input+0x7f0>)
 80146a6:	4873      	ldr	r0, [pc, #460]	; (8014874 <tcp_input+0x7f4>)
 80146a8:	f00a f9e8 	bl	801ea7c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80146ac:	69bb      	ldr	r3, [r7, #24]
 80146ae:	8b5b      	ldrh	r3, [r3, #26]
 80146b0:	f003 0310 	and.w	r3, r3, #16
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d008      	beq.n	80146ca <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80146b8:	4b6b      	ldr	r3, [pc, #428]	; (8014868 <tcp_input+0x7e8>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	4618      	mov	r0, r3
 80146be:	f7fd f935 	bl	801192c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80146c2:	69b8      	ldr	r0, [r7, #24]
 80146c4:	f7fe f8ae 	bl	8012824 <tcp_abort>
            goto aborted;
 80146c8:	e078      	b.n	80147bc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d00c      	beq.n	80146ee <tcp_input+0x66e>
 80146d4:	69bb      	ldr	r3, [r7, #24]
 80146d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80146da:	69bb      	ldr	r3, [r7, #24]
 80146dc:	6918      	ldr	r0, [r3, #16]
 80146de:	4b62      	ldr	r3, [pc, #392]	; (8014868 <tcp_input+0x7e8>)
 80146e0:	681a      	ldr	r2, [r3, #0]
 80146e2:	2300      	movs	r3, #0
 80146e4:	69b9      	ldr	r1, [r7, #24]
 80146e6:	47a0      	blx	r4
 80146e8:	4603      	mov	r3, r0
 80146ea:	74fb      	strb	r3, [r7, #19]
 80146ec:	e008      	b.n	8014700 <tcp_input+0x680>
 80146ee:	4b5e      	ldr	r3, [pc, #376]	; (8014868 <tcp_input+0x7e8>)
 80146f0:	681a      	ldr	r2, [r3, #0]
 80146f2:	2300      	movs	r3, #0
 80146f4:	69b9      	ldr	r1, [r7, #24]
 80146f6:	2000      	movs	r0, #0
 80146f8:	f7ff f884 	bl	8013804 <tcp_recv_null>
 80146fc:	4603      	mov	r3, r0
 80146fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014700:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014704:	f113 0f0d 	cmn.w	r3, #13
 8014708:	d053      	beq.n	80147b2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801470a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d003      	beq.n	801471a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014712:	4b55      	ldr	r3, [pc, #340]	; (8014868 <tcp_input+0x7e8>)
 8014714:	681a      	ldr	r2, [r3, #0]
 8014716:	69bb      	ldr	r3, [r7, #24]
 8014718:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801471a:	4b50      	ldr	r3, [pc, #320]	; (801485c <tcp_input+0x7dc>)
 801471c:	781b      	ldrb	r3, [r3, #0]
 801471e:	f003 0320 	and.w	r3, r3, #32
 8014722:	2b00      	cmp	r3, #0
 8014724:	d030      	beq.n	8014788 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8014726:	69bb      	ldr	r3, [r7, #24]
 8014728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801472a:	2b00      	cmp	r3, #0
 801472c:	d009      	beq.n	8014742 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801472e:	69bb      	ldr	r3, [r7, #24]
 8014730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014732:	7b5a      	ldrb	r2, [r3, #13]
 8014734:	69bb      	ldr	r3, [r7, #24]
 8014736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014738:	f042 0220 	orr.w	r2, r2, #32
 801473c:	b2d2      	uxtb	r2, r2
 801473e:	735a      	strb	r2, [r3, #13]
 8014740:	e022      	b.n	8014788 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014742:	69bb      	ldr	r3, [r7, #24]
 8014744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014746:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801474a:	d005      	beq.n	8014758 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801474c:	69bb      	ldr	r3, [r7, #24]
 801474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014750:	3301      	adds	r3, #1
 8014752:	b29a      	uxth	r2, r3
 8014754:	69bb      	ldr	r3, [r7, #24]
 8014756:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014758:	69bb      	ldr	r3, [r7, #24]
 801475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801475e:	2b00      	cmp	r3, #0
 8014760:	d00b      	beq.n	801477a <tcp_input+0x6fa>
 8014762:	69bb      	ldr	r3, [r7, #24]
 8014764:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014768:	69bb      	ldr	r3, [r7, #24]
 801476a:	6918      	ldr	r0, [r3, #16]
 801476c:	2300      	movs	r3, #0
 801476e:	2200      	movs	r2, #0
 8014770:	69b9      	ldr	r1, [r7, #24]
 8014772:	47a0      	blx	r4
 8014774:	4603      	mov	r3, r0
 8014776:	74fb      	strb	r3, [r7, #19]
 8014778:	e001      	b.n	801477e <tcp_input+0x6fe>
 801477a:	2300      	movs	r3, #0
 801477c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801477e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014782:	f113 0f0d 	cmn.w	r3, #13
 8014786:	d016      	beq.n	80147b6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014788:	4b33      	ldr	r3, [pc, #204]	; (8014858 <tcp_input+0x7d8>)
 801478a:	2200      	movs	r2, #0
 801478c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801478e:	69b8      	ldr	r0, [r7, #24]
 8014790:	f000 f880 	bl	8014894 <tcp_input_delayed_close>
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	d10f      	bne.n	80147ba <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801479a:	69b8      	ldr	r0, [r7, #24]
 801479c:	f002 ff70 	bl	8017680 <tcp_output>
 80147a0:	e00c      	b.n	80147bc <tcp_input+0x73c>
        goto aborted;
 80147a2:	bf00      	nop
 80147a4:	e00a      	b.n	80147bc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80147a6:	bf00      	nop
 80147a8:	e008      	b.n	80147bc <tcp_input+0x73c>
              goto aborted;
 80147aa:	bf00      	nop
 80147ac:	e006      	b.n	80147bc <tcp_input+0x73c>
          goto aborted;
 80147ae:	bf00      	nop
 80147b0:	e004      	b.n	80147bc <tcp_input+0x73c>
            goto aborted;
 80147b2:	bf00      	nop
 80147b4:	e002      	b.n	80147bc <tcp_input+0x73c>
              goto aborted;
 80147b6:	bf00      	nop
 80147b8:	e000      	b.n	80147bc <tcp_input+0x73c>
          goto aborted;
 80147ba:	bf00      	nop
    tcp_input_pcb = NULL;
 80147bc:	4b26      	ldr	r3, [pc, #152]	; (8014858 <tcp_input+0x7d8>)
 80147be:	2200      	movs	r2, #0
 80147c0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80147c2:	4b29      	ldr	r3, [pc, #164]	; (8014868 <tcp_input+0x7e8>)
 80147c4:	2200      	movs	r2, #0
 80147c6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80147c8:	4b2b      	ldr	r3, [pc, #172]	; (8014878 <tcp_input+0x7f8>)
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d03f      	beq.n	8014850 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80147d0:	4b29      	ldr	r3, [pc, #164]	; (8014878 <tcp_input+0x7f8>)
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7fd f8a9 	bl	801192c <pbuf_free>
      inseg.p = NULL;
 80147da:	4b27      	ldr	r3, [pc, #156]	; (8014878 <tcp_input+0x7f8>)
 80147dc:	2200      	movs	r2, #0
 80147de:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80147e0:	e036      	b.n	8014850 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80147e2:	4b26      	ldr	r3, [pc, #152]	; (801487c <tcp_input+0x7fc>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	899b      	ldrh	r3, [r3, #12]
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7fa fcde 	bl	800f1ac <lwip_htons>
 80147f0:	4603      	mov	r3, r0
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	f003 0304 	and.w	r3, r3, #4
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d118      	bne.n	801482e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80147fc:	4b20      	ldr	r3, [pc, #128]	; (8014880 <tcp_input+0x800>)
 80147fe:	6819      	ldr	r1, [r3, #0]
 8014800:	4b20      	ldr	r3, [pc, #128]	; (8014884 <tcp_input+0x804>)
 8014802:	881b      	ldrh	r3, [r3, #0]
 8014804:	461a      	mov	r2, r3
 8014806:	4b20      	ldr	r3, [pc, #128]	; (8014888 <tcp_input+0x808>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801480c:	4b1b      	ldr	r3, [pc, #108]	; (801487c <tcp_input+0x7fc>)
 801480e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014810:	885b      	ldrh	r3, [r3, #2]
 8014812:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014814:	4a19      	ldr	r2, [pc, #100]	; (801487c <tcp_input+0x7fc>)
 8014816:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014818:	8812      	ldrh	r2, [r2, #0]
 801481a:	b292      	uxth	r2, r2
 801481c:	9202      	str	r2, [sp, #8]
 801481e:	9301      	str	r3, [sp, #4]
 8014820:	4b1a      	ldr	r3, [pc, #104]	; (801488c <tcp_input+0x80c>)
 8014822:	9300      	str	r3, [sp, #0]
 8014824:	4b1a      	ldr	r3, [pc, #104]	; (8014890 <tcp_input+0x810>)
 8014826:	4602      	mov	r2, r0
 8014828:	2000      	movs	r0, #0
 801482a:	f003 fce9 	bl	8018200 <tcp_rst>
    pbuf_free(p);
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f7fd f87c 	bl	801192c <pbuf_free>
  return;
 8014834:	e00c      	b.n	8014850 <tcp_input+0x7d0>
    goto dropped;
 8014836:	bf00      	nop
 8014838:	e006      	b.n	8014848 <tcp_input+0x7c8>
    goto dropped;
 801483a:	bf00      	nop
 801483c:	e004      	b.n	8014848 <tcp_input+0x7c8>
    goto dropped;
 801483e:	bf00      	nop
 8014840:	e002      	b.n	8014848 <tcp_input+0x7c8>
      goto dropped;
 8014842:	bf00      	nop
 8014844:	e000      	b.n	8014848 <tcp_input+0x7c8>
      goto dropped;
 8014846:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f7fd f86f 	bl	801192c <pbuf_free>
 801484e:	e000      	b.n	8014852 <tcp_input+0x7d2>
  return;
 8014850:	bf00      	nop
}
 8014852:	3724      	adds	r7, #36	; 0x24
 8014854:	46bd      	mov	sp, r7
 8014856:	bd90      	pop	{r4, r7, pc}
 8014858:	2001b0dc 	.word	0x2001b0dc
 801485c:	2001438d 	.word	0x2001438d
 8014860:	2001b0c8 	.word	0x2001b0c8
 8014864:	20014388 	.word	0x20014388
 8014868:	20014390 	.word	0x20014390
 801486c:	08024824 	.word	0x08024824
 8014870:	080249d8 	.word	0x080249d8
 8014874:	08024870 	.word	0x08024870
 8014878:	2001435c 	.word	0x2001435c
 801487c:	20014370 	.word	0x20014370
 8014880:	20014384 	.word	0x20014384
 8014884:	2001438a 	.word	0x2001438a
 8014888:	20014380 	.word	0x20014380
 801488c:	200176e4 	.word	0x200176e4
 8014890:	200176e8 	.word	0x200176e8

08014894 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b082      	sub	sp, #8
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d106      	bne.n	80148b0 <tcp_input_delayed_close+0x1c>
 80148a2:	4b17      	ldr	r3, [pc, #92]	; (8014900 <tcp_input_delayed_close+0x6c>)
 80148a4:	f240 225a 	movw	r2, #602	; 0x25a
 80148a8:	4916      	ldr	r1, [pc, #88]	; (8014904 <tcp_input_delayed_close+0x70>)
 80148aa:	4817      	ldr	r0, [pc, #92]	; (8014908 <tcp_input_delayed_close+0x74>)
 80148ac:	f00a f8e6 	bl	801ea7c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80148b0:	4b16      	ldr	r3, [pc, #88]	; (801490c <tcp_input_delayed_close+0x78>)
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	f003 0310 	and.w	r3, r3, #16
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d01c      	beq.n	80148f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	8b5b      	ldrh	r3, [r3, #26]
 80148c0:	f003 0310 	and.w	r3, r3, #16
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d10d      	bne.n	80148e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d008      	beq.n	80148e4 <tcp_input_delayed_close+0x50>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	6912      	ldr	r2, [r2, #16]
 80148dc:	f06f 010e 	mvn.w	r1, #14
 80148e0:	4610      	mov	r0, r2
 80148e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80148e4:	6879      	ldr	r1, [r7, #4]
 80148e6:	480a      	ldr	r0, [pc, #40]	; (8014910 <tcp_input_delayed_close+0x7c>)
 80148e8:	f7ff fa52 	bl	8013d90 <tcp_pcb_remove>
    tcp_free(pcb);
 80148ec:	6878      	ldr	r0, [r7, #4]
 80148ee:	f7fd fc55 	bl	801219c <tcp_free>
    return 1;
 80148f2:	2301      	movs	r3, #1
 80148f4:	e000      	b.n	80148f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80148f6:	2300      	movs	r3, #0
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3708      	adds	r7, #8
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	08024824 	.word	0x08024824
 8014904:	080249f4 	.word	0x080249f4
 8014908:	08024870 	.word	0x08024870
 801490c:	2001438d 	.word	0x2001438d
 8014910:	2001b0c8 	.word	0x2001b0c8

08014914 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014914:	b590      	push	{r4, r7, lr}
 8014916:	b08b      	sub	sp, #44	; 0x2c
 8014918:	af04      	add	r7, sp, #16
 801491a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801491c:	4b6f      	ldr	r3, [pc, #444]	; (8014adc <tcp_listen_input+0x1c8>)
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	f003 0304 	and.w	r3, r3, #4
 8014924:	2b00      	cmp	r3, #0
 8014926:	f040 80d2 	bne.w	8014ace <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d106      	bne.n	801493e <tcp_listen_input+0x2a>
 8014930:	4b6b      	ldr	r3, [pc, #428]	; (8014ae0 <tcp_listen_input+0x1cc>)
 8014932:	f240 2281 	movw	r2, #641	; 0x281
 8014936:	496b      	ldr	r1, [pc, #428]	; (8014ae4 <tcp_listen_input+0x1d0>)
 8014938:	486b      	ldr	r0, [pc, #428]	; (8014ae8 <tcp_listen_input+0x1d4>)
 801493a:	f00a f89f 	bl	801ea7c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801493e:	4b67      	ldr	r3, [pc, #412]	; (8014adc <tcp_listen_input+0x1c8>)
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	f003 0310 	and.w	r3, r3, #16
 8014946:	2b00      	cmp	r3, #0
 8014948:	d019      	beq.n	801497e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801494a:	4b68      	ldr	r3, [pc, #416]	; (8014aec <tcp_listen_input+0x1d8>)
 801494c:	6819      	ldr	r1, [r3, #0]
 801494e:	4b68      	ldr	r3, [pc, #416]	; (8014af0 <tcp_listen_input+0x1dc>)
 8014950:	881b      	ldrh	r3, [r3, #0]
 8014952:	461a      	mov	r2, r3
 8014954:	4b67      	ldr	r3, [pc, #412]	; (8014af4 <tcp_listen_input+0x1e0>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801495a:	4b67      	ldr	r3, [pc, #412]	; (8014af8 <tcp_listen_input+0x1e4>)
 801495c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801495e:	885b      	ldrh	r3, [r3, #2]
 8014960:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014962:	4a65      	ldr	r2, [pc, #404]	; (8014af8 <tcp_listen_input+0x1e4>)
 8014964:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014966:	8812      	ldrh	r2, [r2, #0]
 8014968:	b292      	uxth	r2, r2
 801496a:	9202      	str	r2, [sp, #8]
 801496c:	9301      	str	r3, [sp, #4]
 801496e:	4b63      	ldr	r3, [pc, #396]	; (8014afc <tcp_listen_input+0x1e8>)
 8014970:	9300      	str	r3, [sp, #0]
 8014972:	4b63      	ldr	r3, [pc, #396]	; (8014b00 <tcp_listen_input+0x1ec>)
 8014974:	4602      	mov	r2, r0
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f003 fc42 	bl	8018200 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801497c:	e0a9      	b.n	8014ad2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801497e:	4b57      	ldr	r3, [pc, #348]	; (8014adc <tcp_listen_input+0x1c8>)
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	f003 0302 	and.w	r3, r3, #2
 8014986:	2b00      	cmp	r3, #0
 8014988:	f000 80a3 	beq.w	8014ad2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	7d5b      	ldrb	r3, [r3, #21]
 8014990:	4618      	mov	r0, r3
 8014992:	f7ff f85b 	bl	8013a4c <tcp_alloc>
 8014996:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d111      	bne.n	80149c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	699b      	ldr	r3, [r3, #24]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d00a      	beq.n	80149bc <tcp_listen_input+0xa8>
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	699b      	ldr	r3, [r3, #24]
 80149aa:	687a      	ldr	r2, [r7, #4]
 80149ac:	6910      	ldr	r0, [r2, #16]
 80149ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149b2:	2100      	movs	r1, #0
 80149b4:	4798      	blx	r3
 80149b6:	4603      	mov	r3, r0
 80149b8:	73bb      	strb	r3, [r7, #14]
      return;
 80149ba:	e08b      	b.n	8014ad4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80149bc:	23f0      	movs	r3, #240	; 0xf0
 80149be:	73bb      	strb	r3, [r7, #14]
      return;
 80149c0:	e088      	b.n	8014ad4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80149c2:	4b50      	ldr	r3, [pc, #320]	; (8014b04 <tcp_listen_input+0x1f0>)
 80149c4:	695a      	ldr	r2, [r3, #20]
 80149c6:	697b      	ldr	r3, [r7, #20]
 80149c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80149ca:	4b4e      	ldr	r3, [pc, #312]	; (8014b04 <tcp_listen_input+0x1f0>)
 80149cc:	691a      	ldr	r2, [r3, #16]
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	8ada      	ldrh	r2, [r3, #22]
 80149d6:	697b      	ldr	r3, [r7, #20]
 80149d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80149da:	4b47      	ldr	r3, [pc, #284]	; (8014af8 <tcp_listen_input+0x1e4>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	881b      	ldrh	r3, [r3, #0]
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	2203      	movs	r2, #3
 80149ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80149ec:	4b41      	ldr	r3, [pc, #260]	; (8014af4 <tcp_listen_input+0x1e0>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	1c5a      	adds	r2, r3, #1
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80149fe:	6978      	ldr	r0, [r7, #20]
 8014a00:	f7ff fa5a 	bl	8013eb8 <tcp_next_iss>
 8014a04:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	693a      	ldr	r2, [r7, #16]
 8014a0a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	693a      	ldr	r2, [r7, #16]
 8014a10:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	693a      	ldr	r2, [r7, #16]
 8014a16:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	693a      	ldr	r2, [r7, #16]
 8014a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014a1e:	4b35      	ldr	r3, [pc, #212]	; (8014af4 <tcp_listen_input+0x1e0>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	1e5a      	subs	r2, r3, #1
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	691a      	ldr	r2, [r3, #16]
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	687a      	ldr	r2, [r7, #4]
 8014a34:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	7a5b      	ldrb	r3, [r3, #9]
 8014a3a:	f003 030c 	and.w	r3, r3, #12
 8014a3e:	b2da      	uxtb	r2, r3
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	7a1a      	ldrb	r2, [r3, #8]
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014a4c:	4b2e      	ldr	r3, [pc, #184]	; (8014b08 <tcp_listen_input+0x1f4>)
 8014a4e:	681a      	ldr	r2, [r3, #0]
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	60da      	str	r2, [r3, #12]
 8014a54:	4a2c      	ldr	r2, [pc, #176]	; (8014b08 <tcp_listen_input+0x1f4>)
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	6013      	str	r3, [r2, #0]
 8014a5a:	f003 fd93 	bl	8018584 <tcp_timer_needed>
 8014a5e:	4b2b      	ldr	r3, [pc, #172]	; (8014b0c <tcp_listen_input+0x1f8>)
 8014a60:	2201      	movs	r2, #1
 8014a62:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014a64:	6978      	ldr	r0, [r7, #20]
 8014a66:	f001 fd8d 	bl	8016584 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014a6a:	4b23      	ldr	r3, [pc, #140]	; (8014af8 <tcp_listen_input+0x1e4>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	89db      	ldrh	r3, [r3, #14]
 8014a70:	b29a      	uxth	r2, r3
 8014a72:	697b      	ldr	r3, [r7, #20]
 8014a74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	3304      	adds	r3, #4
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f007 fc75 	bl	801c37c <ip4_route>
 8014a92:	4601      	mov	r1, r0
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	3304      	adds	r3, #4
 8014a98:	461a      	mov	r2, r3
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	f7ff fa32 	bl	8013f04 <tcp_eff_send_mss_netif>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	697b      	ldr	r3, [r7, #20]
 8014aa6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014aa8:	2112      	movs	r1, #18
 8014aaa:	6978      	ldr	r0, [r7, #20]
 8014aac:	f002 fcfa 	bl	80174a4 <tcp_enqueue_flags>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d004      	beq.n	8014ac6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014abc:	2100      	movs	r1, #0
 8014abe:	6978      	ldr	r0, [r7, #20]
 8014ac0:	f7fd fdf2 	bl	80126a8 <tcp_abandon>
      return;
 8014ac4:	e006      	b.n	8014ad4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014ac6:	6978      	ldr	r0, [r7, #20]
 8014ac8:	f002 fdda 	bl	8017680 <tcp_output>
  return;
 8014acc:	e001      	b.n	8014ad2 <tcp_listen_input+0x1be>
    return;
 8014ace:	bf00      	nop
 8014ad0:	e000      	b.n	8014ad4 <tcp_listen_input+0x1c0>
  return;
 8014ad2:	bf00      	nop
}
 8014ad4:	371c      	adds	r7, #28
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd90      	pop	{r4, r7, pc}
 8014ada:	bf00      	nop
 8014adc:	2001438c 	.word	0x2001438c
 8014ae0:	08024824 	.word	0x08024824
 8014ae4:	08024a1c 	.word	0x08024a1c
 8014ae8:	08024870 	.word	0x08024870
 8014aec:	20014384 	.word	0x20014384
 8014af0:	2001438a 	.word	0x2001438a
 8014af4:	20014380 	.word	0x20014380
 8014af8:	20014370 	.word	0x20014370
 8014afc:	200176e4 	.word	0x200176e4
 8014b00:	200176e8 	.word	0x200176e8
 8014b04:	200176d4 	.word	0x200176d4
 8014b08:	2001b0c8 	.word	0x2001b0c8
 8014b0c:	2001b0c4 	.word	0x2001b0c4

08014b10 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b086      	sub	sp, #24
 8014b14:	af04      	add	r7, sp, #16
 8014b16:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014b18:	4b2f      	ldr	r3, [pc, #188]	; (8014bd8 <tcp_timewait_input+0xc8>)
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	f003 0304 	and.w	r3, r3, #4
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d153      	bne.n	8014bcc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d106      	bne.n	8014b38 <tcp_timewait_input+0x28>
 8014b2a:	4b2c      	ldr	r3, [pc, #176]	; (8014bdc <tcp_timewait_input+0xcc>)
 8014b2c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014b30:	492b      	ldr	r1, [pc, #172]	; (8014be0 <tcp_timewait_input+0xd0>)
 8014b32:	482c      	ldr	r0, [pc, #176]	; (8014be4 <tcp_timewait_input+0xd4>)
 8014b34:	f009 ffa2 	bl	801ea7c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014b38:	4b27      	ldr	r3, [pc, #156]	; (8014bd8 <tcp_timewait_input+0xc8>)
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	f003 0302 	and.w	r3, r3, #2
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d02a      	beq.n	8014b9a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014b44:	4b28      	ldr	r3, [pc, #160]	; (8014be8 <tcp_timewait_input+0xd8>)
 8014b46:	681a      	ldr	r2, [r3, #0]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b4c:	1ad3      	subs	r3, r2, r3
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	db2d      	blt.n	8014bae <tcp_timewait_input+0x9e>
 8014b52:	4b25      	ldr	r3, [pc, #148]	; (8014be8 <tcp_timewait_input+0xd8>)
 8014b54:	681a      	ldr	r2, [r3, #0]
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b5a:	6879      	ldr	r1, [r7, #4]
 8014b5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b5e:	440b      	add	r3, r1
 8014b60:	1ad3      	subs	r3, r2, r3
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	dc23      	bgt.n	8014bae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b66:	4b21      	ldr	r3, [pc, #132]	; (8014bec <tcp_timewait_input+0xdc>)
 8014b68:	6819      	ldr	r1, [r3, #0]
 8014b6a:	4b21      	ldr	r3, [pc, #132]	; (8014bf0 <tcp_timewait_input+0xe0>)
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	461a      	mov	r2, r3
 8014b70:	4b1d      	ldr	r3, [pc, #116]	; (8014be8 <tcp_timewait_input+0xd8>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b76:	4b1f      	ldr	r3, [pc, #124]	; (8014bf4 <tcp_timewait_input+0xe4>)
 8014b78:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b7a:	885b      	ldrh	r3, [r3, #2]
 8014b7c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b7e:	4a1d      	ldr	r2, [pc, #116]	; (8014bf4 <tcp_timewait_input+0xe4>)
 8014b80:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b82:	8812      	ldrh	r2, [r2, #0]
 8014b84:	b292      	uxth	r2, r2
 8014b86:	9202      	str	r2, [sp, #8]
 8014b88:	9301      	str	r3, [sp, #4]
 8014b8a:	4b1b      	ldr	r3, [pc, #108]	; (8014bf8 <tcp_timewait_input+0xe8>)
 8014b8c:	9300      	str	r3, [sp, #0]
 8014b8e:	4b1b      	ldr	r3, [pc, #108]	; (8014bfc <tcp_timewait_input+0xec>)
 8014b90:	4602      	mov	r2, r0
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f003 fb34 	bl	8018200 <tcp_rst>
      return;
 8014b98:	e01b      	b.n	8014bd2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014b9a:	4b0f      	ldr	r3, [pc, #60]	; (8014bd8 <tcp_timewait_input+0xc8>)
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	f003 0301 	and.w	r3, r3, #1
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d003      	beq.n	8014bae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014ba6:	4b16      	ldr	r3, [pc, #88]	; (8014c00 <tcp_timewait_input+0xf0>)
 8014ba8:	681a      	ldr	r2, [r3, #0]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014bae:	4b10      	ldr	r3, [pc, #64]	; (8014bf0 <tcp_timewait_input+0xe0>)
 8014bb0:	881b      	ldrh	r3, [r3, #0]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00c      	beq.n	8014bd0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	8b5b      	ldrh	r3, [r3, #26]
 8014bba:	f043 0302 	orr.w	r3, r3, #2
 8014bbe:	b29a      	uxth	r2, r3
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f002 fd5b 	bl	8017680 <tcp_output>
  }
  return;
 8014bca:	e001      	b.n	8014bd0 <tcp_timewait_input+0xc0>
    return;
 8014bcc:	bf00      	nop
 8014bce:	e000      	b.n	8014bd2 <tcp_timewait_input+0xc2>
  return;
 8014bd0:	bf00      	nop
}
 8014bd2:	3708      	adds	r7, #8
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	2001438c 	.word	0x2001438c
 8014bdc:	08024824 	.word	0x08024824
 8014be0:	08024a3c 	.word	0x08024a3c
 8014be4:	08024870 	.word	0x08024870
 8014be8:	20014380 	.word	0x20014380
 8014bec:	20014384 	.word	0x20014384
 8014bf0:	2001438a 	.word	0x2001438a
 8014bf4:	20014370 	.word	0x20014370
 8014bf8:	200176e4 	.word	0x200176e4
 8014bfc:	200176e8 	.word	0x200176e8
 8014c00:	2001b0cc 	.word	0x2001b0cc

08014c04 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014c04:	b590      	push	{r4, r7, lr}
 8014c06:	b08d      	sub	sp, #52	; 0x34
 8014c08:	af04      	add	r7, sp, #16
 8014c0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8014c10:	2300      	movs	r3, #0
 8014c12:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d106      	bne.n	8014c28 <tcp_process+0x24>
 8014c1a:	4ba5      	ldr	r3, [pc, #660]	; (8014eb0 <tcp_process+0x2ac>)
 8014c1c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014c20:	49a4      	ldr	r1, [pc, #656]	; (8014eb4 <tcp_process+0x2b0>)
 8014c22:	48a5      	ldr	r0, [pc, #660]	; (8014eb8 <tcp_process+0x2b4>)
 8014c24:	f009 ff2a 	bl	801ea7c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014c28:	4ba4      	ldr	r3, [pc, #656]	; (8014ebc <tcp_process+0x2b8>)
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	f003 0304 	and.w	r3, r3, #4
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d04e      	beq.n	8014cd2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	7d1b      	ldrb	r3, [r3, #20]
 8014c38:	2b02      	cmp	r3, #2
 8014c3a:	d108      	bne.n	8014c4e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c40:	4b9f      	ldr	r3, [pc, #636]	; (8014ec0 <tcp_process+0x2bc>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d123      	bne.n	8014c90 <tcp_process+0x8c>
        acceptable = 1;
 8014c48:	2301      	movs	r3, #1
 8014c4a:	77fb      	strb	r3, [r7, #31]
 8014c4c:	e020      	b.n	8014c90 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c52:	4b9c      	ldr	r3, [pc, #624]	; (8014ec4 <tcp_process+0x2c0>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d102      	bne.n	8014c60 <tcp_process+0x5c>
        acceptable = 1;
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	77fb      	strb	r3, [r7, #31]
 8014c5e:	e017      	b.n	8014c90 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014c60:	4b98      	ldr	r3, [pc, #608]	; (8014ec4 <tcp_process+0x2c0>)
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c68:	1ad3      	subs	r3, r2, r3
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	db10      	blt.n	8014c90 <tcp_process+0x8c>
 8014c6e:	4b95      	ldr	r3, [pc, #596]	; (8014ec4 <tcp_process+0x2c0>)
 8014c70:	681a      	ldr	r2, [r3, #0]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c76:	6879      	ldr	r1, [r7, #4]
 8014c78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c7a:	440b      	add	r3, r1
 8014c7c:	1ad3      	subs	r3, r2, r3
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	dc06      	bgt.n	8014c90 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	8b5b      	ldrh	r3, [r3, #26]
 8014c86:	f043 0302 	orr.w	r3, r3, #2
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014c90:	7ffb      	ldrb	r3, [r7, #31]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d01b      	beq.n	8014cce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	7d1b      	ldrb	r3, [r3, #20]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d106      	bne.n	8014cac <tcp_process+0xa8>
 8014c9e:	4b84      	ldr	r3, [pc, #528]	; (8014eb0 <tcp_process+0x2ac>)
 8014ca0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014ca4:	4988      	ldr	r1, [pc, #544]	; (8014ec8 <tcp_process+0x2c4>)
 8014ca6:	4884      	ldr	r0, [pc, #528]	; (8014eb8 <tcp_process+0x2b4>)
 8014ca8:	f009 fee8 	bl	801ea7c <iprintf>
      recv_flags |= TF_RESET;
 8014cac:	4b87      	ldr	r3, [pc, #540]	; (8014ecc <tcp_process+0x2c8>)
 8014cae:	781b      	ldrb	r3, [r3, #0]
 8014cb0:	f043 0308 	orr.w	r3, r3, #8
 8014cb4:	b2da      	uxtb	r2, r3
 8014cb6:	4b85      	ldr	r3, [pc, #532]	; (8014ecc <tcp_process+0x2c8>)
 8014cb8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	8b5b      	ldrh	r3, [r3, #26]
 8014cbe:	f023 0301 	bic.w	r3, r3, #1
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014cc8:	f06f 030d 	mvn.w	r3, #13
 8014ccc:	e37a      	b.n	80153c4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	e378      	b.n	80153c4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014cd2:	4b7a      	ldr	r3, [pc, #488]	; (8014ebc <tcp_process+0x2b8>)
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	f003 0302 	and.w	r3, r3, #2
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d010      	beq.n	8014d00 <tcp_process+0xfc>
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	7d1b      	ldrb	r3, [r3, #20]
 8014ce2:	2b02      	cmp	r3, #2
 8014ce4:	d00c      	beq.n	8014d00 <tcp_process+0xfc>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	7d1b      	ldrb	r3, [r3, #20]
 8014cea:	2b03      	cmp	r3, #3
 8014cec:	d008      	beq.n	8014d00 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	8b5b      	ldrh	r3, [r3, #26]
 8014cf2:	f043 0302 	orr.w	r3, r3, #2
 8014cf6:	b29a      	uxth	r2, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	e361      	b.n	80153c4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	8b5b      	ldrh	r3, [r3, #26]
 8014d04:	f003 0310 	and.w	r3, r3, #16
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d103      	bne.n	8014d14 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014d0c:	4b70      	ldr	r3, [pc, #448]	; (8014ed0 <tcp_process+0x2cc>)
 8014d0e:	681a      	ldr	r2, [r3, #0]
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2200      	movs	r2, #0
 8014d18:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f001 fc2d 	bl	8016584 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	7d1b      	ldrb	r3, [r3, #20]
 8014d2e:	3b02      	subs	r3, #2
 8014d30:	2b07      	cmp	r3, #7
 8014d32:	f200 8337 	bhi.w	80153a4 <tcp_process+0x7a0>
 8014d36:	a201      	add	r2, pc, #4	; (adr r2, 8014d3c <tcp_process+0x138>)
 8014d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d3c:	08014d5d 	.word	0x08014d5d
 8014d40:	08014f8d 	.word	0x08014f8d
 8014d44:	08015105 	.word	0x08015105
 8014d48:	0801512f 	.word	0x0801512f
 8014d4c:	08015253 	.word	0x08015253
 8014d50:	08015105 	.word	0x08015105
 8014d54:	080152df 	.word	0x080152df
 8014d58:	0801536f 	.word	0x0801536f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014d5c:	4b57      	ldr	r3, [pc, #348]	; (8014ebc <tcp_process+0x2b8>)
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	f003 0310 	and.w	r3, r3, #16
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	f000 80e4 	beq.w	8014f32 <tcp_process+0x32e>
 8014d6a:	4b54      	ldr	r3, [pc, #336]	; (8014ebc <tcp_process+0x2b8>)
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	f003 0302 	and.w	r3, r3, #2
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	f000 80dd 	beq.w	8014f32 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d7c:	1c5a      	adds	r2, r3, #1
 8014d7e:	4b50      	ldr	r3, [pc, #320]	; (8014ec0 <tcp_process+0x2bc>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	429a      	cmp	r2, r3
 8014d84:	f040 80d5 	bne.w	8014f32 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014d88:	4b4e      	ldr	r3, [pc, #312]	; (8014ec4 <tcp_process+0x2c0>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	1c5a      	adds	r2, r3, #1
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014d9a:	4b49      	ldr	r3, [pc, #292]	; (8014ec0 <tcp_process+0x2bc>)
 8014d9c:	681a      	ldr	r2, [r3, #0]
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014da2:	4b4c      	ldr	r3, [pc, #304]	; (8014ed4 <tcp_process+0x2d0>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	89db      	ldrh	r3, [r3, #14]
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014dbc:	4b41      	ldr	r3, [pc, #260]	; (8014ec4 <tcp_process+0x2c0>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	1e5a      	subs	r2, r3, #1
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2204      	movs	r2, #4
 8014dca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	3304      	adds	r3, #4
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f007 fad1 	bl	801c37c <ip4_route>
 8014dda:	4601      	mov	r1, r0
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	3304      	adds	r3, #4
 8014de0:	461a      	mov	r2, r3
 8014de2:	4620      	mov	r0, r4
 8014de4:	f7ff f88e 	bl	8013f04 <tcp_eff_send_mss_netif>
 8014de8:	4603      	mov	r3, r0
 8014dea:	461a      	mov	r2, r3
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014df4:	009a      	lsls	r2, r3, #2
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dfa:	005b      	lsls	r3, r3, #1
 8014dfc:	f241 111c 	movw	r1, #4380	; 0x111c
 8014e00:	428b      	cmp	r3, r1
 8014e02:	bf38      	it	cc
 8014e04:	460b      	movcc	r3, r1
 8014e06:	429a      	cmp	r2, r3
 8014e08:	d204      	bcs.n	8014e14 <tcp_process+0x210>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e0e:	009b      	lsls	r3, r3, #2
 8014e10:	b29b      	uxth	r3, r3
 8014e12:	e00d      	b.n	8014e30 <tcp_process+0x22c>
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e18:	005b      	lsls	r3, r3, #1
 8014e1a:	f241 121c 	movw	r2, #4380	; 0x111c
 8014e1e:	4293      	cmp	r3, r2
 8014e20:	d904      	bls.n	8014e2c <tcp_process+0x228>
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e26:	005b      	lsls	r3, r3, #1
 8014e28:	b29b      	uxth	r3, r3
 8014e2a:	e001      	b.n	8014e30 <tcp_process+0x22c>
 8014e2c:	f241 131c 	movw	r3, #4380	; 0x111c
 8014e30:	687a      	ldr	r2, [r7, #4]
 8014e32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d106      	bne.n	8014e4e <tcp_process+0x24a>
 8014e40:	4b1b      	ldr	r3, [pc, #108]	; (8014eb0 <tcp_process+0x2ac>)
 8014e42:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014e46:	4924      	ldr	r1, [pc, #144]	; (8014ed8 <tcp_process+0x2d4>)
 8014e48:	481b      	ldr	r0, [pc, #108]	; (8014eb8 <tcp_process+0x2b4>)
 8014e4a:	f009 fe17 	bl	801ea7c <iprintf>
        --pcb->snd_queuelen;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e54:	3b01      	subs	r3, #1
 8014e56:	b29a      	uxth	r2, r3
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e62:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d111      	bne.n	8014e8e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e6e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d106      	bne.n	8014e84 <tcp_process+0x280>
 8014e76:	4b0e      	ldr	r3, [pc, #56]	; (8014eb0 <tcp_process+0x2ac>)
 8014e78:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014e7c:	4917      	ldr	r1, [pc, #92]	; (8014edc <tcp_process+0x2d8>)
 8014e7e:	480e      	ldr	r0, [pc, #56]	; (8014eb8 <tcp_process+0x2b4>)
 8014e80:	f009 fdfc 	bl	801ea7c <iprintf>
          pcb->unsent = rseg->next;
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	681a      	ldr	r2, [r3, #0]
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	66da      	str	r2, [r3, #108]	; 0x6c
 8014e8c:	e003      	b.n	8014e96 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	681a      	ldr	r2, [r3, #0]
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014e96:	6978      	ldr	r0, [r7, #20]
 8014e98:	f7fe fc6f 	bl	801377a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d11d      	bne.n	8014ee0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014eaa:	861a      	strh	r2, [r3, #48]	; 0x30
 8014eac:	e01f      	b.n	8014eee <tcp_process+0x2ea>
 8014eae:	bf00      	nop
 8014eb0:	08024824 	.word	0x08024824
 8014eb4:	08024a5c 	.word	0x08024a5c
 8014eb8:	08024870 	.word	0x08024870
 8014ebc:	2001438c 	.word	0x2001438c
 8014ec0:	20014384 	.word	0x20014384
 8014ec4:	20014380 	.word	0x20014380
 8014ec8:	08024a78 	.word	0x08024a78
 8014ecc:	2001438d 	.word	0x2001438d
 8014ed0:	2001b0cc 	.word	0x2001b0cc
 8014ed4:	20014370 	.word	0x20014370
 8014ed8:	08024a98 	.word	0x08024a98
 8014edc:	08024ab0 	.word	0x08024ab0
        } else {
          pcb->rtime = 0;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d00a      	beq.n	8014f0e <tcp_process+0x30a>
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	6910      	ldr	r0, [r2, #16]
 8014f02:	2200      	movs	r2, #0
 8014f04:	6879      	ldr	r1, [r7, #4]
 8014f06:	4798      	blx	r3
 8014f08:	4603      	mov	r3, r0
 8014f0a:	77bb      	strb	r3, [r7, #30]
 8014f0c:	e001      	b.n	8014f12 <tcp_process+0x30e>
 8014f0e:	2300      	movs	r3, #0
 8014f10:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8014f12:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014f16:	f113 0f0d 	cmn.w	r3, #13
 8014f1a:	d102      	bne.n	8014f22 <tcp_process+0x31e>
          return ERR_ABRT;
 8014f1c:	f06f 030c 	mvn.w	r3, #12
 8014f20:	e250      	b.n	80153c4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	8b5b      	ldrh	r3, [r3, #26]
 8014f26:	f043 0302 	orr.w	r3, r3, #2
 8014f2a:	b29a      	uxth	r2, r3
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014f30:	e23a      	b.n	80153a8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014f32:	4b9d      	ldr	r3, [pc, #628]	; (80151a8 <tcp_process+0x5a4>)
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	f003 0310 	and.w	r3, r3, #16
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	f000 8234 	beq.w	80153a8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f40:	4b9a      	ldr	r3, [pc, #616]	; (80151ac <tcp_process+0x5a8>)
 8014f42:	6819      	ldr	r1, [r3, #0]
 8014f44:	4b9a      	ldr	r3, [pc, #616]	; (80151b0 <tcp_process+0x5ac>)
 8014f46:	881b      	ldrh	r3, [r3, #0]
 8014f48:	461a      	mov	r2, r3
 8014f4a:	4b9a      	ldr	r3, [pc, #616]	; (80151b4 <tcp_process+0x5b0>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f50:	4b99      	ldr	r3, [pc, #612]	; (80151b8 <tcp_process+0x5b4>)
 8014f52:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f54:	885b      	ldrh	r3, [r3, #2]
 8014f56:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f58:	4a97      	ldr	r2, [pc, #604]	; (80151b8 <tcp_process+0x5b4>)
 8014f5a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f5c:	8812      	ldrh	r2, [r2, #0]
 8014f5e:	b292      	uxth	r2, r2
 8014f60:	9202      	str	r2, [sp, #8]
 8014f62:	9301      	str	r3, [sp, #4]
 8014f64:	4b95      	ldr	r3, [pc, #596]	; (80151bc <tcp_process+0x5b8>)
 8014f66:	9300      	str	r3, [sp, #0]
 8014f68:	4b95      	ldr	r3, [pc, #596]	; (80151c0 <tcp_process+0x5bc>)
 8014f6a:	4602      	mov	r2, r0
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f003 f947 	bl	8018200 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f78:	2b05      	cmp	r3, #5
 8014f7a:	f200 8215 	bhi.w	80153a8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	2200      	movs	r2, #0
 8014f82:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014f84:	6878      	ldr	r0, [r7, #4]
 8014f86:	f002 ff11 	bl	8017dac <tcp_rexmit_rto>
      break;
 8014f8a:	e20d      	b.n	80153a8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014f8c:	4b86      	ldr	r3, [pc, #536]	; (80151a8 <tcp_process+0x5a4>)
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	f003 0310 	and.w	r3, r3, #16
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	f000 80a1 	beq.w	80150dc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f9a:	4b84      	ldr	r3, [pc, #528]	; (80151ac <tcp_process+0x5a8>)
 8014f9c:	681a      	ldr	r2, [r3, #0]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fa2:	1ad3      	subs	r3, r2, r3
 8014fa4:	3b01      	subs	r3, #1
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	db7e      	blt.n	80150a8 <tcp_process+0x4a4>
 8014faa:	4b80      	ldr	r3, [pc, #512]	; (80151ac <tcp_process+0x5a8>)
 8014fac:	681a      	ldr	r2, [r3, #0]
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fb2:	1ad3      	subs	r3, r2, r3
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	dc77      	bgt.n	80150a8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	2204      	movs	r2, #4
 8014fbc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d102      	bne.n	8014fcc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014fc6:	23fa      	movs	r3, #250	; 0xfa
 8014fc8:	77bb      	strb	r3, [r7, #30]
 8014fca:	e01d      	b.n	8015008 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014fd0:	699b      	ldr	r3, [r3, #24]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d106      	bne.n	8014fe4 <tcp_process+0x3e0>
 8014fd6:	4b7b      	ldr	r3, [pc, #492]	; (80151c4 <tcp_process+0x5c0>)
 8014fd8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014fdc:	497a      	ldr	r1, [pc, #488]	; (80151c8 <tcp_process+0x5c4>)
 8014fde:	487b      	ldr	r0, [pc, #492]	; (80151cc <tcp_process+0x5c8>)
 8014fe0:	f009 fd4c 	bl	801ea7c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014fe8:	699b      	ldr	r3, [r3, #24]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d00a      	beq.n	8015004 <tcp_process+0x400>
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ff2:	699b      	ldr	r3, [r3, #24]
 8014ff4:	687a      	ldr	r2, [r7, #4]
 8014ff6:	6910      	ldr	r0, [r2, #16]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	6879      	ldr	r1, [r7, #4]
 8014ffc:	4798      	blx	r3
 8014ffe:	4603      	mov	r3, r0
 8015000:	77bb      	strb	r3, [r7, #30]
 8015002:	e001      	b.n	8015008 <tcp_process+0x404>
 8015004:	23f0      	movs	r3, #240	; 0xf0
 8015006:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8015008:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d00a      	beq.n	8015026 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015010:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015014:	f113 0f0d 	cmn.w	r3, #13
 8015018:	d002      	beq.n	8015020 <tcp_process+0x41c>
              tcp_abort(pcb);
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f7fd fc02 	bl	8012824 <tcp_abort>
            }
            return ERR_ABRT;
 8015020:	f06f 030c 	mvn.w	r3, #12
 8015024:	e1ce      	b.n	80153c4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f000 fae0 	bl	80155ec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801502c:	4b68      	ldr	r3, [pc, #416]	; (80151d0 <tcp_process+0x5cc>)
 801502e:	881b      	ldrh	r3, [r3, #0]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d005      	beq.n	8015040 <tcp_process+0x43c>
            recv_acked--;
 8015034:	4b66      	ldr	r3, [pc, #408]	; (80151d0 <tcp_process+0x5cc>)
 8015036:	881b      	ldrh	r3, [r3, #0]
 8015038:	3b01      	subs	r3, #1
 801503a:	b29a      	uxth	r2, r3
 801503c:	4b64      	ldr	r3, [pc, #400]	; (80151d0 <tcp_process+0x5cc>)
 801503e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015044:	009a      	lsls	r2, r3, #2
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801504a:	005b      	lsls	r3, r3, #1
 801504c:	f241 111c 	movw	r1, #4380	; 0x111c
 8015050:	428b      	cmp	r3, r1
 8015052:	bf38      	it	cc
 8015054:	460b      	movcc	r3, r1
 8015056:	429a      	cmp	r2, r3
 8015058:	d204      	bcs.n	8015064 <tcp_process+0x460>
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801505e:	009b      	lsls	r3, r3, #2
 8015060:	b29b      	uxth	r3, r3
 8015062:	e00d      	b.n	8015080 <tcp_process+0x47c>
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015068:	005b      	lsls	r3, r3, #1
 801506a:	f241 121c 	movw	r2, #4380	; 0x111c
 801506e:	4293      	cmp	r3, r2
 8015070:	d904      	bls.n	801507c <tcp_process+0x478>
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015076:	005b      	lsls	r3, r3, #1
 8015078:	b29b      	uxth	r3, r3
 801507a:	e001      	b.n	8015080 <tcp_process+0x47c>
 801507c:	f241 131c 	movw	r3, #4380	; 0x111c
 8015080:	687a      	ldr	r2, [r7, #4]
 8015082:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015086:	4b53      	ldr	r3, [pc, #332]	; (80151d4 <tcp_process+0x5d0>)
 8015088:	781b      	ldrb	r3, [r3, #0]
 801508a:	f003 0320 	and.w	r3, r3, #32
 801508e:	2b00      	cmp	r3, #0
 8015090:	d037      	beq.n	8015102 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	8b5b      	ldrh	r3, [r3, #26]
 8015096:	f043 0302 	orr.w	r3, r3, #2
 801509a:	b29a      	uxth	r2, r3
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2207      	movs	r2, #7
 80150a4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80150a6:	e02c      	b.n	8015102 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150a8:	4b40      	ldr	r3, [pc, #256]	; (80151ac <tcp_process+0x5a8>)
 80150aa:	6819      	ldr	r1, [r3, #0]
 80150ac:	4b40      	ldr	r3, [pc, #256]	; (80151b0 <tcp_process+0x5ac>)
 80150ae:	881b      	ldrh	r3, [r3, #0]
 80150b0:	461a      	mov	r2, r3
 80150b2:	4b40      	ldr	r3, [pc, #256]	; (80151b4 <tcp_process+0x5b0>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150b8:	4b3f      	ldr	r3, [pc, #252]	; (80151b8 <tcp_process+0x5b4>)
 80150ba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150bc:	885b      	ldrh	r3, [r3, #2]
 80150be:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150c0:	4a3d      	ldr	r2, [pc, #244]	; (80151b8 <tcp_process+0x5b4>)
 80150c2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150c4:	8812      	ldrh	r2, [r2, #0]
 80150c6:	b292      	uxth	r2, r2
 80150c8:	9202      	str	r2, [sp, #8]
 80150ca:	9301      	str	r3, [sp, #4]
 80150cc:	4b3b      	ldr	r3, [pc, #236]	; (80151bc <tcp_process+0x5b8>)
 80150ce:	9300      	str	r3, [sp, #0]
 80150d0:	4b3b      	ldr	r3, [pc, #236]	; (80151c0 <tcp_process+0x5bc>)
 80150d2:	4602      	mov	r2, r0
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f003 f893 	bl	8018200 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80150da:	e167      	b.n	80153ac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80150dc:	4b32      	ldr	r3, [pc, #200]	; (80151a8 <tcp_process+0x5a4>)
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	f003 0302 	and.w	r3, r3, #2
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	f000 8161 	beq.w	80153ac <tcp_process+0x7a8>
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ee:	1e5a      	subs	r2, r3, #1
 80150f0:	4b30      	ldr	r3, [pc, #192]	; (80151b4 <tcp_process+0x5b0>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	f040 8159 	bne.w	80153ac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	f002 fe78 	bl	8017df0 <tcp_rexmit>
      break;
 8015100:	e154      	b.n	80153ac <tcp_process+0x7a8>
 8015102:	e153      	b.n	80153ac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f000 fa71 	bl	80155ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801510a:	4b32      	ldr	r3, [pc, #200]	; (80151d4 <tcp_process+0x5d0>)
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	f003 0320 	and.w	r3, r3, #32
 8015112:	2b00      	cmp	r3, #0
 8015114:	f000 814c 	beq.w	80153b0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	8b5b      	ldrh	r3, [r3, #26]
 801511c:	f043 0302 	orr.w	r3, r3, #2
 8015120:	b29a      	uxth	r2, r3
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2207      	movs	r2, #7
 801512a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801512c:	e140      	b.n	80153b0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f000 fa5c 	bl	80155ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015134:	4b27      	ldr	r3, [pc, #156]	; (80151d4 <tcp_process+0x5d0>)
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	f003 0320 	and.w	r3, r3, #32
 801513c:	2b00      	cmp	r3, #0
 801513e:	d071      	beq.n	8015224 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015140:	4b19      	ldr	r3, [pc, #100]	; (80151a8 <tcp_process+0x5a4>)
 8015142:	781b      	ldrb	r3, [r3, #0]
 8015144:	f003 0310 	and.w	r3, r3, #16
 8015148:	2b00      	cmp	r3, #0
 801514a:	d060      	beq.n	801520e <tcp_process+0x60a>
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015150:	4b16      	ldr	r3, [pc, #88]	; (80151ac <tcp_process+0x5a8>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	429a      	cmp	r2, r3
 8015156:	d15a      	bne.n	801520e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801515c:	2b00      	cmp	r3, #0
 801515e:	d156      	bne.n	801520e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	8b5b      	ldrh	r3, [r3, #26]
 8015164:	f043 0302 	orr.w	r3, r3, #2
 8015168:	b29a      	uxth	r2, r3
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f7fe fdbe 	bl	8013cf0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015174:	4b18      	ldr	r3, [pc, #96]	; (80151d8 <tcp_process+0x5d4>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	687a      	ldr	r2, [r7, #4]
 801517a:	429a      	cmp	r2, r3
 801517c:	d105      	bne.n	801518a <tcp_process+0x586>
 801517e:	4b16      	ldr	r3, [pc, #88]	; (80151d8 <tcp_process+0x5d4>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	68db      	ldr	r3, [r3, #12]
 8015184:	4a14      	ldr	r2, [pc, #80]	; (80151d8 <tcp_process+0x5d4>)
 8015186:	6013      	str	r3, [r2, #0]
 8015188:	e02e      	b.n	80151e8 <tcp_process+0x5e4>
 801518a:	4b13      	ldr	r3, [pc, #76]	; (80151d8 <tcp_process+0x5d4>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	613b      	str	r3, [r7, #16]
 8015190:	e027      	b.n	80151e2 <tcp_process+0x5de>
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	687a      	ldr	r2, [r7, #4]
 8015198:	429a      	cmp	r2, r3
 801519a:	d11f      	bne.n	80151dc <tcp_process+0x5d8>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	68da      	ldr	r2, [r3, #12]
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	60da      	str	r2, [r3, #12]
 80151a4:	e020      	b.n	80151e8 <tcp_process+0x5e4>
 80151a6:	bf00      	nop
 80151a8:	2001438c 	.word	0x2001438c
 80151ac:	20014384 	.word	0x20014384
 80151b0:	2001438a 	.word	0x2001438a
 80151b4:	20014380 	.word	0x20014380
 80151b8:	20014370 	.word	0x20014370
 80151bc:	200176e4 	.word	0x200176e4
 80151c0:	200176e8 	.word	0x200176e8
 80151c4:	08024824 	.word	0x08024824
 80151c8:	08024ac4 	.word	0x08024ac4
 80151cc:	08024870 	.word	0x08024870
 80151d0:	20014388 	.word	0x20014388
 80151d4:	2001438d 	.word	0x2001438d
 80151d8:	2001b0c8 	.word	0x2001b0c8
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	613b      	str	r3, [r7, #16]
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d1d4      	bne.n	8015192 <tcp_process+0x58e>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2200      	movs	r2, #0
 80151ec:	60da      	str	r2, [r3, #12]
 80151ee:	4b77      	ldr	r3, [pc, #476]	; (80153cc <tcp_process+0x7c8>)
 80151f0:	2201      	movs	r2, #1
 80151f2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	220a      	movs	r2, #10
 80151f8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80151fa:	4b75      	ldr	r3, [pc, #468]	; (80153d0 <tcp_process+0x7cc>)
 80151fc:	681a      	ldr	r2, [r3, #0]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	60da      	str	r2, [r3, #12]
 8015202:	4a73      	ldr	r2, [pc, #460]	; (80153d0 <tcp_process+0x7cc>)
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6013      	str	r3, [r2, #0]
 8015208:	f003 f9bc 	bl	8018584 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801520c:	e0d2      	b.n	80153b4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	8b5b      	ldrh	r3, [r3, #26]
 8015212:	f043 0302 	orr.w	r3, r3, #2
 8015216:	b29a      	uxth	r2, r3
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2208      	movs	r2, #8
 8015220:	751a      	strb	r2, [r3, #20]
      break;
 8015222:	e0c7      	b.n	80153b4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015224:	4b6b      	ldr	r3, [pc, #428]	; (80153d4 <tcp_process+0x7d0>)
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	f003 0310 	and.w	r3, r3, #16
 801522c:	2b00      	cmp	r3, #0
 801522e:	f000 80c1 	beq.w	80153b4 <tcp_process+0x7b0>
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015236:	4b68      	ldr	r3, [pc, #416]	; (80153d8 <tcp_process+0x7d4>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	429a      	cmp	r2, r3
 801523c:	f040 80ba 	bne.w	80153b4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015244:	2b00      	cmp	r3, #0
 8015246:	f040 80b5 	bne.w	80153b4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	2206      	movs	r2, #6
 801524e:	751a      	strb	r2, [r3, #20]
      break;
 8015250:	e0b0      	b.n	80153b4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f000 f9ca 	bl	80155ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015258:	4b60      	ldr	r3, [pc, #384]	; (80153dc <tcp_process+0x7d8>)
 801525a:	781b      	ldrb	r3, [r3, #0]
 801525c:	f003 0320 	and.w	r3, r3, #32
 8015260:	2b00      	cmp	r3, #0
 8015262:	f000 80a9 	beq.w	80153b8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	8b5b      	ldrh	r3, [r3, #26]
 801526a:	f043 0302 	orr.w	r3, r3, #2
 801526e:	b29a      	uxth	r2, r3
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f7fe fd3b 	bl	8013cf0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801527a:	4b59      	ldr	r3, [pc, #356]	; (80153e0 <tcp_process+0x7dc>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	429a      	cmp	r2, r3
 8015282:	d105      	bne.n	8015290 <tcp_process+0x68c>
 8015284:	4b56      	ldr	r3, [pc, #344]	; (80153e0 <tcp_process+0x7dc>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	68db      	ldr	r3, [r3, #12]
 801528a:	4a55      	ldr	r2, [pc, #340]	; (80153e0 <tcp_process+0x7dc>)
 801528c:	6013      	str	r3, [r2, #0]
 801528e:	e013      	b.n	80152b8 <tcp_process+0x6b4>
 8015290:	4b53      	ldr	r3, [pc, #332]	; (80153e0 <tcp_process+0x7dc>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	60fb      	str	r3, [r7, #12]
 8015296:	e00c      	b.n	80152b2 <tcp_process+0x6ae>
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	68db      	ldr	r3, [r3, #12]
 801529c:	687a      	ldr	r2, [r7, #4]
 801529e:	429a      	cmp	r2, r3
 80152a0:	d104      	bne.n	80152ac <tcp_process+0x6a8>
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	68da      	ldr	r2, [r3, #12]
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	60da      	str	r2, [r3, #12]
 80152aa:	e005      	b.n	80152b8 <tcp_process+0x6b4>
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	68db      	ldr	r3, [r3, #12]
 80152b0:	60fb      	str	r3, [r7, #12]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d1ef      	bne.n	8015298 <tcp_process+0x694>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2200      	movs	r2, #0
 80152bc:	60da      	str	r2, [r3, #12]
 80152be:	4b43      	ldr	r3, [pc, #268]	; (80153cc <tcp_process+0x7c8>)
 80152c0:	2201      	movs	r2, #1
 80152c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	220a      	movs	r2, #10
 80152c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80152ca:	4b41      	ldr	r3, [pc, #260]	; (80153d0 <tcp_process+0x7cc>)
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	60da      	str	r2, [r3, #12]
 80152d2:	4a3f      	ldr	r2, [pc, #252]	; (80153d0 <tcp_process+0x7cc>)
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	6013      	str	r3, [r2, #0]
 80152d8:	f003 f954 	bl	8018584 <tcp_timer_needed>
      }
      break;
 80152dc:	e06c      	b.n	80153b8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	f000 f984 	bl	80155ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80152e4:	4b3b      	ldr	r3, [pc, #236]	; (80153d4 <tcp_process+0x7d0>)
 80152e6:	781b      	ldrb	r3, [r3, #0]
 80152e8:	f003 0310 	and.w	r3, r3, #16
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d065      	beq.n	80153bc <tcp_process+0x7b8>
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152f4:	4b38      	ldr	r3, [pc, #224]	; (80153d8 <tcp_process+0x7d4>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d15f      	bne.n	80153bc <tcp_process+0x7b8>
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015300:	2b00      	cmp	r3, #0
 8015302:	d15b      	bne.n	80153bc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f7fe fcf3 	bl	8013cf0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801530a:	4b35      	ldr	r3, [pc, #212]	; (80153e0 <tcp_process+0x7dc>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	687a      	ldr	r2, [r7, #4]
 8015310:	429a      	cmp	r2, r3
 8015312:	d105      	bne.n	8015320 <tcp_process+0x71c>
 8015314:	4b32      	ldr	r3, [pc, #200]	; (80153e0 <tcp_process+0x7dc>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	68db      	ldr	r3, [r3, #12]
 801531a:	4a31      	ldr	r2, [pc, #196]	; (80153e0 <tcp_process+0x7dc>)
 801531c:	6013      	str	r3, [r2, #0]
 801531e:	e013      	b.n	8015348 <tcp_process+0x744>
 8015320:	4b2f      	ldr	r3, [pc, #188]	; (80153e0 <tcp_process+0x7dc>)
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	61bb      	str	r3, [r7, #24]
 8015326:	e00c      	b.n	8015342 <tcp_process+0x73e>
 8015328:	69bb      	ldr	r3, [r7, #24]
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	687a      	ldr	r2, [r7, #4]
 801532e:	429a      	cmp	r2, r3
 8015330:	d104      	bne.n	801533c <tcp_process+0x738>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	68da      	ldr	r2, [r3, #12]
 8015336:	69bb      	ldr	r3, [r7, #24]
 8015338:	60da      	str	r2, [r3, #12]
 801533a:	e005      	b.n	8015348 <tcp_process+0x744>
 801533c:	69bb      	ldr	r3, [r7, #24]
 801533e:	68db      	ldr	r3, [r3, #12]
 8015340:	61bb      	str	r3, [r7, #24]
 8015342:	69bb      	ldr	r3, [r7, #24]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d1ef      	bne.n	8015328 <tcp_process+0x724>
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2200      	movs	r2, #0
 801534c:	60da      	str	r2, [r3, #12]
 801534e:	4b1f      	ldr	r3, [pc, #124]	; (80153cc <tcp_process+0x7c8>)
 8015350:	2201      	movs	r2, #1
 8015352:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	220a      	movs	r2, #10
 8015358:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801535a:	4b1d      	ldr	r3, [pc, #116]	; (80153d0 <tcp_process+0x7cc>)
 801535c:	681a      	ldr	r2, [r3, #0]
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	60da      	str	r2, [r3, #12]
 8015362:	4a1b      	ldr	r2, [pc, #108]	; (80153d0 <tcp_process+0x7cc>)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6013      	str	r3, [r2, #0]
 8015368:	f003 f90c 	bl	8018584 <tcp_timer_needed>
      }
      break;
 801536c:	e026      	b.n	80153bc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f000 f93c 	bl	80155ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015374:	4b17      	ldr	r3, [pc, #92]	; (80153d4 <tcp_process+0x7d0>)
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	f003 0310 	and.w	r3, r3, #16
 801537c:	2b00      	cmp	r3, #0
 801537e:	d01f      	beq.n	80153c0 <tcp_process+0x7bc>
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015384:	4b14      	ldr	r3, [pc, #80]	; (80153d8 <tcp_process+0x7d4>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	429a      	cmp	r2, r3
 801538a:	d119      	bne.n	80153c0 <tcp_process+0x7bc>
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015390:	2b00      	cmp	r3, #0
 8015392:	d115      	bne.n	80153c0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015394:	4b11      	ldr	r3, [pc, #68]	; (80153dc <tcp_process+0x7d8>)
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	f043 0310 	orr.w	r3, r3, #16
 801539c:	b2da      	uxtb	r2, r3
 801539e:	4b0f      	ldr	r3, [pc, #60]	; (80153dc <tcp_process+0x7d8>)
 80153a0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80153a2:	e00d      	b.n	80153c0 <tcp_process+0x7bc>
    default:
      break;
 80153a4:	bf00      	nop
 80153a6:	e00c      	b.n	80153c2 <tcp_process+0x7be>
      break;
 80153a8:	bf00      	nop
 80153aa:	e00a      	b.n	80153c2 <tcp_process+0x7be>
      break;
 80153ac:	bf00      	nop
 80153ae:	e008      	b.n	80153c2 <tcp_process+0x7be>
      break;
 80153b0:	bf00      	nop
 80153b2:	e006      	b.n	80153c2 <tcp_process+0x7be>
      break;
 80153b4:	bf00      	nop
 80153b6:	e004      	b.n	80153c2 <tcp_process+0x7be>
      break;
 80153b8:	bf00      	nop
 80153ba:	e002      	b.n	80153c2 <tcp_process+0x7be>
      break;
 80153bc:	bf00      	nop
 80153be:	e000      	b.n	80153c2 <tcp_process+0x7be>
      break;
 80153c0:	bf00      	nop
  }
  return ERR_OK;
 80153c2:	2300      	movs	r3, #0
}
 80153c4:	4618      	mov	r0, r3
 80153c6:	3724      	adds	r7, #36	; 0x24
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd90      	pop	{r4, r7, pc}
 80153cc:	2001b0c4 	.word	0x2001b0c4
 80153d0:	2001b0d8 	.word	0x2001b0d8
 80153d4:	2001438c 	.word	0x2001438c
 80153d8:	20014384 	.word	0x20014384
 80153dc:	2001438d 	.word	0x2001438d
 80153e0:	2001b0c8 	.word	0x2001b0c8

080153e4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80153e4:	b590      	push	{r4, r7, lr}
 80153e6:	b085      	sub	sp, #20
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d106      	bne.n	8015402 <tcp_oos_insert_segment+0x1e>
 80153f4:	4b3b      	ldr	r3, [pc, #236]	; (80154e4 <tcp_oos_insert_segment+0x100>)
 80153f6:	f240 421f 	movw	r2, #1055	; 0x41f
 80153fa:	493b      	ldr	r1, [pc, #236]	; (80154e8 <tcp_oos_insert_segment+0x104>)
 80153fc:	483b      	ldr	r0, [pc, #236]	; (80154ec <tcp_oos_insert_segment+0x108>)
 80153fe:	f009 fb3d 	bl	801ea7c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	691b      	ldr	r3, [r3, #16]
 8015406:	899b      	ldrh	r3, [r3, #12]
 8015408:	b29b      	uxth	r3, r3
 801540a:	4618      	mov	r0, r3
 801540c:	f7f9 fece 	bl	800f1ac <lwip_htons>
 8015410:	4603      	mov	r3, r0
 8015412:	b2db      	uxtb	r3, r3
 8015414:	f003 0301 	and.w	r3, r3, #1
 8015418:	2b00      	cmp	r3, #0
 801541a:	d028      	beq.n	801546e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801541c:	6838      	ldr	r0, [r7, #0]
 801541e:	f7fe f997 	bl	8013750 <tcp_segs_free>
    next = NULL;
 8015422:	2300      	movs	r3, #0
 8015424:	603b      	str	r3, [r7, #0]
 8015426:	e056      	b.n	80154d6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	691b      	ldr	r3, [r3, #16]
 801542c:	899b      	ldrh	r3, [r3, #12]
 801542e:	b29b      	uxth	r3, r3
 8015430:	4618      	mov	r0, r3
 8015432:	f7f9 febb 	bl	800f1ac <lwip_htons>
 8015436:	4603      	mov	r3, r0
 8015438:	b2db      	uxtb	r3, r3
 801543a:	f003 0301 	and.w	r3, r3, #1
 801543e:	2b00      	cmp	r3, #0
 8015440:	d00d      	beq.n	801545e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	691b      	ldr	r3, [r3, #16]
 8015446:	899b      	ldrh	r3, [r3, #12]
 8015448:	b29c      	uxth	r4, r3
 801544a:	2001      	movs	r0, #1
 801544c:	f7f9 feae 	bl	800f1ac <lwip_htons>
 8015450:	4603      	mov	r3, r0
 8015452:	461a      	mov	r2, r3
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	691b      	ldr	r3, [r3, #16]
 8015458:	4322      	orrs	r2, r4
 801545a:	b292      	uxth	r2, r2
 801545c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015468:	68f8      	ldr	r0, [r7, #12]
 801546a:	f7fe f986 	bl	801377a <tcp_seg_free>
    while (next &&
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d00e      	beq.n	8015492 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	891b      	ldrh	r3, [r3, #8]
 8015478:	461a      	mov	r2, r3
 801547a:	4b1d      	ldr	r3, [pc, #116]	; (80154f0 <tcp_oos_insert_segment+0x10c>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	441a      	add	r2, r3
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	691b      	ldr	r3, [r3, #16]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	6839      	ldr	r1, [r7, #0]
 8015488:	8909      	ldrh	r1, [r1, #8]
 801548a:	440b      	add	r3, r1
 801548c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801548e:	2b00      	cmp	r3, #0
 8015490:	daca      	bge.n	8015428 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d01e      	beq.n	80154d6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	891b      	ldrh	r3, [r3, #8]
 801549c:	461a      	mov	r2, r3
 801549e:	4b14      	ldr	r3, [pc, #80]	; (80154f0 <tcp_oos_insert_segment+0x10c>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	441a      	add	r2, r3
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	691b      	ldr	r3, [r3, #16]
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	1ad3      	subs	r3, r2, r3
    if (next &&
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	dd12      	ble.n	80154d6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	691b      	ldr	r3, [r3, #16]
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	b29a      	uxth	r2, r3
 80154b8:	4b0d      	ldr	r3, [pc, #52]	; (80154f0 <tcp_oos_insert_segment+0x10c>)
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	b29b      	uxth	r3, r3
 80154be:	1ad3      	subs	r3, r2, r3
 80154c0:	b29a      	uxth	r2, r3
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	685a      	ldr	r2, [r3, #4]
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	891b      	ldrh	r3, [r3, #8]
 80154ce:	4619      	mov	r1, r3
 80154d0:	4610      	mov	r0, r2
 80154d2:	f7fc f873 	bl	80115bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	683a      	ldr	r2, [r7, #0]
 80154da:	601a      	str	r2, [r3, #0]
}
 80154dc:	bf00      	nop
 80154de:	3714      	adds	r7, #20
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd90      	pop	{r4, r7, pc}
 80154e4:	08024824 	.word	0x08024824
 80154e8:	08024ae4 	.word	0x08024ae4
 80154ec:	08024870 	.word	0x08024870
 80154f0:	20014380 	.word	0x20014380

080154f4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80154f4:	b5b0      	push	{r4, r5, r7, lr}
 80154f6:	b086      	sub	sp, #24
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	607a      	str	r2, [r7, #4]
 8015500:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015502:	e03e      	b.n	8015582 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	4618      	mov	r0, r3
 8015514:	f7fc fa98 	bl	8011a48 <pbuf_clen>
 8015518:	4603      	mov	r3, r0
 801551a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015522:	8a7a      	ldrh	r2, [r7, #18]
 8015524:	429a      	cmp	r2, r3
 8015526:	d906      	bls.n	8015536 <tcp_free_acked_segments+0x42>
 8015528:	4b2a      	ldr	r3, [pc, #168]	; (80155d4 <tcp_free_acked_segments+0xe0>)
 801552a:	f240 4257 	movw	r2, #1111	; 0x457
 801552e:	492a      	ldr	r1, [pc, #168]	; (80155d8 <tcp_free_acked_segments+0xe4>)
 8015530:	482a      	ldr	r0, [pc, #168]	; (80155dc <tcp_free_acked_segments+0xe8>)
 8015532:	f009 faa3 	bl	801ea7c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801553c:	8a7b      	ldrh	r3, [r7, #18]
 801553e:	1ad3      	subs	r3, r2, r3
 8015540:	b29a      	uxth	r2, r3
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015548:	697b      	ldr	r3, [r7, #20]
 801554a:	891a      	ldrh	r2, [r3, #8]
 801554c:	4b24      	ldr	r3, [pc, #144]	; (80155e0 <tcp_free_acked_segments+0xec>)
 801554e:	881b      	ldrh	r3, [r3, #0]
 8015550:	4413      	add	r3, r2
 8015552:	b29a      	uxth	r2, r3
 8015554:	4b22      	ldr	r3, [pc, #136]	; (80155e0 <tcp_free_acked_segments+0xec>)
 8015556:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015558:	6978      	ldr	r0, [r7, #20]
 801555a:	f7fe f90e 	bl	801377a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015564:	2b00      	cmp	r3, #0
 8015566:	d00c      	beq.n	8015582 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d109      	bne.n	8015582 <tcp_free_acked_segments+0x8e>
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d106      	bne.n	8015582 <tcp_free_acked_segments+0x8e>
 8015574:	4b17      	ldr	r3, [pc, #92]	; (80155d4 <tcp_free_acked_segments+0xe0>)
 8015576:	f240 4261 	movw	r2, #1121	; 0x461
 801557a:	491a      	ldr	r1, [pc, #104]	; (80155e4 <tcp_free_acked_segments+0xf0>)
 801557c:	4817      	ldr	r0, [pc, #92]	; (80155dc <tcp_free_acked_segments+0xe8>)
 801557e:	f009 fa7d 	bl	801ea7c <iprintf>
  while (seg_list != NULL &&
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d020      	beq.n	80155ca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	691b      	ldr	r3, [r3, #16]
 801558c:	685b      	ldr	r3, [r3, #4]
 801558e:	4618      	mov	r0, r3
 8015590:	f7f9 fe21 	bl	800f1d6 <lwip_htonl>
 8015594:	4604      	mov	r4, r0
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	891b      	ldrh	r3, [r3, #8]
 801559a:	461d      	mov	r5, r3
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	691b      	ldr	r3, [r3, #16]
 80155a0:	899b      	ldrh	r3, [r3, #12]
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7f9 fe01 	bl	800f1ac <lwip_htons>
 80155aa:	4603      	mov	r3, r0
 80155ac:	b2db      	uxtb	r3, r3
 80155ae:	f003 0303 	and.w	r3, r3, #3
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d001      	beq.n	80155ba <tcp_free_acked_segments+0xc6>
 80155b6:	2301      	movs	r3, #1
 80155b8:	e000      	b.n	80155bc <tcp_free_acked_segments+0xc8>
 80155ba:	2300      	movs	r3, #0
 80155bc:	442b      	add	r3, r5
 80155be:	18e2      	adds	r2, r4, r3
 80155c0:	4b09      	ldr	r3, [pc, #36]	; (80155e8 <tcp_free_acked_segments+0xf4>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	dd9c      	ble.n	8015504 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80155ca:	68bb      	ldr	r3, [r7, #8]
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3718      	adds	r7, #24
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bdb0      	pop	{r4, r5, r7, pc}
 80155d4:	08024824 	.word	0x08024824
 80155d8:	08024b0c 	.word	0x08024b0c
 80155dc:	08024870 	.word	0x08024870
 80155e0:	20014388 	.word	0x20014388
 80155e4:	08024b34 	.word	0x08024b34
 80155e8:	20014384 	.word	0x20014384

080155ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80155ec:	b5b0      	push	{r4, r5, r7, lr}
 80155ee:	b094      	sub	sp, #80	; 0x50
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80155f4:	2300      	movs	r3, #0
 80155f6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d106      	bne.n	801560c <tcp_receive+0x20>
 80155fe:	4ba6      	ldr	r3, [pc, #664]	; (8015898 <tcp_receive+0x2ac>)
 8015600:	f240 427b 	movw	r2, #1147	; 0x47b
 8015604:	49a5      	ldr	r1, [pc, #660]	; (801589c <tcp_receive+0x2b0>)
 8015606:	48a6      	ldr	r0, [pc, #664]	; (80158a0 <tcp_receive+0x2b4>)
 8015608:	f009 fa38 	bl	801ea7c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	7d1b      	ldrb	r3, [r3, #20]
 8015610:	2b03      	cmp	r3, #3
 8015612:	d806      	bhi.n	8015622 <tcp_receive+0x36>
 8015614:	4ba0      	ldr	r3, [pc, #640]	; (8015898 <tcp_receive+0x2ac>)
 8015616:	f240 427c 	movw	r2, #1148	; 0x47c
 801561a:	49a2      	ldr	r1, [pc, #648]	; (80158a4 <tcp_receive+0x2b8>)
 801561c:	48a0      	ldr	r0, [pc, #640]	; (80158a0 <tcp_receive+0x2b4>)
 801561e:	f009 fa2d 	bl	801ea7c <iprintf>

  if (flags & TCP_ACK) {
 8015622:	4ba1      	ldr	r3, [pc, #644]	; (80158a8 <tcp_receive+0x2bc>)
 8015624:	781b      	ldrb	r3, [r3, #0]
 8015626:	f003 0310 	and.w	r3, r3, #16
 801562a:	2b00      	cmp	r3, #0
 801562c:	f000 8263 	beq.w	8015af6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015636:	461a      	mov	r2, r3
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801563c:	4413      	add	r3, r2
 801563e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015644:	4b99      	ldr	r3, [pc, #612]	; (80158ac <tcp_receive+0x2c0>)
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	1ad3      	subs	r3, r2, r3
 801564a:	2b00      	cmp	r3, #0
 801564c:	db1b      	blt.n	8015686 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015652:	4b96      	ldr	r3, [pc, #600]	; (80158ac <tcp_receive+0x2c0>)
 8015654:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015656:	429a      	cmp	r2, r3
 8015658:	d106      	bne.n	8015668 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801565e:	4b94      	ldr	r3, [pc, #592]	; (80158b0 <tcp_receive+0x2c4>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	1ad3      	subs	r3, r2, r3
 8015664:	2b00      	cmp	r3, #0
 8015666:	db0e      	blt.n	8015686 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801566c:	4b90      	ldr	r3, [pc, #576]	; (80158b0 <tcp_receive+0x2c4>)
 801566e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015670:	429a      	cmp	r2, r3
 8015672:	d125      	bne.n	80156c0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015674:	4b8f      	ldr	r3, [pc, #572]	; (80158b4 <tcp_receive+0x2c8>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	89db      	ldrh	r3, [r3, #14]
 801567a:	b29a      	uxth	r2, r3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015682:	429a      	cmp	r2, r3
 8015684:	d91c      	bls.n	80156c0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015686:	4b8b      	ldr	r3, [pc, #556]	; (80158b4 <tcp_receive+0x2c8>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	89db      	ldrh	r3, [r3, #14]
 801568c:	b29a      	uxth	r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d205      	bcs.n	80156b0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80156b0:	4b7e      	ldr	r3, [pc, #504]	; (80158ac <tcp_receive+0x2c0>)
 80156b2:	681a      	ldr	r2, [r3, #0]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80156b8:	4b7d      	ldr	r3, [pc, #500]	; (80158b0 <tcp_receive+0x2c4>)
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80156c0:	4b7b      	ldr	r3, [pc, #492]	; (80158b0 <tcp_receive+0x2c4>)
 80156c2:	681a      	ldr	r2, [r3, #0]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156c8:	1ad3      	subs	r3, r2, r3
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	dc58      	bgt.n	8015780 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80156ce:	4b7a      	ldr	r3, [pc, #488]	; (80158b8 <tcp_receive+0x2cc>)
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d14b      	bne.n	801576e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156da:	687a      	ldr	r2, [r7, #4]
 80156dc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80156e0:	4413      	add	r3, r2
 80156e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d142      	bne.n	801576e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	db3d      	blt.n	801576e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80156f6:	4b6e      	ldr	r3, [pc, #440]	; (80158b0 <tcp_receive+0x2c4>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d137      	bne.n	801576e <tcp_receive+0x182>
              found_dupack = 1;
 80156fe:	2301      	movs	r3, #1
 8015700:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015708:	2bff      	cmp	r3, #255	; 0xff
 801570a:	d007      	beq.n	801571c <tcp_receive+0x130>
                ++pcb->dupacks;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015712:	3301      	adds	r3, #1
 8015714:	b2da      	uxtb	r2, r3
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015722:	2b03      	cmp	r3, #3
 8015724:	d91b      	bls.n	801575e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015730:	4413      	add	r3, r2
 8015732:	b29a      	uxth	r2, r3
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801573a:	429a      	cmp	r2, r3
 801573c:	d30a      	bcc.n	8015754 <tcp_receive+0x168>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015748:	4413      	add	r3, r2
 801574a:	b29a      	uxth	r2, r3
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015752:	e004      	b.n	801575e <tcp_receive+0x172>
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801575a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015764:	2b02      	cmp	r3, #2
 8015766:	d902      	bls.n	801576e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f002 fbad 	bl	8017ec8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801576e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015770:	2b00      	cmp	r3, #0
 8015772:	f040 8160 	bne.w	8015a36 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	2200      	movs	r2, #0
 801577a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801577e:	e15a      	b.n	8015a36 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015780:	4b4b      	ldr	r3, [pc, #300]	; (80158b0 <tcp_receive+0x2c4>)
 8015782:	681a      	ldr	r2, [r3, #0]
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015788:	1ad3      	subs	r3, r2, r3
 801578a:	3b01      	subs	r3, #1
 801578c:	2b00      	cmp	r3, #0
 801578e:	f2c0 814d 	blt.w	8015a2c <tcp_receive+0x440>
 8015792:	4b47      	ldr	r3, [pc, #284]	; (80158b0 <tcp_receive+0x2c4>)
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801579a:	1ad3      	subs	r3, r2, r3
 801579c:	2b00      	cmp	r3, #0
 801579e:	f300 8145 	bgt.w	8015a2c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	8b5b      	ldrh	r3, [r3, #26]
 80157a6:	f003 0304 	and.w	r3, r3, #4
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d010      	beq.n	80157d0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	8b5b      	ldrh	r3, [r3, #26]
 80157b2:	f023 0304 	bic.w	r3, r3, #4
 80157b6:	b29a      	uxth	r2, r3
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2200      	movs	r2, #0
 80157cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2200      	movs	r2, #0
 80157d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80157de:	10db      	asrs	r3, r3, #3
 80157e0:	b21b      	sxth	r3, r3
 80157e2:	b29a      	uxth	r2, r3
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80157ea:	b29b      	uxth	r3, r3
 80157ec:	4413      	add	r3, r2
 80157ee:	b29b      	uxth	r3, r3
 80157f0:	b21a      	sxth	r2, r3
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80157f8:	4b2d      	ldr	r3, [pc, #180]	; (80158b0 <tcp_receive+0x2c4>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	b29a      	uxth	r2, r3
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015802:	b29b      	uxth	r3, r3
 8015804:	1ad3      	subs	r3, r2, r3
 8015806:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	2200      	movs	r2, #0
 801580c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015810:	4b27      	ldr	r3, [pc, #156]	; (80158b0 <tcp_receive+0x2c4>)
 8015812:	681a      	ldr	r2, [r3, #0]
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	7d1b      	ldrb	r3, [r3, #20]
 801581c:	2b03      	cmp	r3, #3
 801581e:	f240 8096 	bls.w	801594e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801582e:	429a      	cmp	r2, r3
 8015830:	d244      	bcs.n	80158bc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	8b5b      	ldrh	r3, [r3, #26]
 8015836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801583a:	2b00      	cmp	r3, #0
 801583c:	d001      	beq.n	8015842 <tcp_receive+0x256>
 801583e:	2301      	movs	r3, #1
 8015840:	e000      	b.n	8015844 <tcp_receive+0x258>
 8015842:	2302      	movs	r3, #2
 8015844:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015848:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801584c:	b29a      	uxth	r2, r3
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015852:	fb12 f303 	smulbb	r3, r2, r3
 8015856:	b29b      	uxth	r3, r3
 8015858:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801585a:	4293      	cmp	r3, r2
 801585c:	bf28      	it	cs
 801585e:	4613      	movcs	r3, r2
 8015860:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015868:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801586a:	4413      	add	r3, r2
 801586c:	b29a      	uxth	r2, r3
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015874:	429a      	cmp	r2, r3
 8015876:	d309      	bcc.n	801588c <tcp_receive+0x2a0>
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801587e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015880:	4413      	add	r3, r2
 8015882:	b29a      	uxth	r2, r3
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801588a:	e060      	b.n	801594e <tcp_receive+0x362>
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015892:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015896:	e05a      	b.n	801594e <tcp_receive+0x362>
 8015898:	08024824 	.word	0x08024824
 801589c:	08024b54 	.word	0x08024b54
 80158a0:	08024870 	.word	0x08024870
 80158a4:	08024b70 	.word	0x08024b70
 80158a8:	2001438c 	.word	0x2001438c
 80158ac:	20014380 	.word	0x20014380
 80158b0:	20014384 	.word	0x20014384
 80158b4:	20014370 	.word	0x20014370
 80158b8:	2001438a 	.word	0x2001438a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80158c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80158c4:	4413      	add	r3, r2
 80158c6:	b29a      	uxth	r2, r3
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d309      	bcc.n	80158e6 <tcp_receive+0x2fa>
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80158d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80158da:	4413      	add	r3, r2
 80158dc:	b29a      	uxth	r2, r3
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80158e4:	e004      	b.n	80158f0 <tcp_receive+0x304>
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80158ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d326      	bcc.n	801594e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801590c:	1ad3      	subs	r3, r2, r3
 801590e:	b29a      	uxth	r2, r3
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015920:	4413      	add	r3, r2
 8015922:	b29a      	uxth	r2, r3
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801592a:	429a      	cmp	r2, r3
 801592c:	d30a      	bcc.n	8015944 <tcp_receive+0x358>
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015938:	4413      	add	r3, r2
 801593a:	b29a      	uxth	r2, r3
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015942:	e004      	b.n	801594e <tcp_receive+0x362>
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801594a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015956:	4a98      	ldr	r2, [pc, #608]	; (8015bb8 <tcp_receive+0x5cc>)
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f7ff fdcb 	bl	80154f4 <tcp_free_acked_segments>
 801595e:	4602      	mov	r2, r0
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801596c:	4a93      	ldr	r2, [pc, #588]	; (8015bbc <tcp_receive+0x5d0>)
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f7ff fdc0 	bl	80154f4 <tcp_free_acked_segments>
 8015974:	4602      	mov	r2, r0
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801597e:	2b00      	cmp	r3, #0
 8015980:	d104      	bne.n	801598c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015988:	861a      	strh	r2, [r3, #48]	; 0x30
 801598a:	e002      	b.n	8015992 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2200      	movs	r2, #0
 8015990:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	2200      	movs	r2, #0
 8015996:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801599c:	2b00      	cmp	r3, #0
 801599e:	d103      	bne.n	80159a8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	2200      	movs	r2, #0
 80159a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80159ae:	4b84      	ldr	r3, [pc, #528]	; (8015bc0 <tcp_receive+0x5d4>)
 80159b0:	881b      	ldrh	r3, [r3, #0]
 80159b2:	4413      	add	r3, r2
 80159b4:	b29a      	uxth	r2, r3
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	8b5b      	ldrh	r3, [r3, #26]
 80159c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d035      	beq.n	8015a34 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d118      	bne.n	8015a02 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d00c      	beq.n	80159f2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159e0:	691b      	ldr	r3, [r3, #16]
 80159e2:	685b      	ldr	r3, [r3, #4]
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7f9 fbf6 	bl	800f1d6 <lwip_htonl>
 80159ea:	4603      	mov	r3, r0
 80159ec:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	dc20      	bgt.n	8015a34 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	8b5b      	ldrh	r3, [r3, #26]
 80159f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80159fa:	b29a      	uxth	r2, r3
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015a00:	e018      	b.n	8015a34 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a0a:	691b      	ldr	r3, [r3, #16]
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7f9 fbe1 	bl	800f1d6 <lwip_htonl>
 8015a14:	4603      	mov	r3, r0
 8015a16:	1ae3      	subs	r3, r4, r3
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	dc0b      	bgt.n	8015a34 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	8b5b      	ldrh	r3, [r3, #26]
 8015a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015a24:	b29a      	uxth	r2, r3
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015a2a:	e003      	b.n	8015a34 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f002 fc39 	bl	80182a4 <tcp_send_empty_ack>
 8015a32:	e000      	b.n	8015a36 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015a34:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d05b      	beq.n	8015af6 <tcp_receive+0x50a>
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a42:	4b60      	ldr	r3, [pc, #384]	; (8015bc4 <tcp_receive+0x5d8>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	1ad3      	subs	r3, r2, r3
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	da54      	bge.n	8015af6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015a4c:	4b5e      	ldr	r3, [pc, #376]	; (8015bc8 <tcp_receive+0x5dc>)
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	b29a      	uxth	r2, r3
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	1ad3      	subs	r3, r2, r3
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015a60:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a6a:	10db      	asrs	r3, r3, #3
 8015a6c:	b21b      	sxth	r3, r3
 8015a6e:	b29b      	uxth	r3, r3
 8015a70:	1ad3      	subs	r3, r2, r3
 8015a72:	b29b      	uxth	r3, r3
 8015a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a7e:	b29a      	uxth	r2, r3
 8015a80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015a84:	4413      	add	r3, r2
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	b21a      	sxth	r2, r3
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015a8e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	da05      	bge.n	8015aa2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8015a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015a9a:	425b      	negs	r3, r3
 8015a9c:	b29b      	uxth	r3, r3
 8015a9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015aa2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015aac:	109b      	asrs	r3, r3, #2
 8015aae:	b21b      	sxth	r3, r3
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	1ad3      	subs	r3, r2, r3
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015ac0:	b29a      	uxth	r2, r3
 8015ac2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015ac6:	4413      	add	r3, r2
 8015ac8:	b29b      	uxth	r3, r3
 8015aca:	b21a      	sxth	r2, r3
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015ad6:	10db      	asrs	r3, r3, #3
 8015ad8:	b21b      	sxth	r3, r3
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	4413      	add	r3, r2
 8015ae6:	b29b      	uxth	r3, r3
 8015ae8:	b21a      	sxth	r2, r3
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2200      	movs	r2, #0
 8015af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015af6:	4b35      	ldr	r3, [pc, #212]	; (8015bcc <tcp_receive+0x5e0>)
 8015af8:	881b      	ldrh	r3, [r3, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	f000 84e1 	beq.w	80164c2 <tcp_receive+0xed6>
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	7d1b      	ldrb	r3, [r3, #20]
 8015b04:	2b06      	cmp	r3, #6
 8015b06:	f200 84dc 	bhi.w	80164c2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b0e:	4b30      	ldr	r3, [pc, #192]	; (8015bd0 <tcp_receive+0x5e4>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	1ad3      	subs	r3, r2, r3
 8015b14:	3b01      	subs	r3, #1
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	f2c0 808e 	blt.w	8015c38 <tcp_receive+0x64c>
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b20:	4b2a      	ldr	r3, [pc, #168]	; (8015bcc <tcp_receive+0x5e0>)
 8015b22:	881b      	ldrh	r3, [r3, #0]
 8015b24:	4619      	mov	r1, r3
 8015b26:	4b2a      	ldr	r3, [pc, #168]	; (8015bd0 <tcp_receive+0x5e4>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	440b      	add	r3, r1
 8015b2c:	1ad3      	subs	r3, r2, r3
 8015b2e:	3301      	adds	r3, #1
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	f300 8081 	bgt.w	8015c38 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015b36:	4b27      	ldr	r3, [pc, #156]	; (8015bd4 <tcp_receive+0x5e8>)
 8015b38:	685b      	ldr	r3, [r3, #4]
 8015b3a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b40:	4b23      	ldr	r3, [pc, #140]	; (8015bd0 <tcp_receive+0x5e4>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	1ad3      	subs	r3, r2, r3
 8015b46:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015b48:	4b22      	ldr	r3, [pc, #136]	; (8015bd4 <tcp_receive+0x5e8>)
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d106      	bne.n	8015b5e <tcp_receive+0x572>
 8015b50:	4b21      	ldr	r3, [pc, #132]	; (8015bd8 <tcp_receive+0x5ec>)
 8015b52:	f240 5294 	movw	r2, #1428	; 0x594
 8015b56:	4921      	ldr	r1, [pc, #132]	; (8015bdc <tcp_receive+0x5f0>)
 8015b58:	4821      	ldr	r0, [pc, #132]	; (8015be0 <tcp_receive+0x5f4>)
 8015b5a:	f008 ff8f 	bl	801ea7c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015b64:	4293      	cmp	r3, r2
 8015b66:	d906      	bls.n	8015b76 <tcp_receive+0x58a>
 8015b68:	4b1b      	ldr	r3, [pc, #108]	; (8015bd8 <tcp_receive+0x5ec>)
 8015b6a:	f240 5295 	movw	r2, #1429	; 0x595
 8015b6e:	491d      	ldr	r1, [pc, #116]	; (8015be4 <tcp_receive+0x5f8>)
 8015b70:	481b      	ldr	r0, [pc, #108]	; (8015be0 <tcp_receive+0x5f4>)
 8015b72:	f008 ff83 	bl	801ea7c <iprintf>
      off = (u16_t)off32;
 8015b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015b7c:	4b15      	ldr	r3, [pc, #84]	; (8015bd4 <tcp_receive+0x5e8>)
 8015b7e:	685b      	ldr	r3, [r3, #4]
 8015b80:	891b      	ldrh	r3, [r3, #8]
 8015b82:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b86:	429a      	cmp	r2, r3
 8015b88:	d906      	bls.n	8015b98 <tcp_receive+0x5ac>
 8015b8a:	4b13      	ldr	r3, [pc, #76]	; (8015bd8 <tcp_receive+0x5ec>)
 8015b8c:	f240 5297 	movw	r2, #1431	; 0x597
 8015b90:	4915      	ldr	r1, [pc, #84]	; (8015be8 <tcp_receive+0x5fc>)
 8015b92:	4813      	ldr	r0, [pc, #76]	; (8015be0 <tcp_receive+0x5f4>)
 8015b94:	f008 ff72 	bl	801ea7c <iprintf>
      inseg.len -= off;
 8015b98:	4b0e      	ldr	r3, [pc, #56]	; (8015bd4 <tcp_receive+0x5e8>)
 8015b9a:	891a      	ldrh	r2, [r3, #8]
 8015b9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015ba0:	1ad3      	subs	r3, r2, r3
 8015ba2:	b29a      	uxth	r2, r3
 8015ba4:	4b0b      	ldr	r3, [pc, #44]	; (8015bd4 <tcp_receive+0x5e8>)
 8015ba6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015ba8:	4b0a      	ldr	r3, [pc, #40]	; (8015bd4 <tcp_receive+0x5e8>)
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	891a      	ldrh	r2, [r3, #8]
 8015bae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015bb2:	1ad3      	subs	r3, r2, r3
 8015bb4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015bb6:	e029      	b.n	8015c0c <tcp_receive+0x620>
 8015bb8:	08024b8c 	.word	0x08024b8c
 8015bbc:	08024b94 	.word	0x08024b94
 8015bc0:	20014388 	.word	0x20014388
 8015bc4:	20014384 	.word	0x20014384
 8015bc8:	2001b0cc 	.word	0x2001b0cc
 8015bcc:	2001438a 	.word	0x2001438a
 8015bd0:	20014380 	.word	0x20014380
 8015bd4:	2001435c 	.word	0x2001435c
 8015bd8:	08024824 	.word	0x08024824
 8015bdc:	08024b9c 	.word	0x08024b9c
 8015be0:	08024870 	.word	0x08024870
 8015be4:	08024bac 	.word	0x08024bac
 8015be8:	08024bbc 	.word	0x08024bbc
        off -= p->len;
 8015bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bee:	895b      	ldrh	r3, [r3, #10]
 8015bf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015bf4:	1ad3      	subs	r3, r2, r3
 8015bf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bfc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015bfe:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c02:	2200      	movs	r2, #0
 8015c04:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c0e:	895b      	ldrh	r3, [r3, #10]
 8015c10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d8e9      	bhi.n	8015bec <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015c18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015c1c:	4619      	mov	r1, r3
 8015c1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015c20:	f7fb fdcc 	bl	80117bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c28:	4a91      	ldr	r2, [pc, #580]	; (8015e70 <tcp_receive+0x884>)
 8015c2a:	6013      	str	r3, [r2, #0]
 8015c2c:	4b91      	ldr	r3, [pc, #580]	; (8015e74 <tcp_receive+0x888>)
 8015c2e:	691b      	ldr	r3, [r3, #16]
 8015c30:	4a8f      	ldr	r2, [pc, #572]	; (8015e70 <tcp_receive+0x884>)
 8015c32:	6812      	ldr	r2, [r2, #0]
 8015c34:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015c36:	e00d      	b.n	8015c54 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015c38:	4b8d      	ldr	r3, [pc, #564]	; (8015e70 <tcp_receive+0x884>)
 8015c3a:	681a      	ldr	r2, [r3, #0]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c40:	1ad3      	subs	r3, r2, r3
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	da06      	bge.n	8015c54 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	8b5b      	ldrh	r3, [r3, #26]
 8015c4a:	f043 0302 	orr.w	r3, r3, #2
 8015c4e:	b29a      	uxth	r2, r3
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015c54:	4b86      	ldr	r3, [pc, #536]	; (8015e70 <tcp_receive+0x884>)
 8015c56:	681a      	ldr	r2, [r3, #0]
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c5c:	1ad3      	subs	r3, r2, r3
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	f2c0 842a 	blt.w	80164b8 <tcp_receive+0xecc>
 8015c64:	4b82      	ldr	r3, [pc, #520]	; (8015e70 <tcp_receive+0x884>)
 8015c66:	681a      	ldr	r2, [r3, #0]
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c6c:	6879      	ldr	r1, [r7, #4]
 8015c6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c70:	440b      	add	r3, r1
 8015c72:	1ad3      	subs	r3, r2, r3
 8015c74:	3301      	adds	r3, #1
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	f300 841e 	bgt.w	80164b8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c80:	4b7b      	ldr	r3, [pc, #492]	; (8015e70 <tcp_receive+0x884>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	429a      	cmp	r2, r3
 8015c86:	f040 829a 	bne.w	80161be <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015c8a:	4b7a      	ldr	r3, [pc, #488]	; (8015e74 <tcp_receive+0x888>)
 8015c8c:	891c      	ldrh	r4, [r3, #8]
 8015c8e:	4b79      	ldr	r3, [pc, #484]	; (8015e74 <tcp_receive+0x888>)
 8015c90:	691b      	ldr	r3, [r3, #16]
 8015c92:	899b      	ldrh	r3, [r3, #12]
 8015c94:	b29b      	uxth	r3, r3
 8015c96:	4618      	mov	r0, r3
 8015c98:	f7f9 fa88 	bl	800f1ac <lwip_htons>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	b2db      	uxtb	r3, r3
 8015ca0:	f003 0303 	and.w	r3, r3, #3
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d001      	beq.n	8015cac <tcp_receive+0x6c0>
 8015ca8:	2301      	movs	r3, #1
 8015caa:	e000      	b.n	8015cae <tcp_receive+0x6c2>
 8015cac:	2300      	movs	r3, #0
 8015cae:	4423      	add	r3, r4
 8015cb0:	b29a      	uxth	r2, r3
 8015cb2:	4b71      	ldr	r3, [pc, #452]	; (8015e78 <tcp_receive+0x88c>)
 8015cb4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015cba:	4b6f      	ldr	r3, [pc, #444]	; (8015e78 <tcp_receive+0x88c>)
 8015cbc:	881b      	ldrh	r3, [r3, #0]
 8015cbe:	429a      	cmp	r2, r3
 8015cc0:	d275      	bcs.n	8015dae <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015cc2:	4b6c      	ldr	r3, [pc, #432]	; (8015e74 <tcp_receive+0x888>)
 8015cc4:	691b      	ldr	r3, [r3, #16]
 8015cc6:	899b      	ldrh	r3, [r3, #12]
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f7f9 fa6e 	bl	800f1ac <lwip_htons>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	f003 0301 	and.w	r3, r3, #1
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d01f      	beq.n	8015d1c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015cdc:	4b65      	ldr	r3, [pc, #404]	; (8015e74 <tcp_receive+0x888>)
 8015cde:	691b      	ldr	r3, [r3, #16]
 8015ce0:	899b      	ldrh	r3, [r3, #12]
 8015ce2:	b29b      	uxth	r3, r3
 8015ce4:	b21b      	sxth	r3, r3
 8015ce6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015cea:	b21c      	sxth	r4, r3
 8015cec:	4b61      	ldr	r3, [pc, #388]	; (8015e74 <tcp_receive+0x888>)
 8015cee:	691b      	ldr	r3, [r3, #16]
 8015cf0:	899b      	ldrh	r3, [r3, #12]
 8015cf2:	b29b      	uxth	r3, r3
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7f9 fa59 	bl	800f1ac <lwip_htons>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	b2db      	uxtb	r3, r3
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7f9 fa50 	bl	800f1ac <lwip_htons>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	b21b      	sxth	r3, r3
 8015d10:	4323      	orrs	r3, r4
 8015d12:	b21a      	sxth	r2, r3
 8015d14:	4b57      	ldr	r3, [pc, #348]	; (8015e74 <tcp_receive+0x888>)
 8015d16:	691b      	ldr	r3, [r3, #16]
 8015d18:	b292      	uxth	r2, r2
 8015d1a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015d20:	4b54      	ldr	r3, [pc, #336]	; (8015e74 <tcp_receive+0x888>)
 8015d22:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015d24:	4b53      	ldr	r3, [pc, #332]	; (8015e74 <tcp_receive+0x888>)
 8015d26:	691b      	ldr	r3, [r3, #16]
 8015d28:	899b      	ldrh	r3, [r3, #12]
 8015d2a:	b29b      	uxth	r3, r3
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7f9 fa3d 	bl	800f1ac <lwip_htons>
 8015d32:	4603      	mov	r3, r0
 8015d34:	b2db      	uxtb	r3, r3
 8015d36:	f003 0302 	and.w	r3, r3, #2
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d005      	beq.n	8015d4a <tcp_receive+0x75e>
            inseg.len -= 1;
 8015d3e:	4b4d      	ldr	r3, [pc, #308]	; (8015e74 <tcp_receive+0x888>)
 8015d40:	891b      	ldrh	r3, [r3, #8]
 8015d42:	3b01      	subs	r3, #1
 8015d44:	b29a      	uxth	r2, r3
 8015d46:	4b4b      	ldr	r3, [pc, #300]	; (8015e74 <tcp_receive+0x888>)
 8015d48:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015d4a:	4b4a      	ldr	r3, [pc, #296]	; (8015e74 <tcp_receive+0x888>)
 8015d4c:	685b      	ldr	r3, [r3, #4]
 8015d4e:	4a49      	ldr	r2, [pc, #292]	; (8015e74 <tcp_receive+0x888>)
 8015d50:	8912      	ldrh	r2, [r2, #8]
 8015d52:	4611      	mov	r1, r2
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7fb fc31 	bl	80115bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015d5a:	4b46      	ldr	r3, [pc, #280]	; (8015e74 <tcp_receive+0x888>)
 8015d5c:	891c      	ldrh	r4, [r3, #8]
 8015d5e:	4b45      	ldr	r3, [pc, #276]	; (8015e74 <tcp_receive+0x888>)
 8015d60:	691b      	ldr	r3, [r3, #16]
 8015d62:	899b      	ldrh	r3, [r3, #12]
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	4618      	mov	r0, r3
 8015d68:	f7f9 fa20 	bl	800f1ac <lwip_htons>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	b2db      	uxtb	r3, r3
 8015d70:	f003 0303 	and.w	r3, r3, #3
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d001      	beq.n	8015d7c <tcp_receive+0x790>
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e000      	b.n	8015d7e <tcp_receive+0x792>
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	4423      	add	r3, r4
 8015d80:	b29a      	uxth	r2, r3
 8015d82:	4b3d      	ldr	r3, [pc, #244]	; (8015e78 <tcp_receive+0x88c>)
 8015d84:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015d86:	4b3c      	ldr	r3, [pc, #240]	; (8015e78 <tcp_receive+0x88c>)
 8015d88:	881b      	ldrh	r3, [r3, #0]
 8015d8a:	461a      	mov	r2, r3
 8015d8c:	4b38      	ldr	r3, [pc, #224]	; (8015e70 <tcp_receive+0x884>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	441a      	add	r2, r3
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d96:	6879      	ldr	r1, [r7, #4]
 8015d98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015d9a:	440b      	add	r3, r1
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d006      	beq.n	8015dae <tcp_receive+0x7c2>
 8015da0:	4b36      	ldr	r3, [pc, #216]	; (8015e7c <tcp_receive+0x890>)
 8015da2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015da6:	4936      	ldr	r1, [pc, #216]	; (8015e80 <tcp_receive+0x894>)
 8015da8:	4836      	ldr	r0, [pc, #216]	; (8015e84 <tcp_receive+0x898>)
 8015daa:	f008 fe67 	bl	801ea7c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	f000 80e7 	beq.w	8015f86 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015db8:	4b2e      	ldr	r3, [pc, #184]	; (8015e74 <tcp_receive+0x888>)
 8015dba:	691b      	ldr	r3, [r3, #16]
 8015dbc:	899b      	ldrh	r3, [r3, #12]
 8015dbe:	b29b      	uxth	r3, r3
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f7f9 f9f3 	bl	800f1ac <lwip_htons>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	f003 0301 	and.w	r3, r3, #1
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d010      	beq.n	8015df4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015dd2:	e00a      	b.n	8015dea <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015dd8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015de4:	68f8      	ldr	r0, [r7, #12]
 8015de6:	f7fd fcc8 	bl	801377a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d1f0      	bne.n	8015dd4 <tcp_receive+0x7e8>
 8015df2:	e0c8      	b.n	8015f86 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015df8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015dfa:	e052      	b.n	8015ea2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dfe:	691b      	ldr	r3, [r3, #16]
 8015e00:	899b      	ldrh	r3, [r3, #12]
 8015e02:	b29b      	uxth	r3, r3
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7f9 f9d1 	bl	800f1ac <lwip_htons>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	b2db      	uxtb	r3, r3
 8015e0e:	f003 0301 	and.w	r3, r3, #1
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d03d      	beq.n	8015e92 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015e16:	4b17      	ldr	r3, [pc, #92]	; (8015e74 <tcp_receive+0x888>)
 8015e18:	691b      	ldr	r3, [r3, #16]
 8015e1a:	899b      	ldrh	r3, [r3, #12]
 8015e1c:	b29b      	uxth	r3, r3
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f7f9 f9c4 	bl	800f1ac <lwip_htons>
 8015e24:	4603      	mov	r3, r0
 8015e26:	b2db      	uxtb	r3, r3
 8015e28:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d130      	bne.n	8015e92 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015e30:	4b10      	ldr	r3, [pc, #64]	; (8015e74 <tcp_receive+0x888>)
 8015e32:	691b      	ldr	r3, [r3, #16]
 8015e34:	899b      	ldrh	r3, [r3, #12]
 8015e36:	b29c      	uxth	r4, r3
 8015e38:	2001      	movs	r0, #1
 8015e3a:	f7f9 f9b7 	bl	800f1ac <lwip_htons>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	461a      	mov	r2, r3
 8015e42:	4b0c      	ldr	r3, [pc, #48]	; (8015e74 <tcp_receive+0x888>)
 8015e44:	691b      	ldr	r3, [r3, #16]
 8015e46:	4322      	orrs	r2, r4
 8015e48:	b292      	uxth	r2, r2
 8015e4a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015e4c:	4b09      	ldr	r3, [pc, #36]	; (8015e74 <tcp_receive+0x888>)
 8015e4e:	891c      	ldrh	r4, [r3, #8]
 8015e50:	4b08      	ldr	r3, [pc, #32]	; (8015e74 <tcp_receive+0x888>)
 8015e52:	691b      	ldr	r3, [r3, #16]
 8015e54:	899b      	ldrh	r3, [r3, #12]
 8015e56:	b29b      	uxth	r3, r3
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f7f9 f9a7 	bl	800f1ac <lwip_htons>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	f003 0303 	and.w	r3, r3, #3
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d00e      	beq.n	8015e88 <tcp_receive+0x89c>
 8015e6a:	2301      	movs	r3, #1
 8015e6c:	e00d      	b.n	8015e8a <tcp_receive+0x89e>
 8015e6e:	bf00      	nop
 8015e70:	20014380 	.word	0x20014380
 8015e74:	2001435c 	.word	0x2001435c
 8015e78:	2001438a 	.word	0x2001438a
 8015e7c:	08024824 	.word	0x08024824
 8015e80:	08024bcc 	.word	0x08024bcc
 8015e84:	08024870 	.word	0x08024870
 8015e88:	2300      	movs	r3, #0
 8015e8a:	4423      	add	r3, r4
 8015e8c:	b29a      	uxth	r2, r3
 8015e8e:	4b98      	ldr	r3, [pc, #608]	; (80160f0 <tcp_receive+0xb04>)
 8015e90:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e94:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015e9c:	6938      	ldr	r0, [r7, #16]
 8015e9e:	f7fd fc6c 	bl	801377a <tcp_seg_free>
            while (next &&
 8015ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d00e      	beq.n	8015ec6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015ea8:	4b91      	ldr	r3, [pc, #580]	; (80160f0 <tcp_receive+0xb04>)
 8015eaa:	881b      	ldrh	r3, [r3, #0]
 8015eac:	461a      	mov	r2, r3
 8015eae:	4b91      	ldr	r3, [pc, #580]	; (80160f4 <tcp_receive+0xb08>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	441a      	add	r2, r3
 8015eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eb6:	691b      	ldr	r3, [r3, #16]
 8015eb8:	685b      	ldr	r3, [r3, #4]
 8015eba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015ebc:	8909      	ldrh	r1, [r1, #8]
 8015ebe:	440b      	add	r3, r1
 8015ec0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	da9a      	bge.n	8015dfc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d059      	beq.n	8015f80 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015ecc:	4b88      	ldr	r3, [pc, #544]	; (80160f0 <tcp_receive+0xb04>)
 8015ece:	881b      	ldrh	r3, [r3, #0]
 8015ed0:	461a      	mov	r2, r3
 8015ed2:	4b88      	ldr	r3, [pc, #544]	; (80160f4 <tcp_receive+0xb08>)
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	441a      	add	r2, r3
 8015ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eda:	691b      	ldr	r3, [r3, #16]
 8015edc:	685b      	ldr	r3, [r3, #4]
 8015ede:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	dd4d      	ble.n	8015f80 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ee6:	691b      	ldr	r3, [r3, #16]
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	b29a      	uxth	r2, r3
 8015eec:	4b81      	ldr	r3, [pc, #516]	; (80160f4 <tcp_receive+0xb08>)
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	b29b      	uxth	r3, r3
 8015ef2:	1ad3      	subs	r3, r2, r3
 8015ef4:	b29a      	uxth	r2, r3
 8015ef6:	4b80      	ldr	r3, [pc, #512]	; (80160f8 <tcp_receive+0xb0c>)
 8015ef8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015efa:	4b7f      	ldr	r3, [pc, #508]	; (80160f8 <tcp_receive+0xb0c>)
 8015efc:	691b      	ldr	r3, [r3, #16]
 8015efe:	899b      	ldrh	r3, [r3, #12]
 8015f00:	b29b      	uxth	r3, r3
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7f9 f952 	bl	800f1ac <lwip_htons>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	b2db      	uxtb	r3, r3
 8015f0c:	f003 0302 	and.w	r3, r3, #2
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d005      	beq.n	8015f20 <tcp_receive+0x934>
                inseg.len -= 1;
 8015f14:	4b78      	ldr	r3, [pc, #480]	; (80160f8 <tcp_receive+0xb0c>)
 8015f16:	891b      	ldrh	r3, [r3, #8]
 8015f18:	3b01      	subs	r3, #1
 8015f1a:	b29a      	uxth	r2, r3
 8015f1c:	4b76      	ldr	r3, [pc, #472]	; (80160f8 <tcp_receive+0xb0c>)
 8015f1e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015f20:	4b75      	ldr	r3, [pc, #468]	; (80160f8 <tcp_receive+0xb0c>)
 8015f22:	685b      	ldr	r3, [r3, #4]
 8015f24:	4a74      	ldr	r2, [pc, #464]	; (80160f8 <tcp_receive+0xb0c>)
 8015f26:	8912      	ldrh	r2, [r2, #8]
 8015f28:	4611      	mov	r1, r2
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f7fb fb46 	bl	80115bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015f30:	4b71      	ldr	r3, [pc, #452]	; (80160f8 <tcp_receive+0xb0c>)
 8015f32:	891c      	ldrh	r4, [r3, #8]
 8015f34:	4b70      	ldr	r3, [pc, #448]	; (80160f8 <tcp_receive+0xb0c>)
 8015f36:	691b      	ldr	r3, [r3, #16]
 8015f38:	899b      	ldrh	r3, [r3, #12]
 8015f3a:	b29b      	uxth	r3, r3
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f7f9 f935 	bl	800f1ac <lwip_htons>
 8015f42:	4603      	mov	r3, r0
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	f003 0303 	and.w	r3, r3, #3
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d001      	beq.n	8015f52 <tcp_receive+0x966>
 8015f4e:	2301      	movs	r3, #1
 8015f50:	e000      	b.n	8015f54 <tcp_receive+0x968>
 8015f52:	2300      	movs	r3, #0
 8015f54:	4423      	add	r3, r4
 8015f56:	b29a      	uxth	r2, r3
 8015f58:	4b65      	ldr	r3, [pc, #404]	; (80160f0 <tcp_receive+0xb04>)
 8015f5a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015f5c:	4b64      	ldr	r3, [pc, #400]	; (80160f0 <tcp_receive+0xb04>)
 8015f5e:	881b      	ldrh	r3, [r3, #0]
 8015f60:	461a      	mov	r2, r3
 8015f62:	4b64      	ldr	r3, [pc, #400]	; (80160f4 <tcp_receive+0xb08>)
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	441a      	add	r2, r3
 8015f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f6a:	691b      	ldr	r3, [r3, #16]
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d006      	beq.n	8015f80 <tcp_receive+0x994>
 8015f72:	4b62      	ldr	r3, [pc, #392]	; (80160fc <tcp_receive+0xb10>)
 8015f74:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015f78:	4961      	ldr	r1, [pc, #388]	; (8016100 <tcp_receive+0xb14>)
 8015f7a:	4862      	ldr	r0, [pc, #392]	; (8016104 <tcp_receive+0xb18>)
 8015f7c:	f008 fd7e 	bl	801ea7c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015f84:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015f86:	4b5a      	ldr	r3, [pc, #360]	; (80160f0 <tcp_receive+0xb04>)
 8015f88:	881b      	ldrh	r3, [r3, #0]
 8015f8a:	461a      	mov	r2, r3
 8015f8c:	4b59      	ldr	r3, [pc, #356]	; (80160f4 <tcp_receive+0xb08>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	441a      	add	r2, r3
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015f9a:	4b55      	ldr	r3, [pc, #340]	; (80160f0 <tcp_receive+0xb04>)
 8015f9c:	881b      	ldrh	r3, [r3, #0]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d206      	bcs.n	8015fb0 <tcp_receive+0x9c4>
 8015fa2:	4b56      	ldr	r3, [pc, #344]	; (80160fc <tcp_receive+0xb10>)
 8015fa4:	f240 6207 	movw	r2, #1543	; 0x607
 8015fa8:	4957      	ldr	r1, [pc, #348]	; (8016108 <tcp_receive+0xb1c>)
 8015faa:	4856      	ldr	r0, [pc, #344]	; (8016104 <tcp_receive+0xb18>)
 8015fac:	f008 fd66 	bl	801ea7c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015fb4:	4b4e      	ldr	r3, [pc, #312]	; (80160f0 <tcp_receive+0xb04>)
 8015fb6:	881b      	ldrh	r3, [r3, #0]
 8015fb8:	1ad3      	subs	r3, r2, r3
 8015fba:	b29a      	uxth	r2, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f7fc fd9d 	bl	8012b00 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015fc6:	4b4c      	ldr	r3, [pc, #304]	; (80160f8 <tcp_receive+0xb0c>)
 8015fc8:	685b      	ldr	r3, [r3, #4]
 8015fca:	891b      	ldrh	r3, [r3, #8]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d006      	beq.n	8015fde <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015fd0:	4b49      	ldr	r3, [pc, #292]	; (80160f8 <tcp_receive+0xb0c>)
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	4a4d      	ldr	r2, [pc, #308]	; (801610c <tcp_receive+0xb20>)
 8015fd6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015fd8:	4b47      	ldr	r3, [pc, #284]	; (80160f8 <tcp_receive+0xb0c>)
 8015fda:	2200      	movs	r2, #0
 8015fdc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015fde:	4b46      	ldr	r3, [pc, #280]	; (80160f8 <tcp_receive+0xb0c>)
 8015fe0:	691b      	ldr	r3, [r3, #16]
 8015fe2:	899b      	ldrh	r3, [r3, #12]
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7f9 f8e0 	bl	800f1ac <lwip_htons>
 8015fec:	4603      	mov	r3, r0
 8015fee:	b2db      	uxtb	r3, r3
 8015ff0:	f003 0301 	and.w	r3, r3, #1
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	f000 80b8 	beq.w	801616a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015ffa:	4b45      	ldr	r3, [pc, #276]	; (8016110 <tcp_receive+0xb24>)
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	f043 0320 	orr.w	r3, r3, #32
 8016002:	b2da      	uxtb	r2, r3
 8016004:	4b42      	ldr	r3, [pc, #264]	; (8016110 <tcp_receive+0xb24>)
 8016006:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016008:	e0af      	b.n	801616a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801600e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016014:	691b      	ldr	r3, [r3, #16]
 8016016:	685b      	ldr	r3, [r3, #4]
 8016018:	4a36      	ldr	r2, [pc, #216]	; (80160f4 <tcp_receive+0xb08>)
 801601a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	891b      	ldrh	r3, [r3, #8]
 8016020:	461c      	mov	r4, r3
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	691b      	ldr	r3, [r3, #16]
 8016026:	899b      	ldrh	r3, [r3, #12]
 8016028:	b29b      	uxth	r3, r3
 801602a:	4618      	mov	r0, r3
 801602c:	f7f9 f8be 	bl	800f1ac <lwip_htons>
 8016030:	4603      	mov	r3, r0
 8016032:	b2db      	uxtb	r3, r3
 8016034:	f003 0303 	and.w	r3, r3, #3
 8016038:	2b00      	cmp	r3, #0
 801603a:	d001      	beq.n	8016040 <tcp_receive+0xa54>
 801603c:	2301      	movs	r3, #1
 801603e:	e000      	b.n	8016042 <tcp_receive+0xa56>
 8016040:	2300      	movs	r3, #0
 8016042:	191a      	adds	r2, r3, r4
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016048:	441a      	add	r2, r3
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016052:	461c      	mov	r4, r3
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	891b      	ldrh	r3, [r3, #8]
 8016058:	461d      	mov	r5, r3
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	691b      	ldr	r3, [r3, #16]
 801605e:	899b      	ldrh	r3, [r3, #12]
 8016060:	b29b      	uxth	r3, r3
 8016062:	4618      	mov	r0, r3
 8016064:	f7f9 f8a2 	bl	800f1ac <lwip_htons>
 8016068:	4603      	mov	r3, r0
 801606a:	b2db      	uxtb	r3, r3
 801606c:	f003 0303 	and.w	r3, r3, #3
 8016070:	2b00      	cmp	r3, #0
 8016072:	d001      	beq.n	8016078 <tcp_receive+0xa8c>
 8016074:	2301      	movs	r3, #1
 8016076:	e000      	b.n	801607a <tcp_receive+0xa8e>
 8016078:	2300      	movs	r3, #0
 801607a:	442b      	add	r3, r5
 801607c:	429c      	cmp	r4, r3
 801607e:	d206      	bcs.n	801608e <tcp_receive+0xaa2>
 8016080:	4b1e      	ldr	r3, [pc, #120]	; (80160fc <tcp_receive+0xb10>)
 8016082:	f240 622b 	movw	r2, #1579	; 0x62b
 8016086:	4923      	ldr	r1, [pc, #140]	; (8016114 <tcp_receive+0xb28>)
 8016088:	481e      	ldr	r0, [pc, #120]	; (8016104 <tcp_receive+0xb18>)
 801608a:	f008 fcf7 	bl	801ea7c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	891b      	ldrh	r3, [r3, #8]
 8016092:	461c      	mov	r4, r3
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	691b      	ldr	r3, [r3, #16]
 8016098:	899b      	ldrh	r3, [r3, #12]
 801609a:	b29b      	uxth	r3, r3
 801609c:	4618      	mov	r0, r3
 801609e:	f7f9 f885 	bl	800f1ac <lwip_htons>
 80160a2:	4603      	mov	r3, r0
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	f003 0303 	and.w	r3, r3, #3
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d001      	beq.n	80160b2 <tcp_receive+0xac6>
 80160ae:	2301      	movs	r3, #1
 80160b0:	e000      	b.n	80160b4 <tcp_receive+0xac8>
 80160b2:	2300      	movs	r3, #0
 80160b4:	1919      	adds	r1, r3, r4
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80160ba:	b28b      	uxth	r3, r1
 80160bc:	1ad3      	subs	r3, r2, r3
 80160be:	b29a      	uxth	r2, r3
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f7fc fd1b 	bl	8012b00 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	891b      	ldrh	r3, [r3, #8]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d028      	beq.n	8016126 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80160d4:	4b0d      	ldr	r3, [pc, #52]	; (801610c <tcp_receive+0xb20>)
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d01d      	beq.n	8016118 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80160dc:	4b0b      	ldr	r3, [pc, #44]	; (801610c <tcp_receive+0xb20>)
 80160de:	681a      	ldr	r2, [r3, #0]
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	685b      	ldr	r3, [r3, #4]
 80160e4:	4619      	mov	r1, r3
 80160e6:	4610      	mov	r0, r2
 80160e8:	f7fb fcee 	bl	8011ac8 <pbuf_cat>
 80160ec:	e018      	b.n	8016120 <tcp_receive+0xb34>
 80160ee:	bf00      	nop
 80160f0:	2001438a 	.word	0x2001438a
 80160f4:	20014380 	.word	0x20014380
 80160f8:	2001435c 	.word	0x2001435c
 80160fc:	08024824 	.word	0x08024824
 8016100:	08024c04 	.word	0x08024c04
 8016104:	08024870 	.word	0x08024870
 8016108:	08024c40 	.word	0x08024c40
 801610c:	20014390 	.word	0x20014390
 8016110:	2001438d 	.word	0x2001438d
 8016114:	08024c60 	.word	0x08024c60
            } else {
              recv_data = cseg->p;
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	685b      	ldr	r3, [r3, #4]
 801611c:	4a70      	ldr	r2, [pc, #448]	; (80162e0 <tcp_receive+0xcf4>)
 801611e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	2200      	movs	r2, #0
 8016124:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	691b      	ldr	r3, [r3, #16]
 801612a:	899b      	ldrh	r3, [r3, #12]
 801612c:	b29b      	uxth	r3, r3
 801612e:	4618      	mov	r0, r3
 8016130:	f7f9 f83c 	bl	800f1ac <lwip_htons>
 8016134:	4603      	mov	r3, r0
 8016136:	b2db      	uxtb	r3, r3
 8016138:	f003 0301 	and.w	r3, r3, #1
 801613c:	2b00      	cmp	r3, #0
 801613e:	d00d      	beq.n	801615c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016140:	4b68      	ldr	r3, [pc, #416]	; (80162e4 <tcp_receive+0xcf8>)
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	f043 0320 	orr.w	r3, r3, #32
 8016148:	b2da      	uxtb	r2, r3
 801614a:	4b66      	ldr	r3, [pc, #408]	; (80162e4 <tcp_receive+0xcf8>)
 801614c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	7d1b      	ldrb	r3, [r3, #20]
 8016152:	2b04      	cmp	r3, #4
 8016154:	d102      	bne.n	801615c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	2207      	movs	r2, #7
 801615a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801615c:	68bb      	ldr	r3, [r7, #8]
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016164:	68b8      	ldr	r0, [r7, #8]
 8016166:	f7fd fb08 	bl	801377a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801616e:	2b00      	cmp	r3, #0
 8016170:	d008      	beq.n	8016184 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016176:	691b      	ldr	r3, [r3, #16]
 8016178:	685a      	ldr	r2, [r3, #4]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801617e:	429a      	cmp	r2, r3
 8016180:	f43f af43 	beq.w	801600a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	8b5b      	ldrh	r3, [r3, #26]
 8016188:	f003 0301 	and.w	r3, r3, #1
 801618c:	2b00      	cmp	r3, #0
 801618e:	d00e      	beq.n	80161ae <tcp_receive+0xbc2>
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	8b5b      	ldrh	r3, [r3, #26]
 8016194:	f023 0301 	bic.w	r3, r3, #1
 8016198:	b29a      	uxth	r2, r3
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	835a      	strh	r2, [r3, #26]
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	8b5b      	ldrh	r3, [r3, #26]
 80161a2:	f043 0302 	orr.w	r3, r3, #2
 80161a6:	b29a      	uxth	r2, r3
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80161ac:	e188      	b.n	80164c0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	8b5b      	ldrh	r3, [r3, #26]
 80161b2:	f043 0301 	orr.w	r3, r3, #1
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80161bc:	e180      	b.n	80164c0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d106      	bne.n	80161d4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80161c6:	4848      	ldr	r0, [pc, #288]	; (80162e8 <tcp_receive+0xcfc>)
 80161c8:	f7fd faf0 	bl	80137ac <tcp_seg_copy>
 80161cc:	4602      	mov	r2, r0
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	675a      	str	r2, [r3, #116]	; 0x74
 80161d2:	e16d      	b.n	80164b0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80161d4:	2300      	movs	r3, #0
 80161d6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80161dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80161de:	e157      	b.n	8016490 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80161e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161e2:	691b      	ldr	r3, [r3, #16]
 80161e4:	685a      	ldr	r2, [r3, #4]
 80161e6:	4b41      	ldr	r3, [pc, #260]	; (80162ec <tcp_receive+0xd00>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d11d      	bne.n	801622a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80161ee:	4b3e      	ldr	r3, [pc, #248]	; (80162e8 <tcp_receive+0xcfc>)
 80161f0:	891a      	ldrh	r2, [r3, #8]
 80161f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f4:	891b      	ldrh	r3, [r3, #8]
 80161f6:	429a      	cmp	r2, r3
 80161f8:	f240 814f 	bls.w	801649a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80161fc:	483a      	ldr	r0, [pc, #232]	; (80162e8 <tcp_receive+0xcfc>)
 80161fe:	f7fd fad5 	bl	80137ac <tcp_seg_copy>
 8016202:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	2b00      	cmp	r3, #0
 8016208:	f000 8149 	beq.w	801649e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801620e:	2b00      	cmp	r3, #0
 8016210:	d003      	beq.n	801621a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8016212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016214:	697a      	ldr	r2, [r7, #20]
 8016216:	601a      	str	r2, [r3, #0]
 8016218:	e002      	b.n	8016220 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	697a      	ldr	r2, [r7, #20]
 801621e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016220:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016222:	6978      	ldr	r0, [r7, #20]
 8016224:	f7ff f8de 	bl	80153e4 <tcp_oos_insert_segment>
                }
                break;
 8016228:	e139      	b.n	801649e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801622c:	2b00      	cmp	r3, #0
 801622e:	d117      	bne.n	8016260 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016230:	4b2e      	ldr	r3, [pc, #184]	; (80162ec <tcp_receive+0xd00>)
 8016232:	681a      	ldr	r2, [r3, #0]
 8016234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016236:	691b      	ldr	r3, [r3, #16]
 8016238:	685b      	ldr	r3, [r3, #4]
 801623a:	1ad3      	subs	r3, r2, r3
 801623c:	2b00      	cmp	r3, #0
 801623e:	da57      	bge.n	80162f0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016240:	4829      	ldr	r0, [pc, #164]	; (80162e8 <tcp_receive+0xcfc>)
 8016242:	f7fd fab3 	bl	80137ac <tcp_seg_copy>
 8016246:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016248:	69bb      	ldr	r3, [r7, #24]
 801624a:	2b00      	cmp	r3, #0
 801624c:	f000 8129 	beq.w	80164a2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	69ba      	ldr	r2, [r7, #24]
 8016254:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016256:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016258:	69b8      	ldr	r0, [r7, #24]
 801625a:	f7ff f8c3 	bl	80153e4 <tcp_oos_insert_segment>
                  }
                  break;
 801625e:	e120      	b.n	80164a2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016260:	4b22      	ldr	r3, [pc, #136]	; (80162ec <tcp_receive+0xd00>)
 8016262:	681a      	ldr	r2, [r3, #0]
 8016264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016266:	691b      	ldr	r3, [r3, #16]
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	1ad3      	subs	r3, r2, r3
 801626c:	3b01      	subs	r3, #1
 801626e:	2b00      	cmp	r3, #0
 8016270:	db3e      	blt.n	80162f0 <tcp_receive+0xd04>
 8016272:	4b1e      	ldr	r3, [pc, #120]	; (80162ec <tcp_receive+0xd00>)
 8016274:	681a      	ldr	r2, [r3, #0]
 8016276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016278:	691b      	ldr	r3, [r3, #16]
 801627a:	685b      	ldr	r3, [r3, #4]
 801627c:	1ad3      	subs	r3, r2, r3
 801627e:	3301      	adds	r3, #1
 8016280:	2b00      	cmp	r3, #0
 8016282:	dc35      	bgt.n	80162f0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016284:	4818      	ldr	r0, [pc, #96]	; (80162e8 <tcp_receive+0xcfc>)
 8016286:	f7fd fa91 	bl	80137ac <tcp_seg_copy>
 801628a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801628c:	69fb      	ldr	r3, [r7, #28]
 801628e:	2b00      	cmp	r3, #0
 8016290:	f000 8109 	beq.w	80164a6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016296:	691b      	ldr	r3, [r3, #16]
 8016298:	685b      	ldr	r3, [r3, #4]
 801629a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801629c:	8912      	ldrh	r2, [r2, #8]
 801629e:	441a      	add	r2, r3
 80162a0:	4b12      	ldr	r3, [pc, #72]	; (80162ec <tcp_receive+0xd00>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	1ad3      	subs	r3, r2, r3
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	dd12      	ble.n	80162d0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80162aa:	4b10      	ldr	r3, [pc, #64]	; (80162ec <tcp_receive+0xd00>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	b29a      	uxth	r2, r3
 80162b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162b2:	691b      	ldr	r3, [r3, #16]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	1ad3      	subs	r3, r2, r3
 80162ba:	b29a      	uxth	r2, r3
 80162bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162be:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80162c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162c2:	685a      	ldr	r2, [r3, #4]
 80162c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162c6:	891b      	ldrh	r3, [r3, #8]
 80162c8:	4619      	mov	r1, r3
 80162ca:	4610      	mov	r0, r2
 80162cc:	f7fb f976 	bl	80115bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80162d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162d2:	69fa      	ldr	r2, [r7, #28]
 80162d4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80162d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80162d8:	69f8      	ldr	r0, [r7, #28]
 80162da:	f7ff f883 	bl	80153e4 <tcp_oos_insert_segment>
                  }
                  break;
 80162de:	e0e2      	b.n	80164a6 <tcp_receive+0xeba>
 80162e0:	20014390 	.word	0x20014390
 80162e4:	2001438d 	.word	0x2001438d
 80162e8:	2001435c 	.word	0x2001435c
 80162ec:	20014380 	.word	0x20014380
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80162f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80162f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	f040 80c6 	bne.w	801648a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80162fe:	4b80      	ldr	r3, [pc, #512]	; (8016500 <tcp_receive+0xf14>)
 8016300:	681a      	ldr	r2, [r3, #0]
 8016302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016304:	691b      	ldr	r3, [r3, #16]
 8016306:	685b      	ldr	r3, [r3, #4]
 8016308:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801630a:	2b00      	cmp	r3, #0
 801630c:	f340 80bd 	ble.w	801648a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016312:	691b      	ldr	r3, [r3, #16]
 8016314:	899b      	ldrh	r3, [r3, #12]
 8016316:	b29b      	uxth	r3, r3
 8016318:	4618      	mov	r0, r3
 801631a:	f7f8 ff47 	bl	800f1ac <lwip_htons>
 801631e:	4603      	mov	r3, r0
 8016320:	b2db      	uxtb	r3, r3
 8016322:	f003 0301 	and.w	r3, r3, #1
 8016326:	2b00      	cmp	r3, #0
 8016328:	f040 80bf 	bne.w	80164aa <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801632c:	4875      	ldr	r0, [pc, #468]	; (8016504 <tcp_receive+0xf18>)
 801632e:	f7fd fa3d 	bl	80137ac <tcp_seg_copy>
 8016332:	4602      	mov	r2, r0
 8016334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016336:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	2b00      	cmp	r3, #0
 801633e:	f000 80b6 	beq.w	80164ae <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016344:	691b      	ldr	r3, [r3, #16]
 8016346:	685b      	ldr	r3, [r3, #4]
 8016348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801634a:	8912      	ldrh	r2, [r2, #8]
 801634c:	441a      	add	r2, r3
 801634e:	4b6c      	ldr	r3, [pc, #432]	; (8016500 <tcp_receive+0xf14>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	1ad3      	subs	r3, r2, r3
 8016354:	2b00      	cmp	r3, #0
 8016356:	dd12      	ble.n	801637e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016358:	4b69      	ldr	r3, [pc, #420]	; (8016500 <tcp_receive+0xf14>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	b29a      	uxth	r2, r3
 801635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016360:	691b      	ldr	r3, [r3, #16]
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	b29b      	uxth	r3, r3
 8016366:	1ad3      	subs	r3, r2, r3
 8016368:	b29a      	uxth	r2, r3
 801636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801636c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016370:	685a      	ldr	r2, [r3, #4]
 8016372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016374:	891b      	ldrh	r3, [r3, #8]
 8016376:	4619      	mov	r1, r3
 8016378:	4610      	mov	r0, r2
 801637a:	f7fb f91f 	bl	80115bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801637e:	4b62      	ldr	r3, [pc, #392]	; (8016508 <tcp_receive+0xf1c>)
 8016380:	881b      	ldrh	r3, [r3, #0]
 8016382:	461a      	mov	r2, r3
 8016384:	4b5e      	ldr	r3, [pc, #376]	; (8016500 <tcp_receive+0xf14>)
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	441a      	add	r2, r3
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801638e:	6879      	ldr	r1, [r7, #4]
 8016390:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016392:	440b      	add	r3, r1
 8016394:	1ad3      	subs	r3, r2, r3
 8016396:	2b00      	cmp	r3, #0
 8016398:	f340 8089 	ble.w	80164ae <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	691b      	ldr	r3, [r3, #16]
 80163a2:	899b      	ldrh	r3, [r3, #12]
 80163a4:	b29b      	uxth	r3, r3
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7f8 ff00 	bl	800f1ac <lwip_htons>
 80163ac:	4603      	mov	r3, r0
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	f003 0301 	and.w	r3, r3, #1
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d022      	beq.n	80163fe <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80163b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	691b      	ldr	r3, [r3, #16]
 80163be:	899b      	ldrh	r3, [r3, #12]
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	b21b      	sxth	r3, r3
 80163c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80163c8:	b21c      	sxth	r4, r3
 80163ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	691b      	ldr	r3, [r3, #16]
 80163d0:	899b      	ldrh	r3, [r3, #12]
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7f8 fee9 	bl	800f1ac <lwip_htons>
 80163da:	4603      	mov	r3, r0
 80163dc:	b2db      	uxtb	r3, r3
 80163de:	b29b      	uxth	r3, r3
 80163e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80163e4:	b29b      	uxth	r3, r3
 80163e6:	4618      	mov	r0, r3
 80163e8:	f7f8 fee0 	bl	800f1ac <lwip_htons>
 80163ec:	4603      	mov	r3, r0
 80163ee:	b21b      	sxth	r3, r3
 80163f0:	4323      	orrs	r3, r4
 80163f2:	b21a      	sxth	r2, r3
 80163f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	691b      	ldr	r3, [r3, #16]
 80163fa:	b292      	uxth	r2, r2
 80163fc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016402:	b29a      	uxth	r2, r3
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016408:	4413      	add	r3, r2
 801640a:	b299      	uxth	r1, r3
 801640c:	4b3c      	ldr	r3, [pc, #240]	; (8016500 <tcp_receive+0xf14>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	b29a      	uxth	r2, r3
 8016412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	1a8a      	subs	r2, r1, r2
 8016418:	b292      	uxth	r2, r2
 801641a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	685a      	ldr	r2, [r3, #4]
 8016422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	891b      	ldrh	r3, [r3, #8]
 8016428:	4619      	mov	r1, r3
 801642a:	4610      	mov	r0, r2
 801642c:	f7fb f8c6 	bl	80115bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	891c      	ldrh	r4, [r3, #8]
 8016436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	691b      	ldr	r3, [r3, #16]
 801643c:	899b      	ldrh	r3, [r3, #12]
 801643e:	b29b      	uxth	r3, r3
 8016440:	4618      	mov	r0, r3
 8016442:	f7f8 feb3 	bl	800f1ac <lwip_htons>
 8016446:	4603      	mov	r3, r0
 8016448:	b2db      	uxtb	r3, r3
 801644a:	f003 0303 	and.w	r3, r3, #3
 801644e:	2b00      	cmp	r3, #0
 8016450:	d001      	beq.n	8016456 <tcp_receive+0xe6a>
 8016452:	2301      	movs	r3, #1
 8016454:	e000      	b.n	8016458 <tcp_receive+0xe6c>
 8016456:	2300      	movs	r3, #0
 8016458:	4423      	add	r3, r4
 801645a:	b29a      	uxth	r2, r3
 801645c:	4b2a      	ldr	r3, [pc, #168]	; (8016508 <tcp_receive+0xf1c>)
 801645e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016460:	4b29      	ldr	r3, [pc, #164]	; (8016508 <tcp_receive+0xf1c>)
 8016462:	881b      	ldrh	r3, [r3, #0]
 8016464:	461a      	mov	r2, r3
 8016466:	4b26      	ldr	r3, [pc, #152]	; (8016500 <tcp_receive+0xf14>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	441a      	add	r2, r3
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016470:	6879      	ldr	r1, [r7, #4]
 8016472:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016474:	440b      	add	r3, r1
 8016476:	429a      	cmp	r2, r3
 8016478:	d019      	beq.n	80164ae <tcp_receive+0xec2>
 801647a:	4b24      	ldr	r3, [pc, #144]	; (801650c <tcp_receive+0xf20>)
 801647c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8016480:	4923      	ldr	r1, [pc, #140]	; (8016510 <tcp_receive+0xf24>)
 8016482:	4824      	ldr	r0, [pc, #144]	; (8016514 <tcp_receive+0xf28>)
 8016484:	f008 fafa 	bl	801ea7c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016488:	e011      	b.n	80164ae <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016492:	2b00      	cmp	r3, #0
 8016494:	f47f aea4 	bne.w	80161e0 <tcp_receive+0xbf4>
 8016498:	e00a      	b.n	80164b0 <tcp_receive+0xec4>
                break;
 801649a:	bf00      	nop
 801649c:	e008      	b.n	80164b0 <tcp_receive+0xec4>
                break;
 801649e:	bf00      	nop
 80164a0:	e006      	b.n	80164b0 <tcp_receive+0xec4>
                  break;
 80164a2:	bf00      	nop
 80164a4:	e004      	b.n	80164b0 <tcp_receive+0xec4>
                  break;
 80164a6:	bf00      	nop
 80164a8:	e002      	b.n	80164b0 <tcp_receive+0xec4>
                  break;
 80164aa:	bf00      	nop
 80164ac:	e000      	b.n	80164b0 <tcp_receive+0xec4>
                break;
 80164ae:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f001 fef7 	bl	80182a4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80164b6:	e003      	b.n	80164c0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	f001 fef3 	bl	80182a4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80164be:	e01a      	b.n	80164f6 <tcp_receive+0xf0a>
 80164c0:	e019      	b.n	80164f6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80164c2:	4b0f      	ldr	r3, [pc, #60]	; (8016500 <tcp_receive+0xf14>)
 80164c4:	681a      	ldr	r2, [r3, #0]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ca:	1ad3      	subs	r3, r2, r3
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	db0a      	blt.n	80164e6 <tcp_receive+0xefa>
 80164d0:	4b0b      	ldr	r3, [pc, #44]	; (8016500 <tcp_receive+0xf14>)
 80164d2:	681a      	ldr	r2, [r3, #0]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164d8:	6879      	ldr	r1, [r7, #4]
 80164da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80164dc:	440b      	add	r3, r1
 80164de:	1ad3      	subs	r3, r2, r3
 80164e0:	3301      	adds	r3, #1
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	dd07      	ble.n	80164f6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	8b5b      	ldrh	r3, [r3, #26]
 80164ea:	f043 0302 	orr.w	r3, r3, #2
 80164ee:	b29a      	uxth	r2, r3
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80164f4:	e7ff      	b.n	80164f6 <tcp_receive+0xf0a>
 80164f6:	bf00      	nop
 80164f8:	3750      	adds	r7, #80	; 0x50
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bdb0      	pop	{r4, r5, r7, pc}
 80164fe:	bf00      	nop
 8016500:	20014380 	.word	0x20014380
 8016504:	2001435c 	.word	0x2001435c
 8016508:	2001438a 	.word	0x2001438a
 801650c:	08024824 	.word	0x08024824
 8016510:	08024bcc 	.word	0x08024bcc
 8016514:	08024870 	.word	0x08024870

08016518 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016518:	b480      	push	{r7}
 801651a:	b083      	sub	sp, #12
 801651c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801651e:	4b15      	ldr	r3, [pc, #84]	; (8016574 <tcp_get_next_optbyte+0x5c>)
 8016520:	881b      	ldrh	r3, [r3, #0]
 8016522:	1c5a      	adds	r2, r3, #1
 8016524:	b291      	uxth	r1, r2
 8016526:	4a13      	ldr	r2, [pc, #76]	; (8016574 <tcp_get_next_optbyte+0x5c>)
 8016528:	8011      	strh	r1, [r2, #0]
 801652a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801652c:	4b12      	ldr	r3, [pc, #72]	; (8016578 <tcp_get_next_optbyte+0x60>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d004      	beq.n	801653e <tcp_get_next_optbyte+0x26>
 8016534:	4b11      	ldr	r3, [pc, #68]	; (801657c <tcp_get_next_optbyte+0x64>)
 8016536:	881b      	ldrh	r3, [r3, #0]
 8016538:	88fa      	ldrh	r2, [r7, #6]
 801653a:	429a      	cmp	r2, r3
 801653c:	d208      	bcs.n	8016550 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801653e:	4b10      	ldr	r3, [pc, #64]	; (8016580 <tcp_get_next_optbyte+0x68>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	3314      	adds	r3, #20
 8016544:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016546:	88fb      	ldrh	r3, [r7, #6]
 8016548:	683a      	ldr	r2, [r7, #0]
 801654a:	4413      	add	r3, r2
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	e00b      	b.n	8016568 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016550:	88fb      	ldrh	r3, [r7, #6]
 8016552:	b2da      	uxtb	r2, r3
 8016554:	4b09      	ldr	r3, [pc, #36]	; (801657c <tcp_get_next_optbyte+0x64>)
 8016556:	881b      	ldrh	r3, [r3, #0]
 8016558:	b2db      	uxtb	r3, r3
 801655a:	1ad3      	subs	r3, r2, r3
 801655c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801655e:	4b06      	ldr	r3, [pc, #24]	; (8016578 <tcp_get_next_optbyte+0x60>)
 8016560:	681a      	ldr	r2, [r3, #0]
 8016562:	797b      	ldrb	r3, [r7, #5]
 8016564:	4413      	add	r3, r2
 8016566:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016568:	4618      	mov	r0, r3
 801656a:	370c      	adds	r7, #12
 801656c:	46bd      	mov	sp, r7
 801656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016572:	4770      	bx	lr
 8016574:	2001437c 	.word	0x2001437c
 8016578:	20014378 	.word	0x20014378
 801657c:	20014376 	.word	0x20014376
 8016580:	20014370 	.word	0x20014370

08016584 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b084      	sub	sp, #16
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d106      	bne.n	80165a0 <tcp_parseopt+0x1c>
 8016592:	4b32      	ldr	r3, [pc, #200]	; (801665c <tcp_parseopt+0xd8>)
 8016594:	f240 727d 	movw	r2, #1917	; 0x77d
 8016598:	4931      	ldr	r1, [pc, #196]	; (8016660 <tcp_parseopt+0xdc>)
 801659a:	4832      	ldr	r0, [pc, #200]	; (8016664 <tcp_parseopt+0xe0>)
 801659c:	f008 fa6e 	bl	801ea7c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80165a0:	4b31      	ldr	r3, [pc, #196]	; (8016668 <tcp_parseopt+0xe4>)
 80165a2:	881b      	ldrh	r3, [r3, #0]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d055      	beq.n	8016654 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80165a8:	4b30      	ldr	r3, [pc, #192]	; (801666c <tcp_parseopt+0xe8>)
 80165aa:	2200      	movs	r2, #0
 80165ac:	801a      	strh	r2, [r3, #0]
 80165ae:	e045      	b.n	801663c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80165b0:	f7ff ffb2 	bl	8016518 <tcp_get_next_optbyte>
 80165b4:	4603      	mov	r3, r0
 80165b6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80165b8:	7bfb      	ldrb	r3, [r7, #15]
 80165ba:	2b02      	cmp	r3, #2
 80165bc:	d006      	beq.n	80165cc <tcp_parseopt+0x48>
 80165be:	2b02      	cmp	r3, #2
 80165c0:	dc2b      	bgt.n	801661a <tcp_parseopt+0x96>
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d041      	beq.n	801664a <tcp_parseopt+0xc6>
 80165c6:	2b01      	cmp	r3, #1
 80165c8:	d127      	bne.n	801661a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80165ca:	e037      	b.n	801663c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80165cc:	f7ff ffa4 	bl	8016518 <tcp_get_next_optbyte>
 80165d0:	4603      	mov	r3, r0
 80165d2:	2b04      	cmp	r3, #4
 80165d4:	d13b      	bne.n	801664e <tcp_parseopt+0xca>
 80165d6:	4b25      	ldr	r3, [pc, #148]	; (801666c <tcp_parseopt+0xe8>)
 80165d8:	881b      	ldrh	r3, [r3, #0]
 80165da:	3301      	adds	r3, #1
 80165dc:	4a22      	ldr	r2, [pc, #136]	; (8016668 <tcp_parseopt+0xe4>)
 80165de:	8812      	ldrh	r2, [r2, #0]
 80165e0:	4293      	cmp	r3, r2
 80165e2:	da34      	bge.n	801664e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80165e4:	f7ff ff98 	bl	8016518 <tcp_get_next_optbyte>
 80165e8:	4603      	mov	r3, r0
 80165ea:	b29b      	uxth	r3, r3
 80165ec:	021b      	lsls	r3, r3, #8
 80165ee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80165f0:	f7ff ff92 	bl	8016518 <tcp_get_next_optbyte>
 80165f4:	4603      	mov	r3, r0
 80165f6:	b29a      	uxth	r2, r3
 80165f8:	89bb      	ldrh	r3, [r7, #12]
 80165fa:	4313      	orrs	r3, r2
 80165fc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80165fe:	89bb      	ldrh	r3, [r7, #12]
 8016600:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016604:	d804      	bhi.n	8016610 <tcp_parseopt+0x8c>
 8016606:	89bb      	ldrh	r3, [r7, #12]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d001      	beq.n	8016610 <tcp_parseopt+0x8c>
 801660c:	89ba      	ldrh	r2, [r7, #12]
 801660e:	e001      	b.n	8016614 <tcp_parseopt+0x90>
 8016610:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016618:	e010      	b.n	801663c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801661a:	f7ff ff7d 	bl	8016518 <tcp_get_next_optbyte>
 801661e:	4603      	mov	r3, r0
 8016620:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016622:	7afb      	ldrb	r3, [r7, #11]
 8016624:	2b01      	cmp	r3, #1
 8016626:	d914      	bls.n	8016652 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016628:	7afb      	ldrb	r3, [r7, #11]
 801662a:	b29a      	uxth	r2, r3
 801662c:	4b0f      	ldr	r3, [pc, #60]	; (801666c <tcp_parseopt+0xe8>)
 801662e:	881b      	ldrh	r3, [r3, #0]
 8016630:	4413      	add	r3, r2
 8016632:	b29b      	uxth	r3, r3
 8016634:	3b02      	subs	r3, #2
 8016636:	b29a      	uxth	r2, r3
 8016638:	4b0c      	ldr	r3, [pc, #48]	; (801666c <tcp_parseopt+0xe8>)
 801663a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801663c:	4b0b      	ldr	r3, [pc, #44]	; (801666c <tcp_parseopt+0xe8>)
 801663e:	881a      	ldrh	r2, [r3, #0]
 8016640:	4b09      	ldr	r3, [pc, #36]	; (8016668 <tcp_parseopt+0xe4>)
 8016642:	881b      	ldrh	r3, [r3, #0]
 8016644:	429a      	cmp	r2, r3
 8016646:	d3b3      	bcc.n	80165b0 <tcp_parseopt+0x2c>
 8016648:	e004      	b.n	8016654 <tcp_parseopt+0xd0>
          return;
 801664a:	bf00      	nop
 801664c:	e002      	b.n	8016654 <tcp_parseopt+0xd0>
            return;
 801664e:	bf00      	nop
 8016650:	e000      	b.n	8016654 <tcp_parseopt+0xd0>
            return;
 8016652:	bf00      	nop
      }
    }
  }
}
 8016654:	3710      	adds	r7, #16
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	08024824 	.word	0x08024824
 8016660:	08024c88 	.word	0x08024c88
 8016664:	08024870 	.word	0x08024870
 8016668:	20014374 	.word	0x20014374
 801666c:	2001437c 	.word	0x2001437c

08016670 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016670:	b480      	push	{r7}
 8016672:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016674:	4b05      	ldr	r3, [pc, #20]	; (801668c <tcp_trigger_input_pcb_close+0x1c>)
 8016676:	781b      	ldrb	r3, [r3, #0]
 8016678:	f043 0310 	orr.w	r3, r3, #16
 801667c:	b2da      	uxtb	r2, r3
 801667e:	4b03      	ldr	r3, [pc, #12]	; (801668c <tcp_trigger_input_pcb_close+0x1c>)
 8016680:	701a      	strb	r2, [r3, #0]
}
 8016682:	bf00      	nop
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr
 801668c:	2001438d 	.word	0x2001438d

08016690 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b084      	sub	sp, #16
 8016694:	af00      	add	r7, sp, #0
 8016696:	60f8      	str	r0, [r7, #12]
 8016698:	60b9      	str	r1, [r7, #8]
 801669a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d00a      	beq.n	80166b8 <tcp_route+0x28>
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	7a1b      	ldrb	r3, [r3, #8]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d006      	beq.n	80166b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	7a1b      	ldrb	r3, [r3, #8]
 80166ae:	4618      	mov	r0, r3
 80166b0:	f7fa fd7c 	bl	80111ac <netif_get_by_index>
 80166b4:	4603      	mov	r3, r0
 80166b6:	e003      	b.n	80166c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f005 fe5f 	bl	801c37c <ip4_route>
 80166be:	4603      	mov	r3, r0
  }
}
 80166c0:	4618      	mov	r0, r3
 80166c2:	3710      	adds	r7, #16
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}

080166c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80166c8:	b590      	push	{r4, r7, lr}
 80166ca:	b087      	sub	sp, #28
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	60f8      	str	r0, [r7, #12]
 80166d0:	60b9      	str	r1, [r7, #8]
 80166d2:	603b      	str	r3, [r7, #0]
 80166d4:	4613      	mov	r3, r2
 80166d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d105      	bne.n	80166ea <tcp_create_segment+0x22>
 80166de:	4b45      	ldr	r3, [pc, #276]	; (80167f4 <tcp_create_segment+0x12c>)
 80166e0:	22a3      	movs	r2, #163	; 0xa3
 80166e2:	4945      	ldr	r1, [pc, #276]	; (80167f8 <tcp_create_segment+0x130>)
 80166e4:	4845      	ldr	r0, [pc, #276]	; (80167fc <tcp_create_segment+0x134>)
 80166e6:	f008 f9c9 	bl	801ea7c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d105      	bne.n	80166fc <tcp_create_segment+0x34>
 80166f0:	4b40      	ldr	r3, [pc, #256]	; (80167f4 <tcp_create_segment+0x12c>)
 80166f2:	22a4      	movs	r2, #164	; 0xa4
 80166f4:	4942      	ldr	r1, [pc, #264]	; (8016800 <tcp_create_segment+0x138>)
 80166f6:	4841      	ldr	r0, [pc, #260]	; (80167fc <tcp_create_segment+0x134>)
 80166f8:	f008 f9c0 	bl	801ea7c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80166fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016700:	009b      	lsls	r3, r3, #2
 8016702:	b2db      	uxtb	r3, r3
 8016704:	f003 0304 	and.w	r3, r3, #4
 8016708:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801670a:	2003      	movs	r0, #3
 801670c:	f7fa f9da 	bl	8010ac4 <memp_malloc>
 8016710:	6138      	str	r0, [r7, #16]
 8016712:	693b      	ldr	r3, [r7, #16]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d104      	bne.n	8016722 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016718:	68b8      	ldr	r0, [r7, #8]
 801671a:	f7fb f907 	bl	801192c <pbuf_free>
    return NULL;
 801671e:	2300      	movs	r3, #0
 8016720:	e064      	b.n	80167ec <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016728:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801672a:	693b      	ldr	r3, [r7, #16]
 801672c:	2200      	movs	r2, #0
 801672e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	68ba      	ldr	r2, [r7, #8]
 8016734:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	891a      	ldrh	r2, [r3, #8]
 801673a:	7dfb      	ldrb	r3, [r7, #23]
 801673c:	b29b      	uxth	r3, r3
 801673e:	429a      	cmp	r2, r3
 8016740:	d205      	bcs.n	801674e <tcp_create_segment+0x86>
 8016742:	4b2c      	ldr	r3, [pc, #176]	; (80167f4 <tcp_create_segment+0x12c>)
 8016744:	22b0      	movs	r2, #176	; 0xb0
 8016746:	492f      	ldr	r1, [pc, #188]	; (8016804 <tcp_create_segment+0x13c>)
 8016748:	482c      	ldr	r0, [pc, #176]	; (80167fc <tcp_create_segment+0x134>)
 801674a:	f008 f997 	bl	801ea7c <iprintf>
  seg->len = p->tot_len - optlen;
 801674e:	68bb      	ldr	r3, [r7, #8]
 8016750:	891a      	ldrh	r2, [r3, #8]
 8016752:	7dfb      	ldrb	r3, [r7, #23]
 8016754:	b29b      	uxth	r3, r3
 8016756:	1ad3      	subs	r3, r2, r3
 8016758:	b29a      	uxth	r2, r3
 801675a:	693b      	ldr	r3, [r7, #16]
 801675c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	2200      	movs	r2, #0
 8016762:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016764:	2114      	movs	r1, #20
 8016766:	68b8      	ldr	r0, [r7, #8]
 8016768:	f7fb f818 	bl	801179c <pbuf_add_header>
 801676c:	4603      	mov	r3, r0
 801676e:	2b00      	cmp	r3, #0
 8016770:	d004      	beq.n	801677c <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016772:	6938      	ldr	r0, [r7, #16]
 8016774:	f7fd f801 	bl	801377a <tcp_seg_free>
    return NULL;
 8016778:	2300      	movs	r3, #0
 801677a:	e037      	b.n	80167ec <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	685b      	ldr	r3, [r3, #4]
 8016780:	685a      	ldr	r2, [r3, #4]
 8016782:	693b      	ldr	r3, [r7, #16]
 8016784:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	8ada      	ldrh	r2, [r3, #22]
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	691c      	ldr	r4, [r3, #16]
 801678e:	4610      	mov	r0, r2
 8016790:	f7f8 fd0c 	bl	800f1ac <lwip_htons>
 8016794:	4603      	mov	r3, r0
 8016796:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	8b1a      	ldrh	r2, [r3, #24]
 801679c:	693b      	ldr	r3, [r7, #16]
 801679e:	691c      	ldr	r4, [r3, #16]
 80167a0:	4610      	mov	r0, r2
 80167a2:	f7f8 fd03 	bl	800f1ac <lwip_htons>
 80167a6:	4603      	mov	r3, r0
 80167a8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	691c      	ldr	r4, [r3, #16]
 80167ae:	6838      	ldr	r0, [r7, #0]
 80167b0:	f7f8 fd11 	bl	800f1d6 <lwip_htonl>
 80167b4:	4603      	mov	r3, r0
 80167b6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80167b8:	7dfb      	ldrb	r3, [r7, #23]
 80167ba:	089b      	lsrs	r3, r3, #2
 80167bc:	b2db      	uxtb	r3, r3
 80167be:	b29b      	uxth	r3, r3
 80167c0:	3305      	adds	r3, #5
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	031b      	lsls	r3, r3, #12
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	79fb      	ldrb	r3, [r7, #7]
 80167ca:	b29b      	uxth	r3, r3
 80167cc:	4313      	orrs	r3, r2
 80167ce:	b29a      	uxth	r2, r3
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	691c      	ldr	r4, [r3, #16]
 80167d4:	4610      	mov	r0, r2
 80167d6:	f7f8 fce9 	bl	800f1ac <lwip_htons>
 80167da:	4603      	mov	r3, r0
 80167dc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80167de:	693b      	ldr	r3, [r7, #16]
 80167e0:	691b      	ldr	r3, [r3, #16]
 80167e2:	2200      	movs	r2, #0
 80167e4:	749a      	strb	r2, [r3, #18]
 80167e6:	2200      	movs	r2, #0
 80167e8:	74da      	strb	r2, [r3, #19]
  return seg;
 80167ea:	693b      	ldr	r3, [r7, #16]
}
 80167ec:	4618      	mov	r0, r3
 80167ee:	371c      	adds	r7, #28
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd90      	pop	{r4, r7, pc}
 80167f4:	08024ca4 	.word	0x08024ca4
 80167f8:	08024cd8 	.word	0x08024cd8
 80167fc:	08024cf8 	.word	0x08024cf8
 8016800:	08024d20 	.word	0x08024d20
 8016804:	08024d44 	.word	0x08024d44

08016808 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b086      	sub	sp, #24
 801680c:	af00      	add	r7, sp, #0
 801680e:	607b      	str	r3, [r7, #4]
 8016810:	4603      	mov	r3, r0
 8016812:	73fb      	strb	r3, [r7, #15]
 8016814:	460b      	mov	r3, r1
 8016816:	81bb      	strh	r3, [r7, #12]
 8016818:	4613      	mov	r3, r2
 801681a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801681c:	89bb      	ldrh	r3, [r7, #12]
 801681e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d105      	bne.n	8016832 <tcp_pbuf_prealloc+0x2a>
 8016826:	4b30      	ldr	r3, [pc, #192]	; (80168e8 <tcp_pbuf_prealloc+0xe0>)
 8016828:	22e8      	movs	r2, #232	; 0xe8
 801682a:	4930      	ldr	r1, [pc, #192]	; (80168ec <tcp_pbuf_prealloc+0xe4>)
 801682c:	4830      	ldr	r0, [pc, #192]	; (80168f0 <tcp_pbuf_prealloc+0xe8>)
 801682e:	f008 f925 	bl	801ea7c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016832:	6a3b      	ldr	r3, [r7, #32]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d105      	bne.n	8016844 <tcp_pbuf_prealloc+0x3c>
 8016838:	4b2b      	ldr	r3, [pc, #172]	; (80168e8 <tcp_pbuf_prealloc+0xe0>)
 801683a:	22e9      	movs	r2, #233	; 0xe9
 801683c:	492d      	ldr	r1, [pc, #180]	; (80168f4 <tcp_pbuf_prealloc+0xec>)
 801683e:	482c      	ldr	r0, [pc, #176]	; (80168f0 <tcp_pbuf_prealloc+0xe8>)
 8016840:	f008 f91c 	bl	801ea7c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016844:	89ba      	ldrh	r2, [r7, #12]
 8016846:	897b      	ldrh	r3, [r7, #10]
 8016848:	429a      	cmp	r2, r3
 801684a:	d221      	bcs.n	8016890 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801684c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016850:	f003 0302 	and.w	r3, r3, #2
 8016854:	2b00      	cmp	r3, #0
 8016856:	d111      	bne.n	801687c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016858:	6a3b      	ldr	r3, [r7, #32]
 801685a:	8b5b      	ldrh	r3, [r3, #26]
 801685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016860:	2b00      	cmp	r3, #0
 8016862:	d115      	bne.n	8016890 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016868:	2b00      	cmp	r3, #0
 801686a:	d007      	beq.n	801687c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801686c:	6a3b      	ldr	r3, [r7, #32]
 801686e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016870:	2b00      	cmp	r3, #0
 8016872:	d103      	bne.n	801687c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016874:	6a3b      	ldr	r3, [r7, #32]
 8016876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8016878:	2b00      	cmp	r3, #0
 801687a:	d009      	beq.n	8016890 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801687c:	89bb      	ldrh	r3, [r7, #12]
 801687e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8016882:	f023 0203 	bic.w	r2, r3, #3
 8016886:	897b      	ldrh	r3, [r7, #10]
 8016888:	4293      	cmp	r3, r2
 801688a:	bf28      	it	cs
 801688c:	4613      	movcs	r3, r2
 801688e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016890:	8af9      	ldrh	r1, [r7, #22]
 8016892:	7bfb      	ldrb	r3, [r7, #15]
 8016894:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016898:	4618      	mov	r0, r3
 801689a:	f7fa fd31 	bl	8011300 <pbuf_alloc>
 801689e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80168a0:	693b      	ldr	r3, [r7, #16]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d101      	bne.n	80168aa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80168a6:	2300      	movs	r3, #0
 80168a8:	e019      	b.n	80168de <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80168aa:	693b      	ldr	r3, [r7, #16]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d006      	beq.n	80168c0 <tcp_pbuf_prealloc+0xb8>
 80168b2:	4b0d      	ldr	r3, [pc, #52]	; (80168e8 <tcp_pbuf_prealloc+0xe0>)
 80168b4:	f240 120b 	movw	r2, #267	; 0x10b
 80168b8:	490f      	ldr	r1, [pc, #60]	; (80168f8 <tcp_pbuf_prealloc+0xf0>)
 80168ba:	480d      	ldr	r0, [pc, #52]	; (80168f0 <tcp_pbuf_prealloc+0xe8>)
 80168bc:	f008 f8de 	bl	801ea7c <iprintf>
  *oversize = p->len - length;
 80168c0:	693b      	ldr	r3, [r7, #16]
 80168c2:	895a      	ldrh	r2, [r3, #10]
 80168c4:	89bb      	ldrh	r3, [r7, #12]
 80168c6:	1ad3      	subs	r3, r2, r3
 80168c8:	b29a      	uxth	r2, r3
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80168ce:	693b      	ldr	r3, [r7, #16]
 80168d0:	89ba      	ldrh	r2, [r7, #12]
 80168d2:	811a      	strh	r2, [r3, #8]
 80168d4:	693b      	ldr	r3, [r7, #16]
 80168d6:	891a      	ldrh	r2, [r3, #8]
 80168d8:	693b      	ldr	r3, [r7, #16]
 80168da:	815a      	strh	r2, [r3, #10]
  return p;
 80168dc:	693b      	ldr	r3, [r7, #16]
}
 80168de:	4618      	mov	r0, r3
 80168e0:	3718      	adds	r7, #24
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}
 80168e6:	bf00      	nop
 80168e8:	08024ca4 	.word	0x08024ca4
 80168ec:	08024d5c 	.word	0x08024d5c
 80168f0:	08024cf8 	.word	0x08024cf8
 80168f4:	08024d80 	.word	0x08024d80
 80168f8:	08024da0 	.word	0x08024da0

080168fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	460b      	mov	r3, r1
 8016906:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d106      	bne.n	801691c <tcp_write_checks+0x20>
 801690e:	4b33      	ldr	r3, [pc, #204]	; (80169dc <tcp_write_checks+0xe0>)
 8016910:	f240 1233 	movw	r2, #307	; 0x133
 8016914:	4932      	ldr	r1, [pc, #200]	; (80169e0 <tcp_write_checks+0xe4>)
 8016916:	4833      	ldr	r0, [pc, #204]	; (80169e4 <tcp_write_checks+0xe8>)
 8016918:	f008 f8b0 	bl	801ea7c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	7d1b      	ldrb	r3, [r3, #20]
 8016920:	2b04      	cmp	r3, #4
 8016922:	d00e      	beq.n	8016942 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8016928:	2b07      	cmp	r3, #7
 801692a:	d00a      	beq.n	8016942 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016930:	2b02      	cmp	r3, #2
 8016932:	d006      	beq.n	8016942 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8016938:	2b03      	cmp	r3, #3
 801693a:	d002      	beq.n	8016942 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801693c:	f06f 030a 	mvn.w	r3, #10
 8016940:	e048      	b.n	80169d4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016942:	887b      	ldrh	r3, [r7, #2]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d101      	bne.n	801694c <tcp_write_checks+0x50>
    return ERR_OK;
 8016948:	2300      	movs	r3, #0
 801694a:	e043      	b.n	80169d4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016952:	887a      	ldrh	r2, [r7, #2]
 8016954:	429a      	cmp	r2, r3
 8016956:	d909      	bls.n	801696c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	8b5b      	ldrh	r3, [r3, #26]
 801695c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016960:	b29a      	uxth	r2, r3
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801696a:	e033      	b.n	80169d4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016972:	2b08      	cmp	r3, #8
 8016974:	d909      	bls.n	801698a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	8b5b      	ldrh	r3, [r3, #26]
 801697a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801697e:	b29a      	uxth	r2, r3
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016988:	e024      	b.n	80169d4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016990:	2b00      	cmp	r3, #0
 8016992:	d00f      	beq.n	80169b4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016998:	2b00      	cmp	r3, #0
 801699a:	d11a      	bne.n	80169d2 <tcp_write_checks+0xd6>
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d116      	bne.n	80169d2 <tcp_write_checks+0xd6>
 80169a4:	4b0d      	ldr	r3, [pc, #52]	; (80169dc <tcp_write_checks+0xe0>)
 80169a6:	f240 1255 	movw	r2, #341	; 0x155
 80169aa:	490f      	ldr	r1, [pc, #60]	; (80169e8 <tcp_write_checks+0xec>)
 80169ac:	480d      	ldr	r0, [pc, #52]	; (80169e4 <tcp_write_checks+0xe8>)
 80169ae:	f008 f865 	bl	801ea7c <iprintf>
 80169b2:	e00e      	b.n	80169d2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d103      	bne.n	80169c4 <tcp_write_checks+0xc8>
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d006      	beq.n	80169d2 <tcp_write_checks+0xd6>
 80169c4:	4b05      	ldr	r3, [pc, #20]	; (80169dc <tcp_write_checks+0xe0>)
 80169c6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80169ca:	4908      	ldr	r1, [pc, #32]	; (80169ec <tcp_write_checks+0xf0>)
 80169cc:	4805      	ldr	r0, [pc, #20]	; (80169e4 <tcp_write_checks+0xe8>)
 80169ce:	f008 f855 	bl	801ea7c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80169d2:	2300      	movs	r3, #0
}
 80169d4:	4618      	mov	r0, r3
 80169d6:	3708      	adds	r7, #8
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}
 80169dc:	08024ca4 	.word	0x08024ca4
 80169e0:	08024db4 	.word	0x08024db4
 80169e4:	08024cf8 	.word	0x08024cf8
 80169e8:	08024dd4 	.word	0x08024dd4
 80169ec:	08024e10 	.word	0x08024e10

080169f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80169f0:	b590      	push	{r4, r7, lr}
 80169f2:	b09d      	sub	sp, #116	; 0x74
 80169f4:	af04      	add	r7, sp, #16
 80169f6:	60f8      	str	r0, [r7, #12]
 80169f8:	60b9      	str	r1, [r7, #8]
 80169fa:	4611      	mov	r1, r2
 80169fc:	461a      	mov	r2, r3
 80169fe:	460b      	mov	r3, r1
 8016a00:	80fb      	strh	r3, [r7, #6]
 8016a02:	4613      	mov	r3, r2
 8016a04:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016a06:	2300      	movs	r3, #0
 8016a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8016a0e:	2300      	movs	r3, #0
 8016a10:	657b      	str	r3, [r7, #84]	; 0x54
 8016a12:	2300      	movs	r3, #0
 8016a14:	653b      	str	r3, [r7, #80]	; 0x50
 8016a16:	2300      	movs	r3, #0
 8016a18:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016a20:	2300      	movs	r3, #0
 8016a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016a26:	2300      	movs	r3, #0
 8016a28:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8016a30:	2300      	movs	r3, #0
 8016a32:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016a36:	2300      	movs	r3, #0
 8016a38:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d109      	bne.n	8016a56 <tcp_write+0x66>
 8016a42:	4bad      	ldr	r3, [pc, #692]	; (8016cf8 <tcp_write+0x308>)
 8016a44:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8016a48:	49ac      	ldr	r1, [pc, #688]	; (8016cfc <tcp_write+0x30c>)
 8016a4a:	48ad      	ldr	r0, [pc, #692]	; (8016d00 <tcp_write+0x310>)
 8016a4c:	f008 f816 	bl	801ea7c <iprintf>
 8016a50:	f06f 030f 	mvn.w	r3, #15
 8016a54:	e37d      	b.n	8017152 <tcp_write+0x762>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016a5c:	085b      	lsrs	r3, r3, #1
 8016a5e:	b29a      	uxth	r2, r3
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a64:	4293      	cmp	r3, r2
 8016a66:	bf28      	it	cs
 8016a68:	4613      	movcs	r3, r2
 8016a6a:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8016a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d102      	bne.n	8016a78 <tcp_write+0x88>
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a76:	e000      	b.n	8016a7a <tcp_write+0x8a>
 8016a78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016a7a:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016a7c:	68bb      	ldr	r3, [r7, #8]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d109      	bne.n	8016a96 <tcp_write+0xa6>
 8016a82:	4b9d      	ldr	r3, [pc, #628]	; (8016cf8 <tcp_write+0x308>)
 8016a84:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016a88:	499e      	ldr	r1, [pc, #632]	; (8016d04 <tcp_write+0x314>)
 8016a8a:	489d      	ldr	r0, [pc, #628]	; (8016d00 <tcp_write+0x310>)
 8016a8c:	f007 fff6 	bl	801ea7c <iprintf>
 8016a90:	f06f 030f 	mvn.w	r3, #15
 8016a94:	e35d      	b.n	8017152 <tcp_write+0x762>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016a96:	88fb      	ldrh	r3, [r7, #6]
 8016a98:	4619      	mov	r1, r3
 8016a9a:	68f8      	ldr	r0, [r7, #12]
 8016a9c:	f7ff ff2e 	bl	80168fc <tcp_write_checks>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8016aa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d002      	beq.n	8016ab4 <tcp_write+0xc4>
    return err;
 8016aae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016ab2:	e34e      	b.n	8017152 <tcp_write+0x762>
  }
  queuelen = pcb->snd_queuelen;
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016aba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016abe:	2300      	movs	r3, #0
 8016ac0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	f000 8127 	beq.w	8016d1c <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8016ad4:	e002      	b.n	8016adc <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8016ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d1f8      	bne.n	8016ad6 <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ae6:	7b1b      	ldrb	r3, [r3, #12]
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	b29b      	uxth	r3, r3
 8016aec:	f003 0304 	and.w	r3, r3, #4
 8016af0:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016af2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016af6:	891b      	ldrh	r3, [r3, #8]
 8016af8:	4619      	mov	r1, r3
 8016afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016afc:	440b      	add	r3, r1
 8016afe:	429a      	cmp	r2, r3
 8016b00:	da06      	bge.n	8016b10 <tcp_write+0x120>
 8016b02:	4b7d      	ldr	r3, [pc, #500]	; (8016cf8 <tcp_write+0x308>)
 8016b04:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016b08:	497f      	ldr	r1, [pc, #508]	; (8016d08 <tcp_write+0x318>)
 8016b0a:	487d      	ldr	r0, [pc, #500]	; (8016d00 <tcp_write+0x310>)
 8016b0c:	f007 ffb6 	bl	801ea7c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b12:	891a      	ldrh	r2, [r3, #8]
 8016b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b16:	4413      	add	r3, r2
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016b1c:	1ad3      	subs	r3, r2, r3
 8016b1e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8016b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b2a:	895b      	ldrh	r3, [r3, #10]
 8016b2c:	429a      	cmp	r2, r3
 8016b2e:	d006      	beq.n	8016b3e <tcp_write+0x14e>
 8016b30:	4b71      	ldr	r3, [pc, #452]	; (8016cf8 <tcp_write+0x308>)
 8016b32:	f240 12f3 	movw	r2, #499	; 0x1f3
 8016b36:	4975      	ldr	r1, [pc, #468]	; (8016d0c <tcp_write+0x31c>)
 8016b38:	4871      	ldr	r0, [pc, #452]	; (8016d00 <tcp_write+0x310>)
 8016b3a:	f007 ff9f 	bl	801ea7c <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016b44:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8016b46:	8afb      	ldrh	r3, [r7, #22]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d02e      	beq.n	8016baa <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016b4c:	8afb      	ldrh	r3, [r7, #22]
 8016b4e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016b52:	429a      	cmp	r2, r3
 8016b54:	d206      	bcs.n	8016b64 <tcp_write+0x174>
 8016b56:	4b68      	ldr	r3, [pc, #416]	; (8016cf8 <tcp_write+0x308>)
 8016b58:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016b5c:	496c      	ldr	r1, [pc, #432]	; (8016d10 <tcp_write+0x320>)
 8016b5e:	4868      	ldr	r0, [pc, #416]	; (8016d00 <tcp_write+0x310>)
 8016b60:	f007 ff8c 	bl	801ea7c <iprintf>
      seg = last_unsent;
 8016b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b66:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016b68:	8afb      	ldrh	r3, [r7, #22]
 8016b6a:	88fa      	ldrh	r2, [r7, #6]
 8016b6c:	4293      	cmp	r3, r2
 8016b6e:	bf28      	it	cs
 8016b70:	4613      	movcs	r3, r2
 8016b72:	b29b      	uxth	r3, r3
 8016b74:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016b78:	4293      	cmp	r3, r2
 8016b7a:	bf28      	it	cs
 8016b7c:	4613      	movcs	r3, r2
 8016b7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 8016b82:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016b86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b8a:	4413      	add	r3, r2
 8016b8c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 8016b90:	8afa      	ldrh	r2, [r7, #22]
 8016b92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b96:	1ad3      	subs	r3, r2, r3
 8016b98:	b29b      	uxth	r3, r3
 8016b9a:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8016b9c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016ba0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ba4:	1ad3      	subs	r3, r2, r3
 8016ba6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016baa:	8afb      	ldrh	r3, [r7, #22]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d00b      	beq.n	8016bc8 <tcp_write+0x1d8>
 8016bb0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016bb4:	88fb      	ldrh	r3, [r7, #6]
 8016bb6:	429a      	cmp	r2, r3
 8016bb8:	d006      	beq.n	8016bc8 <tcp_write+0x1d8>
 8016bba:	4b4f      	ldr	r3, [pc, #316]	; (8016cf8 <tcp_write+0x308>)
 8016bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016bc0:	4954      	ldr	r1, [pc, #336]	; (8016d14 <tcp_write+0x324>)
 8016bc2:	484f      	ldr	r0, [pc, #316]	; (8016d00 <tcp_write+0x310>)
 8016bc4:	f007 ff5a 	bl	801ea7c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016bc8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016bcc:	88fb      	ldrh	r3, [r7, #6]
 8016bce:	429a      	cmp	r2, r3
 8016bd0:	f080 8172 	bcs.w	8016eb8 <tcp_write+0x4c8>
 8016bd4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	f000 816d 	beq.w	8016eb8 <tcp_write+0x4c8>
 8016bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016be0:	891b      	ldrh	r3, [r3, #8]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	f000 8168 	beq.w	8016eb8 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016be8:	88fa      	ldrh	r2, [r7, #6]
 8016bea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016bee:	1ad2      	subs	r2, r2, r3
 8016bf0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8016bf4:	4293      	cmp	r3, r2
 8016bf6:	bfa8      	it	ge
 8016bf8:	4613      	movge	r3, r2
 8016bfa:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 8016bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bfe:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016c00:	797b      	ldrb	r3, [r7, #5]
 8016c02:	f003 0301 	and.w	r3, r3, #1
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d02b      	beq.n	8016c62 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016c0a:	f107 0016 	add.w	r0, r7, #22
 8016c0e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016c12:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8016c14:	2301      	movs	r3, #1
 8016c16:	9302      	str	r3, [sp, #8]
 8016c18:	797b      	ldrb	r3, [r7, #5]
 8016c1a:	9301      	str	r3, [sp, #4]
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	9300      	str	r3, [sp, #0]
 8016c20:	4603      	mov	r3, r0
 8016c22:	2000      	movs	r0, #0
 8016c24:	f7ff fdf0 	bl	8016808 <tcp_pbuf_prealloc>
 8016c28:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	f000 825e 	beq.w	80170ee <tcp_write+0x6fe>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8016c32:	8afb      	ldrh	r3, [r7, #22]
 8016c34:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c3a:	6858      	ldr	r0, [r3, #4]
 8016c3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016c40:	68ba      	ldr	r2, [r7, #8]
 8016c42:	4413      	add	r3, r2
 8016c44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016c46:	4619      	mov	r1, r3
 8016c48:	f007 f9d4 	bl	801dff4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016c4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016c4e:	f7fa fefb 	bl	8011a48 <pbuf_clen>
 8016c52:	4603      	mov	r3, r0
 8016c54:	461a      	mov	r2, r3
 8016c56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016c5a:	4413      	add	r3, r2
 8016c5c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016c60:	e042      	b.n	8016ce8 <tcp_write+0x2f8>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c64:	685b      	ldr	r3, [r3, #4]
 8016c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8016c68:	e002      	b.n	8016c70 <tcp_write+0x280>
 8016c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d1f8      	bne.n	8016c6a <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c7a:	7b1b      	ldrb	r3, [r3, #12]
 8016c7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d116      	bne.n	8016cb2 <tcp_write+0x2c2>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c86:	685b      	ldr	r3, [r3, #4]
 8016c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c8a:	8952      	ldrh	r2, [r2, #10]
 8016c8c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016c8e:	68ba      	ldr	r2, [r7, #8]
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d10e      	bne.n	8016cb2 <tcp_write+0x2c2>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016c94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d006      	beq.n	8016caa <tcp_write+0x2ba>
 8016c9c:	4b16      	ldr	r3, [pc, #88]	; (8016cf8 <tcp_write+0x308>)
 8016c9e:	f240 2231 	movw	r2, #561	; 0x231
 8016ca2:	491d      	ldr	r1, [pc, #116]	; (8016d18 <tcp_write+0x328>)
 8016ca4:	4816      	ldr	r0, [pc, #88]	; (8016d00 <tcp_write+0x310>)
 8016ca6:	f007 fee9 	bl	801ea7c <iprintf>
          extendlen = seglen;
 8016caa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016cac:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8016cb0:	e01a      	b.n	8016ce8 <tcp_write+0x2f8>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016cb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016cb4:	2201      	movs	r2, #1
 8016cb6:	4619      	mov	r1, r3
 8016cb8:	2000      	movs	r0, #0
 8016cba:	f7fa fb21 	bl	8011300 <pbuf_alloc>
 8016cbe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	f000 8215 	beq.w	80170f2 <tcp_write+0x702>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016cc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016ccc:	68ba      	ldr	r2, [r7, #8]
 8016cce:	441a      	add	r2, r3
 8016cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cd2:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016cd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016cd6:	f7fa feb7 	bl	8011a48 <pbuf_clen>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	461a      	mov	r2, r3
 8016cde:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016ce2:	4413      	add	r3, r2
 8016ce4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016ce8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016cec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016cee:	4413      	add	r3, r2
 8016cf0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8016cf4:	e0e0      	b.n	8016eb8 <tcp_write+0x4c8>
 8016cf6:	bf00      	nop
 8016cf8:	08024ca4 	.word	0x08024ca4
 8016cfc:	08024e44 	.word	0x08024e44
 8016d00:	08024cf8 	.word	0x08024cf8
 8016d04:	08024e5c 	.word	0x08024e5c
 8016d08:	08024e90 	.word	0x08024e90
 8016d0c:	08024ea8 	.word	0x08024ea8
 8016d10:	08024ed8 	.word	0x08024ed8
 8016d14:	08024ef8 	.word	0x08024ef8
 8016d18:	08024f18 	.word	0x08024f18
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	f000 80c8 	beq.w	8016eb8 <tcp_write+0x4c8>
 8016d28:	4ba3      	ldr	r3, [pc, #652]	; (8016fb8 <tcp_write+0x5c8>)
 8016d2a:	f240 224a 	movw	r2, #586	; 0x24a
 8016d2e:	49a3      	ldr	r1, [pc, #652]	; (8016fbc <tcp_write+0x5cc>)
 8016d30:	48a3      	ldr	r0, [pc, #652]	; (8016fc0 <tcp_write+0x5d0>)
 8016d32:	f007 fea3 	bl	801ea7c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016d36:	e0bf      	b.n	8016eb8 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 8016d38:	88fa      	ldrh	r2, [r7, #6]
 8016d3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016d3e:	1ad3      	subs	r3, r2, r3
 8016d40:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8016d42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016d4a:	1ad3      	subs	r3, r2, r3
 8016d4c:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016d4e:	8bfa      	ldrh	r2, [r7, #30]
 8016d50:	8c3b      	ldrh	r3, [r7, #32]
 8016d52:	4293      	cmp	r3, r2
 8016d54:	bf28      	it	cs
 8016d56:	4613      	movcs	r3, r2
 8016d58:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016d5a:	797b      	ldrb	r3, [r7, #5]
 8016d5c:	f003 0301 	and.w	r3, r3, #1
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d036      	beq.n	8016dd2 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016d64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016d68:	b29a      	uxth	r2, r3
 8016d6a:	8bbb      	ldrh	r3, [r7, #28]
 8016d6c:	4413      	add	r3, r2
 8016d6e:	b299      	uxth	r1, r3
 8016d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	bf0c      	ite	eq
 8016d76:	2301      	moveq	r3, #1
 8016d78:	2300      	movne	r3, #0
 8016d7a:	b2db      	uxtb	r3, r3
 8016d7c:	f107 0016 	add.w	r0, r7, #22
 8016d80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016d82:	9302      	str	r3, [sp, #8]
 8016d84:	797b      	ldrb	r3, [r7, #5]
 8016d86:	9301      	str	r3, [sp, #4]
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	9300      	str	r3, [sp, #0]
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	2036      	movs	r0, #54	; 0x36
 8016d90:	f7ff fd3a 	bl	8016808 <tcp_pbuf_prealloc>
 8016d94:	6378      	str	r0, [r7, #52]	; 0x34
 8016d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	f000 81ac 	beq.w	80170f6 <tcp_write+0x706>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016da0:	895b      	ldrh	r3, [r3, #10]
 8016da2:	8bba      	ldrh	r2, [r7, #28]
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d906      	bls.n	8016db6 <tcp_write+0x3c6>
 8016da8:	4b83      	ldr	r3, [pc, #524]	; (8016fb8 <tcp_write+0x5c8>)
 8016daa:	f240 2266 	movw	r2, #614	; 0x266
 8016dae:	4985      	ldr	r1, [pc, #532]	; (8016fc4 <tcp_write+0x5d4>)
 8016db0:	4883      	ldr	r0, [pc, #524]	; (8016fc0 <tcp_write+0x5d0>)
 8016db2:	f007 fe63 	bl	801ea7c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016db8:	685a      	ldr	r2, [r3, #4]
 8016dba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016dbe:	18d0      	adds	r0, r2, r3
 8016dc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016dc4:	68ba      	ldr	r2, [r7, #8]
 8016dc6:	4413      	add	r3, r2
 8016dc8:	8bba      	ldrh	r2, [r7, #28]
 8016dca:	4619      	mov	r1, r3
 8016dcc:	f007 f912 	bl	801dff4 <memcpy>
 8016dd0:	e02f      	b.n	8016e32 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016dd2:	8afb      	ldrh	r3, [r7, #22]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d006      	beq.n	8016de6 <tcp_write+0x3f6>
 8016dd8:	4b77      	ldr	r3, [pc, #476]	; (8016fb8 <tcp_write+0x5c8>)
 8016dda:	f240 2271 	movw	r2, #625	; 0x271
 8016dde:	497a      	ldr	r1, [pc, #488]	; (8016fc8 <tcp_write+0x5d8>)
 8016de0:	4877      	ldr	r0, [pc, #476]	; (8016fc0 <tcp_write+0x5d0>)
 8016de2:	f007 fe4b 	bl	801ea7c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016de6:	8bbb      	ldrh	r3, [r7, #28]
 8016de8:	2201      	movs	r2, #1
 8016dea:	4619      	mov	r1, r3
 8016dec:	2036      	movs	r0, #54	; 0x36
 8016dee:	f7fa fa87 	bl	8011300 <pbuf_alloc>
 8016df2:	61b8      	str	r0, [r7, #24]
 8016df4:	69bb      	ldr	r3, [r7, #24]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	f000 817f 	beq.w	80170fa <tcp_write+0x70a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016dfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016e00:	68ba      	ldr	r2, [r7, #8]
 8016e02:	441a      	add	r2, r3
 8016e04:	69bb      	ldr	r3, [r7, #24]
 8016e06:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016e08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e0c:	b29b      	uxth	r3, r3
 8016e0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e12:	4619      	mov	r1, r3
 8016e14:	2036      	movs	r0, #54	; 0x36
 8016e16:	f7fa fa73 	bl	8011300 <pbuf_alloc>
 8016e1a:	6378      	str	r0, [r7, #52]	; 0x34
 8016e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d103      	bne.n	8016e2a <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016e22:	69b8      	ldr	r0, [r7, #24]
 8016e24:	f7fa fd82 	bl	801192c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016e28:	e16a      	b.n	8017100 <tcp_write+0x710>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016e2a:	69b9      	ldr	r1, [r7, #24]
 8016e2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016e2e:	f7fa fe4b 	bl	8011ac8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016e32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016e34:	f7fa fe08 	bl	8011a48 <pbuf_clen>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	461a      	mov	r2, r3
 8016e3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016e40:	4413      	add	r3, r2
 8016e42:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016e46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016e4a:	2b09      	cmp	r3, #9
 8016e4c:	d903      	bls.n	8016e56 <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016e4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016e50:	f7fa fd6c 	bl	801192c <pbuf_free>
      goto memerr;
 8016e54:	e154      	b.n	8017100 <tcp_write+0x710>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016e5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016e5e:	441a      	add	r2, r3
 8016e60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016e64:	9300      	str	r3, [sp, #0]
 8016e66:	4613      	mov	r3, r2
 8016e68:	2200      	movs	r2, #0
 8016e6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016e6c:	68f8      	ldr	r0, [r7, #12]
 8016e6e:	f7ff fc2b 	bl	80166c8 <tcp_create_segment>
 8016e72:	6578      	str	r0, [r7, #84]	; 0x54
 8016e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	f000 8141 	beq.w	80170fe <tcp_write+0x70e>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8016e7c:	8afa      	ldrh	r2, [r7, #22]
 8016e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e80:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d102      	bne.n	8016e8e <tcp_write+0x49e>
      queue = seg;
 8016e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016e8c:	e00c      	b.n	8016ea8 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d106      	bne.n	8016ea2 <tcp_write+0x4b2>
 8016e94:	4b48      	ldr	r3, [pc, #288]	; (8016fb8 <tcp_write+0x5c8>)
 8016e96:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016e9a:	494c      	ldr	r1, [pc, #304]	; (8016fcc <tcp_write+0x5dc>)
 8016e9c:	4848      	ldr	r0, [pc, #288]	; (8016fc0 <tcp_write+0x5d0>)
 8016e9e:	f007 fded 	bl	801ea7c <iprintf>
      prev_seg->next = seg;
 8016ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016ea6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016eaa:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016eac:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016eb0:	8bbb      	ldrh	r3, [r7, #28]
 8016eb2:	4413      	add	r3, r2
 8016eb4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 8016eb8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016ebc:	88fb      	ldrh	r3, [r7, #6]
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	f4ff af3a 	bcc.w	8016d38 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8016ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d00b      	beq.n	8016ee2 <tcp_write+0x4f2>
 8016eca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d007      	beq.n	8016ee2 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8016ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ed4:	895a      	ldrh	r2, [r3, #10]
 8016ed6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8016eda:	4413      	add	r3, r2
 8016edc:	b29a      	uxth	r2, r3
 8016ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ee0:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016ee2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d045      	beq.n	8016f76 <tcp_write+0x586>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016eec:	685b      	ldr	r3, [r3, #4]
 8016eee:	633b      	str	r3, [r7, #48]	; 0x30
 8016ef0:	e021      	b.n	8016f36 <tcp_write+0x546>
      p->tot_len += oversize_used;
 8016ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef4:	891a      	ldrh	r2, [r3, #8]
 8016ef6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016efa:	4413      	add	r3, r2
 8016efc:	b29a      	uxth	r2, r3
 8016efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f00:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d112      	bne.n	8016f30 <tcp_write+0x540>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f0c:	685b      	ldr	r3, [r3, #4]
 8016f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f10:	8952      	ldrh	r2, [r2, #10]
 8016f12:	4413      	add	r3, r2
 8016f14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016f18:	68b9      	ldr	r1, [r7, #8]
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f007 f86a 	bl	801dff4 <memcpy>
        p->len += oversize_used;
 8016f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f22:	895a      	ldrh	r2, [r3, #10]
 8016f24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016f28:	4413      	add	r3, r2
 8016f2a:	b29a      	uxth	r2, r3
 8016f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	633b      	str	r3, [r7, #48]	; 0x30
 8016f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d1da      	bne.n	8016ef2 <tcp_write+0x502>
      }
    }
    last_unsent->len += oversize_used;
 8016f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f3e:	891a      	ldrh	r2, [r3, #8]
 8016f40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016f44:	4413      	add	r3, r2
 8016f46:	b29a      	uxth	r2, r3
 8016f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f4a:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8016f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f4e:	895b      	ldrh	r3, [r3, #10]
 8016f50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d906      	bls.n	8016f66 <tcp_write+0x576>
 8016f58:	4b17      	ldr	r3, [pc, #92]	; (8016fb8 <tcp_write+0x5c8>)
 8016f5a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016f5e:	491c      	ldr	r1, [pc, #112]	; (8016fd0 <tcp_write+0x5e0>)
 8016f60:	4817      	ldr	r0, [pc, #92]	; (8016fc0 <tcp_write+0x5d0>)
 8016f62:	f007 fd8b 	bl	801ea7c <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8016f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f68:	895a      	ldrh	r2, [r3, #10]
 8016f6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016f6e:	1ad3      	subs	r3, r2, r3
 8016f70:	b29a      	uxth	r2, r3
 8016f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f74:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016f76:	8afa      	ldrh	r2, [r7, #22]
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d029      	beq.n	8016fd8 <tcp_write+0x5e8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d106      	bne.n	8016f98 <tcp_write+0x5a8>
 8016f8a:	4b0b      	ldr	r3, [pc, #44]	; (8016fb8 <tcp_write+0x5c8>)
 8016f8c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016f90:	4910      	ldr	r1, [pc, #64]	; (8016fd4 <tcp_write+0x5e4>)
 8016f92:	480b      	ldr	r0, [pc, #44]	; (8016fc0 <tcp_write+0x5d0>)
 8016f94:	f007 fd72 	bl	801ea7c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f9a:	685b      	ldr	r3, [r3, #4]
 8016f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7fa fd92 	bl	8011ac8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fa6:	891a      	ldrh	r2, [r3, #8]
 8016fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016faa:	891b      	ldrh	r3, [r3, #8]
 8016fac:	4413      	add	r3, r2
 8016fae:	b29a      	uxth	r2, r3
 8016fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fb2:	811a      	strh	r2, [r3, #8]
 8016fb4:	e04d      	b.n	8017052 <tcp_write+0x662>
 8016fb6:	bf00      	nop
 8016fb8:	08024ca4 	.word	0x08024ca4
 8016fbc:	08024f44 	.word	0x08024f44
 8016fc0:	08024cf8 	.word	0x08024cf8
 8016fc4:	08024f74 	.word	0x08024f74
 8016fc8:	08024fb4 	.word	0x08024fb4
 8016fcc:	08024fc4 	.word	0x08024fc4
 8016fd0:	08024fd8 	.word	0x08024fd8
 8016fd4:	08025004 	.word	0x08025004
  } else if (extendlen > 0) {
 8016fd8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d038      	beq.n	8017052 <tcp_write+0x662>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d003      	beq.n	8016fee <tcp_write+0x5fe>
 8016fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fe8:	685b      	ldr	r3, [r3, #4]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d106      	bne.n	8016ffc <tcp_write+0x60c>
 8016fee:	4b5b      	ldr	r3, [pc, #364]	; (801715c <tcp_write+0x76c>)
 8016ff0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016ff4:	495a      	ldr	r1, [pc, #360]	; (8017160 <tcp_write+0x770>)
 8016ff6:	485b      	ldr	r0, [pc, #364]	; (8017164 <tcp_write+0x774>)
 8016ff8:	f007 fd40 	bl	801ea7c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ffe:	685b      	ldr	r3, [r3, #4]
 8017000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017002:	e00a      	b.n	801701a <tcp_write+0x62a>
      p->tot_len += extendlen;
 8017004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017006:	891a      	ldrh	r2, [r3, #8]
 8017008:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801700c:	4413      	add	r3, r2
 801700e:	b29a      	uxth	r2, r3
 8017010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017012:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	62fb      	str	r3, [r7, #44]	; 0x2c
 801701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d1f0      	bne.n	8017004 <tcp_write+0x614>
    }
    p->tot_len += extendlen;
 8017022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017024:	891a      	ldrh	r2, [r3, #8]
 8017026:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801702a:	4413      	add	r3, r2
 801702c:	b29a      	uxth	r2, r3
 801702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017030:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017034:	895a      	ldrh	r2, [r3, #10]
 8017036:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801703a:	4413      	add	r3, r2
 801703c:	b29a      	uxth	r2, r3
 801703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017040:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017044:	891a      	ldrh	r2, [r3, #8]
 8017046:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801704a:	4413      	add	r3, r2
 801704c:	b29a      	uxth	r2, r3
 801704e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017050:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017054:	2b00      	cmp	r3, #0
 8017056:	d103      	bne.n	8017060 <tcp_write+0x670>
    pcb->unsent = queue;
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801705c:	66da      	str	r2, [r3, #108]	; 0x6c
 801705e:	e002      	b.n	8017066 <tcp_write+0x676>
  } else {
    last_unsent->next = queue;
 8017060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017064:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801706a:	88fb      	ldrh	r3, [r7, #6]
 801706c:	441a      	add	r2, r3
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017078:	88fb      	ldrh	r3, [r7, #6]
 801707a:	1ad3      	subs	r3, r2, r3
 801707c:	b29a      	uxth	r2, r3
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 801708a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017094:	2b00      	cmp	r3, #0
 8017096:	d00e      	beq.n	80170b6 <tcp_write+0x6c6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801709c:	2b00      	cmp	r3, #0
 801709e:	d10a      	bne.n	80170b6 <tcp_write+0x6c6>
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d106      	bne.n	80170b6 <tcp_write+0x6c6>
 80170a8:	4b2c      	ldr	r3, [pc, #176]	; (801715c <tcp_write+0x76c>)
 80170aa:	f240 3212 	movw	r2, #786	; 0x312
 80170ae:	492e      	ldr	r1, [pc, #184]	; (8017168 <tcp_write+0x778>)
 80170b0:	482c      	ldr	r0, [pc, #176]	; (8017164 <tcp_write+0x774>)
 80170b2:	f007 fce3 	bl	801ea7c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80170b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d016      	beq.n	80170ea <tcp_write+0x6fa>
 80170bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170be:	691b      	ldr	r3, [r3, #16]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d012      	beq.n	80170ea <tcp_write+0x6fa>
 80170c4:	797b      	ldrb	r3, [r7, #5]
 80170c6:	f003 0302 	and.w	r3, r3, #2
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d10d      	bne.n	80170ea <tcp_write+0x6fa>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80170ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170d0:	691b      	ldr	r3, [r3, #16]
 80170d2:	899b      	ldrh	r3, [r3, #12]
 80170d4:	b29c      	uxth	r4, r3
 80170d6:	2008      	movs	r0, #8
 80170d8:	f7f8 f868 	bl	800f1ac <lwip_htons>
 80170dc:	4603      	mov	r3, r0
 80170de:	461a      	mov	r2, r3
 80170e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170e2:	691b      	ldr	r3, [r3, #16]
 80170e4:	4322      	orrs	r2, r4
 80170e6:	b292      	uxth	r2, r2
 80170e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80170ea:	2300      	movs	r3, #0
 80170ec:	e031      	b.n	8017152 <tcp_write+0x762>
          goto memerr;
 80170ee:	bf00      	nop
 80170f0:	e006      	b.n	8017100 <tcp_write+0x710>
            goto memerr;
 80170f2:	bf00      	nop
 80170f4:	e004      	b.n	8017100 <tcp_write+0x710>
        goto memerr;
 80170f6:	bf00      	nop
 80170f8:	e002      	b.n	8017100 <tcp_write+0x710>
        goto memerr;
 80170fa:	bf00      	nop
 80170fc:	e000      	b.n	8017100 <tcp_write+0x710>
      goto memerr;
 80170fe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	8b5b      	ldrh	r3, [r3, #26]
 8017104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017108:	b29a      	uxth	r2, r3
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801710e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017110:	2b00      	cmp	r3, #0
 8017112:	d002      	beq.n	801711a <tcp_write+0x72a>
    pbuf_free(concat_p);
 8017114:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017116:	f7fa fc09 	bl	801192c <pbuf_free>
  }
  if (queue != NULL) {
 801711a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801711c:	2b00      	cmp	r3, #0
 801711e:	d002      	beq.n	8017126 <tcp_write+0x736>
    tcp_segs_free(queue);
 8017120:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8017122:	f7fc fb15 	bl	8013750 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801712c:	2b00      	cmp	r3, #0
 801712e:	d00e      	beq.n	801714e <tcp_write+0x75e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017134:	2b00      	cmp	r3, #0
 8017136:	d10a      	bne.n	801714e <tcp_write+0x75e>
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801713c:	2b00      	cmp	r3, #0
 801713e:	d106      	bne.n	801714e <tcp_write+0x75e>
 8017140:	4b06      	ldr	r3, [pc, #24]	; (801715c <tcp_write+0x76c>)
 8017142:	f240 3227 	movw	r2, #807	; 0x327
 8017146:	4908      	ldr	r1, [pc, #32]	; (8017168 <tcp_write+0x778>)
 8017148:	4806      	ldr	r0, [pc, #24]	; (8017164 <tcp_write+0x774>)
 801714a:	f007 fc97 	bl	801ea7c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801714e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017152:	4618      	mov	r0, r3
 8017154:	3764      	adds	r7, #100	; 0x64
 8017156:	46bd      	mov	sp, r7
 8017158:	bd90      	pop	{r4, r7, pc}
 801715a:	bf00      	nop
 801715c:	08024ca4 	.word	0x08024ca4
 8017160:	0802503c 	.word	0x0802503c
 8017164:	08024cf8 	.word	0x08024cf8
 8017168:	08025074 	.word	0x08025074

0801716c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801716c:	b590      	push	{r4, r7, lr}
 801716e:	b08b      	sub	sp, #44	; 0x2c
 8017170:	af02      	add	r7, sp, #8
 8017172:	6078      	str	r0, [r7, #4]
 8017174:	460b      	mov	r3, r1
 8017176:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017178:	2300      	movs	r3, #0
 801717a:	61bb      	str	r3, [r7, #24]
 801717c:	2300      	movs	r3, #0
 801717e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017180:	2300      	movs	r3, #0
 8017182:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d106      	bne.n	8017198 <tcp_split_unsent_seg+0x2c>
 801718a:	4b97      	ldr	r3, [pc, #604]	; (80173e8 <tcp_split_unsent_seg+0x27c>)
 801718c:	f240 324b 	movw	r2, #843	; 0x34b
 8017190:	4996      	ldr	r1, [pc, #600]	; (80173ec <tcp_split_unsent_seg+0x280>)
 8017192:	4897      	ldr	r0, [pc, #604]	; (80173f0 <tcp_split_unsent_seg+0x284>)
 8017194:	f007 fc72 	bl	801ea7c <iprintf>

  useg = pcb->unsent;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801719c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801719e:	697b      	ldr	r3, [r7, #20]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d102      	bne.n	80171aa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80171a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171a8:	e119      	b.n	80173de <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 80171aa:	887b      	ldrh	r3, [r7, #2]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d109      	bne.n	80171c4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80171b0:	4b8d      	ldr	r3, [pc, #564]	; (80173e8 <tcp_split_unsent_seg+0x27c>)
 80171b2:	f240 3253 	movw	r2, #851	; 0x353
 80171b6:	498f      	ldr	r1, [pc, #572]	; (80173f4 <tcp_split_unsent_seg+0x288>)
 80171b8:	488d      	ldr	r0, [pc, #564]	; (80173f0 <tcp_split_unsent_seg+0x284>)
 80171ba:	f007 fc5f 	bl	801ea7c <iprintf>
    return ERR_VAL;
 80171be:	f06f 0305 	mvn.w	r3, #5
 80171c2:	e10c      	b.n	80173de <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 80171c4:	697b      	ldr	r3, [r7, #20]
 80171c6:	891b      	ldrh	r3, [r3, #8]
 80171c8:	887a      	ldrh	r2, [r7, #2]
 80171ca:	429a      	cmp	r2, r3
 80171cc:	d301      	bcc.n	80171d2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80171ce:	2300      	movs	r3, #0
 80171d0:	e105      	b.n	80173de <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171d6:	887a      	ldrh	r2, [r7, #2]
 80171d8:	429a      	cmp	r2, r3
 80171da:	d906      	bls.n	80171ea <tcp_split_unsent_seg+0x7e>
 80171dc:	4b82      	ldr	r3, [pc, #520]	; (80173e8 <tcp_split_unsent_seg+0x27c>)
 80171de:	f240 325b 	movw	r2, #859	; 0x35b
 80171e2:	4985      	ldr	r1, [pc, #532]	; (80173f8 <tcp_split_unsent_seg+0x28c>)
 80171e4:	4882      	ldr	r0, [pc, #520]	; (80173f0 <tcp_split_unsent_seg+0x284>)
 80171e6:	f007 fc49 	bl	801ea7c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80171ea:	697b      	ldr	r3, [r7, #20]
 80171ec:	891b      	ldrh	r3, [r3, #8]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d106      	bne.n	8017200 <tcp_split_unsent_seg+0x94>
 80171f2:	4b7d      	ldr	r3, [pc, #500]	; (80173e8 <tcp_split_unsent_seg+0x27c>)
 80171f4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80171f8:	4980      	ldr	r1, [pc, #512]	; (80173fc <tcp_split_unsent_seg+0x290>)
 80171fa:	487d      	ldr	r0, [pc, #500]	; (80173f0 <tcp_split_unsent_seg+0x284>)
 80171fc:	f007 fc3e 	bl	801ea7c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017200:	697b      	ldr	r3, [r7, #20]
 8017202:	7b1b      	ldrb	r3, [r3, #12]
 8017204:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017206:	7bfb      	ldrb	r3, [r7, #15]
 8017208:	009b      	lsls	r3, r3, #2
 801720a:	b2db      	uxtb	r3, r3
 801720c:	f003 0304 	and.w	r3, r3, #4
 8017210:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017212:	697b      	ldr	r3, [r7, #20]
 8017214:	891a      	ldrh	r2, [r3, #8]
 8017216:	887b      	ldrh	r3, [r7, #2]
 8017218:	1ad3      	subs	r3, r2, r3
 801721a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801721c:	7bbb      	ldrb	r3, [r7, #14]
 801721e:	b29a      	uxth	r2, r3
 8017220:	89bb      	ldrh	r3, [r7, #12]
 8017222:	4413      	add	r3, r2
 8017224:	b29b      	uxth	r3, r3
 8017226:	f44f 7220 	mov.w	r2, #640	; 0x280
 801722a:	4619      	mov	r1, r3
 801722c:	2036      	movs	r0, #54	; 0x36
 801722e:	f7fa f867 	bl	8011300 <pbuf_alloc>
 8017232:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017234:	693b      	ldr	r3, [r7, #16]
 8017236:	2b00      	cmp	r3, #0
 8017238:	f000 80ba 	beq.w	80173b0 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	685b      	ldr	r3, [r3, #4]
 8017240:	891a      	ldrh	r2, [r3, #8]
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	891b      	ldrh	r3, [r3, #8]
 8017246:	1ad3      	subs	r3, r2, r3
 8017248:	b29a      	uxth	r2, r3
 801724a:	887b      	ldrh	r3, [r7, #2]
 801724c:	4413      	add	r3, r2
 801724e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	6858      	ldr	r0, [r3, #4]
 8017254:	693b      	ldr	r3, [r7, #16]
 8017256:	685a      	ldr	r2, [r3, #4]
 8017258:	7bbb      	ldrb	r3, [r7, #14]
 801725a:	18d1      	adds	r1, r2, r3
 801725c:	897b      	ldrh	r3, [r7, #10]
 801725e:	89ba      	ldrh	r2, [r7, #12]
 8017260:	f7fa fd6a 	bl	8011d38 <pbuf_copy_partial>
 8017264:	4603      	mov	r3, r0
 8017266:	461a      	mov	r2, r3
 8017268:	89bb      	ldrh	r3, [r7, #12]
 801726a:	4293      	cmp	r3, r2
 801726c:	f040 80a2 	bne.w	80173b4 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	691b      	ldr	r3, [r3, #16]
 8017274:	899b      	ldrh	r3, [r3, #12]
 8017276:	b29b      	uxth	r3, r3
 8017278:	4618      	mov	r0, r3
 801727a:	f7f7 ff97 	bl	800f1ac <lwip_htons>
 801727e:	4603      	mov	r3, r0
 8017280:	b2db      	uxtb	r3, r3
 8017282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017286:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017288:	2300      	movs	r3, #0
 801728a:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801728c:	7ffb      	ldrb	r3, [r7, #31]
 801728e:	f003 0308 	and.w	r3, r3, #8
 8017292:	2b00      	cmp	r3, #0
 8017294:	d007      	beq.n	80172a6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017296:	7ffb      	ldrb	r3, [r7, #31]
 8017298:	f023 0308 	bic.w	r3, r3, #8
 801729c:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801729e:	7fbb      	ldrb	r3, [r7, #30]
 80172a0:	f043 0308 	orr.w	r3, r3, #8
 80172a4:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 80172a6:	7ffb      	ldrb	r3, [r7, #31]
 80172a8:	f003 0301 	and.w	r3, r3, #1
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d007      	beq.n	80172c0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80172b0:	7ffb      	ldrb	r3, [r7, #31]
 80172b2:	f023 0301 	bic.w	r3, r3, #1
 80172b6:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 80172b8:	7fbb      	ldrb	r3, [r7, #30]
 80172ba:	f043 0301 	orr.w	r3, r3, #1
 80172be:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80172c0:	697b      	ldr	r3, [r7, #20]
 80172c2:	691b      	ldr	r3, [r3, #16]
 80172c4:	685b      	ldr	r3, [r3, #4]
 80172c6:	4618      	mov	r0, r3
 80172c8:	f7f7 ff85 	bl	800f1d6 <lwip_htonl>
 80172cc:	4602      	mov	r2, r0
 80172ce:	887b      	ldrh	r3, [r7, #2]
 80172d0:	18d1      	adds	r1, r2, r3
 80172d2:	7fba      	ldrb	r2, [r7, #30]
 80172d4:	7bfb      	ldrb	r3, [r7, #15]
 80172d6:	9300      	str	r3, [sp, #0]
 80172d8:	460b      	mov	r3, r1
 80172da:	6939      	ldr	r1, [r7, #16]
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f7ff f9f3 	bl	80166c8 <tcp_create_segment>
 80172e2:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 80172e4:	69bb      	ldr	r3, [r7, #24]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d066      	beq.n	80173b8 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	685b      	ldr	r3, [r3, #4]
 80172ee:	4618      	mov	r0, r3
 80172f0:	f7fa fbaa 	bl	8011a48 <pbuf_clen>
 80172f4:	4603      	mov	r3, r0
 80172f6:	461a      	mov	r2, r3
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80172fe:	1a9b      	subs	r3, r3, r2
 8017300:	b29a      	uxth	r2, r3
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017308:	697b      	ldr	r3, [r7, #20]
 801730a:	6858      	ldr	r0, [r3, #4]
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	685b      	ldr	r3, [r3, #4]
 8017310:	891a      	ldrh	r2, [r3, #8]
 8017312:	89bb      	ldrh	r3, [r7, #12]
 8017314:	1ad3      	subs	r3, r2, r3
 8017316:	b29b      	uxth	r3, r3
 8017318:	4619      	mov	r1, r3
 801731a:	f7fa f94f 	bl	80115bc <pbuf_realloc>
  useg->len -= remainder;
 801731e:	697b      	ldr	r3, [r7, #20]
 8017320:	891a      	ldrh	r2, [r3, #8]
 8017322:	89bb      	ldrh	r3, [r7, #12]
 8017324:	1ad3      	subs	r3, r2, r3
 8017326:	b29a      	uxth	r2, r3
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801732c:	697b      	ldr	r3, [r7, #20]
 801732e:	691b      	ldr	r3, [r3, #16]
 8017330:	899b      	ldrh	r3, [r3, #12]
 8017332:	b29c      	uxth	r4, r3
 8017334:	7ffb      	ldrb	r3, [r7, #31]
 8017336:	b29b      	uxth	r3, r3
 8017338:	4618      	mov	r0, r3
 801733a:	f7f7 ff37 	bl	800f1ac <lwip_htons>
 801733e:	4603      	mov	r3, r0
 8017340:	461a      	mov	r2, r3
 8017342:	697b      	ldr	r3, [r7, #20]
 8017344:	691b      	ldr	r3, [r3, #16]
 8017346:	4322      	orrs	r2, r4
 8017348:	b292      	uxth	r2, r2
 801734a:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	2200      	movs	r2, #0
 8017350:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017352:	697b      	ldr	r3, [r7, #20]
 8017354:	685b      	ldr	r3, [r3, #4]
 8017356:	4618      	mov	r0, r3
 8017358:	f7fa fb76 	bl	8011a48 <pbuf_clen>
 801735c:	4603      	mov	r3, r0
 801735e:	461a      	mov	r2, r3
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017366:	4413      	add	r3, r2
 8017368:	b29a      	uxth	r2, r3
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017370:	69bb      	ldr	r3, [r7, #24]
 8017372:	685b      	ldr	r3, [r3, #4]
 8017374:	4618      	mov	r0, r3
 8017376:	f7fa fb67 	bl	8011a48 <pbuf_clen>
 801737a:	4603      	mov	r3, r0
 801737c:	461a      	mov	r2, r3
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017384:	4413      	add	r3, r2
 8017386:	b29a      	uxth	r2, r3
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801738e:	697b      	ldr	r3, [r7, #20]
 8017390:	681a      	ldr	r2, [r3, #0]
 8017392:	69bb      	ldr	r3, [r7, #24]
 8017394:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017396:	697b      	ldr	r3, [r7, #20]
 8017398:	69ba      	ldr	r2, [r7, #24]
 801739a:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801739c:	69bb      	ldr	r3, [r7, #24]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d103      	bne.n	80173ac <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2200      	movs	r2, #0
 80173a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80173ac:	2300      	movs	r3, #0
 80173ae:	e016      	b.n	80173de <tcp_split_unsent_seg+0x272>
    goto memerr;
 80173b0:	bf00      	nop
 80173b2:	e002      	b.n	80173ba <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80173b4:	bf00      	nop
 80173b6:	e000      	b.n	80173ba <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80173b8:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80173ba:	69bb      	ldr	r3, [r7, #24]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d006      	beq.n	80173ce <tcp_split_unsent_seg+0x262>
 80173c0:	4b09      	ldr	r3, [pc, #36]	; (80173e8 <tcp_split_unsent_seg+0x27c>)
 80173c2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80173c6:	490e      	ldr	r1, [pc, #56]	; (8017400 <tcp_split_unsent_seg+0x294>)
 80173c8:	4809      	ldr	r0, [pc, #36]	; (80173f0 <tcp_split_unsent_seg+0x284>)
 80173ca:	f007 fb57 	bl	801ea7c <iprintf>
  if (p != NULL) {
 80173ce:	693b      	ldr	r3, [r7, #16]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d002      	beq.n	80173da <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 80173d4:	6938      	ldr	r0, [r7, #16]
 80173d6:	f7fa faa9 	bl	801192c <pbuf_free>
  }

  return ERR_MEM;
 80173da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80173de:	4618      	mov	r0, r3
 80173e0:	3724      	adds	r7, #36	; 0x24
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd90      	pop	{r4, r7, pc}
 80173e6:	bf00      	nop
 80173e8:	08024ca4 	.word	0x08024ca4
 80173ec:	08025094 	.word	0x08025094
 80173f0:	08024cf8 	.word	0x08024cf8
 80173f4:	080250b8 	.word	0x080250b8
 80173f8:	080250dc 	.word	0x080250dc
 80173fc:	080250ec 	.word	0x080250ec
 8017400:	080250fc 	.word	0x080250fc

08017404 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017404:	b590      	push	{r4, r7, lr}
 8017406:	b085      	sub	sp, #20
 8017408:	af00      	add	r7, sp, #0
 801740a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d106      	bne.n	8017420 <tcp_send_fin+0x1c>
 8017412:	4b21      	ldr	r3, [pc, #132]	; (8017498 <tcp_send_fin+0x94>)
 8017414:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017418:	4920      	ldr	r1, [pc, #128]	; (801749c <tcp_send_fin+0x98>)
 801741a:	4821      	ldr	r0, [pc, #132]	; (80174a0 <tcp_send_fin+0x9c>)
 801741c:	f007 fb2e 	bl	801ea7c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017424:	2b00      	cmp	r3, #0
 8017426:	d02e      	beq.n	8017486 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801742c:	60fb      	str	r3, [r7, #12]
 801742e:	e002      	b.n	8017436 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d1f8      	bne.n	8017430 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	691b      	ldr	r3, [r3, #16]
 8017442:	899b      	ldrh	r3, [r3, #12]
 8017444:	b29b      	uxth	r3, r3
 8017446:	4618      	mov	r0, r3
 8017448:	f7f7 feb0 	bl	800f1ac <lwip_htons>
 801744c:	4603      	mov	r3, r0
 801744e:	b2db      	uxtb	r3, r3
 8017450:	f003 0307 	and.w	r3, r3, #7
 8017454:	2b00      	cmp	r3, #0
 8017456:	d116      	bne.n	8017486 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	691b      	ldr	r3, [r3, #16]
 801745c:	899b      	ldrh	r3, [r3, #12]
 801745e:	b29c      	uxth	r4, r3
 8017460:	2001      	movs	r0, #1
 8017462:	f7f7 fea3 	bl	800f1ac <lwip_htons>
 8017466:	4603      	mov	r3, r0
 8017468:	461a      	mov	r2, r3
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	691b      	ldr	r3, [r3, #16]
 801746e:	4322      	orrs	r2, r4
 8017470:	b292      	uxth	r2, r2
 8017472:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	8b5b      	ldrh	r3, [r3, #26]
 8017478:	f043 0320 	orr.w	r3, r3, #32
 801747c:	b29a      	uxth	r2, r3
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017482:	2300      	movs	r3, #0
 8017484:	e004      	b.n	8017490 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017486:	2101      	movs	r1, #1
 8017488:	6878      	ldr	r0, [r7, #4]
 801748a:	f000 f80b 	bl	80174a4 <tcp_enqueue_flags>
 801748e:	4603      	mov	r3, r0
}
 8017490:	4618      	mov	r0, r3
 8017492:	3714      	adds	r7, #20
 8017494:	46bd      	mov	sp, r7
 8017496:	bd90      	pop	{r4, r7, pc}
 8017498:	08024ca4 	.word	0x08024ca4
 801749c:	08025108 	.word	0x08025108
 80174a0:	08024cf8 	.word	0x08024cf8

080174a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b088      	sub	sp, #32
 80174a8:	af02      	add	r7, sp, #8
 80174aa:	6078      	str	r0, [r7, #4]
 80174ac:	460b      	mov	r3, r1
 80174ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80174b0:	2300      	movs	r3, #0
 80174b2:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 80174b4:	2300      	movs	r3, #0
 80174b6:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80174b8:	78fb      	ldrb	r3, [r7, #3]
 80174ba:	f003 0303 	and.w	r3, r3, #3
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d106      	bne.n	80174d0 <tcp_enqueue_flags+0x2c>
 80174c2:	4b67      	ldr	r3, [pc, #412]	; (8017660 <tcp_enqueue_flags+0x1bc>)
 80174c4:	f240 4211 	movw	r2, #1041	; 0x411
 80174c8:	4966      	ldr	r1, [pc, #408]	; (8017664 <tcp_enqueue_flags+0x1c0>)
 80174ca:	4867      	ldr	r0, [pc, #412]	; (8017668 <tcp_enqueue_flags+0x1c4>)
 80174cc:	f007 fad6 	bl	801ea7c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d106      	bne.n	80174e4 <tcp_enqueue_flags+0x40>
 80174d6:	4b62      	ldr	r3, [pc, #392]	; (8017660 <tcp_enqueue_flags+0x1bc>)
 80174d8:	f240 4213 	movw	r2, #1043	; 0x413
 80174dc:	4963      	ldr	r1, [pc, #396]	; (801766c <tcp_enqueue_flags+0x1c8>)
 80174de:	4862      	ldr	r0, [pc, #392]	; (8017668 <tcp_enqueue_flags+0x1c4>)
 80174e0:	f007 facc 	bl	801ea7c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80174e4:	78fb      	ldrb	r3, [r7, #3]
 80174e6:	f003 0302 	and.w	r3, r3, #2
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d001      	beq.n	80174f2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80174ee:	2301      	movs	r3, #1
 80174f0:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80174f2:	7dfb      	ldrb	r3, [r7, #23]
 80174f4:	009b      	lsls	r3, r3, #2
 80174f6:	b2db      	uxtb	r3, r3
 80174f8:	f003 0304 	and.w	r3, r3, #4
 80174fc:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80174fe:	7dbb      	ldrb	r3, [r7, #22]
 8017500:	b29b      	uxth	r3, r3
 8017502:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017506:	4619      	mov	r1, r3
 8017508:	2036      	movs	r0, #54	; 0x36
 801750a:	f7f9 fef9 	bl	8011300 <pbuf_alloc>
 801750e:	60f8      	str	r0, [r7, #12]
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d109      	bne.n	801752a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	8b5b      	ldrh	r3, [r3, #26]
 801751a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801751e:	b29a      	uxth	r2, r3
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017528:	e095      	b.n	8017656 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	895a      	ldrh	r2, [r3, #10]
 801752e:	7dbb      	ldrb	r3, [r7, #22]
 8017530:	b29b      	uxth	r3, r3
 8017532:	429a      	cmp	r2, r3
 8017534:	d206      	bcs.n	8017544 <tcp_enqueue_flags+0xa0>
 8017536:	4b4a      	ldr	r3, [pc, #296]	; (8017660 <tcp_enqueue_flags+0x1bc>)
 8017538:	f240 4239 	movw	r2, #1081	; 0x439
 801753c:	494c      	ldr	r1, [pc, #304]	; (8017670 <tcp_enqueue_flags+0x1cc>)
 801753e:	484a      	ldr	r0, [pc, #296]	; (8017668 <tcp_enqueue_flags+0x1c4>)
 8017540:	f007 fa9c 	bl	801ea7c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017548:	78fa      	ldrb	r2, [r7, #3]
 801754a:	7dfb      	ldrb	r3, [r7, #23]
 801754c:	9300      	str	r3, [sp, #0]
 801754e:	460b      	mov	r3, r1
 8017550:	68f9      	ldr	r1, [r7, #12]
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	f7ff f8b8 	bl	80166c8 <tcp_create_segment>
 8017558:	60b8      	str	r0, [r7, #8]
 801755a:	68bb      	ldr	r3, [r7, #8]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d109      	bne.n	8017574 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	8b5b      	ldrh	r3, [r3, #26]
 8017564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017568:	b29a      	uxth	r2, r3
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801756e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017572:	e070      	b.n	8017656 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017574:	68bb      	ldr	r3, [r7, #8]
 8017576:	691b      	ldr	r3, [r3, #16]
 8017578:	f003 0303 	and.w	r3, r3, #3
 801757c:	2b00      	cmp	r3, #0
 801757e:	d006      	beq.n	801758e <tcp_enqueue_flags+0xea>
 8017580:	4b37      	ldr	r3, [pc, #220]	; (8017660 <tcp_enqueue_flags+0x1bc>)
 8017582:	f240 4242 	movw	r2, #1090	; 0x442
 8017586:	493b      	ldr	r1, [pc, #236]	; (8017674 <tcp_enqueue_flags+0x1d0>)
 8017588:	4837      	ldr	r0, [pc, #220]	; (8017668 <tcp_enqueue_flags+0x1c4>)
 801758a:	f007 fa77 	bl	801ea7c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	891b      	ldrh	r3, [r3, #8]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d006      	beq.n	80175a4 <tcp_enqueue_flags+0x100>
 8017596:	4b32      	ldr	r3, [pc, #200]	; (8017660 <tcp_enqueue_flags+0x1bc>)
 8017598:	f240 4243 	movw	r2, #1091	; 0x443
 801759c:	4936      	ldr	r1, [pc, #216]	; (8017678 <tcp_enqueue_flags+0x1d4>)
 801759e:	4832      	ldr	r0, [pc, #200]	; (8017668 <tcp_enqueue_flags+0x1c4>)
 80175a0:	f007 fa6c 	bl	801ea7c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d103      	bne.n	80175b4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	68ba      	ldr	r2, [r7, #8]
 80175b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80175b2:	e00d      	b.n	80175d0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175b8:	613b      	str	r3, [r7, #16]
 80175ba:	e002      	b.n	80175c2 <tcp_enqueue_flags+0x11e>
 80175bc:	693b      	ldr	r3, [r7, #16]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	613b      	str	r3, [r7, #16]
 80175c2:	693b      	ldr	r3, [r7, #16]
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d1f8      	bne.n	80175bc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80175ca:	693b      	ldr	r3, [r7, #16]
 80175cc:	68ba      	ldr	r2, [r7, #8]
 80175ce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	2200      	movs	r2, #0
 80175d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80175d8:	78fb      	ldrb	r3, [r7, #3]
 80175da:	f003 0302 	and.w	r3, r3, #2
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d104      	bne.n	80175ec <tcp_enqueue_flags+0x148>
 80175e2:	78fb      	ldrb	r3, [r7, #3]
 80175e4:	f003 0301 	and.w	r3, r3, #1
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d004      	beq.n	80175f6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80175f0:	1c5a      	adds	r2, r3, #1
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80175f6:	78fb      	ldrb	r3, [r7, #3]
 80175f8:	f003 0301 	and.w	r3, r3, #1
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d006      	beq.n	801760e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	8b5b      	ldrh	r3, [r3, #26]
 8017604:	f043 0320 	orr.w	r3, r3, #32
 8017608:	b29a      	uxth	r2, r3
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801760e:	68bb      	ldr	r3, [r7, #8]
 8017610:	685b      	ldr	r3, [r3, #4]
 8017612:	4618      	mov	r0, r3
 8017614:	f7fa fa18 	bl	8011a48 <pbuf_clen>
 8017618:	4603      	mov	r3, r0
 801761a:	461a      	mov	r2, r3
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017622:	4413      	add	r3, r2
 8017624:	b29a      	uxth	r2, r3
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017632:	2b00      	cmp	r3, #0
 8017634:	d00e      	beq.n	8017654 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801763a:	2b00      	cmp	r3, #0
 801763c:	d10a      	bne.n	8017654 <tcp_enqueue_flags+0x1b0>
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017642:	2b00      	cmp	r3, #0
 8017644:	d106      	bne.n	8017654 <tcp_enqueue_flags+0x1b0>
 8017646:	4b06      	ldr	r3, [pc, #24]	; (8017660 <tcp_enqueue_flags+0x1bc>)
 8017648:	f240 4265 	movw	r2, #1125	; 0x465
 801764c:	490b      	ldr	r1, [pc, #44]	; (801767c <tcp_enqueue_flags+0x1d8>)
 801764e:	4806      	ldr	r0, [pc, #24]	; (8017668 <tcp_enqueue_flags+0x1c4>)
 8017650:	f007 fa14 	bl	801ea7c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017654:	2300      	movs	r3, #0
}
 8017656:	4618      	mov	r0, r3
 8017658:	3718      	adds	r7, #24
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
 801765e:	bf00      	nop
 8017660:	08024ca4 	.word	0x08024ca4
 8017664:	08025124 	.word	0x08025124
 8017668:	08024cf8 	.word	0x08024cf8
 801766c:	0802517c 	.word	0x0802517c
 8017670:	0802519c 	.word	0x0802519c
 8017674:	080251d8 	.word	0x080251d8
 8017678:	080251f0 	.word	0x080251f0
 801767c:	0802521c 	.word	0x0802521c

08017680 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017680:	b5b0      	push	{r4, r5, r7, lr}
 8017682:	b08a      	sub	sp, #40	; 0x28
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d106      	bne.n	801769c <tcp_output+0x1c>
 801768e:	4b9f      	ldr	r3, [pc, #636]	; (801790c <tcp_output+0x28c>)
 8017690:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017694:	499e      	ldr	r1, [pc, #632]	; (8017910 <tcp_output+0x290>)
 8017696:	489f      	ldr	r0, [pc, #636]	; (8017914 <tcp_output+0x294>)
 8017698:	f007 f9f0 	bl	801ea7c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	7d1b      	ldrb	r3, [r3, #20]
 80176a0:	2b01      	cmp	r3, #1
 80176a2:	d106      	bne.n	80176b2 <tcp_output+0x32>
 80176a4:	4b99      	ldr	r3, [pc, #612]	; (801790c <tcp_output+0x28c>)
 80176a6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80176aa:	499b      	ldr	r1, [pc, #620]	; (8017918 <tcp_output+0x298>)
 80176ac:	4899      	ldr	r0, [pc, #612]	; (8017914 <tcp_output+0x294>)
 80176ae:	f007 f9e5 	bl	801ea7c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80176b2:	4b9a      	ldr	r3, [pc, #616]	; (801791c <tcp_output+0x29c>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	687a      	ldr	r2, [r7, #4]
 80176b8:	429a      	cmp	r2, r3
 80176ba:	d101      	bne.n	80176c0 <tcp_output+0x40>
    return ERR_OK;
 80176bc:	2300      	movs	r3, #0
 80176be:	e1d0      	b.n	8017a62 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80176cc:	4293      	cmp	r3, r2
 80176ce:	bf28      	it	cs
 80176d0:	4613      	movcs	r3, r2
 80176d2:	b29b      	uxth	r3, r3
 80176d4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176da:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80176dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d10b      	bne.n	80176fa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	8b5b      	ldrh	r3, [r3, #26]
 80176e6:	f003 0302 	and.w	r3, r3, #2
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	f000 81ac 	beq.w	8017a48 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80176f0:	6878      	ldr	r0, [r7, #4]
 80176f2:	f000 fdd7 	bl	80182a4 <tcp_send_empty_ack>
 80176f6:	4603      	mov	r3, r0
 80176f8:	e1b3      	b.n	8017a62 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80176fa:	6879      	ldr	r1, [r7, #4]
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	3304      	adds	r3, #4
 8017700:	461a      	mov	r2, r3
 8017702:	6878      	ldr	r0, [r7, #4]
 8017704:	f7fe ffc4 	bl	8016690 <tcp_route>
 8017708:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d102      	bne.n	8017716 <tcp_output+0x96>
    return ERR_RTE;
 8017710:	f06f 0303 	mvn.w	r3, #3
 8017714:	e1a5      	b.n	8017a62 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d003      	beq.n	8017724 <tcp_output+0xa4>
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d111      	bne.n	8017748 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d002      	beq.n	8017730 <tcp_output+0xb0>
 801772a:	697b      	ldr	r3, [r7, #20]
 801772c:	3304      	adds	r3, #4
 801772e:	e000      	b.n	8017732 <tcp_output+0xb2>
 8017730:	2300      	movs	r3, #0
 8017732:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017734:	693b      	ldr	r3, [r7, #16]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d102      	bne.n	8017740 <tcp_output+0xc0>
      return ERR_RTE;
 801773a:	f06f 0303 	mvn.w	r3, #3
 801773e:	e190      	b.n	8017a62 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017740:	693b      	ldr	r3, [r7, #16]
 8017742:	681a      	ldr	r2, [r3, #0]
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774a:	691b      	ldr	r3, [r3, #16]
 801774c:	685b      	ldr	r3, [r3, #4]
 801774e:	4618      	mov	r0, r3
 8017750:	f7f7 fd41 	bl	800f1d6 <lwip_htonl>
 8017754:	4602      	mov	r2, r0
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801775a:	1ad3      	subs	r3, r2, r3
 801775c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801775e:	8912      	ldrh	r2, [r2, #8]
 8017760:	4413      	add	r3, r2
 8017762:	69ba      	ldr	r2, [r7, #24]
 8017764:	429a      	cmp	r2, r3
 8017766:	d227      	bcs.n	80177b8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801776e:	461a      	mov	r2, r3
 8017770:	69bb      	ldr	r3, [r7, #24]
 8017772:	4293      	cmp	r3, r2
 8017774:	d114      	bne.n	80177a0 <tcp_output+0x120>
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801777a:	2b00      	cmp	r3, #0
 801777c:	d110      	bne.n	80177a0 <tcp_output+0x120>
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017784:	2b00      	cmp	r3, #0
 8017786:	d10b      	bne.n	80177a0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	2200      	movs	r2, #0
 801778c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2201      	movs	r2, #1
 8017794:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2200      	movs	r2, #0
 801779c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	8b5b      	ldrh	r3, [r3, #26]
 80177a4:	f003 0302 	and.w	r3, r3, #2
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	f000 814f 	beq.w	8017a4c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80177ae:	6878      	ldr	r0, [r7, #4]
 80177b0:	f000 fd78 	bl	80182a4 <tcp_send_empty_ack>
 80177b4:	4603      	mov	r3, r0
 80177b6:	e154      	b.n	8017a62 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	2200      	movs	r2, #0
 80177bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177c4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80177c6:	6a3b      	ldr	r3, [r7, #32]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	f000 811e 	beq.w	8017a0a <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 80177ce:	e002      	b.n	80177d6 <tcp_output+0x156>
 80177d0:	6a3b      	ldr	r3, [r7, #32]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	623b      	str	r3, [r7, #32]
 80177d6:	6a3b      	ldr	r3, [r7, #32]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d1f8      	bne.n	80177d0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80177de:	e114      	b.n	8017a0a <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80177e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e2:	691b      	ldr	r3, [r3, #16]
 80177e4:	899b      	ldrh	r3, [r3, #12]
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7f7 fcdf 	bl	800f1ac <lwip_htons>
 80177ee:	4603      	mov	r3, r0
 80177f0:	b2db      	uxtb	r3, r3
 80177f2:	f003 0304 	and.w	r3, r3, #4
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d006      	beq.n	8017808 <tcp_output+0x188>
 80177fa:	4b44      	ldr	r3, [pc, #272]	; (801790c <tcp_output+0x28c>)
 80177fc:	f240 5236 	movw	r2, #1334	; 0x536
 8017800:	4947      	ldr	r1, [pc, #284]	; (8017920 <tcp_output+0x2a0>)
 8017802:	4844      	ldr	r0, [pc, #272]	; (8017914 <tcp_output+0x294>)
 8017804:	f007 f93a 	bl	801ea7c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801780c:	2b00      	cmp	r3, #0
 801780e:	d01f      	beq.n	8017850 <tcp_output+0x1d0>
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	8b5b      	ldrh	r3, [r3, #26]
 8017814:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017818:	2b00      	cmp	r3, #0
 801781a:	d119      	bne.n	8017850 <tcp_output+0x1d0>
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017820:	2b00      	cmp	r3, #0
 8017822:	d00b      	beq.n	801783c <tcp_output+0x1bc>
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d110      	bne.n	8017850 <tcp_output+0x1d0>
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017832:	891a      	ldrh	r2, [r3, #8]
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017838:	429a      	cmp	r2, r3
 801783a:	d209      	bcs.n	8017850 <tcp_output+0x1d0>
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017842:	2b00      	cmp	r3, #0
 8017844:	d004      	beq.n	8017850 <tcp_output+0x1d0>
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801784c:	2b08      	cmp	r3, #8
 801784e:	d901      	bls.n	8017854 <tcp_output+0x1d4>
 8017850:	2301      	movs	r3, #1
 8017852:	e000      	b.n	8017856 <tcp_output+0x1d6>
 8017854:	2300      	movs	r3, #0
 8017856:	2b00      	cmp	r3, #0
 8017858:	d106      	bne.n	8017868 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	8b5b      	ldrh	r3, [r3, #26]
 801785e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017862:	2b00      	cmp	r3, #0
 8017864:	f000 80e6 	beq.w	8017a34 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	7d1b      	ldrb	r3, [r3, #20]
 801786c:	2b02      	cmp	r3, #2
 801786e:	d00d      	beq.n	801788c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017872:	691b      	ldr	r3, [r3, #16]
 8017874:	899b      	ldrh	r3, [r3, #12]
 8017876:	b29c      	uxth	r4, r3
 8017878:	2010      	movs	r0, #16
 801787a:	f7f7 fc97 	bl	800f1ac <lwip_htons>
 801787e:	4603      	mov	r3, r0
 8017880:	461a      	mov	r2, r3
 8017882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017884:	691b      	ldr	r3, [r3, #16]
 8017886:	4322      	orrs	r2, r4
 8017888:	b292      	uxth	r2, r2
 801788a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801788c:	697a      	ldr	r2, [r7, #20]
 801788e:	6879      	ldr	r1, [r7, #4]
 8017890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017892:	f000 f90b 	bl	8017aac <tcp_output_segment>
 8017896:	4603      	mov	r3, r0
 8017898:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801789a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d009      	beq.n	80178b6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	8b5b      	ldrh	r3, [r3, #26]
 80178a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178aa:	b29a      	uxth	r2, r3
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	835a      	strh	r2, [r3, #26]
      return err;
 80178b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178b4:	e0d5      	b.n	8017a62 <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80178b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178b8:	2200      	movs	r2, #0
 80178ba:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80178bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178be:	681a      	ldr	r2, [r3, #0]
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	7d1b      	ldrb	r3, [r3, #20]
 80178c8:	2b02      	cmp	r3, #2
 80178ca:	d006      	beq.n	80178da <tcp_output+0x25a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	8b5b      	ldrh	r3, [r3, #26]
 80178d0:	f023 0303 	bic.w	r3, r3, #3
 80178d4:	b29a      	uxth	r2, r3
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80178da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178dc:	691b      	ldr	r3, [r3, #16]
 80178de:	685b      	ldr	r3, [r3, #4]
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7f7 fc78 	bl	800f1d6 <lwip_htonl>
 80178e6:	4604      	mov	r4, r0
 80178e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ea:	891b      	ldrh	r3, [r3, #8]
 80178ec:	461d      	mov	r5, r3
 80178ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f0:	691b      	ldr	r3, [r3, #16]
 80178f2:	899b      	ldrh	r3, [r3, #12]
 80178f4:	b29b      	uxth	r3, r3
 80178f6:	4618      	mov	r0, r3
 80178f8:	f7f7 fc58 	bl	800f1ac <lwip_htons>
 80178fc:	4603      	mov	r3, r0
 80178fe:	b2db      	uxtb	r3, r3
 8017900:	f003 0303 	and.w	r3, r3, #3
 8017904:	2b00      	cmp	r3, #0
 8017906:	d00d      	beq.n	8017924 <tcp_output+0x2a4>
 8017908:	2301      	movs	r3, #1
 801790a:	e00c      	b.n	8017926 <tcp_output+0x2a6>
 801790c:	08024ca4 	.word	0x08024ca4
 8017910:	08025244 	.word	0x08025244
 8017914:	08024cf8 	.word	0x08024cf8
 8017918:	0802525c 	.word	0x0802525c
 801791c:	2001b0dc 	.word	0x2001b0dc
 8017920:	08025284 	.word	0x08025284
 8017924:	2300      	movs	r3, #0
 8017926:	442b      	add	r3, r5
 8017928:	4423      	add	r3, r4
 801792a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017930:	68bb      	ldr	r3, [r7, #8]
 8017932:	1ad3      	subs	r3, r2, r3
 8017934:	2b00      	cmp	r3, #0
 8017936:	da02      	bge.n	801793e <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	68ba      	ldr	r2, [r7, #8]
 801793c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017940:	891b      	ldrh	r3, [r3, #8]
 8017942:	461c      	mov	r4, r3
 8017944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017946:	691b      	ldr	r3, [r3, #16]
 8017948:	899b      	ldrh	r3, [r3, #12]
 801794a:	b29b      	uxth	r3, r3
 801794c:	4618      	mov	r0, r3
 801794e:	f7f7 fc2d 	bl	800f1ac <lwip_htons>
 8017952:	4603      	mov	r3, r0
 8017954:	b2db      	uxtb	r3, r3
 8017956:	f003 0303 	and.w	r3, r3, #3
 801795a:	2b00      	cmp	r3, #0
 801795c:	d001      	beq.n	8017962 <tcp_output+0x2e2>
 801795e:	2301      	movs	r3, #1
 8017960:	e000      	b.n	8017964 <tcp_output+0x2e4>
 8017962:	2300      	movs	r3, #0
 8017964:	4423      	add	r3, r4
 8017966:	2b00      	cmp	r3, #0
 8017968:	d049      	beq.n	80179fe <tcp_output+0x37e>
      seg->next = NULL;
 801796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796c:	2200      	movs	r2, #0
 801796e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017974:	2b00      	cmp	r3, #0
 8017976:	d105      	bne.n	8017984 <tcp_output+0x304>
        pcb->unacked = seg;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801797c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017980:	623b      	str	r3, [r7, #32]
 8017982:	e03f      	b.n	8017a04 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017986:	691b      	ldr	r3, [r3, #16]
 8017988:	685b      	ldr	r3, [r3, #4]
 801798a:	4618      	mov	r0, r3
 801798c:	f7f7 fc23 	bl	800f1d6 <lwip_htonl>
 8017990:	4604      	mov	r4, r0
 8017992:	6a3b      	ldr	r3, [r7, #32]
 8017994:	691b      	ldr	r3, [r3, #16]
 8017996:	685b      	ldr	r3, [r3, #4]
 8017998:	4618      	mov	r0, r3
 801799a:	f7f7 fc1c 	bl	800f1d6 <lwip_htonl>
 801799e:	4603      	mov	r3, r0
 80179a0:	1ae3      	subs	r3, r4, r3
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	da24      	bge.n	80179f0 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	3370      	adds	r3, #112	; 0x70
 80179aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80179ac:	e002      	b.n	80179b4 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80179ae:	69fb      	ldr	r3, [r7, #28]
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80179b4:	69fb      	ldr	r3, [r7, #28]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d011      	beq.n	80179e0 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	691b      	ldr	r3, [r3, #16]
 80179c2:	685b      	ldr	r3, [r3, #4]
 80179c4:	4618      	mov	r0, r3
 80179c6:	f7f7 fc06 	bl	800f1d6 <lwip_htonl>
 80179ca:	4604      	mov	r4, r0
 80179cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ce:	691b      	ldr	r3, [r3, #16]
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	4618      	mov	r0, r3
 80179d4:	f7f7 fbff 	bl	800f1d6 <lwip_htonl>
 80179d8:	4603      	mov	r3, r0
 80179da:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80179dc:	2b00      	cmp	r3, #0
 80179de:	dbe6      	blt.n	80179ae <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 80179e0:	69fb      	ldr	r3, [r7, #28]
 80179e2:	681a      	ldr	r2, [r3, #0]
 80179e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80179e8:	69fb      	ldr	r3, [r7, #28]
 80179ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179ec:	601a      	str	r2, [r3, #0]
 80179ee:	e009      	b.n	8017a04 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80179f0:	6a3b      	ldr	r3, [r7, #32]
 80179f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179f4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80179f6:	6a3b      	ldr	r3, [r7, #32]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	623b      	str	r3, [r7, #32]
 80179fc:	e002      	b.n	8017a04 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80179fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a00:	f7fb febb 	bl	801377a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a08:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8017a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d012      	beq.n	8017a36 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a12:	691b      	ldr	r3, [r3, #16]
 8017a14:	685b      	ldr	r3, [r3, #4]
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7f7 fbdd 	bl	800f1d6 <lwip_htonl>
 8017a1c:	4602      	mov	r2, r0
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a22:	1ad3      	subs	r3, r2, r3
 8017a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a26:	8912      	ldrh	r2, [r2, #8]
 8017a28:	4413      	add	r3, r2
  while (seg != NULL &&
 8017a2a:	69ba      	ldr	r2, [r7, #24]
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	f4bf aed7 	bcs.w	80177e0 <tcp_output+0x160>
 8017a32:	e000      	b.n	8017a36 <tcp_output+0x3b6>
      break;
 8017a34:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d108      	bne.n	8017a50 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	2200      	movs	r2, #0
 8017a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8017a46:	e004      	b.n	8017a52 <tcp_output+0x3d2>
    goto output_done;
 8017a48:	bf00      	nop
 8017a4a:	e002      	b.n	8017a52 <tcp_output+0x3d2>
    goto output_done;
 8017a4c:	bf00      	nop
 8017a4e:	e000      	b.n	8017a52 <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017a50:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	8b5b      	ldrh	r3, [r3, #26]
 8017a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017a5a:	b29a      	uxth	r2, r3
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017a60:	2300      	movs	r3, #0
}
 8017a62:	4618      	mov	r0, r3
 8017a64:	3728      	adds	r7, #40	; 0x28
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bdb0      	pop	{r4, r5, r7, pc}
 8017a6a:	bf00      	nop

08017a6c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b082      	sub	sp, #8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d106      	bne.n	8017a88 <tcp_output_segment_busy+0x1c>
 8017a7a:	4b09      	ldr	r3, [pc, #36]	; (8017aa0 <tcp_output_segment_busy+0x34>)
 8017a7c:	f240 529a 	movw	r2, #1434	; 0x59a
 8017a80:	4908      	ldr	r1, [pc, #32]	; (8017aa4 <tcp_output_segment_busy+0x38>)
 8017a82:	4809      	ldr	r0, [pc, #36]	; (8017aa8 <tcp_output_segment_busy+0x3c>)
 8017a84:	f006 fffa 	bl	801ea7c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	685b      	ldr	r3, [r3, #4]
 8017a8c:	7b9b      	ldrb	r3, [r3, #14]
 8017a8e:	2b01      	cmp	r3, #1
 8017a90:	d001      	beq.n	8017a96 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017a92:	2301      	movs	r3, #1
 8017a94:	e000      	b.n	8017a98 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017a96:	2300      	movs	r3, #0
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	3708      	adds	r7, #8
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	08024ca4 	.word	0x08024ca4
 8017aa4:	0802529c 	.word	0x0802529c
 8017aa8:	08024cf8 	.word	0x08024cf8

08017aac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017aac:	b5b0      	push	{r4, r5, r7, lr}
 8017aae:	b08c      	sub	sp, #48	; 0x30
 8017ab0:	af04      	add	r7, sp, #16
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d106      	bne.n	8017acc <tcp_output_segment+0x20>
 8017abe:	4b63      	ldr	r3, [pc, #396]	; (8017c4c <tcp_output_segment+0x1a0>)
 8017ac0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017ac4:	4962      	ldr	r1, [pc, #392]	; (8017c50 <tcp_output_segment+0x1a4>)
 8017ac6:	4863      	ldr	r0, [pc, #396]	; (8017c54 <tcp_output_segment+0x1a8>)
 8017ac8:	f006 ffd8 	bl	801ea7c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017acc:	68bb      	ldr	r3, [r7, #8]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d106      	bne.n	8017ae0 <tcp_output_segment+0x34>
 8017ad2:	4b5e      	ldr	r3, [pc, #376]	; (8017c4c <tcp_output_segment+0x1a0>)
 8017ad4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017ad8:	495f      	ldr	r1, [pc, #380]	; (8017c58 <tcp_output_segment+0x1ac>)
 8017ada:	485e      	ldr	r0, [pc, #376]	; (8017c54 <tcp_output_segment+0x1a8>)
 8017adc:	f006 ffce 	bl	801ea7c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d106      	bne.n	8017af4 <tcp_output_segment+0x48>
 8017ae6:	4b59      	ldr	r3, [pc, #356]	; (8017c4c <tcp_output_segment+0x1a0>)
 8017ae8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8017aec:	495b      	ldr	r1, [pc, #364]	; (8017c5c <tcp_output_segment+0x1b0>)
 8017aee:	4859      	ldr	r0, [pc, #356]	; (8017c54 <tcp_output_segment+0x1a8>)
 8017af0:	f006 ffc4 	bl	801ea7c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017af4:	68f8      	ldr	r0, [r7, #12]
 8017af6:	f7ff ffb9 	bl	8017a6c <tcp_output_segment_busy>
 8017afa:	4603      	mov	r3, r0
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d001      	beq.n	8017b04 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017b00:	2300      	movs	r3, #0
 8017b02:	e09f      	b.n	8017c44 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	691c      	ldr	r4, [r3, #16]
 8017b0c:	4610      	mov	r0, r2
 8017b0e:	f7f7 fb62 	bl	800f1d6 <lwip_htonl>
 8017b12:	4603      	mov	r3, r0
 8017b14:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017b16:	68bb      	ldr	r3, [r7, #8]
 8017b18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	691c      	ldr	r4, [r3, #16]
 8017b1e:	4610      	mov	r0, r2
 8017b20:	f7f7 fb44 	bl	800f1ac <lwip_htons>
 8017b24:	4603      	mov	r3, r0
 8017b26:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b2c:	68ba      	ldr	r2, [r7, #8]
 8017b2e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017b30:	441a      	add	r2, r3
 8017b32:	68bb      	ldr	r3, [r7, #8]
 8017b34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	691b      	ldr	r3, [r3, #16]
 8017b3a:	3314      	adds	r3, #20
 8017b3c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	7b1b      	ldrb	r3, [r3, #12]
 8017b42:	f003 0301 	and.w	r3, r3, #1
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d015      	beq.n	8017b76 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017b4a:	68bb      	ldr	r3, [r7, #8]
 8017b4c:	3304      	adds	r3, #4
 8017b4e:	461a      	mov	r2, r3
 8017b50:	6879      	ldr	r1, [r7, #4]
 8017b52:	f44f 7006 	mov.w	r0, #536	; 0x218
 8017b56:	f7fc f9d5 	bl	8013f04 <tcp_eff_send_mss_netif>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017b5e:	8b7b      	ldrh	r3, [r7, #26]
 8017b60:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7f7 fb36 	bl	800f1d6 <lwip_htonl>
 8017b6a:	4602      	mov	r2, r0
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017b70:	69fb      	ldr	r3, [r7, #28]
 8017b72:	3304      	adds	r3, #4
 8017b74:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017b76:	68bb      	ldr	r3, [r7, #8]
 8017b78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	da02      	bge.n	8017b86 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	2200      	movs	r2, #0
 8017b84:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d10c      	bne.n	8017ba8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017b8e:	4b34      	ldr	r3, [pc, #208]	; (8017c60 <tcp_output_segment+0x1b4>)
 8017b90:	681a      	ldr	r2, [r3, #0]
 8017b92:	68bb      	ldr	r3, [r7, #8]
 8017b94:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	691b      	ldr	r3, [r3, #16]
 8017b9a:	685b      	ldr	r3, [r3, #4]
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7f7 fb1a 	bl	800f1d6 <lwip_htonl>
 8017ba2:	4602      	mov	r2, r0
 8017ba4:	68bb      	ldr	r3, [r7, #8]
 8017ba6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	691a      	ldr	r2, [r3, #16]
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	685b      	ldr	r3, [r3, #4]
 8017bb0:	685b      	ldr	r3, [r3, #4]
 8017bb2:	1ad3      	subs	r3, r2, r3
 8017bb4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	8959      	ldrh	r1, [r3, #10]
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	8b3a      	ldrh	r2, [r7, #24]
 8017bc2:	1a8a      	subs	r2, r1, r2
 8017bc4:	b292      	uxth	r2, r2
 8017bc6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	685b      	ldr	r3, [r3, #4]
 8017bcc:	8919      	ldrh	r1, [r3, #8]
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	685b      	ldr	r3, [r3, #4]
 8017bd2:	8b3a      	ldrh	r2, [r7, #24]
 8017bd4:	1a8a      	subs	r2, r1, r2
 8017bd6:	b292      	uxth	r2, r2
 8017bd8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	685b      	ldr	r3, [r3, #4]
 8017bde:	68fa      	ldr	r2, [r7, #12]
 8017be0:	6912      	ldr	r2, [r2, #16]
 8017be2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	691b      	ldr	r3, [r3, #16]
 8017be8:	2200      	movs	r2, #0
 8017bea:	741a      	strb	r2, [r3, #16]
 8017bec:	2200      	movs	r2, #0
 8017bee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	691b      	ldr	r3, [r3, #16]
 8017bf4:	f103 0214 	add.w	r2, r3, #20
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	7b1b      	ldrb	r3, [r3, #12]
 8017bfc:	009b      	lsls	r3, r3, #2
 8017bfe:	f003 0304 	and.w	r3, r3, #4
 8017c02:	4413      	add	r3, r2
 8017c04:	69fa      	ldr	r2, [r7, #28]
 8017c06:	429a      	cmp	r2, r3
 8017c08:	d006      	beq.n	8017c18 <tcp_output_segment+0x16c>
 8017c0a:	4b10      	ldr	r3, [pc, #64]	; (8017c4c <tcp_output_segment+0x1a0>)
 8017c0c:	f240 621c 	movw	r2, #1564	; 0x61c
 8017c10:	4914      	ldr	r1, [pc, #80]	; (8017c64 <tcp_output_segment+0x1b8>)
 8017c12:	4810      	ldr	r0, [pc, #64]	; (8017c54 <tcp_output_segment+0x1a8>)
 8017c14:	f006 ff32 	bl	801ea7c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	6858      	ldr	r0, [r3, #4]
 8017c1c:	68b9      	ldr	r1, [r7, #8]
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	1d1c      	adds	r4, r3, #4
 8017c22:	68bb      	ldr	r3, [r7, #8]
 8017c24:	7add      	ldrb	r5, [r3, #11]
 8017c26:	68bb      	ldr	r3, [r7, #8]
 8017c28:	7a9b      	ldrb	r3, [r3, #10]
 8017c2a:	687a      	ldr	r2, [r7, #4]
 8017c2c:	9202      	str	r2, [sp, #8]
 8017c2e:	2206      	movs	r2, #6
 8017c30:	9201      	str	r2, [sp, #4]
 8017c32:	9300      	str	r3, [sp, #0]
 8017c34:	462b      	mov	r3, r5
 8017c36:	4622      	mov	r2, r4
 8017c38:	f004 fd7c 	bl	801c734 <ip4_output_if>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3720      	adds	r7, #32
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8017c4c:	08024ca4 	.word	0x08024ca4
 8017c50:	080252c4 	.word	0x080252c4
 8017c54:	08024cf8 	.word	0x08024cf8
 8017c58:	080252e4 	.word	0x080252e4
 8017c5c:	08025304 	.word	0x08025304
 8017c60:	2001b0cc 	.word	0x2001b0cc
 8017c64:	08025328 	.word	0x08025328

08017c68 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017c68:	b5b0      	push	{r4, r5, r7, lr}
 8017c6a:	b084      	sub	sp, #16
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d106      	bne.n	8017c84 <tcp_rexmit_rto_prepare+0x1c>
 8017c76:	4b36      	ldr	r3, [pc, #216]	; (8017d50 <tcp_rexmit_rto_prepare+0xe8>)
 8017c78:	f240 6263 	movw	r2, #1635	; 0x663
 8017c7c:	4935      	ldr	r1, [pc, #212]	; (8017d54 <tcp_rexmit_rto_prepare+0xec>)
 8017c7e:	4836      	ldr	r0, [pc, #216]	; (8017d58 <tcp_rexmit_rto_prepare+0xf0>)
 8017c80:	f006 fefc 	bl	801ea7c <iprintf>

  if (pcb->unacked == NULL) {
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d102      	bne.n	8017c92 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017c8c:	f06f 0305 	mvn.w	r3, #5
 8017c90:	e059      	b.n	8017d46 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c96:	60fb      	str	r3, [r7, #12]
 8017c98:	e00b      	b.n	8017cb2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017c9a:	68f8      	ldr	r0, [r7, #12]
 8017c9c:	f7ff fee6 	bl	8017a6c <tcp_output_segment_busy>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d002      	beq.n	8017cac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017ca6:	f06f 0305 	mvn.w	r3, #5
 8017caa:	e04c      	b.n	8017d46 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	60fb      	str	r3, [r7, #12]
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d1ef      	bne.n	8017c9a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017cba:	68f8      	ldr	r0, [r7, #12]
 8017cbc:	f7ff fed6 	bl	8017a6c <tcp_output_segment_busy>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d002      	beq.n	8017ccc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017cc6:	f06f 0305 	mvn.w	r3, #5
 8017cca:	e03c      	b.n	8017d46 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d104      	bne.n	8017ce6 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	895a      	ldrh	r2, [r3, #10]
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	8b5b      	ldrh	r3, [r3, #26]
 8017cf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017cfc:	b29a      	uxth	r2, r3
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	691b      	ldr	r3, [r3, #16]
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7f7 fa64 	bl	800f1d6 <lwip_htonl>
 8017d0e:	4604      	mov	r4, r0
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	891b      	ldrh	r3, [r3, #8]
 8017d14:	461d      	mov	r5, r3
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	691b      	ldr	r3, [r3, #16]
 8017d1a:	899b      	ldrh	r3, [r3, #12]
 8017d1c:	b29b      	uxth	r3, r3
 8017d1e:	4618      	mov	r0, r3
 8017d20:	f7f7 fa44 	bl	800f1ac <lwip_htons>
 8017d24:	4603      	mov	r3, r0
 8017d26:	b2db      	uxtb	r3, r3
 8017d28:	f003 0303 	and.w	r3, r3, #3
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d001      	beq.n	8017d34 <tcp_rexmit_rto_prepare+0xcc>
 8017d30:	2301      	movs	r3, #1
 8017d32:	e000      	b.n	8017d36 <tcp_rexmit_rto_prepare+0xce>
 8017d34:	2300      	movs	r3, #0
 8017d36:	442b      	add	r3, r5
 8017d38:	18e2      	adds	r2, r4, r3
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	2200      	movs	r2, #0
 8017d42:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017d44:	2300      	movs	r3, #0
}
 8017d46:	4618      	mov	r0, r3
 8017d48:	3710      	adds	r7, #16
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8017d4e:	bf00      	nop
 8017d50:	08024ca4 	.word	0x08024ca4
 8017d54:	0802533c 	.word	0x0802533c
 8017d58:	08024cf8 	.word	0x08024cf8

08017d5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b082      	sub	sp, #8
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d106      	bne.n	8017d78 <tcp_rexmit_rto_commit+0x1c>
 8017d6a:	4b0d      	ldr	r3, [pc, #52]	; (8017da0 <tcp_rexmit_rto_commit+0x44>)
 8017d6c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017d70:	490c      	ldr	r1, [pc, #48]	; (8017da4 <tcp_rexmit_rto_commit+0x48>)
 8017d72:	480d      	ldr	r0, [pc, #52]	; (8017da8 <tcp_rexmit_rto_commit+0x4c>)
 8017d74:	f006 fe82 	bl	801ea7c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d7e:	2bff      	cmp	r3, #255	; 0xff
 8017d80:	d007      	beq.n	8017d92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d88:	3301      	adds	r3, #1
 8017d8a:	b2da      	uxtb	r2, r3
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017d92:	6878      	ldr	r0, [r7, #4]
 8017d94:	f7ff fc74 	bl	8017680 <tcp_output>
}
 8017d98:	bf00      	nop
 8017d9a:	3708      	adds	r7, #8
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd80      	pop	{r7, pc}
 8017da0:	08024ca4 	.word	0x08024ca4
 8017da4:	08025360 	.word	0x08025360
 8017da8:	08024cf8 	.word	0x08024cf8

08017dac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b082      	sub	sp, #8
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d106      	bne.n	8017dc8 <tcp_rexmit_rto+0x1c>
 8017dba:	4b0a      	ldr	r3, [pc, #40]	; (8017de4 <tcp_rexmit_rto+0x38>)
 8017dbc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017dc0:	4909      	ldr	r1, [pc, #36]	; (8017de8 <tcp_rexmit_rto+0x3c>)
 8017dc2:	480a      	ldr	r0, [pc, #40]	; (8017dec <tcp_rexmit_rto+0x40>)
 8017dc4:	f006 fe5a 	bl	801ea7c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017dc8:	6878      	ldr	r0, [r7, #4]
 8017dca:	f7ff ff4d 	bl	8017c68 <tcp_rexmit_rto_prepare>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d102      	bne.n	8017dda <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017dd4:	6878      	ldr	r0, [r7, #4]
 8017dd6:	f7ff ffc1 	bl	8017d5c <tcp_rexmit_rto_commit>
  }
}
 8017dda:	bf00      	nop
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
 8017de2:	bf00      	nop
 8017de4:	08024ca4 	.word	0x08024ca4
 8017de8:	08025384 	.word	0x08025384
 8017dec:	08024cf8 	.word	0x08024cf8

08017df0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017df0:	b590      	push	{r4, r7, lr}
 8017df2:	b085      	sub	sp, #20
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d106      	bne.n	8017e0c <tcp_rexmit+0x1c>
 8017dfe:	4b2f      	ldr	r3, [pc, #188]	; (8017ebc <tcp_rexmit+0xcc>)
 8017e00:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017e04:	492e      	ldr	r1, [pc, #184]	; (8017ec0 <tcp_rexmit+0xd0>)
 8017e06:	482f      	ldr	r0, [pc, #188]	; (8017ec4 <tcp_rexmit+0xd4>)
 8017e08:	f006 fe38 	bl	801ea7c <iprintf>

  if (pcb->unacked == NULL) {
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d102      	bne.n	8017e1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017e14:	f06f 0305 	mvn.w	r3, #5
 8017e18:	e04c      	b.n	8017eb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017e20:	68b8      	ldr	r0, [r7, #8]
 8017e22:	f7ff fe23 	bl	8017a6c <tcp_output_segment_busy>
 8017e26:	4603      	mov	r3, r0
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d002      	beq.n	8017e32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017e2c:	f06f 0305 	mvn.w	r3, #5
 8017e30:	e040      	b.n	8017eb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	336c      	adds	r3, #108	; 0x6c
 8017e3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017e40:	e002      	b.n	8017e48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d011      	beq.n	8017e74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	691b      	ldr	r3, [r3, #16]
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7f7 f9bc 	bl	800f1d6 <lwip_htonl>
 8017e5e:	4604      	mov	r4, r0
 8017e60:	68bb      	ldr	r3, [r7, #8]
 8017e62:	691b      	ldr	r3, [r3, #16]
 8017e64:	685b      	ldr	r3, [r3, #4]
 8017e66:	4618      	mov	r0, r3
 8017e68:	f7f7 f9b5 	bl	800f1d6 <lwip_htonl>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	dbe6      	blt.n	8017e42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	681a      	ldr	r2, [r3, #0]
 8017e78:	68bb      	ldr	r3, [r7, #8]
 8017e7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	68ba      	ldr	r2, [r7, #8]
 8017e80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017e82:	68bb      	ldr	r3, [r7, #8]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d103      	bne.n	8017e92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017e98:	2bff      	cmp	r3, #255	; 0xff
 8017e9a:	d007      	beq.n	8017eac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	b2da      	uxtb	r2, r3
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	2200      	movs	r2, #0
 8017eb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017eb2:	2300      	movs	r3, #0
}
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	3714      	adds	r7, #20
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	bd90      	pop	{r4, r7, pc}
 8017ebc:	08024ca4 	.word	0x08024ca4
 8017ec0:	080253a0 	.word	0x080253a0
 8017ec4:	08024cf8 	.word	0x08024cf8

08017ec8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b082      	sub	sp, #8
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d106      	bne.n	8017ee4 <tcp_rexmit_fast+0x1c>
 8017ed6:	4b2a      	ldr	r3, [pc, #168]	; (8017f80 <tcp_rexmit_fast+0xb8>)
 8017ed8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017edc:	4929      	ldr	r1, [pc, #164]	; (8017f84 <tcp_rexmit_fast+0xbc>)
 8017ede:	482a      	ldr	r0, [pc, #168]	; (8017f88 <tcp_rexmit_fast+0xc0>)
 8017ee0:	f006 fdcc 	bl	801ea7c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d044      	beq.n	8017f76 <tcp_rexmit_fast+0xae>
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	8b5b      	ldrh	r3, [r3, #26]
 8017ef0:	f003 0304 	and.w	r3, r3, #4
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d13e      	bne.n	8017f76 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f7ff ff79 	bl	8017df0 <tcp_rexmit>
 8017efe:	4603      	mov	r3, r0
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d138      	bne.n	8017f76 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f10:	4293      	cmp	r3, r2
 8017f12:	bf28      	it	cs
 8017f14:	4613      	movcs	r3, r2
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	0fda      	lsrs	r2, r3, #31
 8017f1a:	4413      	add	r3, r2
 8017f1c:	105b      	asrs	r3, r3, #1
 8017f1e:	b29a      	uxth	r2, r3
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017f2c:	461a      	mov	r2, r3
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f32:	005b      	lsls	r3, r3, #1
 8017f34:	429a      	cmp	r2, r3
 8017f36:	d206      	bcs.n	8017f46 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f3c:	005b      	lsls	r3, r3, #1
 8017f3e:	b29a      	uxth	r2, r3
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f50:	4619      	mov	r1, r3
 8017f52:	0049      	lsls	r1, r1, #1
 8017f54:	440b      	add	r3, r1
 8017f56:	b29b      	uxth	r3, r3
 8017f58:	4413      	add	r3, r2
 8017f5a:	b29a      	uxth	r2, r3
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	8b5b      	ldrh	r3, [r3, #26]
 8017f66:	f043 0304 	orr.w	r3, r3, #4
 8017f6a:	b29a      	uxth	r2, r3
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	2200      	movs	r2, #0
 8017f74:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017f76:	bf00      	nop
 8017f78:	3708      	adds	r7, #8
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd80      	pop	{r7, pc}
 8017f7e:	bf00      	nop
 8017f80:	08024ca4 	.word	0x08024ca4
 8017f84:	080253b8 	.word	0x080253b8
 8017f88:	08024cf8 	.word	0x08024cf8

08017f8c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b086      	sub	sp, #24
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	60f8      	str	r0, [r7, #12]
 8017f94:	607b      	str	r3, [r7, #4]
 8017f96:	460b      	mov	r3, r1
 8017f98:	817b      	strh	r3, [r7, #10]
 8017f9a:	4613      	mov	r3, r2
 8017f9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017f9e:	897a      	ldrh	r2, [r7, #10]
 8017fa0:	893b      	ldrh	r3, [r7, #8]
 8017fa2:	4413      	add	r3, r2
 8017fa4:	b29b      	uxth	r3, r3
 8017fa6:	3314      	adds	r3, #20
 8017fa8:	b29b      	uxth	r3, r3
 8017faa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017fae:	4619      	mov	r1, r3
 8017fb0:	2022      	movs	r0, #34	; 0x22
 8017fb2:	f7f9 f9a5 	bl	8011300 <pbuf_alloc>
 8017fb6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d04d      	beq.n	801805a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017fbe:	897b      	ldrh	r3, [r7, #10]
 8017fc0:	3313      	adds	r3, #19
 8017fc2:	697a      	ldr	r2, [r7, #20]
 8017fc4:	8952      	ldrh	r2, [r2, #10]
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	db06      	blt.n	8017fd8 <tcp_output_alloc_header_common+0x4c>
 8017fca:	4b26      	ldr	r3, [pc, #152]	; (8018064 <tcp_output_alloc_header_common+0xd8>)
 8017fcc:	f240 7223 	movw	r2, #1827	; 0x723
 8017fd0:	4925      	ldr	r1, [pc, #148]	; (8018068 <tcp_output_alloc_header_common+0xdc>)
 8017fd2:	4826      	ldr	r0, [pc, #152]	; (801806c <tcp_output_alloc_header_common+0xe0>)
 8017fd4:	f006 fd52 	bl	801ea7c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017fd8:	697b      	ldr	r3, [r7, #20]
 8017fda:	685b      	ldr	r3, [r3, #4]
 8017fdc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017fde:	8c3b      	ldrh	r3, [r7, #32]
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7f7 f8e3 	bl	800f1ac <lwip_htons>
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	461a      	mov	r2, r3
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7f7 f8db 	bl	800f1ac <lwip_htons>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	461a      	mov	r2, r3
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017ffe:	693b      	ldr	r3, [r7, #16]
 8018000:	687a      	ldr	r2, [r7, #4]
 8018002:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018004:	68f8      	ldr	r0, [r7, #12]
 8018006:	f7f7 f8e6 	bl	800f1d6 <lwip_htonl>
 801800a:	4602      	mov	r2, r0
 801800c:	693b      	ldr	r3, [r7, #16]
 801800e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018010:	897b      	ldrh	r3, [r7, #10]
 8018012:	089b      	lsrs	r3, r3, #2
 8018014:	b29b      	uxth	r3, r3
 8018016:	3305      	adds	r3, #5
 8018018:	b29b      	uxth	r3, r3
 801801a:	031b      	lsls	r3, r3, #12
 801801c:	b29a      	uxth	r2, r3
 801801e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018022:	b29b      	uxth	r3, r3
 8018024:	4313      	orrs	r3, r2
 8018026:	b29b      	uxth	r3, r3
 8018028:	4618      	mov	r0, r3
 801802a:	f7f7 f8bf 	bl	800f1ac <lwip_htons>
 801802e:	4603      	mov	r3, r0
 8018030:	461a      	mov	r2, r3
 8018032:	693b      	ldr	r3, [r7, #16]
 8018034:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018036:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018038:	4618      	mov	r0, r3
 801803a:	f7f7 f8b7 	bl	800f1ac <lwip_htons>
 801803e:	4603      	mov	r3, r0
 8018040:	461a      	mov	r2, r3
 8018042:	693b      	ldr	r3, [r7, #16]
 8018044:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018046:	693b      	ldr	r3, [r7, #16]
 8018048:	2200      	movs	r2, #0
 801804a:	741a      	strb	r2, [r3, #16]
 801804c:	2200      	movs	r2, #0
 801804e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	2200      	movs	r2, #0
 8018054:	749a      	strb	r2, [r3, #18]
 8018056:	2200      	movs	r2, #0
 8018058:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801805a:	697b      	ldr	r3, [r7, #20]
}
 801805c:	4618      	mov	r0, r3
 801805e:	3718      	adds	r7, #24
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}
 8018064:	08024ca4 	.word	0x08024ca4
 8018068:	080253d8 	.word	0x080253d8
 801806c:	08024cf8 	.word	0x08024cf8

08018070 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018070:	b5b0      	push	{r4, r5, r7, lr}
 8018072:	b08a      	sub	sp, #40	; 0x28
 8018074:	af04      	add	r7, sp, #16
 8018076:	60f8      	str	r0, [r7, #12]
 8018078:	607b      	str	r3, [r7, #4]
 801807a:	460b      	mov	r3, r1
 801807c:	817b      	strh	r3, [r7, #10]
 801807e:	4613      	mov	r3, r2
 8018080:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d106      	bne.n	8018096 <tcp_output_alloc_header+0x26>
 8018088:	4b15      	ldr	r3, [pc, #84]	; (80180e0 <tcp_output_alloc_header+0x70>)
 801808a:	f240 7242 	movw	r2, #1858	; 0x742
 801808e:	4915      	ldr	r1, [pc, #84]	; (80180e4 <tcp_output_alloc_header+0x74>)
 8018090:	4815      	ldr	r0, [pc, #84]	; (80180e8 <tcp_output_alloc_header+0x78>)
 8018092:	f006 fcf3 	bl	801ea7c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	8adb      	ldrh	r3, [r3, #22]
 801809e:	68fa      	ldr	r2, [r7, #12]
 80180a0:	8b12      	ldrh	r2, [r2, #24]
 80180a2:	68f9      	ldr	r1, [r7, #12]
 80180a4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80180a6:	893d      	ldrh	r5, [r7, #8]
 80180a8:	897c      	ldrh	r4, [r7, #10]
 80180aa:	9103      	str	r1, [sp, #12]
 80180ac:	2110      	movs	r1, #16
 80180ae:	9102      	str	r1, [sp, #8]
 80180b0:	9201      	str	r2, [sp, #4]
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	462a      	mov	r2, r5
 80180b8:	4621      	mov	r1, r4
 80180ba:	f7ff ff67 	bl	8017f8c <tcp_output_alloc_header_common>
 80180be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80180c0:	697b      	ldr	r3, [r7, #20]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d006      	beq.n	80180d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180ca:	68fa      	ldr	r2, [r7, #12]
 80180cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80180ce:	441a      	add	r2, r3
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80180d4:	697b      	ldr	r3, [r7, #20]
}
 80180d6:	4618      	mov	r0, r3
 80180d8:	3718      	adds	r7, #24
 80180da:	46bd      	mov	sp, r7
 80180dc:	bdb0      	pop	{r4, r5, r7, pc}
 80180de:	bf00      	nop
 80180e0:	08024ca4 	.word	0x08024ca4
 80180e4:	08025408 	.word	0x08025408
 80180e8:	08024cf8 	.word	0x08024cf8

080180ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b088      	sub	sp, #32
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	60f8      	str	r0, [r7, #12]
 80180f4:	60b9      	str	r1, [r7, #8]
 80180f6:	4611      	mov	r1, r2
 80180f8:	461a      	mov	r2, r3
 80180fa:	460b      	mov	r3, r1
 80180fc:	71fb      	strb	r3, [r7, #7]
 80180fe:	4613      	mov	r3, r2
 8018100:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018102:	2300      	movs	r3, #0
 8018104:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018106:	68bb      	ldr	r3, [r7, #8]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d106      	bne.n	801811a <tcp_output_fill_options+0x2e>
 801810c:	4b13      	ldr	r3, [pc, #76]	; (801815c <tcp_output_fill_options+0x70>)
 801810e:	f240 7256 	movw	r2, #1878	; 0x756
 8018112:	4913      	ldr	r1, [pc, #76]	; (8018160 <tcp_output_fill_options+0x74>)
 8018114:	4813      	ldr	r0, [pc, #76]	; (8018164 <tcp_output_fill_options+0x78>)
 8018116:	f006 fcb1 	bl	801ea7c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	685b      	ldr	r3, [r3, #4]
 801811e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018120:	69bb      	ldr	r3, [r7, #24]
 8018122:	3314      	adds	r3, #20
 8018124:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018126:	69bb      	ldr	r3, [r7, #24]
 8018128:	f103 0214 	add.w	r2, r3, #20
 801812c:	8bfb      	ldrh	r3, [r7, #30]
 801812e:	009b      	lsls	r3, r3, #2
 8018130:	4619      	mov	r1, r3
 8018132:	79fb      	ldrb	r3, [r7, #7]
 8018134:	009b      	lsls	r3, r3, #2
 8018136:	f003 0304 	and.w	r3, r3, #4
 801813a:	440b      	add	r3, r1
 801813c:	4413      	add	r3, r2
 801813e:	697a      	ldr	r2, [r7, #20]
 8018140:	429a      	cmp	r2, r3
 8018142:	d006      	beq.n	8018152 <tcp_output_fill_options+0x66>
 8018144:	4b05      	ldr	r3, [pc, #20]	; (801815c <tcp_output_fill_options+0x70>)
 8018146:	f240 7275 	movw	r2, #1909	; 0x775
 801814a:	4907      	ldr	r1, [pc, #28]	; (8018168 <tcp_output_fill_options+0x7c>)
 801814c:	4805      	ldr	r0, [pc, #20]	; (8018164 <tcp_output_fill_options+0x78>)
 801814e:	f006 fc95 	bl	801ea7c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018152:	bf00      	nop
 8018154:	3720      	adds	r7, #32
 8018156:	46bd      	mov	sp, r7
 8018158:	bd80      	pop	{r7, pc}
 801815a:	bf00      	nop
 801815c:	08024ca4 	.word	0x08024ca4
 8018160:	08025430 	.word	0x08025430
 8018164:	08024cf8 	.word	0x08024cf8
 8018168:	08025328 	.word	0x08025328

0801816c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b08a      	sub	sp, #40	; 0x28
 8018170:	af04      	add	r7, sp, #16
 8018172:	60f8      	str	r0, [r7, #12]
 8018174:	60b9      	str	r1, [r7, #8]
 8018176:	607a      	str	r2, [r7, #4]
 8018178:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d106      	bne.n	801818e <tcp_output_control_segment+0x22>
 8018180:	4b1c      	ldr	r3, [pc, #112]	; (80181f4 <tcp_output_control_segment+0x88>)
 8018182:	f240 7287 	movw	r2, #1927	; 0x787
 8018186:	491c      	ldr	r1, [pc, #112]	; (80181f8 <tcp_output_control_segment+0x8c>)
 8018188:	481c      	ldr	r0, [pc, #112]	; (80181fc <tcp_output_control_segment+0x90>)
 801818a:	f006 fc77 	bl	801ea7c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801818e:	683a      	ldr	r2, [r7, #0]
 8018190:	6879      	ldr	r1, [r7, #4]
 8018192:	68f8      	ldr	r0, [r7, #12]
 8018194:	f7fe fa7c 	bl	8016690 <tcp_route>
 8018198:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d102      	bne.n	80181a6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80181a0:	23fc      	movs	r3, #252	; 0xfc
 80181a2:	75fb      	strb	r3, [r7, #23]
 80181a4:	e01c      	b.n	80181e0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d006      	beq.n	80181ba <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	7adb      	ldrb	r3, [r3, #11]
 80181b0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	7a9b      	ldrb	r3, [r3, #10]
 80181b6:	757b      	strb	r3, [r7, #21]
 80181b8:	e003      	b.n	80181c2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80181ba:	23ff      	movs	r3, #255	; 0xff
 80181bc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80181be:	2300      	movs	r3, #0
 80181c0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80181c2:	7dba      	ldrb	r2, [r7, #22]
 80181c4:	693b      	ldr	r3, [r7, #16]
 80181c6:	9302      	str	r3, [sp, #8]
 80181c8:	2306      	movs	r3, #6
 80181ca:	9301      	str	r3, [sp, #4]
 80181cc:	7d7b      	ldrb	r3, [r7, #21]
 80181ce:	9300      	str	r3, [sp, #0]
 80181d0:	4613      	mov	r3, r2
 80181d2:	683a      	ldr	r2, [r7, #0]
 80181d4:	6879      	ldr	r1, [r7, #4]
 80181d6:	68b8      	ldr	r0, [r7, #8]
 80181d8:	f004 faac 	bl	801c734 <ip4_output_if>
 80181dc:	4603      	mov	r3, r0
 80181de:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80181e0:	68b8      	ldr	r0, [r7, #8]
 80181e2:	f7f9 fba3 	bl	801192c <pbuf_free>
  return err;
 80181e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3718      	adds	r7, #24
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}
 80181f2:	bf00      	nop
 80181f4:	08024ca4 	.word	0x08024ca4
 80181f8:	08025458 	.word	0x08025458
 80181fc:	08024cf8 	.word	0x08024cf8

08018200 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018200:	b590      	push	{r4, r7, lr}
 8018202:	b08b      	sub	sp, #44	; 0x2c
 8018204:	af04      	add	r7, sp, #16
 8018206:	60f8      	str	r0, [r7, #12]
 8018208:	60b9      	str	r1, [r7, #8]
 801820a:	607a      	str	r2, [r7, #4]
 801820c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801820e:	683b      	ldr	r3, [r7, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d106      	bne.n	8018222 <tcp_rst+0x22>
 8018214:	4b1f      	ldr	r3, [pc, #124]	; (8018294 <tcp_rst+0x94>)
 8018216:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801821a:	491f      	ldr	r1, [pc, #124]	; (8018298 <tcp_rst+0x98>)
 801821c:	481f      	ldr	r0, [pc, #124]	; (801829c <tcp_rst+0x9c>)
 801821e:	f006 fc2d 	bl	801ea7c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018224:	2b00      	cmp	r3, #0
 8018226:	d106      	bne.n	8018236 <tcp_rst+0x36>
 8018228:	4b1a      	ldr	r3, [pc, #104]	; (8018294 <tcp_rst+0x94>)
 801822a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801822e:	491c      	ldr	r1, [pc, #112]	; (80182a0 <tcp_rst+0xa0>)
 8018230:	481a      	ldr	r0, [pc, #104]	; (801829c <tcp_rst+0x9c>)
 8018232:	f006 fc23 	bl	801ea7c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018236:	2300      	movs	r3, #0
 8018238:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801823a:	f246 0308 	movw	r3, #24584	; 0x6008
 801823e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018240:	7dfb      	ldrb	r3, [r7, #23]
 8018242:	b29c      	uxth	r4, r3
 8018244:	68b8      	ldr	r0, [r7, #8]
 8018246:	f7f6 ffc6 	bl	800f1d6 <lwip_htonl>
 801824a:	4602      	mov	r2, r0
 801824c:	8abb      	ldrh	r3, [r7, #20]
 801824e:	9303      	str	r3, [sp, #12]
 8018250:	2314      	movs	r3, #20
 8018252:	9302      	str	r3, [sp, #8]
 8018254:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018256:	9301      	str	r3, [sp, #4]
 8018258:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801825a:	9300      	str	r3, [sp, #0]
 801825c:	4613      	mov	r3, r2
 801825e:	2200      	movs	r2, #0
 8018260:	4621      	mov	r1, r4
 8018262:	6878      	ldr	r0, [r7, #4]
 8018264:	f7ff fe92 	bl	8017f8c <tcp_output_alloc_header_common>
 8018268:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801826a:	693b      	ldr	r3, [r7, #16]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d00c      	beq.n	801828a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018270:	7dfb      	ldrb	r3, [r7, #23]
 8018272:	2200      	movs	r2, #0
 8018274:	6939      	ldr	r1, [r7, #16]
 8018276:	68f8      	ldr	r0, [r7, #12]
 8018278:	f7ff ff38 	bl	80180ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801827e:	683a      	ldr	r2, [r7, #0]
 8018280:	6939      	ldr	r1, [r7, #16]
 8018282:	68f8      	ldr	r0, [r7, #12]
 8018284:	f7ff ff72 	bl	801816c <tcp_output_control_segment>
 8018288:	e000      	b.n	801828c <tcp_rst+0x8c>
    return;
 801828a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801828c:	371c      	adds	r7, #28
 801828e:	46bd      	mov	sp, r7
 8018290:	bd90      	pop	{r4, r7, pc}
 8018292:	bf00      	nop
 8018294:	08024ca4 	.word	0x08024ca4
 8018298:	08025484 	.word	0x08025484
 801829c:	08024cf8 	.word	0x08024cf8
 80182a0:	080254a0 	.word	0x080254a0

080182a4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80182a4:	b590      	push	{r4, r7, lr}
 80182a6:	b087      	sub	sp, #28
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80182ac:	2300      	movs	r3, #0
 80182ae:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80182b0:	2300      	movs	r3, #0
 80182b2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d106      	bne.n	80182c8 <tcp_send_empty_ack+0x24>
 80182ba:	4b28      	ldr	r3, [pc, #160]	; (801835c <tcp_send_empty_ack+0xb8>)
 80182bc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80182c0:	4927      	ldr	r1, [pc, #156]	; (8018360 <tcp_send_empty_ack+0xbc>)
 80182c2:	4828      	ldr	r0, [pc, #160]	; (8018364 <tcp_send_empty_ack+0xc0>)
 80182c4:	f006 fbda 	bl	801ea7c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80182c8:	7dfb      	ldrb	r3, [r7, #23]
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	b2db      	uxtb	r3, r3
 80182ce:	f003 0304 	and.w	r3, r3, #4
 80182d2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80182d4:	7d7b      	ldrb	r3, [r7, #21]
 80182d6:	b29c      	uxth	r4, r3
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182dc:	4618      	mov	r0, r3
 80182de:	f7f6 ff7a 	bl	800f1d6 <lwip_htonl>
 80182e2:	4603      	mov	r3, r0
 80182e4:	2200      	movs	r2, #0
 80182e6:	4621      	mov	r1, r4
 80182e8:	6878      	ldr	r0, [r7, #4]
 80182ea:	f7ff fec1 	bl	8018070 <tcp_output_alloc_header>
 80182ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80182f0:	693b      	ldr	r3, [r7, #16]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d109      	bne.n	801830a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	8b5b      	ldrh	r3, [r3, #26]
 80182fa:	f043 0303 	orr.w	r3, r3, #3
 80182fe:	b29a      	uxth	r2, r3
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018304:	f06f 0301 	mvn.w	r3, #1
 8018308:	e023      	b.n	8018352 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801830a:	7dbb      	ldrb	r3, [r7, #22]
 801830c:	7dfa      	ldrb	r2, [r7, #23]
 801830e:	6939      	ldr	r1, [r7, #16]
 8018310:	6878      	ldr	r0, [r7, #4]
 8018312:	f7ff feeb 	bl	80180ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018316:	687a      	ldr	r2, [r7, #4]
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	3304      	adds	r3, #4
 801831c:	6939      	ldr	r1, [r7, #16]
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	f7ff ff24 	bl	801816c <tcp_output_control_segment>
 8018324:	4603      	mov	r3, r0
 8018326:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d007      	beq.n	8018340 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	8b5b      	ldrh	r3, [r3, #26]
 8018334:	f043 0303 	orr.w	r3, r3, #3
 8018338:	b29a      	uxth	r2, r3
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	835a      	strh	r2, [r3, #26]
 801833e:	e006      	b.n	801834e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	8b5b      	ldrh	r3, [r3, #26]
 8018344:	f023 0303 	bic.w	r3, r3, #3
 8018348:	b29a      	uxth	r2, r3
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801834e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018352:	4618      	mov	r0, r3
 8018354:	371c      	adds	r7, #28
 8018356:	46bd      	mov	sp, r7
 8018358:	bd90      	pop	{r4, r7, pc}
 801835a:	bf00      	nop
 801835c:	08024ca4 	.word	0x08024ca4
 8018360:	080254bc 	.word	0x080254bc
 8018364:	08024cf8 	.word	0x08024cf8

08018368 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018368:	b590      	push	{r4, r7, lr}
 801836a:	b085      	sub	sp, #20
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018370:	2300      	movs	r3, #0
 8018372:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d106      	bne.n	8018388 <tcp_keepalive+0x20>
 801837a:	4b18      	ldr	r3, [pc, #96]	; (80183dc <tcp_keepalive+0x74>)
 801837c:	f640 0224 	movw	r2, #2084	; 0x824
 8018380:	4917      	ldr	r1, [pc, #92]	; (80183e0 <tcp_keepalive+0x78>)
 8018382:	4818      	ldr	r0, [pc, #96]	; (80183e4 <tcp_keepalive+0x7c>)
 8018384:	f006 fb7a 	bl	801ea7c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018388:	7abb      	ldrb	r3, [r7, #10]
 801838a:	b29c      	uxth	r4, r3
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018390:	3b01      	subs	r3, #1
 8018392:	4618      	mov	r0, r3
 8018394:	f7f6 ff1f 	bl	800f1d6 <lwip_htonl>
 8018398:	4603      	mov	r3, r0
 801839a:	2200      	movs	r2, #0
 801839c:	4621      	mov	r1, r4
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f7ff fe66 	bl	8018070 <tcp_output_alloc_header>
 80183a4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d102      	bne.n	80183b2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80183ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183b0:	e010      	b.n	80183d4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80183b2:	7abb      	ldrb	r3, [r7, #10]
 80183b4:	2200      	movs	r2, #0
 80183b6:	68f9      	ldr	r1, [r7, #12]
 80183b8:	6878      	ldr	r0, [r7, #4]
 80183ba:	f7ff fe97 	bl	80180ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80183be:	687a      	ldr	r2, [r7, #4]
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	3304      	adds	r3, #4
 80183c4:	68f9      	ldr	r1, [r7, #12]
 80183c6:	6878      	ldr	r0, [r7, #4]
 80183c8:	f7ff fed0 	bl	801816c <tcp_output_control_segment>
 80183cc:	4603      	mov	r3, r0
 80183ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80183d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80183d4:	4618      	mov	r0, r3
 80183d6:	3714      	adds	r7, #20
 80183d8:	46bd      	mov	sp, r7
 80183da:	bd90      	pop	{r4, r7, pc}
 80183dc:	08024ca4 	.word	0x08024ca4
 80183e0:	080254dc 	.word	0x080254dc
 80183e4:	08024cf8 	.word	0x08024cf8

080183e8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80183e8:	b590      	push	{r4, r7, lr}
 80183ea:	b08b      	sub	sp, #44	; 0x2c
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80183f0:	2300      	movs	r3, #0
 80183f2:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d106      	bne.n	8018408 <tcp_zero_window_probe+0x20>
 80183fa:	4b4d      	ldr	r3, [pc, #308]	; (8018530 <tcp_zero_window_probe+0x148>)
 80183fc:	f640 024f 	movw	r2, #2127	; 0x84f
 8018400:	494c      	ldr	r1, [pc, #304]	; (8018534 <tcp_zero_window_probe+0x14c>)
 8018402:	484d      	ldr	r0, [pc, #308]	; (8018538 <tcp_zero_window_probe+0x150>)
 8018404:	f006 fb3a 	bl	801ea7c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801840c:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 801840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018410:	2b00      	cmp	r3, #0
 8018412:	d101      	bne.n	8018418 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018414:	2300      	movs	r3, #0
 8018416:	e087      	b.n	8018528 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801841e:	2bff      	cmp	r3, #255	; 0xff
 8018420:	d007      	beq.n	8018432 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018428:	3301      	adds	r3, #1
 801842a:	b2da      	uxtb	r2, r3
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018434:	691b      	ldr	r3, [r3, #16]
 8018436:	899b      	ldrh	r3, [r3, #12]
 8018438:	b29b      	uxth	r3, r3
 801843a:	4618      	mov	r0, r3
 801843c:	f7f6 feb6 	bl	800f1ac <lwip_htons>
 8018440:	4603      	mov	r3, r0
 8018442:	b2db      	uxtb	r3, r3
 8018444:	f003 0301 	and.w	r3, r3, #1
 8018448:	2b00      	cmp	r3, #0
 801844a:	d005      	beq.n	8018458 <tcp_zero_window_probe+0x70>
 801844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801844e:	891b      	ldrh	r3, [r3, #8]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d101      	bne.n	8018458 <tcp_zero_window_probe+0x70>
 8018454:	2301      	movs	r3, #1
 8018456:	e000      	b.n	801845a <tcp_zero_window_probe+0x72>
 8018458:	2300      	movs	r3, #0
 801845a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801845e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018462:	2b00      	cmp	r3, #0
 8018464:	bf0c      	ite	eq
 8018466:	2301      	moveq	r3, #1
 8018468:	2300      	movne	r3, #0
 801846a:	b2db      	uxtb	r3, r3
 801846c:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801846e:	7cfb      	ldrb	r3, [r7, #19]
 8018470:	b299      	uxth	r1, r3
 8018472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018474:	691b      	ldr	r3, [r3, #16]
 8018476:	685b      	ldr	r3, [r3, #4]
 8018478:	8c3a      	ldrh	r2, [r7, #32]
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	f7ff fdf8 	bl	8018070 <tcp_output_alloc_header>
 8018480:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d102      	bne.n	801848e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801848c:	e04c      	b.n	8018528 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801848e:	69fb      	ldr	r3, [r7, #28]
 8018490:	685b      	ldr	r3, [r3, #4]
 8018492:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8018494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018498:	2b00      	cmp	r3, #0
 801849a:	d011      	beq.n	80184c0 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801849c:	69bb      	ldr	r3, [r7, #24]
 801849e:	899b      	ldrh	r3, [r3, #12]
 80184a0:	b29b      	uxth	r3, r3
 80184a2:	b21b      	sxth	r3, r3
 80184a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80184a8:	b21c      	sxth	r4, r3
 80184aa:	2011      	movs	r0, #17
 80184ac:	f7f6 fe7e 	bl	800f1ac <lwip_htons>
 80184b0:	4603      	mov	r3, r0
 80184b2:	b21b      	sxth	r3, r3
 80184b4:	4323      	orrs	r3, r4
 80184b6:	b21b      	sxth	r3, r3
 80184b8:	b29a      	uxth	r2, r3
 80184ba:	69bb      	ldr	r3, [r7, #24]
 80184bc:	819a      	strh	r2, [r3, #12]
 80184be:	e010      	b.n	80184e2 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80184c0:	69fb      	ldr	r3, [r7, #28]
 80184c2:	685b      	ldr	r3, [r3, #4]
 80184c4:	3314      	adds	r3, #20
 80184c6:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80184c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ca:	6858      	ldr	r0, [r3, #4]
 80184cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ce:	685b      	ldr	r3, [r3, #4]
 80184d0:	891a      	ldrh	r2, [r3, #8]
 80184d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184d4:	891b      	ldrh	r3, [r3, #8]
 80184d6:	1ad3      	subs	r3, r2, r3
 80184d8:	b29b      	uxth	r3, r3
 80184da:	2201      	movs	r2, #1
 80184dc:	6979      	ldr	r1, [r7, #20]
 80184de:	f7f9 fc2b 	bl	8011d38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80184e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e4:	691b      	ldr	r3, [r3, #16]
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7f6 fe74 	bl	800f1d6 <lwip_htonl>
 80184ee:	4603      	mov	r3, r0
 80184f0:	3301      	adds	r3, #1
 80184f2:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	1ad3      	subs	r3, r2, r3
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	da02      	bge.n	8018506 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	68fa      	ldr	r2, [r7, #12]
 8018504:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018506:	7cfb      	ldrb	r3, [r7, #19]
 8018508:	2200      	movs	r2, #0
 801850a:	69f9      	ldr	r1, [r7, #28]
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f7ff fded 	bl	80180ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018512:	687a      	ldr	r2, [r7, #4]
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	3304      	adds	r3, #4
 8018518:	69f9      	ldr	r1, [r7, #28]
 801851a:	6878      	ldr	r0, [r7, #4]
 801851c:	f7ff fe26 	bl	801816c <tcp_output_control_segment>
 8018520:	4603      	mov	r3, r0
 8018522:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018524:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018528:	4618      	mov	r0, r3
 801852a:	372c      	adds	r7, #44	; 0x2c
 801852c:	46bd      	mov	sp, r7
 801852e:	bd90      	pop	{r4, r7, pc}
 8018530:	08024ca4 	.word	0x08024ca4
 8018534:	080254f8 	.word	0x080254f8
 8018538:	08024cf8 	.word	0x08024cf8

0801853c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b082      	sub	sp, #8
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018544:	f7f9 fe62 	bl	801220c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018548:	4b0a      	ldr	r3, [pc, #40]	; (8018574 <tcpip_tcp_timer+0x38>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d103      	bne.n	8018558 <tcpip_tcp_timer+0x1c>
 8018550:	4b09      	ldr	r3, [pc, #36]	; (8018578 <tcpip_tcp_timer+0x3c>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d005      	beq.n	8018564 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018558:	2200      	movs	r2, #0
 801855a:	4908      	ldr	r1, [pc, #32]	; (801857c <tcpip_tcp_timer+0x40>)
 801855c:	20fa      	movs	r0, #250	; 0xfa
 801855e:	f000 f8f3 	bl	8018748 <sys_timeout>
 8018562:	e003      	b.n	801856c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018564:	4b06      	ldr	r3, [pc, #24]	; (8018580 <tcpip_tcp_timer+0x44>)
 8018566:	2200      	movs	r2, #0
 8018568:	601a      	str	r2, [r3, #0]
  }
}
 801856a:	bf00      	nop
 801856c:	bf00      	nop
 801856e:	3708      	adds	r7, #8
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}
 8018574:	2001b0c8 	.word	0x2001b0c8
 8018578:	2001b0d8 	.word	0x2001b0d8
 801857c:	0801853d 	.word	0x0801853d
 8018580:	2001439c 	.word	0x2001439c

08018584 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018584:	b580      	push	{r7, lr}
 8018586:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018588:	4b0a      	ldr	r3, [pc, #40]	; (80185b4 <tcp_timer_needed+0x30>)
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d10f      	bne.n	80185b0 <tcp_timer_needed+0x2c>
 8018590:	4b09      	ldr	r3, [pc, #36]	; (80185b8 <tcp_timer_needed+0x34>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d103      	bne.n	80185a0 <tcp_timer_needed+0x1c>
 8018598:	4b08      	ldr	r3, [pc, #32]	; (80185bc <tcp_timer_needed+0x38>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d007      	beq.n	80185b0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80185a0:	4b04      	ldr	r3, [pc, #16]	; (80185b4 <tcp_timer_needed+0x30>)
 80185a2:	2201      	movs	r2, #1
 80185a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80185a6:	2200      	movs	r2, #0
 80185a8:	4905      	ldr	r1, [pc, #20]	; (80185c0 <tcp_timer_needed+0x3c>)
 80185aa:	20fa      	movs	r0, #250	; 0xfa
 80185ac:	f000 f8cc 	bl	8018748 <sys_timeout>
  }
}
 80185b0:	bf00      	nop
 80185b2:	bd80      	pop	{r7, pc}
 80185b4:	2001439c 	.word	0x2001439c
 80185b8:	2001b0c8 	.word	0x2001b0c8
 80185bc:	2001b0d8 	.word	0x2001b0d8
 80185c0:	0801853d 	.word	0x0801853d

080185c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b086      	sub	sp, #24
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	60f8      	str	r0, [r7, #12]
 80185cc:	60b9      	str	r1, [r7, #8]
 80185ce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80185d0:	200a      	movs	r0, #10
 80185d2:	f7f8 fa77 	bl	8010ac4 <memp_malloc>
 80185d6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80185d8:	693b      	ldr	r3, [r7, #16]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d109      	bne.n	80185f2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80185de:	693b      	ldr	r3, [r7, #16]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d151      	bne.n	8018688 <sys_timeout_abs+0xc4>
 80185e4:	4b2a      	ldr	r3, [pc, #168]	; (8018690 <sys_timeout_abs+0xcc>)
 80185e6:	22be      	movs	r2, #190	; 0xbe
 80185e8:	492a      	ldr	r1, [pc, #168]	; (8018694 <sys_timeout_abs+0xd0>)
 80185ea:	482b      	ldr	r0, [pc, #172]	; (8018698 <sys_timeout_abs+0xd4>)
 80185ec:	f006 fa46 	bl	801ea7c <iprintf>
    return;
 80185f0:	e04a      	b.n	8018688 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80185f2:	693b      	ldr	r3, [r7, #16]
 80185f4:	2200      	movs	r2, #0
 80185f6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	68ba      	ldr	r2, [r7, #8]
 80185fc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80185fe:	693b      	ldr	r3, [r7, #16]
 8018600:	687a      	ldr	r2, [r7, #4]
 8018602:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018604:	693b      	ldr	r3, [r7, #16]
 8018606:	68fa      	ldr	r2, [r7, #12]
 8018608:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801860a:	4b24      	ldr	r3, [pc, #144]	; (801869c <sys_timeout_abs+0xd8>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d103      	bne.n	801861a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018612:	4a22      	ldr	r2, [pc, #136]	; (801869c <sys_timeout_abs+0xd8>)
 8018614:	693b      	ldr	r3, [r7, #16]
 8018616:	6013      	str	r3, [r2, #0]
    return;
 8018618:	e037      	b.n	801868a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801861a:	693b      	ldr	r3, [r7, #16]
 801861c:	685a      	ldr	r2, [r3, #4]
 801861e:	4b1f      	ldr	r3, [pc, #124]	; (801869c <sys_timeout_abs+0xd8>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	685b      	ldr	r3, [r3, #4]
 8018624:	1ad3      	subs	r3, r2, r3
 8018626:	0fdb      	lsrs	r3, r3, #31
 8018628:	f003 0301 	and.w	r3, r3, #1
 801862c:	b2db      	uxtb	r3, r3
 801862e:	2b00      	cmp	r3, #0
 8018630:	d007      	beq.n	8018642 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018632:	4b1a      	ldr	r3, [pc, #104]	; (801869c <sys_timeout_abs+0xd8>)
 8018634:	681a      	ldr	r2, [r3, #0]
 8018636:	693b      	ldr	r3, [r7, #16]
 8018638:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801863a:	4a18      	ldr	r2, [pc, #96]	; (801869c <sys_timeout_abs+0xd8>)
 801863c:	693b      	ldr	r3, [r7, #16]
 801863e:	6013      	str	r3, [r2, #0]
 8018640:	e023      	b.n	801868a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018642:	4b16      	ldr	r3, [pc, #88]	; (801869c <sys_timeout_abs+0xd8>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	617b      	str	r3, [r7, #20]
 8018648:	e01a      	b.n	8018680 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d00b      	beq.n	801866a <sys_timeout_abs+0xa6>
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	685a      	ldr	r2, [r3, #4]
 8018656:	697b      	ldr	r3, [r7, #20]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	685b      	ldr	r3, [r3, #4]
 801865c:	1ad3      	subs	r3, r2, r3
 801865e:	0fdb      	lsrs	r3, r3, #31
 8018660:	f003 0301 	and.w	r3, r3, #1
 8018664:	b2db      	uxtb	r3, r3
 8018666:	2b00      	cmp	r3, #0
 8018668:	d007      	beq.n	801867a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	681a      	ldr	r2, [r3, #0]
 801866e:	693b      	ldr	r3, [r7, #16]
 8018670:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018672:	697b      	ldr	r3, [r7, #20]
 8018674:	693a      	ldr	r2, [r7, #16]
 8018676:	601a      	str	r2, [r3, #0]
        break;
 8018678:	e007      	b.n	801868a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	617b      	str	r3, [r7, #20]
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d1e1      	bne.n	801864a <sys_timeout_abs+0x86>
 8018686:	e000      	b.n	801868a <sys_timeout_abs+0xc6>
    return;
 8018688:	bf00      	nop
      }
    }
  }
}
 801868a:	3718      	adds	r7, #24
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}
 8018690:	0802551c 	.word	0x0802551c
 8018694:	08025550 	.word	0x08025550
 8018698:	08025590 	.word	0x08025590
 801869c:	20014394 	.word	0x20014394

080186a0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b086      	sub	sp, #24
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	685b      	ldr	r3, [r3, #4]
 80186b0:	4798      	blx	r3

  now = sys_now();
 80186b2:	f7ee fe51 	bl	8007358 <sys_now>
 80186b6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80186b8:	697b      	ldr	r3, [r7, #20]
 80186ba:	681a      	ldr	r2, [r3, #0]
 80186bc:	4b0f      	ldr	r3, [pc, #60]	; (80186fc <lwip_cyclic_timer+0x5c>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	4413      	add	r3, r2
 80186c2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80186c4:	68fa      	ldr	r2, [r7, #12]
 80186c6:	693b      	ldr	r3, [r7, #16]
 80186c8:	1ad3      	subs	r3, r2, r3
 80186ca:	0fdb      	lsrs	r3, r3, #31
 80186cc:	f003 0301 	and.w	r3, r3, #1
 80186d0:	b2db      	uxtb	r3, r3
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d009      	beq.n	80186ea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80186d6:	697b      	ldr	r3, [r7, #20]
 80186d8:	681a      	ldr	r2, [r3, #0]
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	4413      	add	r3, r2
 80186de:	687a      	ldr	r2, [r7, #4]
 80186e0:	4907      	ldr	r1, [pc, #28]	; (8018700 <lwip_cyclic_timer+0x60>)
 80186e2:	4618      	mov	r0, r3
 80186e4:	f7ff ff6e 	bl	80185c4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80186e8:	e004      	b.n	80186f4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80186ea:	687a      	ldr	r2, [r7, #4]
 80186ec:	4904      	ldr	r1, [pc, #16]	; (8018700 <lwip_cyclic_timer+0x60>)
 80186ee:	68f8      	ldr	r0, [r7, #12]
 80186f0:	f7ff ff68 	bl	80185c4 <sys_timeout_abs>
}
 80186f4:	bf00      	nop
 80186f6:	3718      	adds	r7, #24
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}
 80186fc:	20014398 	.word	0x20014398
 8018700:	080186a1 	.word	0x080186a1

08018704 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b082      	sub	sp, #8
 8018708:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801870a:	2301      	movs	r3, #1
 801870c:	607b      	str	r3, [r7, #4]
 801870e:	e00e      	b.n	801872e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018710:	4a0b      	ldr	r2, [pc, #44]	; (8018740 <sys_timeouts_init+0x3c>)
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	00db      	lsls	r3, r3, #3
 801871c:	4a08      	ldr	r2, [pc, #32]	; (8018740 <sys_timeouts_init+0x3c>)
 801871e:	4413      	add	r3, r2
 8018720:	461a      	mov	r2, r3
 8018722:	4908      	ldr	r1, [pc, #32]	; (8018744 <sys_timeouts_init+0x40>)
 8018724:	f000 f810 	bl	8018748 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	3301      	adds	r3, #1
 801872c:	607b      	str	r3, [r7, #4]
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	2b05      	cmp	r3, #5
 8018732:	d9ed      	bls.n	8018710 <sys_timeouts_init+0xc>
  }
}
 8018734:	bf00      	nop
 8018736:	bf00      	nop
 8018738:	3708      	adds	r7, #8
 801873a:	46bd      	mov	sp, r7
 801873c:	bd80      	pop	{r7, pc}
 801873e:	bf00      	nop
 8018740:	08026690 	.word	0x08026690
 8018744:	080186a1 	.word	0x080186a1

08018748 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b086      	sub	sp, #24
 801874c:	af00      	add	r7, sp, #0
 801874e:	60f8      	str	r0, [r7, #12]
 8018750:	60b9      	str	r1, [r7, #8]
 8018752:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801875a:	d306      	bcc.n	801876a <sys_timeout+0x22>
 801875c:	4b0a      	ldr	r3, [pc, #40]	; (8018788 <sys_timeout+0x40>)
 801875e:	f240 1229 	movw	r2, #297	; 0x129
 8018762:	490a      	ldr	r1, [pc, #40]	; (801878c <sys_timeout+0x44>)
 8018764:	480a      	ldr	r0, [pc, #40]	; (8018790 <sys_timeout+0x48>)
 8018766:	f006 f989 	bl	801ea7c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801876a:	f7ee fdf5 	bl	8007358 <sys_now>
 801876e:	4602      	mov	r2, r0
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	4413      	add	r3, r2
 8018774:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018776:	687a      	ldr	r2, [r7, #4]
 8018778:	68b9      	ldr	r1, [r7, #8]
 801877a:	6978      	ldr	r0, [r7, #20]
 801877c:	f7ff ff22 	bl	80185c4 <sys_timeout_abs>
#endif
}
 8018780:	bf00      	nop
 8018782:	3718      	adds	r7, #24
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}
 8018788:	0802551c 	.word	0x0802551c
 801878c:	080255b8 	.word	0x080255b8
 8018790:	08025590 	.word	0x08025590

08018794 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b084      	sub	sp, #16
 8018798:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801879a:	f7ee fddd 	bl	8007358 <sys_now>
 801879e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80187a0:	4b17      	ldr	r3, [pc, #92]	; (8018800 <sys_check_timeouts+0x6c>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80187a6:	68bb      	ldr	r3, [r7, #8]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d022      	beq.n	80187f2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80187ac:	68bb      	ldr	r3, [r7, #8]
 80187ae:	685b      	ldr	r3, [r3, #4]
 80187b0:	68fa      	ldr	r2, [r7, #12]
 80187b2:	1ad3      	subs	r3, r2, r3
 80187b4:	0fdb      	lsrs	r3, r3, #31
 80187b6:	f003 0301 	and.w	r3, r3, #1
 80187ba:	b2db      	uxtb	r3, r3
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d11a      	bne.n	80187f6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	4a0e      	ldr	r2, [pc, #56]	; (8018800 <sys_check_timeouts+0x6c>)
 80187c6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	689b      	ldr	r3, [r3, #8]
 80187cc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80187ce:	68bb      	ldr	r3, [r7, #8]
 80187d0:	68db      	ldr	r3, [r3, #12]
 80187d2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80187d4:	68bb      	ldr	r3, [r7, #8]
 80187d6:	685b      	ldr	r3, [r3, #4]
 80187d8:	4a0a      	ldr	r2, [pc, #40]	; (8018804 <sys_check_timeouts+0x70>)
 80187da:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80187dc:	68b9      	ldr	r1, [r7, #8]
 80187de:	200a      	movs	r0, #10
 80187e0:	f7f8 f9c2 	bl	8010b68 <memp_free>
    if (handler != NULL) {
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d0da      	beq.n	80187a0 <sys_check_timeouts+0xc>
      handler(arg);
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6838      	ldr	r0, [r7, #0]
 80187ee:	4798      	blx	r3
  do {
 80187f0:	e7d6      	b.n	80187a0 <sys_check_timeouts+0xc>
      return;
 80187f2:	bf00      	nop
 80187f4:	e000      	b.n	80187f8 <sys_check_timeouts+0x64>
      return;
 80187f6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80187f8:	3710      	adds	r7, #16
 80187fa:	46bd      	mov	sp, r7
 80187fc:	bd80      	pop	{r7, pc}
 80187fe:	bf00      	nop
 8018800:	20014394 	.word	0x20014394
 8018804:	20014398 	.word	0x20014398

08018808 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b082      	sub	sp, #8
 801880c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801880e:	4b16      	ldr	r3, [pc, #88]	; (8018868 <sys_timeouts_sleeptime+0x60>)
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d102      	bne.n	801881c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801881a:	e020      	b.n	801885e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801881c:	f7ee fd9c 	bl	8007358 <sys_now>
 8018820:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018822:	4b11      	ldr	r3, [pc, #68]	; (8018868 <sys_timeouts_sleeptime+0x60>)
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	685a      	ldr	r2, [r3, #4]
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	1ad3      	subs	r3, r2, r3
 801882c:	0fdb      	lsrs	r3, r3, #31
 801882e:	f003 0301 	and.w	r3, r3, #1
 8018832:	b2db      	uxtb	r3, r3
 8018834:	2b00      	cmp	r3, #0
 8018836:	d001      	beq.n	801883c <sys_timeouts_sleeptime+0x34>
    return 0;
 8018838:	2300      	movs	r3, #0
 801883a:	e010      	b.n	801885e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801883c:	4b0a      	ldr	r3, [pc, #40]	; (8018868 <sys_timeouts_sleeptime+0x60>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	685a      	ldr	r2, [r3, #4]
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	1ad3      	subs	r3, r2, r3
 8018846:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018848:	683b      	ldr	r3, [r7, #0]
 801884a:	2b00      	cmp	r3, #0
 801884c:	da06      	bge.n	801885c <sys_timeouts_sleeptime+0x54>
 801884e:	4b07      	ldr	r3, [pc, #28]	; (801886c <sys_timeouts_sleeptime+0x64>)
 8018850:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8018854:	4906      	ldr	r1, [pc, #24]	; (8018870 <sys_timeouts_sleeptime+0x68>)
 8018856:	4807      	ldr	r0, [pc, #28]	; (8018874 <sys_timeouts_sleeptime+0x6c>)
 8018858:	f006 f910 	bl	801ea7c <iprintf>
    return ret;
 801885c:	683b      	ldr	r3, [r7, #0]
  }
}
 801885e:	4618      	mov	r0, r3
 8018860:	3708      	adds	r7, #8
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	20014394 	.word	0x20014394
 801886c:	0802551c 	.word	0x0802551c
 8018870:	080255f0 	.word	0x080255f0
 8018874:	08025590 	.word	0x08025590

08018878 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801887c:	f006 f98c 	bl	801eb98 <rand>
 8018880:	4603      	mov	r3, r0
 8018882:	b29b      	uxth	r3, r3
 8018884:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018888:	b29b      	uxth	r3, r3
 801888a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801888e:	b29a      	uxth	r2, r3
 8018890:	4b01      	ldr	r3, [pc, #4]	; (8018898 <udp_init+0x20>)
 8018892:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018894:	bf00      	nop
 8018896:	bd80      	pop	{r7, pc}
 8018898:	2000005c 	.word	0x2000005c

0801889c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801889c:	b480      	push	{r7}
 801889e:	b083      	sub	sp, #12
 80188a0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80188a2:	2300      	movs	r3, #0
 80188a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80188a6:	4b17      	ldr	r3, [pc, #92]	; (8018904 <udp_new_port+0x68>)
 80188a8:	881b      	ldrh	r3, [r3, #0]
 80188aa:	1c5a      	adds	r2, r3, #1
 80188ac:	b291      	uxth	r1, r2
 80188ae:	4a15      	ldr	r2, [pc, #84]	; (8018904 <udp_new_port+0x68>)
 80188b0:	8011      	strh	r1, [r2, #0]
 80188b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188b6:	4293      	cmp	r3, r2
 80188b8:	d103      	bne.n	80188c2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80188ba:	4b12      	ldr	r3, [pc, #72]	; (8018904 <udp_new_port+0x68>)
 80188bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80188c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80188c2:	4b11      	ldr	r3, [pc, #68]	; (8018908 <udp_new_port+0x6c>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	603b      	str	r3, [r7, #0]
 80188c8:	e011      	b.n	80188ee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	8a5a      	ldrh	r2, [r3, #18]
 80188ce:	4b0d      	ldr	r3, [pc, #52]	; (8018904 <udp_new_port+0x68>)
 80188d0:	881b      	ldrh	r3, [r3, #0]
 80188d2:	429a      	cmp	r2, r3
 80188d4:	d108      	bne.n	80188e8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80188d6:	88fb      	ldrh	r3, [r7, #6]
 80188d8:	3301      	adds	r3, #1
 80188da:	80fb      	strh	r3, [r7, #6]
 80188dc:	88fb      	ldrh	r3, [r7, #6]
 80188de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80188e2:	d3e0      	bcc.n	80188a6 <udp_new_port+0xa>
        return 0;
 80188e4:	2300      	movs	r3, #0
 80188e6:	e007      	b.n	80188f8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	68db      	ldr	r3, [r3, #12]
 80188ec:	603b      	str	r3, [r7, #0]
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d1ea      	bne.n	80188ca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80188f4:	4b03      	ldr	r3, [pc, #12]	; (8018904 <udp_new_port+0x68>)
 80188f6:	881b      	ldrh	r3, [r3, #0]
}
 80188f8:	4618      	mov	r0, r3
 80188fa:	370c      	adds	r7, #12
 80188fc:	46bd      	mov	sp, r7
 80188fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018902:	4770      	bx	lr
 8018904:	2000005c 	.word	0x2000005c
 8018908:	2001b0e0 	.word	0x2001b0e0

0801890c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b084      	sub	sp, #16
 8018910:	af00      	add	r7, sp, #0
 8018912:	60f8      	str	r0, [r7, #12]
 8018914:	60b9      	str	r1, [r7, #8]
 8018916:	4613      	mov	r3, r2
 8018918:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d105      	bne.n	801892c <udp_input_local_match+0x20>
 8018920:	4b27      	ldr	r3, [pc, #156]	; (80189c0 <udp_input_local_match+0xb4>)
 8018922:	2287      	movs	r2, #135	; 0x87
 8018924:	4927      	ldr	r1, [pc, #156]	; (80189c4 <udp_input_local_match+0xb8>)
 8018926:	4828      	ldr	r0, [pc, #160]	; (80189c8 <udp_input_local_match+0xbc>)
 8018928:	f006 f8a8 	bl	801ea7c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801892c:	68bb      	ldr	r3, [r7, #8]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d105      	bne.n	801893e <udp_input_local_match+0x32>
 8018932:	4b23      	ldr	r3, [pc, #140]	; (80189c0 <udp_input_local_match+0xb4>)
 8018934:	2288      	movs	r2, #136	; 0x88
 8018936:	4925      	ldr	r1, [pc, #148]	; (80189cc <udp_input_local_match+0xc0>)
 8018938:	4823      	ldr	r0, [pc, #140]	; (80189c8 <udp_input_local_match+0xbc>)
 801893a:	f006 f89f 	bl	801ea7c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	7a1b      	ldrb	r3, [r3, #8]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d00b      	beq.n	801895e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	7a1a      	ldrb	r2, [r3, #8]
 801894a:	4b21      	ldr	r3, [pc, #132]	; (80189d0 <udp_input_local_match+0xc4>)
 801894c:	685b      	ldr	r3, [r3, #4]
 801894e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018952:	3301      	adds	r3, #1
 8018954:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018956:	429a      	cmp	r2, r3
 8018958:	d001      	beq.n	801895e <udp_input_local_match+0x52>
    return 0;
 801895a:	2300      	movs	r3, #0
 801895c:	e02b      	b.n	80189b6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801895e:	79fb      	ldrb	r3, [r7, #7]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d018      	beq.n	8018996 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018964:	68fb      	ldr	r3, [r7, #12]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d013      	beq.n	8018992 <udp_input_local_match+0x86>
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d00f      	beq.n	8018992 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018972:	4b17      	ldr	r3, [pc, #92]	; (80189d0 <udp_input_local_match+0xc4>)
 8018974:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801897a:	d00a      	beq.n	8018992 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	681a      	ldr	r2, [r3, #0]
 8018980:	4b13      	ldr	r3, [pc, #76]	; (80189d0 <udp_input_local_match+0xc4>)
 8018982:	695b      	ldr	r3, [r3, #20]
 8018984:	405a      	eors	r2, r3
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	3308      	adds	r3, #8
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801898e:	2b00      	cmp	r3, #0
 8018990:	d110      	bne.n	80189b4 <udp_input_local_match+0xa8>
          return 1;
 8018992:	2301      	movs	r3, #1
 8018994:	e00f      	b.n	80189b6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d009      	beq.n	80189b0 <udp_input_local_match+0xa4>
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d005      	beq.n	80189b0 <udp_input_local_match+0xa4>
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	681a      	ldr	r2, [r3, #0]
 80189a8:	4b09      	ldr	r3, [pc, #36]	; (80189d0 <udp_input_local_match+0xc4>)
 80189aa:	695b      	ldr	r3, [r3, #20]
 80189ac:	429a      	cmp	r2, r3
 80189ae:	d101      	bne.n	80189b4 <udp_input_local_match+0xa8>
        return 1;
 80189b0:	2301      	movs	r3, #1
 80189b2:	e000      	b.n	80189b6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80189b4:	2300      	movs	r3, #0
}
 80189b6:	4618      	mov	r0, r3
 80189b8:	3710      	adds	r7, #16
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	08025604 	.word	0x08025604
 80189c4:	08025634 	.word	0x08025634
 80189c8:	08025658 	.word	0x08025658
 80189cc:	08025680 	.word	0x08025680
 80189d0:	200176d4 	.word	0x200176d4

080189d4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80189d4:	b590      	push	{r4, r7, lr}
 80189d6:	b08d      	sub	sp, #52	; 0x34
 80189d8:	af02      	add	r7, sp, #8
 80189da:	6078      	str	r0, [r7, #4]
 80189dc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80189de:	2300      	movs	r3, #0
 80189e0:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d105      	bne.n	80189f4 <udp_input+0x20>
 80189e8:	4b7c      	ldr	r3, [pc, #496]	; (8018bdc <udp_input+0x208>)
 80189ea:	22cf      	movs	r2, #207	; 0xcf
 80189ec:	497c      	ldr	r1, [pc, #496]	; (8018be0 <udp_input+0x20c>)
 80189ee:	487d      	ldr	r0, [pc, #500]	; (8018be4 <udp_input+0x210>)
 80189f0:	f006 f844 	bl	801ea7c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80189f4:	683b      	ldr	r3, [r7, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d105      	bne.n	8018a06 <udp_input+0x32>
 80189fa:	4b78      	ldr	r3, [pc, #480]	; (8018bdc <udp_input+0x208>)
 80189fc:	22d0      	movs	r2, #208	; 0xd0
 80189fe:	497a      	ldr	r1, [pc, #488]	; (8018be8 <udp_input+0x214>)
 8018a00:	4878      	ldr	r0, [pc, #480]	; (8018be4 <udp_input+0x210>)
 8018a02:	f006 f83b 	bl	801ea7c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	895b      	ldrh	r3, [r3, #10]
 8018a0a:	2b07      	cmp	r3, #7
 8018a0c:	d803      	bhi.n	8018a16 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f7f8 ff8c 	bl	801192c <pbuf_free>
    goto end;
 8018a14:	e0de      	b.n	8018bd4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	685b      	ldr	r3, [r3, #4]
 8018a1a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018a1c:	4b73      	ldr	r3, [pc, #460]	; (8018bec <udp_input+0x218>)
 8018a1e:	695b      	ldr	r3, [r3, #20]
 8018a20:	4a72      	ldr	r2, [pc, #456]	; (8018bec <udp_input+0x218>)
 8018a22:	6812      	ldr	r2, [r2, #0]
 8018a24:	4611      	mov	r1, r2
 8018a26:	4618      	mov	r0, r3
 8018a28:	f003 ff5c 	bl	801c8e4 <ip4_addr_isbroadcast_u32>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018a30:	697b      	ldr	r3, [r7, #20]
 8018a32:	881b      	ldrh	r3, [r3, #0]
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7f6 fbb8 	bl	800f1ac <lwip_htons>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018a40:	697b      	ldr	r3, [r7, #20]
 8018a42:	885b      	ldrh	r3, [r3, #2]
 8018a44:	b29b      	uxth	r3, r3
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7f6 fbb0 	bl	800f1ac <lwip_htons>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018a50:	2300      	movs	r3, #0
 8018a52:	623b      	str	r3, [r7, #32]
  prev = NULL;
 8018a54:	2300      	movs	r3, #0
 8018a56:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 8018a58:	2300      	movs	r3, #0
 8018a5a:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a5c:	4b64      	ldr	r3, [pc, #400]	; (8018bf0 <udp_input+0x21c>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	623b      	str	r3, [r7, #32]
 8018a62:	e054      	b.n	8018b0e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018a64:	6a3b      	ldr	r3, [r7, #32]
 8018a66:	8a5b      	ldrh	r3, [r3, #18]
 8018a68:	89fa      	ldrh	r2, [r7, #14]
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d14a      	bne.n	8018b04 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018a6e:	7cfb      	ldrb	r3, [r7, #19]
 8018a70:	461a      	mov	r2, r3
 8018a72:	6839      	ldr	r1, [r7, #0]
 8018a74:	6a38      	ldr	r0, [r7, #32]
 8018a76:	f7ff ff49 	bl	801890c <udp_input_local_match>
 8018a7a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d041      	beq.n	8018b04 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018a80:	6a3b      	ldr	r3, [r7, #32]
 8018a82:	7c1b      	ldrb	r3, [r3, #16]
 8018a84:	f003 0304 	and.w	r3, r3, #4
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d11d      	bne.n	8018ac8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018a8c:	69bb      	ldr	r3, [r7, #24]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d102      	bne.n	8018a98 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018a92:	6a3b      	ldr	r3, [r7, #32]
 8018a94:	61bb      	str	r3, [r7, #24]
 8018a96:	e017      	b.n	8018ac8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018a98:	7cfb      	ldrb	r3, [r7, #19]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d014      	beq.n	8018ac8 <udp_input+0xf4>
 8018a9e:	4b53      	ldr	r3, [pc, #332]	; (8018bec <udp_input+0x218>)
 8018aa0:	695b      	ldr	r3, [r3, #20]
 8018aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018aa6:	d10f      	bne.n	8018ac8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018aa8:	69bb      	ldr	r3, [r7, #24]
 8018aaa:	681a      	ldr	r2, [r3, #0]
 8018aac:	683b      	ldr	r3, [r7, #0]
 8018aae:	3304      	adds	r3, #4
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	429a      	cmp	r2, r3
 8018ab4:	d008      	beq.n	8018ac8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018ab6:	6a3b      	ldr	r3, [r7, #32]
 8018ab8:	681a      	ldr	r2, [r3, #0]
 8018aba:	683b      	ldr	r3, [r7, #0]
 8018abc:	3304      	adds	r3, #4
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d101      	bne.n	8018ac8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018ac4:	6a3b      	ldr	r3, [r7, #32]
 8018ac6:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018ac8:	6a3b      	ldr	r3, [r7, #32]
 8018aca:	8a9b      	ldrh	r3, [r3, #20]
 8018acc:	8a3a      	ldrh	r2, [r7, #16]
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	d118      	bne.n	8018b04 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018ad2:	6a3b      	ldr	r3, [r7, #32]
 8018ad4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d005      	beq.n	8018ae6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018ada:	6a3b      	ldr	r3, [r7, #32]
 8018adc:	685a      	ldr	r2, [r3, #4]
 8018ade:	4b43      	ldr	r3, [pc, #268]	; (8018bec <udp_input+0x218>)
 8018ae0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	d10e      	bne.n	8018b04 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d014      	beq.n	8018b16 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018aec:	6a3b      	ldr	r3, [r7, #32]
 8018aee:	68da      	ldr	r2, [r3, #12]
 8018af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018af2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018af4:	4b3e      	ldr	r3, [pc, #248]	; (8018bf0 <udp_input+0x21c>)
 8018af6:	681a      	ldr	r2, [r3, #0]
 8018af8:	6a3b      	ldr	r3, [r7, #32]
 8018afa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018afc:	4a3c      	ldr	r2, [pc, #240]	; (8018bf0 <udp_input+0x21c>)
 8018afe:	6a3b      	ldr	r3, [r7, #32]
 8018b00:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018b02:	e008      	b.n	8018b16 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018b04:	6a3b      	ldr	r3, [r7, #32]
 8018b06:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018b08:	6a3b      	ldr	r3, [r7, #32]
 8018b0a:	68db      	ldr	r3, [r3, #12]
 8018b0c:	623b      	str	r3, [r7, #32]
 8018b0e:	6a3b      	ldr	r3, [r7, #32]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d1a7      	bne.n	8018a64 <udp_input+0x90>
 8018b14:	e000      	b.n	8018b18 <udp_input+0x144>
        break;
 8018b16:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018b18:	6a3b      	ldr	r3, [r7, #32]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d101      	bne.n	8018b22 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018b1e:	69bb      	ldr	r3, [r7, #24]
 8018b20:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018b22:	6a3b      	ldr	r3, [r7, #32]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d002      	beq.n	8018b2e <udp_input+0x15a>
    for_us = 1;
 8018b28:	2301      	movs	r3, #1
 8018b2a:	77fb      	strb	r3, [r7, #31]
 8018b2c:	e00a      	b.n	8018b44 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	3304      	adds	r3, #4
 8018b32:	681a      	ldr	r2, [r3, #0]
 8018b34:	4b2d      	ldr	r3, [pc, #180]	; (8018bec <udp_input+0x218>)
 8018b36:	695b      	ldr	r3, [r3, #20]
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	bf0c      	ite	eq
 8018b3c:	2301      	moveq	r3, #1
 8018b3e:	2300      	movne	r3, #0
 8018b40:	b2db      	uxtb	r3, r3
 8018b42:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018b44:	7ffb      	ldrb	r3, [r7, #31]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d041      	beq.n	8018bce <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018b4a:	2108      	movs	r1, #8
 8018b4c:	6878      	ldr	r0, [r7, #4]
 8018b4e:	f7f8 fe35 	bl	80117bc <pbuf_remove_header>
 8018b52:	4603      	mov	r3, r0
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d00a      	beq.n	8018b6e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018b58:	4b20      	ldr	r3, [pc, #128]	; (8018bdc <udp_input+0x208>)
 8018b5a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018b5e:	4925      	ldr	r1, [pc, #148]	; (8018bf4 <udp_input+0x220>)
 8018b60:	4820      	ldr	r0, [pc, #128]	; (8018be4 <udp_input+0x210>)
 8018b62:	f005 ff8b 	bl	801ea7c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018b66:	6878      	ldr	r0, [r7, #4]
 8018b68:	f7f8 fee0 	bl	801192c <pbuf_free>
      goto end;
 8018b6c:	e032      	b.n	8018bd4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018b6e:	6a3b      	ldr	r3, [r7, #32]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d012      	beq.n	8018b9a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018b74:	6a3b      	ldr	r3, [r7, #32]
 8018b76:	699b      	ldr	r3, [r3, #24]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d00a      	beq.n	8018b92 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018b7c:	6a3b      	ldr	r3, [r7, #32]
 8018b7e:	699c      	ldr	r4, [r3, #24]
 8018b80:	6a3b      	ldr	r3, [r7, #32]
 8018b82:	69d8      	ldr	r0, [r3, #28]
 8018b84:	8a3b      	ldrh	r3, [r7, #16]
 8018b86:	9300      	str	r3, [sp, #0]
 8018b88:	4b1b      	ldr	r3, [pc, #108]	; (8018bf8 <udp_input+0x224>)
 8018b8a:	687a      	ldr	r2, [r7, #4]
 8018b8c:	6a39      	ldr	r1, [r7, #32]
 8018b8e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018b90:	e021      	b.n	8018bd6 <udp_input+0x202>
        pbuf_free(p);
 8018b92:	6878      	ldr	r0, [r7, #4]
 8018b94:	f7f8 feca 	bl	801192c <pbuf_free>
        goto end;
 8018b98:	e01c      	b.n	8018bd4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018b9a:	7cfb      	ldrb	r3, [r7, #19]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d112      	bne.n	8018bc6 <udp_input+0x1f2>
 8018ba0:	4b12      	ldr	r3, [pc, #72]	; (8018bec <udp_input+0x218>)
 8018ba2:	695b      	ldr	r3, [r3, #20]
 8018ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ba8:	2be0      	cmp	r3, #224	; 0xe0
 8018baa:	d00c      	beq.n	8018bc6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018bac:	4b0f      	ldr	r3, [pc, #60]	; (8018bec <udp_input+0x218>)
 8018bae:	899b      	ldrh	r3, [r3, #12]
 8018bb0:	3308      	adds	r3, #8
 8018bb2:	b29b      	uxth	r3, r3
 8018bb4:	b21b      	sxth	r3, r3
 8018bb6:	4619      	mov	r1, r3
 8018bb8:	6878      	ldr	r0, [r7, #4]
 8018bba:	f7f8 fe72 	bl	80118a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018bbe:	2103      	movs	r1, #3
 8018bc0:	6878      	ldr	r0, [r7, #4]
 8018bc2:	f003 fb51 	bl	801c268 <icmp_dest_unreach>
      pbuf_free(p);
 8018bc6:	6878      	ldr	r0, [r7, #4]
 8018bc8:	f7f8 feb0 	bl	801192c <pbuf_free>
  return;
 8018bcc:	e003      	b.n	8018bd6 <udp_input+0x202>
    pbuf_free(p);
 8018bce:	6878      	ldr	r0, [r7, #4]
 8018bd0:	f7f8 feac 	bl	801192c <pbuf_free>
  return;
 8018bd4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018bd6:	372c      	adds	r7, #44	; 0x2c
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	bd90      	pop	{r4, r7, pc}
 8018bdc:	08025604 	.word	0x08025604
 8018be0:	080256a8 	.word	0x080256a8
 8018be4:	08025658 	.word	0x08025658
 8018be8:	080256c0 	.word	0x080256c0
 8018bec:	200176d4 	.word	0x200176d4
 8018bf0:	2001b0e0 	.word	0x2001b0e0
 8018bf4:	080256dc 	.word	0x080256dc
 8018bf8:	200176e4 	.word	0x200176e4

08018bfc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b082      	sub	sp, #8
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
 8018c04:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d109      	bne.n	8018c20 <udp_send+0x24>
 8018c0c:	4b11      	ldr	r3, [pc, #68]	; (8018c54 <udp_send+0x58>)
 8018c0e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8018c12:	4911      	ldr	r1, [pc, #68]	; (8018c58 <udp_send+0x5c>)
 8018c14:	4811      	ldr	r0, [pc, #68]	; (8018c5c <udp_send+0x60>)
 8018c16:	f005 ff31 	bl	801ea7c <iprintf>
 8018c1a:	f06f 030f 	mvn.w	r3, #15
 8018c1e:	e015      	b.n	8018c4c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8018c20:	683b      	ldr	r3, [r7, #0]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d109      	bne.n	8018c3a <udp_send+0x3e>
 8018c26:	4b0b      	ldr	r3, [pc, #44]	; (8018c54 <udp_send+0x58>)
 8018c28:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8018c2c:	490c      	ldr	r1, [pc, #48]	; (8018c60 <udp_send+0x64>)
 8018c2e:	480b      	ldr	r0, [pc, #44]	; (8018c5c <udp_send+0x60>)
 8018c30:	f005 ff24 	bl	801ea7c <iprintf>
 8018c34:	f06f 030f 	mvn.w	r3, #15
 8018c38:	e008      	b.n	8018c4c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	1d1a      	adds	r2, r3, #4
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	8a9b      	ldrh	r3, [r3, #20]
 8018c42:	6839      	ldr	r1, [r7, #0]
 8018c44:	6878      	ldr	r0, [r7, #4]
 8018c46:	f000 f80d 	bl	8018c64 <udp_sendto>
 8018c4a:	4603      	mov	r3, r0
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	3708      	adds	r7, #8
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	08025604 	.word	0x08025604
 8018c58:	080256f8 	.word	0x080256f8
 8018c5c:	08025658 	.word	0x08025658
 8018c60:	08025710 	.word	0x08025710

08018c64 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b088      	sub	sp, #32
 8018c68:	af02      	add	r7, sp, #8
 8018c6a:	60f8      	str	r0, [r7, #12]
 8018c6c:	60b9      	str	r1, [r7, #8]
 8018c6e:	607a      	str	r2, [r7, #4]
 8018c70:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d109      	bne.n	8018c8c <udp_sendto+0x28>
 8018c78:	4b23      	ldr	r3, [pc, #140]	; (8018d08 <udp_sendto+0xa4>)
 8018c7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018c7e:	4923      	ldr	r1, [pc, #140]	; (8018d0c <udp_sendto+0xa8>)
 8018c80:	4823      	ldr	r0, [pc, #140]	; (8018d10 <udp_sendto+0xac>)
 8018c82:	f005 fefb 	bl	801ea7c <iprintf>
 8018c86:	f06f 030f 	mvn.w	r3, #15
 8018c8a:	e038      	b.n	8018cfe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018c8c:	68bb      	ldr	r3, [r7, #8]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d109      	bne.n	8018ca6 <udp_sendto+0x42>
 8018c92:	4b1d      	ldr	r3, [pc, #116]	; (8018d08 <udp_sendto+0xa4>)
 8018c94:	f240 2219 	movw	r2, #537	; 0x219
 8018c98:	491e      	ldr	r1, [pc, #120]	; (8018d14 <udp_sendto+0xb0>)
 8018c9a:	481d      	ldr	r0, [pc, #116]	; (8018d10 <udp_sendto+0xac>)
 8018c9c:	f005 feee 	bl	801ea7c <iprintf>
 8018ca0:	f06f 030f 	mvn.w	r3, #15
 8018ca4:	e02b      	b.n	8018cfe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d109      	bne.n	8018cc0 <udp_sendto+0x5c>
 8018cac:	4b16      	ldr	r3, [pc, #88]	; (8018d08 <udp_sendto+0xa4>)
 8018cae:	f240 221a 	movw	r2, #538	; 0x21a
 8018cb2:	4919      	ldr	r1, [pc, #100]	; (8018d18 <udp_sendto+0xb4>)
 8018cb4:	4816      	ldr	r0, [pc, #88]	; (8018d10 <udp_sendto+0xac>)
 8018cb6:	f005 fee1 	bl	801ea7c <iprintf>
 8018cba:	f06f 030f 	mvn.w	r3, #15
 8018cbe:	e01e      	b.n	8018cfe <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	7a1b      	ldrb	r3, [r3, #8]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d006      	beq.n	8018cd6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	7a1b      	ldrb	r3, [r3, #8]
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f7f8 fa6d 	bl	80111ac <netif_get_by_index>
 8018cd2:	6178      	str	r0, [r7, #20]
 8018cd4:	e003      	b.n	8018cde <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f003 fb50 	bl	801c37c <ip4_route>
 8018cdc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8018cde:	697b      	ldr	r3, [r7, #20]
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d102      	bne.n	8018cea <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018ce4:	f06f 0303 	mvn.w	r3, #3
 8018ce8:	e009      	b.n	8018cfe <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8018cea:	887a      	ldrh	r2, [r7, #2]
 8018cec:	697b      	ldr	r3, [r7, #20]
 8018cee:	9300      	str	r3, [sp, #0]
 8018cf0:	4613      	mov	r3, r2
 8018cf2:	687a      	ldr	r2, [r7, #4]
 8018cf4:	68b9      	ldr	r1, [r7, #8]
 8018cf6:	68f8      	ldr	r0, [r7, #12]
 8018cf8:	f000 f810 	bl	8018d1c <udp_sendto_if>
 8018cfc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018cfe:	4618      	mov	r0, r3
 8018d00:	3718      	adds	r7, #24
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd80      	pop	{r7, pc}
 8018d06:	bf00      	nop
 8018d08:	08025604 	.word	0x08025604
 8018d0c:	08025728 	.word	0x08025728
 8018d10:	08025658 	.word	0x08025658
 8018d14:	08025740 	.word	0x08025740
 8018d18:	0802575c 	.word	0x0802575c

08018d1c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b088      	sub	sp, #32
 8018d20:	af02      	add	r7, sp, #8
 8018d22:	60f8      	str	r0, [r7, #12]
 8018d24:	60b9      	str	r1, [r7, #8]
 8018d26:	607a      	str	r2, [r7, #4]
 8018d28:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d109      	bne.n	8018d44 <udp_sendto_if+0x28>
 8018d30:	4b2e      	ldr	r3, [pc, #184]	; (8018dec <udp_sendto_if+0xd0>)
 8018d32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d36:	492e      	ldr	r1, [pc, #184]	; (8018df0 <udp_sendto_if+0xd4>)
 8018d38:	482e      	ldr	r0, [pc, #184]	; (8018df4 <udp_sendto_if+0xd8>)
 8018d3a:	f005 fe9f 	bl	801ea7c <iprintf>
 8018d3e:	f06f 030f 	mvn.w	r3, #15
 8018d42:	e04f      	b.n	8018de4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018d44:	68bb      	ldr	r3, [r7, #8]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d109      	bne.n	8018d5e <udp_sendto_if+0x42>
 8018d4a:	4b28      	ldr	r3, [pc, #160]	; (8018dec <udp_sendto_if+0xd0>)
 8018d4c:	f240 2281 	movw	r2, #641	; 0x281
 8018d50:	4929      	ldr	r1, [pc, #164]	; (8018df8 <udp_sendto_if+0xdc>)
 8018d52:	4828      	ldr	r0, [pc, #160]	; (8018df4 <udp_sendto_if+0xd8>)
 8018d54:	f005 fe92 	bl	801ea7c <iprintf>
 8018d58:	f06f 030f 	mvn.w	r3, #15
 8018d5c:	e042      	b.n	8018de4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d109      	bne.n	8018d78 <udp_sendto_if+0x5c>
 8018d64:	4b21      	ldr	r3, [pc, #132]	; (8018dec <udp_sendto_if+0xd0>)
 8018d66:	f240 2282 	movw	r2, #642	; 0x282
 8018d6a:	4924      	ldr	r1, [pc, #144]	; (8018dfc <udp_sendto_if+0xe0>)
 8018d6c:	4821      	ldr	r0, [pc, #132]	; (8018df4 <udp_sendto_if+0xd8>)
 8018d6e:	f005 fe85 	bl	801ea7c <iprintf>
 8018d72:	f06f 030f 	mvn.w	r3, #15
 8018d76:	e035      	b.n	8018de4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018d78:	6a3b      	ldr	r3, [r7, #32]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d109      	bne.n	8018d92 <udp_sendto_if+0x76>
 8018d7e:	4b1b      	ldr	r3, [pc, #108]	; (8018dec <udp_sendto_if+0xd0>)
 8018d80:	f240 2283 	movw	r2, #643	; 0x283
 8018d84:	491e      	ldr	r1, [pc, #120]	; (8018e00 <udp_sendto_if+0xe4>)
 8018d86:	481b      	ldr	r0, [pc, #108]	; (8018df4 <udp_sendto_if+0xd8>)
 8018d88:	f005 fe78 	bl	801ea7c <iprintf>
 8018d8c:	f06f 030f 	mvn.w	r3, #15
 8018d90:	e028      	b.n	8018de4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d009      	beq.n	8018dac <udp_sendto_if+0x90>
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d005      	beq.n	8018dac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018da8:	2be0      	cmp	r3, #224	; 0xe0
 8018daa:	d103      	bne.n	8018db4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018dac:	6a3b      	ldr	r3, [r7, #32]
 8018dae:	3304      	adds	r3, #4
 8018db0:	617b      	str	r3, [r7, #20]
 8018db2:	e00b      	b.n	8018dcc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	681a      	ldr	r2, [r3, #0]
 8018db8:	6a3b      	ldr	r3, [r7, #32]
 8018dba:	3304      	adds	r3, #4
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	429a      	cmp	r2, r3
 8018dc0:	d002      	beq.n	8018dc8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018dc2:	f06f 0303 	mvn.w	r3, #3
 8018dc6:	e00d      	b.n	8018de4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018dcc:	887a      	ldrh	r2, [r7, #2]
 8018dce:	697b      	ldr	r3, [r7, #20]
 8018dd0:	9301      	str	r3, [sp, #4]
 8018dd2:	6a3b      	ldr	r3, [r7, #32]
 8018dd4:	9300      	str	r3, [sp, #0]
 8018dd6:	4613      	mov	r3, r2
 8018dd8:	687a      	ldr	r2, [r7, #4]
 8018dda:	68b9      	ldr	r1, [r7, #8]
 8018ddc:	68f8      	ldr	r0, [r7, #12]
 8018dde:	f000 f811 	bl	8018e04 <udp_sendto_if_src>
 8018de2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	3718      	adds	r7, #24
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}
 8018dec:	08025604 	.word	0x08025604
 8018df0:	08025778 	.word	0x08025778
 8018df4:	08025658 	.word	0x08025658
 8018df8:	08025794 	.word	0x08025794
 8018dfc:	080257b0 	.word	0x080257b0
 8018e00:	080257d0 	.word	0x080257d0

08018e04 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b08c      	sub	sp, #48	; 0x30
 8018e08:	af04      	add	r7, sp, #16
 8018e0a:	60f8      	str	r0, [r7, #12]
 8018e0c:	60b9      	str	r1, [r7, #8]
 8018e0e:	607a      	str	r2, [r7, #4]
 8018e10:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d109      	bne.n	8018e2c <udp_sendto_if_src+0x28>
 8018e18:	4b65      	ldr	r3, [pc, #404]	; (8018fb0 <udp_sendto_if_src+0x1ac>)
 8018e1a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8018e1e:	4965      	ldr	r1, [pc, #404]	; (8018fb4 <udp_sendto_if_src+0x1b0>)
 8018e20:	4865      	ldr	r0, [pc, #404]	; (8018fb8 <udp_sendto_if_src+0x1b4>)
 8018e22:	f005 fe2b 	bl	801ea7c <iprintf>
 8018e26:	f06f 030f 	mvn.w	r3, #15
 8018e2a:	e0bc      	b.n	8018fa6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018e2c:	68bb      	ldr	r3, [r7, #8]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d109      	bne.n	8018e46 <udp_sendto_if_src+0x42>
 8018e32:	4b5f      	ldr	r3, [pc, #380]	; (8018fb0 <udp_sendto_if_src+0x1ac>)
 8018e34:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018e38:	4960      	ldr	r1, [pc, #384]	; (8018fbc <udp_sendto_if_src+0x1b8>)
 8018e3a:	485f      	ldr	r0, [pc, #380]	; (8018fb8 <udp_sendto_if_src+0x1b4>)
 8018e3c:	f005 fe1e 	bl	801ea7c <iprintf>
 8018e40:	f06f 030f 	mvn.w	r3, #15
 8018e44:	e0af      	b.n	8018fa6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d109      	bne.n	8018e60 <udp_sendto_if_src+0x5c>
 8018e4c:	4b58      	ldr	r3, [pc, #352]	; (8018fb0 <udp_sendto_if_src+0x1ac>)
 8018e4e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8018e52:	495b      	ldr	r1, [pc, #364]	; (8018fc0 <udp_sendto_if_src+0x1bc>)
 8018e54:	4858      	ldr	r0, [pc, #352]	; (8018fb8 <udp_sendto_if_src+0x1b4>)
 8018e56:	f005 fe11 	bl	801ea7c <iprintf>
 8018e5a:	f06f 030f 	mvn.w	r3, #15
 8018e5e:	e0a2      	b.n	8018fa6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8018e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d109      	bne.n	8018e7a <udp_sendto_if_src+0x76>
 8018e66:	4b52      	ldr	r3, [pc, #328]	; (8018fb0 <udp_sendto_if_src+0x1ac>)
 8018e68:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8018e6c:	4955      	ldr	r1, [pc, #340]	; (8018fc4 <udp_sendto_if_src+0x1c0>)
 8018e6e:	4852      	ldr	r0, [pc, #328]	; (8018fb8 <udp_sendto_if_src+0x1b4>)
 8018e70:	f005 fe04 	bl	801ea7c <iprintf>
 8018e74:	f06f 030f 	mvn.w	r3, #15
 8018e78:	e095      	b.n	8018fa6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8018e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d109      	bne.n	8018e94 <udp_sendto_if_src+0x90>
 8018e80:	4b4b      	ldr	r3, [pc, #300]	; (8018fb0 <udp_sendto_if_src+0x1ac>)
 8018e82:	f240 22d5 	movw	r2, #725	; 0x2d5
 8018e86:	4950      	ldr	r1, [pc, #320]	; (8018fc8 <udp_sendto_if_src+0x1c4>)
 8018e88:	484b      	ldr	r0, [pc, #300]	; (8018fb8 <udp_sendto_if_src+0x1b4>)
 8018e8a:	f005 fdf7 	bl	801ea7c <iprintf>
 8018e8e:	f06f 030f 	mvn.w	r3, #15
 8018e92:	e088      	b.n	8018fa6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	8a5b      	ldrh	r3, [r3, #18]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d10f      	bne.n	8018ebc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018e9c:	68f9      	ldr	r1, [r7, #12]
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	8a5b      	ldrh	r3, [r3, #18]
 8018ea2:	461a      	mov	r2, r3
 8018ea4:	68f8      	ldr	r0, [r7, #12]
 8018ea6:	f000 f893 	bl	8018fd0 <udp_bind>
 8018eaa:	4603      	mov	r3, r0
 8018eac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8018eae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d002      	beq.n	8018ebc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018eb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018eba:	e074      	b.n	8018fa6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018ebc:	68bb      	ldr	r3, [r7, #8]
 8018ebe:	891b      	ldrh	r3, [r3, #8]
 8018ec0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018ec4:	4293      	cmp	r3, r2
 8018ec6:	d902      	bls.n	8018ece <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ecc:	e06b      	b.n	8018fa6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8018ece:	2108      	movs	r1, #8
 8018ed0:	68b8      	ldr	r0, [r7, #8]
 8018ed2:	f7f8 fc63 	bl	801179c <pbuf_add_header>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d015      	beq.n	8018f08 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018edc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018ee0:	2108      	movs	r1, #8
 8018ee2:	2022      	movs	r0, #34	; 0x22
 8018ee4:	f7f8 fa0c 	bl	8011300 <pbuf_alloc>
 8018ee8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8018eea:	69fb      	ldr	r3, [r7, #28]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d102      	bne.n	8018ef6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ef4:	e057      	b.n	8018fa6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8018ef6:	68bb      	ldr	r3, [r7, #8]
 8018ef8:	891b      	ldrh	r3, [r3, #8]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d006      	beq.n	8018f0c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8018efe:	68b9      	ldr	r1, [r7, #8]
 8018f00:	69f8      	ldr	r0, [r7, #28]
 8018f02:	f7f8 fe37 	bl	8011b74 <pbuf_chain>
 8018f06:	e001      	b.n	8018f0c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018f08:	68bb      	ldr	r3, [r7, #8]
 8018f0a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018f0c:	69fb      	ldr	r3, [r7, #28]
 8018f0e:	895b      	ldrh	r3, [r3, #10]
 8018f10:	2b07      	cmp	r3, #7
 8018f12:	d806      	bhi.n	8018f22 <udp_sendto_if_src+0x11e>
 8018f14:	4b26      	ldr	r3, [pc, #152]	; (8018fb0 <udp_sendto_if_src+0x1ac>)
 8018f16:	f240 320d 	movw	r2, #781	; 0x30d
 8018f1a:	492c      	ldr	r1, [pc, #176]	; (8018fcc <udp_sendto_if_src+0x1c8>)
 8018f1c:	4826      	ldr	r0, [pc, #152]	; (8018fb8 <udp_sendto_if_src+0x1b4>)
 8018f1e:	f005 fdad 	bl	801ea7c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018f22:	69fb      	ldr	r3, [r7, #28]
 8018f24:	685b      	ldr	r3, [r3, #4]
 8018f26:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	8a5b      	ldrh	r3, [r3, #18]
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	f7f6 f93d 	bl	800f1ac <lwip_htons>
 8018f32:	4603      	mov	r3, r0
 8018f34:	461a      	mov	r2, r3
 8018f36:	697b      	ldr	r3, [r7, #20]
 8018f38:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018f3a:	887b      	ldrh	r3, [r7, #2]
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7f6 f935 	bl	800f1ac <lwip_htons>
 8018f42:	4603      	mov	r3, r0
 8018f44:	461a      	mov	r2, r3
 8018f46:	697b      	ldr	r3, [r7, #20]
 8018f48:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	719a      	strb	r2, [r3, #6]
 8018f50:	2200      	movs	r2, #0
 8018f52:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018f54:	69fb      	ldr	r3, [r7, #28]
 8018f56:	891b      	ldrh	r3, [r3, #8]
 8018f58:	4618      	mov	r0, r3
 8018f5a:	f7f6 f927 	bl	800f1ac <lwip_htons>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	461a      	mov	r2, r3
 8018f62:	697b      	ldr	r3, [r7, #20]
 8018f64:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018f66:	2311      	movs	r3, #17
 8018f68:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	7adb      	ldrb	r3, [r3, #11]
 8018f6e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	7a9b      	ldrb	r3, [r3, #10]
 8018f74:	7cb9      	ldrb	r1, [r7, #18]
 8018f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f78:	9202      	str	r2, [sp, #8]
 8018f7a:	7cfa      	ldrb	r2, [r7, #19]
 8018f7c:	9201      	str	r2, [sp, #4]
 8018f7e:	9300      	str	r3, [sp, #0]
 8018f80:	460b      	mov	r3, r1
 8018f82:	687a      	ldr	r2, [r7, #4]
 8018f84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018f86:	69f8      	ldr	r0, [r7, #28]
 8018f88:	f003 fbfe 	bl	801c788 <ip4_output_if_src>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018f90:	69fa      	ldr	r2, [r7, #28]
 8018f92:	68bb      	ldr	r3, [r7, #8]
 8018f94:	429a      	cmp	r2, r3
 8018f96:	d004      	beq.n	8018fa2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018f98:	69f8      	ldr	r0, [r7, #28]
 8018f9a:	f7f8 fcc7 	bl	801192c <pbuf_free>
    q = NULL;
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8018fa2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	3720      	adds	r7, #32
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
 8018fae:	bf00      	nop
 8018fb0:	08025604 	.word	0x08025604
 8018fb4:	080257f0 	.word	0x080257f0
 8018fb8:	08025658 	.word	0x08025658
 8018fbc:	08025810 	.word	0x08025810
 8018fc0:	08025830 	.word	0x08025830
 8018fc4:	08025854 	.word	0x08025854
 8018fc8:	08025878 	.word	0x08025878
 8018fcc:	0802589c 	.word	0x0802589c

08018fd0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b086      	sub	sp, #24
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	60f8      	str	r0, [r7, #12]
 8018fd8:	60b9      	str	r1, [r7, #8]
 8018fda:	4613      	mov	r3, r2
 8018fdc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d101      	bne.n	8018fe8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018fe4:	4b39      	ldr	r3, [pc, #228]	; (80190cc <udp_bind+0xfc>)
 8018fe6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d109      	bne.n	8019002 <udp_bind+0x32>
 8018fee:	4b38      	ldr	r3, [pc, #224]	; (80190d0 <udp_bind+0x100>)
 8018ff0:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018ff4:	4937      	ldr	r1, [pc, #220]	; (80190d4 <udp_bind+0x104>)
 8018ff6:	4838      	ldr	r0, [pc, #224]	; (80190d8 <udp_bind+0x108>)
 8018ff8:	f005 fd40 	bl	801ea7c <iprintf>
 8018ffc:	f06f 030f 	mvn.w	r3, #15
 8019000:	e060      	b.n	80190c4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019002:	2300      	movs	r3, #0
 8019004:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019006:	4b35      	ldr	r3, [pc, #212]	; (80190dc <udp_bind+0x10c>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	617b      	str	r3, [r7, #20]
 801900c:	e009      	b.n	8019022 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801900e:	68fa      	ldr	r2, [r7, #12]
 8019010:	697b      	ldr	r3, [r7, #20]
 8019012:	429a      	cmp	r2, r3
 8019014:	d102      	bne.n	801901c <udp_bind+0x4c>
      rebind = 1;
 8019016:	2301      	movs	r3, #1
 8019018:	74fb      	strb	r3, [r7, #19]
      break;
 801901a:	e005      	b.n	8019028 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	68db      	ldr	r3, [r3, #12]
 8019020:	617b      	str	r3, [r7, #20]
 8019022:	697b      	ldr	r3, [r7, #20]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d1f2      	bne.n	801900e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019028:	88fb      	ldrh	r3, [r7, #6]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d109      	bne.n	8019042 <udp_bind+0x72>
    port = udp_new_port();
 801902e:	f7ff fc35 	bl	801889c <udp_new_port>
 8019032:	4603      	mov	r3, r0
 8019034:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019036:	88fb      	ldrh	r3, [r7, #6]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d12c      	bne.n	8019096 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801903c:	f06f 0307 	mvn.w	r3, #7
 8019040:	e040      	b.n	80190c4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019042:	4b26      	ldr	r3, [pc, #152]	; (80190dc <udp_bind+0x10c>)
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	617b      	str	r3, [r7, #20]
 8019048:	e022      	b.n	8019090 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801904a:	68fa      	ldr	r2, [r7, #12]
 801904c:	697b      	ldr	r3, [r7, #20]
 801904e:	429a      	cmp	r2, r3
 8019050:	d01b      	beq.n	801908a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019052:	697b      	ldr	r3, [r7, #20]
 8019054:	8a5b      	ldrh	r3, [r3, #18]
 8019056:	88fa      	ldrh	r2, [r7, #6]
 8019058:	429a      	cmp	r2, r3
 801905a:	d116      	bne.n	801908a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	681a      	ldr	r2, [r3, #0]
 8019060:	68bb      	ldr	r3, [r7, #8]
 8019062:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019064:	429a      	cmp	r2, r3
 8019066:	d00d      	beq.n	8019084 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019068:	68bb      	ldr	r3, [r7, #8]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d00a      	beq.n	8019084 <udp_bind+0xb4>
 801906e:	68bb      	ldr	r3, [r7, #8]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d006      	beq.n	8019084 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019076:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019078:	2b00      	cmp	r3, #0
 801907a:	d003      	beq.n	8019084 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801907c:	697b      	ldr	r3, [r7, #20]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d102      	bne.n	801908a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019084:	f06f 0307 	mvn.w	r3, #7
 8019088:	e01c      	b.n	80190c4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801908a:	697b      	ldr	r3, [r7, #20]
 801908c:	68db      	ldr	r3, [r3, #12]
 801908e:	617b      	str	r3, [r7, #20]
 8019090:	697b      	ldr	r3, [r7, #20]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d1d9      	bne.n	801904a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019096:	68bb      	ldr	r3, [r7, #8]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d002      	beq.n	80190a2 <udp_bind+0xd2>
 801909c:	68bb      	ldr	r3, [r7, #8]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	e000      	b.n	80190a4 <udp_bind+0xd4>
 80190a2:	2300      	movs	r3, #0
 80190a4:	68fa      	ldr	r2, [r7, #12]
 80190a6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	88fa      	ldrh	r2, [r7, #6]
 80190ac:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80190ae:	7cfb      	ldrb	r3, [r7, #19]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d106      	bne.n	80190c2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80190b4:	4b09      	ldr	r3, [pc, #36]	; (80190dc <udp_bind+0x10c>)
 80190b6:	681a      	ldr	r2, [r3, #0]
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80190bc:	4a07      	ldr	r2, [pc, #28]	; (80190dc <udp_bind+0x10c>)
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80190c2:	2300      	movs	r3, #0
}
 80190c4:	4618      	mov	r0, r3
 80190c6:	3718      	adds	r7, #24
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}
 80190cc:	080266c0 	.word	0x080266c0
 80190d0:	08025604 	.word	0x08025604
 80190d4:	080258cc 	.word	0x080258cc
 80190d8:	08025658 	.word	0x08025658
 80190dc:	2001b0e0 	.word	0x2001b0e0

080190e0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80190e0:	b580      	push	{r7, lr}
 80190e2:	b086      	sub	sp, #24
 80190e4:	af00      	add	r7, sp, #0
 80190e6:	60f8      	str	r0, [r7, #12]
 80190e8:	60b9      	str	r1, [r7, #8]
 80190ea:	4613      	mov	r3, r2
 80190ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d109      	bne.n	8019108 <udp_connect+0x28>
 80190f4:	4b2c      	ldr	r3, [pc, #176]	; (80191a8 <udp_connect+0xc8>)
 80190f6:	f240 4235 	movw	r2, #1077	; 0x435
 80190fa:	492c      	ldr	r1, [pc, #176]	; (80191ac <udp_connect+0xcc>)
 80190fc:	482c      	ldr	r0, [pc, #176]	; (80191b0 <udp_connect+0xd0>)
 80190fe:	f005 fcbd 	bl	801ea7c <iprintf>
 8019102:	f06f 030f 	mvn.w	r3, #15
 8019106:	e04b      	b.n	80191a0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019108:	68bb      	ldr	r3, [r7, #8]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d109      	bne.n	8019122 <udp_connect+0x42>
 801910e:	4b26      	ldr	r3, [pc, #152]	; (80191a8 <udp_connect+0xc8>)
 8019110:	f240 4236 	movw	r2, #1078	; 0x436
 8019114:	4927      	ldr	r1, [pc, #156]	; (80191b4 <udp_connect+0xd4>)
 8019116:	4826      	ldr	r0, [pc, #152]	; (80191b0 <udp_connect+0xd0>)
 8019118:	f005 fcb0 	bl	801ea7c <iprintf>
 801911c:	f06f 030f 	mvn.w	r3, #15
 8019120:	e03e      	b.n	80191a0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	8a5b      	ldrh	r3, [r3, #18]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d10f      	bne.n	801914a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801912a:	68f9      	ldr	r1, [r7, #12]
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	8a5b      	ldrh	r3, [r3, #18]
 8019130:	461a      	mov	r2, r3
 8019132:	68f8      	ldr	r0, [r7, #12]
 8019134:	f7ff ff4c 	bl	8018fd0 <udp_bind>
 8019138:	4603      	mov	r3, r0
 801913a:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 801913c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d002      	beq.n	801914a <udp_connect+0x6a>
      return err;
 8019144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019148:	e02a      	b.n	80191a0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801914a:	68bb      	ldr	r3, [r7, #8]
 801914c:	2b00      	cmp	r3, #0
 801914e:	d002      	beq.n	8019156 <udp_connect+0x76>
 8019150:	68bb      	ldr	r3, [r7, #8]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	e000      	b.n	8019158 <udp_connect+0x78>
 8019156:	2300      	movs	r3, #0
 8019158:	68fa      	ldr	r2, [r7, #12]
 801915a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	88fa      	ldrh	r2, [r7, #6]
 8019160:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	7c1b      	ldrb	r3, [r3, #16]
 8019166:	f043 0304 	orr.w	r3, r3, #4
 801916a:	b2da      	uxtb	r2, r3
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019170:	4b11      	ldr	r3, [pc, #68]	; (80191b8 <udp_connect+0xd8>)
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	613b      	str	r3, [r7, #16]
 8019176:	e008      	b.n	801918a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8019178:	68fa      	ldr	r2, [r7, #12]
 801917a:	693b      	ldr	r3, [r7, #16]
 801917c:	429a      	cmp	r2, r3
 801917e:	d101      	bne.n	8019184 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8019180:	2300      	movs	r3, #0
 8019182:	e00d      	b.n	80191a0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	68db      	ldr	r3, [r3, #12]
 8019188:	613b      	str	r3, [r7, #16]
 801918a:	693b      	ldr	r3, [r7, #16]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d1f3      	bne.n	8019178 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8019190:	4b09      	ldr	r3, [pc, #36]	; (80191b8 <udp_connect+0xd8>)
 8019192:	681a      	ldr	r2, [r3, #0]
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8019198:	4a07      	ldr	r2, [pc, #28]	; (80191b8 <udp_connect+0xd8>)
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801919e:	2300      	movs	r3, #0
}
 80191a0:	4618      	mov	r0, r3
 80191a2:	3718      	adds	r7, #24
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}
 80191a8:	08025604 	.word	0x08025604
 80191ac:	080258e4 	.word	0x080258e4
 80191b0:	08025658 	.word	0x08025658
 80191b4:	08025900 	.word	0x08025900
 80191b8:	2001b0e0 	.word	0x2001b0e0

080191bc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b082      	sub	sp, #8
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d107      	bne.n	80191da <udp_disconnect+0x1e>
 80191ca:	4b0d      	ldr	r3, [pc, #52]	; (8019200 <udp_disconnect+0x44>)
 80191cc:	f240 426a 	movw	r2, #1130	; 0x46a
 80191d0:	490c      	ldr	r1, [pc, #48]	; (8019204 <udp_disconnect+0x48>)
 80191d2:	480d      	ldr	r0, [pc, #52]	; (8019208 <udp_disconnect+0x4c>)
 80191d4:	f005 fc52 	bl	801ea7c <iprintf>
 80191d8:	e00f      	b.n	80191fa <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2200      	movs	r2, #0
 80191de:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	2200      	movs	r2, #0
 80191e4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2200      	movs	r2, #0
 80191ea:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	7c1b      	ldrb	r3, [r3, #16]
 80191f0:	f023 0304 	bic.w	r3, r3, #4
 80191f4:	b2da      	uxtb	r2, r3
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	741a      	strb	r2, [r3, #16]
}
 80191fa:	3708      	adds	r7, #8
 80191fc:	46bd      	mov	sp, r7
 80191fe:	bd80      	pop	{r7, pc}
 8019200:	08025604 	.word	0x08025604
 8019204:	0802591c 	.word	0x0802591c
 8019208:	08025658 	.word	0x08025658

0801920c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b084      	sub	sp, #16
 8019210:	af00      	add	r7, sp, #0
 8019212:	60f8      	str	r0, [r7, #12]
 8019214:	60b9      	str	r1, [r7, #8]
 8019216:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d107      	bne.n	801922e <udp_recv+0x22>
 801921e:	4b08      	ldr	r3, [pc, #32]	; (8019240 <udp_recv+0x34>)
 8019220:	f240 428a 	movw	r2, #1162	; 0x48a
 8019224:	4907      	ldr	r1, [pc, #28]	; (8019244 <udp_recv+0x38>)
 8019226:	4808      	ldr	r0, [pc, #32]	; (8019248 <udp_recv+0x3c>)
 8019228:	f005 fc28 	bl	801ea7c <iprintf>
 801922c:	e005      	b.n	801923a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	68ba      	ldr	r2, [r7, #8]
 8019232:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	687a      	ldr	r2, [r7, #4]
 8019238:	61da      	str	r2, [r3, #28]
}
 801923a:	3710      	adds	r7, #16
 801923c:	46bd      	mov	sp, r7
 801923e:	bd80      	pop	{r7, pc}
 8019240:	08025604 	.word	0x08025604
 8019244:	08025938 	.word	0x08025938
 8019248:	08025658 	.word	0x08025658

0801924c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b084      	sub	sp, #16
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d107      	bne.n	801926a <udp_remove+0x1e>
 801925a:	4b19      	ldr	r3, [pc, #100]	; (80192c0 <udp_remove+0x74>)
 801925c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019260:	4918      	ldr	r1, [pc, #96]	; (80192c4 <udp_remove+0x78>)
 8019262:	4819      	ldr	r0, [pc, #100]	; (80192c8 <udp_remove+0x7c>)
 8019264:	f005 fc0a 	bl	801ea7c <iprintf>
 8019268:	e026      	b.n	80192b8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801926a:	4b18      	ldr	r3, [pc, #96]	; (80192cc <udp_remove+0x80>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	687a      	ldr	r2, [r7, #4]
 8019270:	429a      	cmp	r2, r3
 8019272:	d105      	bne.n	8019280 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019274:	4b15      	ldr	r3, [pc, #84]	; (80192cc <udp_remove+0x80>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	68db      	ldr	r3, [r3, #12]
 801927a:	4a14      	ldr	r2, [pc, #80]	; (80192cc <udp_remove+0x80>)
 801927c:	6013      	str	r3, [r2, #0]
 801927e:	e017      	b.n	80192b0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019280:	4b12      	ldr	r3, [pc, #72]	; (80192cc <udp_remove+0x80>)
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	60fb      	str	r3, [r7, #12]
 8019286:	e010      	b.n	80192aa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	68db      	ldr	r3, [r3, #12]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d009      	beq.n	80192a4 <udp_remove+0x58>
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	68db      	ldr	r3, [r3, #12]
 8019294:	687a      	ldr	r2, [r7, #4]
 8019296:	429a      	cmp	r2, r3
 8019298:	d104      	bne.n	80192a4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	68da      	ldr	r2, [r3, #12]
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	60da      	str	r2, [r3, #12]
        break;
 80192a2:	e005      	b.n	80192b0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	68db      	ldr	r3, [r3, #12]
 80192a8:	60fb      	str	r3, [r7, #12]
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d1eb      	bne.n	8019288 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80192b0:	6879      	ldr	r1, [r7, #4]
 80192b2:	2000      	movs	r0, #0
 80192b4:	f7f7 fc58 	bl	8010b68 <memp_free>
}
 80192b8:	3710      	adds	r7, #16
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}
 80192be:	bf00      	nop
 80192c0:	08025604 	.word	0x08025604
 80192c4:	08025950 	.word	0x08025950
 80192c8:	08025658 	.word	0x08025658
 80192cc:	2001b0e0 	.word	0x2001b0e0

080192d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b082      	sub	sp, #8
 80192d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80192d6:	2000      	movs	r0, #0
 80192d8:	f7f7 fbf4 	bl	8010ac4 <memp_malloc>
 80192dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d007      	beq.n	80192f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80192e4:	2220      	movs	r2, #32
 80192e6:	2100      	movs	r1, #0
 80192e8:	6878      	ldr	r0, [r7, #4]
 80192ea:	f004 feab 	bl	801e044 <memset>
    pcb->ttl = UDP_TTL;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	22ff      	movs	r2, #255	; 0xff
 80192f2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80192f4:	687b      	ldr	r3, [r7, #4]
}
 80192f6:	4618      	mov	r0, r3
 80192f8:	3708      	adds	r7, #8
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}

080192fe <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80192fe:	b580      	push	{r7, lr}
 8019300:	b084      	sub	sp, #16
 8019302:	af00      	add	r7, sp, #0
 8019304:	4603      	mov	r3, r0
 8019306:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019308:	f7ff ffe2 	bl	80192d0 <udp_new>
 801930c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801930e:	68fb      	ldr	r3, [r7, #12]
}
 8019310:	4618      	mov	r0, r3
 8019312:	3710      	adds	r7, #16
 8019314:	46bd      	mov	sp, r7
 8019316:	bd80      	pop	{r7, pc}

08019318 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019318:	b480      	push	{r7}
 801931a:	b085      	sub	sp, #20
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
 8019320:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d01e      	beq.n	8019366 <udp_netif_ip_addr_changed+0x4e>
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d01a      	beq.n	8019366 <udp_netif_ip_addr_changed+0x4e>
 8019330:	683b      	ldr	r3, [r7, #0]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d017      	beq.n	8019366 <udp_netif_ip_addr_changed+0x4e>
 8019336:	683b      	ldr	r3, [r7, #0]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d013      	beq.n	8019366 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801933e:	4b0d      	ldr	r3, [pc, #52]	; (8019374 <udp_netif_ip_addr_changed+0x5c>)
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	60fb      	str	r3, [r7, #12]
 8019344:	e00c      	b.n	8019360 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	681a      	ldr	r2, [r3, #0]
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	429a      	cmp	r2, r3
 8019350:	d103      	bne.n	801935a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	681a      	ldr	r2, [r3, #0]
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	68db      	ldr	r3, [r3, #12]
 801935e:	60fb      	str	r3, [r7, #12]
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d1ef      	bne.n	8019346 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019366:	bf00      	nop
 8019368:	3714      	adds	r7, #20
 801936a:	46bd      	mov	sp, r7
 801936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019370:	4770      	bx	lr
 8019372:	bf00      	nop
 8019374:	2001b0e0 	.word	0x2001b0e0

08019378 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801937c:	4b20      	ldr	r3, [pc, #128]	; (8019400 <dhcp_inc_pcb_refcount+0x88>)
 801937e:	781b      	ldrb	r3, [r3, #0]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d133      	bne.n	80193ec <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8019384:	4b1f      	ldr	r3, [pc, #124]	; (8019404 <dhcp_inc_pcb_refcount+0x8c>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d005      	beq.n	8019398 <dhcp_inc_pcb_refcount+0x20>
 801938c:	4b1e      	ldr	r3, [pc, #120]	; (8019408 <dhcp_inc_pcb_refcount+0x90>)
 801938e:	22e5      	movs	r2, #229	; 0xe5
 8019390:	491e      	ldr	r1, [pc, #120]	; (801940c <dhcp_inc_pcb_refcount+0x94>)
 8019392:	481f      	ldr	r0, [pc, #124]	; (8019410 <dhcp_inc_pcb_refcount+0x98>)
 8019394:	f005 fb72 	bl	801ea7c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8019398:	f7ff ff9a 	bl	80192d0 <udp_new>
 801939c:	4603      	mov	r3, r0
 801939e:	4a19      	ldr	r2, [pc, #100]	; (8019404 <dhcp_inc_pcb_refcount+0x8c>)
 80193a0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80193a2:	4b18      	ldr	r3, [pc, #96]	; (8019404 <dhcp_inc_pcb_refcount+0x8c>)
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d102      	bne.n	80193b0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80193aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80193ae:	e024      	b.n	80193fa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80193b0:	4b14      	ldr	r3, [pc, #80]	; (8019404 <dhcp_inc_pcb_refcount+0x8c>)
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	7a5a      	ldrb	r2, [r3, #9]
 80193b6:	4b13      	ldr	r3, [pc, #76]	; (8019404 <dhcp_inc_pcb_refcount+0x8c>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	f042 0220 	orr.w	r2, r2, #32
 80193be:	b2d2      	uxtb	r2, r2
 80193c0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80193c2:	4b10      	ldr	r3, [pc, #64]	; (8019404 <dhcp_inc_pcb_refcount+0x8c>)
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	2244      	movs	r2, #68	; 0x44
 80193c8:	4912      	ldr	r1, [pc, #72]	; (8019414 <dhcp_inc_pcb_refcount+0x9c>)
 80193ca:	4618      	mov	r0, r3
 80193cc:	f7ff fe00 	bl	8018fd0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80193d0:	4b0c      	ldr	r3, [pc, #48]	; (8019404 <dhcp_inc_pcb_refcount+0x8c>)
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	2243      	movs	r2, #67	; 0x43
 80193d6:	490f      	ldr	r1, [pc, #60]	; (8019414 <dhcp_inc_pcb_refcount+0x9c>)
 80193d8:	4618      	mov	r0, r3
 80193da:	f7ff fe81 	bl	80190e0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80193de:	4b09      	ldr	r3, [pc, #36]	; (8019404 <dhcp_inc_pcb_refcount+0x8c>)
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	2200      	movs	r2, #0
 80193e4:	490c      	ldr	r1, [pc, #48]	; (8019418 <dhcp_inc_pcb_refcount+0xa0>)
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7ff ff10 	bl	801920c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80193ec:	4b04      	ldr	r3, [pc, #16]	; (8019400 <dhcp_inc_pcb_refcount+0x88>)
 80193ee:	781b      	ldrb	r3, [r3, #0]
 80193f0:	3301      	adds	r3, #1
 80193f2:	b2da      	uxtb	r2, r3
 80193f4:	4b02      	ldr	r3, [pc, #8]	; (8019400 <dhcp_inc_pcb_refcount+0x88>)
 80193f6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80193f8:	2300      	movs	r3, #0
}
 80193fa:	4618      	mov	r0, r3
 80193fc:	bd80      	pop	{r7, pc}
 80193fe:	bf00      	nop
 8019400:	200143a4 	.word	0x200143a4
 8019404:	200143a0 	.word	0x200143a0
 8019408:	08025968 	.word	0x08025968
 801940c:	080259a0 	.word	0x080259a0
 8019410:	080259c8 	.word	0x080259c8
 8019414:	080266c0 	.word	0x080266c0
 8019418:	0801ad71 	.word	0x0801ad71

0801941c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8019420:	4b0e      	ldr	r3, [pc, #56]	; (801945c <dhcp_dec_pcb_refcount+0x40>)
 8019422:	781b      	ldrb	r3, [r3, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d105      	bne.n	8019434 <dhcp_dec_pcb_refcount+0x18>
 8019428:	4b0d      	ldr	r3, [pc, #52]	; (8019460 <dhcp_dec_pcb_refcount+0x44>)
 801942a:	22ff      	movs	r2, #255	; 0xff
 801942c:	490d      	ldr	r1, [pc, #52]	; (8019464 <dhcp_dec_pcb_refcount+0x48>)
 801942e:	480e      	ldr	r0, [pc, #56]	; (8019468 <dhcp_dec_pcb_refcount+0x4c>)
 8019430:	f005 fb24 	bl	801ea7c <iprintf>
  dhcp_pcb_refcount--;
 8019434:	4b09      	ldr	r3, [pc, #36]	; (801945c <dhcp_dec_pcb_refcount+0x40>)
 8019436:	781b      	ldrb	r3, [r3, #0]
 8019438:	3b01      	subs	r3, #1
 801943a:	b2da      	uxtb	r2, r3
 801943c:	4b07      	ldr	r3, [pc, #28]	; (801945c <dhcp_dec_pcb_refcount+0x40>)
 801943e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8019440:	4b06      	ldr	r3, [pc, #24]	; (801945c <dhcp_dec_pcb_refcount+0x40>)
 8019442:	781b      	ldrb	r3, [r3, #0]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d107      	bne.n	8019458 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8019448:	4b08      	ldr	r3, [pc, #32]	; (801946c <dhcp_dec_pcb_refcount+0x50>)
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	4618      	mov	r0, r3
 801944e:	f7ff fefd 	bl	801924c <udp_remove>
    dhcp_pcb = NULL;
 8019452:	4b06      	ldr	r3, [pc, #24]	; (801946c <dhcp_dec_pcb_refcount+0x50>)
 8019454:	2200      	movs	r2, #0
 8019456:	601a      	str	r2, [r3, #0]
  }
}
 8019458:	bf00      	nop
 801945a:	bd80      	pop	{r7, pc}
 801945c:	200143a4 	.word	0x200143a4
 8019460:	08025968 	.word	0x08025968
 8019464:	080259f0 	.word	0x080259f0
 8019468:	080259c8 	.word	0x080259c8
 801946c:	200143a0 	.word	0x200143a0

08019470 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b084      	sub	sp, #16
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801947c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801947e:	210c      	movs	r1, #12
 8019480:	68f8      	ldr	r0, [r7, #12]
 8019482:	f001 f875 	bl	801a570 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019486:	4b06      	ldr	r3, [pc, #24]	; (80194a0 <dhcp_handle_nak+0x30>)
 8019488:	4a05      	ldr	r2, [pc, #20]	; (80194a0 <dhcp_handle_nak+0x30>)
 801948a:	4905      	ldr	r1, [pc, #20]	; (80194a0 <dhcp_handle_nak+0x30>)
 801948c:	6878      	ldr	r0, [r7, #4]
 801948e:	f7f7 fd0d 	bl	8010eac <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8019492:	6878      	ldr	r0, [r7, #4]
 8019494:	f000 fc68 	bl	8019d68 <dhcp_discover>
}
 8019498:	bf00      	nop
 801949a:	3710      	adds	r7, #16
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	080266c0 	.word	0x080266c0

080194a4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b084      	sub	sp, #16
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194b0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80194b2:	2108      	movs	r1, #8
 80194b4:	68f8      	ldr	r0, [r7, #12]
 80194b6:	f001 f85b 	bl	801a570 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	331c      	adds	r3, #28
 80194be:	2200      	movs	r2, #0
 80194c0:	4619      	mov	r1, r3
 80194c2:	6878      	ldr	r0, [r7, #4]
 80194c4:	f002 fbc8 	bl	801bc58 <etharp_query>
 80194c8:	4603      	mov	r3, r0
 80194ca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	799b      	ldrb	r3, [r3, #6]
 80194d0:	2bff      	cmp	r3, #255	; 0xff
 80194d2:	d005      	beq.n	80194e0 <dhcp_check+0x3c>
    dhcp->tries++;
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	799b      	ldrb	r3, [r3, #6]
 80194d8:	3301      	adds	r3, #1
 80194da:	b2da      	uxtb	r2, r3
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80194e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80194e4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80194e6:	893b      	ldrh	r3, [r7, #8]
 80194e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80194ec:	4a06      	ldr	r2, [pc, #24]	; (8019508 <dhcp_check+0x64>)
 80194ee:	fb82 1203 	smull	r1, r2, r2, r3
 80194f2:	1152      	asrs	r2, r2, #5
 80194f4:	17db      	asrs	r3, r3, #31
 80194f6:	1ad3      	subs	r3, r2, r3
 80194f8:	b29a      	uxth	r2, r3
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80194fe:	bf00      	nop
 8019500:	3710      	adds	r7, #16
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	10624dd3 	.word	0x10624dd3

0801950c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b084      	sub	sp, #16
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
 8019514:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801951a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801951c:	4b0c      	ldr	r3, [pc, #48]	; (8019550 <dhcp_handle_offer+0x44>)
 801951e:	789b      	ldrb	r3, [r3, #2]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d011      	beq.n	8019548 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	2200      	movs	r2, #0
 8019528:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801952a:	4b0a      	ldr	r3, [pc, #40]	; (8019554 <dhcp_handle_offer+0x48>)
 801952c:	689b      	ldr	r3, [r3, #8]
 801952e:	4618      	mov	r0, r3
 8019530:	f7f5 fe51 	bl	800f1d6 <lwip_htonl>
 8019534:	4602      	mov	r2, r0
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	691a      	ldr	r2, [r3, #16]
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8019542:	6878      	ldr	r0, [r7, #4]
 8019544:	f000 f808 	bl	8019558 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8019548:	bf00      	nop
 801954a:	3710      	adds	r7, #16
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}
 8019550:	2001b0e4 	.word	0x2001b0e4
 8019554:	2001b0f0 	.word	0x2001b0f0

08019558 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8019558:	b5b0      	push	{r4, r5, r7, lr}
 801955a:	b08a      	sub	sp, #40	; 0x28
 801955c:	af02      	add	r7, sp, #8
 801955e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d109      	bne.n	801957a <dhcp_select+0x22>
 8019566:	4b71      	ldr	r3, [pc, #452]	; (801972c <dhcp_select+0x1d4>)
 8019568:	f240 1277 	movw	r2, #375	; 0x177
 801956c:	4970      	ldr	r1, [pc, #448]	; (8019730 <dhcp_select+0x1d8>)
 801956e:	4871      	ldr	r0, [pc, #452]	; (8019734 <dhcp_select+0x1dc>)
 8019570:	f005 fa84 	bl	801ea7c <iprintf>
 8019574:	f06f 030f 	mvn.w	r3, #15
 8019578:	e0d3      	b.n	8019722 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801957e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019580:	69bb      	ldr	r3, [r7, #24]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d109      	bne.n	801959a <dhcp_select+0x42>
 8019586:	4b69      	ldr	r3, [pc, #420]	; (801972c <dhcp_select+0x1d4>)
 8019588:	f240 1279 	movw	r2, #377	; 0x179
 801958c:	496a      	ldr	r1, [pc, #424]	; (8019738 <dhcp_select+0x1e0>)
 801958e:	4869      	ldr	r0, [pc, #420]	; (8019734 <dhcp_select+0x1dc>)
 8019590:	f005 fa74 	bl	801ea7c <iprintf>
 8019594:	f06f 0305 	mvn.w	r3, #5
 8019598:	e0c3      	b.n	8019722 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801959a:	2101      	movs	r1, #1
 801959c:	69b8      	ldr	r0, [r7, #24]
 801959e:	f000 ffe7 	bl	801a570 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80195a2:	f107 030c 	add.w	r3, r7, #12
 80195a6:	2203      	movs	r2, #3
 80195a8:	69b9      	ldr	r1, [r7, #24]
 80195aa:	6878      	ldr	r0, [r7, #4]
 80195ac:	f001 fcaa 	bl	801af04 <dhcp_create_msg>
 80195b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80195b2:	697b      	ldr	r3, [r7, #20]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	f000 8085 	beq.w	80196c4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80195ba:	697b      	ldr	r3, [r7, #20]
 80195bc:	685b      	ldr	r3, [r3, #4]
 80195be:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80195c0:	89b8      	ldrh	r0, [r7, #12]
 80195c2:	693b      	ldr	r3, [r7, #16]
 80195c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80195c8:	2302      	movs	r3, #2
 80195ca:	2239      	movs	r2, #57	; 0x39
 80195cc:	f000 ffea 	bl	801a5a4 <dhcp_option>
 80195d0:	4603      	mov	r3, r0
 80195d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80195d4:	89b8      	ldrh	r0, [r7, #12]
 80195d6:	693b      	ldr	r3, [r7, #16]
 80195d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80195e0:	461a      	mov	r2, r3
 80195e2:	f001 f839 	bl	801a658 <dhcp_option_short>
 80195e6:	4603      	mov	r3, r0
 80195e8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80195ea:	89b8      	ldrh	r0, [r7, #12]
 80195ec:	693b      	ldr	r3, [r7, #16]
 80195ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80195f2:	2304      	movs	r3, #4
 80195f4:	2232      	movs	r2, #50	; 0x32
 80195f6:	f000 ffd5 	bl	801a5a4 <dhcp_option>
 80195fa:	4603      	mov	r3, r0
 80195fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80195fe:	89bc      	ldrh	r4, [r7, #12]
 8019600:	693b      	ldr	r3, [r7, #16]
 8019602:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019606:	69bb      	ldr	r3, [r7, #24]
 8019608:	69db      	ldr	r3, [r3, #28]
 801960a:	4618      	mov	r0, r3
 801960c:	f7f5 fde3 	bl	800f1d6 <lwip_htonl>
 8019610:	4603      	mov	r3, r0
 8019612:	461a      	mov	r2, r3
 8019614:	4629      	mov	r1, r5
 8019616:	4620      	mov	r0, r4
 8019618:	f001 f850 	bl	801a6bc <dhcp_option_long>
 801961c:	4603      	mov	r3, r0
 801961e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019620:	89b8      	ldrh	r0, [r7, #12]
 8019622:	693b      	ldr	r3, [r7, #16]
 8019624:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019628:	2304      	movs	r3, #4
 801962a:	2236      	movs	r2, #54	; 0x36
 801962c:	f000 ffba 	bl	801a5a4 <dhcp_option>
 8019630:	4603      	mov	r3, r0
 8019632:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8019634:	89bc      	ldrh	r4, [r7, #12]
 8019636:	693b      	ldr	r3, [r7, #16]
 8019638:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801963c:	69bb      	ldr	r3, [r7, #24]
 801963e:	699b      	ldr	r3, [r3, #24]
 8019640:	4618      	mov	r0, r3
 8019642:	f7f5 fdc8 	bl	800f1d6 <lwip_htonl>
 8019646:	4603      	mov	r3, r0
 8019648:	461a      	mov	r2, r3
 801964a:	4629      	mov	r1, r5
 801964c:	4620      	mov	r0, r4
 801964e:	f001 f835 	bl	801a6bc <dhcp_option_long>
 8019652:	4603      	mov	r3, r0
 8019654:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019656:	89b8      	ldrh	r0, [r7, #12]
 8019658:	693b      	ldr	r3, [r7, #16]
 801965a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801965e:	2304      	movs	r3, #4
 8019660:	2237      	movs	r2, #55	; 0x37
 8019662:	f000 ff9f 	bl	801a5a4 <dhcp_option>
 8019666:	4603      	mov	r3, r0
 8019668:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801966a:	2300      	movs	r3, #0
 801966c:	77fb      	strb	r3, [r7, #31]
 801966e:	e00e      	b.n	801968e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019670:	89b8      	ldrh	r0, [r7, #12]
 8019672:	693b      	ldr	r3, [r7, #16]
 8019674:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019678:	7ffb      	ldrb	r3, [r7, #31]
 801967a:	4a30      	ldr	r2, [pc, #192]	; (801973c <dhcp_select+0x1e4>)
 801967c:	5cd3      	ldrb	r3, [r2, r3]
 801967e:	461a      	mov	r2, r3
 8019680:	f000 ffc4 	bl	801a60c <dhcp_option_byte>
 8019684:	4603      	mov	r3, r0
 8019686:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019688:	7ffb      	ldrb	r3, [r7, #31]
 801968a:	3301      	adds	r3, #1
 801968c:	77fb      	strb	r3, [r7, #31]
 801968e:	7ffb      	ldrb	r3, [r7, #31]
 8019690:	2b03      	cmp	r3, #3
 8019692:	d9ed      	bls.n	8019670 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019694:	89b8      	ldrh	r0, [r7, #12]
 8019696:	693b      	ldr	r3, [r7, #16]
 8019698:	33f0      	adds	r3, #240	; 0xf0
 801969a:	697a      	ldr	r2, [r7, #20]
 801969c:	4619      	mov	r1, r3
 801969e:	f001 fd07 	bl	801b0b0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80196a2:	4b27      	ldr	r3, [pc, #156]	; (8019740 <dhcp_select+0x1e8>)
 80196a4:	6818      	ldr	r0, [r3, #0]
 80196a6:	4b27      	ldr	r3, [pc, #156]	; (8019744 <dhcp_select+0x1ec>)
 80196a8:	9301      	str	r3, [sp, #4]
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	9300      	str	r3, [sp, #0]
 80196ae:	2343      	movs	r3, #67	; 0x43
 80196b0:	4a25      	ldr	r2, [pc, #148]	; (8019748 <dhcp_select+0x1f0>)
 80196b2:	6979      	ldr	r1, [r7, #20]
 80196b4:	f7ff fba6 	bl	8018e04 <udp_sendto_if_src>
 80196b8:	4603      	mov	r3, r0
 80196ba:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 80196bc:	6978      	ldr	r0, [r7, #20]
 80196be:	f7f8 f935 	bl	801192c <pbuf_free>
 80196c2:	e001      	b.n	80196c8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80196c4:	23ff      	movs	r3, #255	; 0xff
 80196c6:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 80196c8:	69bb      	ldr	r3, [r7, #24]
 80196ca:	799b      	ldrb	r3, [r3, #6]
 80196cc:	2bff      	cmp	r3, #255	; 0xff
 80196ce:	d005      	beq.n	80196dc <dhcp_select+0x184>
    dhcp->tries++;
 80196d0:	69bb      	ldr	r3, [r7, #24]
 80196d2:	799b      	ldrb	r3, [r3, #6]
 80196d4:	3301      	adds	r3, #1
 80196d6:	b2da      	uxtb	r2, r3
 80196d8:	69bb      	ldr	r3, [r7, #24]
 80196da:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80196dc:	69bb      	ldr	r3, [r7, #24]
 80196de:	799b      	ldrb	r3, [r3, #6]
 80196e0:	2b05      	cmp	r3, #5
 80196e2:	d80d      	bhi.n	8019700 <dhcp_select+0x1a8>
 80196e4:	69bb      	ldr	r3, [r7, #24]
 80196e6:	799b      	ldrb	r3, [r3, #6]
 80196e8:	461a      	mov	r2, r3
 80196ea:	2301      	movs	r3, #1
 80196ec:	4093      	lsls	r3, r2
 80196ee:	b29b      	uxth	r3, r3
 80196f0:	461a      	mov	r2, r3
 80196f2:	0152      	lsls	r2, r2, #5
 80196f4:	1ad2      	subs	r2, r2, r3
 80196f6:	0092      	lsls	r2, r2, #2
 80196f8:	4413      	add	r3, r2
 80196fa:	00db      	lsls	r3, r3, #3
 80196fc:	b29b      	uxth	r3, r3
 80196fe:	e001      	b.n	8019704 <dhcp_select+0x1ac>
 8019700:	f64e 2360 	movw	r3, #60000	; 0xea60
 8019704:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019706:	89fb      	ldrh	r3, [r7, #14]
 8019708:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801970c:	4a0f      	ldr	r2, [pc, #60]	; (801974c <dhcp_select+0x1f4>)
 801970e:	fb82 1203 	smull	r1, r2, r2, r3
 8019712:	1152      	asrs	r2, r2, #5
 8019714:	17db      	asrs	r3, r3, #31
 8019716:	1ad3      	subs	r3, r2, r3
 8019718:	b29a      	uxth	r2, r3
 801971a:	69bb      	ldr	r3, [r7, #24]
 801971c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801971e:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8019722:	4618      	mov	r0, r3
 8019724:	3720      	adds	r7, #32
 8019726:	46bd      	mov	sp, r7
 8019728:	bdb0      	pop	{r4, r5, r7, pc}
 801972a:	bf00      	nop
 801972c:	08025968 	.word	0x08025968
 8019730:	08025a14 	.word	0x08025a14
 8019734:	080259c8 	.word	0x080259c8
 8019738:	08025a30 	.word	0x08025a30
 801973c:	20000060 	.word	0x20000060
 8019740:	200143a0 	.word	0x200143a0
 8019744:	080266c0 	.word	0x080266c0
 8019748:	080266c4 	.word	0x080266c4
 801974c:	10624dd3 	.word	0x10624dd3

08019750 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b082      	sub	sp, #8
 8019754:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8019756:	4b27      	ldr	r3, [pc, #156]	; (80197f4 <dhcp_coarse_tmr+0xa4>)
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	607b      	str	r3, [r7, #4]
 801975c:	e042      	b.n	80197e4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019762:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8019764:	683b      	ldr	r3, [r7, #0]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d039      	beq.n	80197de <dhcp_coarse_tmr+0x8e>
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	795b      	ldrb	r3, [r3, #5]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d035      	beq.n	80197de <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8019772:	683b      	ldr	r3, [r7, #0]
 8019774:	8a9b      	ldrh	r3, [r3, #20]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d012      	beq.n	80197a0 <dhcp_coarse_tmr+0x50>
 801977a:	683b      	ldr	r3, [r7, #0]
 801977c:	8a5b      	ldrh	r3, [r3, #18]
 801977e:	3301      	adds	r3, #1
 8019780:	b29a      	uxth	r2, r3
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	825a      	strh	r2, [r3, #18]
 8019786:	683b      	ldr	r3, [r7, #0]
 8019788:	8a5a      	ldrh	r2, [r3, #18]
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	8a9b      	ldrh	r3, [r3, #20]
 801978e:	429a      	cmp	r2, r3
 8019790:	d106      	bne.n	80197a0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8019792:	6878      	ldr	r0, [r7, #4]
 8019794:	f000 fe52 	bl	801a43c <dhcp_release_and_stop>
        dhcp_start(netif);
 8019798:	6878      	ldr	r0, [r7, #4]
 801979a:	f000 f989 	bl	8019ab0 <dhcp_start>
 801979e:	e01e      	b.n	80197de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80197a0:	683b      	ldr	r3, [r7, #0]
 80197a2:	8a1b      	ldrh	r3, [r3, #16]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d00b      	beq.n	80197c0 <dhcp_coarse_tmr+0x70>
 80197a8:	683b      	ldr	r3, [r7, #0]
 80197aa:	8a1b      	ldrh	r3, [r3, #16]
 80197ac:	1e5a      	subs	r2, r3, #1
 80197ae:	b291      	uxth	r1, r2
 80197b0:	683a      	ldr	r2, [r7, #0]
 80197b2:	8211      	strh	r1, [r2, #16]
 80197b4:	2b01      	cmp	r3, #1
 80197b6:	d103      	bne.n	80197c0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80197b8:	6878      	ldr	r0, [r7, #4]
 80197ba:	f000 f8c6 	bl	801994a <dhcp_t2_timeout>
 80197be:	e00e      	b.n	80197de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80197c0:	683b      	ldr	r3, [r7, #0]
 80197c2:	89db      	ldrh	r3, [r3, #14]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d00a      	beq.n	80197de <dhcp_coarse_tmr+0x8e>
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	89db      	ldrh	r3, [r3, #14]
 80197cc:	1e5a      	subs	r2, r3, #1
 80197ce:	b291      	uxth	r1, r2
 80197d0:	683a      	ldr	r2, [r7, #0]
 80197d2:	81d1      	strh	r1, [r2, #14]
 80197d4:	2b01      	cmp	r3, #1
 80197d6:	d102      	bne.n	80197de <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80197d8:	6878      	ldr	r0, [r7, #4]
 80197da:	f000 f888 	bl	80198ee <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	607b      	str	r3, [r7, #4]
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d1b9      	bne.n	801975e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80197ea:	bf00      	nop
 80197ec:	bf00      	nop
 80197ee:	3708      	adds	r7, #8
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd80      	pop	{r7, pc}
 80197f4:	2001b0b8 	.word	0x2001b0b8

080197f8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80197f8:	b580      	push	{r7, lr}
 80197fa:	b082      	sub	sp, #8
 80197fc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80197fe:	4b16      	ldr	r3, [pc, #88]	; (8019858 <dhcp_fine_tmr+0x60>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	607b      	str	r3, [r7, #4]
 8019804:	e020      	b.n	8019848 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801980a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d017      	beq.n	8019842 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8019812:	683b      	ldr	r3, [r7, #0]
 8019814:	891b      	ldrh	r3, [r3, #8]
 8019816:	2b01      	cmp	r3, #1
 8019818:	d906      	bls.n	8019828 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	891b      	ldrh	r3, [r3, #8]
 801981e:	3b01      	subs	r3, #1
 8019820:	b29a      	uxth	r2, r3
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	811a      	strh	r2, [r3, #8]
 8019826:	e00c      	b.n	8019842 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	891b      	ldrh	r3, [r3, #8]
 801982c:	2b01      	cmp	r3, #1
 801982e:	d108      	bne.n	8019842 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	891b      	ldrh	r3, [r3, #8]
 8019834:	3b01      	subs	r3, #1
 8019836:	b29a      	uxth	r2, r3
 8019838:	683b      	ldr	r3, [r7, #0]
 801983a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801983c:	6878      	ldr	r0, [r7, #4]
 801983e:	f000 f80d 	bl	801985c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	607b      	str	r3, [r7, #4]
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d1db      	bne.n	8019806 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801984e:	bf00      	nop
 8019850:	bf00      	nop
 8019852:	3708      	adds	r7, #8
 8019854:	46bd      	mov	sp, r7
 8019856:	bd80      	pop	{r7, pc}
 8019858:	2001b0b8 	.word	0x2001b0b8

0801985c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b084      	sub	sp, #16
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019868:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	795b      	ldrb	r3, [r3, #5]
 801986e:	2b0c      	cmp	r3, #12
 8019870:	d003      	beq.n	801987a <dhcp_timeout+0x1e>
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	795b      	ldrb	r3, [r3, #5]
 8019876:	2b06      	cmp	r3, #6
 8019878:	d103      	bne.n	8019882 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801987a:	6878      	ldr	r0, [r7, #4]
 801987c:	f000 fa74 	bl	8019d68 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8019880:	e031      	b.n	80198e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019882:	68fb      	ldr	r3, [r7, #12]
 8019884:	795b      	ldrb	r3, [r3, #5]
 8019886:	2b01      	cmp	r3, #1
 8019888:	d10e      	bne.n	80198a8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	799b      	ldrb	r3, [r3, #6]
 801988e:	2b05      	cmp	r3, #5
 8019890:	d803      	bhi.n	801989a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8019892:	6878      	ldr	r0, [r7, #4]
 8019894:	f7ff fe60 	bl	8019558 <dhcp_select>
}
 8019898:	e025      	b.n	80198e6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801989a:	6878      	ldr	r0, [r7, #4]
 801989c:	f000 fdce 	bl	801a43c <dhcp_release_and_stop>
      dhcp_start(netif);
 80198a0:	6878      	ldr	r0, [r7, #4]
 80198a2:	f000 f905 	bl	8019ab0 <dhcp_start>
}
 80198a6:	e01e      	b.n	80198e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	795b      	ldrb	r3, [r3, #5]
 80198ac:	2b08      	cmp	r3, #8
 80198ae:	d10b      	bne.n	80198c8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	799b      	ldrb	r3, [r3, #6]
 80198b4:	2b01      	cmp	r3, #1
 80198b6:	d803      	bhi.n	80198c0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80198b8:	6878      	ldr	r0, [r7, #4]
 80198ba:	f7ff fdf3 	bl	80194a4 <dhcp_check>
}
 80198be:	e012      	b.n	80198e6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f000 faf3 	bl	8019eac <dhcp_bind>
}
 80198c6:	e00e      	b.n	80198e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	795b      	ldrb	r3, [r3, #5]
 80198cc:	2b03      	cmp	r3, #3
 80198ce:	d10a      	bne.n	80198e6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	799b      	ldrb	r3, [r3, #6]
 80198d4:	2b01      	cmp	r3, #1
 80198d6:	d803      	bhi.n	80198e0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f000 fcf9 	bl	801a2d0 <dhcp_reboot>
}
 80198de:	e002      	b.n	80198e6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f000 fa41 	bl	8019d68 <dhcp_discover>
}
 80198e6:	bf00      	nop
 80198e8:	3710      	adds	r7, #16
 80198ea:	46bd      	mov	sp, r7
 80198ec:	bd80      	pop	{r7, pc}

080198ee <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80198ee:	b580      	push	{r7, lr}
 80198f0:	b084      	sub	sp, #16
 80198f2:	af00      	add	r7, sp, #0
 80198f4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	795b      	ldrb	r3, [r3, #5]
 8019900:	2b01      	cmp	r3, #1
 8019902:	d007      	beq.n	8019914 <dhcp_t1_timeout+0x26>
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	795b      	ldrb	r3, [r3, #5]
 8019908:	2b0a      	cmp	r3, #10
 801990a:	d003      	beq.n	8019914 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019910:	2b05      	cmp	r3, #5
 8019912:	d116      	bne.n	8019942 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f000 fba3 	bl	801a060 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	899b      	ldrh	r3, [r3, #12]
 801991e:	461a      	mov	r2, r3
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	8a5b      	ldrh	r3, [r3, #18]
 8019924:	1ad3      	subs	r3, r2, r3
 8019926:	2b01      	cmp	r3, #1
 8019928:	dd0b      	ble.n	8019942 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	899b      	ldrh	r3, [r3, #12]
 801992e:	461a      	mov	r2, r3
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	8a5b      	ldrh	r3, [r3, #18]
 8019934:	1ad3      	subs	r3, r2, r3
 8019936:	0fda      	lsrs	r2, r3, #31
 8019938:	4413      	add	r3, r2
 801993a:	105b      	asrs	r3, r3, #1
 801993c:	b29a      	uxth	r2, r3
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8019942:	bf00      	nop
 8019944:	3710      	adds	r7, #16
 8019946:	46bd      	mov	sp, r7
 8019948:	bd80      	pop	{r7, pc}

0801994a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801994a:	b580      	push	{r7, lr}
 801994c:	b084      	sub	sp, #16
 801994e:	af00      	add	r7, sp, #0
 8019950:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019956:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	795b      	ldrb	r3, [r3, #5]
 801995c:	2b01      	cmp	r3, #1
 801995e:	d00b      	beq.n	8019978 <dhcp_t2_timeout+0x2e>
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	795b      	ldrb	r3, [r3, #5]
 8019964:	2b0a      	cmp	r3, #10
 8019966:	d007      	beq.n	8019978 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801996c:	2b05      	cmp	r3, #5
 801996e:	d003      	beq.n	8019978 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	795b      	ldrb	r3, [r3, #5]
 8019974:	2b04      	cmp	r3, #4
 8019976:	d116      	bne.n	80199a6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8019978:	6878      	ldr	r0, [r7, #4]
 801997a:	f000 fc0d 	bl	801a198 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	8a9b      	ldrh	r3, [r3, #20]
 8019982:	461a      	mov	r2, r3
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	8a5b      	ldrh	r3, [r3, #18]
 8019988:	1ad3      	subs	r3, r2, r3
 801998a:	2b01      	cmp	r3, #1
 801998c:	dd0b      	ble.n	80199a6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	8a9b      	ldrh	r3, [r3, #20]
 8019992:	461a      	mov	r2, r3
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	8a5b      	ldrh	r3, [r3, #18]
 8019998:	1ad3      	subs	r3, r2, r3
 801999a:	0fda      	lsrs	r2, r3, #31
 801999c:	4413      	add	r3, r2
 801999e:	105b      	asrs	r3, r3, #1
 80199a0:	b29a      	uxth	r2, r3
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80199a6:	bf00      	nop
 80199a8:	3710      	adds	r7, #16
 80199aa:	46bd      	mov	sp, r7
 80199ac:	bd80      	pop	{r7, pc}
	...

080199b0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b086      	sub	sp, #24
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199be:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80199c0:	693b      	ldr	r3, [r7, #16]
 80199c2:	2200      	movs	r2, #0
 80199c4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80199c6:	693b      	ldr	r3, [r7, #16]
 80199c8:	2200      	movs	r2, #0
 80199ca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80199cc:	4b36      	ldr	r3, [pc, #216]	; (8019aa8 <dhcp_handle_ack+0xf8>)
 80199ce:	78db      	ldrb	r3, [r3, #3]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d003      	beq.n	80199dc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80199d4:	4b35      	ldr	r3, [pc, #212]	; (8019aac <dhcp_handle_ack+0xfc>)
 80199d6:	68da      	ldr	r2, [r3, #12]
 80199d8:	693b      	ldr	r3, [r7, #16]
 80199da:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80199dc:	4b32      	ldr	r3, [pc, #200]	; (8019aa8 <dhcp_handle_ack+0xf8>)
 80199de:	791b      	ldrb	r3, [r3, #4]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d004      	beq.n	80199ee <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80199e4:	4b31      	ldr	r3, [pc, #196]	; (8019aac <dhcp_handle_ack+0xfc>)
 80199e6:	691a      	ldr	r2, [r3, #16]
 80199e8:	693b      	ldr	r3, [r7, #16]
 80199ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80199ec:	e004      	b.n	80199f8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80199ee:	693b      	ldr	r3, [r7, #16]
 80199f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199f2:	085a      	lsrs	r2, r3, #1
 80199f4:	693b      	ldr	r3, [r7, #16]
 80199f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80199f8:	4b2b      	ldr	r3, [pc, #172]	; (8019aa8 <dhcp_handle_ack+0xf8>)
 80199fa:	795b      	ldrb	r3, [r3, #5]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d004      	beq.n	8019a0a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8019a00:	4b2a      	ldr	r3, [pc, #168]	; (8019aac <dhcp_handle_ack+0xfc>)
 8019a02:	695a      	ldr	r2, [r3, #20]
 8019a04:	693b      	ldr	r3, [r7, #16]
 8019a06:	631a      	str	r2, [r3, #48]	; 0x30
 8019a08:	e007      	b.n	8019a1a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8019a0a:	693b      	ldr	r3, [r7, #16]
 8019a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019a0e:	4613      	mov	r3, r2
 8019a10:	00db      	lsls	r3, r3, #3
 8019a12:	1a9b      	subs	r3, r3, r2
 8019a14:	08da      	lsrs	r2, r3, #3
 8019a16:	693b      	ldr	r3, [r7, #16]
 8019a18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019a1a:	683b      	ldr	r3, [r7, #0]
 8019a1c:	691a      	ldr	r2, [r3, #16]
 8019a1e:	693b      	ldr	r3, [r7, #16]
 8019a20:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8019a22:	4b21      	ldr	r3, [pc, #132]	; (8019aa8 <dhcp_handle_ack+0xf8>)
 8019a24:	799b      	ldrb	r3, [r3, #6]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d00b      	beq.n	8019a42 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8019a2a:	4b20      	ldr	r3, [pc, #128]	; (8019aac <dhcp_handle_ack+0xfc>)
 8019a2c:	699b      	ldr	r3, [r3, #24]
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7f5 fbd1 	bl	800f1d6 <lwip_htonl>
 8019a34:	4602      	mov	r2, r0
 8019a36:	693b      	ldr	r3, [r7, #16]
 8019a38:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	2201      	movs	r2, #1
 8019a3e:	71da      	strb	r2, [r3, #7]
 8019a40:	e002      	b.n	8019a48 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8019a42:	693b      	ldr	r3, [r7, #16]
 8019a44:	2200      	movs	r2, #0
 8019a46:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8019a48:	4b17      	ldr	r3, [pc, #92]	; (8019aa8 <dhcp_handle_ack+0xf8>)
 8019a4a:	79db      	ldrb	r3, [r3, #7]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d007      	beq.n	8019a60 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8019a50:	4b16      	ldr	r3, [pc, #88]	; (8019aac <dhcp_handle_ack+0xfc>)
 8019a52:	69db      	ldr	r3, [r3, #28]
 8019a54:	4618      	mov	r0, r3
 8019a56:	f7f5 fbbe 	bl	800f1d6 <lwip_htonl>
 8019a5a:	4602      	mov	r2, r0
 8019a5c:	693b      	ldr	r3, [r7, #16]
 8019a5e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019a60:	2300      	movs	r3, #0
 8019a62:	75fb      	strb	r3, [r7, #23]
 8019a64:	e013      	b.n	8019a8e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8019a66:	7dfb      	ldrb	r3, [r7, #23]
 8019a68:	3308      	adds	r3, #8
 8019a6a:	4a10      	ldr	r2, [pc, #64]	; (8019aac <dhcp_handle_ack+0xfc>)
 8019a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7f5 fbb0 	bl	800f1d6 <lwip_htonl>
 8019a76:	4603      	mov	r3, r0
 8019a78:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8019a7a:	f107 020c 	add.w	r2, r7, #12
 8019a7e:	7dfb      	ldrb	r3, [r7, #23]
 8019a80:	4611      	mov	r1, r2
 8019a82:	4618      	mov	r0, r3
 8019a84:	f7f5 fc02 	bl	800f28c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019a88:	7dfb      	ldrb	r3, [r7, #23]
 8019a8a:	3301      	adds	r3, #1
 8019a8c:	75fb      	strb	r3, [r7, #23]
 8019a8e:	7dfb      	ldrb	r3, [r7, #23]
 8019a90:	2b01      	cmp	r3, #1
 8019a92:	d805      	bhi.n	8019aa0 <dhcp_handle_ack+0xf0>
 8019a94:	7dfb      	ldrb	r3, [r7, #23]
 8019a96:	3308      	adds	r3, #8
 8019a98:	4a03      	ldr	r2, [pc, #12]	; (8019aa8 <dhcp_handle_ack+0xf8>)
 8019a9a:	5cd3      	ldrb	r3, [r2, r3]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d1e2      	bne.n	8019a66 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8019aa0:	bf00      	nop
 8019aa2:	3718      	adds	r7, #24
 8019aa4:	46bd      	mov	sp, r7
 8019aa6:	bd80      	pop	{r7, pc}
 8019aa8:	2001b0e4 	.word	0x2001b0e4
 8019aac:	2001b0f0 	.word	0x2001b0f0

08019ab0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b084      	sub	sp, #16
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d109      	bne.n	8019ad2 <dhcp_start+0x22>
 8019abe:	4b37      	ldr	r3, [pc, #220]	; (8019b9c <dhcp_start+0xec>)
 8019ac0:	f240 22e7 	movw	r2, #743	; 0x2e7
 8019ac4:	4936      	ldr	r1, [pc, #216]	; (8019ba0 <dhcp_start+0xf0>)
 8019ac6:	4837      	ldr	r0, [pc, #220]	; (8019ba4 <dhcp_start+0xf4>)
 8019ac8:	f004 ffd8 	bl	801ea7c <iprintf>
 8019acc:	f06f 030f 	mvn.w	r3, #15
 8019ad0:	e060      	b.n	8019b94 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019ad8:	f003 0301 	and.w	r3, r3, #1
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d109      	bne.n	8019af4 <dhcp_start+0x44>
 8019ae0:	4b2e      	ldr	r3, [pc, #184]	; (8019b9c <dhcp_start+0xec>)
 8019ae2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8019ae6:	4930      	ldr	r1, [pc, #192]	; (8019ba8 <dhcp_start+0xf8>)
 8019ae8:	482e      	ldr	r0, [pc, #184]	; (8019ba4 <dhcp_start+0xf4>)
 8019aea:	f004 ffc7 	bl	801ea7c <iprintf>
 8019aee:	f06f 030f 	mvn.w	r3, #15
 8019af2:	e04f      	b.n	8019b94 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019af8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019afe:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8019b02:	d202      	bcs.n	8019b0a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8019b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b08:	e044      	b.n	8019b94 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d10d      	bne.n	8019b2c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8019b10:	2034      	movs	r0, #52	; 0x34
 8019b12:	f7f6 fe55 	bl	80107c0 <mem_malloc>
 8019b16:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d102      	bne.n	8019b24 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8019b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b22:	e037      	b.n	8019b94 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	68fa      	ldr	r2, [r7, #12]
 8019b28:	625a      	str	r2, [r3, #36]	; 0x24
 8019b2a:	e005      	b.n	8019b38 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	791b      	ldrb	r3, [r3, #4]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d001      	beq.n	8019b38 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019b34:	f7ff fc72 	bl	801941c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8019b38:	2234      	movs	r2, #52	; 0x34
 8019b3a:	2100      	movs	r1, #0
 8019b3c:	68f8      	ldr	r0, [r7, #12]
 8019b3e:	f004 fa81 	bl	801e044 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8019b42:	f7ff fc19 	bl	8019378 <dhcp_inc_pcb_refcount>
 8019b46:	4603      	mov	r3, r0
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d002      	beq.n	8019b52 <dhcp_start+0xa2>
    return ERR_MEM;
 8019b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b50:	e020      	b.n	8019b94 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	2201      	movs	r2, #1
 8019b56:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019b5e:	f003 0304 	and.w	r3, r3, #4
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d105      	bne.n	8019b72 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8019b66:	2102      	movs	r1, #2
 8019b68:	68f8      	ldr	r0, [r7, #12]
 8019b6a:	f000 fd01 	bl	801a570 <dhcp_set_state>
    return ERR_OK;
 8019b6e:	2300      	movs	r3, #0
 8019b70:	e010      	b.n	8019b94 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8019b72:	6878      	ldr	r0, [r7, #4]
 8019b74:	f000 f8f8 	bl	8019d68 <dhcp_discover>
 8019b78:	4603      	mov	r3, r0
 8019b7a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8019b7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d005      	beq.n	8019b90 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8019b84:	6878      	ldr	r0, [r7, #4]
 8019b86:	f000 fc59 	bl	801a43c <dhcp_release_and_stop>
    return ERR_MEM;
 8019b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b8e:	e001      	b.n	8019b94 <dhcp_start+0xe4>
  }
  return result;
 8019b90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	3710      	adds	r7, #16
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}
 8019b9c:	08025968 	.word	0x08025968
 8019ba0:	08025a4c 	.word	0x08025a4c
 8019ba4:	080259c8 	.word	0x080259c8
 8019ba8:	08025a90 	.word	0x08025a90

08019bac <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b084      	sub	sp, #16
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bb8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d025      	beq.n	8019c0c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	795b      	ldrb	r3, [r3, #5]
 8019bc4:	2b0a      	cmp	r3, #10
 8019bc6:	d008      	beq.n	8019bda <dhcp_network_changed+0x2e>
 8019bc8:	2b0a      	cmp	r3, #10
 8019bca:	dc0d      	bgt.n	8019be8 <dhcp_network_changed+0x3c>
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d01f      	beq.n	8019c10 <dhcp_network_changed+0x64>
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	db09      	blt.n	8019be8 <dhcp_network_changed+0x3c>
 8019bd4:	3b03      	subs	r3, #3
 8019bd6:	2b02      	cmp	r3, #2
 8019bd8:	d806      	bhi.n	8019be8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	2200      	movs	r2, #0
 8019bde:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8019be0:	6878      	ldr	r0, [r7, #4]
 8019be2:	f000 fb75 	bl	801a2d0 <dhcp_reboot>
      break;
 8019be6:	e014      	b.n	8019c12 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	795b      	ldrb	r3, [r3, #5]
 8019bec:	2b0c      	cmp	r3, #12
 8019bee:	d906      	bls.n	8019bfe <dhcp_network_changed+0x52>
 8019bf0:	4b09      	ldr	r3, [pc, #36]	; (8019c18 <dhcp_network_changed+0x6c>)
 8019bf2:	f240 326d 	movw	r2, #877	; 0x36d
 8019bf6:	4909      	ldr	r1, [pc, #36]	; (8019c1c <dhcp_network_changed+0x70>)
 8019bf8:	4809      	ldr	r0, [pc, #36]	; (8019c20 <dhcp_network_changed+0x74>)
 8019bfa:	f004 ff3f 	bl	801ea7c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	2200      	movs	r2, #0
 8019c02:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8019c04:	6878      	ldr	r0, [r7, #4]
 8019c06:	f000 f8af 	bl	8019d68 <dhcp_discover>
      break;
 8019c0a:	e002      	b.n	8019c12 <dhcp_network_changed+0x66>
    return;
 8019c0c:	bf00      	nop
 8019c0e:	e000      	b.n	8019c12 <dhcp_network_changed+0x66>
      break;
 8019c10:	bf00      	nop
  }
}
 8019c12:	3710      	adds	r7, #16
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bd80      	pop	{r7, pc}
 8019c18:	08025968 	.word	0x08025968
 8019c1c:	08025ab4 	.word	0x08025ab4
 8019c20:	080259c8 	.word	0x080259c8

08019c24 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b084      	sub	sp, #16
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
 8019c2c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d107      	bne.n	8019c44 <dhcp_arp_reply+0x20>
 8019c34:	4b0e      	ldr	r3, [pc, #56]	; (8019c70 <dhcp_arp_reply+0x4c>)
 8019c36:	f240 328b 	movw	r2, #907	; 0x38b
 8019c3a:	490e      	ldr	r1, [pc, #56]	; (8019c74 <dhcp_arp_reply+0x50>)
 8019c3c:	480e      	ldr	r0, [pc, #56]	; (8019c78 <dhcp_arp_reply+0x54>)
 8019c3e:	f004 ff1d 	bl	801ea7c <iprintf>
 8019c42:	e012      	b.n	8019c6a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c48:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d00c      	beq.n	8019c6a <dhcp_arp_reply+0x46>
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	795b      	ldrb	r3, [r3, #5]
 8019c54:	2b08      	cmp	r3, #8
 8019c56:	d108      	bne.n	8019c6a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	681a      	ldr	r2, [r3, #0]
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	69db      	ldr	r3, [r3, #28]
 8019c60:	429a      	cmp	r2, r3
 8019c62:	d102      	bne.n	8019c6a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8019c64:	6878      	ldr	r0, [r7, #4]
 8019c66:	f000 f809 	bl	8019c7c <dhcp_decline>
    }
  }
}
 8019c6a:	3710      	adds	r7, #16
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd80      	pop	{r7, pc}
 8019c70:	08025968 	.word	0x08025968
 8019c74:	08025a4c 	.word	0x08025a4c
 8019c78:	080259c8 	.word	0x080259c8

08019c7c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8019c7c:	b5b0      	push	{r4, r5, r7, lr}
 8019c7e:	b08a      	sub	sp, #40	; 0x28
 8019c80:	af02      	add	r7, sp, #8
 8019c82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c88:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019c8a:	210c      	movs	r1, #12
 8019c8c:	69b8      	ldr	r0, [r7, #24]
 8019c8e:	f000 fc6f 	bl	801a570 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8019c92:	f107 030c 	add.w	r3, r7, #12
 8019c96:	2204      	movs	r2, #4
 8019c98:	69b9      	ldr	r1, [r7, #24]
 8019c9a:	6878      	ldr	r0, [r7, #4]
 8019c9c:	f001 f932 	bl	801af04 <dhcp_create_msg>
 8019ca0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019ca2:	697b      	ldr	r3, [r7, #20]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d035      	beq.n	8019d14 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019ca8:	697b      	ldr	r3, [r7, #20]
 8019caa:	685b      	ldr	r3, [r3, #4]
 8019cac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019cae:	89b8      	ldrh	r0, [r7, #12]
 8019cb0:	693b      	ldr	r3, [r7, #16]
 8019cb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019cb6:	2304      	movs	r3, #4
 8019cb8:	2232      	movs	r2, #50	; 0x32
 8019cba:	f000 fc73 	bl	801a5a4 <dhcp_option>
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019cc2:	89bc      	ldrh	r4, [r7, #12]
 8019cc4:	693b      	ldr	r3, [r7, #16]
 8019cc6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019cca:	69bb      	ldr	r3, [r7, #24]
 8019ccc:	69db      	ldr	r3, [r3, #28]
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f7f5 fa81 	bl	800f1d6 <lwip_htonl>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	461a      	mov	r2, r3
 8019cd8:	4629      	mov	r1, r5
 8019cda:	4620      	mov	r0, r4
 8019cdc:	f000 fcee 	bl	801a6bc <dhcp_option_long>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019ce4:	89b8      	ldrh	r0, [r7, #12]
 8019ce6:	693b      	ldr	r3, [r7, #16]
 8019ce8:	33f0      	adds	r3, #240	; 0xf0
 8019cea:	697a      	ldr	r2, [r7, #20]
 8019cec:	4619      	mov	r1, r3
 8019cee:	f001 f9df 	bl	801b0b0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019cf2:	4b19      	ldr	r3, [pc, #100]	; (8019d58 <dhcp_decline+0xdc>)
 8019cf4:	6818      	ldr	r0, [r3, #0]
 8019cf6:	4b19      	ldr	r3, [pc, #100]	; (8019d5c <dhcp_decline+0xe0>)
 8019cf8:	9301      	str	r3, [sp, #4]
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	9300      	str	r3, [sp, #0]
 8019cfe:	2343      	movs	r3, #67	; 0x43
 8019d00:	4a17      	ldr	r2, [pc, #92]	; (8019d60 <dhcp_decline+0xe4>)
 8019d02:	6979      	ldr	r1, [r7, #20]
 8019d04:	f7ff f87e 	bl	8018e04 <udp_sendto_if_src>
 8019d08:	4603      	mov	r3, r0
 8019d0a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019d0c:	6978      	ldr	r0, [r7, #20]
 8019d0e:	f7f7 fe0d 	bl	801192c <pbuf_free>
 8019d12:	e001      	b.n	8019d18 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019d14:	23ff      	movs	r3, #255	; 0xff
 8019d16:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019d18:	69bb      	ldr	r3, [r7, #24]
 8019d1a:	799b      	ldrb	r3, [r3, #6]
 8019d1c:	2bff      	cmp	r3, #255	; 0xff
 8019d1e:	d005      	beq.n	8019d2c <dhcp_decline+0xb0>
    dhcp->tries++;
 8019d20:	69bb      	ldr	r3, [r7, #24]
 8019d22:	799b      	ldrb	r3, [r3, #6]
 8019d24:	3301      	adds	r3, #1
 8019d26:	b2da      	uxtb	r2, r3
 8019d28:	69bb      	ldr	r3, [r7, #24]
 8019d2a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8019d2c:	f242 7310 	movw	r3, #10000	; 0x2710
 8019d30:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019d32:	89fb      	ldrh	r3, [r7, #14]
 8019d34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019d38:	4a0a      	ldr	r2, [pc, #40]	; (8019d64 <dhcp_decline+0xe8>)
 8019d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8019d3e:	1152      	asrs	r2, r2, #5
 8019d40:	17db      	asrs	r3, r3, #31
 8019d42:	1ad3      	subs	r3, r2, r3
 8019d44:	b29a      	uxth	r2, r3
 8019d46:	69bb      	ldr	r3, [r7, #24]
 8019d48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019d4e:	4618      	mov	r0, r3
 8019d50:	3720      	adds	r7, #32
 8019d52:	46bd      	mov	sp, r7
 8019d54:	bdb0      	pop	{r4, r5, r7, pc}
 8019d56:	bf00      	nop
 8019d58:	200143a0 	.word	0x200143a0
 8019d5c:	080266c0 	.word	0x080266c0
 8019d60:	080266c4 	.word	0x080266c4
 8019d64:	10624dd3 	.word	0x10624dd3

08019d68 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b08a      	sub	sp, #40	; 0x28
 8019d6c:	af02      	add	r7, sp, #8
 8019d6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d74:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8019d76:	2300      	movs	r3, #0
 8019d78:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019d7a:	69bb      	ldr	r3, [r7, #24]
 8019d7c:	2200      	movs	r2, #0
 8019d7e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8019d80:	2106      	movs	r1, #6
 8019d82:	69b8      	ldr	r0, [r7, #24]
 8019d84:	f000 fbf4 	bl	801a570 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8019d88:	f107 0308 	add.w	r3, r7, #8
 8019d8c:	2201      	movs	r2, #1
 8019d8e:	69b9      	ldr	r1, [r7, #24]
 8019d90:	6878      	ldr	r0, [r7, #4]
 8019d92:	f001 f8b7 	bl	801af04 <dhcp_create_msg>
 8019d96:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8019d98:	693b      	ldr	r3, [r7, #16]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d04b      	beq.n	8019e36 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019d9e:	693b      	ldr	r3, [r7, #16]
 8019da0:	685b      	ldr	r3, [r3, #4]
 8019da2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019da4:	8938      	ldrh	r0, [r7, #8]
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019dac:	2302      	movs	r3, #2
 8019dae:	2239      	movs	r2, #57	; 0x39
 8019db0:	f000 fbf8 	bl	801a5a4 <dhcp_option>
 8019db4:	4603      	mov	r3, r0
 8019db6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019db8:	8938      	ldrh	r0, [r7, #8]
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019dc4:	461a      	mov	r2, r3
 8019dc6:	f000 fc47 	bl	801a658 <dhcp_option_short>
 8019dca:	4603      	mov	r3, r0
 8019dcc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019dce:	8938      	ldrh	r0, [r7, #8]
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019dd6:	2304      	movs	r3, #4
 8019dd8:	2237      	movs	r2, #55	; 0x37
 8019dda:	f000 fbe3 	bl	801a5a4 <dhcp_option>
 8019dde:	4603      	mov	r3, r0
 8019de0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019de2:	2300      	movs	r3, #0
 8019de4:	77fb      	strb	r3, [r7, #31]
 8019de6:	e00e      	b.n	8019e06 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019de8:	8938      	ldrh	r0, [r7, #8]
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019df0:	7ffb      	ldrb	r3, [r7, #31]
 8019df2:	4a29      	ldr	r2, [pc, #164]	; (8019e98 <dhcp_discover+0x130>)
 8019df4:	5cd3      	ldrb	r3, [r2, r3]
 8019df6:	461a      	mov	r2, r3
 8019df8:	f000 fc08 	bl	801a60c <dhcp_option_byte>
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019e00:	7ffb      	ldrb	r3, [r7, #31]
 8019e02:	3301      	adds	r3, #1
 8019e04:	77fb      	strb	r3, [r7, #31]
 8019e06:	7ffb      	ldrb	r3, [r7, #31]
 8019e08:	2b03      	cmp	r3, #3
 8019e0a:	d9ed      	bls.n	8019de8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019e0c:	8938      	ldrh	r0, [r7, #8]
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	33f0      	adds	r3, #240	; 0xf0
 8019e12:	693a      	ldr	r2, [r7, #16]
 8019e14:	4619      	mov	r1, r3
 8019e16:	f001 f94b 	bl	801b0b0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019e1a:	4b20      	ldr	r3, [pc, #128]	; (8019e9c <dhcp_discover+0x134>)
 8019e1c:	6818      	ldr	r0, [r3, #0]
 8019e1e:	4b20      	ldr	r3, [pc, #128]	; (8019ea0 <dhcp_discover+0x138>)
 8019e20:	9301      	str	r3, [sp, #4]
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	9300      	str	r3, [sp, #0]
 8019e26:	2343      	movs	r3, #67	; 0x43
 8019e28:	4a1e      	ldr	r2, [pc, #120]	; (8019ea4 <dhcp_discover+0x13c>)
 8019e2a:	6939      	ldr	r1, [r7, #16]
 8019e2c:	f7fe ffea 	bl	8018e04 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8019e30:	6938      	ldr	r0, [r7, #16]
 8019e32:	f7f7 fd7b 	bl	801192c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8019e36:	69bb      	ldr	r3, [r7, #24]
 8019e38:	799b      	ldrb	r3, [r3, #6]
 8019e3a:	2bff      	cmp	r3, #255	; 0xff
 8019e3c:	d005      	beq.n	8019e4a <dhcp_discover+0xe2>
    dhcp->tries++;
 8019e3e:	69bb      	ldr	r3, [r7, #24]
 8019e40:	799b      	ldrb	r3, [r3, #6]
 8019e42:	3301      	adds	r3, #1
 8019e44:	b2da      	uxtb	r2, r3
 8019e46:	69bb      	ldr	r3, [r7, #24]
 8019e48:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019e4a:	69bb      	ldr	r3, [r7, #24]
 8019e4c:	799b      	ldrb	r3, [r3, #6]
 8019e4e:	2b05      	cmp	r3, #5
 8019e50:	d80d      	bhi.n	8019e6e <dhcp_discover+0x106>
 8019e52:	69bb      	ldr	r3, [r7, #24]
 8019e54:	799b      	ldrb	r3, [r3, #6]
 8019e56:	461a      	mov	r2, r3
 8019e58:	2301      	movs	r3, #1
 8019e5a:	4093      	lsls	r3, r2
 8019e5c:	b29b      	uxth	r3, r3
 8019e5e:	461a      	mov	r2, r3
 8019e60:	0152      	lsls	r2, r2, #5
 8019e62:	1ad2      	subs	r2, r2, r3
 8019e64:	0092      	lsls	r2, r2, #2
 8019e66:	4413      	add	r3, r2
 8019e68:	00db      	lsls	r3, r3, #3
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	e001      	b.n	8019e72 <dhcp_discover+0x10a>
 8019e6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8019e72:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019e74:	897b      	ldrh	r3, [r7, #10]
 8019e76:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019e7a:	4a0b      	ldr	r2, [pc, #44]	; (8019ea8 <dhcp_discover+0x140>)
 8019e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8019e80:	1152      	asrs	r2, r2, #5
 8019e82:	17db      	asrs	r3, r3, #31
 8019e84:	1ad3      	subs	r3, r2, r3
 8019e86:	b29a      	uxth	r2, r3
 8019e88:	69bb      	ldr	r3, [r7, #24]
 8019e8a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019e90:	4618      	mov	r0, r3
 8019e92:	3720      	adds	r7, #32
 8019e94:	46bd      	mov	sp, r7
 8019e96:	bd80      	pop	{r7, pc}
 8019e98:	20000060 	.word	0x20000060
 8019e9c:	200143a0 	.word	0x200143a0
 8019ea0:	080266c0 	.word	0x080266c0
 8019ea4:	080266c4 	.word	0x080266c4
 8019ea8:	10624dd3 	.word	0x10624dd3

08019eac <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b088      	sub	sp, #32
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d107      	bne.n	8019eca <dhcp_bind+0x1e>
 8019eba:	4b64      	ldr	r3, [pc, #400]	; (801a04c <dhcp_bind+0x1a0>)
 8019ebc:	f240 4215 	movw	r2, #1045	; 0x415
 8019ec0:	4963      	ldr	r1, [pc, #396]	; (801a050 <dhcp_bind+0x1a4>)
 8019ec2:	4864      	ldr	r0, [pc, #400]	; (801a054 <dhcp_bind+0x1a8>)
 8019ec4:	f004 fdda 	bl	801ea7c <iprintf>
 8019ec8:	e0bc      	b.n	801a044 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ece:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8019ed0:	69fb      	ldr	r3, [r7, #28]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d107      	bne.n	8019ee6 <dhcp_bind+0x3a>
 8019ed6:	4b5d      	ldr	r3, [pc, #372]	; (801a04c <dhcp_bind+0x1a0>)
 8019ed8:	f240 4217 	movw	r2, #1047	; 0x417
 8019edc:	495e      	ldr	r1, [pc, #376]	; (801a058 <dhcp_bind+0x1ac>)
 8019ede:	485d      	ldr	r0, [pc, #372]	; (801a054 <dhcp_bind+0x1a8>)
 8019ee0:	f004 fdcc 	bl	801ea7c <iprintf>
 8019ee4:	e0ae      	b.n	801a044 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8019ee6:	69fb      	ldr	r3, [r7, #28]
 8019ee8:	2200      	movs	r2, #0
 8019eea:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8019eec:	69fb      	ldr	r3, [r7, #28]
 8019eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019ef4:	d019      	beq.n	8019f2a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019ef6:	69fb      	ldr	r3, [r7, #28]
 8019ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019efa:	331e      	adds	r3, #30
 8019efc:	4a57      	ldr	r2, [pc, #348]	; (801a05c <dhcp_bind+0x1b0>)
 8019efe:	fba2 2303 	umull	r2, r3, r2, r3
 8019f02:	095b      	lsrs	r3, r3, #5
 8019f04:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8019f06:	69bb      	ldr	r3, [r7, #24]
 8019f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019f0c:	d302      	bcc.n	8019f14 <dhcp_bind+0x68>
      timeout = 0xffff;
 8019f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f12:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8019f14:	69bb      	ldr	r3, [r7, #24]
 8019f16:	b29a      	uxth	r2, r3
 8019f18:	69fb      	ldr	r3, [r7, #28]
 8019f1a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8019f1c:	69fb      	ldr	r3, [r7, #28]
 8019f1e:	8a9b      	ldrh	r3, [r3, #20]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d102      	bne.n	8019f2a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8019f24:	69fb      	ldr	r3, [r7, #28]
 8019f26:	2201      	movs	r2, #1
 8019f28:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019f2a:	69fb      	ldr	r3, [r7, #28]
 8019f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019f32:	d01d      	beq.n	8019f70 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019f34:	69fb      	ldr	r3, [r7, #28]
 8019f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f38:	331e      	adds	r3, #30
 8019f3a:	4a48      	ldr	r2, [pc, #288]	; (801a05c <dhcp_bind+0x1b0>)
 8019f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8019f40:	095b      	lsrs	r3, r3, #5
 8019f42:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8019f44:	69bb      	ldr	r3, [r7, #24]
 8019f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019f4a:	d302      	bcc.n	8019f52 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f50:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8019f52:	69bb      	ldr	r3, [r7, #24]
 8019f54:	b29a      	uxth	r2, r3
 8019f56:	69fb      	ldr	r3, [r7, #28]
 8019f58:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8019f5a:	69fb      	ldr	r3, [r7, #28]
 8019f5c:	895b      	ldrh	r3, [r3, #10]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d102      	bne.n	8019f68 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8019f62:	69fb      	ldr	r3, [r7, #28]
 8019f64:	2201      	movs	r2, #1
 8019f66:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8019f68:	69fb      	ldr	r3, [r7, #28]
 8019f6a:	895a      	ldrh	r2, [r3, #10]
 8019f6c:	69fb      	ldr	r3, [r7, #28]
 8019f6e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8019f70:	69fb      	ldr	r3, [r7, #28]
 8019f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019f78:	d01d      	beq.n	8019fb6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019f7a:	69fb      	ldr	r3, [r7, #28]
 8019f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f7e:	331e      	adds	r3, #30
 8019f80:	4a36      	ldr	r2, [pc, #216]	; (801a05c <dhcp_bind+0x1b0>)
 8019f82:	fba2 2303 	umull	r2, r3, r2, r3
 8019f86:	095b      	lsrs	r3, r3, #5
 8019f88:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8019f8a:	69bb      	ldr	r3, [r7, #24]
 8019f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019f90:	d302      	bcc.n	8019f98 <dhcp_bind+0xec>
      timeout = 0xffff;
 8019f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f96:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8019f98:	69bb      	ldr	r3, [r7, #24]
 8019f9a:	b29a      	uxth	r2, r3
 8019f9c:	69fb      	ldr	r3, [r7, #28]
 8019f9e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8019fa0:	69fb      	ldr	r3, [r7, #28]
 8019fa2:	899b      	ldrh	r3, [r3, #12]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d102      	bne.n	8019fae <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8019fa8:	69fb      	ldr	r3, [r7, #28]
 8019faa:	2201      	movs	r2, #1
 8019fac:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8019fae:	69fb      	ldr	r3, [r7, #28]
 8019fb0:	899a      	ldrh	r2, [r3, #12]
 8019fb2:	69fb      	ldr	r3, [r7, #28]
 8019fb4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8019fb6:	69fb      	ldr	r3, [r7, #28]
 8019fb8:	895a      	ldrh	r2, [r3, #10]
 8019fba:	69fb      	ldr	r3, [r7, #28]
 8019fbc:	899b      	ldrh	r3, [r3, #12]
 8019fbe:	429a      	cmp	r2, r3
 8019fc0:	d306      	bcc.n	8019fd0 <dhcp_bind+0x124>
 8019fc2:	69fb      	ldr	r3, [r7, #28]
 8019fc4:	899b      	ldrh	r3, [r3, #12]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d002      	beq.n	8019fd0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8019fca:	69fb      	ldr	r3, [r7, #28]
 8019fcc:	2200      	movs	r2, #0
 8019fce:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8019fd0:	69fb      	ldr	r3, [r7, #28]
 8019fd2:	79db      	ldrb	r3, [r3, #7]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d003      	beq.n	8019fe0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8019fd8:	69fb      	ldr	r3, [r7, #28]
 8019fda:	6a1b      	ldr	r3, [r3, #32]
 8019fdc:	613b      	str	r3, [r7, #16]
 8019fde:	e014      	b.n	801a00a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8019fe0:	69fb      	ldr	r3, [r7, #28]
 8019fe2:	331c      	adds	r3, #28
 8019fe4:	781b      	ldrb	r3, [r3, #0]
 8019fe6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8019fe8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	db02      	blt.n	8019ff6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8019ff0:	23ff      	movs	r3, #255	; 0xff
 8019ff2:	613b      	str	r3, [r7, #16]
 8019ff4:	e009      	b.n	801a00a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8019ff6:	7dfb      	ldrb	r3, [r7, #23]
 8019ff8:	2bbf      	cmp	r3, #191	; 0xbf
 8019ffa:	d903      	bls.n	801a004 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8019ffc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a000:	613b      	str	r3, [r7, #16]
 801a002:	e002      	b.n	801a00a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801a004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a008:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801a00a:	69fb      	ldr	r3, [r7, #28]
 801a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a00e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d108      	bne.n	801a028 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801a016:	69fb      	ldr	r3, [r7, #28]
 801a018:	69da      	ldr	r2, [r3, #28]
 801a01a:	693b      	ldr	r3, [r7, #16]
 801a01c:	4013      	ands	r3, r2
 801a01e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a026:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801a028:	210a      	movs	r1, #10
 801a02a:	69f8      	ldr	r0, [r7, #28]
 801a02c:	f000 faa0 	bl	801a570 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801a030:	69fb      	ldr	r3, [r7, #28]
 801a032:	f103 011c 	add.w	r1, r3, #28
 801a036:	f107 030c 	add.w	r3, r7, #12
 801a03a:	f107 0210 	add.w	r2, r7, #16
 801a03e:	6878      	ldr	r0, [r7, #4]
 801a040:	f7f6 ff34 	bl	8010eac <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801a044:	3720      	adds	r7, #32
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}
 801a04a:	bf00      	nop
 801a04c:	08025968 	.word	0x08025968
 801a050:	08025ac8 	.word	0x08025ac8
 801a054:	080259c8 	.word	0x080259c8
 801a058:	08025ae4 	.word	0x08025ae4
 801a05c:	88888889 	.word	0x88888889

0801a060 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b08a      	sub	sp, #40	; 0x28
 801a064:	af02      	add	r7, sp, #8
 801a066:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a06c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801a06e:	2105      	movs	r1, #5
 801a070:	69b8      	ldr	r0, [r7, #24]
 801a072:	f000 fa7d 	bl	801a570 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a076:	f107 030c 	add.w	r3, r7, #12
 801a07a:	2203      	movs	r2, #3
 801a07c:	69b9      	ldr	r1, [r7, #24]
 801a07e:	6878      	ldr	r0, [r7, #4]
 801a080:	f000 ff40 	bl	801af04 <dhcp_create_msg>
 801a084:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d04e      	beq.n	801a12a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a08c:	697b      	ldr	r3, [r7, #20]
 801a08e:	685b      	ldr	r3, [r3, #4]
 801a090:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a092:	89b8      	ldrh	r0, [r7, #12]
 801a094:	693b      	ldr	r3, [r7, #16]
 801a096:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a09a:	2302      	movs	r3, #2
 801a09c:	2239      	movs	r2, #57	; 0x39
 801a09e:	f000 fa81 	bl	801a5a4 <dhcp_option>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a0a6:	89b8      	ldrh	r0, [r7, #12]
 801a0a8:	693b      	ldr	r3, [r7, #16]
 801a0aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a0b2:	461a      	mov	r2, r3
 801a0b4:	f000 fad0 	bl	801a658 <dhcp_option_short>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a0bc:	89b8      	ldrh	r0, [r7, #12]
 801a0be:	693b      	ldr	r3, [r7, #16]
 801a0c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a0c4:	2304      	movs	r3, #4
 801a0c6:	2237      	movs	r2, #55	; 0x37
 801a0c8:	f000 fa6c 	bl	801a5a4 <dhcp_option>
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	77bb      	strb	r3, [r7, #30]
 801a0d4:	e00e      	b.n	801a0f4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a0d6:	89b8      	ldrh	r0, [r7, #12]
 801a0d8:	693b      	ldr	r3, [r7, #16]
 801a0da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a0de:	7fbb      	ldrb	r3, [r7, #30]
 801a0e0:	4a2a      	ldr	r2, [pc, #168]	; (801a18c <dhcp_renew+0x12c>)
 801a0e2:	5cd3      	ldrb	r3, [r2, r3]
 801a0e4:	461a      	mov	r2, r3
 801a0e6:	f000 fa91 	bl	801a60c <dhcp_option_byte>
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a0ee:	7fbb      	ldrb	r3, [r7, #30]
 801a0f0:	3301      	adds	r3, #1
 801a0f2:	77bb      	strb	r3, [r7, #30]
 801a0f4:	7fbb      	ldrb	r3, [r7, #30]
 801a0f6:	2b03      	cmp	r3, #3
 801a0f8:	d9ed      	bls.n	801a0d6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a0fa:	89b8      	ldrh	r0, [r7, #12]
 801a0fc:	693b      	ldr	r3, [r7, #16]
 801a0fe:	33f0      	adds	r3, #240	; 0xf0
 801a100:	697a      	ldr	r2, [r7, #20]
 801a102:	4619      	mov	r1, r3
 801a104:	f000 ffd4 	bl	801b0b0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a108:	4b21      	ldr	r3, [pc, #132]	; (801a190 <dhcp_renew+0x130>)
 801a10a:	6818      	ldr	r0, [r3, #0]
 801a10c:	69bb      	ldr	r3, [r7, #24]
 801a10e:	f103 0218 	add.w	r2, r3, #24
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	9300      	str	r3, [sp, #0]
 801a116:	2343      	movs	r3, #67	; 0x43
 801a118:	6979      	ldr	r1, [r7, #20]
 801a11a:	f7fe fdff 	bl	8018d1c <udp_sendto_if>
 801a11e:	4603      	mov	r3, r0
 801a120:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a122:	6978      	ldr	r0, [r7, #20]
 801a124:	f7f7 fc02 	bl	801192c <pbuf_free>
 801a128:	e001      	b.n	801a12e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a12a:	23ff      	movs	r3, #255	; 0xff
 801a12c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a12e:	69bb      	ldr	r3, [r7, #24]
 801a130:	799b      	ldrb	r3, [r3, #6]
 801a132:	2bff      	cmp	r3, #255	; 0xff
 801a134:	d005      	beq.n	801a142 <dhcp_renew+0xe2>
    dhcp->tries++;
 801a136:	69bb      	ldr	r3, [r7, #24]
 801a138:	799b      	ldrb	r3, [r3, #6]
 801a13a:	3301      	adds	r3, #1
 801a13c:	b2da      	uxtb	r2, r3
 801a13e:	69bb      	ldr	r3, [r7, #24]
 801a140:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801a142:	69bb      	ldr	r3, [r7, #24]
 801a144:	799b      	ldrb	r3, [r3, #6]
 801a146:	2b09      	cmp	r3, #9
 801a148:	d80a      	bhi.n	801a160 <dhcp_renew+0x100>
 801a14a:	69bb      	ldr	r3, [r7, #24]
 801a14c:	799b      	ldrb	r3, [r3, #6]
 801a14e:	b29b      	uxth	r3, r3
 801a150:	461a      	mov	r2, r3
 801a152:	0152      	lsls	r2, r2, #5
 801a154:	1ad2      	subs	r2, r2, r3
 801a156:	0092      	lsls	r2, r2, #2
 801a158:	4413      	add	r3, r2
 801a15a:	011b      	lsls	r3, r3, #4
 801a15c:	b29b      	uxth	r3, r3
 801a15e:	e001      	b.n	801a164 <dhcp_renew+0x104>
 801a160:	f644 6320 	movw	r3, #20000	; 0x4e20
 801a164:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a166:	89fb      	ldrh	r3, [r7, #14]
 801a168:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a16c:	4a09      	ldr	r2, [pc, #36]	; (801a194 <dhcp_renew+0x134>)
 801a16e:	fb82 1203 	smull	r1, r2, r2, r3
 801a172:	1152      	asrs	r2, r2, #5
 801a174:	17db      	asrs	r3, r3, #31
 801a176:	1ad3      	subs	r3, r2, r3
 801a178:	b29a      	uxth	r2, r3
 801a17a:	69bb      	ldr	r3, [r7, #24]
 801a17c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a17e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a182:	4618      	mov	r0, r3
 801a184:	3720      	adds	r7, #32
 801a186:	46bd      	mov	sp, r7
 801a188:	bd80      	pop	{r7, pc}
 801a18a:	bf00      	nop
 801a18c:	20000060 	.word	0x20000060
 801a190:	200143a0 	.word	0x200143a0
 801a194:	10624dd3 	.word	0x10624dd3

0801a198 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b08a      	sub	sp, #40	; 0x28
 801a19c:	af02      	add	r7, sp, #8
 801a19e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1a4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801a1a6:	2104      	movs	r1, #4
 801a1a8:	69b8      	ldr	r0, [r7, #24]
 801a1aa:	f000 f9e1 	bl	801a570 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a1ae:	f107 030c 	add.w	r3, r7, #12
 801a1b2:	2203      	movs	r2, #3
 801a1b4:	69b9      	ldr	r1, [r7, #24]
 801a1b6:	6878      	ldr	r0, [r7, #4]
 801a1b8:	f000 fea4 	bl	801af04 <dhcp_create_msg>
 801a1bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a1be:	697b      	ldr	r3, [r7, #20]
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d04c      	beq.n	801a25e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	685b      	ldr	r3, [r3, #4]
 801a1c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a1ca:	89b8      	ldrh	r0, [r7, #12]
 801a1cc:	693b      	ldr	r3, [r7, #16]
 801a1ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a1d2:	2302      	movs	r3, #2
 801a1d4:	2239      	movs	r2, #57	; 0x39
 801a1d6:	f000 f9e5 	bl	801a5a4 <dhcp_option>
 801a1da:	4603      	mov	r3, r0
 801a1dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a1de:	89b8      	ldrh	r0, [r7, #12]
 801a1e0:	693b      	ldr	r3, [r7, #16]
 801a1e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a1ea:	461a      	mov	r2, r3
 801a1ec:	f000 fa34 	bl	801a658 <dhcp_option_short>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a1f4:	89b8      	ldrh	r0, [r7, #12]
 801a1f6:	693b      	ldr	r3, [r7, #16]
 801a1f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a1fc:	2304      	movs	r3, #4
 801a1fe:	2237      	movs	r2, #55	; 0x37
 801a200:	f000 f9d0 	bl	801a5a4 <dhcp_option>
 801a204:	4603      	mov	r3, r0
 801a206:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a208:	2300      	movs	r3, #0
 801a20a:	77bb      	strb	r3, [r7, #30]
 801a20c:	e00e      	b.n	801a22c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a20e:	89b8      	ldrh	r0, [r7, #12]
 801a210:	693b      	ldr	r3, [r7, #16]
 801a212:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a216:	7fbb      	ldrb	r3, [r7, #30]
 801a218:	4a29      	ldr	r2, [pc, #164]	; (801a2c0 <dhcp_rebind+0x128>)
 801a21a:	5cd3      	ldrb	r3, [r2, r3]
 801a21c:	461a      	mov	r2, r3
 801a21e:	f000 f9f5 	bl	801a60c <dhcp_option_byte>
 801a222:	4603      	mov	r3, r0
 801a224:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a226:	7fbb      	ldrb	r3, [r7, #30]
 801a228:	3301      	adds	r3, #1
 801a22a:	77bb      	strb	r3, [r7, #30]
 801a22c:	7fbb      	ldrb	r3, [r7, #30]
 801a22e:	2b03      	cmp	r3, #3
 801a230:	d9ed      	bls.n	801a20e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a232:	89b8      	ldrh	r0, [r7, #12]
 801a234:	693b      	ldr	r3, [r7, #16]
 801a236:	33f0      	adds	r3, #240	; 0xf0
 801a238:	697a      	ldr	r2, [r7, #20]
 801a23a:	4619      	mov	r1, r3
 801a23c:	f000 ff38 	bl	801b0b0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a240:	4b20      	ldr	r3, [pc, #128]	; (801a2c4 <dhcp_rebind+0x12c>)
 801a242:	6818      	ldr	r0, [r3, #0]
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	9300      	str	r3, [sp, #0]
 801a248:	2343      	movs	r3, #67	; 0x43
 801a24a:	4a1f      	ldr	r2, [pc, #124]	; (801a2c8 <dhcp_rebind+0x130>)
 801a24c:	6979      	ldr	r1, [r7, #20]
 801a24e:	f7fe fd65 	bl	8018d1c <udp_sendto_if>
 801a252:	4603      	mov	r3, r0
 801a254:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a256:	6978      	ldr	r0, [r7, #20]
 801a258:	f7f7 fb68 	bl	801192c <pbuf_free>
 801a25c:	e001      	b.n	801a262 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a25e:	23ff      	movs	r3, #255	; 0xff
 801a260:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a262:	69bb      	ldr	r3, [r7, #24]
 801a264:	799b      	ldrb	r3, [r3, #6]
 801a266:	2bff      	cmp	r3, #255	; 0xff
 801a268:	d005      	beq.n	801a276 <dhcp_rebind+0xde>
    dhcp->tries++;
 801a26a:	69bb      	ldr	r3, [r7, #24]
 801a26c:	799b      	ldrb	r3, [r3, #6]
 801a26e:	3301      	adds	r3, #1
 801a270:	b2da      	uxtb	r2, r3
 801a272:	69bb      	ldr	r3, [r7, #24]
 801a274:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801a276:	69bb      	ldr	r3, [r7, #24]
 801a278:	799b      	ldrb	r3, [r3, #6]
 801a27a:	2b09      	cmp	r3, #9
 801a27c:	d80a      	bhi.n	801a294 <dhcp_rebind+0xfc>
 801a27e:	69bb      	ldr	r3, [r7, #24]
 801a280:	799b      	ldrb	r3, [r3, #6]
 801a282:	b29b      	uxth	r3, r3
 801a284:	461a      	mov	r2, r3
 801a286:	0152      	lsls	r2, r2, #5
 801a288:	1ad2      	subs	r2, r2, r3
 801a28a:	0092      	lsls	r2, r2, #2
 801a28c:	4413      	add	r3, r2
 801a28e:	00db      	lsls	r3, r3, #3
 801a290:	b29b      	uxth	r3, r3
 801a292:	e001      	b.n	801a298 <dhcp_rebind+0x100>
 801a294:	f242 7310 	movw	r3, #10000	; 0x2710
 801a298:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a29a:	89fb      	ldrh	r3, [r7, #14]
 801a29c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a2a0:	4a0a      	ldr	r2, [pc, #40]	; (801a2cc <dhcp_rebind+0x134>)
 801a2a2:	fb82 1203 	smull	r1, r2, r2, r3
 801a2a6:	1152      	asrs	r2, r2, #5
 801a2a8:	17db      	asrs	r3, r3, #31
 801a2aa:	1ad3      	subs	r3, r2, r3
 801a2ac:	b29a      	uxth	r2, r3
 801a2ae:	69bb      	ldr	r3, [r7, #24]
 801a2b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a2b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	3720      	adds	r7, #32
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bd80      	pop	{r7, pc}
 801a2be:	bf00      	nop
 801a2c0:	20000060 	.word	0x20000060
 801a2c4:	200143a0 	.word	0x200143a0
 801a2c8:	080266c4 	.word	0x080266c4
 801a2cc:	10624dd3 	.word	0x10624dd3

0801a2d0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801a2d0:	b5b0      	push	{r4, r5, r7, lr}
 801a2d2:	b08a      	sub	sp, #40	; 0x28
 801a2d4:	af02      	add	r7, sp, #8
 801a2d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2dc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801a2de:	2103      	movs	r1, #3
 801a2e0:	69b8      	ldr	r0, [r7, #24]
 801a2e2:	f000 f945 	bl	801a570 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a2e6:	f107 030c 	add.w	r3, r7, #12
 801a2ea:	2203      	movs	r2, #3
 801a2ec:	69b9      	ldr	r1, [r7, #24]
 801a2ee:	6878      	ldr	r0, [r7, #4]
 801a2f0:	f000 fe08 	bl	801af04 <dhcp_create_msg>
 801a2f4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a2f6:	697b      	ldr	r3, [r7, #20]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d066      	beq.n	801a3ca <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a2fc:	697b      	ldr	r3, [r7, #20]
 801a2fe:	685b      	ldr	r3, [r3, #4]
 801a300:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a302:	89b8      	ldrh	r0, [r7, #12]
 801a304:	693b      	ldr	r3, [r7, #16]
 801a306:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a30a:	2302      	movs	r3, #2
 801a30c:	2239      	movs	r2, #57	; 0x39
 801a30e:	f000 f949 	bl	801a5a4 <dhcp_option>
 801a312:	4603      	mov	r3, r0
 801a314:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801a316:	89b8      	ldrh	r0, [r7, #12]
 801a318:	693b      	ldr	r3, [r7, #16]
 801a31a:	33f0      	adds	r3, #240	; 0xf0
 801a31c:	f44f 7210 	mov.w	r2, #576	; 0x240
 801a320:	4619      	mov	r1, r3
 801a322:	f000 f999 	bl	801a658 <dhcp_option_short>
 801a326:	4603      	mov	r3, r0
 801a328:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a32a:	89b8      	ldrh	r0, [r7, #12]
 801a32c:	693b      	ldr	r3, [r7, #16]
 801a32e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a332:	2304      	movs	r3, #4
 801a334:	2232      	movs	r2, #50	; 0x32
 801a336:	f000 f935 	bl	801a5a4 <dhcp_option>
 801a33a:	4603      	mov	r3, r0
 801a33c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a33e:	89bc      	ldrh	r4, [r7, #12]
 801a340:	693b      	ldr	r3, [r7, #16]
 801a342:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a346:	69bb      	ldr	r3, [r7, #24]
 801a348:	69db      	ldr	r3, [r3, #28]
 801a34a:	4618      	mov	r0, r3
 801a34c:	f7f4 ff43 	bl	800f1d6 <lwip_htonl>
 801a350:	4603      	mov	r3, r0
 801a352:	461a      	mov	r2, r3
 801a354:	4629      	mov	r1, r5
 801a356:	4620      	mov	r0, r4
 801a358:	f000 f9b0 	bl	801a6bc <dhcp_option_long>
 801a35c:	4603      	mov	r3, r0
 801a35e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a360:	89b8      	ldrh	r0, [r7, #12]
 801a362:	693b      	ldr	r3, [r7, #16]
 801a364:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a368:	2304      	movs	r3, #4
 801a36a:	2237      	movs	r2, #55	; 0x37
 801a36c:	f000 f91a 	bl	801a5a4 <dhcp_option>
 801a370:	4603      	mov	r3, r0
 801a372:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a374:	2300      	movs	r3, #0
 801a376:	77bb      	strb	r3, [r7, #30]
 801a378:	e00e      	b.n	801a398 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a37a:	89b8      	ldrh	r0, [r7, #12]
 801a37c:	693b      	ldr	r3, [r7, #16]
 801a37e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a382:	7fbb      	ldrb	r3, [r7, #30]
 801a384:	4a29      	ldr	r2, [pc, #164]	; (801a42c <dhcp_reboot+0x15c>)
 801a386:	5cd3      	ldrb	r3, [r2, r3]
 801a388:	461a      	mov	r2, r3
 801a38a:	f000 f93f 	bl	801a60c <dhcp_option_byte>
 801a38e:	4603      	mov	r3, r0
 801a390:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a392:	7fbb      	ldrb	r3, [r7, #30]
 801a394:	3301      	adds	r3, #1
 801a396:	77bb      	strb	r3, [r7, #30]
 801a398:	7fbb      	ldrb	r3, [r7, #30]
 801a39a:	2b03      	cmp	r3, #3
 801a39c:	d9ed      	bls.n	801a37a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a39e:	89b8      	ldrh	r0, [r7, #12]
 801a3a0:	693b      	ldr	r3, [r7, #16]
 801a3a2:	33f0      	adds	r3, #240	; 0xf0
 801a3a4:	697a      	ldr	r2, [r7, #20]
 801a3a6:	4619      	mov	r1, r3
 801a3a8:	f000 fe82 	bl	801b0b0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a3ac:	4b20      	ldr	r3, [pc, #128]	; (801a430 <dhcp_reboot+0x160>)
 801a3ae:	6818      	ldr	r0, [r3, #0]
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	9300      	str	r3, [sp, #0]
 801a3b4:	2343      	movs	r3, #67	; 0x43
 801a3b6:	4a1f      	ldr	r2, [pc, #124]	; (801a434 <dhcp_reboot+0x164>)
 801a3b8:	6979      	ldr	r1, [r7, #20]
 801a3ba:	f7fe fcaf 	bl	8018d1c <udp_sendto_if>
 801a3be:	4603      	mov	r3, r0
 801a3c0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a3c2:	6978      	ldr	r0, [r7, #20]
 801a3c4:	f7f7 fab2 	bl	801192c <pbuf_free>
 801a3c8:	e001      	b.n	801a3ce <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a3ca:	23ff      	movs	r3, #255	; 0xff
 801a3cc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a3ce:	69bb      	ldr	r3, [r7, #24]
 801a3d0:	799b      	ldrb	r3, [r3, #6]
 801a3d2:	2bff      	cmp	r3, #255	; 0xff
 801a3d4:	d005      	beq.n	801a3e2 <dhcp_reboot+0x112>
    dhcp->tries++;
 801a3d6:	69bb      	ldr	r3, [r7, #24]
 801a3d8:	799b      	ldrb	r3, [r3, #6]
 801a3da:	3301      	adds	r3, #1
 801a3dc:	b2da      	uxtb	r2, r3
 801a3de:	69bb      	ldr	r3, [r7, #24]
 801a3e0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801a3e2:	69bb      	ldr	r3, [r7, #24]
 801a3e4:	799b      	ldrb	r3, [r3, #6]
 801a3e6:	2b09      	cmp	r3, #9
 801a3e8:	d80a      	bhi.n	801a400 <dhcp_reboot+0x130>
 801a3ea:	69bb      	ldr	r3, [r7, #24]
 801a3ec:	799b      	ldrb	r3, [r3, #6]
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	461a      	mov	r2, r3
 801a3f2:	0152      	lsls	r2, r2, #5
 801a3f4:	1ad2      	subs	r2, r2, r3
 801a3f6:	0092      	lsls	r2, r2, #2
 801a3f8:	4413      	add	r3, r2
 801a3fa:	00db      	lsls	r3, r3, #3
 801a3fc:	b29b      	uxth	r3, r3
 801a3fe:	e001      	b.n	801a404 <dhcp_reboot+0x134>
 801a400:	f242 7310 	movw	r3, #10000	; 0x2710
 801a404:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a406:	89fb      	ldrh	r3, [r7, #14]
 801a408:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a40c:	4a0a      	ldr	r2, [pc, #40]	; (801a438 <dhcp_reboot+0x168>)
 801a40e:	fb82 1203 	smull	r1, r2, r2, r3
 801a412:	1152      	asrs	r2, r2, #5
 801a414:	17db      	asrs	r3, r3, #31
 801a416:	1ad3      	subs	r3, r2, r3
 801a418:	b29a      	uxth	r2, r3
 801a41a:	69bb      	ldr	r3, [r7, #24]
 801a41c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a41e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a422:	4618      	mov	r0, r3
 801a424:	3720      	adds	r7, #32
 801a426:	46bd      	mov	sp, r7
 801a428:	bdb0      	pop	{r4, r5, r7, pc}
 801a42a:	bf00      	nop
 801a42c:	20000060 	.word	0x20000060
 801a430:	200143a0 	.word	0x200143a0
 801a434:	080266c4 	.word	0x080266c4
 801a438:	10624dd3 	.word	0x10624dd3

0801a43c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801a43c:	b5b0      	push	{r4, r5, r7, lr}
 801a43e:	b08a      	sub	sp, #40	; 0x28
 801a440:	af02      	add	r7, sp, #8
 801a442:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a448:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801a44a:	69fb      	ldr	r3, [r7, #28]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	f000 8084 	beq.w	801a55a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801a452:	69fb      	ldr	r3, [r7, #28]
 801a454:	795b      	ldrb	r3, [r3, #5]
 801a456:	2b00      	cmp	r3, #0
 801a458:	f000 8081 	beq.w	801a55e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801a45c:	69fb      	ldr	r3, [r7, #28]
 801a45e:	699b      	ldr	r3, [r3, #24]
 801a460:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801a462:	69fb      	ldr	r3, [r7, #28]
 801a464:	2200      	movs	r2, #0
 801a466:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801a468:	69fb      	ldr	r3, [r7, #28]
 801a46a:	2200      	movs	r2, #0
 801a46c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a46e:	69fb      	ldr	r3, [r7, #28]
 801a470:	2200      	movs	r2, #0
 801a472:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a474:	69fb      	ldr	r3, [r7, #28]
 801a476:	2200      	movs	r2, #0
 801a478:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801a47a:	69fb      	ldr	r3, [r7, #28]
 801a47c:	2200      	movs	r2, #0
 801a47e:	631a      	str	r2, [r3, #48]	; 0x30
 801a480:	69fb      	ldr	r3, [r7, #28]
 801a482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a484:	69fb      	ldr	r3, [r7, #28]
 801a486:	62da      	str	r2, [r3, #44]	; 0x2c
 801a488:	69fb      	ldr	r3, [r7, #28]
 801a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a48c:	69fb      	ldr	r3, [r7, #28]
 801a48e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801a490:	69fb      	ldr	r3, [r7, #28]
 801a492:	2200      	movs	r2, #0
 801a494:	829a      	strh	r2, [r3, #20]
 801a496:	69fb      	ldr	r3, [r7, #28]
 801a498:	8a9a      	ldrh	r2, [r3, #20]
 801a49a:	69fb      	ldr	r3, [r7, #28]
 801a49c:	825a      	strh	r2, [r3, #18]
 801a49e:	69fb      	ldr	r3, [r7, #28]
 801a4a0:	8a5a      	ldrh	r2, [r3, #18]
 801a4a2:	69fb      	ldr	r3, [r7, #28]
 801a4a4:	821a      	strh	r2, [r3, #16]
 801a4a6:	69fb      	ldr	r3, [r7, #28]
 801a4a8:	8a1a      	ldrh	r2, [r3, #16]
 801a4aa:	69fb      	ldr	r3, [r7, #28]
 801a4ac:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801a4ae:	6878      	ldr	r0, [r7, #4]
 801a4b0:	f000 fe2c 	bl	801b10c <dhcp_supplied_address>
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d03b      	beq.n	801a532 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801a4ba:	f107 030e 	add.w	r3, r7, #14
 801a4be:	2207      	movs	r2, #7
 801a4c0:	69f9      	ldr	r1, [r7, #28]
 801a4c2:	6878      	ldr	r0, [r7, #4]
 801a4c4:	f000 fd1e 	bl	801af04 <dhcp_create_msg>
 801a4c8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801a4ca:	69bb      	ldr	r3, [r7, #24]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d030      	beq.n	801a532 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a4d0:	69bb      	ldr	r3, [r7, #24]
 801a4d2:	685b      	ldr	r3, [r3, #4]
 801a4d4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801a4d6:	89f8      	ldrh	r0, [r7, #14]
 801a4d8:	697b      	ldr	r3, [r7, #20]
 801a4da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a4de:	2304      	movs	r3, #4
 801a4e0:	2236      	movs	r2, #54	; 0x36
 801a4e2:	f000 f85f 	bl	801a5a4 <dhcp_option>
 801a4e6:	4603      	mov	r3, r0
 801a4e8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801a4ea:	89fc      	ldrh	r4, [r7, #14]
 801a4ec:	697b      	ldr	r3, [r7, #20]
 801a4ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a4f2:	693b      	ldr	r3, [r7, #16]
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	f7f4 fe6e 	bl	800f1d6 <lwip_htonl>
 801a4fa:	4603      	mov	r3, r0
 801a4fc:	461a      	mov	r2, r3
 801a4fe:	4629      	mov	r1, r5
 801a500:	4620      	mov	r0, r4
 801a502:	f000 f8db 	bl	801a6bc <dhcp_option_long>
 801a506:	4603      	mov	r3, r0
 801a508:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a50a:	89f8      	ldrh	r0, [r7, #14]
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	33f0      	adds	r3, #240	; 0xf0
 801a510:	69ba      	ldr	r2, [r7, #24]
 801a512:	4619      	mov	r1, r3
 801a514:	f000 fdcc 	bl	801b0b0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a518:	4b13      	ldr	r3, [pc, #76]	; (801a568 <dhcp_release_and_stop+0x12c>)
 801a51a:	6818      	ldr	r0, [r3, #0]
 801a51c:	f107 0210 	add.w	r2, r7, #16
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	9300      	str	r3, [sp, #0]
 801a524:	2343      	movs	r3, #67	; 0x43
 801a526:	69b9      	ldr	r1, [r7, #24]
 801a528:	f7fe fbf8 	bl	8018d1c <udp_sendto_if>
      pbuf_free(p_out);
 801a52c:	69b8      	ldr	r0, [r7, #24]
 801a52e:	f7f7 f9fd 	bl	801192c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a532:	4b0e      	ldr	r3, [pc, #56]	; (801a56c <dhcp_release_and_stop+0x130>)
 801a534:	4a0d      	ldr	r2, [pc, #52]	; (801a56c <dhcp_release_and_stop+0x130>)
 801a536:	490d      	ldr	r1, [pc, #52]	; (801a56c <dhcp_release_and_stop+0x130>)
 801a538:	6878      	ldr	r0, [r7, #4]
 801a53a:	f7f6 fcb7 	bl	8010eac <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801a53e:	2100      	movs	r1, #0
 801a540:	69f8      	ldr	r0, [r7, #28]
 801a542:	f000 f815 	bl	801a570 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801a546:	69fb      	ldr	r3, [r7, #28]
 801a548:	791b      	ldrb	r3, [r3, #4]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d008      	beq.n	801a560 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a54e:	f7fe ff65 	bl	801941c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801a552:	69fb      	ldr	r3, [r7, #28]
 801a554:	2200      	movs	r2, #0
 801a556:	711a      	strb	r2, [r3, #4]
 801a558:	e002      	b.n	801a560 <dhcp_release_and_stop+0x124>
    return;
 801a55a:	bf00      	nop
 801a55c:	e000      	b.n	801a560 <dhcp_release_and_stop+0x124>
    return;
 801a55e:	bf00      	nop
  }
}
 801a560:	3720      	adds	r7, #32
 801a562:	46bd      	mov	sp, r7
 801a564:	bdb0      	pop	{r4, r5, r7, pc}
 801a566:	bf00      	nop
 801a568:	200143a0 	.word	0x200143a0
 801a56c:	080266c0 	.word	0x080266c0

0801a570 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801a570:	b480      	push	{r7}
 801a572:	b083      	sub	sp, #12
 801a574:	af00      	add	r7, sp, #0
 801a576:	6078      	str	r0, [r7, #4]
 801a578:	460b      	mov	r3, r1
 801a57a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	795b      	ldrb	r3, [r3, #5]
 801a580:	78fa      	ldrb	r2, [r7, #3]
 801a582:	429a      	cmp	r2, r3
 801a584:	d008      	beq.n	801a598 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	78fa      	ldrb	r2, [r7, #3]
 801a58a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	2200      	movs	r2, #0
 801a590:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	2200      	movs	r2, #0
 801a596:	811a      	strh	r2, [r3, #8]
  }
}
 801a598:	bf00      	nop
 801a59a:	370c      	adds	r7, #12
 801a59c:	46bd      	mov	sp, r7
 801a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a2:	4770      	bx	lr

0801a5a4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b082      	sub	sp, #8
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6039      	str	r1, [r7, #0]
 801a5ac:	4611      	mov	r1, r2
 801a5ae:	461a      	mov	r2, r3
 801a5b0:	4603      	mov	r3, r0
 801a5b2:	80fb      	strh	r3, [r7, #6]
 801a5b4:	460b      	mov	r3, r1
 801a5b6:	717b      	strb	r3, [r7, #5]
 801a5b8:	4613      	mov	r3, r2
 801a5ba:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801a5bc:	88fa      	ldrh	r2, [r7, #6]
 801a5be:	793b      	ldrb	r3, [r7, #4]
 801a5c0:	4413      	add	r3, r2
 801a5c2:	3302      	adds	r3, #2
 801a5c4:	2b44      	cmp	r3, #68	; 0x44
 801a5c6:	d906      	bls.n	801a5d6 <dhcp_option+0x32>
 801a5c8:	4b0d      	ldr	r3, [pc, #52]	; (801a600 <dhcp_option+0x5c>)
 801a5ca:	f240 529a 	movw	r2, #1434	; 0x59a
 801a5ce:	490d      	ldr	r1, [pc, #52]	; (801a604 <dhcp_option+0x60>)
 801a5d0:	480d      	ldr	r0, [pc, #52]	; (801a608 <dhcp_option+0x64>)
 801a5d2:	f004 fa53 	bl	801ea7c <iprintf>
  options[options_out_len++] = option_type;
 801a5d6:	88fb      	ldrh	r3, [r7, #6]
 801a5d8:	1c5a      	adds	r2, r3, #1
 801a5da:	80fa      	strh	r2, [r7, #6]
 801a5dc:	461a      	mov	r2, r3
 801a5de:	683b      	ldr	r3, [r7, #0]
 801a5e0:	4413      	add	r3, r2
 801a5e2:	797a      	ldrb	r2, [r7, #5]
 801a5e4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801a5e6:	88fb      	ldrh	r3, [r7, #6]
 801a5e8:	1c5a      	adds	r2, r3, #1
 801a5ea:	80fa      	strh	r2, [r7, #6]
 801a5ec:	461a      	mov	r2, r3
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	4413      	add	r3, r2
 801a5f2:	793a      	ldrb	r2, [r7, #4]
 801a5f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a5f6:	88fb      	ldrh	r3, [r7, #6]
}
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	3708      	adds	r7, #8
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd80      	pop	{r7, pc}
 801a600:	08025968 	.word	0x08025968
 801a604:	08025afc 	.word	0x08025afc
 801a608:	080259c8 	.word	0x080259c8

0801a60c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	b082      	sub	sp, #8
 801a610:	af00      	add	r7, sp, #0
 801a612:	4603      	mov	r3, r0
 801a614:	6039      	str	r1, [r7, #0]
 801a616:	80fb      	strh	r3, [r7, #6]
 801a618:	4613      	mov	r3, r2
 801a61a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801a61c:	88fb      	ldrh	r3, [r7, #6]
 801a61e:	2b43      	cmp	r3, #67	; 0x43
 801a620:	d906      	bls.n	801a630 <dhcp_option_byte+0x24>
 801a622:	4b0a      	ldr	r3, [pc, #40]	; (801a64c <dhcp_option_byte+0x40>)
 801a624:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801a628:	4909      	ldr	r1, [pc, #36]	; (801a650 <dhcp_option_byte+0x44>)
 801a62a:	480a      	ldr	r0, [pc, #40]	; (801a654 <dhcp_option_byte+0x48>)
 801a62c:	f004 fa26 	bl	801ea7c <iprintf>
  options[options_out_len++] = value;
 801a630:	88fb      	ldrh	r3, [r7, #6]
 801a632:	1c5a      	adds	r2, r3, #1
 801a634:	80fa      	strh	r2, [r7, #6]
 801a636:	461a      	mov	r2, r3
 801a638:	683b      	ldr	r3, [r7, #0]
 801a63a:	4413      	add	r3, r2
 801a63c:	797a      	ldrb	r2, [r7, #5]
 801a63e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a640:	88fb      	ldrh	r3, [r7, #6]
}
 801a642:	4618      	mov	r0, r3
 801a644:	3708      	adds	r7, #8
 801a646:	46bd      	mov	sp, r7
 801a648:	bd80      	pop	{r7, pc}
 801a64a:	bf00      	nop
 801a64c:	08025968 	.word	0x08025968
 801a650:	08025b40 	.word	0x08025b40
 801a654:	080259c8 	.word	0x080259c8

0801a658 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801a658:	b580      	push	{r7, lr}
 801a65a:	b082      	sub	sp, #8
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	4603      	mov	r3, r0
 801a660:	6039      	str	r1, [r7, #0]
 801a662:	80fb      	strh	r3, [r7, #6]
 801a664:	4613      	mov	r3, r2
 801a666:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801a668:	88fb      	ldrh	r3, [r7, #6]
 801a66a:	3302      	adds	r3, #2
 801a66c:	2b44      	cmp	r3, #68	; 0x44
 801a66e:	d906      	bls.n	801a67e <dhcp_option_short+0x26>
 801a670:	4b0f      	ldr	r3, [pc, #60]	; (801a6b0 <dhcp_option_short+0x58>)
 801a672:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801a676:	490f      	ldr	r1, [pc, #60]	; (801a6b4 <dhcp_option_short+0x5c>)
 801a678:	480f      	ldr	r0, [pc, #60]	; (801a6b8 <dhcp_option_short+0x60>)
 801a67a:	f004 f9ff 	bl	801ea7c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801a67e:	88bb      	ldrh	r3, [r7, #4]
 801a680:	0a1b      	lsrs	r3, r3, #8
 801a682:	b29a      	uxth	r2, r3
 801a684:	88fb      	ldrh	r3, [r7, #6]
 801a686:	1c59      	adds	r1, r3, #1
 801a688:	80f9      	strh	r1, [r7, #6]
 801a68a:	4619      	mov	r1, r3
 801a68c:	683b      	ldr	r3, [r7, #0]
 801a68e:	440b      	add	r3, r1
 801a690:	b2d2      	uxtb	r2, r2
 801a692:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801a694:	88fb      	ldrh	r3, [r7, #6]
 801a696:	1c5a      	adds	r2, r3, #1
 801a698:	80fa      	strh	r2, [r7, #6]
 801a69a:	461a      	mov	r2, r3
 801a69c:	683b      	ldr	r3, [r7, #0]
 801a69e:	4413      	add	r3, r2
 801a6a0:	88ba      	ldrh	r2, [r7, #4]
 801a6a2:	b2d2      	uxtb	r2, r2
 801a6a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a6a6:	88fb      	ldrh	r3, [r7, #6]
}
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	3708      	adds	r7, #8
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd80      	pop	{r7, pc}
 801a6b0:	08025968 	.word	0x08025968
 801a6b4:	08025b78 	.word	0x08025b78
 801a6b8:	080259c8 	.word	0x080259c8

0801a6bc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b084      	sub	sp, #16
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	60b9      	str	r1, [r7, #8]
 801a6c6:	607a      	str	r2, [r7, #4]
 801a6c8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801a6ca:	89fb      	ldrh	r3, [r7, #14]
 801a6cc:	3304      	adds	r3, #4
 801a6ce:	2b44      	cmp	r3, #68	; 0x44
 801a6d0:	d906      	bls.n	801a6e0 <dhcp_option_long+0x24>
 801a6d2:	4b19      	ldr	r3, [pc, #100]	; (801a738 <dhcp_option_long+0x7c>)
 801a6d4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801a6d8:	4918      	ldr	r1, [pc, #96]	; (801a73c <dhcp_option_long+0x80>)
 801a6da:	4819      	ldr	r0, [pc, #100]	; (801a740 <dhcp_option_long+0x84>)
 801a6dc:	f004 f9ce 	bl	801ea7c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	0e1a      	lsrs	r2, r3, #24
 801a6e4:	89fb      	ldrh	r3, [r7, #14]
 801a6e6:	1c59      	adds	r1, r3, #1
 801a6e8:	81f9      	strh	r1, [r7, #14]
 801a6ea:	4619      	mov	r1, r3
 801a6ec:	68bb      	ldr	r3, [r7, #8]
 801a6ee:	440b      	add	r3, r1
 801a6f0:	b2d2      	uxtb	r2, r2
 801a6f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	0c1a      	lsrs	r2, r3, #16
 801a6f8:	89fb      	ldrh	r3, [r7, #14]
 801a6fa:	1c59      	adds	r1, r3, #1
 801a6fc:	81f9      	strh	r1, [r7, #14]
 801a6fe:	4619      	mov	r1, r3
 801a700:	68bb      	ldr	r3, [r7, #8]
 801a702:	440b      	add	r3, r1
 801a704:	b2d2      	uxtb	r2, r2
 801a706:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	0a1a      	lsrs	r2, r3, #8
 801a70c:	89fb      	ldrh	r3, [r7, #14]
 801a70e:	1c59      	adds	r1, r3, #1
 801a710:	81f9      	strh	r1, [r7, #14]
 801a712:	4619      	mov	r1, r3
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	440b      	add	r3, r1
 801a718:	b2d2      	uxtb	r2, r2
 801a71a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801a71c:	89fb      	ldrh	r3, [r7, #14]
 801a71e:	1c5a      	adds	r2, r3, #1
 801a720:	81fa      	strh	r2, [r7, #14]
 801a722:	461a      	mov	r2, r3
 801a724:	68bb      	ldr	r3, [r7, #8]
 801a726:	4413      	add	r3, r2
 801a728:	687a      	ldr	r2, [r7, #4]
 801a72a:	b2d2      	uxtb	r2, r2
 801a72c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a72e:	89fb      	ldrh	r3, [r7, #14]
}
 801a730:	4618      	mov	r0, r3
 801a732:	3710      	adds	r7, #16
 801a734:	46bd      	mov	sp, r7
 801a736:	bd80      	pop	{r7, pc}
 801a738:	08025968 	.word	0x08025968
 801a73c:	08025bb4 	.word	0x08025bb4
 801a740:	080259c8 	.word	0x080259c8

0801a744 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b092      	sub	sp, #72	; 0x48
 801a748:	af00      	add	r7, sp, #0
 801a74a:	6078      	str	r0, [r7, #4]
 801a74c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801a74e:	2300      	movs	r3, #0
 801a750:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 801a752:	2300      	movs	r3, #0
 801a754:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801a756:	220a      	movs	r2, #10
 801a758:	2100      	movs	r1, #0
 801a75a:	48bd      	ldr	r0, [pc, #756]	; (801aa50 <dhcp_parse_reply+0x30c>)
 801a75c:	f003 fc72 	bl	801e044 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	895b      	ldrh	r3, [r3, #10]
 801a764:	2b2b      	cmp	r3, #43	; 0x2b
 801a766:	d802      	bhi.n	801a76e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801a768:	f06f 0301 	mvn.w	r3, #1
 801a76c:	e2fb      	b.n	801ad66 <dhcp_parse_reply+0x622>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	685b      	ldr	r3, [r3, #4]
 801a772:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801a774:	23f0      	movs	r3, #240	; 0xf0
 801a776:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	891b      	ldrh	r3, [r3, #8]
 801a77c:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801a782:	e00c      	b.n	801a79e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801a784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a786:	895b      	ldrh	r3, [r3, #10]
 801a788:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801a78a:	1ad3      	subs	r3, r2, r3
 801a78c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801a78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a790:	895b      	ldrh	r3, [r3, #10]
 801a792:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a794:	1ad3      	subs	r3, r2, r3
 801a796:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 801a798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801a79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d004      	beq.n	801a7ae <dhcp_parse_reply+0x6a>
 801a7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7a6:	895b      	ldrh	r3, [r3, #10]
 801a7a8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801a7aa:	429a      	cmp	r2, r3
 801a7ac:	d2ea      	bcs.n	801a784 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801a7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d102      	bne.n	801a7ba <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801a7b4:	f06f 0301 	mvn.w	r3, #1
 801a7b8:	e2d5      	b.n	801ad66 <dhcp_parse_reply+0x622>
  }
  offset = options_idx;
 801a7ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a7bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 801a7c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a7c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 801a7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7c6:	685b      	ldr	r3, [r3, #4]
 801a7c8:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a7ca:	e275      	b.n	801acb8 <dhcp_parse_reply+0x574>
    u8_t op = options[offset];
 801a7cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a7d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a7d2:	4413      	add	r3, r2
 801a7d4:	781b      	ldrb	r3, [r3, #0]
 801a7d6:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 801a7d8:	2300      	movs	r3, #0
 801a7da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 801a7de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a7e2:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 801a7e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a7e8:	3302      	adds	r3, #2
 801a7ea:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 801a7ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a7ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a7f2:	429a      	cmp	r2, r3
 801a7f4:	d202      	bcs.n	801a7fc <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 801a7f6:	f06f 0301 	mvn.w	r3, #1
 801a7fa:	e2b4      	b.n	801ad66 <dhcp_parse_reply+0x622>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801a7fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a800:	3301      	adds	r3, #1
 801a802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a804:	8952      	ldrh	r2, [r2, #10]
 801a806:	4293      	cmp	r3, r2
 801a808:	da08      	bge.n	801a81c <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 801a80a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a80e:	3301      	adds	r3, #1
 801a810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a812:	4413      	add	r3, r2
 801a814:	781b      	ldrb	r3, [r3, #0]
 801a816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a81a:	e00b      	b.n	801a834 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801a81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	2b00      	cmp	r3, #0
 801a822:	d004      	beq.n	801a82e <dhcp_parse_reply+0xea>
 801a824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	685b      	ldr	r3, [r3, #4]
 801a82a:	781b      	ldrb	r3, [r3, #0]
 801a82c:	e000      	b.n	801a830 <dhcp_parse_reply+0xec>
 801a82e:	2300      	movs	r3, #0
 801a830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801a834:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a838:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 801a83c:	7efb      	ldrb	r3, [r7, #27]
 801a83e:	2b3b      	cmp	r3, #59	; 0x3b
 801a840:	f200 815a 	bhi.w	801aaf8 <dhcp_parse_reply+0x3b4>
 801a844:	a201      	add	r2, pc, #4	; (adr r2, 801a84c <dhcp_parse_reply+0x108>)
 801a846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a84a:	bf00      	nop
 801a84c:	0801a93d 	.word	0x0801a93d
 801a850:	0801a94d 	.word	0x0801a94d
 801a854:	0801aaf9 	.word	0x0801aaf9
 801a858:	0801a96f 	.word	0x0801a96f
 801a85c:	0801aaf9 	.word	0x0801aaf9
 801a860:	0801aaf9 	.word	0x0801aaf9
 801a864:	0801a99b 	.word	0x0801a99b
 801a868:	0801aaf9 	.word	0x0801aaf9
 801a86c:	0801aaf9 	.word	0x0801aaf9
 801a870:	0801aaf9 	.word	0x0801aaf9
 801a874:	0801aaf9 	.word	0x0801aaf9
 801a878:	0801aaf9 	.word	0x0801aaf9
 801a87c:	0801aaf9 	.word	0x0801aaf9
 801a880:	0801aaf9 	.word	0x0801aaf9
 801a884:	0801aaf9 	.word	0x0801aaf9
 801a888:	0801aaf9 	.word	0x0801aaf9
 801a88c:	0801aaf9 	.word	0x0801aaf9
 801a890:	0801aaf9 	.word	0x0801aaf9
 801a894:	0801aaf9 	.word	0x0801aaf9
 801a898:	0801aaf9 	.word	0x0801aaf9
 801a89c:	0801aaf9 	.word	0x0801aaf9
 801a8a0:	0801aaf9 	.word	0x0801aaf9
 801a8a4:	0801aaf9 	.word	0x0801aaf9
 801a8a8:	0801aaf9 	.word	0x0801aaf9
 801a8ac:	0801aaf9 	.word	0x0801aaf9
 801a8b0:	0801aaf9 	.word	0x0801aaf9
 801a8b4:	0801aaf9 	.word	0x0801aaf9
 801a8b8:	0801aaf9 	.word	0x0801aaf9
 801a8bc:	0801aaf9 	.word	0x0801aaf9
 801a8c0:	0801aaf9 	.word	0x0801aaf9
 801a8c4:	0801aaf9 	.word	0x0801aaf9
 801a8c8:	0801aaf9 	.word	0x0801aaf9
 801a8cc:	0801aaf9 	.word	0x0801aaf9
 801a8d0:	0801aaf9 	.word	0x0801aaf9
 801a8d4:	0801aaf9 	.word	0x0801aaf9
 801a8d8:	0801aaf9 	.word	0x0801aaf9
 801a8dc:	0801aaf9 	.word	0x0801aaf9
 801a8e0:	0801aaf9 	.word	0x0801aaf9
 801a8e4:	0801aaf9 	.word	0x0801aaf9
 801a8e8:	0801aaf9 	.word	0x0801aaf9
 801a8ec:	0801aaf9 	.word	0x0801aaf9
 801a8f0:	0801aaf9 	.word	0x0801aaf9
 801a8f4:	0801aaf9 	.word	0x0801aaf9
 801a8f8:	0801aaf9 	.word	0x0801aaf9
 801a8fc:	0801aaf9 	.word	0x0801aaf9
 801a900:	0801aaf9 	.word	0x0801aaf9
 801a904:	0801aaf9 	.word	0x0801aaf9
 801a908:	0801aaf9 	.word	0x0801aaf9
 801a90c:	0801aaf9 	.word	0x0801aaf9
 801a910:	0801aaf9 	.word	0x0801aaf9
 801a914:	0801aaf9 	.word	0x0801aaf9
 801a918:	0801a9f1 	.word	0x0801a9f1
 801a91c:	0801aa13 	.word	0x0801aa13
 801a920:	0801aa71 	.word	0x0801aa71
 801a924:	0801aa93 	.word	0x0801aa93
 801a928:	0801aaf9 	.word	0x0801aaf9
 801a92c:	0801aaf9 	.word	0x0801aaf9
 801a930:	0801aaf9 	.word	0x0801aaf9
 801a934:	0801aab5 	.word	0x0801aab5
 801a938:	0801aad7 	.word	0x0801aad7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801a93c:	2300      	movs	r3, #0
 801a93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a946:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 801a94a:	e0d9      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a94c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a950:	2b04      	cmp	r3, #4
 801a952:	d009      	beq.n	801a968 <dhcp_parse_reply+0x224>
 801a954:	4b3f      	ldr	r3, [pc, #252]	; (801aa54 <dhcp_parse_reply+0x310>)
 801a956:	f240 622e 	movw	r2, #1582	; 0x62e
 801a95a:	493f      	ldr	r1, [pc, #252]	; (801aa58 <dhcp_parse_reply+0x314>)
 801a95c:	483f      	ldr	r0, [pc, #252]	; (801aa5c <dhcp_parse_reply+0x318>)
 801a95e:	f004 f88d 	bl	801ea7c <iprintf>
 801a962:	f06f 0305 	mvn.w	r3, #5
 801a966:	e1fe      	b.n	801ad66 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801a968:	2306      	movs	r3, #6
 801a96a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a96c:	e0c8      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801a96e:	2304      	movs	r3, #4
 801a970:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a974:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801a978:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801a97c:	429a      	cmp	r2, r3
 801a97e:	d209      	bcs.n	801a994 <dhcp_parse_reply+0x250>
 801a980:	4b34      	ldr	r3, [pc, #208]	; (801aa54 <dhcp_parse_reply+0x310>)
 801a982:	f240 6233 	movw	r2, #1587	; 0x633
 801a986:	4936      	ldr	r1, [pc, #216]	; (801aa60 <dhcp_parse_reply+0x31c>)
 801a988:	4834      	ldr	r0, [pc, #208]	; (801aa5c <dhcp_parse_reply+0x318>)
 801a98a:	f004 f877 	bl	801ea7c <iprintf>
 801a98e:	f06f 0305 	mvn.w	r3, #5
 801a992:	e1e8      	b.n	801ad66 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801a994:	2307      	movs	r3, #7
 801a996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a998:	e0b2      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801a99a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a99e:	f003 0303 	and.w	r3, r3, #3
 801a9a2:	b2db      	uxtb	r3, r3
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d009      	beq.n	801a9bc <dhcp_parse_reply+0x278>
 801a9a8:	4b2a      	ldr	r3, [pc, #168]	; (801aa54 <dhcp_parse_reply+0x310>)
 801a9aa:	f240 6239 	movw	r2, #1593	; 0x639
 801a9ae:	492d      	ldr	r1, [pc, #180]	; (801aa64 <dhcp_parse_reply+0x320>)
 801a9b0:	482a      	ldr	r0, [pc, #168]	; (801aa5c <dhcp_parse_reply+0x318>)
 801a9b2:	f004 f863 	bl	801ea7c <iprintf>
 801a9b6:	f06f 0305 	mvn.w	r3, #5
 801a9ba:	e1d4      	b.n	801ad66 <dhcp_parse_reply+0x622>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801a9bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a9c0:	2b08      	cmp	r3, #8
 801a9c2:	bf28      	it	cs
 801a9c4:	2308      	movcs	r3, #8
 801a9c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a9ca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801a9ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801a9d2:	429a      	cmp	r2, r3
 801a9d4:	d209      	bcs.n	801a9ea <dhcp_parse_reply+0x2a6>
 801a9d6:	4b1f      	ldr	r3, [pc, #124]	; (801aa54 <dhcp_parse_reply+0x310>)
 801a9d8:	f240 623c 	movw	r2, #1596	; 0x63c
 801a9dc:	4920      	ldr	r1, [pc, #128]	; (801aa60 <dhcp_parse_reply+0x31c>)
 801a9de:	481f      	ldr	r0, [pc, #124]	; (801aa5c <dhcp_parse_reply+0x318>)
 801a9e0:	f004 f84c 	bl	801ea7c <iprintf>
 801a9e4:	f06f 0305 	mvn.w	r3, #5
 801a9e8:	e1bd      	b.n	801ad66 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801a9ea:	2308      	movs	r3, #8
 801a9ec:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801a9ee:	e087      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a9f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a9f4:	2b04      	cmp	r3, #4
 801a9f6:	d009      	beq.n	801aa0c <dhcp_parse_reply+0x2c8>
 801a9f8:	4b16      	ldr	r3, [pc, #88]	; (801aa54 <dhcp_parse_reply+0x310>)
 801a9fa:	f240 6241 	movw	r2, #1601	; 0x641
 801a9fe:	4916      	ldr	r1, [pc, #88]	; (801aa58 <dhcp_parse_reply+0x314>)
 801aa00:	4816      	ldr	r0, [pc, #88]	; (801aa5c <dhcp_parse_reply+0x318>)
 801aa02:	f004 f83b 	bl	801ea7c <iprintf>
 801aa06:	f06f 0305 	mvn.w	r3, #5
 801aa0a:	e1ac      	b.n	801ad66 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801aa0c:	2303      	movs	r3, #3
 801aa0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aa10:	e076      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801aa12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aa16:	2b01      	cmp	r3, #1
 801aa18:	d009      	beq.n	801aa2e <dhcp_parse_reply+0x2ea>
 801aa1a:	4b0e      	ldr	r3, [pc, #56]	; (801aa54 <dhcp_parse_reply+0x310>)
 801aa1c:	f240 624f 	movw	r2, #1615	; 0x64f
 801aa20:	4911      	ldr	r1, [pc, #68]	; (801aa68 <dhcp_parse_reply+0x324>)
 801aa22:	480e      	ldr	r0, [pc, #56]	; (801aa5c <dhcp_parse_reply+0x318>)
 801aa24:	f004 f82a 	bl	801ea7c <iprintf>
 801aa28:	f06f 0305 	mvn.w	r3, #5
 801aa2c:	e19b      	b.n	801ad66 <dhcp_parse_reply+0x622>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801aa2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aa30:	2bf0      	cmp	r3, #240	; 0xf0
 801aa32:	d009      	beq.n	801aa48 <dhcp_parse_reply+0x304>
 801aa34:	4b07      	ldr	r3, [pc, #28]	; (801aa54 <dhcp_parse_reply+0x310>)
 801aa36:	f240 6251 	movw	r2, #1617	; 0x651
 801aa3a:	490c      	ldr	r1, [pc, #48]	; (801aa6c <dhcp_parse_reply+0x328>)
 801aa3c:	4807      	ldr	r0, [pc, #28]	; (801aa5c <dhcp_parse_reply+0x318>)
 801aa3e:	f004 f81d 	bl	801ea7c <iprintf>
 801aa42:	f06f 0305 	mvn.w	r3, #5
 801aa46:	e18e      	b.n	801ad66 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801aa48:	2300      	movs	r3, #0
 801aa4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aa4c:	e058      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
 801aa4e:	bf00      	nop
 801aa50:	2001b0e4 	.word	0x2001b0e4
 801aa54:	08025968 	.word	0x08025968
 801aa58:	08025bf0 	.word	0x08025bf0
 801aa5c:	080259c8 	.word	0x080259c8
 801aa60:	08025bfc 	.word	0x08025bfc
 801aa64:	08025c10 	.word	0x08025c10
 801aa68:	08025c20 	.word	0x08025c20
 801aa6c:	08025c2c 	.word	0x08025c2c
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801aa70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aa74:	2b01      	cmp	r3, #1
 801aa76:	d009      	beq.n	801aa8c <dhcp_parse_reply+0x348>
 801aa78:	4bab      	ldr	r3, [pc, #684]	; (801ad28 <dhcp_parse_reply+0x5e4>)
 801aa7a:	f240 6255 	movw	r2, #1621	; 0x655
 801aa7e:	49ab      	ldr	r1, [pc, #684]	; (801ad2c <dhcp_parse_reply+0x5e8>)
 801aa80:	48ab      	ldr	r0, [pc, #684]	; (801ad30 <dhcp_parse_reply+0x5ec>)
 801aa82:	f003 fffb 	bl	801ea7c <iprintf>
 801aa86:	f06f 0305 	mvn.w	r3, #5
 801aa8a:	e16c      	b.n	801ad66 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801aa8c:	2301      	movs	r3, #1
 801aa8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aa90:	e036      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801aa92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aa96:	2b04      	cmp	r3, #4
 801aa98:	d009      	beq.n	801aaae <dhcp_parse_reply+0x36a>
 801aa9a:	4ba3      	ldr	r3, [pc, #652]	; (801ad28 <dhcp_parse_reply+0x5e4>)
 801aa9c:	f240 6259 	movw	r2, #1625	; 0x659
 801aaa0:	49a4      	ldr	r1, [pc, #656]	; (801ad34 <dhcp_parse_reply+0x5f0>)
 801aaa2:	48a3      	ldr	r0, [pc, #652]	; (801ad30 <dhcp_parse_reply+0x5ec>)
 801aaa4:	f003 ffea 	bl	801ea7c <iprintf>
 801aaa8:	f06f 0305 	mvn.w	r3, #5
 801aaac:	e15b      	b.n	801ad66 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801aaae:	2302      	movs	r3, #2
 801aab0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aab2:	e025      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801aab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aab8:	2b04      	cmp	r3, #4
 801aaba:	d009      	beq.n	801aad0 <dhcp_parse_reply+0x38c>
 801aabc:	4b9a      	ldr	r3, [pc, #616]	; (801ad28 <dhcp_parse_reply+0x5e4>)
 801aabe:	f240 625d 	movw	r2, #1629	; 0x65d
 801aac2:	499c      	ldr	r1, [pc, #624]	; (801ad34 <dhcp_parse_reply+0x5f0>)
 801aac4:	489a      	ldr	r0, [pc, #616]	; (801ad30 <dhcp_parse_reply+0x5ec>)
 801aac6:	f003 ffd9 	bl	801ea7c <iprintf>
 801aaca:	f06f 0305 	mvn.w	r3, #5
 801aace:	e14a      	b.n	801ad66 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_T1;
 801aad0:	2304      	movs	r3, #4
 801aad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aad4:	e014      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801aad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aada:	2b04      	cmp	r3, #4
 801aadc:	d009      	beq.n	801aaf2 <dhcp_parse_reply+0x3ae>
 801aade:	4b92      	ldr	r3, [pc, #584]	; (801ad28 <dhcp_parse_reply+0x5e4>)
 801aae0:	f240 6261 	movw	r2, #1633	; 0x661
 801aae4:	4993      	ldr	r1, [pc, #588]	; (801ad34 <dhcp_parse_reply+0x5f0>)
 801aae6:	4892      	ldr	r0, [pc, #584]	; (801ad30 <dhcp_parse_reply+0x5ec>)
 801aae8:	f003 ffc8 	bl	801ea7c <iprintf>
 801aaec:	f06f 0305 	mvn.w	r3, #5
 801aaf0:	e139      	b.n	801ad66 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_T2;
 801aaf2:	2305      	movs	r3, #5
 801aaf4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aaf6:	e003      	b.n	801ab00 <dhcp_parse_reply+0x3bc>
      default:
        decode_len = 0;
 801aaf8:	2300      	movs	r3, #0
 801aafa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801aafe:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801ab00:	7efb      	ldrb	r3, [r7, #27]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d105      	bne.n	801ab12 <dhcp_parse_reply+0x3ce>
      offset++;
 801ab06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ab0a:	3301      	adds	r3, #1
 801ab0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801ab10:	e0a4      	b.n	801ac5c <dhcp_parse_reply+0x518>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801ab12:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ab16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ab1a:	4413      	add	r3, r2
 801ab1c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801ab20:	4293      	cmp	r3, r2
 801ab22:	dd02      	ble.n	801ab2a <dhcp_parse_reply+0x3e6>
        /* overflow */
        return ERR_BUF;
 801ab24:	f06f 0301 	mvn.w	r3, #1
 801ab28:	e11d      	b.n	801ad66 <dhcp_parse_reply+0x622>
      }
      offset = (u16_t)(offset + len + 2);
 801ab2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ab2e:	b29a      	uxth	r2, r3
 801ab30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ab34:	4413      	add	r3, r2
 801ab36:	b29b      	uxth	r3, r3
 801ab38:	3302      	adds	r3, #2
 801ab3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 801ab3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	f000 808a 	beq.w	801ac5c <dhcp_parse_reply+0x518>
        u32_t value = 0;
 801ab48:	2300      	movs	r3, #0
 801ab4a:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	db02      	blt.n	801ab58 <dhcp_parse_reply+0x414>
 801ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab54:	2b09      	cmp	r3, #9
 801ab56:	dd06      	ble.n	801ab66 <dhcp_parse_reply+0x422>
 801ab58:	4b73      	ldr	r3, [pc, #460]	; (801ad28 <dhcp_parse_reply+0x5e4>)
 801ab5a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801ab5e:	4976      	ldr	r1, [pc, #472]	; (801ad38 <dhcp_parse_reply+0x5f4>)
 801ab60:	4873      	ldr	r0, [pc, #460]	; (801ad30 <dhcp_parse_reply+0x5ec>)
 801ab62:	f003 ff8b 	bl	801ea7c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801ab66:	4a75      	ldr	r2, [pc, #468]	; (801ad3c <dhcp_parse_reply+0x5f8>)
 801ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab6a:	4413      	add	r3, r2
 801ab6c:	781b      	ldrb	r3, [r3, #0]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d174      	bne.n	801ac5c <dhcp_parse_reply+0x518>
          copy_len = LWIP_MIN(decode_len, 4);
 801ab72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ab76:	2b04      	cmp	r3, #4
 801ab78:	bf28      	it	cs
 801ab7a:	2304      	movcs	r3, #4
 801ab7c:	b2db      	uxtb	r3, r3
 801ab7e:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801ab80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ab82:	8b3a      	ldrh	r2, [r7, #24]
 801ab84:	f107 010c 	add.w	r1, r7, #12
 801ab88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ab8a:	f7f7 f8d5 	bl	8011d38 <pbuf_copy_partial>
 801ab8e:	4603      	mov	r3, r0
 801ab90:	461a      	mov	r2, r3
 801ab92:	8b3b      	ldrh	r3, [r7, #24]
 801ab94:	4293      	cmp	r3, r2
 801ab96:	d002      	beq.n	801ab9e <dhcp_parse_reply+0x45a>
            return ERR_BUF;
 801ab98:	f06f 0301 	mvn.w	r3, #1
 801ab9c:	e0e3      	b.n	801ad66 <dhcp_parse_reply+0x622>
          }
          if (decode_len > 4) {
 801ab9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801aba2:	2b04      	cmp	r3, #4
 801aba4:	d933      	bls.n	801ac0e <dhcp_parse_reply+0x4ca>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801aba6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801abaa:	f003 0303 	and.w	r3, r3, #3
 801abae:	b2db      	uxtb	r3, r3
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d009      	beq.n	801abc8 <dhcp_parse_reply+0x484>
 801abb4:	4b5c      	ldr	r3, [pc, #368]	; (801ad28 <dhcp_parse_reply+0x5e4>)
 801abb6:	f240 6281 	movw	r2, #1665	; 0x681
 801abba:	4961      	ldr	r1, [pc, #388]	; (801ad40 <dhcp_parse_reply+0x5fc>)
 801abbc:	485c      	ldr	r0, [pc, #368]	; (801ad30 <dhcp_parse_reply+0x5ec>)
 801abbe:	f003 ff5d 	bl	801ea7c <iprintf>
 801abc2:	f06f 0305 	mvn.w	r3, #5
 801abc6:	e0ce      	b.n	801ad66 <dhcp_parse_reply+0x622>
            dhcp_got_option(dhcp, decode_idx);
 801abc8:	4a5c      	ldr	r2, [pc, #368]	; (801ad3c <dhcp_parse_reply+0x5f8>)
 801abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abcc:	4413      	add	r3, r2
 801abce:	2201      	movs	r2, #1
 801abd0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	4618      	mov	r0, r3
 801abd6:	f7f4 fafe 	bl	800f1d6 <lwip_htonl>
 801abda:	4602      	mov	r2, r0
 801abdc:	4959      	ldr	r1, [pc, #356]	; (801ad44 <dhcp_parse_reply+0x600>)
 801abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801abe4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801abe8:	3b04      	subs	r3, #4
 801abea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 801abee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801abf0:	3304      	adds	r3, #4
 801abf2:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801abf4:	8afa      	ldrh	r2, [r7, #22]
 801abf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801abf8:	429a      	cmp	r2, r3
 801abfa:	d202      	bcs.n	801ac02 <dhcp_parse_reply+0x4be>
              /* overflow */
              return ERR_BUF;
 801abfc:	f06f 0301 	mvn.w	r3, #1
 801ac00:	e0b1      	b.n	801ad66 <dhcp_parse_reply+0x622>
            }
            val_offset = next_val_offset;
 801ac02:	8afb      	ldrh	r3, [r7, #22]
 801ac04:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 801ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac08:	3301      	adds	r3, #1
 801ac0a:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 801ac0c:	e79e      	b.n	801ab4c <dhcp_parse_reply+0x408>
          } else if (decode_len == 4) {
 801ac0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ac12:	2b04      	cmp	r3, #4
 801ac14:	d106      	bne.n	801ac24 <dhcp_parse_reply+0x4e0>
            value = lwip_ntohl(value);
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	4618      	mov	r0, r3
 801ac1a:	f7f4 fadc 	bl	800f1d6 <lwip_htonl>
 801ac1e:	4603      	mov	r3, r0
 801ac20:	60fb      	str	r3, [r7, #12]
 801ac22:	e011      	b.n	801ac48 <dhcp_parse_reply+0x504>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801ac24:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ac28:	2b01      	cmp	r3, #1
 801ac2a:	d009      	beq.n	801ac40 <dhcp_parse_reply+0x4fc>
 801ac2c:	4b3e      	ldr	r3, [pc, #248]	; (801ad28 <dhcp_parse_reply+0x5e4>)
 801ac2e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801ac32:	4945      	ldr	r1, [pc, #276]	; (801ad48 <dhcp_parse_reply+0x604>)
 801ac34:	483e      	ldr	r0, [pc, #248]	; (801ad30 <dhcp_parse_reply+0x5ec>)
 801ac36:	f003 ff21 	bl	801ea7c <iprintf>
 801ac3a:	f06f 0305 	mvn.w	r3, #5
 801ac3e:	e092      	b.n	801ad66 <dhcp_parse_reply+0x622>
            value = ((u8_t *)&value)[0];
 801ac40:	f107 030c 	add.w	r3, r7, #12
 801ac44:	781b      	ldrb	r3, [r3, #0]
 801ac46:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 801ac48:	4a3c      	ldr	r2, [pc, #240]	; (801ad3c <dhcp_parse_reply+0x5f8>)
 801ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac4c:	4413      	add	r3, r2
 801ac4e:	2201      	movs	r2, #1
 801ac50:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801ac52:	68fa      	ldr	r2, [r7, #12]
 801ac54:	493b      	ldr	r1, [pc, #236]	; (801ad44 <dhcp_parse_reply+0x600>)
 801ac56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801ac5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac5e:	895b      	ldrh	r3, [r3, #10]
 801ac60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ac64:	429a      	cmp	r2, r3
 801ac66:	d327      	bcc.n	801acb8 <dhcp_parse_reply+0x574>
      offset = (u16_t)(offset - q->len);
 801ac68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac6a:	895b      	ldrh	r3, [r3, #10]
 801ac6c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ac70:	1ad3      	subs	r3, r2, r3
 801ac72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 801ac76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac78:	895b      	ldrh	r3, [r3, #10]
 801ac7a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ac7c:	1ad3      	subs	r3, r2, r3
 801ac7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 801ac80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ac84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ac86:	429a      	cmp	r2, r3
 801ac88:	d213      	bcs.n	801acb2 <dhcp_parse_reply+0x56e>
        q = q->next;
 801ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d109      	bne.n	801acaa <dhcp_parse_reply+0x566>
 801ac96:	4b24      	ldr	r3, [pc, #144]	; (801ad28 <dhcp_parse_reply+0x5e4>)
 801ac98:	f240 629d 	movw	r2, #1693	; 0x69d
 801ac9c:	492b      	ldr	r1, [pc, #172]	; (801ad4c <dhcp_parse_reply+0x608>)
 801ac9e:	4824      	ldr	r0, [pc, #144]	; (801ad30 <dhcp_parse_reply+0x5ec>)
 801aca0:	f003 feec 	bl	801ea7c <iprintf>
 801aca4:	f06f 0305 	mvn.w	r3, #5
 801aca8:	e05d      	b.n	801ad66 <dhcp_parse_reply+0x622>
        options = (u8_t *)q->payload;
 801acaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acac:	685b      	ldr	r3, [r3, #4]
 801acae:	643b      	str	r3, [r7, #64]	; 0x40
 801acb0:	e002      	b.n	801acb8 <dhcp_parse_reply+0x574>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801acb2:	f06f 0301 	mvn.w	r3, #1
 801acb6:	e056      	b.n	801ad66 <dhcp_parse_reply+0x622>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801acb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d00c      	beq.n	801acd8 <dhcp_parse_reply+0x594>
 801acbe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801acc2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801acc4:	429a      	cmp	r2, r3
 801acc6:	d207      	bcs.n	801acd8 <dhcp_parse_reply+0x594>
 801acc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801accc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801acce:	4413      	add	r3, r2
 801acd0:	781b      	ldrb	r3, [r3, #0]
 801acd2:	2bff      	cmp	r3, #255	; 0xff
 801acd4:	f47f ad7a 	bne.w	801a7cc <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801acd8:	4b18      	ldr	r3, [pc, #96]	; (801ad3c <dhcp_parse_reply+0x5f8>)
 801acda:	781b      	ldrb	r3, [r3, #0]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d018      	beq.n	801ad12 <dhcp_parse_reply+0x5ce>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ace0:	4b18      	ldr	r3, [pc, #96]	; (801ad44 <dhcp_parse_reply+0x600>)
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ace6:	4b15      	ldr	r3, [pc, #84]	; (801ad3c <dhcp_parse_reply+0x5f8>)
 801ace8:	2200      	movs	r2, #0
 801acea:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801acec:	693b      	ldr	r3, [r7, #16]
 801acee:	2b01      	cmp	r3, #1
 801acf0:	d102      	bne.n	801acf8 <dhcp_parse_reply+0x5b4>
      parse_file_as_options = 1;
 801acf2:	2301      	movs	r3, #1
 801acf4:	633b      	str	r3, [r7, #48]	; 0x30
 801acf6:	e00c      	b.n	801ad12 <dhcp_parse_reply+0x5ce>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801acf8:	693b      	ldr	r3, [r7, #16]
 801acfa:	2b02      	cmp	r3, #2
 801acfc:	d102      	bne.n	801ad04 <dhcp_parse_reply+0x5c0>
      parse_sname_as_options = 1;
 801acfe:	2301      	movs	r3, #1
 801ad00:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ad02:	e006      	b.n	801ad12 <dhcp_parse_reply+0x5ce>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801ad04:	693b      	ldr	r3, [r7, #16]
 801ad06:	2b03      	cmp	r3, #3
 801ad08:	d103      	bne.n	801ad12 <dhcp_parse_reply+0x5ce>
      parse_sname_as_options = 1;
 801ad0a:	2301      	movs	r3, #1
 801ad0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 801ad0e:	2301      	movs	r3, #1
 801ad10:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d01b      	beq.n	801ad50 <dhcp_parse_reply+0x60c>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801ad18:	2300      	movs	r3, #0
 801ad1a:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 801ad1c:	236c      	movs	r3, #108	; 0x6c
 801ad1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801ad20:	23ec      	movs	r3, #236	; 0xec
 801ad22:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801ad24:	e52b      	b.n	801a77e <dhcp_parse_reply+0x3a>
 801ad26:	bf00      	nop
 801ad28:	08025968 	.word	0x08025968
 801ad2c:	08025c20 	.word	0x08025c20
 801ad30:	080259c8 	.word	0x080259c8
 801ad34:	08025bf0 	.word	0x08025bf0
 801ad38:	08025c44 	.word	0x08025c44
 801ad3c:	2001b0e4 	.word	0x2001b0e4
 801ad40:	08025c58 	.word	0x08025c58
 801ad44:	2001b0f0 	.word	0x2001b0f0
 801ad48:	08025c70 	.word	0x08025c70
 801ad4c:	08025c84 	.word	0x08025c84
  } else if (parse_sname_as_options) {
 801ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d006      	beq.n	801ad64 <dhcp_parse_reply+0x620>
    parse_sname_as_options = 0;
 801ad56:	2300      	movs	r3, #0
 801ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 801ad5a:	232c      	movs	r3, #44	; 0x2c
 801ad5c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801ad5e:	236c      	movs	r3, #108	; 0x6c
 801ad60:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 801ad62:	e50c      	b.n	801a77e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801ad64:	2300      	movs	r3, #0
}
 801ad66:	4618      	mov	r0, r3
 801ad68:	3748      	adds	r7, #72	; 0x48
 801ad6a:	46bd      	mov	sp, r7
 801ad6c:	bd80      	pop	{r7, pc}
 801ad6e:	bf00      	nop

0801ad70 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b08a      	sub	sp, #40	; 0x28
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	60f8      	str	r0, [r7, #12]
 801ad78:	60b9      	str	r1, [r7, #8]
 801ad7a:	607a      	str	r2, [r7, #4]
 801ad7c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801ad7e:	4b5e      	ldr	r3, [pc, #376]	; (801aef8 <dhcp_recv+0x188>)
 801ad80:	685b      	ldr	r3, [r3, #4]
 801ad82:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ad84:	69fb      	ldr	r3, [r7, #28]
 801ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad88:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	685b      	ldr	r3, [r3, #4]
 801ad8e:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801ad90:	69bb      	ldr	r3, [r7, #24]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	f000 809a 	beq.w	801aecc <dhcp_recv+0x15c>
 801ad98:	69bb      	ldr	r3, [r7, #24]
 801ad9a:	791b      	ldrb	r3, [r3, #4]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	f000 8095 	beq.w	801aecc <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	895b      	ldrh	r3, [r3, #10]
 801ada6:	2b2b      	cmp	r3, #43	; 0x2b
 801ada8:	f240 8092 	bls.w	801aed0 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801adac:	697b      	ldr	r3, [r7, #20]
 801adae:	781b      	ldrb	r3, [r3, #0]
 801adb0:	2b02      	cmp	r3, #2
 801adb2:	f040 808f 	bne.w	801aed4 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801adb6:	2300      	movs	r3, #0
 801adb8:	74fb      	strb	r3, [r7, #19]
 801adba:	e00e      	b.n	801adda <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801adbc:	7cfb      	ldrb	r3, [r7, #19]
 801adbe:	69fa      	ldr	r2, [r7, #28]
 801adc0:	4413      	add	r3, r2
 801adc2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801adc6:	7cfb      	ldrb	r3, [r7, #19]
 801adc8:	6979      	ldr	r1, [r7, #20]
 801adca:	440b      	add	r3, r1
 801adcc:	7f1b      	ldrb	r3, [r3, #28]
 801adce:	429a      	cmp	r2, r3
 801add0:	f040 8082 	bne.w	801aed8 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801add4:	7cfb      	ldrb	r3, [r7, #19]
 801add6:	3301      	adds	r3, #1
 801add8:	74fb      	strb	r3, [r7, #19]
 801adda:	69fb      	ldr	r3, [r7, #28]
 801addc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ade0:	7cfa      	ldrb	r2, [r7, #19]
 801ade2:	429a      	cmp	r2, r3
 801ade4:	d202      	bcs.n	801adec <dhcp_recv+0x7c>
 801ade6:	7cfb      	ldrb	r3, [r7, #19]
 801ade8:	2b05      	cmp	r3, #5
 801adea:	d9e7      	bls.n	801adbc <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801adec:	697b      	ldr	r3, [r7, #20]
 801adee:	685b      	ldr	r3, [r3, #4]
 801adf0:	4618      	mov	r0, r3
 801adf2:	f7f4 f9f0 	bl	800f1d6 <lwip_htonl>
 801adf6:	4602      	mov	r2, r0
 801adf8:	69bb      	ldr	r3, [r7, #24]
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d16d      	bne.n	801aedc <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801ae00:	69b9      	ldr	r1, [r7, #24]
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7ff fc9e 	bl	801a744 <dhcp_parse_reply>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d168      	bne.n	801aee0 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801ae0e:	4b3b      	ldr	r3, [pc, #236]	; (801aefc <dhcp_recv+0x18c>)
 801ae10:	785b      	ldrb	r3, [r3, #1]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d066      	beq.n	801aee4 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	685b      	ldr	r3, [r3, #4]
 801ae1a:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801ae1c:	4b38      	ldr	r3, [pc, #224]	; (801af00 <dhcp_recv+0x190>)
 801ae1e:	685b      	ldr	r3, [r3, #4]
 801ae20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801ae24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ae28:	2b05      	cmp	r3, #5
 801ae2a:	d12a      	bne.n	801ae82 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801ae2c:	69bb      	ldr	r3, [r7, #24]
 801ae2e:	795b      	ldrb	r3, [r3, #5]
 801ae30:	2b01      	cmp	r3, #1
 801ae32:	d112      	bne.n	801ae5a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 801ae34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ae36:	69f8      	ldr	r0, [r7, #28]
 801ae38:	f7fe fdba 	bl	80199b0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801ae3c:	69fb      	ldr	r3, [r7, #28]
 801ae3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ae42:	f003 0308 	and.w	r3, r3, #8
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d003      	beq.n	801ae52 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801ae4a:	69f8      	ldr	r0, [r7, #28]
 801ae4c:	f7fe fb2a 	bl	80194a4 <dhcp_check>
 801ae50:	e04b      	b.n	801aeea <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801ae52:	69f8      	ldr	r0, [r7, #28]
 801ae54:	f7ff f82a 	bl	8019eac <dhcp_bind>
 801ae58:	e047      	b.n	801aeea <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801ae5a:	69bb      	ldr	r3, [r7, #24]
 801ae5c:	795b      	ldrb	r3, [r3, #5]
 801ae5e:	2b03      	cmp	r3, #3
 801ae60:	d007      	beq.n	801ae72 <dhcp_recv+0x102>
 801ae62:	69bb      	ldr	r3, [r7, #24]
 801ae64:	795b      	ldrb	r3, [r3, #5]
 801ae66:	2b04      	cmp	r3, #4
 801ae68:	d003      	beq.n	801ae72 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801ae6a:	69bb      	ldr	r3, [r7, #24]
 801ae6c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801ae6e:	2b05      	cmp	r3, #5
 801ae70:	d13b      	bne.n	801aeea <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 801ae72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ae74:	69f8      	ldr	r0, [r7, #28]
 801ae76:	f7fe fd9b 	bl	80199b0 <dhcp_handle_ack>
      dhcp_bind(netif);
 801ae7a:	69f8      	ldr	r0, [r7, #28]
 801ae7c:	f7ff f816 	bl	8019eac <dhcp_bind>
 801ae80:	e033      	b.n	801aeea <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801ae82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ae86:	2b06      	cmp	r3, #6
 801ae88:	d113      	bne.n	801aeb2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801ae8a:	69bb      	ldr	r3, [r7, #24]
 801ae8c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801ae8e:	2b03      	cmp	r3, #3
 801ae90:	d00b      	beq.n	801aeaa <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801ae92:	69bb      	ldr	r3, [r7, #24]
 801ae94:	795b      	ldrb	r3, [r3, #5]
 801ae96:	2b01      	cmp	r3, #1
 801ae98:	d007      	beq.n	801aeaa <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801ae9a:	69bb      	ldr	r3, [r7, #24]
 801ae9c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801ae9e:	2b04      	cmp	r3, #4
 801aea0:	d003      	beq.n	801aeaa <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801aea2:	69bb      	ldr	r3, [r7, #24]
 801aea4:	795b      	ldrb	r3, [r3, #5]
 801aea6:	2b05      	cmp	r3, #5
 801aea8:	d103      	bne.n	801aeb2 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801aeaa:	69f8      	ldr	r0, [r7, #28]
 801aeac:	f7fe fae0 	bl	8019470 <dhcp_handle_nak>
 801aeb0:	e01b      	b.n	801aeea <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801aeb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801aeb6:	2b02      	cmp	r3, #2
 801aeb8:	d116      	bne.n	801aee8 <dhcp_recv+0x178>
 801aeba:	69bb      	ldr	r3, [r7, #24]
 801aebc:	795b      	ldrb	r3, [r3, #5]
 801aebe:	2b06      	cmp	r3, #6
 801aec0:	d112      	bne.n	801aee8 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801aec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aec4:	69f8      	ldr	r0, [r7, #28]
 801aec6:	f7fe fb21 	bl	801950c <dhcp_handle_offer>
 801aeca:	e00e      	b.n	801aeea <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801aecc:	bf00      	nop
 801aece:	e00c      	b.n	801aeea <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801aed0:	bf00      	nop
 801aed2:	e00a      	b.n	801aeea <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801aed4:	bf00      	nop
 801aed6:	e008      	b.n	801aeea <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 801aed8:	bf00      	nop
 801aeda:	e006      	b.n	801aeea <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801aedc:	bf00      	nop
 801aede:	e004      	b.n	801aeea <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801aee0:	bf00      	nop
 801aee2:	e002      	b.n	801aeea <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801aee4:	bf00      	nop
 801aee6:	e000      	b.n	801aeea <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 801aee8:	bf00      	nop
  pbuf_free(p);
 801aeea:	6878      	ldr	r0, [r7, #4]
 801aeec:	f7f6 fd1e 	bl	801192c <pbuf_free>
}
 801aef0:	bf00      	nop
 801aef2:	3728      	adds	r7, #40	; 0x28
 801aef4:	46bd      	mov	sp, r7
 801aef6:	bd80      	pop	{r7, pc}
 801aef8:	200176d4 	.word	0x200176d4
 801aefc:	2001b0e4 	.word	0x2001b0e4
 801af00:	2001b0f0 	.word	0x2001b0f0

0801af04 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801af04:	b580      	push	{r7, lr}
 801af06:	b088      	sub	sp, #32
 801af08:	af00      	add	r7, sp, #0
 801af0a:	60f8      	str	r0, [r7, #12]
 801af0c:	60b9      	str	r1, [r7, #8]
 801af0e:	603b      	str	r3, [r7, #0]
 801af10:	4613      	mov	r3, r2
 801af12:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	2b00      	cmp	r3, #0
 801af18:	d108      	bne.n	801af2c <dhcp_create_msg+0x28>
 801af1a:	4b5f      	ldr	r3, [pc, #380]	; (801b098 <dhcp_create_msg+0x194>)
 801af1c:	f240 7269 	movw	r2, #1897	; 0x769
 801af20:	495e      	ldr	r1, [pc, #376]	; (801b09c <dhcp_create_msg+0x198>)
 801af22:	485f      	ldr	r0, [pc, #380]	; (801b0a0 <dhcp_create_msg+0x19c>)
 801af24:	f003 fdaa 	bl	801ea7c <iprintf>
 801af28:	2300      	movs	r3, #0
 801af2a:	e0b1      	b.n	801b090 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801af2c:	68bb      	ldr	r3, [r7, #8]
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d108      	bne.n	801af44 <dhcp_create_msg+0x40>
 801af32:	4b59      	ldr	r3, [pc, #356]	; (801b098 <dhcp_create_msg+0x194>)
 801af34:	f240 726a 	movw	r2, #1898	; 0x76a
 801af38:	495a      	ldr	r1, [pc, #360]	; (801b0a4 <dhcp_create_msg+0x1a0>)
 801af3a:	4859      	ldr	r0, [pc, #356]	; (801b0a0 <dhcp_create_msg+0x19c>)
 801af3c:	f003 fd9e 	bl	801ea7c <iprintf>
 801af40:	2300      	movs	r3, #0
 801af42:	e0a5      	b.n	801b090 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801af44:	f44f 7220 	mov.w	r2, #640	; 0x280
 801af48:	f44f 719a 	mov.w	r1, #308	; 0x134
 801af4c:	2036      	movs	r0, #54	; 0x36
 801af4e:	f7f6 f9d7 	bl	8011300 <pbuf_alloc>
 801af52:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801af54:	69bb      	ldr	r3, [r7, #24]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d101      	bne.n	801af5e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801af5a:	2300      	movs	r3, #0
 801af5c:	e098      	b.n	801b090 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801af5e:	69bb      	ldr	r3, [r7, #24]
 801af60:	895b      	ldrh	r3, [r3, #10]
 801af62:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801af66:	d206      	bcs.n	801af76 <dhcp_create_msg+0x72>
 801af68:	4b4b      	ldr	r3, [pc, #300]	; (801b098 <dhcp_create_msg+0x194>)
 801af6a:	f240 7271 	movw	r2, #1905	; 0x771
 801af6e:	494e      	ldr	r1, [pc, #312]	; (801b0a8 <dhcp_create_msg+0x1a4>)
 801af70:	484b      	ldr	r0, [pc, #300]	; (801b0a0 <dhcp_create_msg+0x19c>)
 801af72:	f003 fd83 	bl	801ea7c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801af76:	79fb      	ldrb	r3, [r7, #7]
 801af78:	2b03      	cmp	r3, #3
 801af7a:	d103      	bne.n	801af84 <dhcp_create_msg+0x80>
 801af7c:	68bb      	ldr	r3, [r7, #8]
 801af7e:	795b      	ldrb	r3, [r3, #5]
 801af80:	2b03      	cmp	r3, #3
 801af82:	d10d      	bne.n	801afa0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801af84:	68bb      	ldr	r3, [r7, #8]
 801af86:	799b      	ldrb	r3, [r3, #6]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d105      	bne.n	801af98 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801af8c:	f003 fe04 	bl	801eb98 <rand>
 801af90:	4603      	mov	r3, r0
 801af92:	461a      	mov	r2, r3
 801af94:	4b45      	ldr	r3, [pc, #276]	; (801b0ac <dhcp_create_msg+0x1a8>)
 801af96:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801af98:	4b44      	ldr	r3, [pc, #272]	; (801b0ac <dhcp_create_msg+0x1a8>)
 801af9a:	681a      	ldr	r2, [r3, #0]
 801af9c:	68bb      	ldr	r3, [r7, #8]
 801af9e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801afa0:	69bb      	ldr	r3, [r7, #24]
 801afa2:	685b      	ldr	r3, [r3, #4]
 801afa4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801afa6:	f44f 729a 	mov.w	r2, #308	; 0x134
 801afaa:	2100      	movs	r1, #0
 801afac:	6978      	ldr	r0, [r7, #20]
 801afae:	f003 f849 	bl	801e044 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801afb2:	697b      	ldr	r3, [r7, #20]
 801afb4:	2201      	movs	r2, #1
 801afb6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801afb8:	697b      	ldr	r3, [r7, #20]
 801afba:	2201      	movs	r2, #1
 801afbc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801afc4:	697b      	ldr	r3, [r7, #20]
 801afc6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801afc8:	68bb      	ldr	r3, [r7, #8]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	4618      	mov	r0, r3
 801afce:	f7f4 f902 	bl	800f1d6 <lwip_htonl>
 801afd2:	4602      	mov	r2, r0
 801afd4:	697b      	ldr	r3, [r7, #20]
 801afd6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801afd8:	79fb      	ldrb	r3, [r7, #7]
 801afda:	2b08      	cmp	r3, #8
 801afdc:	d010      	beq.n	801b000 <dhcp_create_msg+0xfc>
 801afde:	79fb      	ldrb	r3, [r7, #7]
 801afe0:	2b04      	cmp	r3, #4
 801afe2:	d00d      	beq.n	801b000 <dhcp_create_msg+0xfc>
 801afe4:	79fb      	ldrb	r3, [r7, #7]
 801afe6:	2b07      	cmp	r3, #7
 801afe8:	d00a      	beq.n	801b000 <dhcp_create_msg+0xfc>
 801afea:	79fb      	ldrb	r3, [r7, #7]
 801afec:	2b03      	cmp	r3, #3
 801afee:	d10c      	bne.n	801b00a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801aff0:	68bb      	ldr	r3, [r7, #8]
 801aff2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801aff4:	2b05      	cmp	r3, #5
 801aff6:	d003      	beq.n	801b000 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801aff8:	68bb      	ldr	r3, [r7, #8]
 801affa:	795b      	ldrb	r3, [r3, #5]
 801affc:	2b04      	cmp	r3, #4
 801affe:	d104      	bne.n	801b00a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	3304      	adds	r3, #4
 801b004:	681a      	ldr	r2, [r3, #0]
 801b006:	697b      	ldr	r3, [r7, #20]
 801b008:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b00a:	2300      	movs	r3, #0
 801b00c:	83fb      	strh	r3, [r7, #30]
 801b00e:	e00c      	b.n	801b02a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801b010:	8bfa      	ldrh	r2, [r7, #30]
 801b012:	8bfb      	ldrh	r3, [r7, #30]
 801b014:	68f9      	ldr	r1, [r7, #12]
 801b016:	440a      	add	r2, r1
 801b018:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801b01c:	697a      	ldr	r2, [r7, #20]
 801b01e:	4413      	add	r3, r2
 801b020:	460a      	mov	r2, r1
 801b022:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b024:	8bfb      	ldrh	r3, [r7, #30]
 801b026:	3301      	adds	r3, #1
 801b028:	83fb      	strh	r3, [r7, #30]
 801b02a:	8bfb      	ldrh	r3, [r7, #30]
 801b02c:	2b05      	cmp	r3, #5
 801b02e:	d9ef      	bls.n	801b010 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801b030:	697b      	ldr	r3, [r7, #20]
 801b032:	2200      	movs	r2, #0
 801b034:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b038:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801b03c:	2200      	movs	r2, #0
 801b03e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801b042:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801b046:	2200      	movs	r2, #0
 801b048:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801b04c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801b050:	2200      	movs	r2, #0
 801b052:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b056:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801b05a:	697b      	ldr	r3, [r7, #20]
 801b05c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b060:	2301      	movs	r3, #1
 801b062:	2235      	movs	r2, #53	; 0x35
 801b064:	2000      	movs	r0, #0
 801b066:	f7ff fa9d 	bl	801a5a4 <dhcp_option>
 801b06a:	4603      	mov	r3, r0
 801b06c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801b06e:	697b      	ldr	r3, [r7, #20]
 801b070:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b074:	79fa      	ldrb	r2, [r7, #7]
 801b076:	8a7b      	ldrh	r3, [r7, #18]
 801b078:	4618      	mov	r0, r3
 801b07a:	f7ff fac7 	bl	801a60c <dhcp_option_byte>
 801b07e:	4603      	mov	r3, r0
 801b080:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801b082:	683b      	ldr	r3, [r7, #0]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d002      	beq.n	801b08e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801b088:	683b      	ldr	r3, [r7, #0]
 801b08a:	8a7a      	ldrh	r2, [r7, #18]
 801b08c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801b08e:	69bb      	ldr	r3, [r7, #24]
}
 801b090:	4618      	mov	r0, r3
 801b092:	3720      	adds	r7, #32
 801b094:	46bd      	mov	sp, r7
 801b096:	bd80      	pop	{r7, pc}
 801b098:	08025968 	.word	0x08025968
 801b09c:	08025c98 	.word	0x08025c98
 801b0a0:	080259c8 	.word	0x080259c8
 801b0a4:	08025cb8 	.word	0x08025cb8
 801b0a8:	08025cd8 	.word	0x08025cd8
 801b0ac:	200143a8 	.word	0x200143a8

0801b0b0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b084      	sub	sp, #16
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	60b9      	str	r1, [r7, #8]
 801b0ba:	607a      	str	r2, [r7, #4]
 801b0bc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801b0be:	89fb      	ldrh	r3, [r7, #14]
 801b0c0:	1c5a      	adds	r2, r3, #1
 801b0c2:	81fa      	strh	r2, [r7, #14]
 801b0c4:	461a      	mov	r2, r3
 801b0c6:	68bb      	ldr	r3, [r7, #8]
 801b0c8:	4413      	add	r3, r2
 801b0ca:	22ff      	movs	r2, #255	; 0xff
 801b0cc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b0ce:	e007      	b.n	801b0e0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801b0d0:	89fb      	ldrh	r3, [r7, #14]
 801b0d2:	1c5a      	adds	r2, r3, #1
 801b0d4:	81fa      	strh	r2, [r7, #14]
 801b0d6:	461a      	mov	r2, r3
 801b0d8:	68bb      	ldr	r3, [r7, #8]
 801b0da:	4413      	add	r3, r2
 801b0dc:	2200      	movs	r2, #0
 801b0de:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b0e0:	89fb      	ldrh	r3, [r7, #14]
 801b0e2:	2b43      	cmp	r3, #67	; 0x43
 801b0e4:	d904      	bls.n	801b0f0 <dhcp_option_trailer+0x40>
 801b0e6:	89fb      	ldrh	r3, [r7, #14]
 801b0e8:	f003 0303 	and.w	r3, r3, #3
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d002      	beq.n	801b0f6 <dhcp_option_trailer+0x46>
 801b0f0:	89fb      	ldrh	r3, [r7, #14]
 801b0f2:	2b43      	cmp	r3, #67	; 0x43
 801b0f4:	d9ec      	bls.n	801b0d0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801b0f6:	89fb      	ldrh	r3, [r7, #14]
 801b0f8:	33f0      	adds	r3, #240	; 0xf0
 801b0fa:	b29b      	uxth	r3, r3
 801b0fc:	4619      	mov	r1, r3
 801b0fe:	6878      	ldr	r0, [r7, #4]
 801b100:	f7f6 fa5c 	bl	80115bc <pbuf_realloc>
}
 801b104:	bf00      	nop
 801b106:	3710      	adds	r7, #16
 801b108:	46bd      	mov	sp, r7
 801b10a:	bd80      	pop	{r7, pc}

0801b10c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801b10c:	b480      	push	{r7}
 801b10e:	b085      	sub	sp, #20
 801b110:	af00      	add	r7, sp, #0
 801b112:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d017      	beq.n	801b14a <dhcp_supplied_address+0x3e>
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d013      	beq.n	801b14a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b126:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	795b      	ldrb	r3, [r3, #5]
 801b12c:	2b0a      	cmp	r3, #10
 801b12e:	d007      	beq.n	801b140 <dhcp_supplied_address+0x34>
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	795b      	ldrb	r3, [r3, #5]
 801b134:	2b05      	cmp	r3, #5
 801b136:	d003      	beq.n	801b140 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801b138:	68fb      	ldr	r3, [r7, #12]
 801b13a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b13c:	2b04      	cmp	r3, #4
 801b13e:	d101      	bne.n	801b144 <dhcp_supplied_address+0x38>
 801b140:	2301      	movs	r3, #1
 801b142:	e000      	b.n	801b146 <dhcp_supplied_address+0x3a>
 801b144:	2300      	movs	r3, #0
 801b146:	b2db      	uxtb	r3, r3
 801b148:	e000      	b.n	801b14c <dhcp_supplied_address+0x40>
  }
  return 0;
 801b14a:	2300      	movs	r3, #0
}
 801b14c:	4618      	mov	r0, r3
 801b14e:	3714      	adds	r7, #20
 801b150:	46bd      	mov	sp, r7
 801b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b156:	4770      	bx	lr

0801b158 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b158:	b580      	push	{r7, lr}
 801b15a:	b082      	sub	sp, #8
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b160:	492b      	ldr	r1, [pc, #172]	; (801b210 <etharp_free_entry+0xb8>)
 801b162:	687a      	ldr	r2, [r7, #4]
 801b164:	4613      	mov	r3, r2
 801b166:	005b      	lsls	r3, r3, #1
 801b168:	4413      	add	r3, r2
 801b16a:	00db      	lsls	r3, r3, #3
 801b16c:	440b      	add	r3, r1
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	2b00      	cmp	r3, #0
 801b172:	d013      	beq.n	801b19c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b174:	4926      	ldr	r1, [pc, #152]	; (801b210 <etharp_free_entry+0xb8>)
 801b176:	687a      	ldr	r2, [r7, #4]
 801b178:	4613      	mov	r3, r2
 801b17a:	005b      	lsls	r3, r3, #1
 801b17c:	4413      	add	r3, r2
 801b17e:	00db      	lsls	r3, r3, #3
 801b180:	440b      	add	r3, r1
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	4618      	mov	r0, r3
 801b186:	f7f6 fbd1 	bl	801192c <pbuf_free>
    arp_table[i].q = NULL;
 801b18a:	4921      	ldr	r1, [pc, #132]	; (801b210 <etharp_free_entry+0xb8>)
 801b18c:	687a      	ldr	r2, [r7, #4]
 801b18e:	4613      	mov	r3, r2
 801b190:	005b      	lsls	r3, r3, #1
 801b192:	4413      	add	r3, r2
 801b194:	00db      	lsls	r3, r3, #3
 801b196:	440b      	add	r3, r1
 801b198:	2200      	movs	r2, #0
 801b19a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b19c:	491c      	ldr	r1, [pc, #112]	; (801b210 <etharp_free_entry+0xb8>)
 801b19e:	687a      	ldr	r2, [r7, #4]
 801b1a0:	4613      	mov	r3, r2
 801b1a2:	005b      	lsls	r3, r3, #1
 801b1a4:	4413      	add	r3, r2
 801b1a6:	00db      	lsls	r3, r3, #3
 801b1a8:	440b      	add	r3, r1
 801b1aa:	3314      	adds	r3, #20
 801b1ac:	2200      	movs	r2, #0
 801b1ae:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801b1b0:	4917      	ldr	r1, [pc, #92]	; (801b210 <etharp_free_entry+0xb8>)
 801b1b2:	687a      	ldr	r2, [r7, #4]
 801b1b4:	4613      	mov	r3, r2
 801b1b6:	005b      	lsls	r3, r3, #1
 801b1b8:	4413      	add	r3, r2
 801b1ba:	00db      	lsls	r3, r3, #3
 801b1bc:	440b      	add	r3, r1
 801b1be:	3312      	adds	r3, #18
 801b1c0:	2200      	movs	r2, #0
 801b1c2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801b1c4:	4912      	ldr	r1, [pc, #72]	; (801b210 <etharp_free_entry+0xb8>)
 801b1c6:	687a      	ldr	r2, [r7, #4]
 801b1c8:	4613      	mov	r3, r2
 801b1ca:	005b      	lsls	r3, r3, #1
 801b1cc:	4413      	add	r3, r2
 801b1ce:	00db      	lsls	r3, r3, #3
 801b1d0:	440b      	add	r3, r1
 801b1d2:	3308      	adds	r3, #8
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801b1d8:	490d      	ldr	r1, [pc, #52]	; (801b210 <etharp_free_entry+0xb8>)
 801b1da:	687a      	ldr	r2, [r7, #4]
 801b1dc:	4613      	mov	r3, r2
 801b1de:	005b      	lsls	r3, r3, #1
 801b1e0:	4413      	add	r3, r2
 801b1e2:	00db      	lsls	r3, r3, #3
 801b1e4:	440b      	add	r3, r1
 801b1e6:	3304      	adds	r3, #4
 801b1e8:	2200      	movs	r2, #0
 801b1ea:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801b1ec:	4908      	ldr	r1, [pc, #32]	; (801b210 <etharp_free_entry+0xb8>)
 801b1ee:	687a      	ldr	r2, [r7, #4]
 801b1f0:	4613      	mov	r3, r2
 801b1f2:	005b      	lsls	r3, r3, #1
 801b1f4:	4413      	add	r3, r2
 801b1f6:	00db      	lsls	r3, r3, #3
 801b1f8:	440b      	add	r3, r1
 801b1fa:	3308      	adds	r3, #8
 801b1fc:	4a05      	ldr	r2, [pc, #20]	; (801b214 <etharp_free_entry+0xbc>)
 801b1fe:	3304      	adds	r3, #4
 801b200:	6810      	ldr	r0, [r2, #0]
 801b202:	6018      	str	r0, [r3, #0]
 801b204:	8892      	ldrh	r2, [r2, #4]
 801b206:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801b208:	bf00      	nop
 801b20a:	3708      	adds	r7, #8
 801b20c:	46bd      	mov	sp, r7
 801b20e:	bd80      	pop	{r7, pc}
 801b210:	200143ac 	.word	0x200143ac
 801b214:	080266d0 	.word	0x080266d0

0801b218 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b082      	sub	sp, #8
 801b21c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b21e:	2300      	movs	r3, #0
 801b220:	607b      	str	r3, [r7, #4]
 801b222:	e096      	b.n	801b352 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b224:	494f      	ldr	r1, [pc, #316]	; (801b364 <etharp_tmr+0x14c>)
 801b226:	687a      	ldr	r2, [r7, #4]
 801b228:	4613      	mov	r3, r2
 801b22a:	005b      	lsls	r3, r3, #1
 801b22c:	4413      	add	r3, r2
 801b22e:	00db      	lsls	r3, r3, #3
 801b230:	440b      	add	r3, r1
 801b232:	3314      	adds	r3, #20
 801b234:	781b      	ldrb	r3, [r3, #0]
 801b236:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b238:	78fb      	ldrb	r3, [r7, #3]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	f000 8086 	beq.w	801b34c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b240:	4948      	ldr	r1, [pc, #288]	; (801b364 <etharp_tmr+0x14c>)
 801b242:	687a      	ldr	r2, [r7, #4]
 801b244:	4613      	mov	r3, r2
 801b246:	005b      	lsls	r3, r3, #1
 801b248:	4413      	add	r3, r2
 801b24a:	00db      	lsls	r3, r3, #3
 801b24c:	440b      	add	r3, r1
 801b24e:	3312      	adds	r3, #18
 801b250:	881b      	ldrh	r3, [r3, #0]
 801b252:	3301      	adds	r3, #1
 801b254:	b298      	uxth	r0, r3
 801b256:	4943      	ldr	r1, [pc, #268]	; (801b364 <etharp_tmr+0x14c>)
 801b258:	687a      	ldr	r2, [r7, #4]
 801b25a:	4613      	mov	r3, r2
 801b25c:	005b      	lsls	r3, r3, #1
 801b25e:	4413      	add	r3, r2
 801b260:	00db      	lsls	r3, r3, #3
 801b262:	440b      	add	r3, r1
 801b264:	3312      	adds	r3, #18
 801b266:	4602      	mov	r2, r0
 801b268:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b26a:	493e      	ldr	r1, [pc, #248]	; (801b364 <etharp_tmr+0x14c>)
 801b26c:	687a      	ldr	r2, [r7, #4]
 801b26e:	4613      	mov	r3, r2
 801b270:	005b      	lsls	r3, r3, #1
 801b272:	4413      	add	r3, r2
 801b274:	00db      	lsls	r3, r3, #3
 801b276:	440b      	add	r3, r1
 801b278:	3312      	adds	r3, #18
 801b27a:	881b      	ldrh	r3, [r3, #0]
 801b27c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b280:	d215      	bcs.n	801b2ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b282:	4938      	ldr	r1, [pc, #224]	; (801b364 <etharp_tmr+0x14c>)
 801b284:	687a      	ldr	r2, [r7, #4]
 801b286:	4613      	mov	r3, r2
 801b288:	005b      	lsls	r3, r3, #1
 801b28a:	4413      	add	r3, r2
 801b28c:	00db      	lsls	r3, r3, #3
 801b28e:	440b      	add	r3, r1
 801b290:	3314      	adds	r3, #20
 801b292:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b294:	2b01      	cmp	r3, #1
 801b296:	d10e      	bne.n	801b2b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b298:	4932      	ldr	r1, [pc, #200]	; (801b364 <etharp_tmr+0x14c>)
 801b29a:	687a      	ldr	r2, [r7, #4]
 801b29c:	4613      	mov	r3, r2
 801b29e:	005b      	lsls	r3, r3, #1
 801b2a0:	4413      	add	r3, r2
 801b2a2:	00db      	lsls	r3, r3, #3
 801b2a4:	440b      	add	r3, r1
 801b2a6:	3312      	adds	r3, #18
 801b2a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b2aa:	2b04      	cmp	r3, #4
 801b2ac:	d903      	bls.n	801b2b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b2ae:	6878      	ldr	r0, [r7, #4]
 801b2b0:	f7ff ff52 	bl	801b158 <etharp_free_entry>
 801b2b4:	e04a      	b.n	801b34c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b2b6:	492b      	ldr	r1, [pc, #172]	; (801b364 <etharp_tmr+0x14c>)
 801b2b8:	687a      	ldr	r2, [r7, #4]
 801b2ba:	4613      	mov	r3, r2
 801b2bc:	005b      	lsls	r3, r3, #1
 801b2be:	4413      	add	r3, r2
 801b2c0:	00db      	lsls	r3, r3, #3
 801b2c2:	440b      	add	r3, r1
 801b2c4:	3314      	adds	r3, #20
 801b2c6:	781b      	ldrb	r3, [r3, #0]
 801b2c8:	2b03      	cmp	r3, #3
 801b2ca:	d10a      	bne.n	801b2e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b2cc:	4925      	ldr	r1, [pc, #148]	; (801b364 <etharp_tmr+0x14c>)
 801b2ce:	687a      	ldr	r2, [r7, #4]
 801b2d0:	4613      	mov	r3, r2
 801b2d2:	005b      	lsls	r3, r3, #1
 801b2d4:	4413      	add	r3, r2
 801b2d6:	00db      	lsls	r3, r3, #3
 801b2d8:	440b      	add	r3, r1
 801b2da:	3314      	adds	r3, #20
 801b2dc:	2204      	movs	r2, #4
 801b2de:	701a      	strb	r2, [r3, #0]
 801b2e0:	e034      	b.n	801b34c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b2e2:	4920      	ldr	r1, [pc, #128]	; (801b364 <etharp_tmr+0x14c>)
 801b2e4:	687a      	ldr	r2, [r7, #4]
 801b2e6:	4613      	mov	r3, r2
 801b2e8:	005b      	lsls	r3, r3, #1
 801b2ea:	4413      	add	r3, r2
 801b2ec:	00db      	lsls	r3, r3, #3
 801b2ee:	440b      	add	r3, r1
 801b2f0:	3314      	adds	r3, #20
 801b2f2:	781b      	ldrb	r3, [r3, #0]
 801b2f4:	2b04      	cmp	r3, #4
 801b2f6:	d10a      	bne.n	801b30e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b2f8:	491a      	ldr	r1, [pc, #104]	; (801b364 <etharp_tmr+0x14c>)
 801b2fa:	687a      	ldr	r2, [r7, #4]
 801b2fc:	4613      	mov	r3, r2
 801b2fe:	005b      	lsls	r3, r3, #1
 801b300:	4413      	add	r3, r2
 801b302:	00db      	lsls	r3, r3, #3
 801b304:	440b      	add	r3, r1
 801b306:	3314      	adds	r3, #20
 801b308:	2202      	movs	r2, #2
 801b30a:	701a      	strb	r2, [r3, #0]
 801b30c:	e01e      	b.n	801b34c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b30e:	4915      	ldr	r1, [pc, #84]	; (801b364 <etharp_tmr+0x14c>)
 801b310:	687a      	ldr	r2, [r7, #4]
 801b312:	4613      	mov	r3, r2
 801b314:	005b      	lsls	r3, r3, #1
 801b316:	4413      	add	r3, r2
 801b318:	00db      	lsls	r3, r3, #3
 801b31a:	440b      	add	r3, r1
 801b31c:	3314      	adds	r3, #20
 801b31e:	781b      	ldrb	r3, [r3, #0]
 801b320:	2b01      	cmp	r3, #1
 801b322:	d113      	bne.n	801b34c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b324:	490f      	ldr	r1, [pc, #60]	; (801b364 <etharp_tmr+0x14c>)
 801b326:	687a      	ldr	r2, [r7, #4]
 801b328:	4613      	mov	r3, r2
 801b32a:	005b      	lsls	r3, r3, #1
 801b32c:	4413      	add	r3, r2
 801b32e:	00db      	lsls	r3, r3, #3
 801b330:	440b      	add	r3, r1
 801b332:	3308      	adds	r3, #8
 801b334:	6818      	ldr	r0, [r3, #0]
 801b336:	687a      	ldr	r2, [r7, #4]
 801b338:	4613      	mov	r3, r2
 801b33a:	005b      	lsls	r3, r3, #1
 801b33c:	4413      	add	r3, r2
 801b33e:	00db      	lsls	r3, r3, #3
 801b340:	4a08      	ldr	r2, [pc, #32]	; (801b364 <etharp_tmr+0x14c>)
 801b342:	4413      	add	r3, r2
 801b344:	3304      	adds	r3, #4
 801b346:	4619      	mov	r1, r3
 801b348:	f000 fe72 	bl	801c030 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	3301      	adds	r3, #1
 801b350:	607b      	str	r3, [r7, #4]
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	2b09      	cmp	r3, #9
 801b356:	f77f af65 	ble.w	801b224 <etharp_tmr+0xc>
      }
    }
  }
}
 801b35a:	bf00      	nop
 801b35c:	bf00      	nop
 801b35e:	3708      	adds	r7, #8
 801b360:	46bd      	mov	sp, r7
 801b362:	bd80      	pop	{r7, pc}
 801b364:	200143ac 	.word	0x200143ac

0801b368 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b368:	b580      	push	{r7, lr}
 801b36a:	b08a      	sub	sp, #40	; 0x28
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	60f8      	str	r0, [r7, #12]
 801b370:	460b      	mov	r3, r1
 801b372:	607a      	str	r2, [r7, #4]
 801b374:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b376:	230a      	movs	r3, #10
 801b378:	843b      	strh	r3, [r7, #32]
 801b37a:	230a      	movs	r3, #10
 801b37c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801b37e:	230a      	movs	r3, #10
 801b380:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 801b382:	2300      	movs	r3, #0
 801b384:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b386:	230a      	movs	r3, #10
 801b388:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b38a:	2300      	movs	r3, #0
 801b38c:	83bb      	strh	r3, [r7, #28]
 801b38e:	2300      	movs	r3, #0
 801b390:	837b      	strh	r3, [r7, #26]
 801b392:	2300      	movs	r3, #0
 801b394:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b396:	2300      	movs	r3, #0
 801b398:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b39a:	e0ae      	b.n	801b4fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b39c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b3a0:	49a6      	ldr	r1, [pc, #664]	; (801b63c <etharp_find_entry+0x2d4>)
 801b3a2:	4613      	mov	r3, r2
 801b3a4:	005b      	lsls	r3, r3, #1
 801b3a6:	4413      	add	r3, r2
 801b3a8:	00db      	lsls	r3, r3, #3
 801b3aa:	440b      	add	r3, r1
 801b3ac:	3314      	adds	r3, #20
 801b3ae:	781b      	ldrb	r3, [r3, #0]
 801b3b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b3b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b3b6:	2b0a      	cmp	r3, #10
 801b3b8:	d105      	bne.n	801b3c6 <etharp_find_entry+0x5e>
 801b3ba:	7dfb      	ldrb	r3, [r7, #23]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d102      	bne.n	801b3c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b3c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b3c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b3c4:	e095      	b.n	801b4f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b3c6:	7dfb      	ldrb	r3, [r7, #23]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	f000 8092 	beq.w	801b4f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b3ce:	7dfb      	ldrb	r3, [r7, #23]
 801b3d0:	2b01      	cmp	r3, #1
 801b3d2:	d009      	beq.n	801b3e8 <etharp_find_entry+0x80>
 801b3d4:	7dfb      	ldrb	r3, [r7, #23]
 801b3d6:	2b01      	cmp	r3, #1
 801b3d8:	d806      	bhi.n	801b3e8 <etharp_find_entry+0x80>
 801b3da:	4b99      	ldr	r3, [pc, #612]	; (801b640 <etharp_find_entry+0x2d8>)
 801b3dc:	f240 1223 	movw	r2, #291	; 0x123
 801b3e0:	4998      	ldr	r1, [pc, #608]	; (801b644 <etharp_find_entry+0x2dc>)
 801b3e2:	4899      	ldr	r0, [pc, #612]	; (801b648 <etharp_find_entry+0x2e0>)
 801b3e4:	f003 fb4a 	bl	801ea7c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d020      	beq.n	801b430 <etharp_find_entry+0xc8>
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	6819      	ldr	r1, [r3, #0]
 801b3f2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b3f6:	4891      	ldr	r0, [pc, #580]	; (801b63c <etharp_find_entry+0x2d4>)
 801b3f8:	4613      	mov	r3, r2
 801b3fa:	005b      	lsls	r3, r3, #1
 801b3fc:	4413      	add	r3, r2
 801b3fe:	00db      	lsls	r3, r3, #3
 801b400:	4403      	add	r3, r0
 801b402:	3304      	adds	r3, #4
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	4299      	cmp	r1, r3
 801b408:	d112      	bne.n	801b430 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d00c      	beq.n	801b42a <etharp_find_entry+0xc2>
 801b410:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b414:	4989      	ldr	r1, [pc, #548]	; (801b63c <etharp_find_entry+0x2d4>)
 801b416:	4613      	mov	r3, r2
 801b418:	005b      	lsls	r3, r3, #1
 801b41a:	4413      	add	r3, r2
 801b41c:	00db      	lsls	r3, r3, #3
 801b41e:	440b      	add	r3, r1
 801b420:	3308      	adds	r3, #8
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	687a      	ldr	r2, [r7, #4]
 801b426:	429a      	cmp	r2, r3
 801b428:	d102      	bne.n	801b430 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b42a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b42e:	e100      	b.n	801b632 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b430:	7dfb      	ldrb	r3, [r7, #23]
 801b432:	2b01      	cmp	r3, #1
 801b434:	d140      	bne.n	801b4b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b436:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b43a:	4980      	ldr	r1, [pc, #512]	; (801b63c <etharp_find_entry+0x2d4>)
 801b43c:	4613      	mov	r3, r2
 801b43e:	005b      	lsls	r3, r3, #1
 801b440:	4413      	add	r3, r2
 801b442:	00db      	lsls	r3, r3, #3
 801b444:	440b      	add	r3, r1
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d01a      	beq.n	801b482 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b44c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b450:	497a      	ldr	r1, [pc, #488]	; (801b63c <etharp_find_entry+0x2d4>)
 801b452:	4613      	mov	r3, r2
 801b454:	005b      	lsls	r3, r3, #1
 801b456:	4413      	add	r3, r2
 801b458:	00db      	lsls	r3, r3, #3
 801b45a:	440b      	add	r3, r1
 801b45c:	3312      	adds	r3, #18
 801b45e:	881b      	ldrh	r3, [r3, #0]
 801b460:	8bba      	ldrh	r2, [r7, #28]
 801b462:	429a      	cmp	r2, r3
 801b464:	d845      	bhi.n	801b4f2 <etharp_find_entry+0x18a>
            old_queue = i;
 801b466:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b468:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801b46a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b46e:	4973      	ldr	r1, [pc, #460]	; (801b63c <etharp_find_entry+0x2d4>)
 801b470:	4613      	mov	r3, r2
 801b472:	005b      	lsls	r3, r3, #1
 801b474:	4413      	add	r3, r2
 801b476:	00db      	lsls	r3, r3, #3
 801b478:	440b      	add	r3, r1
 801b47a:	3312      	adds	r3, #18
 801b47c:	881b      	ldrh	r3, [r3, #0]
 801b47e:	83bb      	strh	r3, [r7, #28]
 801b480:	e037      	b.n	801b4f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b482:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b486:	496d      	ldr	r1, [pc, #436]	; (801b63c <etharp_find_entry+0x2d4>)
 801b488:	4613      	mov	r3, r2
 801b48a:	005b      	lsls	r3, r3, #1
 801b48c:	4413      	add	r3, r2
 801b48e:	00db      	lsls	r3, r3, #3
 801b490:	440b      	add	r3, r1
 801b492:	3312      	adds	r3, #18
 801b494:	881b      	ldrh	r3, [r3, #0]
 801b496:	8b7a      	ldrh	r2, [r7, #26]
 801b498:	429a      	cmp	r2, r3
 801b49a:	d82a      	bhi.n	801b4f2 <etharp_find_entry+0x18a>
            old_pending = i;
 801b49c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b49e:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801b4a0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b4a4:	4965      	ldr	r1, [pc, #404]	; (801b63c <etharp_find_entry+0x2d4>)
 801b4a6:	4613      	mov	r3, r2
 801b4a8:	005b      	lsls	r3, r3, #1
 801b4aa:	4413      	add	r3, r2
 801b4ac:	00db      	lsls	r3, r3, #3
 801b4ae:	440b      	add	r3, r1
 801b4b0:	3312      	adds	r3, #18
 801b4b2:	881b      	ldrh	r3, [r3, #0]
 801b4b4:	837b      	strh	r3, [r7, #26]
 801b4b6:	e01c      	b.n	801b4f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b4b8:	7dfb      	ldrb	r3, [r7, #23]
 801b4ba:	2b01      	cmp	r3, #1
 801b4bc:	d919      	bls.n	801b4f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b4be:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b4c2:	495e      	ldr	r1, [pc, #376]	; (801b63c <etharp_find_entry+0x2d4>)
 801b4c4:	4613      	mov	r3, r2
 801b4c6:	005b      	lsls	r3, r3, #1
 801b4c8:	4413      	add	r3, r2
 801b4ca:	00db      	lsls	r3, r3, #3
 801b4cc:	440b      	add	r3, r1
 801b4ce:	3312      	adds	r3, #18
 801b4d0:	881b      	ldrh	r3, [r3, #0]
 801b4d2:	8b3a      	ldrh	r2, [r7, #24]
 801b4d4:	429a      	cmp	r2, r3
 801b4d6:	d80c      	bhi.n	801b4f2 <etharp_find_entry+0x18a>
            old_stable = i;
 801b4d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b4da:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 801b4dc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b4e0:	4956      	ldr	r1, [pc, #344]	; (801b63c <etharp_find_entry+0x2d4>)
 801b4e2:	4613      	mov	r3, r2
 801b4e4:	005b      	lsls	r3, r3, #1
 801b4e6:	4413      	add	r3, r2
 801b4e8:	00db      	lsls	r3, r3, #3
 801b4ea:	440b      	add	r3, r1
 801b4ec:	3312      	adds	r3, #18
 801b4ee:	881b      	ldrh	r3, [r3, #0]
 801b4f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b4f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b4f4:	3301      	adds	r3, #1
 801b4f6:	b29b      	uxth	r3, r3
 801b4f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b4fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b4fe:	2b09      	cmp	r3, #9
 801b500:	f77f af4c 	ble.w	801b39c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b504:	7afb      	ldrb	r3, [r7, #11]
 801b506:	f003 0302 	and.w	r3, r3, #2
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d108      	bne.n	801b520 <etharp_find_entry+0x1b8>
 801b50e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b512:	2b0a      	cmp	r3, #10
 801b514:	d107      	bne.n	801b526 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b516:	7afb      	ldrb	r3, [r7, #11]
 801b518:	f003 0301 	and.w	r3, r3, #1
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d102      	bne.n	801b526 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b524:	e085      	b.n	801b632 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b526:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b52a:	2b09      	cmp	r3, #9
 801b52c:	dc02      	bgt.n	801b534 <etharp_find_entry+0x1cc>
    i = empty;
 801b52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b530:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b532:	e039      	b.n	801b5a8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b534:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b538:	2b09      	cmp	r3, #9
 801b53a:	dc14      	bgt.n	801b566 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801b53c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b53e:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b540:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b544:	493d      	ldr	r1, [pc, #244]	; (801b63c <etharp_find_entry+0x2d4>)
 801b546:	4613      	mov	r3, r2
 801b548:	005b      	lsls	r3, r3, #1
 801b54a:	4413      	add	r3, r2
 801b54c:	00db      	lsls	r3, r3, #3
 801b54e:	440b      	add	r3, r1
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d018      	beq.n	801b588 <etharp_find_entry+0x220>
 801b556:	4b3a      	ldr	r3, [pc, #232]	; (801b640 <etharp_find_entry+0x2d8>)
 801b558:	f240 126d 	movw	r2, #365	; 0x16d
 801b55c:	493b      	ldr	r1, [pc, #236]	; (801b64c <etharp_find_entry+0x2e4>)
 801b55e:	483a      	ldr	r0, [pc, #232]	; (801b648 <etharp_find_entry+0x2e0>)
 801b560:	f003 fa8c 	bl	801ea7c <iprintf>
 801b564:	e010      	b.n	801b588 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b566:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b56a:	2b09      	cmp	r3, #9
 801b56c:	dc02      	bgt.n	801b574 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801b56e:	8c3b      	ldrh	r3, [r7, #32]
 801b570:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b572:	e009      	b.n	801b588 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b574:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b578:	2b09      	cmp	r3, #9
 801b57a:	dc02      	bgt.n	801b582 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b57c:	8bfb      	ldrh	r3, [r7, #30]
 801b57e:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b580:	e002      	b.n	801b588 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b586:	e054      	b.n	801b632 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b588:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b58c:	2b09      	cmp	r3, #9
 801b58e:	dd06      	ble.n	801b59e <etharp_find_entry+0x236>
 801b590:	4b2b      	ldr	r3, [pc, #172]	; (801b640 <etharp_find_entry+0x2d8>)
 801b592:	f240 127f 	movw	r2, #383	; 0x17f
 801b596:	492e      	ldr	r1, [pc, #184]	; (801b650 <etharp_find_entry+0x2e8>)
 801b598:	482b      	ldr	r0, [pc, #172]	; (801b648 <etharp_find_entry+0x2e0>)
 801b59a:	f003 fa6f 	bl	801ea7c <iprintf>
    etharp_free_entry(i);
 801b59e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	f7ff fdd8 	bl	801b158 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b5a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b5ac:	2b09      	cmp	r3, #9
 801b5ae:	dd06      	ble.n	801b5be <etharp_find_entry+0x256>
 801b5b0:	4b23      	ldr	r3, [pc, #140]	; (801b640 <etharp_find_entry+0x2d8>)
 801b5b2:	f240 1283 	movw	r2, #387	; 0x183
 801b5b6:	4926      	ldr	r1, [pc, #152]	; (801b650 <etharp_find_entry+0x2e8>)
 801b5b8:	4823      	ldr	r0, [pc, #140]	; (801b648 <etharp_find_entry+0x2e0>)
 801b5ba:	f003 fa5f 	bl	801ea7c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b5be:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b5c2:	491e      	ldr	r1, [pc, #120]	; (801b63c <etharp_find_entry+0x2d4>)
 801b5c4:	4613      	mov	r3, r2
 801b5c6:	005b      	lsls	r3, r3, #1
 801b5c8:	4413      	add	r3, r2
 801b5ca:	00db      	lsls	r3, r3, #3
 801b5cc:	440b      	add	r3, r1
 801b5ce:	3314      	adds	r3, #20
 801b5d0:	781b      	ldrb	r3, [r3, #0]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d006      	beq.n	801b5e4 <etharp_find_entry+0x27c>
 801b5d6:	4b1a      	ldr	r3, [pc, #104]	; (801b640 <etharp_find_entry+0x2d8>)
 801b5d8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801b5dc:	491d      	ldr	r1, [pc, #116]	; (801b654 <etharp_find_entry+0x2ec>)
 801b5de:	481a      	ldr	r0, [pc, #104]	; (801b648 <etharp_find_entry+0x2e0>)
 801b5e0:	f003 fa4c 	bl	801ea7c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d00b      	beq.n	801b602 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b5ea:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	6819      	ldr	r1, [r3, #0]
 801b5f2:	4812      	ldr	r0, [pc, #72]	; (801b63c <etharp_find_entry+0x2d4>)
 801b5f4:	4613      	mov	r3, r2
 801b5f6:	005b      	lsls	r3, r3, #1
 801b5f8:	4413      	add	r3, r2
 801b5fa:	00db      	lsls	r3, r3, #3
 801b5fc:	4403      	add	r3, r0
 801b5fe:	3304      	adds	r3, #4
 801b600:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b602:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b606:	490d      	ldr	r1, [pc, #52]	; (801b63c <etharp_find_entry+0x2d4>)
 801b608:	4613      	mov	r3, r2
 801b60a:	005b      	lsls	r3, r3, #1
 801b60c:	4413      	add	r3, r2
 801b60e:	00db      	lsls	r3, r3, #3
 801b610:	440b      	add	r3, r1
 801b612:	3312      	adds	r3, #18
 801b614:	2200      	movs	r2, #0
 801b616:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b618:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b61c:	4907      	ldr	r1, [pc, #28]	; (801b63c <etharp_find_entry+0x2d4>)
 801b61e:	4613      	mov	r3, r2
 801b620:	005b      	lsls	r3, r3, #1
 801b622:	4413      	add	r3, r2
 801b624:	00db      	lsls	r3, r3, #3
 801b626:	440b      	add	r3, r1
 801b628:	3308      	adds	r3, #8
 801b62a:	687a      	ldr	r2, [r7, #4]
 801b62c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b62e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801b632:	4618      	mov	r0, r3
 801b634:	3728      	adds	r7, #40	; 0x28
 801b636:	46bd      	mov	sp, r7
 801b638:	bd80      	pop	{r7, pc}
 801b63a:	bf00      	nop
 801b63c:	200143ac 	.word	0x200143ac
 801b640:	08025d18 	.word	0x08025d18
 801b644:	08025d50 	.word	0x08025d50
 801b648:	08025d90 	.word	0x08025d90
 801b64c:	08025db8 	.word	0x08025db8
 801b650:	08025dd0 	.word	0x08025dd0
 801b654:	08025de4 	.word	0x08025de4

0801b658 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b658:	b580      	push	{r7, lr}
 801b65a:	b088      	sub	sp, #32
 801b65c:	af02      	add	r7, sp, #8
 801b65e:	60f8      	str	r0, [r7, #12]
 801b660:	60b9      	str	r1, [r7, #8]
 801b662:	607a      	str	r2, [r7, #4]
 801b664:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b66c:	2b06      	cmp	r3, #6
 801b66e:	d006      	beq.n	801b67e <etharp_update_arp_entry+0x26>
 801b670:	4b48      	ldr	r3, [pc, #288]	; (801b794 <etharp_update_arp_entry+0x13c>)
 801b672:	f240 12a9 	movw	r2, #425	; 0x1a9
 801b676:	4948      	ldr	r1, [pc, #288]	; (801b798 <etharp_update_arp_entry+0x140>)
 801b678:	4848      	ldr	r0, [pc, #288]	; (801b79c <etharp_update_arp_entry+0x144>)
 801b67a:	f003 f9ff 	bl	801ea7c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b67e:	68bb      	ldr	r3, [r7, #8]
 801b680:	2b00      	cmp	r3, #0
 801b682:	d012      	beq.n	801b6aa <etharp_update_arp_entry+0x52>
 801b684:	68bb      	ldr	r3, [r7, #8]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d00e      	beq.n	801b6aa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	68f9      	ldr	r1, [r7, #12]
 801b692:	4618      	mov	r0, r3
 801b694:	f001 f926 	bl	801c8e4 <ip4_addr_isbroadcast_u32>
 801b698:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d105      	bne.n	801b6aa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b69e:	68bb      	ldr	r3, [r7, #8]
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b6a6:	2be0      	cmp	r3, #224	; 0xe0
 801b6a8:	d102      	bne.n	801b6b0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b6aa:	f06f 030f 	mvn.w	r3, #15
 801b6ae:	e06c      	b.n	801b78a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b6b0:	78fb      	ldrb	r3, [r7, #3]
 801b6b2:	68fa      	ldr	r2, [r7, #12]
 801b6b4:	4619      	mov	r1, r3
 801b6b6:	68b8      	ldr	r0, [r7, #8]
 801b6b8:	f7ff fe56 	bl	801b368 <etharp_find_entry>
 801b6bc:	4603      	mov	r3, r0
 801b6be:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b6c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	da02      	bge.n	801b6ce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b6c8:	8afb      	ldrh	r3, [r7, #22]
 801b6ca:	b25b      	sxtb	r3, r3
 801b6cc:	e05d      	b.n	801b78a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b6ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b6d2:	4933      	ldr	r1, [pc, #204]	; (801b7a0 <etharp_update_arp_entry+0x148>)
 801b6d4:	4613      	mov	r3, r2
 801b6d6:	005b      	lsls	r3, r3, #1
 801b6d8:	4413      	add	r3, r2
 801b6da:	00db      	lsls	r3, r3, #3
 801b6dc:	440b      	add	r3, r1
 801b6de:	3314      	adds	r3, #20
 801b6e0:	2202      	movs	r2, #2
 801b6e2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b6e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b6e8:	492d      	ldr	r1, [pc, #180]	; (801b7a0 <etharp_update_arp_entry+0x148>)
 801b6ea:	4613      	mov	r3, r2
 801b6ec:	005b      	lsls	r3, r3, #1
 801b6ee:	4413      	add	r3, r2
 801b6f0:	00db      	lsls	r3, r3, #3
 801b6f2:	440b      	add	r3, r1
 801b6f4:	3308      	adds	r3, #8
 801b6f6:	68fa      	ldr	r2, [r7, #12]
 801b6f8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b6fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b6fe:	4613      	mov	r3, r2
 801b700:	005b      	lsls	r3, r3, #1
 801b702:	4413      	add	r3, r2
 801b704:	00db      	lsls	r3, r3, #3
 801b706:	3308      	adds	r3, #8
 801b708:	4a25      	ldr	r2, [pc, #148]	; (801b7a0 <etharp_update_arp_entry+0x148>)
 801b70a:	4413      	add	r3, r2
 801b70c:	3304      	adds	r3, #4
 801b70e:	2206      	movs	r2, #6
 801b710:	6879      	ldr	r1, [r7, #4]
 801b712:	4618      	mov	r0, r3
 801b714:	f002 fc6e 	bl	801dff4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b718:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b71c:	4920      	ldr	r1, [pc, #128]	; (801b7a0 <etharp_update_arp_entry+0x148>)
 801b71e:	4613      	mov	r3, r2
 801b720:	005b      	lsls	r3, r3, #1
 801b722:	4413      	add	r3, r2
 801b724:	00db      	lsls	r3, r3, #3
 801b726:	440b      	add	r3, r1
 801b728:	3312      	adds	r3, #18
 801b72a:	2200      	movs	r2, #0
 801b72c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b72e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b732:	491b      	ldr	r1, [pc, #108]	; (801b7a0 <etharp_update_arp_entry+0x148>)
 801b734:	4613      	mov	r3, r2
 801b736:	005b      	lsls	r3, r3, #1
 801b738:	4413      	add	r3, r2
 801b73a:	00db      	lsls	r3, r3, #3
 801b73c:	440b      	add	r3, r1
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d021      	beq.n	801b788 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b748:	4915      	ldr	r1, [pc, #84]	; (801b7a0 <etharp_update_arp_entry+0x148>)
 801b74a:	4613      	mov	r3, r2
 801b74c:	005b      	lsls	r3, r3, #1
 801b74e:	4413      	add	r3, r2
 801b750:	00db      	lsls	r3, r3, #3
 801b752:	440b      	add	r3, r1
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b758:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b75c:	4910      	ldr	r1, [pc, #64]	; (801b7a0 <etharp_update_arp_entry+0x148>)
 801b75e:	4613      	mov	r3, r2
 801b760:	005b      	lsls	r3, r3, #1
 801b762:	4413      	add	r3, r2
 801b764:	00db      	lsls	r3, r3, #3
 801b766:	440b      	add	r3, r1
 801b768:	2200      	movs	r2, #0
 801b76a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b76c:	68fb      	ldr	r3, [r7, #12]
 801b76e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801b772:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b776:	9300      	str	r3, [sp, #0]
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	6939      	ldr	r1, [r7, #16]
 801b77c:	68f8      	ldr	r0, [r7, #12]
 801b77e:	f002 f8e3 	bl	801d948 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b782:	6938      	ldr	r0, [r7, #16]
 801b784:	f7f6 f8d2 	bl	801192c <pbuf_free>
  }
  return ERR_OK;
 801b788:	2300      	movs	r3, #0
}
 801b78a:	4618      	mov	r0, r3
 801b78c:	3718      	adds	r7, #24
 801b78e:	46bd      	mov	sp, r7
 801b790:	bd80      	pop	{r7, pc}
 801b792:	bf00      	nop
 801b794:	08025d18 	.word	0x08025d18
 801b798:	08025e10 	.word	0x08025e10
 801b79c:	08025d90 	.word	0x08025d90
 801b7a0:	200143ac 	.word	0x200143ac

0801b7a4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b7a4:	b580      	push	{r7, lr}
 801b7a6:	b084      	sub	sp, #16
 801b7a8:	af00      	add	r7, sp, #0
 801b7aa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b7ac:	2300      	movs	r3, #0
 801b7ae:	60fb      	str	r3, [r7, #12]
 801b7b0:	e01e      	b.n	801b7f0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b7b2:	4913      	ldr	r1, [pc, #76]	; (801b800 <etharp_cleanup_netif+0x5c>)
 801b7b4:	68fa      	ldr	r2, [r7, #12]
 801b7b6:	4613      	mov	r3, r2
 801b7b8:	005b      	lsls	r3, r3, #1
 801b7ba:	4413      	add	r3, r2
 801b7bc:	00db      	lsls	r3, r3, #3
 801b7be:	440b      	add	r3, r1
 801b7c0:	3314      	adds	r3, #20
 801b7c2:	781b      	ldrb	r3, [r3, #0]
 801b7c4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b7c6:	7afb      	ldrb	r3, [r7, #11]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d00e      	beq.n	801b7ea <etharp_cleanup_netif+0x46>
 801b7cc:	490c      	ldr	r1, [pc, #48]	; (801b800 <etharp_cleanup_netif+0x5c>)
 801b7ce:	68fa      	ldr	r2, [r7, #12]
 801b7d0:	4613      	mov	r3, r2
 801b7d2:	005b      	lsls	r3, r3, #1
 801b7d4:	4413      	add	r3, r2
 801b7d6:	00db      	lsls	r3, r3, #3
 801b7d8:	440b      	add	r3, r1
 801b7da:	3308      	adds	r3, #8
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	687a      	ldr	r2, [r7, #4]
 801b7e0:	429a      	cmp	r2, r3
 801b7e2:	d102      	bne.n	801b7ea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b7e4:	68f8      	ldr	r0, [r7, #12]
 801b7e6:	f7ff fcb7 	bl	801b158 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	3301      	adds	r3, #1
 801b7ee:	60fb      	str	r3, [r7, #12]
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	2b09      	cmp	r3, #9
 801b7f4:	dddd      	ble.n	801b7b2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801b7f6:	bf00      	nop
 801b7f8:	bf00      	nop
 801b7fa:	3710      	adds	r7, #16
 801b7fc:	46bd      	mov	sp, r7
 801b7fe:	bd80      	pop	{r7, pc}
 801b800:	200143ac 	.word	0x200143ac

0801b804 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b804:	b5b0      	push	{r4, r5, r7, lr}
 801b806:	b08a      	sub	sp, #40	; 0x28
 801b808:	af04      	add	r7, sp, #16
 801b80a:	6078      	str	r0, [r7, #4]
 801b80c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b80e:	683b      	ldr	r3, [r7, #0]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d107      	bne.n	801b824 <etharp_input+0x20>
 801b814:	4b3f      	ldr	r3, [pc, #252]	; (801b914 <etharp_input+0x110>)
 801b816:	f240 228a 	movw	r2, #650	; 0x28a
 801b81a:	493f      	ldr	r1, [pc, #252]	; (801b918 <etharp_input+0x114>)
 801b81c:	483f      	ldr	r0, [pc, #252]	; (801b91c <etharp_input+0x118>)
 801b81e:	f003 f92d 	bl	801ea7c <iprintf>
 801b822:	e074      	b.n	801b90e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	685b      	ldr	r3, [r3, #4]
 801b828:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b82a:	697b      	ldr	r3, [r7, #20]
 801b82c:	881b      	ldrh	r3, [r3, #0]
 801b82e:	b29b      	uxth	r3, r3
 801b830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b834:	d10c      	bne.n	801b850 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b836:	697b      	ldr	r3, [r7, #20]
 801b838:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b83a:	2b06      	cmp	r3, #6
 801b83c:	d108      	bne.n	801b850 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b83e:	697b      	ldr	r3, [r7, #20]
 801b840:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b842:	2b04      	cmp	r3, #4
 801b844:	d104      	bne.n	801b850 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b846:	697b      	ldr	r3, [r7, #20]
 801b848:	885b      	ldrh	r3, [r3, #2]
 801b84a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b84c:	2b08      	cmp	r3, #8
 801b84e:	d003      	beq.n	801b858 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b850:	6878      	ldr	r0, [r7, #4]
 801b852:	f7f6 f86b 	bl	801192c <pbuf_free>
    return;
 801b856:	e05a      	b.n	801b90e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b858:	697b      	ldr	r3, [r7, #20]
 801b85a:	330e      	adds	r3, #14
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b860:	697b      	ldr	r3, [r7, #20]
 801b862:	3318      	adds	r3, #24
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b868:	683b      	ldr	r3, [r7, #0]
 801b86a:	3304      	adds	r3, #4
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d102      	bne.n	801b878 <etharp_input+0x74>
    for_us = 0;
 801b872:	2300      	movs	r3, #0
 801b874:	74fb      	strb	r3, [r7, #19]
 801b876:	e009      	b.n	801b88c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b878:	68ba      	ldr	r2, [r7, #8]
 801b87a:	683b      	ldr	r3, [r7, #0]
 801b87c:	3304      	adds	r3, #4
 801b87e:	681b      	ldr	r3, [r3, #0]
 801b880:	429a      	cmp	r2, r3
 801b882:	bf0c      	ite	eq
 801b884:	2301      	moveq	r3, #1
 801b886:	2300      	movne	r3, #0
 801b888:	b2db      	uxtb	r3, r3
 801b88a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b88c:	697b      	ldr	r3, [r7, #20]
 801b88e:	f103 0208 	add.w	r2, r3, #8
 801b892:	7cfb      	ldrb	r3, [r7, #19]
 801b894:	2b00      	cmp	r3, #0
 801b896:	d001      	beq.n	801b89c <etharp_input+0x98>
 801b898:	2301      	movs	r3, #1
 801b89a:	e000      	b.n	801b89e <etharp_input+0x9a>
 801b89c:	2302      	movs	r3, #2
 801b89e:	f107 010c 	add.w	r1, r7, #12
 801b8a2:	6838      	ldr	r0, [r7, #0]
 801b8a4:	f7ff fed8 	bl	801b658 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b8a8:	697b      	ldr	r3, [r7, #20]
 801b8aa:	88db      	ldrh	r3, [r3, #6]
 801b8ac:	b29b      	uxth	r3, r3
 801b8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b8b2:	d003      	beq.n	801b8bc <etharp_input+0xb8>
 801b8b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b8b8:	d01e      	beq.n	801b8f8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b8ba:	e025      	b.n	801b908 <etharp_input+0x104>
      if (for_us) {
 801b8bc:	7cfb      	ldrb	r3, [r7, #19]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d021      	beq.n	801b906 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b8c2:	683b      	ldr	r3, [r7, #0]
 801b8c4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801b8c8:	697b      	ldr	r3, [r7, #20]
 801b8ca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b8ce:	683b      	ldr	r3, [r7, #0]
 801b8d0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801b8d4:	683b      	ldr	r3, [r7, #0]
 801b8d6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b8d8:	697a      	ldr	r2, [r7, #20]
 801b8da:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b8dc:	2102      	movs	r1, #2
 801b8de:	9103      	str	r1, [sp, #12]
 801b8e0:	f107 010c 	add.w	r1, r7, #12
 801b8e4:	9102      	str	r1, [sp, #8]
 801b8e6:	9201      	str	r2, [sp, #4]
 801b8e8:	9300      	str	r3, [sp, #0]
 801b8ea:	462b      	mov	r3, r5
 801b8ec:	4622      	mov	r2, r4
 801b8ee:	4601      	mov	r1, r0
 801b8f0:	6838      	ldr	r0, [r7, #0]
 801b8f2:	f000 faef 	bl	801bed4 <etharp_raw>
      break;
 801b8f6:	e006      	b.n	801b906 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801b8f8:	f107 030c 	add.w	r3, r7, #12
 801b8fc:	4619      	mov	r1, r3
 801b8fe:	6838      	ldr	r0, [r7, #0]
 801b900:	f7fe f990 	bl	8019c24 <dhcp_arp_reply>
      break;
 801b904:	e000      	b.n	801b908 <etharp_input+0x104>
      break;
 801b906:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b908:	6878      	ldr	r0, [r7, #4]
 801b90a:	f7f6 f80f 	bl	801192c <pbuf_free>
}
 801b90e:	3718      	adds	r7, #24
 801b910:	46bd      	mov	sp, r7
 801b912:	bdb0      	pop	{r4, r5, r7, pc}
 801b914:	08025d18 	.word	0x08025d18
 801b918:	08025e68 	.word	0x08025e68
 801b91c:	08025d90 	.word	0x08025d90

0801b920 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b086      	sub	sp, #24
 801b924:	af02      	add	r7, sp, #8
 801b926:	60f8      	str	r0, [r7, #12]
 801b928:	60b9      	str	r1, [r7, #8]
 801b92a:	4613      	mov	r3, r2
 801b92c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b92e:	79fa      	ldrb	r2, [r7, #7]
 801b930:	4944      	ldr	r1, [pc, #272]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801b932:	4613      	mov	r3, r2
 801b934:	005b      	lsls	r3, r3, #1
 801b936:	4413      	add	r3, r2
 801b938:	00db      	lsls	r3, r3, #3
 801b93a:	440b      	add	r3, r1
 801b93c:	3314      	adds	r3, #20
 801b93e:	781b      	ldrb	r3, [r3, #0]
 801b940:	2b01      	cmp	r3, #1
 801b942:	d806      	bhi.n	801b952 <etharp_output_to_arp_index+0x32>
 801b944:	4b40      	ldr	r3, [pc, #256]	; (801ba48 <etharp_output_to_arp_index+0x128>)
 801b946:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b94a:	4940      	ldr	r1, [pc, #256]	; (801ba4c <etharp_output_to_arp_index+0x12c>)
 801b94c:	4840      	ldr	r0, [pc, #256]	; (801ba50 <etharp_output_to_arp_index+0x130>)
 801b94e:	f003 f895 	bl	801ea7c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b952:	79fa      	ldrb	r2, [r7, #7]
 801b954:	493b      	ldr	r1, [pc, #236]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801b956:	4613      	mov	r3, r2
 801b958:	005b      	lsls	r3, r3, #1
 801b95a:	4413      	add	r3, r2
 801b95c:	00db      	lsls	r3, r3, #3
 801b95e:	440b      	add	r3, r1
 801b960:	3314      	adds	r3, #20
 801b962:	781b      	ldrb	r3, [r3, #0]
 801b964:	2b02      	cmp	r3, #2
 801b966:	d153      	bne.n	801ba10 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b968:	79fa      	ldrb	r2, [r7, #7]
 801b96a:	4936      	ldr	r1, [pc, #216]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801b96c:	4613      	mov	r3, r2
 801b96e:	005b      	lsls	r3, r3, #1
 801b970:	4413      	add	r3, r2
 801b972:	00db      	lsls	r3, r3, #3
 801b974:	440b      	add	r3, r1
 801b976:	3312      	adds	r3, #18
 801b978:	881b      	ldrh	r3, [r3, #0]
 801b97a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801b97e:	d919      	bls.n	801b9b4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b980:	79fa      	ldrb	r2, [r7, #7]
 801b982:	4613      	mov	r3, r2
 801b984:	005b      	lsls	r3, r3, #1
 801b986:	4413      	add	r3, r2
 801b988:	00db      	lsls	r3, r3, #3
 801b98a:	4a2e      	ldr	r2, [pc, #184]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801b98c:	4413      	add	r3, r2
 801b98e:	3304      	adds	r3, #4
 801b990:	4619      	mov	r1, r3
 801b992:	68f8      	ldr	r0, [r7, #12]
 801b994:	f000 fb4c 	bl	801c030 <etharp_request>
 801b998:	4603      	mov	r3, r0
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d138      	bne.n	801ba10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b99e:	79fa      	ldrb	r2, [r7, #7]
 801b9a0:	4928      	ldr	r1, [pc, #160]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801b9a2:	4613      	mov	r3, r2
 801b9a4:	005b      	lsls	r3, r3, #1
 801b9a6:	4413      	add	r3, r2
 801b9a8:	00db      	lsls	r3, r3, #3
 801b9aa:	440b      	add	r3, r1
 801b9ac:	3314      	adds	r3, #20
 801b9ae:	2203      	movs	r2, #3
 801b9b0:	701a      	strb	r2, [r3, #0]
 801b9b2:	e02d      	b.n	801ba10 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b9b4:	79fa      	ldrb	r2, [r7, #7]
 801b9b6:	4923      	ldr	r1, [pc, #140]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801b9b8:	4613      	mov	r3, r2
 801b9ba:	005b      	lsls	r3, r3, #1
 801b9bc:	4413      	add	r3, r2
 801b9be:	00db      	lsls	r3, r3, #3
 801b9c0:	440b      	add	r3, r1
 801b9c2:	3312      	adds	r3, #18
 801b9c4:	881b      	ldrh	r3, [r3, #0]
 801b9c6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801b9ca:	d321      	bcc.n	801ba10 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b9cc:	79fa      	ldrb	r2, [r7, #7]
 801b9ce:	4613      	mov	r3, r2
 801b9d0:	005b      	lsls	r3, r3, #1
 801b9d2:	4413      	add	r3, r2
 801b9d4:	00db      	lsls	r3, r3, #3
 801b9d6:	4a1b      	ldr	r2, [pc, #108]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801b9d8:	4413      	add	r3, r2
 801b9da:	1d19      	adds	r1, r3, #4
 801b9dc:	79fa      	ldrb	r2, [r7, #7]
 801b9de:	4613      	mov	r3, r2
 801b9e0:	005b      	lsls	r3, r3, #1
 801b9e2:	4413      	add	r3, r2
 801b9e4:	00db      	lsls	r3, r3, #3
 801b9e6:	3308      	adds	r3, #8
 801b9e8:	4a16      	ldr	r2, [pc, #88]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801b9ea:	4413      	add	r3, r2
 801b9ec:	3304      	adds	r3, #4
 801b9ee:	461a      	mov	r2, r3
 801b9f0:	68f8      	ldr	r0, [r7, #12]
 801b9f2:	f000 fafb 	bl	801bfec <etharp_request_dst>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d109      	bne.n	801ba10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b9fc:	79fa      	ldrb	r2, [r7, #7]
 801b9fe:	4911      	ldr	r1, [pc, #68]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801ba00:	4613      	mov	r3, r2
 801ba02:	005b      	lsls	r3, r3, #1
 801ba04:	4413      	add	r3, r2
 801ba06:	00db      	lsls	r3, r3, #3
 801ba08:	440b      	add	r3, r1
 801ba0a:	3314      	adds	r3, #20
 801ba0c:	2203      	movs	r2, #3
 801ba0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801ba16:	79fa      	ldrb	r2, [r7, #7]
 801ba18:	4613      	mov	r3, r2
 801ba1a:	005b      	lsls	r3, r3, #1
 801ba1c:	4413      	add	r3, r2
 801ba1e:	00db      	lsls	r3, r3, #3
 801ba20:	3308      	adds	r3, #8
 801ba22:	4a08      	ldr	r2, [pc, #32]	; (801ba44 <etharp_output_to_arp_index+0x124>)
 801ba24:	4413      	add	r3, r2
 801ba26:	3304      	adds	r3, #4
 801ba28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ba2c:	9200      	str	r2, [sp, #0]
 801ba2e:	460a      	mov	r2, r1
 801ba30:	68b9      	ldr	r1, [r7, #8]
 801ba32:	68f8      	ldr	r0, [r7, #12]
 801ba34:	f001 ff88 	bl	801d948 <ethernet_output>
 801ba38:	4603      	mov	r3, r0
}
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	3710      	adds	r7, #16
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	bd80      	pop	{r7, pc}
 801ba42:	bf00      	nop
 801ba44:	200143ac 	.word	0x200143ac
 801ba48:	08025d18 	.word	0x08025d18
 801ba4c:	08025e88 	.word	0x08025e88
 801ba50:	08025d90 	.word	0x08025d90

0801ba54 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ba54:	b580      	push	{r7, lr}
 801ba56:	b08a      	sub	sp, #40	; 0x28
 801ba58:	af02      	add	r7, sp, #8
 801ba5a:	60f8      	str	r0, [r7, #12]
 801ba5c:	60b9      	str	r1, [r7, #8]
 801ba5e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d106      	bne.n	801ba78 <etharp_output+0x24>
 801ba6a:	4b73      	ldr	r3, [pc, #460]	; (801bc38 <etharp_output+0x1e4>)
 801ba6c:	f240 321e 	movw	r2, #798	; 0x31e
 801ba70:	4972      	ldr	r1, [pc, #456]	; (801bc3c <etharp_output+0x1e8>)
 801ba72:	4873      	ldr	r0, [pc, #460]	; (801bc40 <etharp_output+0x1ec>)
 801ba74:	f003 f802 	bl	801ea7c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ba78:	68bb      	ldr	r3, [r7, #8]
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d106      	bne.n	801ba8c <etharp_output+0x38>
 801ba7e:	4b6e      	ldr	r3, [pc, #440]	; (801bc38 <etharp_output+0x1e4>)
 801ba80:	f240 321f 	movw	r2, #799	; 0x31f
 801ba84:	496f      	ldr	r1, [pc, #444]	; (801bc44 <etharp_output+0x1f0>)
 801ba86:	486e      	ldr	r0, [pc, #440]	; (801bc40 <etharp_output+0x1ec>)
 801ba88:	f002 fff8 	bl	801ea7c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d106      	bne.n	801baa0 <etharp_output+0x4c>
 801ba92:	4b69      	ldr	r3, [pc, #420]	; (801bc38 <etharp_output+0x1e4>)
 801ba94:	f44f 7248 	mov.w	r2, #800	; 0x320
 801ba98:	496b      	ldr	r1, [pc, #428]	; (801bc48 <etharp_output+0x1f4>)
 801ba9a:	4869      	ldr	r0, [pc, #420]	; (801bc40 <etharp_output+0x1ec>)
 801ba9c:	f002 ffee 	bl	801ea7c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	68f9      	ldr	r1, [r7, #12]
 801baa6:	4618      	mov	r0, r3
 801baa8:	f000 ff1c 	bl	801c8e4 <ip4_addr_isbroadcast_u32>
 801baac:	4603      	mov	r3, r0
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d002      	beq.n	801bab8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801bab2:	4b66      	ldr	r3, [pc, #408]	; (801bc4c <etharp_output+0x1f8>)
 801bab4:	61fb      	str	r3, [r7, #28]
 801bab6:	e0af      	b.n	801bc18 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bac0:	2be0      	cmp	r3, #224	; 0xe0
 801bac2:	d118      	bne.n	801baf6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801bac4:	2301      	movs	r3, #1
 801bac6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801bac8:	2300      	movs	r3, #0
 801baca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801bacc:	235e      	movs	r3, #94	; 0x5e
 801bace:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	3301      	adds	r3, #1
 801bad4:	781b      	ldrb	r3, [r3, #0]
 801bad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bada:	b2db      	uxtb	r3, r3
 801badc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	3302      	adds	r3, #2
 801bae2:	781b      	ldrb	r3, [r3, #0]
 801bae4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	3303      	adds	r3, #3
 801baea:	781b      	ldrb	r3, [r3, #0]
 801baec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801baee:	f107 0310 	add.w	r3, r7, #16
 801baf2:	61fb      	str	r3, [r7, #28]
 801baf4:	e090      	b.n	801bc18 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	681a      	ldr	r2, [r3, #0]
 801bafa:	68fb      	ldr	r3, [r7, #12]
 801bafc:	3304      	adds	r3, #4
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	405a      	eors	r2, r3
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	3308      	adds	r3, #8
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	4013      	ands	r3, r2
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d012      	beq.n	801bb34 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bb14:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801bb18:	4293      	cmp	r3, r2
 801bb1a:	d00b      	beq.n	801bb34 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	330c      	adds	r3, #12
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d003      	beq.n	801bb2e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	330c      	adds	r3, #12
 801bb2a:	61bb      	str	r3, [r7, #24]
 801bb2c:	e002      	b.n	801bb34 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801bb2e:	f06f 0303 	mvn.w	r3, #3
 801bb32:	e07d      	b.n	801bc30 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bb34:	4b46      	ldr	r3, [pc, #280]	; (801bc50 <etharp_output+0x1fc>)
 801bb36:	781b      	ldrb	r3, [r3, #0]
 801bb38:	4619      	mov	r1, r3
 801bb3a:	4a46      	ldr	r2, [pc, #280]	; (801bc54 <etharp_output+0x200>)
 801bb3c:	460b      	mov	r3, r1
 801bb3e:	005b      	lsls	r3, r3, #1
 801bb40:	440b      	add	r3, r1
 801bb42:	00db      	lsls	r3, r3, #3
 801bb44:	4413      	add	r3, r2
 801bb46:	3314      	adds	r3, #20
 801bb48:	781b      	ldrb	r3, [r3, #0]
 801bb4a:	2b01      	cmp	r3, #1
 801bb4c:	d925      	bls.n	801bb9a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bb4e:	4b40      	ldr	r3, [pc, #256]	; (801bc50 <etharp_output+0x1fc>)
 801bb50:	781b      	ldrb	r3, [r3, #0]
 801bb52:	4619      	mov	r1, r3
 801bb54:	4a3f      	ldr	r2, [pc, #252]	; (801bc54 <etharp_output+0x200>)
 801bb56:	460b      	mov	r3, r1
 801bb58:	005b      	lsls	r3, r3, #1
 801bb5a:	440b      	add	r3, r1
 801bb5c:	00db      	lsls	r3, r3, #3
 801bb5e:	4413      	add	r3, r2
 801bb60:	3308      	adds	r3, #8
 801bb62:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bb64:	68fa      	ldr	r2, [r7, #12]
 801bb66:	429a      	cmp	r2, r3
 801bb68:	d117      	bne.n	801bb9a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801bb6a:	69bb      	ldr	r3, [r7, #24]
 801bb6c:	681a      	ldr	r2, [r3, #0]
 801bb6e:	4b38      	ldr	r3, [pc, #224]	; (801bc50 <etharp_output+0x1fc>)
 801bb70:	781b      	ldrb	r3, [r3, #0]
 801bb72:	4618      	mov	r0, r3
 801bb74:	4937      	ldr	r1, [pc, #220]	; (801bc54 <etharp_output+0x200>)
 801bb76:	4603      	mov	r3, r0
 801bb78:	005b      	lsls	r3, r3, #1
 801bb7a:	4403      	add	r3, r0
 801bb7c:	00db      	lsls	r3, r3, #3
 801bb7e:	440b      	add	r3, r1
 801bb80:	3304      	adds	r3, #4
 801bb82:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bb84:	429a      	cmp	r2, r3
 801bb86:	d108      	bne.n	801bb9a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801bb88:	4b31      	ldr	r3, [pc, #196]	; (801bc50 <etharp_output+0x1fc>)
 801bb8a:	781b      	ldrb	r3, [r3, #0]
 801bb8c:	461a      	mov	r2, r3
 801bb8e:	68b9      	ldr	r1, [r7, #8]
 801bb90:	68f8      	ldr	r0, [r7, #12]
 801bb92:	f7ff fec5 	bl	801b920 <etharp_output_to_arp_index>
 801bb96:	4603      	mov	r3, r0
 801bb98:	e04a      	b.n	801bc30 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bb9a:	2300      	movs	r3, #0
 801bb9c:	75fb      	strb	r3, [r7, #23]
 801bb9e:	e031      	b.n	801bc04 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bba0:	7dfa      	ldrb	r2, [r7, #23]
 801bba2:	492c      	ldr	r1, [pc, #176]	; (801bc54 <etharp_output+0x200>)
 801bba4:	4613      	mov	r3, r2
 801bba6:	005b      	lsls	r3, r3, #1
 801bba8:	4413      	add	r3, r2
 801bbaa:	00db      	lsls	r3, r3, #3
 801bbac:	440b      	add	r3, r1
 801bbae:	3314      	adds	r3, #20
 801bbb0:	781b      	ldrb	r3, [r3, #0]
 801bbb2:	2b01      	cmp	r3, #1
 801bbb4:	d923      	bls.n	801bbfe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801bbb6:	7dfa      	ldrb	r2, [r7, #23]
 801bbb8:	4926      	ldr	r1, [pc, #152]	; (801bc54 <etharp_output+0x200>)
 801bbba:	4613      	mov	r3, r2
 801bbbc:	005b      	lsls	r3, r3, #1
 801bbbe:	4413      	add	r3, r2
 801bbc0:	00db      	lsls	r3, r3, #3
 801bbc2:	440b      	add	r3, r1
 801bbc4:	3308      	adds	r3, #8
 801bbc6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bbc8:	68fa      	ldr	r2, [r7, #12]
 801bbca:	429a      	cmp	r2, r3
 801bbcc:	d117      	bne.n	801bbfe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801bbce:	69bb      	ldr	r3, [r7, #24]
 801bbd0:	6819      	ldr	r1, [r3, #0]
 801bbd2:	7dfa      	ldrb	r2, [r7, #23]
 801bbd4:	481f      	ldr	r0, [pc, #124]	; (801bc54 <etharp_output+0x200>)
 801bbd6:	4613      	mov	r3, r2
 801bbd8:	005b      	lsls	r3, r3, #1
 801bbda:	4413      	add	r3, r2
 801bbdc:	00db      	lsls	r3, r3, #3
 801bbde:	4403      	add	r3, r0
 801bbe0:	3304      	adds	r3, #4
 801bbe2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801bbe4:	4299      	cmp	r1, r3
 801bbe6:	d10a      	bne.n	801bbfe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801bbe8:	4a19      	ldr	r2, [pc, #100]	; (801bc50 <etharp_output+0x1fc>)
 801bbea:	7dfb      	ldrb	r3, [r7, #23]
 801bbec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801bbee:	7dfb      	ldrb	r3, [r7, #23]
 801bbf0:	461a      	mov	r2, r3
 801bbf2:	68b9      	ldr	r1, [r7, #8]
 801bbf4:	68f8      	ldr	r0, [r7, #12]
 801bbf6:	f7ff fe93 	bl	801b920 <etharp_output_to_arp_index>
 801bbfa:	4603      	mov	r3, r0
 801bbfc:	e018      	b.n	801bc30 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bbfe:	7dfb      	ldrb	r3, [r7, #23]
 801bc00:	3301      	adds	r3, #1
 801bc02:	75fb      	strb	r3, [r7, #23]
 801bc04:	7dfb      	ldrb	r3, [r7, #23]
 801bc06:	2b09      	cmp	r3, #9
 801bc08:	d9ca      	bls.n	801bba0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801bc0a:	68ba      	ldr	r2, [r7, #8]
 801bc0c:	69b9      	ldr	r1, [r7, #24]
 801bc0e:	68f8      	ldr	r0, [r7, #12]
 801bc10:	f000 f822 	bl	801bc58 <etharp_query>
 801bc14:	4603      	mov	r3, r0
 801bc16:	e00b      	b.n	801bc30 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801bc1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bc22:	9300      	str	r3, [sp, #0]
 801bc24:	69fb      	ldr	r3, [r7, #28]
 801bc26:	68b9      	ldr	r1, [r7, #8]
 801bc28:	68f8      	ldr	r0, [r7, #12]
 801bc2a:	f001 fe8d 	bl	801d948 <ethernet_output>
 801bc2e:	4603      	mov	r3, r0
}
 801bc30:	4618      	mov	r0, r3
 801bc32:	3720      	adds	r7, #32
 801bc34:	46bd      	mov	sp, r7
 801bc36:	bd80      	pop	{r7, pc}
 801bc38:	08025d18 	.word	0x08025d18
 801bc3c:	08025e68 	.word	0x08025e68
 801bc40:	08025d90 	.word	0x08025d90
 801bc44:	08025eb8 	.word	0x08025eb8
 801bc48:	08025e58 	.word	0x08025e58
 801bc4c:	080266c8 	.word	0x080266c8
 801bc50:	2001449c 	.word	0x2001449c
 801bc54:	200143ac 	.word	0x200143ac

0801bc58 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b08c      	sub	sp, #48	; 0x30
 801bc5c:	af02      	add	r7, sp, #8
 801bc5e:	60f8      	str	r0, [r7, #12]
 801bc60:	60b9      	str	r1, [r7, #8]
 801bc62:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	332a      	adds	r3, #42	; 0x2a
 801bc68:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801bc6a:	23ff      	movs	r3, #255	; 0xff
 801bc6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801bc70:	2300      	movs	r3, #0
 801bc72:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bc74:	68bb      	ldr	r3, [r7, #8]
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	68f9      	ldr	r1, [r7, #12]
 801bc7a:	4618      	mov	r0, r3
 801bc7c:	f000 fe32 	bl	801c8e4 <ip4_addr_isbroadcast_u32>
 801bc80:	4603      	mov	r3, r0
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d10c      	bne.n	801bca0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bc86:	68bb      	ldr	r3, [r7, #8]
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bc8e:	2be0      	cmp	r3, #224	; 0xe0
 801bc90:	d006      	beq.n	801bca0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bc92:	68bb      	ldr	r3, [r7, #8]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d003      	beq.n	801bca0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801bc98:	68bb      	ldr	r3, [r7, #8]
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d102      	bne.n	801bca6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bca0:	f06f 030f 	mvn.w	r3, #15
 801bca4:	e101      	b.n	801beaa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801bca6:	68fa      	ldr	r2, [r7, #12]
 801bca8:	2101      	movs	r1, #1
 801bcaa:	68b8      	ldr	r0, [r7, #8]
 801bcac:	f7ff fb5c 	bl	801b368 <etharp_find_entry>
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801bcb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	da02      	bge.n	801bcc2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801bcbc:	8a7b      	ldrh	r3, [r7, #18]
 801bcbe:	b25b      	sxtb	r3, r3
 801bcc0:	e0f3      	b.n	801beaa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801bcc2:	8a7b      	ldrh	r3, [r7, #18]
 801bcc4:	2b7e      	cmp	r3, #126	; 0x7e
 801bcc6:	d906      	bls.n	801bcd6 <etharp_query+0x7e>
 801bcc8:	4b7a      	ldr	r3, [pc, #488]	; (801beb4 <etharp_query+0x25c>)
 801bcca:	f240 32c1 	movw	r2, #961	; 0x3c1
 801bcce:	497a      	ldr	r1, [pc, #488]	; (801beb8 <etharp_query+0x260>)
 801bcd0:	487a      	ldr	r0, [pc, #488]	; (801bebc <etharp_query+0x264>)
 801bcd2:	f002 fed3 	bl	801ea7c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801bcd6:	8a7b      	ldrh	r3, [r7, #18]
 801bcd8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801bcda:	7c7a      	ldrb	r2, [r7, #17]
 801bcdc:	4978      	ldr	r1, [pc, #480]	; (801bec0 <etharp_query+0x268>)
 801bcde:	4613      	mov	r3, r2
 801bce0:	005b      	lsls	r3, r3, #1
 801bce2:	4413      	add	r3, r2
 801bce4:	00db      	lsls	r3, r3, #3
 801bce6:	440b      	add	r3, r1
 801bce8:	3314      	adds	r3, #20
 801bcea:	781b      	ldrb	r3, [r3, #0]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d115      	bne.n	801bd1c <etharp_query+0xc4>
    is_new_entry = 1;
 801bcf0:	2301      	movs	r3, #1
 801bcf2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801bcf4:	7c7a      	ldrb	r2, [r7, #17]
 801bcf6:	4972      	ldr	r1, [pc, #456]	; (801bec0 <etharp_query+0x268>)
 801bcf8:	4613      	mov	r3, r2
 801bcfa:	005b      	lsls	r3, r3, #1
 801bcfc:	4413      	add	r3, r2
 801bcfe:	00db      	lsls	r3, r3, #3
 801bd00:	440b      	add	r3, r1
 801bd02:	3314      	adds	r3, #20
 801bd04:	2201      	movs	r2, #1
 801bd06:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801bd08:	7c7a      	ldrb	r2, [r7, #17]
 801bd0a:	496d      	ldr	r1, [pc, #436]	; (801bec0 <etharp_query+0x268>)
 801bd0c:	4613      	mov	r3, r2
 801bd0e:	005b      	lsls	r3, r3, #1
 801bd10:	4413      	add	r3, r2
 801bd12:	00db      	lsls	r3, r3, #3
 801bd14:	440b      	add	r3, r1
 801bd16:	3308      	adds	r3, #8
 801bd18:	68fa      	ldr	r2, [r7, #12]
 801bd1a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801bd1c:	7c7a      	ldrb	r2, [r7, #17]
 801bd1e:	4968      	ldr	r1, [pc, #416]	; (801bec0 <etharp_query+0x268>)
 801bd20:	4613      	mov	r3, r2
 801bd22:	005b      	lsls	r3, r3, #1
 801bd24:	4413      	add	r3, r2
 801bd26:	00db      	lsls	r3, r3, #3
 801bd28:	440b      	add	r3, r1
 801bd2a:	3314      	adds	r3, #20
 801bd2c:	781b      	ldrb	r3, [r3, #0]
 801bd2e:	2b01      	cmp	r3, #1
 801bd30:	d011      	beq.n	801bd56 <etharp_query+0xfe>
 801bd32:	7c7a      	ldrb	r2, [r7, #17]
 801bd34:	4962      	ldr	r1, [pc, #392]	; (801bec0 <etharp_query+0x268>)
 801bd36:	4613      	mov	r3, r2
 801bd38:	005b      	lsls	r3, r3, #1
 801bd3a:	4413      	add	r3, r2
 801bd3c:	00db      	lsls	r3, r3, #3
 801bd3e:	440b      	add	r3, r1
 801bd40:	3314      	adds	r3, #20
 801bd42:	781b      	ldrb	r3, [r3, #0]
 801bd44:	2b01      	cmp	r3, #1
 801bd46:	d806      	bhi.n	801bd56 <etharp_query+0xfe>
 801bd48:	4b5a      	ldr	r3, [pc, #360]	; (801beb4 <etharp_query+0x25c>)
 801bd4a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801bd4e:	495d      	ldr	r1, [pc, #372]	; (801bec4 <etharp_query+0x26c>)
 801bd50:	485a      	ldr	r0, [pc, #360]	; (801bebc <etharp_query+0x264>)
 801bd52:	f002 fe93 	bl	801ea7c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801bd56:	6a3b      	ldr	r3, [r7, #32]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d102      	bne.n	801bd62 <etharp_query+0x10a>
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d10c      	bne.n	801bd7c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801bd62:	68b9      	ldr	r1, [r7, #8]
 801bd64:	68f8      	ldr	r0, [r7, #12]
 801bd66:	f000 f963 	bl	801c030 <etharp_request>
 801bd6a:	4603      	mov	r3, r0
 801bd6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d102      	bne.n	801bd7c <etharp_query+0x124>
      return result;
 801bd76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801bd7a:	e096      	b.n	801beaa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d106      	bne.n	801bd90 <etharp_query+0x138>
 801bd82:	4b4c      	ldr	r3, [pc, #304]	; (801beb4 <etharp_query+0x25c>)
 801bd84:	f240 32e1 	movw	r2, #993	; 0x3e1
 801bd88:	494f      	ldr	r1, [pc, #316]	; (801bec8 <etharp_query+0x270>)
 801bd8a:	484c      	ldr	r0, [pc, #304]	; (801bebc <etharp_query+0x264>)
 801bd8c:	f002 fe76 	bl	801ea7c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801bd90:	7c7a      	ldrb	r2, [r7, #17]
 801bd92:	494b      	ldr	r1, [pc, #300]	; (801bec0 <etharp_query+0x268>)
 801bd94:	4613      	mov	r3, r2
 801bd96:	005b      	lsls	r3, r3, #1
 801bd98:	4413      	add	r3, r2
 801bd9a:	00db      	lsls	r3, r3, #3
 801bd9c:	440b      	add	r3, r1
 801bd9e:	3314      	adds	r3, #20
 801bda0:	781b      	ldrb	r3, [r3, #0]
 801bda2:	2b01      	cmp	r3, #1
 801bda4:	d917      	bls.n	801bdd6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801bda6:	4a49      	ldr	r2, [pc, #292]	; (801becc <etharp_query+0x274>)
 801bda8:	7c7b      	ldrb	r3, [r7, #17]
 801bdaa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801bdac:	7c7a      	ldrb	r2, [r7, #17]
 801bdae:	4613      	mov	r3, r2
 801bdb0:	005b      	lsls	r3, r3, #1
 801bdb2:	4413      	add	r3, r2
 801bdb4:	00db      	lsls	r3, r3, #3
 801bdb6:	3308      	adds	r3, #8
 801bdb8:	4a41      	ldr	r2, [pc, #260]	; (801bec0 <etharp_query+0x268>)
 801bdba:	4413      	add	r3, r2
 801bdbc:	3304      	adds	r3, #4
 801bdbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bdc2:	9200      	str	r2, [sp, #0]
 801bdc4:	697a      	ldr	r2, [r7, #20]
 801bdc6:	6879      	ldr	r1, [r7, #4]
 801bdc8:	68f8      	ldr	r0, [r7, #12]
 801bdca:	f001 fdbd 	bl	801d948 <ethernet_output>
 801bdce:	4603      	mov	r3, r0
 801bdd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bdd4:	e067      	b.n	801bea6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801bdd6:	7c7a      	ldrb	r2, [r7, #17]
 801bdd8:	4939      	ldr	r1, [pc, #228]	; (801bec0 <etharp_query+0x268>)
 801bdda:	4613      	mov	r3, r2
 801bddc:	005b      	lsls	r3, r3, #1
 801bdde:	4413      	add	r3, r2
 801bde0:	00db      	lsls	r3, r3, #3
 801bde2:	440b      	add	r3, r1
 801bde4:	3314      	adds	r3, #20
 801bde6:	781b      	ldrb	r3, [r3, #0]
 801bde8:	2b01      	cmp	r3, #1
 801bdea:	d15c      	bne.n	801bea6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801bdec:	2300      	movs	r3, #0
 801bdee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bdf4:	e01c      	b.n	801be30 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801bdf6:	69fb      	ldr	r3, [r7, #28]
 801bdf8:	895a      	ldrh	r2, [r3, #10]
 801bdfa:	69fb      	ldr	r3, [r7, #28]
 801bdfc:	891b      	ldrh	r3, [r3, #8]
 801bdfe:	429a      	cmp	r2, r3
 801be00:	d10a      	bne.n	801be18 <etharp_query+0x1c0>
 801be02:	69fb      	ldr	r3, [r7, #28]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	2b00      	cmp	r3, #0
 801be08:	d006      	beq.n	801be18 <etharp_query+0x1c0>
 801be0a:	4b2a      	ldr	r3, [pc, #168]	; (801beb4 <etharp_query+0x25c>)
 801be0c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801be10:	492f      	ldr	r1, [pc, #188]	; (801bed0 <etharp_query+0x278>)
 801be12:	482a      	ldr	r0, [pc, #168]	; (801bebc <etharp_query+0x264>)
 801be14:	f002 fe32 	bl	801ea7c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801be18:	69fb      	ldr	r3, [r7, #28]
 801be1a:	7b1b      	ldrb	r3, [r3, #12]
 801be1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801be20:	2b00      	cmp	r3, #0
 801be22:	d002      	beq.n	801be2a <etharp_query+0x1d2>
        copy_needed = 1;
 801be24:	2301      	movs	r3, #1
 801be26:	61bb      	str	r3, [r7, #24]
        break;
 801be28:	e005      	b.n	801be36 <etharp_query+0x1de>
      }
      p = p->next;
 801be2a:	69fb      	ldr	r3, [r7, #28]
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801be30:	69fb      	ldr	r3, [r7, #28]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d1df      	bne.n	801bdf6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801be36:	69bb      	ldr	r3, [r7, #24]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d007      	beq.n	801be4c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801be3c:	687a      	ldr	r2, [r7, #4]
 801be3e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801be42:	200e      	movs	r0, #14
 801be44:	f7f6 f922 	bl	801208c <pbuf_clone>
 801be48:	61f8      	str	r0, [r7, #28]
 801be4a:	e004      	b.n	801be56 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801be50:	69f8      	ldr	r0, [r7, #28]
 801be52:	f7f5 fe11 	bl	8011a78 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801be56:	69fb      	ldr	r3, [r7, #28]
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d021      	beq.n	801bea0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801be5c:	7c7a      	ldrb	r2, [r7, #17]
 801be5e:	4918      	ldr	r1, [pc, #96]	; (801bec0 <etharp_query+0x268>)
 801be60:	4613      	mov	r3, r2
 801be62:	005b      	lsls	r3, r3, #1
 801be64:	4413      	add	r3, r2
 801be66:	00db      	lsls	r3, r3, #3
 801be68:	440b      	add	r3, r1
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d00a      	beq.n	801be86 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801be70:	7c7a      	ldrb	r2, [r7, #17]
 801be72:	4913      	ldr	r1, [pc, #76]	; (801bec0 <etharp_query+0x268>)
 801be74:	4613      	mov	r3, r2
 801be76:	005b      	lsls	r3, r3, #1
 801be78:	4413      	add	r3, r2
 801be7a:	00db      	lsls	r3, r3, #3
 801be7c:	440b      	add	r3, r1
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	4618      	mov	r0, r3
 801be82:	f7f5 fd53 	bl	801192c <pbuf_free>
      }
      arp_table[i].q = p;
 801be86:	7c7a      	ldrb	r2, [r7, #17]
 801be88:	490d      	ldr	r1, [pc, #52]	; (801bec0 <etharp_query+0x268>)
 801be8a:	4613      	mov	r3, r2
 801be8c:	005b      	lsls	r3, r3, #1
 801be8e:	4413      	add	r3, r2
 801be90:	00db      	lsls	r3, r3, #3
 801be92:	440b      	add	r3, r1
 801be94:	69fa      	ldr	r2, [r7, #28]
 801be96:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801be98:	2300      	movs	r3, #0
 801be9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801be9e:	e002      	b.n	801bea6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801bea0:	23ff      	movs	r3, #255	; 0xff
 801bea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801bea6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801beaa:	4618      	mov	r0, r3
 801beac:	3728      	adds	r7, #40	; 0x28
 801beae:	46bd      	mov	sp, r7
 801beb0:	bd80      	pop	{r7, pc}
 801beb2:	bf00      	nop
 801beb4:	08025d18 	.word	0x08025d18
 801beb8:	08025ec4 	.word	0x08025ec4
 801bebc:	08025d90 	.word	0x08025d90
 801bec0:	200143ac 	.word	0x200143ac
 801bec4:	08025ed4 	.word	0x08025ed4
 801bec8:	08025eb8 	.word	0x08025eb8
 801becc:	2001449c 	.word	0x2001449c
 801bed0:	08025efc 	.word	0x08025efc

0801bed4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b08a      	sub	sp, #40	; 0x28
 801bed8:	af02      	add	r7, sp, #8
 801beda:	60f8      	str	r0, [r7, #12]
 801bedc:	60b9      	str	r1, [r7, #8]
 801bede:	607a      	str	r2, [r7, #4]
 801bee0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801bee2:	2300      	movs	r3, #0
 801bee4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d106      	bne.n	801befa <etharp_raw+0x26>
 801beec:	4b3a      	ldr	r3, [pc, #232]	; (801bfd8 <etharp_raw+0x104>)
 801beee:	f240 4257 	movw	r2, #1111	; 0x457
 801bef2:	493a      	ldr	r1, [pc, #232]	; (801bfdc <etharp_raw+0x108>)
 801bef4:	483a      	ldr	r0, [pc, #232]	; (801bfe0 <etharp_raw+0x10c>)
 801bef6:	f002 fdc1 	bl	801ea7c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801befa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801befe:	211c      	movs	r1, #28
 801bf00:	200e      	movs	r0, #14
 801bf02:	f7f5 f9fd 	bl	8011300 <pbuf_alloc>
 801bf06:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801bf08:	69bb      	ldr	r3, [r7, #24]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d102      	bne.n	801bf14 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801bf0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf12:	e05d      	b.n	801bfd0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801bf14:	69bb      	ldr	r3, [r7, #24]
 801bf16:	895b      	ldrh	r3, [r3, #10]
 801bf18:	2b1b      	cmp	r3, #27
 801bf1a:	d806      	bhi.n	801bf2a <etharp_raw+0x56>
 801bf1c:	4b2e      	ldr	r3, [pc, #184]	; (801bfd8 <etharp_raw+0x104>)
 801bf1e:	f240 4262 	movw	r2, #1122	; 0x462
 801bf22:	4930      	ldr	r1, [pc, #192]	; (801bfe4 <etharp_raw+0x110>)
 801bf24:	482e      	ldr	r0, [pc, #184]	; (801bfe0 <etharp_raw+0x10c>)
 801bf26:	f002 fda9 	bl	801ea7c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801bf2a:	69bb      	ldr	r3, [r7, #24]
 801bf2c:	685b      	ldr	r3, [r3, #4]
 801bf2e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801bf30:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bf32:	4618      	mov	r0, r3
 801bf34:	f7f3 f93a 	bl	800f1ac <lwip_htons>
 801bf38:	4603      	mov	r3, r0
 801bf3a:	461a      	mov	r2, r3
 801bf3c:	697b      	ldr	r3, [r7, #20]
 801bf3e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bf46:	2b06      	cmp	r3, #6
 801bf48:	d006      	beq.n	801bf58 <etharp_raw+0x84>
 801bf4a:	4b23      	ldr	r3, [pc, #140]	; (801bfd8 <etharp_raw+0x104>)
 801bf4c:	f240 4269 	movw	r2, #1129	; 0x469
 801bf50:	4925      	ldr	r1, [pc, #148]	; (801bfe8 <etharp_raw+0x114>)
 801bf52:	4823      	ldr	r0, [pc, #140]	; (801bfe0 <etharp_raw+0x10c>)
 801bf54:	f002 fd92 	bl	801ea7c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801bf58:	697b      	ldr	r3, [r7, #20]
 801bf5a:	3308      	adds	r3, #8
 801bf5c:	2206      	movs	r2, #6
 801bf5e:	6839      	ldr	r1, [r7, #0]
 801bf60:	4618      	mov	r0, r3
 801bf62:	f002 f847 	bl	801dff4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	3312      	adds	r3, #18
 801bf6a:	2206      	movs	r2, #6
 801bf6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f002 f840 	bl	801dff4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801bf74:	697b      	ldr	r3, [r7, #20]
 801bf76:	330e      	adds	r3, #14
 801bf78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bf7a:	6812      	ldr	r2, [r2, #0]
 801bf7c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801bf7e:	697b      	ldr	r3, [r7, #20]
 801bf80:	3318      	adds	r3, #24
 801bf82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bf84:	6812      	ldr	r2, [r2, #0]
 801bf86:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801bf88:	697b      	ldr	r3, [r7, #20]
 801bf8a:	2200      	movs	r2, #0
 801bf8c:	701a      	strb	r2, [r3, #0]
 801bf8e:	2200      	movs	r2, #0
 801bf90:	f042 0201 	orr.w	r2, r2, #1
 801bf94:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801bf96:	697b      	ldr	r3, [r7, #20]
 801bf98:	2200      	movs	r2, #0
 801bf9a:	f042 0208 	orr.w	r2, r2, #8
 801bf9e:	709a      	strb	r2, [r3, #2]
 801bfa0:	2200      	movs	r2, #0
 801bfa2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801bfa4:	697b      	ldr	r3, [r7, #20]
 801bfa6:	2206      	movs	r2, #6
 801bfa8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801bfaa:	697b      	ldr	r3, [r7, #20]
 801bfac:	2204      	movs	r2, #4
 801bfae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801bfb0:	f640 0306 	movw	r3, #2054	; 0x806
 801bfb4:	9300      	str	r3, [sp, #0]
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	68ba      	ldr	r2, [r7, #8]
 801bfba:	69b9      	ldr	r1, [r7, #24]
 801bfbc:	68f8      	ldr	r0, [r7, #12]
 801bfbe:	f001 fcc3 	bl	801d948 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801bfc2:	69b8      	ldr	r0, [r7, #24]
 801bfc4:	f7f5 fcb2 	bl	801192c <pbuf_free>
  p = NULL;
 801bfc8:	2300      	movs	r3, #0
 801bfca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801bfcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	3720      	adds	r7, #32
 801bfd4:	46bd      	mov	sp, r7
 801bfd6:	bd80      	pop	{r7, pc}
 801bfd8:	08025d18 	.word	0x08025d18
 801bfdc:	08025e68 	.word	0x08025e68
 801bfe0:	08025d90 	.word	0x08025d90
 801bfe4:	08025f18 	.word	0x08025f18
 801bfe8:	08025f4c 	.word	0x08025f4c

0801bfec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801bfec:	b580      	push	{r7, lr}
 801bfee:	b088      	sub	sp, #32
 801bff0:	af04      	add	r7, sp, #16
 801bff2:	60f8      	str	r0, [r7, #12]
 801bff4:	60b9      	str	r1, [r7, #8]
 801bff6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c004:	68fb      	ldr	r3, [r7, #12]
 801c006:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c008:	2201      	movs	r2, #1
 801c00a:	9203      	str	r2, [sp, #12]
 801c00c:	68ba      	ldr	r2, [r7, #8]
 801c00e:	9202      	str	r2, [sp, #8]
 801c010:	4a06      	ldr	r2, [pc, #24]	; (801c02c <etharp_request_dst+0x40>)
 801c012:	9201      	str	r2, [sp, #4]
 801c014:	9300      	str	r3, [sp, #0]
 801c016:	4603      	mov	r3, r0
 801c018:	687a      	ldr	r2, [r7, #4]
 801c01a:	68f8      	ldr	r0, [r7, #12]
 801c01c:	f7ff ff5a 	bl	801bed4 <etharp_raw>
 801c020:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c022:	4618      	mov	r0, r3
 801c024:	3710      	adds	r7, #16
 801c026:	46bd      	mov	sp, r7
 801c028:	bd80      	pop	{r7, pc}
 801c02a:	bf00      	nop
 801c02c:	080266d0 	.word	0x080266d0

0801c030 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b082      	sub	sp, #8
 801c034:	af00      	add	r7, sp, #0
 801c036:	6078      	str	r0, [r7, #4]
 801c038:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c03a:	4a05      	ldr	r2, [pc, #20]	; (801c050 <etharp_request+0x20>)
 801c03c:	6839      	ldr	r1, [r7, #0]
 801c03e:	6878      	ldr	r0, [r7, #4]
 801c040:	f7ff ffd4 	bl	801bfec <etharp_request_dst>
 801c044:	4603      	mov	r3, r0
}
 801c046:	4618      	mov	r0, r3
 801c048:	3708      	adds	r7, #8
 801c04a:	46bd      	mov	sp, r7
 801c04c:	bd80      	pop	{r7, pc}
 801c04e:	bf00      	nop
 801c050:	080266c8 	.word	0x080266c8

0801c054 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c054:	b580      	push	{r7, lr}
 801c056:	b08e      	sub	sp, #56	; 0x38
 801c058:	af04      	add	r7, sp, #16
 801c05a:	6078      	str	r0, [r7, #4]
 801c05c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c05e:	4b7c      	ldr	r3, [pc, #496]	; (801c250 <icmp_input+0x1fc>)
 801c060:	689b      	ldr	r3, [r3, #8]
 801c062:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c066:	781b      	ldrb	r3, [r3, #0]
 801c068:	f003 030f 	and.w	r3, r3, #15
 801c06c:	b2db      	uxtb	r3, r3
 801c06e:	009b      	lsls	r3, r3, #2
 801c070:	b2db      	uxtb	r3, r3
 801c072:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c076:	2b13      	cmp	r3, #19
 801c078:	f240 80d2 	bls.w	801c220 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	895b      	ldrh	r3, [r3, #10]
 801c080:	2b03      	cmp	r3, #3
 801c082:	f240 80cf 	bls.w	801c224 <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	685b      	ldr	r3, [r3, #4]
 801c08a:	781b      	ldrb	r3, [r3, #0]
 801c08c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	685b      	ldr	r3, [r3, #4]
 801c094:	785b      	ldrb	r3, [r3, #1]
 801c096:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c09a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	f000 80b7 	beq.w	801c212 <icmp_input+0x1be>
 801c0a4:	2b08      	cmp	r3, #8
 801c0a6:	f040 80b7 	bne.w	801c218 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c0aa:	4b6a      	ldr	r3, [pc, #424]	; (801c254 <icmp_input+0x200>)
 801c0ac:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c0ae:	4b68      	ldr	r3, [pc, #416]	; (801c250 <icmp_input+0x1fc>)
 801c0b0:	695b      	ldr	r3, [r3, #20]
 801c0b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c0b6:	2be0      	cmp	r3, #224	; 0xe0
 801c0b8:	f000 80bb 	beq.w	801c232 <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c0bc:	4b64      	ldr	r3, [pc, #400]	; (801c250 <icmp_input+0x1fc>)
 801c0be:	695b      	ldr	r3, [r3, #20]
 801c0c0:	4a63      	ldr	r2, [pc, #396]	; (801c250 <icmp_input+0x1fc>)
 801c0c2:	6812      	ldr	r2, [r2, #0]
 801c0c4:	4611      	mov	r1, r2
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	f000 fc0c 	bl	801c8e4 <ip4_addr_isbroadcast_u32>
 801c0cc:	4603      	mov	r3, r0
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	f040 80b1 	bne.w	801c236 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	891b      	ldrh	r3, [r3, #8]
 801c0d8:	2b07      	cmp	r3, #7
 801c0da:	f240 80a5 	bls.w	801c228 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c0de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c0e0:	330e      	adds	r3, #14
 801c0e2:	4619      	mov	r1, r3
 801c0e4:	6878      	ldr	r0, [r7, #4]
 801c0e6:	f7f5 fb59 	bl	801179c <pbuf_add_header>
 801c0ea:	4603      	mov	r3, r0
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d04b      	beq.n	801c188 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	891a      	ldrh	r2, [r3, #8]
 801c0f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c0f6:	4413      	add	r3, r2
 801c0f8:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	891b      	ldrh	r3, [r3, #8]
 801c0fe:	8b7a      	ldrh	r2, [r7, #26]
 801c100:	429a      	cmp	r2, r3
 801c102:	f0c0 809a 	bcc.w	801c23a <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c106:	8b7b      	ldrh	r3, [r7, #26]
 801c108:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c10c:	4619      	mov	r1, r3
 801c10e:	200e      	movs	r0, #14
 801c110:	f7f5 f8f6 	bl	8011300 <pbuf_alloc>
 801c114:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c116:	697b      	ldr	r3, [r7, #20]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	f000 8090 	beq.w	801c23e <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c11e:	697b      	ldr	r3, [r7, #20]
 801c120:	895b      	ldrh	r3, [r3, #10]
 801c122:	461a      	mov	r2, r3
 801c124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c126:	3308      	adds	r3, #8
 801c128:	429a      	cmp	r2, r3
 801c12a:	d203      	bcs.n	801c134 <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c12c:	6978      	ldr	r0, [r7, #20]
 801c12e:	f7f5 fbfd 	bl	801192c <pbuf_free>
          goto icmperr;
 801c132:	e085      	b.n	801c240 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c134:	697b      	ldr	r3, [r7, #20]
 801c136:	685b      	ldr	r3, [r3, #4]
 801c138:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c13a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c13c:	4618      	mov	r0, r3
 801c13e:	f001 ff59 	bl	801dff4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c142:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c144:	4619      	mov	r1, r3
 801c146:	6978      	ldr	r0, [r7, #20]
 801c148:	f7f5 fb38 	bl	80117bc <pbuf_remove_header>
 801c14c:	4603      	mov	r3, r0
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d009      	beq.n	801c166 <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c152:	4b41      	ldr	r3, [pc, #260]	; (801c258 <icmp_input+0x204>)
 801c154:	22b6      	movs	r2, #182	; 0xb6
 801c156:	4941      	ldr	r1, [pc, #260]	; (801c25c <icmp_input+0x208>)
 801c158:	4841      	ldr	r0, [pc, #260]	; (801c260 <icmp_input+0x20c>)
 801c15a:	f002 fc8f 	bl	801ea7c <iprintf>
          pbuf_free(r);
 801c15e:	6978      	ldr	r0, [r7, #20]
 801c160:	f7f5 fbe4 	bl	801192c <pbuf_free>
          goto icmperr;
 801c164:	e06c      	b.n	801c240 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c166:	6879      	ldr	r1, [r7, #4]
 801c168:	6978      	ldr	r0, [r7, #20]
 801c16a:	f7f5 fd13 	bl	8011b94 <pbuf_copy>
 801c16e:	4603      	mov	r3, r0
 801c170:	2b00      	cmp	r3, #0
 801c172:	d003      	beq.n	801c17c <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c174:	6978      	ldr	r0, [r7, #20]
 801c176:	f7f5 fbd9 	bl	801192c <pbuf_free>
          goto icmperr;
 801c17a:	e061      	b.n	801c240 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 801c17c:	6878      	ldr	r0, [r7, #4]
 801c17e:	f7f5 fbd5 	bl	801192c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c182:	697b      	ldr	r3, [r7, #20]
 801c184:	607b      	str	r3, [r7, #4]
 801c186:	e00f      	b.n	801c1a8 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c18a:	330e      	adds	r3, #14
 801c18c:	4619      	mov	r1, r3
 801c18e:	6878      	ldr	r0, [r7, #4]
 801c190:	f7f5 fb14 	bl	80117bc <pbuf_remove_header>
 801c194:	4603      	mov	r3, r0
 801c196:	2b00      	cmp	r3, #0
 801c198:	d006      	beq.n	801c1a8 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c19a:	4b2f      	ldr	r3, [pc, #188]	; (801c258 <icmp_input+0x204>)
 801c19c:	22c7      	movs	r2, #199	; 0xc7
 801c19e:	4931      	ldr	r1, [pc, #196]	; (801c264 <icmp_input+0x210>)
 801c1a0:	482f      	ldr	r0, [pc, #188]	; (801c260 <icmp_input+0x20c>)
 801c1a2:	f002 fc6b 	bl	801ea7c <iprintf>
          goto icmperr;
 801c1a6:	e04b      	b.n	801c240 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	685b      	ldr	r3, [r3, #4]
 801c1ac:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c1ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c1b0:	4619      	mov	r1, r3
 801c1b2:	6878      	ldr	r0, [r7, #4]
 801c1b4:	f7f5 faf2 	bl	801179c <pbuf_add_header>
 801c1b8:	4603      	mov	r3, r0
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d12b      	bne.n	801c216 <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	685b      	ldr	r3, [r3, #4]
 801c1c2:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c1c4:	69fb      	ldr	r3, [r7, #28]
 801c1c6:	681a      	ldr	r2, [r3, #0]
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c1cc:	4b20      	ldr	r3, [pc, #128]	; (801c250 <icmp_input+0x1fc>)
 801c1ce:	691a      	ldr	r2, [r3, #16]
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c1d4:	693b      	ldr	r3, [r7, #16]
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c1da:	693b      	ldr	r3, [r7, #16]
 801c1dc:	2200      	movs	r2, #0
 801c1de:	709a      	strb	r2, [r3, #2]
 801c1e0:	2200      	movs	r2, #0
 801c1e2:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	22ff      	movs	r2, #255	; 0xff
 801c1e8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	2200      	movs	r2, #0
 801c1ee:	729a      	strb	r2, [r3, #10]
 801c1f0:	2200      	movs	r2, #0
 801c1f2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c1f4:	683b      	ldr	r3, [r7, #0]
 801c1f6:	9302      	str	r3, [sp, #8]
 801c1f8:	2301      	movs	r3, #1
 801c1fa:	9301      	str	r3, [sp, #4]
 801c1fc:	2300      	movs	r3, #0
 801c1fe:	9300      	str	r3, [sp, #0]
 801c200:	23ff      	movs	r3, #255	; 0xff
 801c202:	2200      	movs	r2, #0
 801c204:	69f9      	ldr	r1, [r7, #28]
 801c206:	6878      	ldr	r0, [r7, #4]
 801c208:	f000 fa94 	bl	801c734 <ip4_output_if>
 801c20c:	4603      	mov	r3, r0
 801c20e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c210:	e001      	b.n	801c216 <icmp_input+0x1c2>
      break;
 801c212:	bf00      	nop
 801c214:	e000      	b.n	801c218 <icmp_input+0x1c4>
      break;
 801c216:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f7f5 fb87 	bl	801192c <pbuf_free>
  return;
 801c21e:	e013      	b.n	801c248 <icmp_input+0x1f4>
    goto lenerr;
 801c220:	bf00      	nop
 801c222:	e002      	b.n	801c22a <icmp_input+0x1d6>
    goto lenerr;
 801c224:	bf00      	nop
 801c226:	e000      	b.n	801c22a <icmp_input+0x1d6>
        goto lenerr;
 801c228:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c22a:	6878      	ldr	r0, [r7, #4]
 801c22c:	f7f5 fb7e 	bl	801192c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c230:	e00a      	b.n	801c248 <icmp_input+0x1f4>
        goto icmperr;
 801c232:	bf00      	nop
 801c234:	e004      	b.n	801c240 <icmp_input+0x1ec>
        goto icmperr;
 801c236:	bf00      	nop
 801c238:	e002      	b.n	801c240 <icmp_input+0x1ec>
          goto icmperr;
 801c23a:	bf00      	nop
 801c23c:	e000      	b.n	801c240 <icmp_input+0x1ec>
          goto icmperr;
 801c23e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c240:	6878      	ldr	r0, [r7, #4]
 801c242:	f7f5 fb73 	bl	801192c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c246:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c248:	3728      	adds	r7, #40	; 0x28
 801c24a:	46bd      	mov	sp, r7
 801c24c:	bd80      	pop	{r7, pc}
 801c24e:	bf00      	nop
 801c250:	200176d4 	.word	0x200176d4
 801c254:	200176e8 	.word	0x200176e8
 801c258:	08025f90 	.word	0x08025f90
 801c25c:	08025fc8 	.word	0x08025fc8
 801c260:	08026000 	.word	0x08026000
 801c264:	08026028 	.word	0x08026028

0801c268 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c268:	b580      	push	{r7, lr}
 801c26a:	b082      	sub	sp, #8
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	6078      	str	r0, [r7, #4]
 801c270:	460b      	mov	r3, r1
 801c272:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c274:	78fb      	ldrb	r3, [r7, #3]
 801c276:	461a      	mov	r2, r3
 801c278:	2103      	movs	r1, #3
 801c27a:	6878      	ldr	r0, [r7, #4]
 801c27c:	f000 f814 	bl	801c2a8 <icmp_send_response>
}
 801c280:	bf00      	nop
 801c282:	3708      	adds	r7, #8
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}

0801c288 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	b082      	sub	sp, #8
 801c28c:	af00      	add	r7, sp, #0
 801c28e:	6078      	str	r0, [r7, #4]
 801c290:	460b      	mov	r3, r1
 801c292:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c294:	78fb      	ldrb	r3, [r7, #3]
 801c296:	461a      	mov	r2, r3
 801c298:	210b      	movs	r1, #11
 801c29a:	6878      	ldr	r0, [r7, #4]
 801c29c:	f000 f804 	bl	801c2a8 <icmp_send_response>
}
 801c2a0:	bf00      	nop
 801c2a2:	3708      	adds	r7, #8
 801c2a4:	46bd      	mov	sp, r7
 801c2a6:	bd80      	pop	{r7, pc}

0801c2a8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c2a8:	b580      	push	{r7, lr}
 801c2aa:	b08c      	sub	sp, #48	; 0x30
 801c2ac:	af04      	add	r7, sp, #16
 801c2ae:	6078      	str	r0, [r7, #4]
 801c2b0:	460b      	mov	r3, r1
 801c2b2:	70fb      	strb	r3, [r7, #3]
 801c2b4:	4613      	mov	r3, r2
 801c2b6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c2b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c2bc:	2124      	movs	r1, #36	; 0x24
 801c2be:	2022      	movs	r0, #34	; 0x22
 801c2c0:	f7f5 f81e 	bl	8011300 <pbuf_alloc>
 801c2c4:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801c2c6:	69bb      	ldr	r3, [r7, #24]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d04c      	beq.n	801c366 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c2cc:	69bb      	ldr	r3, [r7, #24]
 801c2ce:	895b      	ldrh	r3, [r3, #10]
 801c2d0:	2b23      	cmp	r3, #35	; 0x23
 801c2d2:	d806      	bhi.n	801c2e2 <icmp_send_response+0x3a>
 801c2d4:	4b26      	ldr	r3, [pc, #152]	; (801c370 <icmp_send_response+0xc8>)
 801c2d6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c2da:	4926      	ldr	r1, [pc, #152]	; (801c374 <icmp_send_response+0xcc>)
 801c2dc:	4826      	ldr	r0, [pc, #152]	; (801c378 <icmp_send_response+0xd0>)
 801c2de:	f002 fbcd 	bl	801ea7c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	685b      	ldr	r3, [r3, #4]
 801c2e6:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c2e8:	69bb      	ldr	r3, [r7, #24]
 801c2ea:	685b      	ldr	r3, [r3, #4]
 801c2ec:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 801c2ee:	693b      	ldr	r3, [r7, #16]
 801c2f0:	78fa      	ldrb	r2, [r7, #3]
 801c2f2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c2f4:	693b      	ldr	r3, [r7, #16]
 801c2f6:	78ba      	ldrb	r2, [r7, #2]
 801c2f8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c2fa:	693b      	ldr	r3, [r7, #16]
 801c2fc:	2200      	movs	r2, #0
 801c2fe:	711a      	strb	r2, [r3, #4]
 801c300:	2200      	movs	r2, #0
 801c302:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c304:	693b      	ldr	r3, [r7, #16]
 801c306:	2200      	movs	r2, #0
 801c308:	719a      	strb	r2, [r3, #6]
 801c30a:	2200      	movs	r2, #0
 801c30c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c30e:	69bb      	ldr	r3, [r7, #24]
 801c310:	685b      	ldr	r3, [r3, #4]
 801c312:	f103 0008 	add.w	r0, r3, #8
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	685b      	ldr	r3, [r3, #4]
 801c31a:	221c      	movs	r2, #28
 801c31c:	4619      	mov	r1, r3
 801c31e:	f001 fe69 	bl	801dff4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c322:	697b      	ldr	r3, [r7, #20]
 801c324:	68db      	ldr	r3, [r3, #12]
 801c326:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c328:	f107 030c 	add.w	r3, r7, #12
 801c32c:	4618      	mov	r0, r3
 801c32e:	f000 f825 	bl	801c37c <ip4_route>
 801c332:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 801c334:	69fb      	ldr	r3, [r7, #28]
 801c336:	2b00      	cmp	r3, #0
 801c338:	d011      	beq.n	801c35e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c33a:	693b      	ldr	r3, [r7, #16]
 801c33c:	2200      	movs	r2, #0
 801c33e:	709a      	strb	r2, [r3, #2]
 801c340:	2200      	movs	r2, #0
 801c342:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c344:	f107 020c 	add.w	r2, r7, #12
 801c348:	69fb      	ldr	r3, [r7, #28]
 801c34a:	9302      	str	r3, [sp, #8]
 801c34c:	2301      	movs	r3, #1
 801c34e:	9301      	str	r3, [sp, #4]
 801c350:	2300      	movs	r3, #0
 801c352:	9300      	str	r3, [sp, #0]
 801c354:	23ff      	movs	r3, #255	; 0xff
 801c356:	2100      	movs	r1, #0
 801c358:	69b8      	ldr	r0, [r7, #24]
 801c35a:	f000 f9eb 	bl	801c734 <ip4_output_if>
  }
  pbuf_free(q);
 801c35e:	69b8      	ldr	r0, [r7, #24]
 801c360:	f7f5 fae4 	bl	801192c <pbuf_free>
 801c364:	e000      	b.n	801c368 <icmp_send_response+0xc0>
    return;
 801c366:	bf00      	nop
}
 801c368:	3720      	adds	r7, #32
 801c36a:	46bd      	mov	sp, r7
 801c36c:	bd80      	pop	{r7, pc}
 801c36e:	bf00      	nop
 801c370:	08025f90 	.word	0x08025f90
 801c374:	0802605c 	.word	0x0802605c
 801c378:	08026000 	.word	0x08026000

0801c37c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c37c:	b480      	push	{r7}
 801c37e:	b085      	sub	sp, #20
 801c380:	af00      	add	r7, sp, #0
 801c382:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c384:	4b33      	ldr	r3, [pc, #204]	; (801c454 <ip4_route+0xd8>)
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	60fb      	str	r3, [r7, #12]
 801c38a:	e036      	b.n	801c3fa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c392:	f003 0301 	and.w	r3, r3, #1
 801c396:	b2db      	uxtb	r3, r3
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d02b      	beq.n	801c3f4 <ip4_route+0x78>
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c3a2:	089b      	lsrs	r3, r3, #2
 801c3a4:	f003 0301 	and.w	r3, r3, #1
 801c3a8:	b2db      	uxtb	r3, r3
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d022      	beq.n	801c3f4 <ip4_route+0x78>
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	3304      	adds	r3, #4
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d01d      	beq.n	801c3f4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	681a      	ldr	r2, [r3, #0]
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	3304      	adds	r3, #4
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	405a      	eors	r2, r3
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	3308      	adds	r3, #8
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	4013      	ands	r3, r2
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d101      	bne.n	801c3d4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	e038      	b.n	801c446 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c3da:	f003 0302 	and.w	r3, r3, #2
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d108      	bne.n	801c3f4 <ip4_route+0x78>
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	681a      	ldr	r2, [r3, #0]
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	330c      	adds	r3, #12
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	429a      	cmp	r2, r3
 801c3ee:	d101      	bne.n	801c3f4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	e028      	b.n	801c446 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	60fb      	str	r3, [r7, #12]
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d1c5      	bne.n	801c38c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c400:	4b15      	ldr	r3, [pc, #84]	; (801c458 <ip4_route+0xdc>)
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	2b00      	cmp	r3, #0
 801c406:	d01a      	beq.n	801c43e <ip4_route+0xc2>
 801c408:	4b13      	ldr	r3, [pc, #76]	; (801c458 <ip4_route+0xdc>)
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c410:	f003 0301 	and.w	r3, r3, #1
 801c414:	2b00      	cmp	r3, #0
 801c416:	d012      	beq.n	801c43e <ip4_route+0xc2>
 801c418:	4b0f      	ldr	r3, [pc, #60]	; (801c458 <ip4_route+0xdc>)
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c420:	f003 0304 	and.w	r3, r3, #4
 801c424:	2b00      	cmp	r3, #0
 801c426:	d00a      	beq.n	801c43e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c428:	4b0b      	ldr	r3, [pc, #44]	; (801c458 <ip4_route+0xdc>)
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	3304      	adds	r3, #4
 801c42e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c430:	2b00      	cmp	r3, #0
 801c432:	d004      	beq.n	801c43e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	b2db      	uxtb	r3, r3
 801c43a:	2b7f      	cmp	r3, #127	; 0x7f
 801c43c:	d101      	bne.n	801c442 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c43e:	2300      	movs	r3, #0
 801c440:	e001      	b.n	801c446 <ip4_route+0xca>
  }

  return netif_default;
 801c442:	4b05      	ldr	r3, [pc, #20]	; (801c458 <ip4_route+0xdc>)
 801c444:	681b      	ldr	r3, [r3, #0]
}
 801c446:	4618      	mov	r0, r3
 801c448:	3714      	adds	r7, #20
 801c44a:	46bd      	mov	sp, r7
 801c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c450:	4770      	bx	lr
 801c452:	bf00      	nop
 801c454:	2001b0b8 	.word	0x2001b0b8
 801c458:	2001b0bc 	.word	0x2001b0bc

0801c45c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b082      	sub	sp, #8
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c46a:	f003 0301 	and.w	r3, r3, #1
 801c46e:	b2db      	uxtb	r3, r3
 801c470:	2b00      	cmp	r3, #0
 801c472:	d016      	beq.n	801c4a2 <ip4_input_accept+0x46>
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	3304      	adds	r3, #4
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d011      	beq.n	801c4a2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c47e:	4b0b      	ldr	r3, [pc, #44]	; (801c4ac <ip4_input_accept+0x50>)
 801c480:	695a      	ldr	r2, [r3, #20]
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	3304      	adds	r3, #4
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	429a      	cmp	r2, r3
 801c48a:	d008      	beq.n	801c49e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c48c:	4b07      	ldr	r3, [pc, #28]	; (801c4ac <ip4_input_accept+0x50>)
 801c48e:	695b      	ldr	r3, [r3, #20]
 801c490:	6879      	ldr	r1, [r7, #4]
 801c492:	4618      	mov	r0, r3
 801c494:	f000 fa26 	bl	801c8e4 <ip4_addr_isbroadcast_u32>
 801c498:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d001      	beq.n	801c4a2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c49e:	2301      	movs	r3, #1
 801c4a0:	e000      	b.n	801c4a4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c4a2:	2300      	movs	r3, #0
}
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	3708      	adds	r7, #8
 801c4a8:	46bd      	mov	sp, r7
 801c4aa:	bd80      	pop	{r7, pc}
 801c4ac:	200176d4 	.word	0x200176d4

0801c4b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c4b0:	b580      	push	{r7, lr}
 801c4b2:	b088      	sub	sp, #32
 801c4b4:	af00      	add	r7, sp, #0
 801c4b6:	6078      	str	r0, [r7, #4]
 801c4b8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801c4ba:	2301      	movs	r3, #1
 801c4bc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	685b      	ldr	r3, [r3, #4]
 801c4c2:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801c4c4:	693b      	ldr	r3, [r7, #16]
 801c4c6:	781b      	ldrb	r3, [r3, #0]
 801c4c8:	091b      	lsrs	r3, r3, #4
 801c4ca:	b2db      	uxtb	r3, r3
 801c4cc:	2b04      	cmp	r3, #4
 801c4ce:	d004      	beq.n	801c4da <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c4d0:	6878      	ldr	r0, [r7, #4]
 801c4d2:	f7f5 fa2b 	bl	801192c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c4d6:	2300      	movs	r3, #0
 801c4d8:	e123      	b.n	801c722 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c4da:	693b      	ldr	r3, [r7, #16]
 801c4dc:	781b      	ldrb	r3, [r3, #0]
 801c4de:	f003 030f 	and.w	r3, r3, #15
 801c4e2:	b2db      	uxtb	r3, r3
 801c4e4:	009b      	lsls	r3, r3, #2
 801c4e6:	b2db      	uxtb	r3, r3
 801c4e8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c4ea:	693b      	ldr	r3, [r7, #16]
 801c4ec:	885b      	ldrh	r3, [r3, #2]
 801c4ee:	b29b      	uxth	r3, r3
 801c4f0:	4618      	mov	r0, r3
 801c4f2:	f7f2 fe5b 	bl	800f1ac <lwip_htons>
 801c4f6:	4603      	mov	r3, r0
 801c4f8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	891b      	ldrh	r3, [r3, #8]
 801c4fe:	89ba      	ldrh	r2, [r7, #12]
 801c500:	429a      	cmp	r2, r3
 801c502:	d204      	bcs.n	801c50e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801c504:	89bb      	ldrh	r3, [r7, #12]
 801c506:	4619      	mov	r1, r3
 801c508:	6878      	ldr	r0, [r7, #4]
 801c50a:	f7f5 f857 	bl	80115bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	895b      	ldrh	r3, [r3, #10]
 801c512:	89fa      	ldrh	r2, [r7, #14]
 801c514:	429a      	cmp	r2, r3
 801c516:	d807      	bhi.n	801c528 <ip4_input+0x78>
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	891b      	ldrh	r3, [r3, #8]
 801c51c:	89ba      	ldrh	r2, [r7, #12]
 801c51e:	429a      	cmp	r2, r3
 801c520:	d802      	bhi.n	801c528 <ip4_input+0x78>
 801c522:	89fb      	ldrh	r3, [r7, #14]
 801c524:	2b13      	cmp	r3, #19
 801c526:	d804      	bhi.n	801c532 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c528:	6878      	ldr	r0, [r7, #4]
 801c52a:	f7f5 f9ff 	bl	801192c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c52e:	2300      	movs	r3, #0
 801c530:	e0f7      	b.n	801c722 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c532:	693b      	ldr	r3, [r7, #16]
 801c534:	691b      	ldr	r3, [r3, #16]
 801c536:	4a7d      	ldr	r2, [pc, #500]	; (801c72c <ip4_input+0x27c>)
 801c538:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c53a:	693b      	ldr	r3, [r7, #16]
 801c53c:	68db      	ldr	r3, [r3, #12]
 801c53e:	4a7b      	ldr	r2, [pc, #492]	; (801c72c <ip4_input+0x27c>)
 801c540:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c542:	4b7a      	ldr	r3, [pc, #488]	; (801c72c <ip4_input+0x27c>)
 801c544:	695b      	ldr	r3, [r3, #20]
 801c546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c54a:	2be0      	cmp	r3, #224	; 0xe0
 801c54c:	d112      	bne.n	801c574 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c54e:	683b      	ldr	r3, [r7, #0]
 801c550:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c554:	f003 0301 	and.w	r3, r3, #1
 801c558:	b2db      	uxtb	r3, r3
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d007      	beq.n	801c56e <ip4_input+0xbe>
 801c55e:	683b      	ldr	r3, [r7, #0]
 801c560:	3304      	adds	r3, #4
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d002      	beq.n	801c56e <ip4_input+0xbe>
      netif = inp;
 801c568:	683b      	ldr	r3, [r7, #0]
 801c56a:	61fb      	str	r3, [r7, #28]
 801c56c:	e02a      	b.n	801c5c4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801c56e:	2300      	movs	r3, #0
 801c570:	61fb      	str	r3, [r7, #28]
 801c572:	e027      	b.n	801c5c4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c574:	6838      	ldr	r0, [r7, #0]
 801c576:	f7ff ff71 	bl	801c45c <ip4_input_accept>
 801c57a:	4603      	mov	r3, r0
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d002      	beq.n	801c586 <ip4_input+0xd6>
      netif = inp;
 801c580:	683b      	ldr	r3, [r7, #0]
 801c582:	61fb      	str	r3, [r7, #28]
 801c584:	e01e      	b.n	801c5c4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801c586:	2300      	movs	r3, #0
 801c588:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c58a:	4b68      	ldr	r3, [pc, #416]	; (801c72c <ip4_input+0x27c>)
 801c58c:	695b      	ldr	r3, [r3, #20]
 801c58e:	b2db      	uxtb	r3, r3
 801c590:	2b7f      	cmp	r3, #127	; 0x7f
 801c592:	d017      	beq.n	801c5c4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c594:	4b66      	ldr	r3, [pc, #408]	; (801c730 <ip4_input+0x280>)
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	61fb      	str	r3, [r7, #28]
 801c59a:	e00e      	b.n	801c5ba <ip4_input+0x10a>
          if (netif == inp) {
 801c59c:	69fa      	ldr	r2, [r7, #28]
 801c59e:	683b      	ldr	r3, [r7, #0]
 801c5a0:	429a      	cmp	r2, r3
 801c5a2:	d006      	beq.n	801c5b2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c5a4:	69f8      	ldr	r0, [r7, #28]
 801c5a6:	f7ff ff59 	bl	801c45c <ip4_input_accept>
 801c5aa:	4603      	mov	r3, r0
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d108      	bne.n	801c5c2 <ip4_input+0x112>
 801c5b0:	e000      	b.n	801c5b4 <ip4_input+0x104>
            continue;
 801c5b2:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c5b4:	69fb      	ldr	r3, [r7, #28]
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	61fb      	str	r3, [r7, #28]
 801c5ba:	69fb      	ldr	r3, [r7, #28]
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d1ed      	bne.n	801c59c <ip4_input+0xec>
 801c5c0:	e000      	b.n	801c5c4 <ip4_input+0x114>
            break;
 801c5c2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801c5c4:	69fb      	ldr	r3, [r7, #28]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d111      	bne.n	801c5ee <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801c5ca:	693b      	ldr	r3, [r7, #16]
 801c5cc:	7a5b      	ldrb	r3, [r3, #9]
 801c5ce:	2b11      	cmp	r3, #17
 801c5d0:	d10d      	bne.n	801c5ee <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801c5d2:	89fb      	ldrh	r3, [r7, #14]
 801c5d4:	693a      	ldr	r2, [r7, #16]
 801c5d6:	4413      	add	r3, r2
 801c5d8:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801c5da:	69bb      	ldr	r3, [r7, #24]
 801c5dc:	885b      	ldrh	r3, [r3, #2]
 801c5de:	b29b      	uxth	r3, r3
 801c5e0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801c5e4:	d103      	bne.n	801c5ee <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801c5e6:	683b      	ldr	r3, [r7, #0]
 801c5e8:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801c5ee:	697b      	ldr	r3, [r7, #20]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d017      	beq.n	801c624 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801c5f4:	4b4d      	ldr	r3, [pc, #308]	; (801c72c <ip4_input+0x27c>)
 801c5f6:	691b      	ldr	r3, [r3, #16]
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d013      	beq.n	801c624 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c5fc:	4b4b      	ldr	r3, [pc, #300]	; (801c72c <ip4_input+0x27c>)
 801c5fe:	691b      	ldr	r3, [r3, #16]
 801c600:	6839      	ldr	r1, [r7, #0]
 801c602:	4618      	mov	r0, r3
 801c604:	f000 f96e 	bl	801c8e4 <ip4_addr_isbroadcast_u32>
 801c608:	4603      	mov	r3, r0
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d105      	bne.n	801c61a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c60e:	4b47      	ldr	r3, [pc, #284]	; (801c72c <ip4_input+0x27c>)
 801c610:	691b      	ldr	r3, [r3, #16]
 801c612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c616:	2be0      	cmp	r3, #224	; 0xe0
 801c618:	d104      	bne.n	801c624 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c61a:	6878      	ldr	r0, [r7, #4]
 801c61c:	f7f5 f986 	bl	801192c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c620:	2300      	movs	r3, #0
 801c622:	e07e      	b.n	801c722 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c624:	69fb      	ldr	r3, [r7, #28]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d104      	bne.n	801c634 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c62a:	6878      	ldr	r0, [r7, #4]
 801c62c:	f7f5 f97e 	bl	801192c <pbuf_free>
    return ERR_OK;
 801c630:	2300      	movs	r3, #0
 801c632:	e076      	b.n	801c722 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c634:	693b      	ldr	r3, [r7, #16]
 801c636:	88db      	ldrh	r3, [r3, #6]
 801c638:	b29b      	uxth	r3, r3
 801c63a:	461a      	mov	r2, r3
 801c63c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801c640:	4013      	ands	r3, r2
 801c642:	2b00      	cmp	r3, #0
 801c644:	d00b      	beq.n	801c65e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c646:	6878      	ldr	r0, [r7, #4]
 801c648:	f000 fdbc 	bl	801d1c4 <ip4_reass>
 801c64c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d101      	bne.n	801c658 <ip4_input+0x1a8>
      return ERR_OK;
 801c654:	2300      	movs	r3, #0
 801c656:	e064      	b.n	801c722 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	685b      	ldr	r3, [r3, #4]
 801c65c:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c65e:	4a33      	ldr	r2, [pc, #204]	; (801c72c <ip4_input+0x27c>)
 801c660:	69fb      	ldr	r3, [r7, #28]
 801c662:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c664:	4a31      	ldr	r2, [pc, #196]	; (801c72c <ip4_input+0x27c>)
 801c666:	683b      	ldr	r3, [r7, #0]
 801c668:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c66a:	4a30      	ldr	r2, [pc, #192]	; (801c72c <ip4_input+0x27c>)
 801c66c:	693b      	ldr	r3, [r7, #16]
 801c66e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c670:	693b      	ldr	r3, [r7, #16]
 801c672:	781b      	ldrb	r3, [r3, #0]
 801c674:	f003 030f 	and.w	r3, r3, #15
 801c678:	b2db      	uxtb	r3, r3
 801c67a:	009b      	lsls	r3, r3, #2
 801c67c:	b2db      	uxtb	r3, r3
 801c67e:	b29a      	uxth	r2, r3
 801c680:	4b2a      	ldr	r3, [pc, #168]	; (801c72c <ip4_input+0x27c>)
 801c682:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c684:	89fb      	ldrh	r3, [r7, #14]
 801c686:	4619      	mov	r1, r3
 801c688:	6878      	ldr	r0, [r7, #4]
 801c68a:	f7f5 f897 	bl	80117bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c68e:	693b      	ldr	r3, [r7, #16]
 801c690:	7a5b      	ldrb	r3, [r3, #9]
 801c692:	2b11      	cmp	r3, #17
 801c694:	d006      	beq.n	801c6a4 <ip4_input+0x1f4>
 801c696:	2b11      	cmp	r3, #17
 801c698:	dc13      	bgt.n	801c6c2 <ip4_input+0x212>
 801c69a:	2b01      	cmp	r3, #1
 801c69c:	d00c      	beq.n	801c6b8 <ip4_input+0x208>
 801c69e:	2b06      	cmp	r3, #6
 801c6a0:	d005      	beq.n	801c6ae <ip4_input+0x1fe>
 801c6a2:	e00e      	b.n	801c6c2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c6a4:	6839      	ldr	r1, [r7, #0]
 801c6a6:	6878      	ldr	r0, [r7, #4]
 801c6a8:	f7fc f994 	bl	80189d4 <udp_input>
        break;
 801c6ac:	e026      	b.n	801c6fc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c6ae:	6839      	ldr	r1, [r7, #0]
 801c6b0:	6878      	ldr	r0, [r7, #4]
 801c6b2:	f7f7 fce5 	bl	8014080 <tcp_input>
        break;
 801c6b6:	e021      	b.n	801c6fc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c6b8:	6839      	ldr	r1, [r7, #0]
 801c6ba:	6878      	ldr	r0, [r7, #4]
 801c6bc:	f7ff fcca 	bl	801c054 <icmp_input>
        break;
 801c6c0:	e01c      	b.n	801c6fc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c6c2:	4b1a      	ldr	r3, [pc, #104]	; (801c72c <ip4_input+0x27c>)
 801c6c4:	695b      	ldr	r3, [r3, #20]
 801c6c6:	69f9      	ldr	r1, [r7, #28]
 801c6c8:	4618      	mov	r0, r3
 801c6ca:	f000 f90b 	bl	801c8e4 <ip4_addr_isbroadcast_u32>
 801c6ce:	4603      	mov	r3, r0
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	d10f      	bne.n	801c6f4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c6d4:	4b15      	ldr	r3, [pc, #84]	; (801c72c <ip4_input+0x27c>)
 801c6d6:	695b      	ldr	r3, [r3, #20]
 801c6d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c6dc:	2be0      	cmp	r3, #224	; 0xe0
 801c6de:	d009      	beq.n	801c6f4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c6e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c6e4:	4619      	mov	r1, r3
 801c6e6:	6878      	ldr	r0, [r7, #4]
 801c6e8:	f7f5 f8db 	bl	80118a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c6ec:	2102      	movs	r1, #2
 801c6ee:	6878      	ldr	r0, [r7, #4]
 801c6f0:	f7ff fdba 	bl	801c268 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c6f4:	6878      	ldr	r0, [r7, #4]
 801c6f6:	f7f5 f919 	bl	801192c <pbuf_free>
        break;
 801c6fa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c6fc:	4b0b      	ldr	r3, [pc, #44]	; (801c72c <ip4_input+0x27c>)
 801c6fe:	2200      	movs	r2, #0
 801c700:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c702:	4b0a      	ldr	r3, [pc, #40]	; (801c72c <ip4_input+0x27c>)
 801c704:	2200      	movs	r2, #0
 801c706:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c708:	4b08      	ldr	r3, [pc, #32]	; (801c72c <ip4_input+0x27c>)
 801c70a:	2200      	movs	r2, #0
 801c70c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c70e:	4b07      	ldr	r3, [pc, #28]	; (801c72c <ip4_input+0x27c>)
 801c710:	2200      	movs	r2, #0
 801c712:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c714:	4b05      	ldr	r3, [pc, #20]	; (801c72c <ip4_input+0x27c>)
 801c716:	2200      	movs	r2, #0
 801c718:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c71a:	4b04      	ldr	r3, [pc, #16]	; (801c72c <ip4_input+0x27c>)
 801c71c:	2200      	movs	r2, #0
 801c71e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c720:	2300      	movs	r3, #0
}
 801c722:	4618      	mov	r0, r3
 801c724:	3720      	adds	r7, #32
 801c726:	46bd      	mov	sp, r7
 801c728:	bd80      	pop	{r7, pc}
 801c72a:	bf00      	nop
 801c72c:	200176d4 	.word	0x200176d4
 801c730:	2001b0b8 	.word	0x2001b0b8

0801c734 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b08a      	sub	sp, #40	; 0x28
 801c738:	af04      	add	r7, sp, #16
 801c73a:	60f8      	str	r0, [r7, #12]
 801c73c:	60b9      	str	r1, [r7, #8]
 801c73e:	607a      	str	r2, [r7, #4]
 801c740:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c742:	68bb      	ldr	r3, [r7, #8]
 801c744:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d009      	beq.n	801c760 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c74c:	68bb      	ldr	r3, [r7, #8]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d003      	beq.n	801c75a <ip4_output_if+0x26>
 801c752:	68bb      	ldr	r3, [r7, #8]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d102      	bne.n	801c760 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c75c:	3304      	adds	r3, #4
 801c75e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c760:	78fa      	ldrb	r2, [r7, #3]
 801c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c764:	9302      	str	r3, [sp, #8]
 801c766:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c76a:	9301      	str	r3, [sp, #4]
 801c76c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c770:	9300      	str	r3, [sp, #0]
 801c772:	4613      	mov	r3, r2
 801c774:	687a      	ldr	r2, [r7, #4]
 801c776:	6979      	ldr	r1, [r7, #20]
 801c778:	68f8      	ldr	r0, [r7, #12]
 801c77a:	f000 f805 	bl	801c788 <ip4_output_if_src>
 801c77e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c780:	4618      	mov	r0, r3
 801c782:	3718      	adds	r7, #24
 801c784:	46bd      	mov	sp, r7
 801c786:	bd80      	pop	{r7, pc}

0801c788 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c788:	b580      	push	{r7, lr}
 801c78a:	b088      	sub	sp, #32
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	60f8      	str	r0, [r7, #12]
 801c790:	60b9      	str	r1, [r7, #8]
 801c792:	607a      	str	r2, [r7, #4]
 801c794:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	7b9b      	ldrb	r3, [r3, #14]
 801c79a:	2b01      	cmp	r3, #1
 801c79c:	d006      	beq.n	801c7ac <ip4_output_if_src+0x24>
 801c79e:	4b4b      	ldr	r3, [pc, #300]	; (801c8cc <ip4_output_if_src+0x144>)
 801c7a0:	f44f 7255 	mov.w	r2, #852	; 0x354
 801c7a4:	494a      	ldr	r1, [pc, #296]	; (801c8d0 <ip4_output_if_src+0x148>)
 801c7a6:	484b      	ldr	r0, [pc, #300]	; (801c8d4 <ip4_output_if_src+0x14c>)
 801c7a8:	f002 f968 	bl	801ea7c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d060      	beq.n	801c874 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c7b2:	2314      	movs	r3, #20
 801c7b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c7b6:	2114      	movs	r1, #20
 801c7b8:	68f8      	ldr	r0, [r7, #12]
 801c7ba:	f7f4 ffef 	bl	801179c <pbuf_add_header>
 801c7be:	4603      	mov	r3, r0
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d002      	beq.n	801c7ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c7c4:	f06f 0301 	mvn.w	r3, #1
 801c7c8:	e07c      	b.n	801c8c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	685b      	ldr	r3, [r3, #4]
 801c7ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	895b      	ldrh	r3, [r3, #10]
 801c7d4:	2b13      	cmp	r3, #19
 801c7d6:	d806      	bhi.n	801c7e6 <ip4_output_if_src+0x5e>
 801c7d8:	4b3c      	ldr	r3, [pc, #240]	; (801c8cc <ip4_output_if_src+0x144>)
 801c7da:	f44f 7262 	mov.w	r2, #904	; 0x388
 801c7de:	493e      	ldr	r1, [pc, #248]	; (801c8d8 <ip4_output_if_src+0x150>)
 801c7e0:	483c      	ldr	r0, [pc, #240]	; (801c8d4 <ip4_output_if_src+0x14c>)
 801c7e2:	f002 f94b 	bl	801ea7c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c7e6:	69fb      	ldr	r3, [r7, #28]
 801c7e8:	78fa      	ldrb	r2, [r7, #3]
 801c7ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c7ec:	69fb      	ldr	r3, [r7, #28]
 801c7ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c7f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	681a      	ldr	r2, [r3, #0]
 801c7f8:	69fb      	ldr	r3, [r7, #28]
 801c7fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c7fc:	8b7b      	ldrh	r3, [r7, #26]
 801c7fe:	089b      	lsrs	r3, r3, #2
 801c800:	b29b      	uxth	r3, r3
 801c802:	b2db      	uxtb	r3, r3
 801c804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c808:	b2da      	uxtb	r2, r3
 801c80a:	69fb      	ldr	r3, [r7, #28]
 801c80c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c80e:	69fb      	ldr	r3, [r7, #28]
 801c810:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801c814:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	891b      	ldrh	r3, [r3, #8]
 801c81a:	4618      	mov	r0, r3
 801c81c:	f7f2 fcc6 	bl	800f1ac <lwip_htons>
 801c820:	4603      	mov	r3, r0
 801c822:	461a      	mov	r2, r3
 801c824:	69fb      	ldr	r3, [r7, #28]
 801c826:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c828:	69fb      	ldr	r3, [r7, #28]
 801c82a:	2200      	movs	r2, #0
 801c82c:	719a      	strb	r2, [r3, #6]
 801c82e:	2200      	movs	r2, #0
 801c830:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c832:	4b2a      	ldr	r3, [pc, #168]	; (801c8dc <ip4_output_if_src+0x154>)
 801c834:	881b      	ldrh	r3, [r3, #0]
 801c836:	4618      	mov	r0, r3
 801c838:	f7f2 fcb8 	bl	800f1ac <lwip_htons>
 801c83c:	4603      	mov	r3, r0
 801c83e:	461a      	mov	r2, r3
 801c840:	69fb      	ldr	r3, [r7, #28]
 801c842:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c844:	4b25      	ldr	r3, [pc, #148]	; (801c8dc <ip4_output_if_src+0x154>)
 801c846:	881b      	ldrh	r3, [r3, #0]
 801c848:	3301      	adds	r3, #1
 801c84a:	b29a      	uxth	r2, r3
 801c84c:	4b23      	ldr	r3, [pc, #140]	; (801c8dc <ip4_output_if_src+0x154>)
 801c84e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c850:	68bb      	ldr	r3, [r7, #8]
 801c852:	2b00      	cmp	r3, #0
 801c854:	d104      	bne.n	801c860 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c856:	4b22      	ldr	r3, [pc, #136]	; (801c8e0 <ip4_output_if_src+0x158>)
 801c858:	681a      	ldr	r2, [r3, #0]
 801c85a:	69fb      	ldr	r3, [r7, #28]
 801c85c:	60da      	str	r2, [r3, #12]
 801c85e:	e003      	b.n	801c868 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c860:	68bb      	ldr	r3, [r7, #8]
 801c862:	681a      	ldr	r2, [r3, #0]
 801c864:	69fb      	ldr	r3, [r7, #28]
 801c866:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c868:	69fb      	ldr	r3, [r7, #28]
 801c86a:	2200      	movs	r2, #0
 801c86c:	729a      	strb	r2, [r3, #10]
 801c86e:	2200      	movs	r2, #0
 801c870:	72da      	strb	r2, [r3, #11]
 801c872:	e00f      	b.n	801c894 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	895b      	ldrh	r3, [r3, #10]
 801c878:	2b13      	cmp	r3, #19
 801c87a:	d802      	bhi.n	801c882 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c87c:	f06f 0301 	mvn.w	r3, #1
 801c880:	e020      	b.n	801c8c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	685b      	ldr	r3, [r3, #4]
 801c886:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c888:	69fb      	ldr	r3, [r7, #28]
 801c88a:	691b      	ldr	r3, [r3, #16]
 801c88c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c88e:	f107 0314 	add.w	r3, r7, #20
 801c892:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d00c      	beq.n	801c8b6 <ip4_output_if_src+0x12e>
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	891a      	ldrh	r2, [r3, #8]
 801c8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c8a4:	429a      	cmp	r2, r3
 801c8a6:	d906      	bls.n	801c8b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c8a8:	687a      	ldr	r2, [r7, #4]
 801c8aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c8ac:	68f8      	ldr	r0, [r7, #12]
 801c8ae:	f000 fe77 	bl	801d5a0 <ip4_frag>
 801c8b2:	4603      	mov	r3, r0
 801c8b4:	e006      	b.n	801c8c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8b8:	695b      	ldr	r3, [r3, #20]
 801c8ba:	687a      	ldr	r2, [r7, #4]
 801c8bc:	68f9      	ldr	r1, [r7, #12]
 801c8be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c8c0:	4798      	blx	r3
 801c8c2:	4603      	mov	r3, r0
}
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	3720      	adds	r7, #32
 801c8c8:	46bd      	mov	sp, r7
 801c8ca:	bd80      	pop	{r7, pc}
 801c8cc:	08026088 	.word	0x08026088
 801c8d0:	080260bc 	.word	0x080260bc
 801c8d4:	080260c8 	.word	0x080260c8
 801c8d8:	080260f0 	.word	0x080260f0
 801c8dc:	2001449e 	.word	0x2001449e
 801c8e0:	080266c0 	.word	0x080266c0

0801c8e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c8e4:	b480      	push	{r7}
 801c8e6:	b085      	sub	sp, #20
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]
 801c8ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c8f8:	d002      	beq.n	801c900 <ip4_addr_isbroadcast_u32+0x1c>
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d101      	bne.n	801c904 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c900:	2301      	movs	r3, #1
 801c902:	e02a      	b.n	801c95a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c904:	683b      	ldr	r3, [r7, #0]
 801c906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c90a:	f003 0302 	and.w	r3, r3, #2
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d101      	bne.n	801c916 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c912:	2300      	movs	r3, #0
 801c914:	e021      	b.n	801c95a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c916:	683b      	ldr	r3, [r7, #0]
 801c918:	3304      	adds	r3, #4
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	687a      	ldr	r2, [r7, #4]
 801c91e:	429a      	cmp	r2, r3
 801c920:	d101      	bne.n	801c926 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c922:	2300      	movs	r3, #0
 801c924:	e019      	b.n	801c95a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c926:	68fa      	ldr	r2, [r7, #12]
 801c928:	683b      	ldr	r3, [r7, #0]
 801c92a:	3304      	adds	r3, #4
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	405a      	eors	r2, r3
 801c930:	683b      	ldr	r3, [r7, #0]
 801c932:	3308      	adds	r3, #8
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	4013      	ands	r3, r2
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d10d      	bne.n	801c958 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c93c:	683b      	ldr	r3, [r7, #0]
 801c93e:	3308      	adds	r3, #8
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	43da      	mvns	r2, r3
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c948:	683b      	ldr	r3, [r7, #0]
 801c94a:	3308      	adds	r3, #8
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c950:	429a      	cmp	r2, r3
 801c952:	d101      	bne.n	801c958 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c954:	2301      	movs	r3, #1
 801c956:	e000      	b.n	801c95a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c958:	2300      	movs	r3, #0
  }
}
 801c95a:	4618      	mov	r0, r3
 801c95c:	3714      	adds	r7, #20
 801c95e:	46bd      	mov	sp, r7
 801c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c964:	4770      	bx	lr
	...

0801c968 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801c968:	b580      	push	{r7, lr}
 801c96a:	b08a      	sub	sp, #40	; 0x28
 801c96c:	af00      	add	r7, sp, #0
 801c96e:	6078      	str	r0, [r7, #4]
 801c970:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801c972:	f107 030c 	add.w	r3, r7, #12
 801c976:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	781b      	ldrb	r3, [r3, #0]
 801c97c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801c980:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c984:	3301      	adds	r3, #1
 801c986:	4a89      	ldr	r2, [pc, #548]	; (801cbac <ip4addr_aton+0x244>)
 801c988:	4413      	add	r3, r2
 801c98a:	781b      	ldrb	r3, [r3, #0]
 801c98c:	f003 0304 	and.w	r3, r3, #4
 801c990:	2b00      	cmp	r3, #0
 801c992:	d101      	bne.n	801c998 <ip4addr_aton+0x30>
      return 0;
 801c994:	2300      	movs	r3, #0
 801c996:	e105      	b.n	801cba4 <ip4addr_aton+0x23c>
    }
    val = 0;
 801c998:	2300      	movs	r3, #0
 801c99a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801c99c:	230a      	movs	r3, #10
 801c99e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801c9a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c9a6:	2b30      	cmp	r3, #48	; 0x30
 801c9a8:	d11c      	bne.n	801c9e4 <ip4addr_aton+0x7c>
      c = *++cp;
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	3301      	adds	r3, #1
 801c9ae:	607b      	str	r3, [r7, #4]
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	781b      	ldrb	r3, [r3, #0]
 801c9b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801c9b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c9bc:	2b78      	cmp	r3, #120	; 0x78
 801c9be:	d003      	beq.n	801c9c8 <ip4addr_aton+0x60>
 801c9c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c9c4:	2b58      	cmp	r3, #88	; 0x58
 801c9c6:	d10a      	bne.n	801c9de <ip4addr_aton+0x76>
        base = 16;
 801c9c8:	2310      	movs	r3, #16
 801c9ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	3301      	adds	r3, #1
 801c9d2:	607b      	str	r3, [r7, #4]
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	781b      	ldrb	r3, [r3, #0]
 801c9d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801c9dc:	e002      	b.n	801c9e4 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801c9de:	2308      	movs	r3, #8
 801c9e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801c9e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c9e8:	3301      	adds	r3, #1
 801c9ea:	4a70      	ldr	r2, [pc, #448]	; (801cbac <ip4addr_aton+0x244>)
 801c9ec:	4413      	add	r3, r2
 801c9ee:	781b      	ldrb	r3, [r3, #0]
 801c9f0:	f003 0304 	and.w	r3, r3, #4
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d011      	beq.n	801ca1c <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801c9f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c9fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c9fe:	fb02 f203 	mul.w	r2, r2, r3
 801ca02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ca06:	4413      	add	r3, r2
 801ca08:	3b30      	subs	r3, #48	; 0x30
 801ca0a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	3301      	adds	r3, #1
 801ca10:	607b      	str	r3, [r7, #4]
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	781b      	ldrb	r3, [r3, #0]
 801ca16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801ca1a:	e7e3      	b.n	801c9e4 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801ca1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ca20:	2b10      	cmp	r3, #16
 801ca22:	d127      	bne.n	801ca74 <ip4addr_aton+0x10c>
 801ca24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ca28:	3301      	adds	r3, #1
 801ca2a:	4a60      	ldr	r2, [pc, #384]	; (801cbac <ip4addr_aton+0x244>)
 801ca2c:	4413      	add	r3, r2
 801ca2e:	781b      	ldrb	r3, [r3, #0]
 801ca30:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d01d      	beq.n	801ca74 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca3a:	011b      	lsls	r3, r3, #4
 801ca3c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ca40:	f102 010a 	add.w	r1, r2, #10
 801ca44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801ca48:	3201      	adds	r2, #1
 801ca4a:	4858      	ldr	r0, [pc, #352]	; (801cbac <ip4addr_aton+0x244>)
 801ca4c:	4402      	add	r2, r0
 801ca4e:	7812      	ldrb	r2, [r2, #0]
 801ca50:	f002 0203 	and.w	r2, r2, #3
 801ca54:	2a02      	cmp	r2, #2
 801ca56:	d101      	bne.n	801ca5c <ip4addr_aton+0xf4>
 801ca58:	2261      	movs	r2, #97	; 0x61
 801ca5a:	e000      	b.n	801ca5e <ip4addr_aton+0xf6>
 801ca5c:	2241      	movs	r2, #65	; 0x41
 801ca5e:	1a8a      	subs	r2, r1, r2
 801ca60:	4313      	orrs	r3, r2
 801ca62:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	3301      	adds	r3, #1
 801ca68:	607b      	str	r3, [r7, #4]
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	781b      	ldrb	r3, [r3, #0]
 801ca6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801ca72:	e7b7      	b.n	801c9e4 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801ca74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ca78:	2b2e      	cmp	r3, #46	; 0x2e
 801ca7a:	d114      	bne.n	801caa6 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801ca7c:	f107 030c 	add.w	r3, r7, #12
 801ca80:	330c      	adds	r3, #12
 801ca82:	69fa      	ldr	r2, [r7, #28]
 801ca84:	429a      	cmp	r2, r3
 801ca86:	d301      	bcc.n	801ca8c <ip4addr_aton+0x124>
        return 0;
 801ca88:	2300      	movs	r3, #0
 801ca8a:	e08b      	b.n	801cba4 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801ca8c:	69fb      	ldr	r3, [r7, #28]
 801ca8e:	1d1a      	adds	r2, r3, #4
 801ca90:	61fa      	str	r2, [r7, #28]
 801ca92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca94:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	3301      	adds	r3, #1
 801ca9a:	607b      	str	r3, [r7, #4]
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	781b      	ldrb	r3, [r3, #0]
 801caa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801caa4:	e76c      	b.n	801c980 <ip4addr_aton+0x18>
    } else {
      break;
 801caa6:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801caa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801caac:	2b00      	cmp	r3, #0
 801caae:	d00b      	beq.n	801cac8 <ip4addr_aton+0x160>
 801cab0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cab4:	3301      	adds	r3, #1
 801cab6:	4a3d      	ldr	r2, [pc, #244]	; (801cbac <ip4addr_aton+0x244>)
 801cab8:	4413      	add	r3, r2
 801caba:	781b      	ldrb	r3, [r3, #0]
 801cabc:	f003 0308 	and.w	r3, r3, #8
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d101      	bne.n	801cac8 <ip4addr_aton+0x160>
    return 0;
 801cac4:	2300      	movs	r3, #0
 801cac6:	e06d      	b.n	801cba4 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801cac8:	f107 030c 	add.w	r3, r7, #12
 801cacc:	69fa      	ldr	r2, [r7, #28]
 801cace:	1ad3      	subs	r3, r2, r3
 801cad0:	109b      	asrs	r3, r3, #2
 801cad2:	3301      	adds	r3, #1
 801cad4:	2b04      	cmp	r3, #4
 801cad6:	d853      	bhi.n	801cb80 <ip4addr_aton+0x218>
 801cad8:	a201      	add	r2, pc, #4	; (adr r2, 801cae0 <ip4addr_aton+0x178>)
 801cada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cade:	bf00      	nop
 801cae0:	0801caf5 	.word	0x0801caf5
 801cae4:	0801cb8f 	.word	0x0801cb8f
 801cae8:	0801caf9 	.word	0x0801caf9
 801caec:	0801cb1b 	.word	0x0801cb1b
 801caf0:	0801cb49 	.word	0x0801cb49

    case 0:
      return 0;       /* initial nondigit */
 801caf4:	2300      	movs	r3, #0
 801caf6:	e055      	b.n	801cba4 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801caf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cafa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cafe:	d301      	bcc.n	801cb04 <ip4addr_aton+0x19c>
        return 0;
 801cb00:	2300      	movs	r3, #0
 801cb02:	e04f      	b.n	801cba4 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	2bff      	cmp	r3, #255	; 0xff
 801cb08:	d901      	bls.n	801cb0e <ip4addr_aton+0x1a6>
        return 0;
 801cb0a:	2300      	movs	r3, #0
 801cb0c:	e04a      	b.n	801cba4 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	061b      	lsls	r3, r3, #24
 801cb12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb14:	4313      	orrs	r3, r2
 801cb16:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801cb18:	e03a      	b.n	801cb90 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cb20:	d301      	bcc.n	801cb26 <ip4addr_aton+0x1be>
        return 0;
 801cb22:	2300      	movs	r3, #0
 801cb24:	e03e      	b.n	801cba4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	2bff      	cmp	r3, #255	; 0xff
 801cb2a:	d802      	bhi.n	801cb32 <ip4addr_aton+0x1ca>
 801cb2c:	693b      	ldr	r3, [r7, #16]
 801cb2e:	2bff      	cmp	r3, #255	; 0xff
 801cb30:	d901      	bls.n	801cb36 <ip4addr_aton+0x1ce>
        return 0;
 801cb32:	2300      	movs	r3, #0
 801cb34:	e036      	b.n	801cba4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	061a      	lsls	r2, r3, #24
 801cb3a:	693b      	ldr	r3, [r7, #16]
 801cb3c:	041b      	lsls	r3, r3, #16
 801cb3e:	4313      	orrs	r3, r2
 801cb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb42:	4313      	orrs	r3, r2
 801cb44:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801cb46:	e023      	b.n	801cb90 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb4a:	2bff      	cmp	r3, #255	; 0xff
 801cb4c:	d901      	bls.n	801cb52 <ip4addr_aton+0x1ea>
        return 0;
 801cb4e:	2300      	movs	r3, #0
 801cb50:	e028      	b.n	801cba4 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	2bff      	cmp	r3, #255	; 0xff
 801cb56:	d805      	bhi.n	801cb64 <ip4addr_aton+0x1fc>
 801cb58:	693b      	ldr	r3, [r7, #16]
 801cb5a:	2bff      	cmp	r3, #255	; 0xff
 801cb5c:	d802      	bhi.n	801cb64 <ip4addr_aton+0x1fc>
 801cb5e:	697b      	ldr	r3, [r7, #20]
 801cb60:	2bff      	cmp	r3, #255	; 0xff
 801cb62:	d901      	bls.n	801cb68 <ip4addr_aton+0x200>
        return 0;
 801cb64:	2300      	movs	r3, #0
 801cb66:	e01d      	b.n	801cba4 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	061a      	lsls	r2, r3, #24
 801cb6c:	693b      	ldr	r3, [r7, #16]
 801cb6e:	041b      	lsls	r3, r3, #16
 801cb70:	431a      	orrs	r2, r3
 801cb72:	697b      	ldr	r3, [r7, #20]
 801cb74:	021b      	lsls	r3, r3, #8
 801cb76:	4313      	orrs	r3, r2
 801cb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb7a:	4313      	orrs	r3, r2
 801cb7c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801cb7e:	e007      	b.n	801cb90 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801cb80:	4b0b      	ldr	r3, [pc, #44]	; (801cbb0 <ip4addr_aton+0x248>)
 801cb82:	22f9      	movs	r2, #249	; 0xf9
 801cb84:	490b      	ldr	r1, [pc, #44]	; (801cbb4 <ip4addr_aton+0x24c>)
 801cb86:	480c      	ldr	r0, [pc, #48]	; (801cbb8 <ip4addr_aton+0x250>)
 801cb88:	f001 ff78 	bl	801ea7c <iprintf>
      break;
 801cb8c:	e000      	b.n	801cb90 <ip4addr_aton+0x228>
      break;
 801cb8e:	bf00      	nop
  }
  if (addr) {
 801cb90:	683b      	ldr	r3, [r7, #0]
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d005      	beq.n	801cba2 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801cb96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cb98:	f7f2 fb1d 	bl	800f1d6 <lwip_htonl>
 801cb9c:	4602      	mov	r2, r0
 801cb9e:	683b      	ldr	r3, [r7, #0]
 801cba0:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801cba2:	2301      	movs	r3, #1
}
 801cba4:	4618      	mov	r0, r3
 801cba6:	3728      	adds	r7, #40	; 0x28
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	bd80      	pop	{r7, pc}
 801cbac:	080266dc 	.word	0x080266dc
 801cbb0:	08026120 	.word	0x08026120
 801cbb4:	0802615c 	.word	0x0802615c
 801cbb8:	08026168 	.word	0x08026168

0801cbbc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cbbc:	b580      	push	{r7, lr}
 801cbbe:	b084      	sub	sp, #16
 801cbc0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801cbc6:	4b12      	ldr	r3, [pc, #72]	; (801cc10 <ip_reass_tmr+0x54>)
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801cbcc:	e018      	b.n	801cc00 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	7fdb      	ldrb	r3, [r3, #31]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d00b      	beq.n	801cbee <ip_reass_tmr+0x32>
      r->timer--;
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	7fdb      	ldrb	r3, [r3, #31]
 801cbda:	3b01      	subs	r3, #1
 801cbdc:	b2da      	uxtb	r2, r3
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801cbe2:	68fb      	ldr	r3, [r7, #12]
 801cbe4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	60fb      	str	r3, [r7, #12]
 801cbec:	e008      	b.n	801cc00 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cbf8:	68b9      	ldr	r1, [r7, #8]
 801cbfa:	6878      	ldr	r0, [r7, #4]
 801cbfc:	f000 f80a 	bl	801cc14 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d1e3      	bne.n	801cbce <ip_reass_tmr+0x12>
    }
  }
}
 801cc06:	bf00      	nop
 801cc08:	bf00      	nop
 801cc0a:	3710      	adds	r7, #16
 801cc0c:	46bd      	mov	sp, r7
 801cc0e:	bd80      	pop	{r7, pc}
 801cc10:	200144a0 	.word	0x200144a0

0801cc14 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b088      	sub	sp, #32
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	6078      	str	r0, [r7, #4]
 801cc1c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801cc1e:	2300      	movs	r3, #0
 801cc20:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801cc22:	683a      	ldr	r2, [r7, #0]
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	429a      	cmp	r2, r3
 801cc28:	d105      	bne.n	801cc36 <ip_reass_free_complete_datagram+0x22>
 801cc2a:	4b45      	ldr	r3, [pc, #276]	; (801cd40 <ip_reass_free_complete_datagram+0x12c>)
 801cc2c:	22ab      	movs	r2, #171	; 0xab
 801cc2e:	4945      	ldr	r1, [pc, #276]	; (801cd44 <ip_reass_free_complete_datagram+0x130>)
 801cc30:	4845      	ldr	r0, [pc, #276]	; (801cd48 <ip_reass_free_complete_datagram+0x134>)
 801cc32:	f001 ff23 	bl	801ea7c <iprintf>
  if (prev != NULL) {
 801cc36:	683b      	ldr	r3, [r7, #0]
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d00a      	beq.n	801cc52 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801cc3c:	683b      	ldr	r3, [r7, #0]
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	687a      	ldr	r2, [r7, #4]
 801cc42:	429a      	cmp	r2, r3
 801cc44:	d005      	beq.n	801cc52 <ip_reass_free_complete_datagram+0x3e>
 801cc46:	4b3e      	ldr	r3, [pc, #248]	; (801cd40 <ip_reass_free_complete_datagram+0x12c>)
 801cc48:	22ad      	movs	r2, #173	; 0xad
 801cc4a:	4940      	ldr	r1, [pc, #256]	; (801cd4c <ip_reass_free_complete_datagram+0x138>)
 801cc4c:	483e      	ldr	r0, [pc, #248]	; (801cd48 <ip_reass_free_complete_datagram+0x134>)
 801cc4e:	f001 ff15 	bl	801ea7c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	685b      	ldr	r3, [r3, #4]
 801cc56:	685b      	ldr	r3, [r3, #4]
 801cc58:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801cc5a:	697b      	ldr	r3, [r7, #20]
 801cc5c:	889b      	ldrh	r3, [r3, #4]
 801cc5e:	b29b      	uxth	r3, r3
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d12a      	bne.n	801ccba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	685b      	ldr	r3, [r3, #4]
 801cc68:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801cc6a:	697b      	ldr	r3, [r7, #20]
 801cc6c:	681a      	ldr	r2, [r3, #0]
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cc72:	69bb      	ldr	r3, [r7, #24]
 801cc74:	6858      	ldr	r0, [r3, #4]
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	3308      	adds	r3, #8
 801cc7a:	2214      	movs	r2, #20
 801cc7c:	4619      	mov	r1, r3
 801cc7e:	f001 f9b9 	bl	801dff4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801cc82:	2101      	movs	r1, #1
 801cc84:	69b8      	ldr	r0, [r7, #24]
 801cc86:	f7ff faff 	bl	801c288 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801cc8a:	69b8      	ldr	r0, [r7, #24]
 801cc8c:	f7f4 fedc 	bl	8011a48 <pbuf_clen>
 801cc90:	4603      	mov	r3, r0
 801cc92:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cc94:	8bfa      	ldrh	r2, [r7, #30]
 801cc96:	8a7b      	ldrh	r3, [r7, #18]
 801cc98:	4413      	add	r3, r2
 801cc9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc9e:	db05      	blt.n	801ccac <ip_reass_free_complete_datagram+0x98>
 801cca0:	4b27      	ldr	r3, [pc, #156]	; (801cd40 <ip_reass_free_complete_datagram+0x12c>)
 801cca2:	22bc      	movs	r2, #188	; 0xbc
 801cca4:	492a      	ldr	r1, [pc, #168]	; (801cd50 <ip_reass_free_complete_datagram+0x13c>)
 801cca6:	4828      	ldr	r0, [pc, #160]	; (801cd48 <ip_reass_free_complete_datagram+0x134>)
 801cca8:	f001 fee8 	bl	801ea7c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ccac:	8bfa      	ldrh	r2, [r7, #30]
 801ccae:	8a7b      	ldrh	r3, [r7, #18]
 801ccb0:	4413      	add	r3, r2
 801ccb2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ccb4:	69b8      	ldr	r0, [r7, #24]
 801ccb6:	f7f4 fe39 	bl	801192c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	685b      	ldr	r3, [r3, #4]
 801ccbe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ccc0:	e01f      	b.n	801cd02 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ccc2:	69bb      	ldr	r3, [r7, #24]
 801ccc4:	685b      	ldr	r3, [r3, #4]
 801ccc6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ccc8:	69bb      	ldr	r3, [r7, #24]
 801ccca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cccc:	697b      	ldr	r3, [r7, #20]
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ccd2:	68f8      	ldr	r0, [r7, #12]
 801ccd4:	f7f4 feb8 	bl	8011a48 <pbuf_clen>
 801ccd8:	4603      	mov	r3, r0
 801ccda:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ccdc:	8bfa      	ldrh	r2, [r7, #30]
 801ccde:	8a7b      	ldrh	r3, [r7, #18]
 801cce0:	4413      	add	r3, r2
 801cce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cce6:	db05      	blt.n	801ccf4 <ip_reass_free_complete_datagram+0xe0>
 801cce8:	4b15      	ldr	r3, [pc, #84]	; (801cd40 <ip_reass_free_complete_datagram+0x12c>)
 801ccea:	22cc      	movs	r2, #204	; 0xcc
 801ccec:	4918      	ldr	r1, [pc, #96]	; (801cd50 <ip_reass_free_complete_datagram+0x13c>)
 801ccee:	4816      	ldr	r0, [pc, #88]	; (801cd48 <ip_reass_free_complete_datagram+0x134>)
 801ccf0:	f001 fec4 	bl	801ea7c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ccf4:	8bfa      	ldrh	r2, [r7, #30]
 801ccf6:	8a7b      	ldrh	r3, [r7, #18]
 801ccf8:	4413      	add	r3, r2
 801ccfa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ccfc:	68f8      	ldr	r0, [r7, #12]
 801ccfe:	f7f4 fe15 	bl	801192c <pbuf_free>
  while (p != NULL) {
 801cd02:	69bb      	ldr	r3, [r7, #24]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d1dc      	bne.n	801ccc2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801cd08:	6839      	ldr	r1, [r7, #0]
 801cd0a:	6878      	ldr	r0, [r7, #4]
 801cd0c:	f000 f8c2 	bl	801ce94 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801cd10:	4b10      	ldr	r3, [pc, #64]	; (801cd54 <ip_reass_free_complete_datagram+0x140>)
 801cd12:	881b      	ldrh	r3, [r3, #0]
 801cd14:	8bfa      	ldrh	r2, [r7, #30]
 801cd16:	429a      	cmp	r2, r3
 801cd18:	d905      	bls.n	801cd26 <ip_reass_free_complete_datagram+0x112>
 801cd1a:	4b09      	ldr	r3, [pc, #36]	; (801cd40 <ip_reass_free_complete_datagram+0x12c>)
 801cd1c:	22d2      	movs	r2, #210	; 0xd2
 801cd1e:	490e      	ldr	r1, [pc, #56]	; (801cd58 <ip_reass_free_complete_datagram+0x144>)
 801cd20:	4809      	ldr	r0, [pc, #36]	; (801cd48 <ip_reass_free_complete_datagram+0x134>)
 801cd22:	f001 feab 	bl	801ea7c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801cd26:	4b0b      	ldr	r3, [pc, #44]	; (801cd54 <ip_reass_free_complete_datagram+0x140>)
 801cd28:	881a      	ldrh	r2, [r3, #0]
 801cd2a:	8bfb      	ldrh	r3, [r7, #30]
 801cd2c:	1ad3      	subs	r3, r2, r3
 801cd2e:	b29a      	uxth	r2, r3
 801cd30:	4b08      	ldr	r3, [pc, #32]	; (801cd54 <ip_reass_free_complete_datagram+0x140>)
 801cd32:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801cd34:	8bfb      	ldrh	r3, [r7, #30]
}
 801cd36:	4618      	mov	r0, r3
 801cd38:	3720      	adds	r7, #32
 801cd3a:	46bd      	mov	sp, r7
 801cd3c:	bd80      	pop	{r7, pc}
 801cd3e:	bf00      	nop
 801cd40:	08026190 	.word	0x08026190
 801cd44:	080261cc 	.word	0x080261cc
 801cd48:	080261d8 	.word	0x080261d8
 801cd4c:	08026200 	.word	0x08026200
 801cd50:	08026214 	.word	0x08026214
 801cd54:	200144a4 	.word	0x200144a4
 801cd58:	08026234 	.word	0x08026234

0801cd5c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801cd5c:	b580      	push	{r7, lr}
 801cd5e:	b08a      	sub	sp, #40	; 0x28
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	6078      	str	r0, [r7, #4]
 801cd64:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801cd66:	2300      	movs	r3, #0
 801cd68:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801cd72:	2300      	movs	r3, #0
 801cd74:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801cd76:	2300      	movs	r3, #0
 801cd78:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801cd7a:	4b28      	ldr	r3, [pc, #160]	; (801ce1c <ip_reass_remove_oldest_datagram+0xc0>)
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801cd80:	e030      	b.n	801cde4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801cd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd84:	695a      	ldr	r2, [r3, #20]
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	68db      	ldr	r3, [r3, #12]
 801cd8a:	429a      	cmp	r2, r3
 801cd8c:	d10c      	bne.n	801cda8 <ip_reass_remove_oldest_datagram+0x4c>
 801cd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd90:	699a      	ldr	r2, [r3, #24]
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	691b      	ldr	r3, [r3, #16]
 801cd96:	429a      	cmp	r2, r3
 801cd98:	d106      	bne.n	801cda8 <ip_reass_remove_oldest_datagram+0x4c>
 801cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd9c:	899a      	ldrh	r2, [r3, #12]
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	889b      	ldrh	r3, [r3, #4]
 801cda2:	b29b      	uxth	r3, r3
 801cda4:	429a      	cmp	r2, r3
 801cda6:	d014      	beq.n	801cdd2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801cda8:	693b      	ldr	r3, [r7, #16]
 801cdaa:	3301      	adds	r3, #1
 801cdac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801cdae:	6a3b      	ldr	r3, [r7, #32]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d104      	bne.n	801cdbe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdb6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cdb8:	69fb      	ldr	r3, [r7, #28]
 801cdba:	61bb      	str	r3, [r7, #24]
 801cdbc:	e009      	b.n	801cdd2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdc0:	7fda      	ldrb	r2, [r3, #31]
 801cdc2:	6a3b      	ldr	r3, [r7, #32]
 801cdc4:	7fdb      	ldrb	r3, [r3, #31]
 801cdc6:	429a      	cmp	r2, r3
 801cdc8:	d803      	bhi.n	801cdd2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801cdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdcc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cdce:	69fb      	ldr	r3, [r7, #28]
 801cdd0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d001      	beq.n	801cdde <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cddc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d1cb      	bne.n	801cd82 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801cdea:	6a3b      	ldr	r3, [r7, #32]
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d008      	beq.n	801ce02 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801cdf0:	69b9      	ldr	r1, [r7, #24]
 801cdf2:	6a38      	ldr	r0, [r7, #32]
 801cdf4:	f7ff ff0e 	bl	801cc14 <ip_reass_free_complete_datagram>
 801cdf8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801cdfa:	697a      	ldr	r2, [r7, #20]
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	4413      	add	r3, r2
 801ce00:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ce02:	697a      	ldr	r2, [r7, #20]
 801ce04:	683b      	ldr	r3, [r7, #0]
 801ce06:	429a      	cmp	r2, r3
 801ce08:	da02      	bge.n	801ce10 <ip_reass_remove_oldest_datagram+0xb4>
 801ce0a:	693b      	ldr	r3, [r7, #16]
 801ce0c:	2b01      	cmp	r3, #1
 801ce0e:	dcac      	bgt.n	801cd6a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ce10:	697b      	ldr	r3, [r7, #20]
}
 801ce12:	4618      	mov	r0, r3
 801ce14:	3728      	adds	r7, #40	; 0x28
 801ce16:	46bd      	mov	sp, r7
 801ce18:	bd80      	pop	{r7, pc}
 801ce1a:	bf00      	nop
 801ce1c:	200144a0 	.word	0x200144a0

0801ce20 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ce20:	b580      	push	{r7, lr}
 801ce22:	b084      	sub	sp, #16
 801ce24:	af00      	add	r7, sp, #0
 801ce26:	6078      	str	r0, [r7, #4]
 801ce28:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ce2a:	2004      	movs	r0, #4
 801ce2c:	f7f3 fe4a 	bl	8010ac4 <memp_malloc>
 801ce30:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	d110      	bne.n	801ce5a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ce38:	6839      	ldr	r1, [r7, #0]
 801ce3a:	6878      	ldr	r0, [r7, #4]
 801ce3c:	f7ff ff8e 	bl	801cd5c <ip_reass_remove_oldest_datagram>
 801ce40:	4602      	mov	r2, r0
 801ce42:	683b      	ldr	r3, [r7, #0]
 801ce44:	4293      	cmp	r3, r2
 801ce46:	dc03      	bgt.n	801ce50 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ce48:	2004      	movs	r0, #4
 801ce4a:	f7f3 fe3b 	bl	8010ac4 <memp_malloc>
 801ce4e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d101      	bne.n	801ce5a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ce56:	2300      	movs	r3, #0
 801ce58:	e016      	b.n	801ce88 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ce5a:	2220      	movs	r2, #32
 801ce5c:	2100      	movs	r1, #0
 801ce5e:	68f8      	ldr	r0, [r7, #12]
 801ce60:	f001 f8f0 	bl	801e044 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	220f      	movs	r2, #15
 801ce68:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ce6a:	4b09      	ldr	r3, [pc, #36]	; (801ce90 <ip_reass_enqueue_new_datagram+0x70>)
 801ce6c:	681a      	ldr	r2, [r3, #0]
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ce72:	4a07      	ldr	r2, [pc, #28]	; (801ce90 <ip_reass_enqueue_new_datagram+0x70>)
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	3308      	adds	r3, #8
 801ce7c:	2214      	movs	r2, #20
 801ce7e:	6879      	ldr	r1, [r7, #4]
 801ce80:	4618      	mov	r0, r3
 801ce82:	f001 f8b7 	bl	801dff4 <memcpy>
  return ipr;
 801ce86:	68fb      	ldr	r3, [r7, #12]
}
 801ce88:	4618      	mov	r0, r3
 801ce8a:	3710      	adds	r7, #16
 801ce8c:	46bd      	mov	sp, r7
 801ce8e:	bd80      	pop	{r7, pc}
 801ce90:	200144a0 	.word	0x200144a0

0801ce94 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ce94:	b580      	push	{r7, lr}
 801ce96:	b082      	sub	sp, #8
 801ce98:	af00      	add	r7, sp, #0
 801ce9a:	6078      	str	r0, [r7, #4]
 801ce9c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ce9e:	4b10      	ldr	r3, [pc, #64]	; (801cee0 <ip_reass_dequeue_datagram+0x4c>)
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	687a      	ldr	r2, [r7, #4]
 801cea4:	429a      	cmp	r2, r3
 801cea6:	d104      	bne.n	801ceb2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	4a0c      	ldr	r2, [pc, #48]	; (801cee0 <ip_reass_dequeue_datagram+0x4c>)
 801ceae:	6013      	str	r3, [r2, #0]
 801ceb0:	e00d      	b.n	801cece <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ceb2:	683b      	ldr	r3, [r7, #0]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d106      	bne.n	801cec6 <ip_reass_dequeue_datagram+0x32>
 801ceb8:	4b0a      	ldr	r3, [pc, #40]	; (801cee4 <ip_reass_dequeue_datagram+0x50>)
 801ceba:	f240 1245 	movw	r2, #325	; 0x145
 801cebe:	490a      	ldr	r1, [pc, #40]	; (801cee8 <ip_reass_dequeue_datagram+0x54>)
 801cec0:	480a      	ldr	r0, [pc, #40]	; (801ceec <ip_reass_dequeue_datagram+0x58>)
 801cec2:	f001 fddb 	bl	801ea7c <iprintf>
    prev->next = ipr->next;
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	681a      	ldr	r2, [r3, #0]
 801ceca:	683b      	ldr	r3, [r7, #0]
 801cecc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801cece:	6879      	ldr	r1, [r7, #4]
 801ced0:	2004      	movs	r0, #4
 801ced2:	f7f3 fe49 	bl	8010b68 <memp_free>
}
 801ced6:	bf00      	nop
 801ced8:	3708      	adds	r7, #8
 801ceda:	46bd      	mov	sp, r7
 801cedc:	bd80      	pop	{r7, pc}
 801cede:	bf00      	nop
 801cee0:	200144a0 	.word	0x200144a0
 801cee4:	08026190 	.word	0x08026190
 801cee8:	08026258 	.word	0x08026258
 801ceec:	080261d8 	.word	0x080261d8

0801cef0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b08c      	sub	sp, #48	; 0x30
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	60f8      	str	r0, [r7, #12]
 801cef8:	60b9      	str	r1, [r7, #8]
 801cefa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801cefc:	2300      	movs	r3, #0
 801cefe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801cf00:	2301      	movs	r3, #1
 801cf02:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801cf04:	68bb      	ldr	r3, [r7, #8]
 801cf06:	685b      	ldr	r3, [r3, #4]
 801cf08:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801cf0a:	69fb      	ldr	r3, [r7, #28]
 801cf0c:	885b      	ldrh	r3, [r3, #2]
 801cf0e:	b29b      	uxth	r3, r3
 801cf10:	4618      	mov	r0, r3
 801cf12:	f7f2 f94b 	bl	800f1ac <lwip_htons>
 801cf16:	4603      	mov	r3, r0
 801cf18:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801cf1a:	69fb      	ldr	r3, [r7, #28]
 801cf1c:	781b      	ldrb	r3, [r3, #0]
 801cf1e:	f003 030f 	and.w	r3, r3, #15
 801cf22:	b2db      	uxtb	r3, r3
 801cf24:	009b      	lsls	r3, r3, #2
 801cf26:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801cf28:	7e7b      	ldrb	r3, [r7, #25]
 801cf2a:	b29b      	uxth	r3, r3
 801cf2c:	8b7a      	ldrh	r2, [r7, #26]
 801cf2e:	429a      	cmp	r2, r3
 801cf30:	d202      	bcs.n	801cf38 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cf36:	e135      	b.n	801d1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801cf38:	7e7b      	ldrb	r3, [r7, #25]
 801cf3a:	b29b      	uxth	r3, r3
 801cf3c:	8b7a      	ldrh	r2, [r7, #26]
 801cf3e:	1ad3      	subs	r3, r2, r3
 801cf40:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801cf42:	69fb      	ldr	r3, [r7, #28]
 801cf44:	88db      	ldrh	r3, [r3, #6]
 801cf46:	b29b      	uxth	r3, r3
 801cf48:	4618      	mov	r0, r3
 801cf4a:	f7f2 f92f 	bl	800f1ac <lwip_htons>
 801cf4e:	4603      	mov	r3, r0
 801cf50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cf54:	b29b      	uxth	r3, r3
 801cf56:	00db      	lsls	r3, r3, #3
 801cf58:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801cf5a:	68bb      	ldr	r3, [r7, #8]
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801cf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf62:	2200      	movs	r2, #0
 801cf64:	701a      	strb	r2, [r3, #0]
 801cf66:	2200      	movs	r2, #0
 801cf68:	705a      	strb	r2, [r3, #1]
 801cf6a:	2200      	movs	r2, #0
 801cf6c:	709a      	strb	r2, [r3, #2]
 801cf6e:	2200      	movs	r2, #0
 801cf70:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf74:	8afa      	ldrh	r2, [r7, #22]
 801cf76:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801cf78:	8afa      	ldrh	r2, [r7, #22]
 801cf7a:	8b7b      	ldrh	r3, [r7, #26]
 801cf7c:	4413      	add	r3, r2
 801cf7e:	b29a      	uxth	r2, r3
 801cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf82:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf86:	88db      	ldrh	r3, [r3, #6]
 801cf88:	b29b      	uxth	r3, r3
 801cf8a:	8afa      	ldrh	r2, [r7, #22]
 801cf8c:	429a      	cmp	r2, r3
 801cf8e:	d902      	bls.n	801cf96 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cf94:	e106      	b.n	801d1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801cf96:	68fb      	ldr	r3, [r7, #12]
 801cf98:	685b      	ldr	r3, [r3, #4]
 801cf9a:	627b      	str	r3, [r7, #36]	; 0x24
 801cf9c:	e068      	b.n	801d070 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801cf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfa0:	685b      	ldr	r3, [r3, #4]
 801cfa2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfa6:	889b      	ldrh	r3, [r3, #4]
 801cfa8:	b29a      	uxth	r2, r3
 801cfaa:	693b      	ldr	r3, [r7, #16]
 801cfac:	889b      	ldrh	r3, [r3, #4]
 801cfae:	b29b      	uxth	r3, r3
 801cfb0:	429a      	cmp	r2, r3
 801cfb2:	d235      	bcs.n	801d020 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cfb8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801cfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d020      	beq.n	801d002 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801cfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfc2:	889b      	ldrh	r3, [r3, #4]
 801cfc4:	b29a      	uxth	r2, r3
 801cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfc8:	88db      	ldrh	r3, [r3, #6]
 801cfca:	b29b      	uxth	r3, r3
 801cfcc:	429a      	cmp	r2, r3
 801cfce:	d307      	bcc.n	801cfe0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801cfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfd2:	88db      	ldrh	r3, [r3, #6]
 801cfd4:	b29a      	uxth	r2, r3
 801cfd6:	693b      	ldr	r3, [r7, #16]
 801cfd8:	889b      	ldrh	r3, [r3, #4]
 801cfda:	b29b      	uxth	r3, r3
 801cfdc:	429a      	cmp	r2, r3
 801cfde:	d902      	bls.n	801cfe6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cfe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cfe4:	e0de      	b.n	801d1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801cfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfe8:	68ba      	ldr	r2, [r7, #8]
 801cfea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801cfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfee:	88db      	ldrh	r3, [r3, #6]
 801cff0:	b29a      	uxth	r2, r3
 801cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cff4:	889b      	ldrh	r3, [r3, #4]
 801cff6:	b29b      	uxth	r3, r3
 801cff8:	429a      	cmp	r2, r3
 801cffa:	d03d      	beq.n	801d078 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801cffc:	2300      	movs	r3, #0
 801cffe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d000:	e03a      	b.n	801d078 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d004:	88db      	ldrh	r3, [r3, #6]
 801d006:	b29a      	uxth	r2, r3
 801d008:	693b      	ldr	r3, [r7, #16]
 801d00a:	889b      	ldrh	r3, [r3, #4]
 801d00c:	b29b      	uxth	r3, r3
 801d00e:	429a      	cmp	r2, r3
 801d010:	d902      	bls.n	801d018 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d016:	e0c5      	b.n	801d1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	68ba      	ldr	r2, [r7, #8]
 801d01c:	605a      	str	r2, [r3, #4]
      break;
 801d01e:	e02b      	b.n	801d078 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d022:	889b      	ldrh	r3, [r3, #4]
 801d024:	b29a      	uxth	r2, r3
 801d026:	693b      	ldr	r3, [r7, #16]
 801d028:	889b      	ldrh	r3, [r3, #4]
 801d02a:	b29b      	uxth	r3, r3
 801d02c:	429a      	cmp	r2, r3
 801d02e:	d102      	bne.n	801d036 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d034:	e0b6      	b.n	801d1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d038:	889b      	ldrh	r3, [r3, #4]
 801d03a:	b29a      	uxth	r2, r3
 801d03c:	693b      	ldr	r3, [r7, #16]
 801d03e:	88db      	ldrh	r3, [r3, #6]
 801d040:	b29b      	uxth	r3, r3
 801d042:	429a      	cmp	r2, r3
 801d044:	d202      	bcs.n	801d04c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d04a:	e0ab      	b.n	801d1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d009      	beq.n	801d066 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d054:	88db      	ldrh	r3, [r3, #6]
 801d056:	b29a      	uxth	r2, r3
 801d058:	693b      	ldr	r3, [r7, #16]
 801d05a:	889b      	ldrh	r3, [r3, #4]
 801d05c:	b29b      	uxth	r3, r3
 801d05e:	429a      	cmp	r2, r3
 801d060:	d001      	beq.n	801d066 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d062:	2300      	movs	r3, #0
 801d064:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d066:	693b      	ldr	r3, [r7, #16]
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d06c:	693b      	ldr	r3, [r7, #16]
 801d06e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d072:	2b00      	cmp	r3, #0
 801d074:	d193      	bne.n	801cf9e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d076:	e000      	b.n	801d07a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d078:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d12d      	bne.n	801d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d082:	2b00      	cmp	r3, #0
 801d084:	d01c      	beq.n	801d0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d088:	88db      	ldrh	r3, [r3, #6]
 801d08a:	b29a      	uxth	r2, r3
 801d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d08e:	889b      	ldrh	r3, [r3, #4]
 801d090:	b29b      	uxth	r3, r3
 801d092:	429a      	cmp	r2, r3
 801d094:	d906      	bls.n	801d0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d096:	4b45      	ldr	r3, [pc, #276]	; (801d1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d098:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d09c:	4944      	ldr	r1, [pc, #272]	; (801d1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d09e:	4845      	ldr	r0, [pc, #276]	; (801d1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d0a0:	f001 fcec 	bl	801ea7c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0a6:	68ba      	ldr	r2, [r7, #8]
 801d0a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0ac:	88db      	ldrh	r3, [r3, #6]
 801d0ae:	b29a      	uxth	r2, r3
 801d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0b2:	889b      	ldrh	r3, [r3, #4]
 801d0b4:	b29b      	uxth	r3, r3
 801d0b6:	429a      	cmp	r2, r3
 801d0b8:	d010      	beq.n	801d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	623b      	str	r3, [r7, #32]
 801d0be:	e00d      	b.n	801d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	685b      	ldr	r3, [r3, #4]
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d006      	beq.n	801d0d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d0c8:	4b38      	ldr	r3, [pc, #224]	; (801d1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d0ca:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d0ce:	493a      	ldr	r1, [pc, #232]	; (801d1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d0d0:	4838      	ldr	r0, [pc, #224]	; (801d1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d0d2:	f001 fcd3 	bl	801ea7c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d0d6:	68fb      	ldr	r3, [r7, #12]
 801d0d8:	68ba      	ldr	r2, [r7, #8]
 801d0da:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d105      	bne.n	801d0ee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	7f9b      	ldrb	r3, [r3, #30]
 801d0e6:	f003 0301 	and.w	r3, r3, #1
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d059      	beq.n	801d1a2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d0ee:	6a3b      	ldr	r3, [r7, #32]
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d04f      	beq.n	801d194 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	685b      	ldr	r3, [r3, #4]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d006      	beq.n	801d10a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	685b      	ldr	r3, [r3, #4]
 801d100:	685b      	ldr	r3, [r3, #4]
 801d102:	889b      	ldrh	r3, [r3, #4]
 801d104:	b29b      	uxth	r3, r3
 801d106:	2b00      	cmp	r3, #0
 801d108:	d002      	beq.n	801d110 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d10a:	2300      	movs	r3, #0
 801d10c:	623b      	str	r3, [r7, #32]
 801d10e:	e041      	b.n	801d194 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d112:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d11a:	e012      	b.n	801d142 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d11e:	685b      	ldr	r3, [r3, #4]
 801d120:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d124:	88db      	ldrh	r3, [r3, #6]
 801d126:	b29a      	uxth	r2, r3
 801d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d12a:	889b      	ldrh	r3, [r3, #4]
 801d12c:	b29b      	uxth	r3, r3
 801d12e:	429a      	cmp	r2, r3
 801d130:	d002      	beq.n	801d138 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d132:	2300      	movs	r3, #0
 801d134:	623b      	str	r3, [r7, #32]
            break;
 801d136:	e007      	b.n	801d148 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d13a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d144:	2b00      	cmp	r3, #0
 801d146:	d1e9      	bne.n	801d11c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d148:	6a3b      	ldr	r3, [r7, #32]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d022      	beq.n	801d194 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	685b      	ldr	r3, [r3, #4]
 801d152:	2b00      	cmp	r3, #0
 801d154:	d106      	bne.n	801d164 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d156:	4b15      	ldr	r3, [pc, #84]	; (801d1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d158:	f240 12df 	movw	r2, #479	; 0x1df
 801d15c:	4917      	ldr	r1, [pc, #92]	; (801d1bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d15e:	4815      	ldr	r0, [pc, #84]	; (801d1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d160:	f001 fc8c 	bl	801ea7c <iprintf>
          LWIP_ASSERT("sanity check",
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	685b      	ldr	r3, [r3, #4]
 801d168:	685b      	ldr	r3, [r3, #4]
 801d16a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d16c:	429a      	cmp	r2, r3
 801d16e:	d106      	bne.n	801d17e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d170:	4b0e      	ldr	r3, [pc, #56]	; (801d1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d172:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d176:	4911      	ldr	r1, [pc, #68]	; (801d1bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d178:	480e      	ldr	r0, [pc, #56]	; (801d1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d17a:	f001 fc7f 	bl	801ea7c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	2b00      	cmp	r3, #0
 801d184:	d006      	beq.n	801d194 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d186:	4b09      	ldr	r3, [pc, #36]	; (801d1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d188:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d18c:	490c      	ldr	r1, [pc, #48]	; (801d1c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d18e:	4809      	ldr	r0, [pc, #36]	; (801d1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d190:	f001 fc74 	bl	801ea7c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d194:	6a3b      	ldr	r3, [r7, #32]
 801d196:	2b00      	cmp	r3, #0
 801d198:	bf14      	ite	ne
 801d19a:	2301      	movne	r3, #1
 801d19c:	2300      	moveq	r3, #0
 801d19e:	b2db      	uxtb	r3, r3
 801d1a0:	e000      	b.n	801d1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d1a2:	2300      	movs	r3, #0
}
 801d1a4:	4618      	mov	r0, r3
 801d1a6:	3730      	adds	r7, #48	; 0x30
 801d1a8:	46bd      	mov	sp, r7
 801d1aa:	bd80      	pop	{r7, pc}
 801d1ac:	08026190 	.word	0x08026190
 801d1b0:	08026274 	.word	0x08026274
 801d1b4:	080261d8 	.word	0x080261d8
 801d1b8:	08026294 	.word	0x08026294
 801d1bc:	080262cc 	.word	0x080262cc
 801d1c0:	080262dc 	.word	0x080262dc

0801d1c4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d1c4:	b580      	push	{r7, lr}
 801d1c6:	b08e      	sub	sp, #56	; 0x38
 801d1c8:	af00      	add	r7, sp, #0
 801d1ca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	685b      	ldr	r3, [r3, #4]
 801d1d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1d4:	781b      	ldrb	r3, [r3, #0]
 801d1d6:	f003 030f 	and.w	r3, r3, #15
 801d1da:	b2db      	uxtb	r3, r3
 801d1dc:	009b      	lsls	r3, r3, #2
 801d1de:	b2db      	uxtb	r3, r3
 801d1e0:	2b14      	cmp	r3, #20
 801d1e2:	f040 8167 	bne.w	801d4b4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1e8:	88db      	ldrh	r3, [r3, #6]
 801d1ea:	b29b      	uxth	r3, r3
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	f7f1 ffdd 	bl	800f1ac <lwip_htons>
 801d1f2:	4603      	mov	r3, r0
 801d1f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d1f8:	b29b      	uxth	r3, r3
 801d1fa:	00db      	lsls	r3, r3, #3
 801d1fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d200:	885b      	ldrh	r3, [r3, #2]
 801d202:	b29b      	uxth	r3, r3
 801d204:	4618      	mov	r0, r3
 801d206:	f7f1 ffd1 	bl	800f1ac <lwip_htons>
 801d20a:	4603      	mov	r3, r0
 801d20c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d210:	781b      	ldrb	r3, [r3, #0]
 801d212:	f003 030f 	and.w	r3, r3, #15
 801d216:	b2db      	uxtb	r3, r3
 801d218:	009b      	lsls	r3, r3, #2
 801d21a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d21e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d222:	b29b      	uxth	r3, r3
 801d224:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d226:	429a      	cmp	r2, r3
 801d228:	f0c0 8146 	bcc.w	801d4b8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d22c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d230:	b29b      	uxth	r3, r3
 801d232:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d234:	1ad3      	subs	r3, r2, r3
 801d236:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d238:	6878      	ldr	r0, [r7, #4]
 801d23a:	f7f4 fc05 	bl	8011a48 <pbuf_clen>
 801d23e:	4603      	mov	r3, r0
 801d240:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d242:	4b9f      	ldr	r3, [pc, #636]	; (801d4c0 <ip4_reass+0x2fc>)
 801d244:	881b      	ldrh	r3, [r3, #0]
 801d246:	461a      	mov	r2, r3
 801d248:	8c3b      	ldrh	r3, [r7, #32]
 801d24a:	4413      	add	r3, r2
 801d24c:	2b0a      	cmp	r3, #10
 801d24e:	dd10      	ble.n	801d272 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d250:	8c3b      	ldrh	r3, [r7, #32]
 801d252:	4619      	mov	r1, r3
 801d254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d256:	f7ff fd81 	bl	801cd5c <ip_reass_remove_oldest_datagram>
 801d25a:	4603      	mov	r3, r0
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	f000 812d 	beq.w	801d4bc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d262:	4b97      	ldr	r3, [pc, #604]	; (801d4c0 <ip4_reass+0x2fc>)
 801d264:	881b      	ldrh	r3, [r3, #0]
 801d266:	461a      	mov	r2, r3
 801d268:	8c3b      	ldrh	r3, [r7, #32]
 801d26a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d26c:	2b0a      	cmp	r3, #10
 801d26e:	f300 8125 	bgt.w	801d4bc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d272:	4b94      	ldr	r3, [pc, #592]	; (801d4c4 <ip4_reass+0x300>)
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	633b      	str	r3, [r7, #48]	; 0x30
 801d278:	e015      	b.n	801d2a6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d27c:	695a      	ldr	r2, [r3, #20]
 801d27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d280:	68db      	ldr	r3, [r3, #12]
 801d282:	429a      	cmp	r2, r3
 801d284:	d10c      	bne.n	801d2a0 <ip4_reass+0xdc>
 801d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d288:	699a      	ldr	r2, [r3, #24]
 801d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d28c:	691b      	ldr	r3, [r3, #16]
 801d28e:	429a      	cmp	r2, r3
 801d290:	d106      	bne.n	801d2a0 <ip4_reass+0xdc>
 801d292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d294:	899a      	ldrh	r2, [r3, #12]
 801d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d298:	889b      	ldrh	r3, [r3, #4]
 801d29a:	b29b      	uxth	r3, r3
 801d29c:	429a      	cmp	r2, r3
 801d29e:	d006      	beq.n	801d2ae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	633b      	str	r3, [r7, #48]	; 0x30
 801d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d1e6      	bne.n	801d27a <ip4_reass+0xb6>
 801d2ac:	e000      	b.n	801d2b0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d2ae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	d109      	bne.n	801d2ca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d2b6:	8c3b      	ldrh	r3, [r7, #32]
 801d2b8:	4619      	mov	r1, r3
 801d2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d2bc:	f7ff fdb0 	bl	801ce20 <ip_reass_enqueue_new_datagram>
 801d2c0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d11c      	bne.n	801d302 <ip4_reass+0x13e>
      goto nullreturn;
 801d2c8:	e109      	b.n	801d4de <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2cc:	88db      	ldrh	r3, [r3, #6]
 801d2ce:	b29b      	uxth	r3, r3
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	f7f1 ff6b 	bl	800f1ac <lwip_htons>
 801d2d6:	4603      	mov	r3, r0
 801d2d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d110      	bne.n	801d302 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2e2:	89db      	ldrh	r3, [r3, #14]
 801d2e4:	4618      	mov	r0, r3
 801d2e6:	f7f1 ff61 	bl	800f1ac <lwip_htons>
 801d2ea:	4603      	mov	r3, r0
 801d2ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d006      	beq.n	801d302 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2f6:	3308      	adds	r3, #8
 801d2f8:	2214      	movs	r2, #20
 801d2fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d2fc:	4618      	mov	r0, r3
 801d2fe:	f000 fe79 	bl	801dff4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d304:	88db      	ldrh	r3, [r3, #6]
 801d306:	b29b      	uxth	r3, r3
 801d308:	f003 0320 	and.w	r3, r3, #32
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	bf0c      	ite	eq
 801d310:	2301      	moveq	r3, #1
 801d312:	2300      	movne	r3, #0
 801d314:	b2db      	uxtb	r3, r3
 801d316:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d318:	69fb      	ldr	r3, [r7, #28]
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d00e      	beq.n	801d33c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d31e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d322:	4413      	add	r3, r2
 801d324:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d326:	8b7a      	ldrh	r2, [r7, #26]
 801d328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d32a:	429a      	cmp	r2, r3
 801d32c:	f0c0 80a0 	bcc.w	801d470 <ip4_reass+0x2ac>
 801d330:	8b7b      	ldrh	r3, [r7, #26]
 801d332:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d336:	4293      	cmp	r3, r2
 801d338:	f200 809a 	bhi.w	801d470 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d33c:	69fa      	ldr	r2, [r7, #28]
 801d33e:	6879      	ldr	r1, [r7, #4]
 801d340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d342:	f7ff fdd5 	bl	801cef0 <ip_reass_chain_frag_into_datagram_and_validate>
 801d346:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d348:	697b      	ldr	r3, [r7, #20]
 801d34a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d34e:	f000 8091 	beq.w	801d474 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d352:	4b5b      	ldr	r3, [pc, #364]	; (801d4c0 <ip4_reass+0x2fc>)
 801d354:	881a      	ldrh	r2, [r3, #0]
 801d356:	8c3b      	ldrh	r3, [r7, #32]
 801d358:	4413      	add	r3, r2
 801d35a:	b29a      	uxth	r2, r3
 801d35c:	4b58      	ldr	r3, [pc, #352]	; (801d4c0 <ip4_reass+0x2fc>)
 801d35e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d360:	69fb      	ldr	r3, [r7, #28]
 801d362:	2b00      	cmp	r3, #0
 801d364:	d00d      	beq.n	801d382 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d366:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d36a:	4413      	add	r3, r2
 801d36c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d370:	8a7a      	ldrh	r2, [r7, #18]
 801d372:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d376:	7f9b      	ldrb	r3, [r3, #30]
 801d378:	f043 0301 	orr.w	r3, r3, #1
 801d37c:	b2da      	uxtb	r2, r3
 801d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d380:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d382:	697b      	ldr	r3, [r7, #20]
 801d384:	2b01      	cmp	r3, #1
 801d386:	d171      	bne.n	801d46c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d38a:	8b9b      	ldrh	r3, [r3, #28]
 801d38c:	3314      	adds	r3, #20
 801d38e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d392:	685b      	ldr	r3, [r3, #4]
 801d394:	685b      	ldr	r3, [r3, #4]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d39c:	685b      	ldr	r3, [r3, #4]
 801d39e:	685b      	ldr	r3, [r3, #4]
 801d3a0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3a4:	3308      	adds	r3, #8
 801d3a6:	2214      	movs	r2, #20
 801d3a8:	4619      	mov	r1, r3
 801d3aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d3ac:	f000 fe22 	bl	801dff4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d3b0:	8a3b      	ldrh	r3, [r7, #16]
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	f7f1 fefa 	bl	800f1ac <lwip_htons>
 801d3b8:	4603      	mov	r3, r0
 801d3ba:	461a      	mov	r2, r3
 801d3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3be:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3c2:	2200      	movs	r2, #0
 801d3c4:	719a      	strb	r2, [r3, #6]
 801d3c6:	2200      	movs	r2, #0
 801d3c8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3cc:	2200      	movs	r2, #0
 801d3ce:	729a      	strb	r2, [r3, #10]
 801d3d0:	2200      	movs	r2, #0
 801d3d2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3d6:	685b      	ldr	r3, [r3, #4]
 801d3d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d3da:	e00d      	b.n	801d3f8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3de:	685b      	ldr	r3, [r3, #4]
 801d3e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d3e2:	2114      	movs	r1, #20
 801d3e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d3e6:	f7f4 f9e9 	bl	80117bc <pbuf_remove_header>
      pbuf_cat(p, r);
 801d3ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d3ec:	6878      	ldr	r0, [r7, #4]
 801d3ee:	f7f4 fb6b 	bl	8011ac8 <pbuf_cat>
      r = iprh->next_pbuf;
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 801d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d1ee      	bne.n	801d3dc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d3fe:	4b31      	ldr	r3, [pc, #196]	; (801d4c4 <ip4_reass+0x300>)
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d404:	429a      	cmp	r2, r3
 801d406:	d102      	bne.n	801d40e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d408:	2300      	movs	r3, #0
 801d40a:	637b      	str	r3, [r7, #52]	; 0x34
 801d40c:	e010      	b.n	801d430 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d40e:	4b2d      	ldr	r3, [pc, #180]	; (801d4c4 <ip4_reass+0x300>)
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	637b      	str	r3, [r7, #52]	; 0x34
 801d414:	e007      	b.n	801d426 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d41c:	429a      	cmp	r2, r3
 801d41e:	d006      	beq.n	801d42e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	637b      	str	r3, [r7, #52]	; 0x34
 801d426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d1f4      	bne.n	801d416 <ip4_reass+0x252>
 801d42c:	e000      	b.n	801d430 <ip4_reass+0x26c>
          break;
 801d42e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d430:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d432:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d434:	f7ff fd2e 	bl	801ce94 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d438:	6878      	ldr	r0, [r7, #4]
 801d43a:	f7f4 fb05 	bl	8011a48 <pbuf_clen>
 801d43e:	4603      	mov	r3, r0
 801d440:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d442:	4b1f      	ldr	r3, [pc, #124]	; (801d4c0 <ip4_reass+0x2fc>)
 801d444:	881b      	ldrh	r3, [r3, #0]
 801d446:	8c3a      	ldrh	r2, [r7, #32]
 801d448:	429a      	cmp	r2, r3
 801d44a:	d906      	bls.n	801d45a <ip4_reass+0x296>
 801d44c:	4b1e      	ldr	r3, [pc, #120]	; (801d4c8 <ip4_reass+0x304>)
 801d44e:	f240 229b 	movw	r2, #667	; 0x29b
 801d452:	491e      	ldr	r1, [pc, #120]	; (801d4cc <ip4_reass+0x308>)
 801d454:	481e      	ldr	r0, [pc, #120]	; (801d4d0 <ip4_reass+0x30c>)
 801d456:	f001 fb11 	bl	801ea7c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d45a:	4b19      	ldr	r3, [pc, #100]	; (801d4c0 <ip4_reass+0x2fc>)
 801d45c:	881a      	ldrh	r2, [r3, #0]
 801d45e:	8c3b      	ldrh	r3, [r7, #32]
 801d460:	1ad3      	subs	r3, r2, r3
 801d462:	b29a      	uxth	r2, r3
 801d464:	4b16      	ldr	r3, [pc, #88]	; (801d4c0 <ip4_reass+0x2fc>)
 801d466:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	e03c      	b.n	801d4e6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d46c:	2300      	movs	r3, #0
 801d46e:	e03a      	b.n	801d4e6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801d470:	bf00      	nop
 801d472:	e000      	b.n	801d476 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801d474:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d106      	bne.n	801d48a <ip4_reass+0x2c6>
 801d47c:	4b12      	ldr	r3, [pc, #72]	; (801d4c8 <ip4_reass+0x304>)
 801d47e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d482:	4914      	ldr	r1, [pc, #80]	; (801d4d4 <ip4_reass+0x310>)
 801d484:	4812      	ldr	r0, [pc, #72]	; (801d4d0 <ip4_reass+0x30c>)
 801d486:	f001 faf9 	bl	801ea7c <iprintf>
  if (ipr->p == NULL) {
 801d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d48c:	685b      	ldr	r3, [r3, #4]
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d124      	bne.n	801d4dc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d492:	4b0c      	ldr	r3, [pc, #48]	; (801d4c4 <ip4_reass+0x300>)
 801d494:	681b      	ldr	r3, [r3, #0]
 801d496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d498:	429a      	cmp	r2, r3
 801d49a:	d006      	beq.n	801d4aa <ip4_reass+0x2e6>
 801d49c:	4b0a      	ldr	r3, [pc, #40]	; (801d4c8 <ip4_reass+0x304>)
 801d49e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d4a2:	490d      	ldr	r1, [pc, #52]	; (801d4d8 <ip4_reass+0x314>)
 801d4a4:	480a      	ldr	r0, [pc, #40]	; (801d4d0 <ip4_reass+0x30c>)
 801d4a6:	f001 fae9 	bl	801ea7c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d4aa:	2100      	movs	r1, #0
 801d4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d4ae:	f7ff fcf1 	bl	801ce94 <ip_reass_dequeue_datagram>
 801d4b2:	e014      	b.n	801d4de <ip4_reass+0x31a>
    goto nullreturn;
 801d4b4:	bf00      	nop
 801d4b6:	e012      	b.n	801d4de <ip4_reass+0x31a>
    goto nullreturn;
 801d4b8:	bf00      	nop
 801d4ba:	e010      	b.n	801d4de <ip4_reass+0x31a>
      goto nullreturn;
 801d4bc:	bf00      	nop
 801d4be:	e00e      	b.n	801d4de <ip4_reass+0x31a>
 801d4c0:	200144a4 	.word	0x200144a4
 801d4c4:	200144a0 	.word	0x200144a0
 801d4c8:	08026190 	.word	0x08026190
 801d4cc:	08026300 	.word	0x08026300
 801d4d0:	080261d8 	.word	0x080261d8
 801d4d4:	0802631c 	.word	0x0802631c
 801d4d8:	08026328 	.word	0x08026328
  }

nullreturn:
 801d4dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d4de:	6878      	ldr	r0, [r7, #4]
 801d4e0:	f7f4 fa24 	bl	801192c <pbuf_free>
  return NULL;
 801d4e4:	2300      	movs	r3, #0
}
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	3738      	adds	r7, #56	; 0x38
 801d4ea:	46bd      	mov	sp, r7
 801d4ec:	bd80      	pop	{r7, pc}
 801d4ee:	bf00      	nop

0801d4f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d4f4:	2005      	movs	r0, #5
 801d4f6:	f7f3 fae5 	bl	8010ac4 <memp_malloc>
 801d4fa:	4603      	mov	r3, r0
}
 801d4fc:	4618      	mov	r0, r3
 801d4fe:	bd80      	pop	{r7, pc}

0801d500 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d500:	b580      	push	{r7, lr}
 801d502:	b082      	sub	sp, #8
 801d504:	af00      	add	r7, sp, #0
 801d506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d106      	bne.n	801d51c <ip_frag_free_pbuf_custom_ref+0x1c>
 801d50e:	4b07      	ldr	r3, [pc, #28]	; (801d52c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d510:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d514:	4906      	ldr	r1, [pc, #24]	; (801d530 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d516:	4807      	ldr	r0, [pc, #28]	; (801d534 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d518:	f001 fab0 	bl	801ea7c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d51c:	6879      	ldr	r1, [r7, #4]
 801d51e:	2005      	movs	r0, #5
 801d520:	f7f3 fb22 	bl	8010b68 <memp_free>
}
 801d524:	bf00      	nop
 801d526:	3708      	adds	r7, #8
 801d528:	46bd      	mov	sp, r7
 801d52a:	bd80      	pop	{r7, pc}
 801d52c:	08026190 	.word	0x08026190
 801d530:	08026348 	.word	0x08026348
 801d534:	080261d8 	.word	0x080261d8

0801d538 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d538:	b580      	push	{r7, lr}
 801d53a:	b084      	sub	sp, #16
 801d53c:	af00      	add	r7, sp, #0
 801d53e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	2b00      	cmp	r3, #0
 801d548:	d106      	bne.n	801d558 <ipfrag_free_pbuf_custom+0x20>
 801d54a:	4b11      	ldr	r3, [pc, #68]	; (801d590 <ipfrag_free_pbuf_custom+0x58>)
 801d54c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d550:	4910      	ldr	r1, [pc, #64]	; (801d594 <ipfrag_free_pbuf_custom+0x5c>)
 801d552:	4811      	ldr	r0, [pc, #68]	; (801d598 <ipfrag_free_pbuf_custom+0x60>)
 801d554:	f001 fa92 	bl	801ea7c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d558:	68fa      	ldr	r2, [r7, #12]
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	429a      	cmp	r2, r3
 801d55e:	d006      	beq.n	801d56e <ipfrag_free_pbuf_custom+0x36>
 801d560:	4b0b      	ldr	r3, [pc, #44]	; (801d590 <ipfrag_free_pbuf_custom+0x58>)
 801d562:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d566:	490d      	ldr	r1, [pc, #52]	; (801d59c <ipfrag_free_pbuf_custom+0x64>)
 801d568:	480b      	ldr	r0, [pc, #44]	; (801d598 <ipfrag_free_pbuf_custom+0x60>)
 801d56a:	f001 fa87 	bl	801ea7c <iprintf>
  if (pcr->original != NULL) {
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	695b      	ldr	r3, [r3, #20]
 801d572:	2b00      	cmp	r3, #0
 801d574:	d004      	beq.n	801d580 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	695b      	ldr	r3, [r3, #20]
 801d57a:	4618      	mov	r0, r3
 801d57c:	f7f4 f9d6 	bl	801192c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d580:	68f8      	ldr	r0, [r7, #12]
 801d582:	f7ff ffbd 	bl	801d500 <ip_frag_free_pbuf_custom_ref>
}
 801d586:	bf00      	nop
 801d588:	3710      	adds	r7, #16
 801d58a:	46bd      	mov	sp, r7
 801d58c:	bd80      	pop	{r7, pc}
 801d58e:	bf00      	nop
 801d590:	08026190 	.word	0x08026190
 801d594:	08026354 	.word	0x08026354
 801d598:	080261d8 	.word	0x080261d8
 801d59c:	08026360 	.word	0x08026360

0801d5a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	b094      	sub	sp, #80	; 0x50
 801d5a4:	af02      	add	r7, sp, #8
 801d5a6:	60f8      	str	r0, [r7, #12]
 801d5a8:	60b9      	str	r1, [r7, #8]
 801d5aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d5b2:	68bb      	ldr	r3, [r7, #8]
 801d5b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d5b6:	3b14      	subs	r3, #20
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	da00      	bge.n	801d5be <ip4_frag+0x1e>
 801d5bc:	3307      	adds	r3, #7
 801d5be:	10db      	asrs	r3, r3, #3
 801d5c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d5c2:	2314      	movs	r3, #20
 801d5c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	685b      	ldr	r3, [r3, #4]
 801d5ca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5d2:	781b      	ldrb	r3, [r3, #0]
 801d5d4:	f003 030f 	and.w	r3, r3, #15
 801d5d8:	b2db      	uxtb	r3, r3
 801d5da:	009b      	lsls	r3, r3, #2
 801d5dc:	b2db      	uxtb	r3, r3
 801d5de:	2b14      	cmp	r3, #20
 801d5e0:	d002      	beq.n	801d5e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d5e2:	f06f 0305 	mvn.w	r3, #5
 801d5e6:	e110      	b.n	801d80a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	895b      	ldrh	r3, [r3, #10]
 801d5ec:	2b13      	cmp	r3, #19
 801d5ee:	d809      	bhi.n	801d604 <ip4_frag+0x64>
 801d5f0:	4b88      	ldr	r3, [pc, #544]	; (801d814 <ip4_frag+0x274>)
 801d5f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d5f6:	4988      	ldr	r1, [pc, #544]	; (801d818 <ip4_frag+0x278>)
 801d5f8:	4888      	ldr	r0, [pc, #544]	; (801d81c <ip4_frag+0x27c>)
 801d5fa:	f001 fa3f 	bl	801ea7c <iprintf>
 801d5fe:	f06f 0305 	mvn.w	r3, #5
 801d602:	e102      	b.n	801d80a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d606:	88db      	ldrh	r3, [r3, #6]
 801d608:	b29b      	uxth	r3, r3
 801d60a:	4618      	mov	r0, r3
 801d60c:	f7f1 fdce 	bl	800f1ac <lwip_htons>
 801d610:	4603      	mov	r3, r0
 801d612:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d614:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d616:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d61a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d61e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d624:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	891b      	ldrh	r3, [r3, #8]
 801d62a:	3b14      	subs	r3, #20
 801d62c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d630:	e0e1      	b.n	801d7f6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d632:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d634:	00db      	lsls	r3, r3, #3
 801d636:	b29b      	uxth	r3, r3
 801d638:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d63c:	4293      	cmp	r3, r2
 801d63e:	bf28      	it	cs
 801d640:	4613      	movcs	r3, r2
 801d642:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d644:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d648:	2114      	movs	r1, #20
 801d64a:	200e      	movs	r0, #14
 801d64c:	f7f3 fe58 	bl	8011300 <pbuf_alloc>
 801d650:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d654:	2b00      	cmp	r3, #0
 801d656:	f000 80d5 	beq.w	801d804 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d65c:	895b      	ldrh	r3, [r3, #10]
 801d65e:	2b13      	cmp	r3, #19
 801d660:	d806      	bhi.n	801d670 <ip4_frag+0xd0>
 801d662:	4b6c      	ldr	r3, [pc, #432]	; (801d814 <ip4_frag+0x274>)
 801d664:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d668:	496d      	ldr	r1, [pc, #436]	; (801d820 <ip4_frag+0x280>)
 801d66a:	486c      	ldr	r0, [pc, #432]	; (801d81c <ip4_frag+0x27c>)
 801d66c:	f001 fa06 	bl	801ea7c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d672:	685b      	ldr	r3, [r3, #4]
 801d674:	2214      	movs	r2, #20
 801d676:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d678:	4618      	mov	r0, r3
 801d67a:	f000 fcbb 	bl	801dff4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d680:	685b      	ldr	r3, [r3, #4]
 801d682:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d684:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d686:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d68a:	e064      	b.n	801d756 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	895a      	ldrh	r2, [r3, #10]
 801d690:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d692:	1ad3      	subs	r3, r2, r3
 801d694:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	895b      	ldrh	r3, [r3, #10]
 801d69a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d69c:	429a      	cmp	r2, r3
 801d69e:	d906      	bls.n	801d6ae <ip4_frag+0x10e>
 801d6a0:	4b5c      	ldr	r3, [pc, #368]	; (801d814 <ip4_frag+0x274>)
 801d6a2:	f240 322d 	movw	r2, #813	; 0x32d
 801d6a6:	495f      	ldr	r1, [pc, #380]	; (801d824 <ip4_frag+0x284>)
 801d6a8:	485c      	ldr	r0, [pc, #368]	; (801d81c <ip4_frag+0x27c>)
 801d6aa:	f001 f9e7 	bl	801ea7c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d6ae:	8bfa      	ldrh	r2, [r7, #30]
 801d6b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d6b4:	4293      	cmp	r3, r2
 801d6b6:	bf28      	it	cs
 801d6b8:	4613      	movcs	r3, r2
 801d6ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d6be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d105      	bne.n	801d6d2 <ip4_frag+0x132>
        poff = 0;
 801d6c6:	2300      	movs	r3, #0
 801d6c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d6ca:	68fb      	ldr	r3, [r7, #12]
 801d6cc:	681b      	ldr	r3, [r3, #0]
 801d6ce:	60fb      	str	r3, [r7, #12]
        continue;
 801d6d0:	e041      	b.n	801d756 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d6d2:	f7ff ff0d 	bl	801d4f0 <ip_frag_alloc_pbuf_custom_ref>
 801d6d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d6d8:	69bb      	ldr	r3, [r7, #24]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d103      	bne.n	801d6e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d6de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d6e0:	f7f4 f924 	bl	801192c <pbuf_free>
        goto memerr;
 801d6e4:	e08f      	b.n	801d806 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d6e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d6ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d6ee:	4413      	add	r3, r2
 801d6f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801d6f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801d6f8:	9201      	str	r2, [sp, #4]
 801d6fa:	9300      	str	r3, [sp, #0]
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	2241      	movs	r2, #65	; 0x41
 801d700:	2000      	movs	r0, #0
 801d702:	f7f3 ff27 	bl	8011554 <pbuf_alloced_custom>
 801d706:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d708:	697b      	ldr	r3, [r7, #20]
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d106      	bne.n	801d71c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d70e:	69b8      	ldr	r0, [r7, #24]
 801d710:	f7ff fef6 	bl	801d500 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d716:	f7f4 f909 	bl	801192c <pbuf_free>
        goto memerr;
 801d71a:	e074      	b.n	801d806 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d71c:	68f8      	ldr	r0, [r7, #12]
 801d71e:	f7f4 f9ab 	bl	8011a78 <pbuf_ref>
      pcr->original = p;
 801d722:	69bb      	ldr	r3, [r7, #24]
 801d724:	68fa      	ldr	r2, [r7, #12]
 801d726:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d728:	69bb      	ldr	r3, [r7, #24]
 801d72a:	4a3f      	ldr	r2, [pc, #252]	; (801d828 <ip4_frag+0x288>)
 801d72c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d72e:	6979      	ldr	r1, [r7, #20]
 801d730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d732:	f7f4 f9c9 	bl	8011ac8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d736:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801d73a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d73e:	1ad3      	subs	r3, r2, r3
 801d740:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801d744:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d004      	beq.n	801d756 <ip4_frag+0x1b6>
        poff = 0;
 801d74c:	2300      	movs	r3, #0
 801d74e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d756:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d196      	bne.n	801d68c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d75e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d760:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d764:	4413      	add	r3, r2
 801d766:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d768:	68bb      	ldr	r3, [r7, #8]
 801d76a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d76c:	f1a3 0213 	sub.w	r2, r3, #19
 801d770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d774:	429a      	cmp	r2, r3
 801d776:	bfcc      	ite	gt
 801d778:	2301      	movgt	r3, #1
 801d77a:	2300      	movle	r3, #0
 801d77c:	b2db      	uxtb	r3, r3
 801d77e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d780:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d788:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801d78a:	6a3b      	ldr	r3, [r7, #32]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d002      	beq.n	801d796 <ip4_frag+0x1f6>
 801d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d792:	2b00      	cmp	r3, #0
 801d794:	d003      	beq.n	801d79e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d796:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d798:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d79c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d79e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d7a0:	4618      	mov	r0, r3
 801d7a2:	f7f1 fd03 	bl	800f1ac <lwip_htons>
 801d7a6:	4603      	mov	r3, r0
 801d7a8:	461a      	mov	r2, r3
 801d7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7ac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d7ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d7b0:	3314      	adds	r3, #20
 801d7b2:	b29b      	uxth	r3, r3
 801d7b4:	4618      	mov	r0, r3
 801d7b6:	f7f1 fcf9 	bl	800f1ac <lwip_htons>
 801d7ba:	4603      	mov	r3, r0
 801d7bc:	461a      	mov	r2, r3
 801d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7c0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7c4:	2200      	movs	r2, #0
 801d7c6:	729a      	strb	r2, [r3, #10]
 801d7c8:	2200      	movs	r2, #0
 801d7ca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d7cc:	68bb      	ldr	r3, [r7, #8]
 801d7ce:	695b      	ldr	r3, [r3, #20]
 801d7d0:	687a      	ldr	r2, [r7, #4]
 801d7d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d7d4:	68b8      	ldr	r0, [r7, #8]
 801d7d6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d7d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d7da:	f7f4 f8a7 	bl	801192c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d7de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d7e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d7e4:	1ad3      	subs	r3, r2, r3
 801d7e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801d7ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d7ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d7f0:	4413      	add	r3, r2
 801d7f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801d7f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	f47f af19 	bne.w	801d632 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d800:	2300      	movs	r3, #0
 801d802:	e002      	b.n	801d80a <ip4_frag+0x26a>
      goto memerr;
 801d804:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801d80a:	4618      	mov	r0, r3
 801d80c:	3748      	adds	r7, #72	; 0x48
 801d80e:	46bd      	mov	sp, r7
 801d810:	bd80      	pop	{r7, pc}
 801d812:	bf00      	nop
 801d814:	08026190 	.word	0x08026190
 801d818:	0802636c 	.word	0x0802636c
 801d81c:	080261d8 	.word	0x080261d8
 801d820:	08026388 	.word	0x08026388
 801d824:	080263a8 	.word	0x080263a8
 801d828:	0801d539 	.word	0x0801d539

0801d82c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d82c:	b580      	push	{r7, lr}
 801d82e:	b086      	sub	sp, #24
 801d830:	af00      	add	r7, sp, #0
 801d832:	6078      	str	r0, [r7, #4]
 801d834:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d836:	230e      	movs	r3, #14
 801d838:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	895b      	ldrh	r3, [r3, #10]
 801d83e:	2b0e      	cmp	r3, #14
 801d840:	d96e      	bls.n	801d920 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	7bdb      	ldrb	r3, [r3, #15]
 801d846:	2b00      	cmp	r3, #0
 801d848:	d106      	bne.n	801d858 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d84a:	683b      	ldr	r3, [r7, #0]
 801d84c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801d850:	3301      	adds	r3, #1
 801d852:	b2da      	uxtb	r2, r3
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	685b      	ldr	r3, [r3, #4]
 801d85c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d85e:	693b      	ldr	r3, [r7, #16]
 801d860:	7b1a      	ldrb	r2, [r3, #12]
 801d862:	7b5b      	ldrb	r3, [r3, #13]
 801d864:	021b      	lsls	r3, r3, #8
 801d866:	4313      	orrs	r3, r2
 801d868:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d86a:	693b      	ldr	r3, [r7, #16]
 801d86c:	781b      	ldrb	r3, [r3, #0]
 801d86e:	f003 0301 	and.w	r3, r3, #1
 801d872:	2b00      	cmp	r3, #0
 801d874:	d023      	beq.n	801d8be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d876:	693b      	ldr	r3, [r7, #16]
 801d878:	781b      	ldrb	r3, [r3, #0]
 801d87a:	2b01      	cmp	r3, #1
 801d87c:	d10f      	bne.n	801d89e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d87e:	693b      	ldr	r3, [r7, #16]
 801d880:	785b      	ldrb	r3, [r3, #1]
 801d882:	2b00      	cmp	r3, #0
 801d884:	d11b      	bne.n	801d8be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d886:	693b      	ldr	r3, [r7, #16]
 801d888:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d88a:	2b5e      	cmp	r3, #94	; 0x5e
 801d88c:	d117      	bne.n	801d8be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	7b5b      	ldrb	r3, [r3, #13]
 801d892:	f043 0310 	orr.w	r3, r3, #16
 801d896:	b2da      	uxtb	r2, r3
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	735a      	strb	r2, [r3, #13]
 801d89c:	e00f      	b.n	801d8be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d89e:	693b      	ldr	r3, [r7, #16]
 801d8a0:	2206      	movs	r2, #6
 801d8a2:	4928      	ldr	r1, [pc, #160]	; (801d944 <ethernet_input+0x118>)
 801d8a4:	4618      	mov	r0, r3
 801d8a6:	f000 fb97 	bl	801dfd8 <memcmp>
 801d8aa:	4603      	mov	r3, r0
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d106      	bne.n	801d8be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	7b5b      	ldrb	r3, [r3, #13]
 801d8b4:	f043 0308 	orr.w	r3, r3, #8
 801d8b8:	b2da      	uxtb	r2, r3
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d8be:	89fb      	ldrh	r3, [r7, #14]
 801d8c0:	2b08      	cmp	r3, #8
 801d8c2:	d003      	beq.n	801d8cc <ethernet_input+0xa0>
 801d8c4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801d8c8:	d014      	beq.n	801d8f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d8ca:	e032      	b.n	801d932 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d8cc:	683b      	ldr	r3, [r7, #0]
 801d8ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d8d2:	f003 0308 	and.w	r3, r3, #8
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d024      	beq.n	801d924 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d8da:	8afb      	ldrh	r3, [r7, #22]
 801d8dc:	4619      	mov	r1, r3
 801d8de:	6878      	ldr	r0, [r7, #4]
 801d8e0:	f7f3 ff6c 	bl	80117bc <pbuf_remove_header>
 801d8e4:	4603      	mov	r3, r0
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d11e      	bne.n	801d928 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d8ea:	6839      	ldr	r1, [r7, #0]
 801d8ec:	6878      	ldr	r0, [r7, #4]
 801d8ee:	f7fe fddf 	bl	801c4b0 <ip4_input>
      break;
 801d8f2:	e013      	b.n	801d91c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d8f4:	683b      	ldr	r3, [r7, #0]
 801d8f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d8fa:	f003 0308 	and.w	r3, r3, #8
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d014      	beq.n	801d92c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d902:	8afb      	ldrh	r3, [r7, #22]
 801d904:	4619      	mov	r1, r3
 801d906:	6878      	ldr	r0, [r7, #4]
 801d908:	f7f3 ff58 	bl	80117bc <pbuf_remove_header>
 801d90c:	4603      	mov	r3, r0
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d10e      	bne.n	801d930 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d912:	6839      	ldr	r1, [r7, #0]
 801d914:	6878      	ldr	r0, [r7, #4]
 801d916:	f7fd ff75 	bl	801b804 <etharp_input>
      break;
 801d91a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d91c:	2300      	movs	r3, #0
 801d91e:	e00c      	b.n	801d93a <ethernet_input+0x10e>
    goto free_and_return;
 801d920:	bf00      	nop
 801d922:	e006      	b.n	801d932 <ethernet_input+0x106>
        goto free_and_return;
 801d924:	bf00      	nop
 801d926:	e004      	b.n	801d932 <ethernet_input+0x106>
        goto free_and_return;
 801d928:	bf00      	nop
 801d92a:	e002      	b.n	801d932 <ethernet_input+0x106>
        goto free_and_return;
 801d92c:	bf00      	nop
 801d92e:	e000      	b.n	801d932 <ethernet_input+0x106>
        goto free_and_return;
 801d930:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d932:	6878      	ldr	r0, [r7, #4]
 801d934:	f7f3 fffa 	bl	801192c <pbuf_free>
  return ERR_OK;
 801d938:	2300      	movs	r3, #0
}
 801d93a:	4618      	mov	r0, r3
 801d93c:	3718      	adds	r7, #24
 801d93e:	46bd      	mov	sp, r7
 801d940:	bd80      	pop	{r7, pc}
 801d942:	bf00      	nop
 801d944:	080266c8 	.word	0x080266c8

0801d948 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d948:	b580      	push	{r7, lr}
 801d94a:	b086      	sub	sp, #24
 801d94c:	af00      	add	r7, sp, #0
 801d94e:	60f8      	str	r0, [r7, #12]
 801d950:	60b9      	str	r1, [r7, #8]
 801d952:	607a      	str	r2, [r7, #4]
 801d954:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d956:	8c3b      	ldrh	r3, [r7, #32]
 801d958:	4618      	mov	r0, r3
 801d95a:	f7f1 fc27 	bl	800f1ac <lwip_htons>
 801d95e:	4603      	mov	r3, r0
 801d960:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d962:	210e      	movs	r1, #14
 801d964:	68b8      	ldr	r0, [r7, #8]
 801d966:	f7f3 ff19 	bl	801179c <pbuf_add_header>
 801d96a:	4603      	mov	r3, r0
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d125      	bne.n	801d9bc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d970:	68bb      	ldr	r3, [r7, #8]
 801d972:	685b      	ldr	r3, [r3, #4]
 801d974:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d976:	693b      	ldr	r3, [r7, #16]
 801d978:	8afa      	ldrh	r2, [r7, #22]
 801d97a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d97c:	693b      	ldr	r3, [r7, #16]
 801d97e:	2206      	movs	r2, #6
 801d980:	6839      	ldr	r1, [r7, #0]
 801d982:	4618      	mov	r0, r3
 801d984:	f000 fb36 	bl	801dff4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d988:	693b      	ldr	r3, [r7, #16]
 801d98a:	3306      	adds	r3, #6
 801d98c:	2206      	movs	r2, #6
 801d98e:	6879      	ldr	r1, [r7, #4]
 801d990:	4618      	mov	r0, r3
 801d992:	f000 fb2f 	bl	801dff4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d99c:	2b06      	cmp	r3, #6
 801d99e:	d006      	beq.n	801d9ae <ethernet_output+0x66>
 801d9a0:	4b0a      	ldr	r3, [pc, #40]	; (801d9cc <ethernet_output+0x84>)
 801d9a2:	f44f 7299 	mov.w	r2, #306	; 0x132
 801d9a6:	490a      	ldr	r1, [pc, #40]	; (801d9d0 <ethernet_output+0x88>)
 801d9a8:	480a      	ldr	r0, [pc, #40]	; (801d9d4 <ethernet_output+0x8c>)
 801d9aa:	f001 f867 	bl	801ea7c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	699b      	ldr	r3, [r3, #24]
 801d9b2:	68b9      	ldr	r1, [r7, #8]
 801d9b4:	68f8      	ldr	r0, [r7, #12]
 801d9b6:	4798      	blx	r3
 801d9b8:	4603      	mov	r3, r0
 801d9ba:	e002      	b.n	801d9c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d9bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d9be:	f06f 0301 	mvn.w	r3, #1
}
 801d9c2:	4618      	mov	r0, r3
 801d9c4:	3718      	adds	r7, #24
 801d9c6:	46bd      	mov	sp, r7
 801d9c8:	bd80      	pop	{r7, pc}
 801d9ca:	bf00      	nop
 801d9cc:	080263b8 	.word	0x080263b8
 801d9d0:	080263f0 	.word	0x080263f0
 801d9d4:	08026424 	.word	0x08026424

0801d9d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b084      	sub	sp, #16
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	6078      	str	r0, [r7, #4]
 801d9e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801d9e2:	683b      	ldr	r3, [r7, #0]
 801d9e4:	60bb      	str	r3, [r7, #8]
 801d9e6:	2304      	movs	r3, #4
 801d9e8:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801d9ea:	f107 0308 	add.w	r3, r7, #8
 801d9ee:	2100      	movs	r1, #0
 801d9f0:	4618      	mov	r0, r3
 801d9f2:	f7e9 ffa0 	bl	8007936 <osMessageCreate>
 801d9f6:	4602      	mov	r2, r0
 801d9f8:	687b      	ldr	r3, [r7, #4]
 801d9fa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	2b00      	cmp	r3, #0
 801da02:	d102      	bne.n	801da0a <sys_mbox_new+0x32>
    return ERR_MEM;
 801da04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801da08:	e000      	b.n	801da0c <sys_mbox_new+0x34>

  return ERR_OK;
 801da0a:	2300      	movs	r3, #0
}
 801da0c:	4618      	mov	r0, r3
 801da0e:	3710      	adds	r7, #16
 801da10:	46bd      	mov	sp, r7
 801da12:	bd80      	pop	{r7, pc}

0801da14 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801da14:	b580      	push	{r7, lr}
 801da16:	b082      	sub	sp, #8
 801da18:	af00      	add	r7, sp, #0
 801da1a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	681b      	ldr	r3, [r3, #0]
 801da20:	4618      	mov	r0, r3
 801da22:	f7ea f84f 	bl	8007ac4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	4618      	mov	r0, r3
 801da2c:	f7ea f860 	bl	8007af0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801da30:	bf00      	nop
 801da32:	3708      	adds	r7, #8
 801da34:	46bd      	mov	sp, r7
 801da36:	bd80      	pop	{r7, pc}

0801da38 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801da38:	b580      	push	{r7, lr}
 801da3a:	b084      	sub	sp, #16
 801da3c:	af00      	add	r7, sp, #0
 801da3e:	6078      	str	r0, [r7, #4]
 801da40:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	6839      	ldr	r1, [r7, #0]
 801da48:	2200      	movs	r2, #0
 801da4a:	4618      	mov	r0, r3
 801da4c:	f7e9 ff86 	bl	800795c <osMessagePut>
 801da50:	4603      	mov	r3, r0
 801da52:	2b00      	cmp	r3, #0
 801da54:	d102      	bne.n	801da5c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801da56:	2300      	movs	r3, #0
 801da58:	73fb      	strb	r3, [r7, #15]
 801da5a:	e001      	b.n	801da60 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801da5c:	23ff      	movs	r3, #255	; 0xff
 801da5e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801da60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801da64:	4618      	mov	r0, r3
 801da66:	3710      	adds	r7, #16
 801da68:	46bd      	mov	sp, r7
 801da6a:	bd80      	pop	{r7, pc}

0801da6c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801da6c:	b580      	push	{r7, lr}
 801da6e:	b08c      	sub	sp, #48	; 0x30
 801da70:	af00      	add	r7, sp, #0
 801da72:	61f8      	str	r0, [r7, #28]
 801da74:	61b9      	str	r1, [r7, #24]
 801da76:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801da78:	f7e9 fd2d 	bl	80074d6 <osKernelSysTick>
 801da7c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801da7e:	697b      	ldr	r3, [r7, #20]
 801da80:	2b00      	cmp	r3, #0
 801da82:	d017      	beq.n	801dab4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801da84:	69fb      	ldr	r3, [r7, #28]
 801da86:	6819      	ldr	r1, [r3, #0]
 801da88:	f107 0320 	add.w	r3, r7, #32
 801da8c:	697a      	ldr	r2, [r7, #20]
 801da8e:	4618      	mov	r0, r3
 801da90:	f7e9 ffa4 	bl	80079dc <osMessageGet>

    if(event.status == osEventMessage)
 801da94:	6a3b      	ldr	r3, [r7, #32]
 801da96:	2b10      	cmp	r3, #16
 801da98:	d109      	bne.n	801daae <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801da9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da9c:	461a      	mov	r2, r3
 801da9e:	69bb      	ldr	r3, [r7, #24]
 801daa0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801daa2:	f7e9 fd18 	bl	80074d6 <osKernelSysTick>
 801daa6:	4602      	mov	r2, r0
 801daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801daaa:	1ad3      	subs	r3, r2, r3
 801daac:	e019      	b.n	801dae2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801daae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dab2:	e016      	b.n	801dae2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801dab4:	69fb      	ldr	r3, [r7, #28]
 801dab6:	6819      	ldr	r1, [r3, #0]
 801dab8:	463b      	mov	r3, r7
 801daba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dabe:	4618      	mov	r0, r3
 801dac0:	f7e9 ff8c 	bl	80079dc <osMessageGet>
 801dac4:	f107 0320 	add.w	r3, r7, #32
 801dac8:	463a      	mov	r2, r7
 801daca:	ca07      	ldmia	r2, {r0, r1, r2}
 801dacc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dad2:	461a      	mov	r2, r3
 801dad4:	69bb      	ldr	r3, [r7, #24]
 801dad6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801dad8:	f7e9 fcfd 	bl	80074d6 <osKernelSysTick>
 801dadc:	4602      	mov	r2, r0
 801dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dae0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801dae2:	4618      	mov	r0, r3
 801dae4:	3730      	adds	r7, #48	; 0x30
 801dae6:	46bd      	mov	sp, r7
 801dae8:	bd80      	pop	{r7, pc}

0801daea <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801daea:	b580      	push	{r7, lr}
 801daec:	b086      	sub	sp, #24
 801daee:	af00      	add	r7, sp, #0
 801daf0:	6078      	str	r0, [r7, #4]
 801daf2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	6819      	ldr	r1, [r3, #0]
 801daf8:	f107 030c 	add.w	r3, r7, #12
 801dafc:	2200      	movs	r2, #0
 801dafe:	4618      	mov	r0, r3
 801db00:	f7e9 ff6c 	bl	80079dc <osMessageGet>

  if(event.status == osEventMessage)
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	2b10      	cmp	r3, #16
 801db08:	d105      	bne.n	801db16 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801db0a:	693b      	ldr	r3, [r7, #16]
 801db0c:	461a      	mov	r2, r3
 801db0e:	683b      	ldr	r3, [r7, #0]
 801db10:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801db12:	2300      	movs	r3, #0
 801db14:	e001      	b.n	801db1a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801db16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801db1a:	4618      	mov	r0, r3
 801db1c:	3718      	adds	r7, #24
 801db1e:	46bd      	mov	sp, r7
 801db20:	bd80      	pop	{r7, pc}

0801db22 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801db22:	b480      	push	{r7}
 801db24:	b083      	sub	sp, #12
 801db26:	af00      	add	r7, sp, #0
 801db28:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	2b00      	cmp	r3, #0
 801db30:	d101      	bne.n	801db36 <sys_mbox_valid+0x14>
    return 0;
 801db32:	2300      	movs	r3, #0
 801db34:	e000      	b.n	801db38 <sys_mbox_valid+0x16>
  else
    return 1;
 801db36:	2301      	movs	r3, #1
}
 801db38:	4618      	mov	r0, r3
 801db3a:	370c      	adds	r7, #12
 801db3c:	46bd      	mov	sp, r7
 801db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db42:	4770      	bx	lr

0801db44 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801db44:	b480      	push	{r7}
 801db46:	b083      	sub	sp, #12
 801db48:	af00      	add	r7, sp, #0
 801db4a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	2200      	movs	r2, #0
 801db50:	601a      	str	r2, [r3, #0]
}
 801db52:	bf00      	nop
 801db54:	370c      	adds	r7, #12
 801db56:	46bd      	mov	sp, r7
 801db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db5c:	4770      	bx	lr

0801db5e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801db5e:	b580      	push	{r7, lr}
 801db60:	b084      	sub	sp, #16
 801db62:	af00      	add	r7, sp, #0
 801db64:	6078      	str	r0, [r7, #4]
 801db66:	460b      	mov	r3, r1
 801db68:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801db6a:	2300      	movs	r3, #0
 801db6c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801db6e:	f107 030c 	add.w	r3, r7, #12
 801db72:	2101      	movs	r1, #1
 801db74:	4618      	mov	r0, r3
 801db76:	f7e9 fe29 	bl	80077cc <osSemaphoreCreate>
 801db7a:	4602      	mov	r2, r0
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	2b00      	cmp	r3, #0
 801db86:	d102      	bne.n	801db8e <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801db88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801db8c:	e009      	b.n	801dba2 <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 801db8e:	78fb      	ldrb	r3, [r7, #3]
 801db90:	2b00      	cmp	r3, #0
 801db92:	d105      	bne.n	801dba0 <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	2100      	movs	r1, #0
 801db9a:	4618      	mov	r0, r3
 801db9c:	f7e9 fe34 	bl	8007808 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801dba0:	2300      	movs	r3, #0
}
 801dba2:	4618      	mov	r0, r3
 801dba4:	3710      	adds	r7, #16
 801dba6:	46bd      	mov	sp, r7
 801dba8:	bd80      	pop	{r7, pc}

0801dbaa <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801dbaa:	b580      	push	{r7, lr}
 801dbac:	b084      	sub	sp, #16
 801dbae:	af00      	add	r7, sp, #0
 801dbb0:	6078      	str	r0, [r7, #4]
 801dbb2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801dbb4:	f7e9 fc8f 	bl	80074d6 <osKernelSysTick>
 801dbb8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801dbba:	683b      	ldr	r3, [r7, #0]
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	d011      	beq.n	801dbe4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	6839      	ldr	r1, [r7, #0]
 801dbc6:	4618      	mov	r0, r3
 801dbc8:	f7e9 fe1e 	bl	8007808 <osSemaphoreWait>
 801dbcc:	4603      	mov	r3, r0
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d105      	bne.n	801dbde <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801dbd2:	f7e9 fc80 	bl	80074d6 <osKernelSysTick>
 801dbd6:	4602      	mov	r2, r0
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	1ad3      	subs	r3, r2, r3
 801dbdc:	e012      	b.n	801dc04 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801dbde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dbe2:	e00f      	b.n	801dc04 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801dbe4:	bf00      	nop
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801dbee:	4618      	mov	r0, r3
 801dbf0:	f7e9 fe0a 	bl	8007808 <osSemaphoreWait>
 801dbf4:	4603      	mov	r3, r0
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d1f5      	bne.n	801dbe6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801dbfa:	f7e9 fc6c 	bl	80074d6 <osKernelSysTick>
 801dbfe:	4602      	mov	r2, r0
 801dc00:	68fb      	ldr	r3, [r7, #12]
 801dc02:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801dc04:	4618      	mov	r0, r3
 801dc06:	3710      	adds	r7, #16
 801dc08:	46bd      	mov	sp, r7
 801dc0a:	bd80      	pop	{r7, pc}

0801dc0c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801dc0c:	b580      	push	{r7, lr}
 801dc0e:	b082      	sub	sp, #8
 801dc10:	af00      	add	r7, sp, #0
 801dc12:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	4618      	mov	r0, r3
 801dc1a:	f7e9 fe43 	bl	80078a4 <osSemaphoreRelease>
}
 801dc1e:	bf00      	nop
 801dc20:	3708      	adds	r7, #8
 801dc22:	46bd      	mov	sp, r7
 801dc24:	bd80      	pop	{r7, pc}

0801dc26 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801dc26:	b580      	push	{r7, lr}
 801dc28:	b082      	sub	sp, #8
 801dc2a:	af00      	add	r7, sp, #0
 801dc2c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	4618      	mov	r0, r3
 801dc34:	f7e9 fe6c 	bl	8007910 <osSemaphoreDelete>
}
 801dc38:	bf00      	nop
 801dc3a:	3708      	adds	r7, #8
 801dc3c:	46bd      	mov	sp, r7
 801dc3e:	bd80      	pop	{r7, pc}

0801dc40 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801dc40:	b480      	push	{r7}
 801dc42:	b083      	sub	sp, #12
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d101      	bne.n	801dc54 <sys_sem_valid+0x14>
    return 0;
 801dc50:	2300      	movs	r3, #0
 801dc52:	e000      	b.n	801dc56 <sys_sem_valid+0x16>
  else
    return 1;
 801dc54:	2301      	movs	r3, #1
}
 801dc56:	4618      	mov	r0, r3
 801dc58:	370c      	adds	r7, #12
 801dc5a:	46bd      	mov	sp, r7
 801dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc60:	4770      	bx	lr

0801dc62 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801dc62:	b480      	push	{r7}
 801dc64:	b083      	sub	sp, #12
 801dc66:	af00      	add	r7, sp, #0
 801dc68:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	2200      	movs	r2, #0
 801dc6e:	601a      	str	r2, [r3, #0]
}
 801dc70:	bf00      	nop
 801dc72:	370c      	adds	r7, #12
 801dc74:	46bd      	mov	sp, r7
 801dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc7a:	4770      	bx	lr

0801dc7c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801dc7c:	b580      	push	{r7, lr}
 801dc7e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801dc80:	4803      	ldr	r0, [pc, #12]	; (801dc90 <sys_init+0x14>)
 801dc82:	f7e9 fd13 	bl	80076ac <osMutexCreate>
 801dc86:	4603      	mov	r3, r0
 801dc88:	4a02      	ldr	r2, [pc, #8]	; (801dc94 <sys_init+0x18>)
 801dc8a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801dc8c:	bf00      	nop
 801dc8e:	bd80      	pop	{r7, pc}
 801dc90:	080266d8 	.word	0x080266d8
 801dc94:	2001b11c 	.word	0x2001b11c

0801dc98 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801dc98:	b580      	push	{r7, lr}
 801dc9a:	b084      	sub	sp, #16
 801dc9c:	af00      	add	r7, sp, #0
 801dc9e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801dca0:	2300      	movs	r3, #0
 801dca2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801dca4:	f107 030c 	add.w	r3, r7, #12
 801dca8:	4618      	mov	r0, r3
 801dcaa:	f7e9 fcff 	bl	80076ac <osMutexCreate>
 801dcae:	4602      	mov	r2, r0
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d102      	bne.n	801dcc2 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dcbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dcc0:	e000      	b.n	801dcc4 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801dcc2:	2300      	movs	r3, #0
}
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	3710      	adds	r7, #16
 801dcc8:	46bd      	mov	sp, r7
 801dcca:	bd80      	pop	{r7, pc}

0801dccc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801dccc:	b580      	push	{r7, lr}
 801dcce:	b082      	sub	sp, #8
 801dcd0:	af00      	add	r7, sp, #0
 801dcd2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801dcdc:	4618      	mov	r0, r3
 801dcde:	f7e9 fcf1 	bl	80076c4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801dce2:	bf00      	nop
 801dce4:	3708      	adds	r7, #8
 801dce6:	46bd      	mov	sp, r7
 801dce8:	bd80      	pop	{r7, pc}

0801dcea <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801dcea:	b580      	push	{r7, lr}
 801dcec:	b082      	sub	sp, #8
 801dcee:	af00      	add	r7, sp, #0
 801dcf0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	f7e9 fd32 	bl	8007760 <osMutexRelease>
}
 801dcfc:	bf00      	nop
 801dcfe:	3708      	adds	r7, #8
 801dd00:	46bd      	mov	sp, r7
 801dd02:	bd80      	pop	{r7, pc}

0801dd04 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801dd04:	b580      	push	{r7, lr}
 801dd06:	b08a      	sub	sp, #40	; 0x28
 801dd08:	af00      	add	r7, sp, #0
 801dd0a:	60f8      	str	r0, [r7, #12]
 801dd0c:	60b9      	str	r1, [r7, #8]
 801dd0e:	607a      	str	r2, [r7, #4]
 801dd10:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	617b      	str	r3, [r7, #20]
 801dd16:	68bb      	ldr	r3, [r7, #8]
 801dd18:	61bb      	str	r3, [r7, #24]
 801dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd1c:	b21b      	sxth	r3, r3
 801dd1e:	83bb      	strh	r3, [r7, #28]
 801dd20:	2300      	movs	r3, #0
 801dd22:	623b      	str	r3, [r7, #32]
 801dd24:	683b      	ldr	r3, [r7, #0]
 801dd26:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801dd28:	f107 0314 	add.w	r3, r7, #20
 801dd2c:	6879      	ldr	r1, [r7, #4]
 801dd2e:	4618      	mov	r0, r3
 801dd30:	f7e9 fbe1 	bl	80074f6 <osThreadCreate>
 801dd34:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801dd36:	4618      	mov	r0, r3
 801dd38:	3728      	adds	r7, #40	; 0x28
 801dd3a:	46bd      	mov	sp, r7
 801dd3c:	bd80      	pop	{r7, pc}
	...

0801dd40 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801dd40:	b580      	push	{r7, lr}
 801dd42:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801dd44:	4b04      	ldr	r3, [pc, #16]	; (801dd58 <sys_arch_protect+0x18>)
 801dd46:	681b      	ldr	r3, [r3, #0]
 801dd48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801dd4c:	4618      	mov	r0, r3
 801dd4e:	f7e9 fcb9 	bl	80076c4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801dd52:	2301      	movs	r3, #1
}
 801dd54:	4618      	mov	r0, r3
 801dd56:	bd80      	pop	{r7, pc}
 801dd58:	2001b11c 	.word	0x2001b11c

0801dd5c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801dd5c:	b580      	push	{r7, lr}
 801dd5e:	b082      	sub	sp, #8
 801dd60:	af00      	add	r7, sp, #0
 801dd62:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801dd64:	4b04      	ldr	r3, [pc, #16]	; (801dd78 <sys_arch_unprotect+0x1c>)
 801dd66:	681b      	ldr	r3, [r3, #0]
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f7e9 fcf9 	bl	8007760 <osMutexRelease>
}
 801dd6e:	bf00      	nop
 801dd70:	3708      	adds	r7, #8
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd80      	pop	{r7, pc}
 801dd76:	bf00      	nop
 801dd78:	2001b11c 	.word	0x2001b11c

0801dd7c <std>:
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	b510      	push	{r4, lr}
 801dd80:	4604      	mov	r4, r0
 801dd82:	e9c0 3300 	strd	r3, r3, [r0]
 801dd86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dd8a:	6083      	str	r3, [r0, #8]
 801dd8c:	8181      	strh	r1, [r0, #12]
 801dd8e:	6643      	str	r3, [r0, #100]	; 0x64
 801dd90:	81c2      	strh	r2, [r0, #14]
 801dd92:	6183      	str	r3, [r0, #24]
 801dd94:	4619      	mov	r1, r3
 801dd96:	2208      	movs	r2, #8
 801dd98:	305c      	adds	r0, #92	; 0x5c
 801dd9a:	f000 f953 	bl	801e044 <memset>
 801dd9e:	4b05      	ldr	r3, [pc, #20]	; (801ddb4 <std+0x38>)
 801dda0:	6263      	str	r3, [r4, #36]	; 0x24
 801dda2:	4b05      	ldr	r3, [pc, #20]	; (801ddb8 <std+0x3c>)
 801dda4:	62a3      	str	r3, [r4, #40]	; 0x28
 801dda6:	4b05      	ldr	r3, [pc, #20]	; (801ddbc <std+0x40>)
 801dda8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ddaa:	4b05      	ldr	r3, [pc, #20]	; (801ddc0 <std+0x44>)
 801ddac:	6224      	str	r4, [r4, #32]
 801ddae:	6323      	str	r3, [r4, #48]	; 0x30
 801ddb0:	bd10      	pop	{r4, pc}
 801ddb2:	bf00      	nop
 801ddb4:	0801ee0d 	.word	0x0801ee0d
 801ddb8:	0801ee33 	.word	0x0801ee33
 801ddbc:	0801ee6b 	.word	0x0801ee6b
 801ddc0:	0801ee8f 	.word	0x0801ee8f

0801ddc4 <_cleanup_r>:
 801ddc4:	4901      	ldr	r1, [pc, #4]	; (801ddcc <_cleanup_r+0x8>)
 801ddc6:	f000 b8af 	b.w	801df28 <_fwalk_reent>
 801ddca:	bf00      	nop
 801ddcc:	08020101 	.word	0x08020101

0801ddd0 <__sfmoreglue>:
 801ddd0:	b570      	push	{r4, r5, r6, lr}
 801ddd2:	1e4a      	subs	r2, r1, #1
 801ddd4:	2568      	movs	r5, #104	; 0x68
 801ddd6:	4355      	muls	r5, r2
 801ddd8:	460e      	mov	r6, r1
 801ddda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ddde:	f000 f989 	bl	801e0f4 <_malloc_r>
 801dde2:	4604      	mov	r4, r0
 801dde4:	b140      	cbz	r0, 801ddf8 <__sfmoreglue+0x28>
 801dde6:	2100      	movs	r1, #0
 801dde8:	e9c0 1600 	strd	r1, r6, [r0]
 801ddec:	300c      	adds	r0, #12
 801ddee:	60a0      	str	r0, [r4, #8]
 801ddf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ddf4:	f000 f926 	bl	801e044 <memset>
 801ddf8:	4620      	mov	r0, r4
 801ddfa:	bd70      	pop	{r4, r5, r6, pc}

0801ddfc <__sfp_lock_acquire>:
 801ddfc:	4801      	ldr	r0, [pc, #4]	; (801de04 <__sfp_lock_acquire+0x8>)
 801ddfe:	f000 b8d8 	b.w	801dfb2 <__retarget_lock_acquire_recursive>
 801de02:	bf00      	nop
 801de04:	2001b128 	.word	0x2001b128

0801de08 <__sfp_lock_release>:
 801de08:	4801      	ldr	r0, [pc, #4]	; (801de10 <__sfp_lock_release+0x8>)
 801de0a:	f000 b8d3 	b.w	801dfb4 <__retarget_lock_release_recursive>
 801de0e:	bf00      	nop
 801de10:	2001b128 	.word	0x2001b128

0801de14 <__sinit_lock_acquire>:
 801de14:	4801      	ldr	r0, [pc, #4]	; (801de1c <__sinit_lock_acquire+0x8>)
 801de16:	f000 b8cc 	b.w	801dfb2 <__retarget_lock_acquire_recursive>
 801de1a:	bf00      	nop
 801de1c:	2001b123 	.word	0x2001b123

0801de20 <__sinit_lock_release>:
 801de20:	4801      	ldr	r0, [pc, #4]	; (801de28 <__sinit_lock_release+0x8>)
 801de22:	f000 b8c7 	b.w	801dfb4 <__retarget_lock_release_recursive>
 801de26:	bf00      	nop
 801de28:	2001b123 	.word	0x2001b123

0801de2c <__sinit>:
 801de2c:	b510      	push	{r4, lr}
 801de2e:	4604      	mov	r4, r0
 801de30:	f7ff fff0 	bl	801de14 <__sinit_lock_acquire>
 801de34:	69a3      	ldr	r3, [r4, #24]
 801de36:	b11b      	cbz	r3, 801de40 <__sinit+0x14>
 801de38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de3c:	f7ff bff0 	b.w	801de20 <__sinit_lock_release>
 801de40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801de44:	6523      	str	r3, [r4, #80]	; 0x50
 801de46:	4b13      	ldr	r3, [pc, #76]	; (801de94 <__sinit+0x68>)
 801de48:	4a13      	ldr	r2, [pc, #76]	; (801de98 <__sinit+0x6c>)
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	62a2      	str	r2, [r4, #40]	; 0x28
 801de4e:	42a3      	cmp	r3, r4
 801de50:	bf04      	itt	eq
 801de52:	2301      	moveq	r3, #1
 801de54:	61a3      	streq	r3, [r4, #24]
 801de56:	4620      	mov	r0, r4
 801de58:	f000 f820 	bl	801de9c <__sfp>
 801de5c:	6060      	str	r0, [r4, #4]
 801de5e:	4620      	mov	r0, r4
 801de60:	f000 f81c 	bl	801de9c <__sfp>
 801de64:	60a0      	str	r0, [r4, #8]
 801de66:	4620      	mov	r0, r4
 801de68:	f000 f818 	bl	801de9c <__sfp>
 801de6c:	2200      	movs	r2, #0
 801de6e:	60e0      	str	r0, [r4, #12]
 801de70:	2104      	movs	r1, #4
 801de72:	6860      	ldr	r0, [r4, #4]
 801de74:	f7ff ff82 	bl	801dd7c <std>
 801de78:	68a0      	ldr	r0, [r4, #8]
 801de7a:	2201      	movs	r2, #1
 801de7c:	2109      	movs	r1, #9
 801de7e:	f7ff ff7d 	bl	801dd7c <std>
 801de82:	68e0      	ldr	r0, [r4, #12]
 801de84:	2202      	movs	r2, #2
 801de86:	2112      	movs	r1, #18
 801de88:	f7ff ff78 	bl	801dd7c <std>
 801de8c:	2301      	movs	r3, #1
 801de8e:	61a3      	str	r3, [r4, #24]
 801de90:	e7d2      	b.n	801de38 <__sinit+0xc>
 801de92:	bf00      	nop
 801de94:	08026840 	.word	0x08026840
 801de98:	0801ddc5 	.word	0x0801ddc5

0801de9c <__sfp>:
 801de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de9e:	4607      	mov	r7, r0
 801dea0:	f7ff ffac 	bl	801ddfc <__sfp_lock_acquire>
 801dea4:	4b1e      	ldr	r3, [pc, #120]	; (801df20 <__sfp+0x84>)
 801dea6:	681e      	ldr	r6, [r3, #0]
 801dea8:	69b3      	ldr	r3, [r6, #24]
 801deaa:	b913      	cbnz	r3, 801deb2 <__sfp+0x16>
 801deac:	4630      	mov	r0, r6
 801deae:	f7ff ffbd 	bl	801de2c <__sinit>
 801deb2:	3648      	adds	r6, #72	; 0x48
 801deb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801deb8:	3b01      	subs	r3, #1
 801deba:	d503      	bpl.n	801dec4 <__sfp+0x28>
 801debc:	6833      	ldr	r3, [r6, #0]
 801debe:	b30b      	cbz	r3, 801df04 <__sfp+0x68>
 801dec0:	6836      	ldr	r6, [r6, #0]
 801dec2:	e7f7      	b.n	801deb4 <__sfp+0x18>
 801dec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dec8:	b9d5      	cbnz	r5, 801df00 <__sfp+0x64>
 801deca:	4b16      	ldr	r3, [pc, #88]	; (801df24 <__sfp+0x88>)
 801decc:	60e3      	str	r3, [r4, #12]
 801dece:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ded2:	6665      	str	r5, [r4, #100]	; 0x64
 801ded4:	f000 f86c 	bl	801dfb0 <__retarget_lock_init_recursive>
 801ded8:	f7ff ff96 	bl	801de08 <__sfp_lock_release>
 801dedc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dee0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dee4:	6025      	str	r5, [r4, #0]
 801dee6:	61a5      	str	r5, [r4, #24]
 801dee8:	2208      	movs	r2, #8
 801deea:	4629      	mov	r1, r5
 801deec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801def0:	f000 f8a8 	bl	801e044 <memset>
 801def4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801def8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801defc:	4620      	mov	r0, r4
 801defe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df00:	3468      	adds	r4, #104	; 0x68
 801df02:	e7d9      	b.n	801deb8 <__sfp+0x1c>
 801df04:	2104      	movs	r1, #4
 801df06:	4638      	mov	r0, r7
 801df08:	f7ff ff62 	bl	801ddd0 <__sfmoreglue>
 801df0c:	4604      	mov	r4, r0
 801df0e:	6030      	str	r0, [r6, #0]
 801df10:	2800      	cmp	r0, #0
 801df12:	d1d5      	bne.n	801dec0 <__sfp+0x24>
 801df14:	f7ff ff78 	bl	801de08 <__sfp_lock_release>
 801df18:	230c      	movs	r3, #12
 801df1a:	603b      	str	r3, [r7, #0]
 801df1c:	e7ee      	b.n	801defc <__sfp+0x60>
 801df1e:	bf00      	nop
 801df20:	08026840 	.word	0x08026840
 801df24:	ffff0001 	.word	0xffff0001

0801df28 <_fwalk_reent>:
 801df28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df2c:	4606      	mov	r6, r0
 801df2e:	4688      	mov	r8, r1
 801df30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801df34:	2700      	movs	r7, #0
 801df36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801df3a:	f1b9 0901 	subs.w	r9, r9, #1
 801df3e:	d505      	bpl.n	801df4c <_fwalk_reent+0x24>
 801df40:	6824      	ldr	r4, [r4, #0]
 801df42:	2c00      	cmp	r4, #0
 801df44:	d1f7      	bne.n	801df36 <_fwalk_reent+0xe>
 801df46:	4638      	mov	r0, r7
 801df48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df4c:	89ab      	ldrh	r3, [r5, #12]
 801df4e:	2b01      	cmp	r3, #1
 801df50:	d907      	bls.n	801df62 <_fwalk_reent+0x3a>
 801df52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df56:	3301      	adds	r3, #1
 801df58:	d003      	beq.n	801df62 <_fwalk_reent+0x3a>
 801df5a:	4629      	mov	r1, r5
 801df5c:	4630      	mov	r0, r6
 801df5e:	47c0      	blx	r8
 801df60:	4307      	orrs	r7, r0
 801df62:	3568      	adds	r5, #104	; 0x68
 801df64:	e7e9      	b.n	801df3a <_fwalk_reent+0x12>
	...

0801df68 <__libc_init_array>:
 801df68:	b570      	push	{r4, r5, r6, lr}
 801df6a:	4d0d      	ldr	r5, [pc, #52]	; (801dfa0 <__libc_init_array+0x38>)
 801df6c:	4c0d      	ldr	r4, [pc, #52]	; (801dfa4 <__libc_init_array+0x3c>)
 801df6e:	1b64      	subs	r4, r4, r5
 801df70:	10a4      	asrs	r4, r4, #2
 801df72:	2600      	movs	r6, #0
 801df74:	42a6      	cmp	r6, r4
 801df76:	d109      	bne.n	801df8c <__libc_init_array+0x24>
 801df78:	4d0b      	ldr	r5, [pc, #44]	; (801dfa8 <__libc_init_array+0x40>)
 801df7a:	4c0c      	ldr	r4, [pc, #48]	; (801dfac <__libc_init_array+0x44>)
 801df7c:	f003 fcb4 	bl	80218e8 <_init>
 801df80:	1b64      	subs	r4, r4, r5
 801df82:	10a4      	asrs	r4, r4, #2
 801df84:	2600      	movs	r6, #0
 801df86:	42a6      	cmp	r6, r4
 801df88:	d105      	bne.n	801df96 <__libc_init_array+0x2e>
 801df8a:	bd70      	pop	{r4, r5, r6, pc}
 801df8c:	f855 3b04 	ldr.w	r3, [r5], #4
 801df90:	4798      	blx	r3
 801df92:	3601      	adds	r6, #1
 801df94:	e7ee      	b.n	801df74 <__libc_init_array+0xc>
 801df96:	f855 3b04 	ldr.w	r3, [r5], #4
 801df9a:	4798      	blx	r3
 801df9c:	3601      	adds	r6, #1
 801df9e:	e7f2      	b.n	801df86 <__libc_init_array+0x1e>
 801dfa0:	08026ba4 	.word	0x08026ba4
 801dfa4:	08026ba4 	.word	0x08026ba4
 801dfa8:	08026ba4 	.word	0x08026ba4
 801dfac:	08026ba8 	.word	0x08026ba8

0801dfb0 <__retarget_lock_init_recursive>:
 801dfb0:	4770      	bx	lr

0801dfb2 <__retarget_lock_acquire_recursive>:
 801dfb2:	4770      	bx	lr

0801dfb4 <__retarget_lock_release_recursive>:
 801dfb4:	4770      	bx	lr
	...

0801dfb8 <malloc>:
 801dfb8:	4b02      	ldr	r3, [pc, #8]	; (801dfc4 <malloc+0xc>)
 801dfba:	4601      	mov	r1, r0
 801dfbc:	6818      	ldr	r0, [r3, #0]
 801dfbe:	f000 b899 	b.w	801e0f4 <_malloc_r>
 801dfc2:	bf00      	nop
 801dfc4:	20000064 	.word	0x20000064

0801dfc8 <free>:
 801dfc8:	4b02      	ldr	r3, [pc, #8]	; (801dfd4 <free+0xc>)
 801dfca:	4601      	mov	r1, r0
 801dfcc:	6818      	ldr	r0, [r3, #0]
 801dfce:	f000 b841 	b.w	801e054 <_free_r>
 801dfd2:	bf00      	nop
 801dfd4:	20000064 	.word	0x20000064

0801dfd8 <memcmp>:
 801dfd8:	b530      	push	{r4, r5, lr}
 801dfda:	3901      	subs	r1, #1
 801dfdc:	2400      	movs	r4, #0
 801dfde:	42a2      	cmp	r2, r4
 801dfe0:	d101      	bne.n	801dfe6 <memcmp+0xe>
 801dfe2:	2000      	movs	r0, #0
 801dfe4:	e005      	b.n	801dff2 <memcmp+0x1a>
 801dfe6:	5d03      	ldrb	r3, [r0, r4]
 801dfe8:	3401      	adds	r4, #1
 801dfea:	5d0d      	ldrb	r5, [r1, r4]
 801dfec:	42ab      	cmp	r3, r5
 801dfee:	d0f6      	beq.n	801dfde <memcmp+0x6>
 801dff0:	1b58      	subs	r0, r3, r5
 801dff2:	bd30      	pop	{r4, r5, pc}

0801dff4 <memcpy>:
 801dff4:	440a      	add	r2, r1
 801dff6:	4291      	cmp	r1, r2
 801dff8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801dffc:	d100      	bne.n	801e000 <memcpy+0xc>
 801dffe:	4770      	bx	lr
 801e000:	b510      	push	{r4, lr}
 801e002:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e006:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e00a:	4291      	cmp	r1, r2
 801e00c:	d1f9      	bne.n	801e002 <memcpy+0xe>
 801e00e:	bd10      	pop	{r4, pc}

0801e010 <memmove>:
 801e010:	4288      	cmp	r0, r1
 801e012:	b510      	push	{r4, lr}
 801e014:	eb01 0402 	add.w	r4, r1, r2
 801e018:	d902      	bls.n	801e020 <memmove+0x10>
 801e01a:	4284      	cmp	r4, r0
 801e01c:	4623      	mov	r3, r4
 801e01e:	d807      	bhi.n	801e030 <memmove+0x20>
 801e020:	1e43      	subs	r3, r0, #1
 801e022:	42a1      	cmp	r1, r4
 801e024:	d008      	beq.n	801e038 <memmove+0x28>
 801e026:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e02a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e02e:	e7f8      	b.n	801e022 <memmove+0x12>
 801e030:	4402      	add	r2, r0
 801e032:	4601      	mov	r1, r0
 801e034:	428a      	cmp	r2, r1
 801e036:	d100      	bne.n	801e03a <memmove+0x2a>
 801e038:	bd10      	pop	{r4, pc}
 801e03a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e03e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e042:	e7f7      	b.n	801e034 <memmove+0x24>

0801e044 <memset>:
 801e044:	4402      	add	r2, r0
 801e046:	4603      	mov	r3, r0
 801e048:	4293      	cmp	r3, r2
 801e04a:	d100      	bne.n	801e04e <memset+0xa>
 801e04c:	4770      	bx	lr
 801e04e:	f803 1b01 	strb.w	r1, [r3], #1
 801e052:	e7f9      	b.n	801e048 <memset+0x4>

0801e054 <_free_r>:
 801e054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e056:	2900      	cmp	r1, #0
 801e058:	d048      	beq.n	801e0ec <_free_r+0x98>
 801e05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e05e:	9001      	str	r0, [sp, #4]
 801e060:	2b00      	cmp	r3, #0
 801e062:	f1a1 0404 	sub.w	r4, r1, #4
 801e066:	bfb8      	it	lt
 801e068:	18e4      	addlt	r4, r4, r3
 801e06a:	f002 f911 	bl	8020290 <__malloc_lock>
 801e06e:	4a20      	ldr	r2, [pc, #128]	; (801e0f0 <_free_r+0x9c>)
 801e070:	9801      	ldr	r0, [sp, #4]
 801e072:	6813      	ldr	r3, [r2, #0]
 801e074:	4615      	mov	r5, r2
 801e076:	b933      	cbnz	r3, 801e086 <_free_r+0x32>
 801e078:	6063      	str	r3, [r4, #4]
 801e07a:	6014      	str	r4, [r2, #0]
 801e07c:	b003      	add	sp, #12
 801e07e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e082:	f002 b90b 	b.w	802029c <__malloc_unlock>
 801e086:	42a3      	cmp	r3, r4
 801e088:	d90b      	bls.n	801e0a2 <_free_r+0x4e>
 801e08a:	6821      	ldr	r1, [r4, #0]
 801e08c:	1862      	adds	r2, r4, r1
 801e08e:	4293      	cmp	r3, r2
 801e090:	bf04      	itt	eq
 801e092:	681a      	ldreq	r2, [r3, #0]
 801e094:	685b      	ldreq	r3, [r3, #4]
 801e096:	6063      	str	r3, [r4, #4]
 801e098:	bf04      	itt	eq
 801e09a:	1852      	addeq	r2, r2, r1
 801e09c:	6022      	streq	r2, [r4, #0]
 801e09e:	602c      	str	r4, [r5, #0]
 801e0a0:	e7ec      	b.n	801e07c <_free_r+0x28>
 801e0a2:	461a      	mov	r2, r3
 801e0a4:	685b      	ldr	r3, [r3, #4]
 801e0a6:	b10b      	cbz	r3, 801e0ac <_free_r+0x58>
 801e0a8:	42a3      	cmp	r3, r4
 801e0aa:	d9fa      	bls.n	801e0a2 <_free_r+0x4e>
 801e0ac:	6811      	ldr	r1, [r2, #0]
 801e0ae:	1855      	adds	r5, r2, r1
 801e0b0:	42a5      	cmp	r5, r4
 801e0b2:	d10b      	bne.n	801e0cc <_free_r+0x78>
 801e0b4:	6824      	ldr	r4, [r4, #0]
 801e0b6:	4421      	add	r1, r4
 801e0b8:	1854      	adds	r4, r2, r1
 801e0ba:	42a3      	cmp	r3, r4
 801e0bc:	6011      	str	r1, [r2, #0]
 801e0be:	d1dd      	bne.n	801e07c <_free_r+0x28>
 801e0c0:	681c      	ldr	r4, [r3, #0]
 801e0c2:	685b      	ldr	r3, [r3, #4]
 801e0c4:	6053      	str	r3, [r2, #4]
 801e0c6:	4421      	add	r1, r4
 801e0c8:	6011      	str	r1, [r2, #0]
 801e0ca:	e7d7      	b.n	801e07c <_free_r+0x28>
 801e0cc:	d902      	bls.n	801e0d4 <_free_r+0x80>
 801e0ce:	230c      	movs	r3, #12
 801e0d0:	6003      	str	r3, [r0, #0]
 801e0d2:	e7d3      	b.n	801e07c <_free_r+0x28>
 801e0d4:	6825      	ldr	r5, [r4, #0]
 801e0d6:	1961      	adds	r1, r4, r5
 801e0d8:	428b      	cmp	r3, r1
 801e0da:	bf04      	itt	eq
 801e0dc:	6819      	ldreq	r1, [r3, #0]
 801e0de:	685b      	ldreq	r3, [r3, #4]
 801e0e0:	6063      	str	r3, [r4, #4]
 801e0e2:	bf04      	itt	eq
 801e0e4:	1949      	addeq	r1, r1, r5
 801e0e6:	6021      	streq	r1, [r4, #0]
 801e0e8:	6054      	str	r4, [r2, #4]
 801e0ea:	e7c7      	b.n	801e07c <_free_r+0x28>
 801e0ec:	b003      	add	sp, #12
 801e0ee:	bd30      	pop	{r4, r5, pc}
 801e0f0:	200144a8 	.word	0x200144a8

0801e0f4 <_malloc_r>:
 801e0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0f6:	1ccd      	adds	r5, r1, #3
 801e0f8:	f025 0503 	bic.w	r5, r5, #3
 801e0fc:	3508      	adds	r5, #8
 801e0fe:	2d0c      	cmp	r5, #12
 801e100:	bf38      	it	cc
 801e102:	250c      	movcc	r5, #12
 801e104:	2d00      	cmp	r5, #0
 801e106:	4606      	mov	r6, r0
 801e108:	db01      	blt.n	801e10e <_malloc_r+0x1a>
 801e10a:	42a9      	cmp	r1, r5
 801e10c:	d903      	bls.n	801e116 <_malloc_r+0x22>
 801e10e:	230c      	movs	r3, #12
 801e110:	6033      	str	r3, [r6, #0]
 801e112:	2000      	movs	r0, #0
 801e114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e116:	f002 f8bb 	bl	8020290 <__malloc_lock>
 801e11a:	4921      	ldr	r1, [pc, #132]	; (801e1a0 <_malloc_r+0xac>)
 801e11c:	680a      	ldr	r2, [r1, #0]
 801e11e:	4614      	mov	r4, r2
 801e120:	b99c      	cbnz	r4, 801e14a <_malloc_r+0x56>
 801e122:	4f20      	ldr	r7, [pc, #128]	; (801e1a4 <_malloc_r+0xb0>)
 801e124:	683b      	ldr	r3, [r7, #0]
 801e126:	b923      	cbnz	r3, 801e132 <_malloc_r+0x3e>
 801e128:	4621      	mov	r1, r4
 801e12a:	4630      	mov	r0, r6
 801e12c:	f000 fdde 	bl	801ecec <_sbrk_r>
 801e130:	6038      	str	r0, [r7, #0]
 801e132:	4629      	mov	r1, r5
 801e134:	4630      	mov	r0, r6
 801e136:	f000 fdd9 	bl	801ecec <_sbrk_r>
 801e13a:	1c43      	adds	r3, r0, #1
 801e13c:	d123      	bne.n	801e186 <_malloc_r+0x92>
 801e13e:	230c      	movs	r3, #12
 801e140:	6033      	str	r3, [r6, #0]
 801e142:	4630      	mov	r0, r6
 801e144:	f002 f8aa 	bl	802029c <__malloc_unlock>
 801e148:	e7e3      	b.n	801e112 <_malloc_r+0x1e>
 801e14a:	6823      	ldr	r3, [r4, #0]
 801e14c:	1b5b      	subs	r3, r3, r5
 801e14e:	d417      	bmi.n	801e180 <_malloc_r+0x8c>
 801e150:	2b0b      	cmp	r3, #11
 801e152:	d903      	bls.n	801e15c <_malloc_r+0x68>
 801e154:	6023      	str	r3, [r4, #0]
 801e156:	441c      	add	r4, r3
 801e158:	6025      	str	r5, [r4, #0]
 801e15a:	e004      	b.n	801e166 <_malloc_r+0x72>
 801e15c:	6863      	ldr	r3, [r4, #4]
 801e15e:	42a2      	cmp	r2, r4
 801e160:	bf0c      	ite	eq
 801e162:	600b      	streq	r3, [r1, #0]
 801e164:	6053      	strne	r3, [r2, #4]
 801e166:	4630      	mov	r0, r6
 801e168:	f002 f898 	bl	802029c <__malloc_unlock>
 801e16c:	f104 000b 	add.w	r0, r4, #11
 801e170:	1d23      	adds	r3, r4, #4
 801e172:	f020 0007 	bic.w	r0, r0, #7
 801e176:	1ac2      	subs	r2, r0, r3
 801e178:	d0cc      	beq.n	801e114 <_malloc_r+0x20>
 801e17a:	1a1b      	subs	r3, r3, r0
 801e17c:	50a3      	str	r3, [r4, r2]
 801e17e:	e7c9      	b.n	801e114 <_malloc_r+0x20>
 801e180:	4622      	mov	r2, r4
 801e182:	6864      	ldr	r4, [r4, #4]
 801e184:	e7cc      	b.n	801e120 <_malloc_r+0x2c>
 801e186:	1cc4      	adds	r4, r0, #3
 801e188:	f024 0403 	bic.w	r4, r4, #3
 801e18c:	42a0      	cmp	r0, r4
 801e18e:	d0e3      	beq.n	801e158 <_malloc_r+0x64>
 801e190:	1a21      	subs	r1, r4, r0
 801e192:	4630      	mov	r0, r6
 801e194:	f000 fdaa 	bl	801ecec <_sbrk_r>
 801e198:	3001      	adds	r0, #1
 801e19a:	d1dd      	bne.n	801e158 <_malloc_r+0x64>
 801e19c:	e7cf      	b.n	801e13e <_malloc_r+0x4a>
 801e19e:	bf00      	nop
 801e1a0:	200144a8 	.word	0x200144a8
 801e1a4:	200144ac 	.word	0x200144ac

0801e1a8 <__cvt>:
 801e1a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e1ac:	ec55 4b10 	vmov	r4, r5, d0
 801e1b0:	2d00      	cmp	r5, #0
 801e1b2:	460e      	mov	r6, r1
 801e1b4:	4619      	mov	r1, r3
 801e1b6:	462b      	mov	r3, r5
 801e1b8:	bfbb      	ittet	lt
 801e1ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e1be:	461d      	movlt	r5, r3
 801e1c0:	2300      	movge	r3, #0
 801e1c2:	232d      	movlt	r3, #45	; 0x2d
 801e1c4:	700b      	strb	r3, [r1, #0]
 801e1c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e1c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e1cc:	4691      	mov	r9, r2
 801e1ce:	f023 0820 	bic.w	r8, r3, #32
 801e1d2:	bfbc      	itt	lt
 801e1d4:	4622      	movlt	r2, r4
 801e1d6:	4614      	movlt	r4, r2
 801e1d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e1dc:	d005      	beq.n	801e1ea <__cvt+0x42>
 801e1de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e1e2:	d100      	bne.n	801e1e6 <__cvt+0x3e>
 801e1e4:	3601      	adds	r6, #1
 801e1e6:	2102      	movs	r1, #2
 801e1e8:	e000      	b.n	801e1ec <__cvt+0x44>
 801e1ea:	2103      	movs	r1, #3
 801e1ec:	ab03      	add	r3, sp, #12
 801e1ee:	9301      	str	r3, [sp, #4]
 801e1f0:	ab02      	add	r3, sp, #8
 801e1f2:	9300      	str	r3, [sp, #0]
 801e1f4:	ec45 4b10 	vmov	d0, r4, r5
 801e1f8:	4653      	mov	r3, sl
 801e1fa:	4632      	mov	r2, r6
 801e1fc:	f001 f908 	bl	801f410 <_dtoa_r>
 801e200:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e204:	4607      	mov	r7, r0
 801e206:	d102      	bne.n	801e20e <__cvt+0x66>
 801e208:	f019 0f01 	tst.w	r9, #1
 801e20c:	d022      	beq.n	801e254 <__cvt+0xac>
 801e20e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e212:	eb07 0906 	add.w	r9, r7, r6
 801e216:	d110      	bne.n	801e23a <__cvt+0x92>
 801e218:	783b      	ldrb	r3, [r7, #0]
 801e21a:	2b30      	cmp	r3, #48	; 0x30
 801e21c:	d10a      	bne.n	801e234 <__cvt+0x8c>
 801e21e:	2200      	movs	r2, #0
 801e220:	2300      	movs	r3, #0
 801e222:	4620      	mov	r0, r4
 801e224:	4629      	mov	r1, r5
 801e226:	f7e2 fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 801e22a:	b918      	cbnz	r0, 801e234 <__cvt+0x8c>
 801e22c:	f1c6 0601 	rsb	r6, r6, #1
 801e230:	f8ca 6000 	str.w	r6, [sl]
 801e234:	f8da 3000 	ldr.w	r3, [sl]
 801e238:	4499      	add	r9, r3
 801e23a:	2200      	movs	r2, #0
 801e23c:	2300      	movs	r3, #0
 801e23e:	4620      	mov	r0, r4
 801e240:	4629      	mov	r1, r5
 801e242:	f7e2 fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 801e246:	b108      	cbz	r0, 801e24c <__cvt+0xa4>
 801e248:	f8cd 900c 	str.w	r9, [sp, #12]
 801e24c:	2230      	movs	r2, #48	; 0x30
 801e24e:	9b03      	ldr	r3, [sp, #12]
 801e250:	454b      	cmp	r3, r9
 801e252:	d307      	bcc.n	801e264 <__cvt+0xbc>
 801e254:	9b03      	ldr	r3, [sp, #12]
 801e256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e258:	1bdb      	subs	r3, r3, r7
 801e25a:	4638      	mov	r0, r7
 801e25c:	6013      	str	r3, [r2, #0]
 801e25e:	b004      	add	sp, #16
 801e260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e264:	1c59      	adds	r1, r3, #1
 801e266:	9103      	str	r1, [sp, #12]
 801e268:	701a      	strb	r2, [r3, #0]
 801e26a:	e7f0      	b.n	801e24e <__cvt+0xa6>

0801e26c <__exponent>:
 801e26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e26e:	4603      	mov	r3, r0
 801e270:	2900      	cmp	r1, #0
 801e272:	bfb8      	it	lt
 801e274:	4249      	neglt	r1, r1
 801e276:	f803 2b02 	strb.w	r2, [r3], #2
 801e27a:	bfb4      	ite	lt
 801e27c:	222d      	movlt	r2, #45	; 0x2d
 801e27e:	222b      	movge	r2, #43	; 0x2b
 801e280:	2909      	cmp	r1, #9
 801e282:	7042      	strb	r2, [r0, #1]
 801e284:	dd2a      	ble.n	801e2dc <__exponent+0x70>
 801e286:	f10d 0407 	add.w	r4, sp, #7
 801e28a:	46a4      	mov	ip, r4
 801e28c:	270a      	movs	r7, #10
 801e28e:	46a6      	mov	lr, r4
 801e290:	460a      	mov	r2, r1
 801e292:	fb91 f6f7 	sdiv	r6, r1, r7
 801e296:	fb07 1516 	mls	r5, r7, r6, r1
 801e29a:	3530      	adds	r5, #48	; 0x30
 801e29c:	2a63      	cmp	r2, #99	; 0x63
 801e29e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801e2a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e2a6:	4631      	mov	r1, r6
 801e2a8:	dcf1      	bgt.n	801e28e <__exponent+0x22>
 801e2aa:	3130      	adds	r1, #48	; 0x30
 801e2ac:	f1ae 0502 	sub.w	r5, lr, #2
 801e2b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e2b4:	1c44      	adds	r4, r0, #1
 801e2b6:	4629      	mov	r1, r5
 801e2b8:	4561      	cmp	r1, ip
 801e2ba:	d30a      	bcc.n	801e2d2 <__exponent+0x66>
 801e2bc:	f10d 0209 	add.w	r2, sp, #9
 801e2c0:	eba2 020e 	sub.w	r2, r2, lr
 801e2c4:	4565      	cmp	r5, ip
 801e2c6:	bf88      	it	hi
 801e2c8:	2200      	movhi	r2, #0
 801e2ca:	4413      	add	r3, r2
 801e2cc:	1a18      	subs	r0, r3, r0
 801e2ce:	b003      	add	sp, #12
 801e2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e2d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e2da:	e7ed      	b.n	801e2b8 <__exponent+0x4c>
 801e2dc:	2330      	movs	r3, #48	; 0x30
 801e2de:	3130      	adds	r1, #48	; 0x30
 801e2e0:	7083      	strb	r3, [r0, #2]
 801e2e2:	70c1      	strb	r1, [r0, #3]
 801e2e4:	1d03      	adds	r3, r0, #4
 801e2e6:	e7f1      	b.n	801e2cc <__exponent+0x60>

0801e2e8 <_printf_float>:
 801e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ec:	ed2d 8b02 	vpush	{d8}
 801e2f0:	b08d      	sub	sp, #52	; 0x34
 801e2f2:	460c      	mov	r4, r1
 801e2f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e2f8:	4616      	mov	r6, r2
 801e2fa:	461f      	mov	r7, r3
 801e2fc:	4605      	mov	r5, r0
 801e2fe:	f001 ff4d 	bl	802019c <_localeconv_r>
 801e302:	f8d0 a000 	ldr.w	sl, [r0]
 801e306:	4650      	mov	r0, sl
 801e308:	f7e1 ff62 	bl	80001d0 <strlen>
 801e30c:	2300      	movs	r3, #0
 801e30e:	930a      	str	r3, [sp, #40]	; 0x28
 801e310:	6823      	ldr	r3, [r4, #0]
 801e312:	9305      	str	r3, [sp, #20]
 801e314:	f8d8 3000 	ldr.w	r3, [r8]
 801e318:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e31c:	3307      	adds	r3, #7
 801e31e:	f023 0307 	bic.w	r3, r3, #7
 801e322:	f103 0208 	add.w	r2, r3, #8
 801e326:	f8c8 2000 	str.w	r2, [r8]
 801e32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e32e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e332:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801e336:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e33a:	9307      	str	r3, [sp, #28]
 801e33c:	f8cd 8018 	str.w	r8, [sp, #24]
 801e340:	ee08 0a10 	vmov	s16, r0
 801e344:	4b9f      	ldr	r3, [pc, #636]	; (801e5c4 <_printf_float+0x2dc>)
 801e346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e34a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e34e:	f7e2 fbed 	bl	8000b2c <__aeabi_dcmpun>
 801e352:	bb88      	cbnz	r0, 801e3b8 <_printf_float+0xd0>
 801e354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e358:	4b9a      	ldr	r3, [pc, #616]	; (801e5c4 <_printf_float+0x2dc>)
 801e35a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e35e:	f7e2 fbc7 	bl	8000af0 <__aeabi_dcmple>
 801e362:	bb48      	cbnz	r0, 801e3b8 <_printf_float+0xd0>
 801e364:	2200      	movs	r2, #0
 801e366:	2300      	movs	r3, #0
 801e368:	4640      	mov	r0, r8
 801e36a:	4649      	mov	r1, r9
 801e36c:	f7e2 fbb6 	bl	8000adc <__aeabi_dcmplt>
 801e370:	b110      	cbz	r0, 801e378 <_printf_float+0x90>
 801e372:	232d      	movs	r3, #45	; 0x2d
 801e374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e378:	4b93      	ldr	r3, [pc, #588]	; (801e5c8 <_printf_float+0x2e0>)
 801e37a:	4894      	ldr	r0, [pc, #592]	; (801e5cc <_printf_float+0x2e4>)
 801e37c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e380:	bf94      	ite	ls
 801e382:	4698      	movls	r8, r3
 801e384:	4680      	movhi	r8, r0
 801e386:	2303      	movs	r3, #3
 801e388:	6123      	str	r3, [r4, #16]
 801e38a:	9b05      	ldr	r3, [sp, #20]
 801e38c:	f023 0204 	bic.w	r2, r3, #4
 801e390:	6022      	str	r2, [r4, #0]
 801e392:	f04f 0900 	mov.w	r9, #0
 801e396:	9700      	str	r7, [sp, #0]
 801e398:	4633      	mov	r3, r6
 801e39a:	aa0b      	add	r2, sp, #44	; 0x2c
 801e39c:	4621      	mov	r1, r4
 801e39e:	4628      	mov	r0, r5
 801e3a0:	f000 f9d8 	bl	801e754 <_printf_common>
 801e3a4:	3001      	adds	r0, #1
 801e3a6:	f040 8090 	bne.w	801e4ca <_printf_float+0x1e2>
 801e3aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e3ae:	b00d      	add	sp, #52	; 0x34
 801e3b0:	ecbd 8b02 	vpop	{d8}
 801e3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3b8:	4642      	mov	r2, r8
 801e3ba:	464b      	mov	r3, r9
 801e3bc:	4640      	mov	r0, r8
 801e3be:	4649      	mov	r1, r9
 801e3c0:	f7e2 fbb4 	bl	8000b2c <__aeabi_dcmpun>
 801e3c4:	b140      	cbz	r0, 801e3d8 <_printf_float+0xf0>
 801e3c6:	464b      	mov	r3, r9
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	bfbc      	itt	lt
 801e3cc:	232d      	movlt	r3, #45	; 0x2d
 801e3ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e3d2:	487f      	ldr	r0, [pc, #508]	; (801e5d0 <_printf_float+0x2e8>)
 801e3d4:	4b7f      	ldr	r3, [pc, #508]	; (801e5d4 <_printf_float+0x2ec>)
 801e3d6:	e7d1      	b.n	801e37c <_printf_float+0x94>
 801e3d8:	6863      	ldr	r3, [r4, #4]
 801e3da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e3de:	9206      	str	r2, [sp, #24]
 801e3e0:	1c5a      	adds	r2, r3, #1
 801e3e2:	d13f      	bne.n	801e464 <_printf_float+0x17c>
 801e3e4:	2306      	movs	r3, #6
 801e3e6:	6063      	str	r3, [r4, #4]
 801e3e8:	9b05      	ldr	r3, [sp, #20]
 801e3ea:	6861      	ldr	r1, [r4, #4]
 801e3ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	9303      	str	r3, [sp, #12]
 801e3f4:	ab0a      	add	r3, sp, #40	; 0x28
 801e3f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e3fa:	ab09      	add	r3, sp, #36	; 0x24
 801e3fc:	ec49 8b10 	vmov	d0, r8, r9
 801e400:	9300      	str	r3, [sp, #0]
 801e402:	6022      	str	r2, [r4, #0]
 801e404:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e408:	4628      	mov	r0, r5
 801e40a:	f7ff fecd 	bl	801e1a8 <__cvt>
 801e40e:	9b06      	ldr	r3, [sp, #24]
 801e410:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e412:	2b47      	cmp	r3, #71	; 0x47
 801e414:	4680      	mov	r8, r0
 801e416:	d108      	bne.n	801e42a <_printf_float+0x142>
 801e418:	1cc8      	adds	r0, r1, #3
 801e41a:	db02      	blt.n	801e422 <_printf_float+0x13a>
 801e41c:	6863      	ldr	r3, [r4, #4]
 801e41e:	4299      	cmp	r1, r3
 801e420:	dd41      	ble.n	801e4a6 <_printf_float+0x1be>
 801e422:	f1ab 0b02 	sub.w	fp, fp, #2
 801e426:	fa5f fb8b 	uxtb.w	fp, fp
 801e42a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e42e:	d820      	bhi.n	801e472 <_printf_float+0x18a>
 801e430:	3901      	subs	r1, #1
 801e432:	465a      	mov	r2, fp
 801e434:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e438:	9109      	str	r1, [sp, #36]	; 0x24
 801e43a:	f7ff ff17 	bl	801e26c <__exponent>
 801e43e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e440:	1813      	adds	r3, r2, r0
 801e442:	2a01      	cmp	r2, #1
 801e444:	4681      	mov	r9, r0
 801e446:	6123      	str	r3, [r4, #16]
 801e448:	dc02      	bgt.n	801e450 <_printf_float+0x168>
 801e44a:	6822      	ldr	r2, [r4, #0]
 801e44c:	07d2      	lsls	r2, r2, #31
 801e44e:	d501      	bpl.n	801e454 <_printf_float+0x16c>
 801e450:	3301      	adds	r3, #1
 801e452:	6123      	str	r3, [r4, #16]
 801e454:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d09c      	beq.n	801e396 <_printf_float+0xae>
 801e45c:	232d      	movs	r3, #45	; 0x2d
 801e45e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e462:	e798      	b.n	801e396 <_printf_float+0xae>
 801e464:	9a06      	ldr	r2, [sp, #24]
 801e466:	2a47      	cmp	r2, #71	; 0x47
 801e468:	d1be      	bne.n	801e3e8 <_printf_float+0x100>
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d1bc      	bne.n	801e3e8 <_printf_float+0x100>
 801e46e:	2301      	movs	r3, #1
 801e470:	e7b9      	b.n	801e3e6 <_printf_float+0xfe>
 801e472:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e476:	d118      	bne.n	801e4aa <_printf_float+0x1c2>
 801e478:	2900      	cmp	r1, #0
 801e47a:	6863      	ldr	r3, [r4, #4]
 801e47c:	dd0b      	ble.n	801e496 <_printf_float+0x1ae>
 801e47e:	6121      	str	r1, [r4, #16]
 801e480:	b913      	cbnz	r3, 801e488 <_printf_float+0x1a0>
 801e482:	6822      	ldr	r2, [r4, #0]
 801e484:	07d0      	lsls	r0, r2, #31
 801e486:	d502      	bpl.n	801e48e <_printf_float+0x1a6>
 801e488:	3301      	adds	r3, #1
 801e48a:	440b      	add	r3, r1
 801e48c:	6123      	str	r3, [r4, #16]
 801e48e:	65a1      	str	r1, [r4, #88]	; 0x58
 801e490:	f04f 0900 	mov.w	r9, #0
 801e494:	e7de      	b.n	801e454 <_printf_float+0x16c>
 801e496:	b913      	cbnz	r3, 801e49e <_printf_float+0x1b6>
 801e498:	6822      	ldr	r2, [r4, #0]
 801e49a:	07d2      	lsls	r2, r2, #31
 801e49c:	d501      	bpl.n	801e4a2 <_printf_float+0x1ba>
 801e49e:	3302      	adds	r3, #2
 801e4a0:	e7f4      	b.n	801e48c <_printf_float+0x1a4>
 801e4a2:	2301      	movs	r3, #1
 801e4a4:	e7f2      	b.n	801e48c <_printf_float+0x1a4>
 801e4a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4ac:	4299      	cmp	r1, r3
 801e4ae:	db05      	blt.n	801e4bc <_printf_float+0x1d4>
 801e4b0:	6823      	ldr	r3, [r4, #0]
 801e4b2:	6121      	str	r1, [r4, #16]
 801e4b4:	07d8      	lsls	r0, r3, #31
 801e4b6:	d5ea      	bpl.n	801e48e <_printf_float+0x1a6>
 801e4b8:	1c4b      	adds	r3, r1, #1
 801e4ba:	e7e7      	b.n	801e48c <_printf_float+0x1a4>
 801e4bc:	2900      	cmp	r1, #0
 801e4be:	bfd4      	ite	le
 801e4c0:	f1c1 0202 	rsble	r2, r1, #2
 801e4c4:	2201      	movgt	r2, #1
 801e4c6:	4413      	add	r3, r2
 801e4c8:	e7e0      	b.n	801e48c <_printf_float+0x1a4>
 801e4ca:	6823      	ldr	r3, [r4, #0]
 801e4cc:	055a      	lsls	r2, r3, #21
 801e4ce:	d407      	bmi.n	801e4e0 <_printf_float+0x1f8>
 801e4d0:	6923      	ldr	r3, [r4, #16]
 801e4d2:	4642      	mov	r2, r8
 801e4d4:	4631      	mov	r1, r6
 801e4d6:	4628      	mov	r0, r5
 801e4d8:	47b8      	blx	r7
 801e4da:	3001      	adds	r0, #1
 801e4dc:	d12c      	bne.n	801e538 <_printf_float+0x250>
 801e4de:	e764      	b.n	801e3aa <_printf_float+0xc2>
 801e4e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e4e4:	f240 80e0 	bls.w	801e6a8 <_printf_float+0x3c0>
 801e4e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e4ec:	2200      	movs	r2, #0
 801e4ee:	2300      	movs	r3, #0
 801e4f0:	f7e2 faea 	bl	8000ac8 <__aeabi_dcmpeq>
 801e4f4:	2800      	cmp	r0, #0
 801e4f6:	d034      	beq.n	801e562 <_printf_float+0x27a>
 801e4f8:	4a37      	ldr	r2, [pc, #220]	; (801e5d8 <_printf_float+0x2f0>)
 801e4fa:	2301      	movs	r3, #1
 801e4fc:	4631      	mov	r1, r6
 801e4fe:	4628      	mov	r0, r5
 801e500:	47b8      	blx	r7
 801e502:	3001      	adds	r0, #1
 801e504:	f43f af51 	beq.w	801e3aa <_printf_float+0xc2>
 801e508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e50c:	429a      	cmp	r2, r3
 801e50e:	db02      	blt.n	801e516 <_printf_float+0x22e>
 801e510:	6823      	ldr	r3, [r4, #0]
 801e512:	07d8      	lsls	r0, r3, #31
 801e514:	d510      	bpl.n	801e538 <_printf_float+0x250>
 801e516:	ee18 3a10 	vmov	r3, s16
 801e51a:	4652      	mov	r2, sl
 801e51c:	4631      	mov	r1, r6
 801e51e:	4628      	mov	r0, r5
 801e520:	47b8      	blx	r7
 801e522:	3001      	adds	r0, #1
 801e524:	f43f af41 	beq.w	801e3aa <_printf_float+0xc2>
 801e528:	f04f 0800 	mov.w	r8, #0
 801e52c:	f104 091a 	add.w	r9, r4, #26
 801e530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e532:	3b01      	subs	r3, #1
 801e534:	4543      	cmp	r3, r8
 801e536:	dc09      	bgt.n	801e54c <_printf_float+0x264>
 801e538:	6823      	ldr	r3, [r4, #0]
 801e53a:	079b      	lsls	r3, r3, #30
 801e53c:	f100 8105 	bmi.w	801e74a <_printf_float+0x462>
 801e540:	68e0      	ldr	r0, [r4, #12]
 801e542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e544:	4298      	cmp	r0, r3
 801e546:	bfb8      	it	lt
 801e548:	4618      	movlt	r0, r3
 801e54a:	e730      	b.n	801e3ae <_printf_float+0xc6>
 801e54c:	2301      	movs	r3, #1
 801e54e:	464a      	mov	r2, r9
 801e550:	4631      	mov	r1, r6
 801e552:	4628      	mov	r0, r5
 801e554:	47b8      	blx	r7
 801e556:	3001      	adds	r0, #1
 801e558:	f43f af27 	beq.w	801e3aa <_printf_float+0xc2>
 801e55c:	f108 0801 	add.w	r8, r8, #1
 801e560:	e7e6      	b.n	801e530 <_printf_float+0x248>
 801e562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e564:	2b00      	cmp	r3, #0
 801e566:	dc39      	bgt.n	801e5dc <_printf_float+0x2f4>
 801e568:	4a1b      	ldr	r2, [pc, #108]	; (801e5d8 <_printf_float+0x2f0>)
 801e56a:	2301      	movs	r3, #1
 801e56c:	4631      	mov	r1, r6
 801e56e:	4628      	mov	r0, r5
 801e570:	47b8      	blx	r7
 801e572:	3001      	adds	r0, #1
 801e574:	f43f af19 	beq.w	801e3aa <_printf_float+0xc2>
 801e578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e57c:	4313      	orrs	r3, r2
 801e57e:	d102      	bne.n	801e586 <_printf_float+0x29e>
 801e580:	6823      	ldr	r3, [r4, #0]
 801e582:	07d9      	lsls	r1, r3, #31
 801e584:	d5d8      	bpl.n	801e538 <_printf_float+0x250>
 801e586:	ee18 3a10 	vmov	r3, s16
 801e58a:	4652      	mov	r2, sl
 801e58c:	4631      	mov	r1, r6
 801e58e:	4628      	mov	r0, r5
 801e590:	47b8      	blx	r7
 801e592:	3001      	adds	r0, #1
 801e594:	f43f af09 	beq.w	801e3aa <_printf_float+0xc2>
 801e598:	f04f 0900 	mov.w	r9, #0
 801e59c:	f104 0a1a 	add.w	sl, r4, #26
 801e5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5a2:	425b      	negs	r3, r3
 801e5a4:	454b      	cmp	r3, r9
 801e5a6:	dc01      	bgt.n	801e5ac <_printf_float+0x2c4>
 801e5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5aa:	e792      	b.n	801e4d2 <_printf_float+0x1ea>
 801e5ac:	2301      	movs	r3, #1
 801e5ae:	4652      	mov	r2, sl
 801e5b0:	4631      	mov	r1, r6
 801e5b2:	4628      	mov	r0, r5
 801e5b4:	47b8      	blx	r7
 801e5b6:	3001      	adds	r0, #1
 801e5b8:	f43f aef7 	beq.w	801e3aa <_printf_float+0xc2>
 801e5bc:	f109 0901 	add.w	r9, r9, #1
 801e5c0:	e7ee      	b.n	801e5a0 <_printf_float+0x2b8>
 801e5c2:	bf00      	nop
 801e5c4:	7fefffff 	.word	0x7fefffff
 801e5c8:	08026844 	.word	0x08026844
 801e5cc:	08026848 	.word	0x08026848
 801e5d0:	08026850 	.word	0x08026850
 801e5d4:	0802684c 	.word	0x0802684c
 801e5d8:	08026b79 	.word	0x08026b79
 801e5dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e5de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e5e0:	429a      	cmp	r2, r3
 801e5e2:	bfa8      	it	ge
 801e5e4:	461a      	movge	r2, r3
 801e5e6:	2a00      	cmp	r2, #0
 801e5e8:	4691      	mov	r9, r2
 801e5ea:	dc37      	bgt.n	801e65c <_printf_float+0x374>
 801e5ec:	f04f 0b00 	mov.w	fp, #0
 801e5f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e5f4:	f104 021a 	add.w	r2, r4, #26
 801e5f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e5fa:	9305      	str	r3, [sp, #20]
 801e5fc:	eba3 0309 	sub.w	r3, r3, r9
 801e600:	455b      	cmp	r3, fp
 801e602:	dc33      	bgt.n	801e66c <_printf_float+0x384>
 801e604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e608:	429a      	cmp	r2, r3
 801e60a:	db3b      	blt.n	801e684 <_printf_float+0x39c>
 801e60c:	6823      	ldr	r3, [r4, #0]
 801e60e:	07da      	lsls	r2, r3, #31
 801e610:	d438      	bmi.n	801e684 <_printf_float+0x39c>
 801e612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e614:	9b05      	ldr	r3, [sp, #20]
 801e616:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e618:	1ad3      	subs	r3, r2, r3
 801e61a:	eba2 0901 	sub.w	r9, r2, r1
 801e61e:	4599      	cmp	r9, r3
 801e620:	bfa8      	it	ge
 801e622:	4699      	movge	r9, r3
 801e624:	f1b9 0f00 	cmp.w	r9, #0
 801e628:	dc35      	bgt.n	801e696 <_printf_float+0x3ae>
 801e62a:	f04f 0800 	mov.w	r8, #0
 801e62e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e632:	f104 0a1a 	add.w	sl, r4, #26
 801e636:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e63a:	1a9b      	subs	r3, r3, r2
 801e63c:	eba3 0309 	sub.w	r3, r3, r9
 801e640:	4543      	cmp	r3, r8
 801e642:	f77f af79 	ble.w	801e538 <_printf_float+0x250>
 801e646:	2301      	movs	r3, #1
 801e648:	4652      	mov	r2, sl
 801e64a:	4631      	mov	r1, r6
 801e64c:	4628      	mov	r0, r5
 801e64e:	47b8      	blx	r7
 801e650:	3001      	adds	r0, #1
 801e652:	f43f aeaa 	beq.w	801e3aa <_printf_float+0xc2>
 801e656:	f108 0801 	add.w	r8, r8, #1
 801e65a:	e7ec      	b.n	801e636 <_printf_float+0x34e>
 801e65c:	4613      	mov	r3, r2
 801e65e:	4631      	mov	r1, r6
 801e660:	4642      	mov	r2, r8
 801e662:	4628      	mov	r0, r5
 801e664:	47b8      	blx	r7
 801e666:	3001      	adds	r0, #1
 801e668:	d1c0      	bne.n	801e5ec <_printf_float+0x304>
 801e66a:	e69e      	b.n	801e3aa <_printf_float+0xc2>
 801e66c:	2301      	movs	r3, #1
 801e66e:	4631      	mov	r1, r6
 801e670:	4628      	mov	r0, r5
 801e672:	9205      	str	r2, [sp, #20]
 801e674:	47b8      	blx	r7
 801e676:	3001      	adds	r0, #1
 801e678:	f43f ae97 	beq.w	801e3aa <_printf_float+0xc2>
 801e67c:	9a05      	ldr	r2, [sp, #20]
 801e67e:	f10b 0b01 	add.w	fp, fp, #1
 801e682:	e7b9      	b.n	801e5f8 <_printf_float+0x310>
 801e684:	ee18 3a10 	vmov	r3, s16
 801e688:	4652      	mov	r2, sl
 801e68a:	4631      	mov	r1, r6
 801e68c:	4628      	mov	r0, r5
 801e68e:	47b8      	blx	r7
 801e690:	3001      	adds	r0, #1
 801e692:	d1be      	bne.n	801e612 <_printf_float+0x32a>
 801e694:	e689      	b.n	801e3aa <_printf_float+0xc2>
 801e696:	9a05      	ldr	r2, [sp, #20]
 801e698:	464b      	mov	r3, r9
 801e69a:	4442      	add	r2, r8
 801e69c:	4631      	mov	r1, r6
 801e69e:	4628      	mov	r0, r5
 801e6a0:	47b8      	blx	r7
 801e6a2:	3001      	adds	r0, #1
 801e6a4:	d1c1      	bne.n	801e62a <_printf_float+0x342>
 801e6a6:	e680      	b.n	801e3aa <_printf_float+0xc2>
 801e6a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e6aa:	2a01      	cmp	r2, #1
 801e6ac:	dc01      	bgt.n	801e6b2 <_printf_float+0x3ca>
 801e6ae:	07db      	lsls	r3, r3, #31
 801e6b0:	d538      	bpl.n	801e724 <_printf_float+0x43c>
 801e6b2:	2301      	movs	r3, #1
 801e6b4:	4642      	mov	r2, r8
 801e6b6:	4631      	mov	r1, r6
 801e6b8:	4628      	mov	r0, r5
 801e6ba:	47b8      	blx	r7
 801e6bc:	3001      	adds	r0, #1
 801e6be:	f43f ae74 	beq.w	801e3aa <_printf_float+0xc2>
 801e6c2:	ee18 3a10 	vmov	r3, s16
 801e6c6:	4652      	mov	r2, sl
 801e6c8:	4631      	mov	r1, r6
 801e6ca:	4628      	mov	r0, r5
 801e6cc:	47b8      	blx	r7
 801e6ce:	3001      	adds	r0, #1
 801e6d0:	f43f ae6b 	beq.w	801e3aa <_printf_float+0xc2>
 801e6d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e6d8:	2200      	movs	r2, #0
 801e6da:	2300      	movs	r3, #0
 801e6dc:	f7e2 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 801e6e0:	b9d8      	cbnz	r0, 801e71a <_printf_float+0x432>
 801e6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6e4:	f108 0201 	add.w	r2, r8, #1
 801e6e8:	3b01      	subs	r3, #1
 801e6ea:	4631      	mov	r1, r6
 801e6ec:	4628      	mov	r0, r5
 801e6ee:	47b8      	blx	r7
 801e6f0:	3001      	adds	r0, #1
 801e6f2:	d10e      	bne.n	801e712 <_printf_float+0x42a>
 801e6f4:	e659      	b.n	801e3aa <_printf_float+0xc2>
 801e6f6:	2301      	movs	r3, #1
 801e6f8:	4652      	mov	r2, sl
 801e6fa:	4631      	mov	r1, r6
 801e6fc:	4628      	mov	r0, r5
 801e6fe:	47b8      	blx	r7
 801e700:	3001      	adds	r0, #1
 801e702:	f43f ae52 	beq.w	801e3aa <_printf_float+0xc2>
 801e706:	f108 0801 	add.w	r8, r8, #1
 801e70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e70c:	3b01      	subs	r3, #1
 801e70e:	4543      	cmp	r3, r8
 801e710:	dcf1      	bgt.n	801e6f6 <_printf_float+0x40e>
 801e712:	464b      	mov	r3, r9
 801e714:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e718:	e6dc      	b.n	801e4d4 <_printf_float+0x1ec>
 801e71a:	f04f 0800 	mov.w	r8, #0
 801e71e:	f104 0a1a 	add.w	sl, r4, #26
 801e722:	e7f2      	b.n	801e70a <_printf_float+0x422>
 801e724:	2301      	movs	r3, #1
 801e726:	4642      	mov	r2, r8
 801e728:	e7df      	b.n	801e6ea <_printf_float+0x402>
 801e72a:	2301      	movs	r3, #1
 801e72c:	464a      	mov	r2, r9
 801e72e:	4631      	mov	r1, r6
 801e730:	4628      	mov	r0, r5
 801e732:	47b8      	blx	r7
 801e734:	3001      	adds	r0, #1
 801e736:	f43f ae38 	beq.w	801e3aa <_printf_float+0xc2>
 801e73a:	f108 0801 	add.w	r8, r8, #1
 801e73e:	68e3      	ldr	r3, [r4, #12]
 801e740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e742:	1a5b      	subs	r3, r3, r1
 801e744:	4543      	cmp	r3, r8
 801e746:	dcf0      	bgt.n	801e72a <_printf_float+0x442>
 801e748:	e6fa      	b.n	801e540 <_printf_float+0x258>
 801e74a:	f04f 0800 	mov.w	r8, #0
 801e74e:	f104 0919 	add.w	r9, r4, #25
 801e752:	e7f4      	b.n	801e73e <_printf_float+0x456>

0801e754 <_printf_common>:
 801e754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e758:	4616      	mov	r6, r2
 801e75a:	4699      	mov	r9, r3
 801e75c:	688a      	ldr	r2, [r1, #8]
 801e75e:	690b      	ldr	r3, [r1, #16]
 801e760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e764:	4293      	cmp	r3, r2
 801e766:	bfb8      	it	lt
 801e768:	4613      	movlt	r3, r2
 801e76a:	6033      	str	r3, [r6, #0]
 801e76c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e770:	4607      	mov	r7, r0
 801e772:	460c      	mov	r4, r1
 801e774:	b10a      	cbz	r2, 801e77a <_printf_common+0x26>
 801e776:	3301      	adds	r3, #1
 801e778:	6033      	str	r3, [r6, #0]
 801e77a:	6823      	ldr	r3, [r4, #0]
 801e77c:	0699      	lsls	r1, r3, #26
 801e77e:	bf42      	ittt	mi
 801e780:	6833      	ldrmi	r3, [r6, #0]
 801e782:	3302      	addmi	r3, #2
 801e784:	6033      	strmi	r3, [r6, #0]
 801e786:	6825      	ldr	r5, [r4, #0]
 801e788:	f015 0506 	ands.w	r5, r5, #6
 801e78c:	d106      	bne.n	801e79c <_printf_common+0x48>
 801e78e:	f104 0a19 	add.w	sl, r4, #25
 801e792:	68e3      	ldr	r3, [r4, #12]
 801e794:	6832      	ldr	r2, [r6, #0]
 801e796:	1a9b      	subs	r3, r3, r2
 801e798:	42ab      	cmp	r3, r5
 801e79a:	dc26      	bgt.n	801e7ea <_printf_common+0x96>
 801e79c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e7a0:	1e13      	subs	r3, r2, #0
 801e7a2:	6822      	ldr	r2, [r4, #0]
 801e7a4:	bf18      	it	ne
 801e7a6:	2301      	movne	r3, #1
 801e7a8:	0692      	lsls	r2, r2, #26
 801e7aa:	d42b      	bmi.n	801e804 <_printf_common+0xb0>
 801e7ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e7b0:	4649      	mov	r1, r9
 801e7b2:	4638      	mov	r0, r7
 801e7b4:	47c0      	blx	r8
 801e7b6:	3001      	adds	r0, #1
 801e7b8:	d01e      	beq.n	801e7f8 <_printf_common+0xa4>
 801e7ba:	6823      	ldr	r3, [r4, #0]
 801e7bc:	68e5      	ldr	r5, [r4, #12]
 801e7be:	6832      	ldr	r2, [r6, #0]
 801e7c0:	f003 0306 	and.w	r3, r3, #6
 801e7c4:	2b04      	cmp	r3, #4
 801e7c6:	bf08      	it	eq
 801e7c8:	1aad      	subeq	r5, r5, r2
 801e7ca:	68a3      	ldr	r3, [r4, #8]
 801e7cc:	6922      	ldr	r2, [r4, #16]
 801e7ce:	bf0c      	ite	eq
 801e7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e7d4:	2500      	movne	r5, #0
 801e7d6:	4293      	cmp	r3, r2
 801e7d8:	bfc4      	itt	gt
 801e7da:	1a9b      	subgt	r3, r3, r2
 801e7dc:	18ed      	addgt	r5, r5, r3
 801e7de:	2600      	movs	r6, #0
 801e7e0:	341a      	adds	r4, #26
 801e7e2:	42b5      	cmp	r5, r6
 801e7e4:	d11a      	bne.n	801e81c <_printf_common+0xc8>
 801e7e6:	2000      	movs	r0, #0
 801e7e8:	e008      	b.n	801e7fc <_printf_common+0xa8>
 801e7ea:	2301      	movs	r3, #1
 801e7ec:	4652      	mov	r2, sl
 801e7ee:	4649      	mov	r1, r9
 801e7f0:	4638      	mov	r0, r7
 801e7f2:	47c0      	blx	r8
 801e7f4:	3001      	adds	r0, #1
 801e7f6:	d103      	bne.n	801e800 <_printf_common+0xac>
 801e7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e800:	3501      	adds	r5, #1
 801e802:	e7c6      	b.n	801e792 <_printf_common+0x3e>
 801e804:	18e1      	adds	r1, r4, r3
 801e806:	1c5a      	adds	r2, r3, #1
 801e808:	2030      	movs	r0, #48	; 0x30
 801e80a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e80e:	4422      	add	r2, r4
 801e810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e818:	3302      	adds	r3, #2
 801e81a:	e7c7      	b.n	801e7ac <_printf_common+0x58>
 801e81c:	2301      	movs	r3, #1
 801e81e:	4622      	mov	r2, r4
 801e820:	4649      	mov	r1, r9
 801e822:	4638      	mov	r0, r7
 801e824:	47c0      	blx	r8
 801e826:	3001      	adds	r0, #1
 801e828:	d0e6      	beq.n	801e7f8 <_printf_common+0xa4>
 801e82a:	3601      	adds	r6, #1
 801e82c:	e7d9      	b.n	801e7e2 <_printf_common+0x8e>
	...

0801e830 <_printf_i>:
 801e830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e834:	460c      	mov	r4, r1
 801e836:	4691      	mov	r9, r2
 801e838:	7e27      	ldrb	r7, [r4, #24]
 801e83a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e83c:	2f78      	cmp	r7, #120	; 0x78
 801e83e:	4680      	mov	r8, r0
 801e840:	469a      	mov	sl, r3
 801e842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e846:	d807      	bhi.n	801e858 <_printf_i+0x28>
 801e848:	2f62      	cmp	r7, #98	; 0x62
 801e84a:	d80a      	bhi.n	801e862 <_printf_i+0x32>
 801e84c:	2f00      	cmp	r7, #0
 801e84e:	f000 80d8 	beq.w	801ea02 <_printf_i+0x1d2>
 801e852:	2f58      	cmp	r7, #88	; 0x58
 801e854:	f000 80a3 	beq.w	801e99e <_printf_i+0x16e>
 801e858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e85c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e860:	e03a      	b.n	801e8d8 <_printf_i+0xa8>
 801e862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e866:	2b15      	cmp	r3, #21
 801e868:	d8f6      	bhi.n	801e858 <_printf_i+0x28>
 801e86a:	a001      	add	r0, pc, #4	; (adr r0, 801e870 <_printf_i+0x40>)
 801e86c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801e870:	0801e8c9 	.word	0x0801e8c9
 801e874:	0801e8dd 	.word	0x0801e8dd
 801e878:	0801e859 	.word	0x0801e859
 801e87c:	0801e859 	.word	0x0801e859
 801e880:	0801e859 	.word	0x0801e859
 801e884:	0801e859 	.word	0x0801e859
 801e888:	0801e8dd 	.word	0x0801e8dd
 801e88c:	0801e859 	.word	0x0801e859
 801e890:	0801e859 	.word	0x0801e859
 801e894:	0801e859 	.word	0x0801e859
 801e898:	0801e859 	.word	0x0801e859
 801e89c:	0801e9e9 	.word	0x0801e9e9
 801e8a0:	0801e90d 	.word	0x0801e90d
 801e8a4:	0801e9cb 	.word	0x0801e9cb
 801e8a8:	0801e859 	.word	0x0801e859
 801e8ac:	0801e859 	.word	0x0801e859
 801e8b0:	0801ea0b 	.word	0x0801ea0b
 801e8b4:	0801e859 	.word	0x0801e859
 801e8b8:	0801e90d 	.word	0x0801e90d
 801e8bc:	0801e859 	.word	0x0801e859
 801e8c0:	0801e859 	.word	0x0801e859
 801e8c4:	0801e9d3 	.word	0x0801e9d3
 801e8c8:	680b      	ldr	r3, [r1, #0]
 801e8ca:	1d1a      	adds	r2, r3, #4
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	600a      	str	r2, [r1, #0]
 801e8d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e8d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e8d8:	2301      	movs	r3, #1
 801e8da:	e0a3      	b.n	801ea24 <_printf_i+0x1f4>
 801e8dc:	6825      	ldr	r5, [r4, #0]
 801e8de:	6808      	ldr	r0, [r1, #0]
 801e8e0:	062e      	lsls	r6, r5, #24
 801e8e2:	f100 0304 	add.w	r3, r0, #4
 801e8e6:	d50a      	bpl.n	801e8fe <_printf_i+0xce>
 801e8e8:	6805      	ldr	r5, [r0, #0]
 801e8ea:	600b      	str	r3, [r1, #0]
 801e8ec:	2d00      	cmp	r5, #0
 801e8ee:	da03      	bge.n	801e8f8 <_printf_i+0xc8>
 801e8f0:	232d      	movs	r3, #45	; 0x2d
 801e8f2:	426d      	negs	r5, r5
 801e8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e8f8:	485e      	ldr	r0, [pc, #376]	; (801ea74 <_printf_i+0x244>)
 801e8fa:	230a      	movs	r3, #10
 801e8fc:	e019      	b.n	801e932 <_printf_i+0x102>
 801e8fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 801e902:	6805      	ldr	r5, [r0, #0]
 801e904:	600b      	str	r3, [r1, #0]
 801e906:	bf18      	it	ne
 801e908:	b22d      	sxthne	r5, r5
 801e90a:	e7ef      	b.n	801e8ec <_printf_i+0xbc>
 801e90c:	680b      	ldr	r3, [r1, #0]
 801e90e:	6825      	ldr	r5, [r4, #0]
 801e910:	1d18      	adds	r0, r3, #4
 801e912:	6008      	str	r0, [r1, #0]
 801e914:	0628      	lsls	r0, r5, #24
 801e916:	d501      	bpl.n	801e91c <_printf_i+0xec>
 801e918:	681d      	ldr	r5, [r3, #0]
 801e91a:	e002      	b.n	801e922 <_printf_i+0xf2>
 801e91c:	0669      	lsls	r1, r5, #25
 801e91e:	d5fb      	bpl.n	801e918 <_printf_i+0xe8>
 801e920:	881d      	ldrh	r5, [r3, #0]
 801e922:	4854      	ldr	r0, [pc, #336]	; (801ea74 <_printf_i+0x244>)
 801e924:	2f6f      	cmp	r7, #111	; 0x6f
 801e926:	bf0c      	ite	eq
 801e928:	2308      	moveq	r3, #8
 801e92a:	230a      	movne	r3, #10
 801e92c:	2100      	movs	r1, #0
 801e92e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e932:	6866      	ldr	r6, [r4, #4]
 801e934:	60a6      	str	r6, [r4, #8]
 801e936:	2e00      	cmp	r6, #0
 801e938:	bfa2      	ittt	ge
 801e93a:	6821      	ldrge	r1, [r4, #0]
 801e93c:	f021 0104 	bicge.w	r1, r1, #4
 801e940:	6021      	strge	r1, [r4, #0]
 801e942:	b90d      	cbnz	r5, 801e948 <_printf_i+0x118>
 801e944:	2e00      	cmp	r6, #0
 801e946:	d04d      	beq.n	801e9e4 <_printf_i+0x1b4>
 801e948:	4616      	mov	r6, r2
 801e94a:	fbb5 f1f3 	udiv	r1, r5, r3
 801e94e:	fb03 5711 	mls	r7, r3, r1, r5
 801e952:	5dc7      	ldrb	r7, [r0, r7]
 801e954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e958:	462f      	mov	r7, r5
 801e95a:	42bb      	cmp	r3, r7
 801e95c:	460d      	mov	r5, r1
 801e95e:	d9f4      	bls.n	801e94a <_printf_i+0x11a>
 801e960:	2b08      	cmp	r3, #8
 801e962:	d10b      	bne.n	801e97c <_printf_i+0x14c>
 801e964:	6823      	ldr	r3, [r4, #0]
 801e966:	07df      	lsls	r7, r3, #31
 801e968:	d508      	bpl.n	801e97c <_printf_i+0x14c>
 801e96a:	6923      	ldr	r3, [r4, #16]
 801e96c:	6861      	ldr	r1, [r4, #4]
 801e96e:	4299      	cmp	r1, r3
 801e970:	bfde      	ittt	le
 801e972:	2330      	movle	r3, #48	; 0x30
 801e974:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e978:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801e97c:	1b92      	subs	r2, r2, r6
 801e97e:	6122      	str	r2, [r4, #16]
 801e980:	f8cd a000 	str.w	sl, [sp]
 801e984:	464b      	mov	r3, r9
 801e986:	aa03      	add	r2, sp, #12
 801e988:	4621      	mov	r1, r4
 801e98a:	4640      	mov	r0, r8
 801e98c:	f7ff fee2 	bl	801e754 <_printf_common>
 801e990:	3001      	adds	r0, #1
 801e992:	d14c      	bne.n	801ea2e <_printf_i+0x1fe>
 801e994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e998:	b004      	add	sp, #16
 801e99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e99e:	4835      	ldr	r0, [pc, #212]	; (801ea74 <_printf_i+0x244>)
 801e9a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e9a4:	6823      	ldr	r3, [r4, #0]
 801e9a6:	680e      	ldr	r6, [r1, #0]
 801e9a8:	061f      	lsls	r7, r3, #24
 801e9aa:	f856 5b04 	ldr.w	r5, [r6], #4
 801e9ae:	600e      	str	r6, [r1, #0]
 801e9b0:	d514      	bpl.n	801e9dc <_printf_i+0x1ac>
 801e9b2:	07d9      	lsls	r1, r3, #31
 801e9b4:	bf44      	itt	mi
 801e9b6:	f043 0320 	orrmi.w	r3, r3, #32
 801e9ba:	6023      	strmi	r3, [r4, #0]
 801e9bc:	b91d      	cbnz	r5, 801e9c6 <_printf_i+0x196>
 801e9be:	6823      	ldr	r3, [r4, #0]
 801e9c0:	f023 0320 	bic.w	r3, r3, #32
 801e9c4:	6023      	str	r3, [r4, #0]
 801e9c6:	2310      	movs	r3, #16
 801e9c8:	e7b0      	b.n	801e92c <_printf_i+0xfc>
 801e9ca:	6823      	ldr	r3, [r4, #0]
 801e9cc:	f043 0320 	orr.w	r3, r3, #32
 801e9d0:	6023      	str	r3, [r4, #0]
 801e9d2:	2378      	movs	r3, #120	; 0x78
 801e9d4:	4828      	ldr	r0, [pc, #160]	; (801ea78 <_printf_i+0x248>)
 801e9d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e9da:	e7e3      	b.n	801e9a4 <_printf_i+0x174>
 801e9dc:	065e      	lsls	r6, r3, #25
 801e9de:	bf48      	it	mi
 801e9e0:	b2ad      	uxthmi	r5, r5
 801e9e2:	e7e6      	b.n	801e9b2 <_printf_i+0x182>
 801e9e4:	4616      	mov	r6, r2
 801e9e6:	e7bb      	b.n	801e960 <_printf_i+0x130>
 801e9e8:	680b      	ldr	r3, [r1, #0]
 801e9ea:	6826      	ldr	r6, [r4, #0]
 801e9ec:	6960      	ldr	r0, [r4, #20]
 801e9ee:	1d1d      	adds	r5, r3, #4
 801e9f0:	600d      	str	r5, [r1, #0]
 801e9f2:	0635      	lsls	r5, r6, #24
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	d501      	bpl.n	801e9fc <_printf_i+0x1cc>
 801e9f8:	6018      	str	r0, [r3, #0]
 801e9fa:	e002      	b.n	801ea02 <_printf_i+0x1d2>
 801e9fc:	0671      	lsls	r1, r6, #25
 801e9fe:	d5fb      	bpl.n	801e9f8 <_printf_i+0x1c8>
 801ea00:	8018      	strh	r0, [r3, #0]
 801ea02:	2300      	movs	r3, #0
 801ea04:	6123      	str	r3, [r4, #16]
 801ea06:	4616      	mov	r6, r2
 801ea08:	e7ba      	b.n	801e980 <_printf_i+0x150>
 801ea0a:	680b      	ldr	r3, [r1, #0]
 801ea0c:	1d1a      	adds	r2, r3, #4
 801ea0e:	600a      	str	r2, [r1, #0]
 801ea10:	681e      	ldr	r6, [r3, #0]
 801ea12:	6862      	ldr	r2, [r4, #4]
 801ea14:	2100      	movs	r1, #0
 801ea16:	4630      	mov	r0, r6
 801ea18:	f7e1 fbe2 	bl	80001e0 <memchr>
 801ea1c:	b108      	cbz	r0, 801ea22 <_printf_i+0x1f2>
 801ea1e:	1b80      	subs	r0, r0, r6
 801ea20:	6060      	str	r0, [r4, #4]
 801ea22:	6863      	ldr	r3, [r4, #4]
 801ea24:	6123      	str	r3, [r4, #16]
 801ea26:	2300      	movs	r3, #0
 801ea28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ea2c:	e7a8      	b.n	801e980 <_printf_i+0x150>
 801ea2e:	6923      	ldr	r3, [r4, #16]
 801ea30:	4632      	mov	r2, r6
 801ea32:	4649      	mov	r1, r9
 801ea34:	4640      	mov	r0, r8
 801ea36:	47d0      	blx	sl
 801ea38:	3001      	adds	r0, #1
 801ea3a:	d0ab      	beq.n	801e994 <_printf_i+0x164>
 801ea3c:	6823      	ldr	r3, [r4, #0]
 801ea3e:	079b      	lsls	r3, r3, #30
 801ea40:	d413      	bmi.n	801ea6a <_printf_i+0x23a>
 801ea42:	68e0      	ldr	r0, [r4, #12]
 801ea44:	9b03      	ldr	r3, [sp, #12]
 801ea46:	4298      	cmp	r0, r3
 801ea48:	bfb8      	it	lt
 801ea4a:	4618      	movlt	r0, r3
 801ea4c:	e7a4      	b.n	801e998 <_printf_i+0x168>
 801ea4e:	2301      	movs	r3, #1
 801ea50:	4632      	mov	r2, r6
 801ea52:	4649      	mov	r1, r9
 801ea54:	4640      	mov	r0, r8
 801ea56:	47d0      	blx	sl
 801ea58:	3001      	adds	r0, #1
 801ea5a:	d09b      	beq.n	801e994 <_printf_i+0x164>
 801ea5c:	3501      	adds	r5, #1
 801ea5e:	68e3      	ldr	r3, [r4, #12]
 801ea60:	9903      	ldr	r1, [sp, #12]
 801ea62:	1a5b      	subs	r3, r3, r1
 801ea64:	42ab      	cmp	r3, r5
 801ea66:	dcf2      	bgt.n	801ea4e <_printf_i+0x21e>
 801ea68:	e7eb      	b.n	801ea42 <_printf_i+0x212>
 801ea6a:	2500      	movs	r5, #0
 801ea6c:	f104 0619 	add.w	r6, r4, #25
 801ea70:	e7f5      	b.n	801ea5e <_printf_i+0x22e>
 801ea72:	bf00      	nop
 801ea74:	08026854 	.word	0x08026854
 801ea78:	08026865 	.word	0x08026865

0801ea7c <iprintf>:
 801ea7c:	b40f      	push	{r0, r1, r2, r3}
 801ea7e:	4b0a      	ldr	r3, [pc, #40]	; (801eaa8 <iprintf+0x2c>)
 801ea80:	b513      	push	{r0, r1, r4, lr}
 801ea82:	681c      	ldr	r4, [r3, #0]
 801ea84:	b124      	cbz	r4, 801ea90 <iprintf+0x14>
 801ea86:	69a3      	ldr	r3, [r4, #24]
 801ea88:	b913      	cbnz	r3, 801ea90 <iprintf+0x14>
 801ea8a:	4620      	mov	r0, r4
 801ea8c:	f7ff f9ce 	bl	801de2c <__sinit>
 801ea90:	ab05      	add	r3, sp, #20
 801ea92:	9a04      	ldr	r2, [sp, #16]
 801ea94:	68a1      	ldr	r1, [r4, #8]
 801ea96:	9301      	str	r3, [sp, #4]
 801ea98:	4620      	mov	r0, r4
 801ea9a:	f002 fae9 	bl	8021070 <_vfiprintf_r>
 801ea9e:	b002      	add	sp, #8
 801eaa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eaa4:	b004      	add	sp, #16
 801eaa6:	4770      	bx	lr
 801eaa8:	20000064 	.word	0x20000064

0801eaac <_puts_r>:
 801eaac:	b570      	push	{r4, r5, r6, lr}
 801eaae:	460e      	mov	r6, r1
 801eab0:	4605      	mov	r5, r0
 801eab2:	b118      	cbz	r0, 801eabc <_puts_r+0x10>
 801eab4:	6983      	ldr	r3, [r0, #24]
 801eab6:	b90b      	cbnz	r3, 801eabc <_puts_r+0x10>
 801eab8:	f7ff f9b8 	bl	801de2c <__sinit>
 801eabc:	69ab      	ldr	r3, [r5, #24]
 801eabe:	68ac      	ldr	r4, [r5, #8]
 801eac0:	b913      	cbnz	r3, 801eac8 <_puts_r+0x1c>
 801eac2:	4628      	mov	r0, r5
 801eac4:	f7ff f9b2 	bl	801de2c <__sinit>
 801eac8:	4b2c      	ldr	r3, [pc, #176]	; (801eb7c <_puts_r+0xd0>)
 801eaca:	429c      	cmp	r4, r3
 801eacc:	d120      	bne.n	801eb10 <_puts_r+0x64>
 801eace:	686c      	ldr	r4, [r5, #4]
 801ead0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ead2:	07db      	lsls	r3, r3, #31
 801ead4:	d405      	bmi.n	801eae2 <_puts_r+0x36>
 801ead6:	89a3      	ldrh	r3, [r4, #12]
 801ead8:	0598      	lsls	r0, r3, #22
 801eada:	d402      	bmi.n	801eae2 <_puts_r+0x36>
 801eadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eade:	f7ff fa68 	bl	801dfb2 <__retarget_lock_acquire_recursive>
 801eae2:	89a3      	ldrh	r3, [r4, #12]
 801eae4:	0719      	lsls	r1, r3, #28
 801eae6:	d51d      	bpl.n	801eb24 <_puts_r+0x78>
 801eae8:	6923      	ldr	r3, [r4, #16]
 801eaea:	b1db      	cbz	r3, 801eb24 <_puts_r+0x78>
 801eaec:	3e01      	subs	r6, #1
 801eaee:	68a3      	ldr	r3, [r4, #8]
 801eaf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801eaf4:	3b01      	subs	r3, #1
 801eaf6:	60a3      	str	r3, [r4, #8]
 801eaf8:	bb39      	cbnz	r1, 801eb4a <_puts_r+0x9e>
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	da38      	bge.n	801eb70 <_puts_r+0xc4>
 801eafe:	4622      	mov	r2, r4
 801eb00:	210a      	movs	r1, #10
 801eb02:	4628      	mov	r0, r5
 801eb04:	f000 faf8 	bl	801f0f8 <__swbuf_r>
 801eb08:	3001      	adds	r0, #1
 801eb0a:	d011      	beq.n	801eb30 <_puts_r+0x84>
 801eb0c:	250a      	movs	r5, #10
 801eb0e:	e011      	b.n	801eb34 <_puts_r+0x88>
 801eb10:	4b1b      	ldr	r3, [pc, #108]	; (801eb80 <_puts_r+0xd4>)
 801eb12:	429c      	cmp	r4, r3
 801eb14:	d101      	bne.n	801eb1a <_puts_r+0x6e>
 801eb16:	68ac      	ldr	r4, [r5, #8]
 801eb18:	e7da      	b.n	801ead0 <_puts_r+0x24>
 801eb1a:	4b1a      	ldr	r3, [pc, #104]	; (801eb84 <_puts_r+0xd8>)
 801eb1c:	429c      	cmp	r4, r3
 801eb1e:	bf08      	it	eq
 801eb20:	68ec      	ldreq	r4, [r5, #12]
 801eb22:	e7d5      	b.n	801ead0 <_puts_r+0x24>
 801eb24:	4621      	mov	r1, r4
 801eb26:	4628      	mov	r0, r5
 801eb28:	f000 fb4a 	bl	801f1c0 <__swsetup_r>
 801eb2c:	2800      	cmp	r0, #0
 801eb2e:	d0dd      	beq.n	801eaec <_puts_r+0x40>
 801eb30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801eb34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eb36:	07da      	lsls	r2, r3, #31
 801eb38:	d405      	bmi.n	801eb46 <_puts_r+0x9a>
 801eb3a:	89a3      	ldrh	r3, [r4, #12]
 801eb3c:	059b      	lsls	r3, r3, #22
 801eb3e:	d402      	bmi.n	801eb46 <_puts_r+0x9a>
 801eb40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb42:	f7ff fa37 	bl	801dfb4 <__retarget_lock_release_recursive>
 801eb46:	4628      	mov	r0, r5
 801eb48:	bd70      	pop	{r4, r5, r6, pc}
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	da04      	bge.n	801eb58 <_puts_r+0xac>
 801eb4e:	69a2      	ldr	r2, [r4, #24]
 801eb50:	429a      	cmp	r2, r3
 801eb52:	dc06      	bgt.n	801eb62 <_puts_r+0xb6>
 801eb54:	290a      	cmp	r1, #10
 801eb56:	d004      	beq.n	801eb62 <_puts_r+0xb6>
 801eb58:	6823      	ldr	r3, [r4, #0]
 801eb5a:	1c5a      	adds	r2, r3, #1
 801eb5c:	6022      	str	r2, [r4, #0]
 801eb5e:	7019      	strb	r1, [r3, #0]
 801eb60:	e7c5      	b.n	801eaee <_puts_r+0x42>
 801eb62:	4622      	mov	r2, r4
 801eb64:	4628      	mov	r0, r5
 801eb66:	f000 fac7 	bl	801f0f8 <__swbuf_r>
 801eb6a:	3001      	adds	r0, #1
 801eb6c:	d1bf      	bne.n	801eaee <_puts_r+0x42>
 801eb6e:	e7df      	b.n	801eb30 <_puts_r+0x84>
 801eb70:	6823      	ldr	r3, [r4, #0]
 801eb72:	250a      	movs	r5, #10
 801eb74:	1c5a      	adds	r2, r3, #1
 801eb76:	6022      	str	r2, [r4, #0]
 801eb78:	701d      	strb	r5, [r3, #0]
 801eb7a:	e7db      	b.n	801eb34 <_puts_r+0x88>
 801eb7c:	08026800 	.word	0x08026800
 801eb80:	08026820 	.word	0x08026820
 801eb84:	080267e0 	.word	0x080267e0

0801eb88 <puts>:
 801eb88:	4b02      	ldr	r3, [pc, #8]	; (801eb94 <puts+0xc>)
 801eb8a:	4601      	mov	r1, r0
 801eb8c:	6818      	ldr	r0, [r3, #0]
 801eb8e:	f7ff bf8d 	b.w	801eaac <_puts_r>
 801eb92:	bf00      	nop
 801eb94:	20000064 	.word	0x20000064

0801eb98 <rand>:
 801eb98:	4b17      	ldr	r3, [pc, #92]	; (801ebf8 <rand+0x60>)
 801eb9a:	b510      	push	{r4, lr}
 801eb9c:	681c      	ldr	r4, [r3, #0]
 801eb9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801eba0:	b9b3      	cbnz	r3, 801ebd0 <rand+0x38>
 801eba2:	2018      	movs	r0, #24
 801eba4:	f7ff fa08 	bl	801dfb8 <malloc>
 801eba8:	63a0      	str	r0, [r4, #56]	; 0x38
 801ebaa:	b928      	cbnz	r0, 801ebb8 <rand+0x20>
 801ebac:	4602      	mov	r2, r0
 801ebae:	4b13      	ldr	r3, [pc, #76]	; (801ebfc <rand+0x64>)
 801ebb0:	4813      	ldr	r0, [pc, #76]	; (801ec00 <rand+0x68>)
 801ebb2:	214e      	movs	r1, #78	; 0x4e
 801ebb4:	f000 fb72 	bl	801f29c <__assert_func>
 801ebb8:	4a12      	ldr	r2, [pc, #72]	; (801ec04 <rand+0x6c>)
 801ebba:	4b13      	ldr	r3, [pc, #76]	; (801ec08 <rand+0x70>)
 801ebbc:	e9c0 2300 	strd	r2, r3, [r0]
 801ebc0:	4b12      	ldr	r3, [pc, #72]	; (801ec0c <rand+0x74>)
 801ebc2:	6083      	str	r3, [r0, #8]
 801ebc4:	230b      	movs	r3, #11
 801ebc6:	8183      	strh	r3, [r0, #12]
 801ebc8:	2201      	movs	r2, #1
 801ebca:	2300      	movs	r3, #0
 801ebcc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ebd0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ebd2:	480f      	ldr	r0, [pc, #60]	; (801ec10 <rand+0x78>)
 801ebd4:	690a      	ldr	r2, [r1, #16]
 801ebd6:	694b      	ldr	r3, [r1, #20]
 801ebd8:	4c0e      	ldr	r4, [pc, #56]	; (801ec14 <rand+0x7c>)
 801ebda:	4350      	muls	r0, r2
 801ebdc:	fb04 0003 	mla	r0, r4, r3, r0
 801ebe0:	fba2 3404 	umull	r3, r4, r2, r4
 801ebe4:	1c5a      	adds	r2, r3, #1
 801ebe6:	4404      	add	r4, r0
 801ebe8:	f144 0000 	adc.w	r0, r4, #0
 801ebec:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ebf0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ebf4:	bd10      	pop	{r4, pc}
 801ebf6:	bf00      	nop
 801ebf8:	20000064 	.word	0x20000064
 801ebfc:	08026876 	.word	0x08026876
 801ec00:	0802688d 	.word	0x0802688d
 801ec04:	abcd330e 	.word	0xabcd330e
 801ec08:	e66d1234 	.word	0xe66d1234
 801ec0c:	0005deec 	.word	0x0005deec
 801ec10:	5851f42d 	.word	0x5851f42d
 801ec14:	4c957f2d 	.word	0x4c957f2d

0801ec18 <cleanup_glue>:
 801ec18:	b538      	push	{r3, r4, r5, lr}
 801ec1a:	460c      	mov	r4, r1
 801ec1c:	6809      	ldr	r1, [r1, #0]
 801ec1e:	4605      	mov	r5, r0
 801ec20:	b109      	cbz	r1, 801ec26 <cleanup_glue+0xe>
 801ec22:	f7ff fff9 	bl	801ec18 <cleanup_glue>
 801ec26:	4621      	mov	r1, r4
 801ec28:	4628      	mov	r0, r5
 801ec2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ec2e:	f7ff ba11 	b.w	801e054 <_free_r>
	...

0801ec34 <_reclaim_reent>:
 801ec34:	4b2c      	ldr	r3, [pc, #176]	; (801ece8 <_reclaim_reent+0xb4>)
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	4283      	cmp	r3, r0
 801ec3a:	b570      	push	{r4, r5, r6, lr}
 801ec3c:	4604      	mov	r4, r0
 801ec3e:	d051      	beq.n	801ece4 <_reclaim_reent+0xb0>
 801ec40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ec42:	b143      	cbz	r3, 801ec56 <_reclaim_reent+0x22>
 801ec44:	68db      	ldr	r3, [r3, #12]
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	d14a      	bne.n	801ece0 <_reclaim_reent+0xac>
 801ec4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ec4c:	6819      	ldr	r1, [r3, #0]
 801ec4e:	b111      	cbz	r1, 801ec56 <_reclaim_reent+0x22>
 801ec50:	4620      	mov	r0, r4
 801ec52:	f7ff f9ff 	bl	801e054 <_free_r>
 801ec56:	6961      	ldr	r1, [r4, #20]
 801ec58:	b111      	cbz	r1, 801ec60 <_reclaim_reent+0x2c>
 801ec5a:	4620      	mov	r0, r4
 801ec5c:	f7ff f9fa 	bl	801e054 <_free_r>
 801ec60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ec62:	b111      	cbz	r1, 801ec6a <_reclaim_reent+0x36>
 801ec64:	4620      	mov	r0, r4
 801ec66:	f7ff f9f5 	bl	801e054 <_free_r>
 801ec6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ec6c:	b111      	cbz	r1, 801ec74 <_reclaim_reent+0x40>
 801ec6e:	4620      	mov	r0, r4
 801ec70:	f7ff f9f0 	bl	801e054 <_free_r>
 801ec74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ec76:	b111      	cbz	r1, 801ec7e <_reclaim_reent+0x4a>
 801ec78:	4620      	mov	r0, r4
 801ec7a:	f7ff f9eb 	bl	801e054 <_free_r>
 801ec7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ec80:	b111      	cbz	r1, 801ec88 <_reclaim_reent+0x54>
 801ec82:	4620      	mov	r0, r4
 801ec84:	f7ff f9e6 	bl	801e054 <_free_r>
 801ec88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ec8a:	b111      	cbz	r1, 801ec92 <_reclaim_reent+0x5e>
 801ec8c:	4620      	mov	r0, r4
 801ec8e:	f7ff f9e1 	bl	801e054 <_free_r>
 801ec92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ec94:	b111      	cbz	r1, 801ec9c <_reclaim_reent+0x68>
 801ec96:	4620      	mov	r0, r4
 801ec98:	f7ff f9dc 	bl	801e054 <_free_r>
 801ec9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ec9e:	b111      	cbz	r1, 801eca6 <_reclaim_reent+0x72>
 801eca0:	4620      	mov	r0, r4
 801eca2:	f7ff f9d7 	bl	801e054 <_free_r>
 801eca6:	69a3      	ldr	r3, [r4, #24]
 801eca8:	b1e3      	cbz	r3, 801ece4 <_reclaim_reent+0xb0>
 801ecaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ecac:	4620      	mov	r0, r4
 801ecae:	4798      	blx	r3
 801ecb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ecb2:	b1b9      	cbz	r1, 801ece4 <_reclaim_reent+0xb0>
 801ecb4:	4620      	mov	r0, r4
 801ecb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ecba:	f7ff bfad 	b.w	801ec18 <cleanup_glue>
 801ecbe:	5949      	ldr	r1, [r1, r5]
 801ecc0:	b941      	cbnz	r1, 801ecd4 <_reclaim_reent+0xa0>
 801ecc2:	3504      	adds	r5, #4
 801ecc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ecc6:	2d80      	cmp	r5, #128	; 0x80
 801ecc8:	68d9      	ldr	r1, [r3, #12]
 801ecca:	d1f8      	bne.n	801ecbe <_reclaim_reent+0x8a>
 801eccc:	4620      	mov	r0, r4
 801ecce:	f7ff f9c1 	bl	801e054 <_free_r>
 801ecd2:	e7ba      	b.n	801ec4a <_reclaim_reent+0x16>
 801ecd4:	680e      	ldr	r6, [r1, #0]
 801ecd6:	4620      	mov	r0, r4
 801ecd8:	f7ff f9bc 	bl	801e054 <_free_r>
 801ecdc:	4631      	mov	r1, r6
 801ecde:	e7ef      	b.n	801ecc0 <_reclaim_reent+0x8c>
 801ece0:	2500      	movs	r5, #0
 801ece2:	e7ef      	b.n	801ecc4 <_reclaim_reent+0x90>
 801ece4:	bd70      	pop	{r4, r5, r6, pc}
 801ece6:	bf00      	nop
 801ece8:	20000064 	.word	0x20000064

0801ecec <_sbrk_r>:
 801ecec:	b538      	push	{r3, r4, r5, lr}
 801ecee:	4d06      	ldr	r5, [pc, #24]	; (801ed08 <_sbrk_r+0x1c>)
 801ecf0:	2300      	movs	r3, #0
 801ecf2:	4604      	mov	r4, r0
 801ecf4:	4608      	mov	r0, r1
 801ecf6:	602b      	str	r3, [r5, #0]
 801ecf8:	f7e3 fbd4 	bl	80024a4 <_sbrk>
 801ecfc:	1c43      	adds	r3, r0, #1
 801ecfe:	d102      	bne.n	801ed06 <_sbrk_r+0x1a>
 801ed00:	682b      	ldr	r3, [r5, #0]
 801ed02:	b103      	cbz	r3, 801ed06 <_sbrk_r+0x1a>
 801ed04:	6023      	str	r3, [r4, #0]
 801ed06:	bd38      	pop	{r3, r4, r5, pc}
 801ed08:	2001b118 	.word	0x2001b118

0801ed0c <sniprintf>:
 801ed0c:	b40c      	push	{r2, r3}
 801ed0e:	b530      	push	{r4, r5, lr}
 801ed10:	4b17      	ldr	r3, [pc, #92]	; (801ed70 <sniprintf+0x64>)
 801ed12:	1e0c      	subs	r4, r1, #0
 801ed14:	681d      	ldr	r5, [r3, #0]
 801ed16:	b09d      	sub	sp, #116	; 0x74
 801ed18:	da08      	bge.n	801ed2c <sniprintf+0x20>
 801ed1a:	238b      	movs	r3, #139	; 0x8b
 801ed1c:	602b      	str	r3, [r5, #0]
 801ed1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ed22:	b01d      	add	sp, #116	; 0x74
 801ed24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ed28:	b002      	add	sp, #8
 801ed2a:	4770      	bx	lr
 801ed2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ed30:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ed34:	bf14      	ite	ne
 801ed36:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801ed3a:	4623      	moveq	r3, r4
 801ed3c:	9304      	str	r3, [sp, #16]
 801ed3e:	9307      	str	r3, [sp, #28]
 801ed40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ed44:	9002      	str	r0, [sp, #8]
 801ed46:	9006      	str	r0, [sp, #24]
 801ed48:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ed4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ed4e:	ab21      	add	r3, sp, #132	; 0x84
 801ed50:	a902      	add	r1, sp, #8
 801ed52:	4628      	mov	r0, r5
 801ed54:	9301      	str	r3, [sp, #4]
 801ed56:	f001 fe8f 	bl	8020a78 <_svfiprintf_r>
 801ed5a:	1c43      	adds	r3, r0, #1
 801ed5c:	bfbc      	itt	lt
 801ed5e:	238b      	movlt	r3, #139	; 0x8b
 801ed60:	602b      	strlt	r3, [r5, #0]
 801ed62:	2c00      	cmp	r4, #0
 801ed64:	d0dd      	beq.n	801ed22 <sniprintf+0x16>
 801ed66:	9b02      	ldr	r3, [sp, #8]
 801ed68:	2200      	movs	r2, #0
 801ed6a:	701a      	strb	r2, [r3, #0]
 801ed6c:	e7d9      	b.n	801ed22 <sniprintf+0x16>
 801ed6e:	bf00      	nop
 801ed70:	20000064 	.word	0x20000064

0801ed74 <siprintf>:
 801ed74:	b40e      	push	{r1, r2, r3}
 801ed76:	b500      	push	{lr}
 801ed78:	b09c      	sub	sp, #112	; 0x70
 801ed7a:	ab1d      	add	r3, sp, #116	; 0x74
 801ed7c:	9002      	str	r0, [sp, #8]
 801ed7e:	9006      	str	r0, [sp, #24]
 801ed80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ed84:	4809      	ldr	r0, [pc, #36]	; (801edac <siprintf+0x38>)
 801ed86:	9107      	str	r1, [sp, #28]
 801ed88:	9104      	str	r1, [sp, #16]
 801ed8a:	4909      	ldr	r1, [pc, #36]	; (801edb0 <siprintf+0x3c>)
 801ed8c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed90:	9105      	str	r1, [sp, #20]
 801ed92:	6800      	ldr	r0, [r0, #0]
 801ed94:	9301      	str	r3, [sp, #4]
 801ed96:	a902      	add	r1, sp, #8
 801ed98:	f001 fe6e 	bl	8020a78 <_svfiprintf_r>
 801ed9c:	9b02      	ldr	r3, [sp, #8]
 801ed9e:	2200      	movs	r2, #0
 801eda0:	701a      	strb	r2, [r3, #0]
 801eda2:	b01c      	add	sp, #112	; 0x70
 801eda4:	f85d eb04 	ldr.w	lr, [sp], #4
 801eda8:	b003      	add	sp, #12
 801edaa:	4770      	bx	lr
 801edac:	20000064 	.word	0x20000064
 801edb0:	ffff0208 	.word	0xffff0208

0801edb4 <siscanf>:
 801edb4:	b40e      	push	{r1, r2, r3}
 801edb6:	b510      	push	{r4, lr}
 801edb8:	b09f      	sub	sp, #124	; 0x7c
 801edba:	ac21      	add	r4, sp, #132	; 0x84
 801edbc:	f44f 7101 	mov.w	r1, #516	; 0x204
 801edc0:	f854 2b04 	ldr.w	r2, [r4], #4
 801edc4:	9201      	str	r2, [sp, #4]
 801edc6:	f8ad 101c 	strh.w	r1, [sp, #28]
 801edca:	9004      	str	r0, [sp, #16]
 801edcc:	9008      	str	r0, [sp, #32]
 801edce:	f7e1 f9ff 	bl	80001d0 <strlen>
 801edd2:	4b0c      	ldr	r3, [pc, #48]	; (801ee04 <siscanf+0x50>)
 801edd4:	9005      	str	r0, [sp, #20]
 801edd6:	9009      	str	r0, [sp, #36]	; 0x24
 801edd8:	930d      	str	r3, [sp, #52]	; 0x34
 801edda:	480b      	ldr	r0, [pc, #44]	; (801ee08 <siscanf+0x54>)
 801eddc:	9a01      	ldr	r2, [sp, #4]
 801edde:	6800      	ldr	r0, [r0, #0]
 801ede0:	9403      	str	r4, [sp, #12]
 801ede2:	2300      	movs	r3, #0
 801ede4:	9311      	str	r3, [sp, #68]	; 0x44
 801ede6:	9316      	str	r3, [sp, #88]	; 0x58
 801ede8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801edec:	f8ad 301e 	strh.w	r3, [sp, #30]
 801edf0:	a904      	add	r1, sp, #16
 801edf2:	4623      	mov	r3, r4
 801edf4:	f001 ff9a 	bl	8020d2c <__ssvfiscanf_r>
 801edf8:	b01f      	add	sp, #124	; 0x7c
 801edfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edfe:	b003      	add	sp, #12
 801ee00:	4770      	bx	lr
 801ee02:	bf00      	nop
 801ee04:	0801ee2f 	.word	0x0801ee2f
 801ee08:	20000064 	.word	0x20000064

0801ee0c <__sread>:
 801ee0c:	b510      	push	{r4, lr}
 801ee0e:	460c      	mov	r4, r1
 801ee10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee14:	f002 fba8 	bl	8021568 <_read_r>
 801ee18:	2800      	cmp	r0, #0
 801ee1a:	bfab      	itete	ge
 801ee1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ee1e:	89a3      	ldrhlt	r3, [r4, #12]
 801ee20:	181b      	addge	r3, r3, r0
 801ee22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ee26:	bfac      	ite	ge
 801ee28:	6563      	strge	r3, [r4, #84]	; 0x54
 801ee2a:	81a3      	strhlt	r3, [r4, #12]
 801ee2c:	bd10      	pop	{r4, pc}

0801ee2e <__seofread>:
 801ee2e:	2000      	movs	r0, #0
 801ee30:	4770      	bx	lr

0801ee32 <__swrite>:
 801ee32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee36:	461f      	mov	r7, r3
 801ee38:	898b      	ldrh	r3, [r1, #12]
 801ee3a:	05db      	lsls	r3, r3, #23
 801ee3c:	4605      	mov	r5, r0
 801ee3e:	460c      	mov	r4, r1
 801ee40:	4616      	mov	r6, r2
 801ee42:	d505      	bpl.n	801ee50 <__swrite+0x1e>
 801ee44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee48:	2302      	movs	r3, #2
 801ee4a:	2200      	movs	r2, #0
 801ee4c:	f001 f9aa 	bl	80201a4 <_lseek_r>
 801ee50:	89a3      	ldrh	r3, [r4, #12]
 801ee52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ee5a:	81a3      	strh	r3, [r4, #12]
 801ee5c:	4632      	mov	r2, r6
 801ee5e:	463b      	mov	r3, r7
 801ee60:	4628      	mov	r0, r5
 801ee62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ee66:	f000 b999 	b.w	801f19c <_write_r>

0801ee6a <__sseek>:
 801ee6a:	b510      	push	{r4, lr}
 801ee6c:	460c      	mov	r4, r1
 801ee6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee72:	f001 f997 	bl	80201a4 <_lseek_r>
 801ee76:	1c43      	adds	r3, r0, #1
 801ee78:	89a3      	ldrh	r3, [r4, #12]
 801ee7a:	bf15      	itete	ne
 801ee7c:	6560      	strne	r0, [r4, #84]	; 0x54
 801ee7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ee82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ee86:	81a3      	strheq	r3, [r4, #12]
 801ee88:	bf18      	it	ne
 801ee8a:	81a3      	strhne	r3, [r4, #12]
 801ee8c:	bd10      	pop	{r4, pc}

0801ee8e <__sclose>:
 801ee8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee92:	f000 ba21 	b.w	801f2d8 <_close_r>

0801ee96 <strncat>:
 801ee96:	b530      	push	{r4, r5, lr}
 801ee98:	4604      	mov	r4, r0
 801ee9a:	7825      	ldrb	r5, [r4, #0]
 801ee9c:	4623      	mov	r3, r4
 801ee9e:	3401      	adds	r4, #1
 801eea0:	2d00      	cmp	r5, #0
 801eea2:	d1fa      	bne.n	801ee9a <strncat+0x4>
 801eea4:	3a01      	subs	r2, #1
 801eea6:	d304      	bcc.n	801eeb2 <strncat+0x1c>
 801eea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eeac:	f803 4b01 	strb.w	r4, [r3], #1
 801eeb0:	b904      	cbnz	r4, 801eeb4 <strncat+0x1e>
 801eeb2:	bd30      	pop	{r4, r5, pc}
 801eeb4:	2a00      	cmp	r2, #0
 801eeb6:	d1f5      	bne.n	801eea4 <strncat+0xe>
 801eeb8:	701a      	strb	r2, [r3, #0]
 801eeba:	e7f3      	b.n	801eea4 <strncat+0xe>

0801eebc <strncmp>:
 801eebc:	b510      	push	{r4, lr}
 801eebe:	b16a      	cbz	r2, 801eedc <strncmp+0x20>
 801eec0:	3901      	subs	r1, #1
 801eec2:	1884      	adds	r4, r0, r2
 801eec4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801eec8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801eecc:	4293      	cmp	r3, r2
 801eece:	d103      	bne.n	801eed8 <strncmp+0x1c>
 801eed0:	42a0      	cmp	r0, r4
 801eed2:	d001      	beq.n	801eed8 <strncmp+0x1c>
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	d1f5      	bne.n	801eec4 <strncmp+0x8>
 801eed8:	1a98      	subs	r0, r3, r2
 801eeda:	bd10      	pop	{r4, pc}
 801eedc:	4610      	mov	r0, r2
 801eede:	e7fc      	b.n	801eeda <strncmp+0x1e>

0801eee0 <strncpy>:
 801eee0:	b510      	push	{r4, lr}
 801eee2:	3901      	subs	r1, #1
 801eee4:	4603      	mov	r3, r0
 801eee6:	b132      	cbz	r2, 801eef6 <strncpy+0x16>
 801eee8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801eeec:	f803 4b01 	strb.w	r4, [r3], #1
 801eef0:	3a01      	subs	r2, #1
 801eef2:	2c00      	cmp	r4, #0
 801eef4:	d1f7      	bne.n	801eee6 <strncpy+0x6>
 801eef6:	441a      	add	r2, r3
 801eef8:	2100      	movs	r1, #0
 801eefa:	4293      	cmp	r3, r2
 801eefc:	d100      	bne.n	801ef00 <strncpy+0x20>
 801eefe:	bd10      	pop	{r4, pc}
 801ef00:	f803 1b01 	strb.w	r1, [r3], #1
 801ef04:	e7f9      	b.n	801eefa <strncpy+0x1a>

0801ef06 <strstr>:
 801ef06:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef08:	780c      	ldrb	r4, [r1, #0]
 801ef0a:	b164      	cbz	r4, 801ef26 <strstr+0x20>
 801ef0c:	4603      	mov	r3, r0
 801ef0e:	781a      	ldrb	r2, [r3, #0]
 801ef10:	4618      	mov	r0, r3
 801ef12:	1c5e      	adds	r6, r3, #1
 801ef14:	b90a      	cbnz	r2, 801ef1a <strstr+0x14>
 801ef16:	4610      	mov	r0, r2
 801ef18:	e005      	b.n	801ef26 <strstr+0x20>
 801ef1a:	4294      	cmp	r4, r2
 801ef1c:	d108      	bne.n	801ef30 <strstr+0x2a>
 801ef1e:	460d      	mov	r5, r1
 801ef20:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801ef24:	b902      	cbnz	r2, 801ef28 <strstr+0x22>
 801ef26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef28:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801ef2c:	4297      	cmp	r7, r2
 801ef2e:	d0f7      	beq.n	801ef20 <strstr+0x1a>
 801ef30:	4633      	mov	r3, r6
 801ef32:	e7ec      	b.n	801ef0e <strstr+0x8>

0801ef34 <strtok>:
 801ef34:	4b16      	ldr	r3, [pc, #88]	; (801ef90 <strtok+0x5c>)
 801ef36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ef38:	681e      	ldr	r6, [r3, #0]
 801ef3a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801ef3c:	4605      	mov	r5, r0
 801ef3e:	b9fc      	cbnz	r4, 801ef80 <strtok+0x4c>
 801ef40:	2050      	movs	r0, #80	; 0x50
 801ef42:	9101      	str	r1, [sp, #4]
 801ef44:	f7ff f838 	bl	801dfb8 <malloc>
 801ef48:	9901      	ldr	r1, [sp, #4]
 801ef4a:	65b0      	str	r0, [r6, #88]	; 0x58
 801ef4c:	4602      	mov	r2, r0
 801ef4e:	b920      	cbnz	r0, 801ef5a <strtok+0x26>
 801ef50:	4b10      	ldr	r3, [pc, #64]	; (801ef94 <strtok+0x60>)
 801ef52:	4811      	ldr	r0, [pc, #68]	; (801ef98 <strtok+0x64>)
 801ef54:	2157      	movs	r1, #87	; 0x57
 801ef56:	f000 f9a1 	bl	801f29c <__assert_func>
 801ef5a:	e9c0 4400 	strd	r4, r4, [r0]
 801ef5e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ef62:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ef66:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801ef6a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801ef6e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801ef72:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801ef76:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801ef7a:	6184      	str	r4, [r0, #24]
 801ef7c:	7704      	strb	r4, [r0, #28]
 801ef7e:	6244      	str	r4, [r0, #36]	; 0x24
 801ef80:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801ef82:	2301      	movs	r3, #1
 801ef84:	4628      	mov	r0, r5
 801ef86:	b002      	add	sp, #8
 801ef88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ef8c:	f000 b806 	b.w	801ef9c <__strtok_r>
 801ef90:	20000064 	.word	0x20000064
 801ef94:	08026876 	.word	0x08026876
 801ef98:	080268ec 	.word	0x080268ec

0801ef9c <__strtok_r>:
 801ef9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef9e:	b908      	cbnz	r0, 801efa4 <__strtok_r+0x8>
 801efa0:	6810      	ldr	r0, [r2, #0]
 801efa2:	b188      	cbz	r0, 801efc8 <__strtok_r+0x2c>
 801efa4:	4604      	mov	r4, r0
 801efa6:	4620      	mov	r0, r4
 801efa8:	f814 5b01 	ldrb.w	r5, [r4], #1
 801efac:	460f      	mov	r7, r1
 801efae:	f817 6b01 	ldrb.w	r6, [r7], #1
 801efb2:	b91e      	cbnz	r6, 801efbc <__strtok_r+0x20>
 801efb4:	b965      	cbnz	r5, 801efd0 <__strtok_r+0x34>
 801efb6:	6015      	str	r5, [r2, #0]
 801efb8:	4628      	mov	r0, r5
 801efba:	e005      	b.n	801efc8 <__strtok_r+0x2c>
 801efbc:	42b5      	cmp	r5, r6
 801efbe:	d1f6      	bne.n	801efae <__strtok_r+0x12>
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d1f0      	bne.n	801efa6 <__strtok_r+0xa>
 801efc4:	6014      	str	r4, [r2, #0]
 801efc6:	7003      	strb	r3, [r0, #0]
 801efc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efca:	461c      	mov	r4, r3
 801efcc:	e00c      	b.n	801efe8 <__strtok_r+0x4c>
 801efce:	b915      	cbnz	r5, 801efd6 <__strtok_r+0x3a>
 801efd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801efd4:	460e      	mov	r6, r1
 801efd6:	f816 5b01 	ldrb.w	r5, [r6], #1
 801efda:	42ab      	cmp	r3, r5
 801efdc:	d1f7      	bne.n	801efce <__strtok_r+0x32>
 801efde:	2b00      	cmp	r3, #0
 801efe0:	d0f3      	beq.n	801efca <__strtok_r+0x2e>
 801efe2:	2300      	movs	r3, #0
 801efe4:	f804 3c01 	strb.w	r3, [r4, #-1]
 801efe8:	6014      	str	r4, [r2, #0]
 801efea:	e7ed      	b.n	801efc8 <__strtok_r+0x2c>

0801efec <_strtol_l.isra.0>:
 801efec:	2b01      	cmp	r3, #1
 801efee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eff2:	d001      	beq.n	801eff8 <_strtol_l.isra.0+0xc>
 801eff4:	2b24      	cmp	r3, #36	; 0x24
 801eff6:	d906      	bls.n	801f006 <_strtol_l.isra.0+0x1a>
 801eff8:	f000 fff6 	bl	801ffe8 <__errno>
 801effc:	2316      	movs	r3, #22
 801effe:	6003      	str	r3, [r0, #0]
 801f000:	2000      	movs	r0, #0
 801f002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f006:	4f3a      	ldr	r7, [pc, #232]	; (801f0f0 <_strtol_l.isra.0+0x104>)
 801f008:	468e      	mov	lr, r1
 801f00a:	4676      	mov	r6, lr
 801f00c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f010:	5de5      	ldrb	r5, [r4, r7]
 801f012:	f015 0508 	ands.w	r5, r5, #8
 801f016:	d1f8      	bne.n	801f00a <_strtol_l.isra.0+0x1e>
 801f018:	2c2d      	cmp	r4, #45	; 0x2d
 801f01a:	d134      	bne.n	801f086 <_strtol_l.isra.0+0x9a>
 801f01c:	f89e 4000 	ldrb.w	r4, [lr]
 801f020:	f04f 0801 	mov.w	r8, #1
 801f024:	f106 0e02 	add.w	lr, r6, #2
 801f028:	2b00      	cmp	r3, #0
 801f02a:	d05c      	beq.n	801f0e6 <_strtol_l.isra.0+0xfa>
 801f02c:	2b10      	cmp	r3, #16
 801f02e:	d10c      	bne.n	801f04a <_strtol_l.isra.0+0x5e>
 801f030:	2c30      	cmp	r4, #48	; 0x30
 801f032:	d10a      	bne.n	801f04a <_strtol_l.isra.0+0x5e>
 801f034:	f89e 4000 	ldrb.w	r4, [lr]
 801f038:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f03c:	2c58      	cmp	r4, #88	; 0x58
 801f03e:	d14d      	bne.n	801f0dc <_strtol_l.isra.0+0xf0>
 801f040:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801f044:	2310      	movs	r3, #16
 801f046:	f10e 0e02 	add.w	lr, lr, #2
 801f04a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801f04e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801f052:	2600      	movs	r6, #0
 801f054:	fbbc f9f3 	udiv	r9, ip, r3
 801f058:	4635      	mov	r5, r6
 801f05a:	fb03 ca19 	mls	sl, r3, r9, ip
 801f05e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801f062:	2f09      	cmp	r7, #9
 801f064:	d818      	bhi.n	801f098 <_strtol_l.isra.0+0xac>
 801f066:	463c      	mov	r4, r7
 801f068:	42a3      	cmp	r3, r4
 801f06a:	dd24      	ble.n	801f0b6 <_strtol_l.isra.0+0xca>
 801f06c:	2e00      	cmp	r6, #0
 801f06e:	db1f      	blt.n	801f0b0 <_strtol_l.isra.0+0xc4>
 801f070:	45a9      	cmp	r9, r5
 801f072:	d31d      	bcc.n	801f0b0 <_strtol_l.isra.0+0xc4>
 801f074:	d101      	bne.n	801f07a <_strtol_l.isra.0+0x8e>
 801f076:	45a2      	cmp	sl, r4
 801f078:	db1a      	blt.n	801f0b0 <_strtol_l.isra.0+0xc4>
 801f07a:	fb05 4503 	mla	r5, r5, r3, r4
 801f07e:	2601      	movs	r6, #1
 801f080:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f084:	e7eb      	b.n	801f05e <_strtol_l.isra.0+0x72>
 801f086:	2c2b      	cmp	r4, #43	; 0x2b
 801f088:	bf08      	it	eq
 801f08a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801f08e:	46a8      	mov	r8, r5
 801f090:	bf08      	it	eq
 801f092:	f106 0e02 	addeq.w	lr, r6, #2
 801f096:	e7c7      	b.n	801f028 <_strtol_l.isra.0+0x3c>
 801f098:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801f09c:	2f19      	cmp	r7, #25
 801f09e:	d801      	bhi.n	801f0a4 <_strtol_l.isra.0+0xb8>
 801f0a0:	3c37      	subs	r4, #55	; 0x37
 801f0a2:	e7e1      	b.n	801f068 <_strtol_l.isra.0+0x7c>
 801f0a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801f0a8:	2f19      	cmp	r7, #25
 801f0aa:	d804      	bhi.n	801f0b6 <_strtol_l.isra.0+0xca>
 801f0ac:	3c57      	subs	r4, #87	; 0x57
 801f0ae:	e7db      	b.n	801f068 <_strtol_l.isra.0+0x7c>
 801f0b0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801f0b4:	e7e4      	b.n	801f080 <_strtol_l.isra.0+0x94>
 801f0b6:	2e00      	cmp	r6, #0
 801f0b8:	da05      	bge.n	801f0c6 <_strtol_l.isra.0+0xda>
 801f0ba:	2322      	movs	r3, #34	; 0x22
 801f0bc:	6003      	str	r3, [r0, #0]
 801f0be:	4665      	mov	r5, ip
 801f0c0:	b942      	cbnz	r2, 801f0d4 <_strtol_l.isra.0+0xe8>
 801f0c2:	4628      	mov	r0, r5
 801f0c4:	e79d      	b.n	801f002 <_strtol_l.isra.0+0x16>
 801f0c6:	f1b8 0f00 	cmp.w	r8, #0
 801f0ca:	d000      	beq.n	801f0ce <_strtol_l.isra.0+0xe2>
 801f0cc:	426d      	negs	r5, r5
 801f0ce:	2a00      	cmp	r2, #0
 801f0d0:	d0f7      	beq.n	801f0c2 <_strtol_l.isra.0+0xd6>
 801f0d2:	b10e      	cbz	r6, 801f0d8 <_strtol_l.isra.0+0xec>
 801f0d4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801f0d8:	6011      	str	r1, [r2, #0]
 801f0da:	e7f2      	b.n	801f0c2 <_strtol_l.isra.0+0xd6>
 801f0dc:	2430      	movs	r4, #48	; 0x30
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	d1b3      	bne.n	801f04a <_strtol_l.isra.0+0x5e>
 801f0e2:	2308      	movs	r3, #8
 801f0e4:	e7b1      	b.n	801f04a <_strtol_l.isra.0+0x5e>
 801f0e6:	2c30      	cmp	r4, #48	; 0x30
 801f0e8:	d0a4      	beq.n	801f034 <_strtol_l.isra.0+0x48>
 801f0ea:	230a      	movs	r3, #10
 801f0ec:	e7ad      	b.n	801f04a <_strtol_l.isra.0+0x5e>
 801f0ee:	bf00      	nop
 801f0f0:	080266dd 	.word	0x080266dd

0801f0f4 <_strtol_r>:
 801f0f4:	f7ff bf7a 	b.w	801efec <_strtol_l.isra.0>

0801f0f8 <__swbuf_r>:
 801f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0fa:	460e      	mov	r6, r1
 801f0fc:	4614      	mov	r4, r2
 801f0fe:	4605      	mov	r5, r0
 801f100:	b118      	cbz	r0, 801f10a <__swbuf_r+0x12>
 801f102:	6983      	ldr	r3, [r0, #24]
 801f104:	b90b      	cbnz	r3, 801f10a <__swbuf_r+0x12>
 801f106:	f7fe fe91 	bl	801de2c <__sinit>
 801f10a:	4b21      	ldr	r3, [pc, #132]	; (801f190 <__swbuf_r+0x98>)
 801f10c:	429c      	cmp	r4, r3
 801f10e:	d12b      	bne.n	801f168 <__swbuf_r+0x70>
 801f110:	686c      	ldr	r4, [r5, #4]
 801f112:	69a3      	ldr	r3, [r4, #24]
 801f114:	60a3      	str	r3, [r4, #8]
 801f116:	89a3      	ldrh	r3, [r4, #12]
 801f118:	071a      	lsls	r2, r3, #28
 801f11a:	d52f      	bpl.n	801f17c <__swbuf_r+0x84>
 801f11c:	6923      	ldr	r3, [r4, #16]
 801f11e:	b36b      	cbz	r3, 801f17c <__swbuf_r+0x84>
 801f120:	6923      	ldr	r3, [r4, #16]
 801f122:	6820      	ldr	r0, [r4, #0]
 801f124:	1ac0      	subs	r0, r0, r3
 801f126:	6963      	ldr	r3, [r4, #20]
 801f128:	b2f6      	uxtb	r6, r6
 801f12a:	4283      	cmp	r3, r0
 801f12c:	4637      	mov	r7, r6
 801f12e:	dc04      	bgt.n	801f13a <__swbuf_r+0x42>
 801f130:	4621      	mov	r1, r4
 801f132:	4628      	mov	r0, r5
 801f134:	f000 ffe4 	bl	8020100 <_fflush_r>
 801f138:	bb30      	cbnz	r0, 801f188 <__swbuf_r+0x90>
 801f13a:	68a3      	ldr	r3, [r4, #8]
 801f13c:	3b01      	subs	r3, #1
 801f13e:	60a3      	str	r3, [r4, #8]
 801f140:	6823      	ldr	r3, [r4, #0]
 801f142:	1c5a      	adds	r2, r3, #1
 801f144:	6022      	str	r2, [r4, #0]
 801f146:	701e      	strb	r6, [r3, #0]
 801f148:	6963      	ldr	r3, [r4, #20]
 801f14a:	3001      	adds	r0, #1
 801f14c:	4283      	cmp	r3, r0
 801f14e:	d004      	beq.n	801f15a <__swbuf_r+0x62>
 801f150:	89a3      	ldrh	r3, [r4, #12]
 801f152:	07db      	lsls	r3, r3, #31
 801f154:	d506      	bpl.n	801f164 <__swbuf_r+0x6c>
 801f156:	2e0a      	cmp	r6, #10
 801f158:	d104      	bne.n	801f164 <__swbuf_r+0x6c>
 801f15a:	4621      	mov	r1, r4
 801f15c:	4628      	mov	r0, r5
 801f15e:	f000 ffcf 	bl	8020100 <_fflush_r>
 801f162:	b988      	cbnz	r0, 801f188 <__swbuf_r+0x90>
 801f164:	4638      	mov	r0, r7
 801f166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f168:	4b0a      	ldr	r3, [pc, #40]	; (801f194 <__swbuf_r+0x9c>)
 801f16a:	429c      	cmp	r4, r3
 801f16c:	d101      	bne.n	801f172 <__swbuf_r+0x7a>
 801f16e:	68ac      	ldr	r4, [r5, #8]
 801f170:	e7cf      	b.n	801f112 <__swbuf_r+0x1a>
 801f172:	4b09      	ldr	r3, [pc, #36]	; (801f198 <__swbuf_r+0xa0>)
 801f174:	429c      	cmp	r4, r3
 801f176:	bf08      	it	eq
 801f178:	68ec      	ldreq	r4, [r5, #12]
 801f17a:	e7ca      	b.n	801f112 <__swbuf_r+0x1a>
 801f17c:	4621      	mov	r1, r4
 801f17e:	4628      	mov	r0, r5
 801f180:	f000 f81e 	bl	801f1c0 <__swsetup_r>
 801f184:	2800      	cmp	r0, #0
 801f186:	d0cb      	beq.n	801f120 <__swbuf_r+0x28>
 801f188:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801f18c:	e7ea      	b.n	801f164 <__swbuf_r+0x6c>
 801f18e:	bf00      	nop
 801f190:	08026800 	.word	0x08026800
 801f194:	08026820 	.word	0x08026820
 801f198:	080267e0 	.word	0x080267e0

0801f19c <_write_r>:
 801f19c:	b538      	push	{r3, r4, r5, lr}
 801f19e:	4d07      	ldr	r5, [pc, #28]	; (801f1bc <_write_r+0x20>)
 801f1a0:	4604      	mov	r4, r0
 801f1a2:	4608      	mov	r0, r1
 801f1a4:	4611      	mov	r1, r2
 801f1a6:	2200      	movs	r2, #0
 801f1a8:	602a      	str	r2, [r5, #0]
 801f1aa:	461a      	mov	r2, r3
 801f1ac:	f7e3 f929 	bl	8002402 <_write>
 801f1b0:	1c43      	adds	r3, r0, #1
 801f1b2:	d102      	bne.n	801f1ba <_write_r+0x1e>
 801f1b4:	682b      	ldr	r3, [r5, #0]
 801f1b6:	b103      	cbz	r3, 801f1ba <_write_r+0x1e>
 801f1b8:	6023      	str	r3, [r4, #0]
 801f1ba:	bd38      	pop	{r3, r4, r5, pc}
 801f1bc:	2001b118 	.word	0x2001b118

0801f1c0 <__swsetup_r>:
 801f1c0:	4b32      	ldr	r3, [pc, #200]	; (801f28c <__swsetup_r+0xcc>)
 801f1c2:	b570      	push	{r4, r5, r6, lr}
 801f1c4:	681d      	ldr	r5, [r3, #0]
 801f1c6:	4606      	mov	r6, r0
 801f1c8:	460c      	mov	r4, r1
 801f1ca:	b125      	cbz	r5, 801f1d6 <__swsetup_r+0x16>
 801f1cc:	69ab      	ldr	r3, [r5, #24]
 801f1ce:	b913      	cbnz	r3, 801f1d6 <__swsetup_r+0x16>
 801f1d0:	4628      	mov	r0, r5
 801f1d2:	f7fe fe2b 	bl	801de2c <__sinit>
 801f1d6:	4b2e      	ldr	r3, [pc, #184]	; (801f290 <__swsetup_r+0xd0>)
 801f1d8:	429c      	cmp	r4, r3
 801f1da:	d10f      	bne.n	801f1fc <__swsetup_r+0x3c>
 801f1dc:	686c      	ldr	r4, [r5, #4]
 801f1de:	89a3      	ldrh	r3, [r4, #12]
 801f1e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f1e4:	0719      	lsls	r1, r3, #28
 801f1e6:	d42c      	bmi.n	801f242 <__swsetup_r+0x82>
 801f1e8:	06dd      	lsls	r5, r3, #27
 801f1ea:	d411      	bmi.n	801f210 <__swsetup_r+0x50>
 801f1ec:	2309      	movs	r3, #9
 801f1ee:	6033      	str	r3, [r6, #0]
 801f1f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f1f4:	81a3      	strh	r3, [r4, #12]
 801f1f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f1fa:	e03e      	b.n	801f27a <__swsetup_r+0xba>
 801f1fc:	4b25      	ldr	r3, [pc, #148]	; (801f294 <__swsetup_r+0xd4>)
 801f1fe:	429c      	cmp	r4, r3
 801f200:	d101      	bne.n	801f206 <__swsetup_r+0x46>
 801f202:	68ac      	ldr	r4, [r5, #8]
 801f204:	e7eb      	b.n	801f1de <__swsetup_r+0x1e>
 801f206:	4b24      	ldr	r3, [pc, #144]	; (801f298 <__swsetup_r+0xd8>)
 801f208:	429c      	cmp	r4, r3
 801f20a:	bf08      	it	eq
 801f20c:	68ec      	ldreq	r4, [r5, #12]
 801f20e:	e7e6      	b.n	801f1de <__swsetup_r+0x1e>
 801f210:	0758      	lsls	r0, r3, #29
 801f212:	d512      	bpl.n	801f23a <__swsetup_r+0x7a>
 801f214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f216:	b141      	cbz	r1, 801f22a <__swsetup_r+0x6a>
 801f218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f21c:	4299      	cmp	r1, r3
 801f21e:	d002      	beq.n	801f226 <__swsetup_r+0x66>
 801f220:	4630      	mov	r0, r6
 801f222:	f7fe ff17 	bl	801e054 <_free_r>
 801f226:	2300      	movs	r3, #0
 801f228:	6363      	str	r3, [r4, #52]	; 0x34
 801f22a:	89a3      	ldrh	r3, [r4, #12]
 801f22c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f230:	81a3      	strh	r3, [r4, #12]
 801f232:	2300      	movs	r3, #0
 801f234:	6063      	str	r3, [r4, #4]
 801f236:	6923      	ldr	r3, [r4, #16]
 801f238:	6023      	str	r3, [r4, #0]
 801f23a:	89a3      	ldrh	r3, [r4, #12]
 801f23c:	f043 0308 	orr.w	r3, r3, #8
 801f240:	81a3      	strh	r3, [r4, #12]
 801f242:	6923      	ldr	r3, [r4, #16]
 801f244:	b94b      	cbnz	r3, 801f25a <__swsetup_r+0x9a>
 801f246:	89a3      	ldrh	r3, [r4, #12]
 801f248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f24c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f250:	d003      	beq.n	801f25a <__swsetup_r+0x9a>
 801f252:	4621      	mov	r1, r4
 801f254:	4630      	mov	r0, r6
 801f256:	f000 ffdb 	bl	8020210 <__smakebuf_r>
 801f25a:	89a0      	ldrh	r0, [r4, #12]
 801f25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f260:	f010 0301 	ands.w	r3, r0, #1
 801f264:	d00a      	beq.n	801f27c <__swsetup_r+0xbc>
 801f266:	2300      	movs	r3, #0
 801f268:	60a3      	str	r3, [r4, #8]
 801f26a:	6963      	ldr	r3, [r4, #20]
 801f26c:	425b      	negs	r3, r3
 801f26e:	61a3      	str	r3, [r4, #24]
 801f270:	6923      	ldr	r3, [r4, #16]
 801f272:	b943      	cbnz	r3, 801f286 <__swsetup_r+0xc6>
 801f274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f278:	d1ba      	bne.n	801f1f0 <__swsetup_r+0x30>
 801f27a:	bd70      	pop	{r4, r5, r6, pc}
 801f27c:	0781      	lsls	r1, r0, #30
 801f27e:	bf58      	it	pl
 801f280:	6963      	ldrpl	r3, [r4, #20]
 801f282:	60a3      	str	r3, [r4, #8]
 801f284:	e7f4      	b.n	801f270 <__swsetup_r+0xb0>
 801f286:	2000      	movs	r0, #0
 801f288:	e7f7      	b.n	801f27a <__swsetup_r+0xba>
 801f28a:	bf00      	nop
 801f28c:	20000064 	.word	0x20000064
 801f290:	08026800 	.word	0x08026800
 801f294:	08026820 	.word	0x08026820
 801f298:	080267e0 	.word	0x080267e0

0801f29c <__assert_func>:
 801f29c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f29e:	4614      	mov	r4, r2
 801f2a0:	461a      	mov	r2, r3
 801f2a2:	4b09      	ldr	r3, [pc, #36]	; (801f2c8 <__assert_func+0x2c>)
 801f2a4:	681b      	ldr	r3, [r3, #0]
 801f2a6:	4605      	mov	r5, r0
 801f2a8:	68d8      	ldr	r0, [r3, #12]
 801f2aa:	b14c      	cbz	r4, 801f2c0 <__assert_func+0x24>
 801f2ac:	4b07      	ldr	r3, [pc, #28]	; (801f2cc <__assert_func+0x30>)
 801f2ae:	9100      	str	r1, [sp, #0]
 801f2b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f2b4:	4906      	ldr	r1, [pc, #24]	; (801f2d0 <__assert_func+0x34>)
 801f2b6:	462b      	mov	r3, r5
 801f2b8:	f000 ff5e 	bl	8020178 <fiprintf>
 801f2bc:	f002 fa58 	bl	8021770 <abort>
 801f2c0:	4b04      	ldr	r3, [pc, #16]	; (801f2d4 <__assert_func+0x38>)
 801f2c2:	461c      	mov	r4, r3
 801f2c4:	e7f3      	b.n	801f2ae <__assert_func+0x12>
 801f2c6:	bf00      	nop
 801f2c8:	20000064 	.word	0x20000064
 801f2cc:	0802694d 	.word	0x0802694d
 801f2d0:	0802695a 	.word	0x0802695a
 801f2d4:	08026988 	.word	0x08026988

0801f2d8 <_close_r>:
 801f2d8:	b538      	push	{r3, r4, r5, lr}
 801f2da:	4d06      	ldr	r5, [pc, #24]	; (801f2f4 <_close_r+0x1c>)
 801f2dc:	2300      	movs	r3, #0
 801f2de:	4604      	mov	r4, r0
 801f2e0:	4608      	mov	r0, r1
 801f2e2:	602b      	str	r3, [r5, #0]
 801f2e4:	f7e3 f8a9 	bl	800243a <_close>
 801f2e8:	1c43      	adds	r3, r0, #1
 801f2ea:	d102      	bne.n	801f2f2 <_close_r+0x1a>
 801f2ec:	682b      	ldr	r3, [r5, #0]
 801f2ee:	b103      	cbz	r3, 801f2f2 <_close_r+0x1a>
 801f2f0:	6023      	str	r3, [r4, #0]
 801f2f2:	bd38      	pop	{r3, r4, r5, pc}
 801f2f4:	2001b118 	.word	0x2001b118

0801f2f8 <quorem>:
 801f2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2fc:	6903      	ldr	r3, [r0, #16]
 801f2fe:	690c      	ldr	r4, [r1, #16]
 801f300:	42a3      	cmp	r3, r4
 801f302:	4607      	mov	r7, r0
 801f304:	f2c0 8081 	blt.w	801f40a <quorem+0x112>
 801f308:	3c01      	subs	r4, #1
 801f30a:	f101 0814 	add.w	r8, r1, #20
 801f30e:	f100 0514 	add.w	r5, r0, #20
 801f312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f316:	9301      	str	r3, [sp, #4]
 801f318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f31c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f320:	3301      	adds	r3, #1
 801f322:	429a      	cmp	r2, r3
 801f324:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801f328:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f32c:	fbb2 f6f3 	udiv	r6, r2, r3
 801f330:	d331      	bcc.n	801f396 <quorem+0x9e>
 801f332:	f04f 0e00 	mov.w	lr, #0
 801f336:	4640      	mov	r0, r8
 801f338:	46ac      	mov	ip, r5
 801f33a:	46f2      	mov	sl, lr
 801f33c:	f850 2b04 	ldr.w	r2, [r0], #4
 801f340:	b293      	uxth	r3, r2
 801f342:	fb06 e303 	mla	r3, r6, r3, lr
 801f346:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801f34a:	b29b      	uxth	r3, r3
 801f34c:	ebaa 0303 	sub.w	r3, sl, r3
 801f350:	0c12      	lsrs	r2, r2, #16
 801f352:	f8dc a000 	ldr.w	sl, [ip]
 801f356:	fb06 e202 	mla	r2, r6, r2, lr
 801f35a:	fa13 f38a 	uxtah	r3, r3, sl
 801f35e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801f362:	fa1f fa82 	uxth.w	sl, r2
 801f366:	f8dc 2000 	ldr.w	r2, [ip]
 801f36a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801f36e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801f372:	b29b      	uxth	r3, r3
 801f374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f378:	4581      	cmp	r9, r0
 801f37a:	f84c 3b04 	str.w	r3, [ip], #4
 801f37e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801f382:	d2db      	bcs.n	801f33c <quorem+0x44>
 801f384:	f855 300b 	ldr.w	r3, [r5, fp]
 801f388:	b92b      	cbnz	r3, 801f396 <quorem+0x9e>
 801f38a:	9b01      	ldr	r3, [sp, #4]
 801f38c:	3b04      	subs	r3, #4
 801f38e:	429d      	cmp	r5, r3
 801f390:	461a      	mov	r2, r3
 801f392:	d32e      	bcc.n	801f3f2 <quorem+0xfa>
 801f394:	613c      	str	r4, [r7, #16]
 801f396:	4638      	mov	r0, r7
 801f398:	f001 fa04 	bl	80207a4 <__mcmp>
 801f39c:	2800      	cmp	r0, #0
 801f39e:	db24      	blt.n	801f3ea <quorem+0xf2>
 801f3a0:	3601      	adds	r6, #1
 801f3a2:	4628      	mov	r0, r5
 801f3a4:	f04f 0c00 	mov.w	ip, #0
 801f3a8:	f858 2b04 	ldr.w	r2, [r8], #4
 801f3ac:	f8d0 e000 	ldr.w	lr, [r0]
 801f3b0:	b293      	uxth	r3, r2
 801f3b2:	ebac 0303 	sub.w	r3, ip, r3
 801f3b6:	0c12      	lsrs	r2, r2, #16
 801f3b8:	fa13 f38e 	uxtah	r3, r3, lr
 801f3bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801f3c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801f3c4:	b29b      	uxth	r3, r3
 801f3c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f3ca:	45c1      	cmp	r9, r8
 801f3cc:	f840 3b04 	str.w	r3, [r0], #4
 801f3d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f3d4:	d2e8      	bcs.n	801f3a8 <quorem+0xb0>
 801f3d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f3da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f3de:	b922      	cbnz	r2, 801f3ea <quorem+0xf2>
 801f3e0:	3b04      	subs	r3, #4
 801f3e2:	429d      	cmp	r5, r3
 801f3e4:	461a      	mov	r2, r3
 801f3e6:	d30a      	bcc.n	801f3fe <quorem+0x106>
 801f3e8:	613c      	str	r4, [r7, #16]
 801f3ea:	4630      	mov	r0, r6
 801f3ec:	b003      	add	sp, #12
 801f3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3f2:	6812      	ldr	r2, [r2, #0]
 801f3f4:	3b04      	subs	r3, #4
 801f3f6:	2a00      	cmp	r2, #0
 801f3f8:	d1cc      	bne.n	801f394 <quorem+0x9c>
 801f3fa:	3c01      	subs	r4, #1
 801f3fc:	e7c7      	b.n	801f38e <quorem+0x96>
 801f3fe:	6812      	ldr	r2, [r2, #0]
 801f400:	3b04      	subs	r3, #4
 801f402:	2a00      	cmp	r2, #0
 801f404:	d1f0      	bne.n	801f3e8 <quorem+0xf0>
 801f406:	3c01      	subs	r4, #1
 801f408:	e7eb      	b.n	801f3e2 <quorem+0xea>
 801f40a:	2000      	movs	r0, #0
 801f40c:	e7ee      	b.n	801f3ec <quorem+0xf4>
	...

0801f410 <_dtoa_r>:
 801f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f414:	ed2d 8b02 	vpush	{d8}
 801f418:	ec57 6b10 	vmov	r6, r7, d0
 801f41c:	b095      	sub	sp, #84	; 0x54
 801f41e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801f420:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801f424:	9105      	str	r1, [sp, #20]
 801f426:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801f42a:	4604      	mov	r4, r0
 801f42c:	9209      	str	r2, [sp, #36]	; 0x24
 801f42e:	930f      	str	r3, [sp, #60]	; 0x3c
 801f430:	b975      	cbnz	r5, 801f450 <_dtoa_r+0x40>
 801f432:	2010      	movs	r0, #16
 801f434:	f7fe fdc0 	bl	801dfb8 <malloc>
 801f438:	4602      	mov	r2, r0
 801f43a:	6260      	str	r0, [r4, #36]	; 0x24
 801f43c:	b920      	cbnz	r0, 801f448 <_dtoa_r+0x38>
 801f43e:	4bb2      	ldr	r3, [pc, #712]	; (801f708 <_dtoa_r+0x2f8>)
 801f440:	21ea      	movs	r1, #234	; 0xea
 801f442:	48b2      	ldr	r0, [pc, #712]	; (801f70c <_dtoa_r+0x2fc>)
 801f444:	f7ff ff2a 	bl	801f29c <__assert_func>
 801f448:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801f44c:	6005      	str	r5, [r0, #0]
 801f44e:	60c5      	str	r5, [r0, #12]
 801f450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f452:	6819      	ldr	r1, [r3, #0]
 801f454:	b151      	cbz	r1, 801f46c <_dtoa_r+0x5c>
 801f456:	685a      	ldr	r2, [r3, #4]
 801f458:	604a      	str	r2, [r1, #4]
 801f45a:	2301      	movs	r3, #1
 801f45c:	4093      	lsls	r3, r2
 801f45e:	608b      	str	r3, [r1, #8]
 801f460:	4620      	mov	r0, r4
 801f462:	f000 ff61 	bl	8020328 <_Bfree>
 801f466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f468:	2200      	movs	r2, #0
 801f46a:	601a      	str	r2, [r3, #0]
 801f46c:	1e3b      	subs	r3, r7, #0
 801f46e:	bfb9      	ittee	lt
 801f470:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801f474:	9303      	strlt	r3, [sp, #12]
 801f476:	2300      	movge	r3, #0
 801f478:	f8c8 3000 	strge.w	r3, [r8]
 801f47c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801f480:	4ba3      	ldr	r3, [pc, #652]	; (801f710 <_dtoa_r+0x300>)
 801f482:	bfbc      	itt	lt
 801f484:	2201      	movlt	r2, #1
 801f486:	f8c8 2000 	strlt.w	r2, [r8]
 801f48a:	ea33 0309 	bics.w	r3, r3, r9
 801f48e:	d11b      	bne.n	801f4c8 <_dtoa_r+0xb8>
 801f490:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f492:	f242 730f 	movw	r3, #9999	; 0x270f
 801f496:	6013      	str	r3, [r2, #0]
 801f498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f49c:	4333      	orrs	r3, r6
 801f49e:	f000 857a 	beq.w	801ff96 <_dtoa_r+0xb86>
 801f4a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f4a4:	b963      	cbnz	r3, 801f4c0 <_dtoa_r+0xb0>
 801f4a6:	4b9b      	ldr	r3, [pc, #620]	; (801f714 <_dtoa_r+0x304>)
 801f4a8:	e024      	b.n	801f4f4 <_dtoa_r+0xe4>
 801f4aa:	4b9b      	ldr	r3, [pc, #620]	; (801f718 <_dtoa_r+0x308>)
 801f4ac:	9300      	str	r3, [sp, #0]
 801f4ae:	3308      	adds	r3, #8
 801f4b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f4b2:	6013      	str	r3, [r2, #0]
 801f4b4:	9800      	ldr	r0, [sp, #0]
 801f4b6:	b015      	add	sp, #84	; 0x54
 801f4b8:	ecbd 8b02 	vpop	{d8}
 801f4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4c0:	4b94      	ldr	r3, [pc, #592]	; (801f714 <_dtoa_r+0x304>)
 801f4c2:	9300      	str	r3, [sp, #0]
 801f4c4:	3303      	adds	r3, #3
 801f4c6:	e7f3      	b.n	801f4b0 <_dtoa_r+0xa0>
 801f4c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f4cc:	2200      	movs	r2, #0
 801f4ce:	ec51 0b17 	vmov	r0, r1, d7
 801f4d2:	2300      	movs	r3, #0
 801f4d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801f4d8:	f7e1 faf6 	bl	8000ac8 <__aeabi_dcmpeq>
 801f4dc:	4680      	mov	r8, r0
 801f4de:	b158      	cbz	r0, 801f4f8 <_dtoa_r+0xe8>
 801f4e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f4e2:	2301      	movs	r3, #1
 801f4e4:	6013      	str	r3, [r2, #0]
 801f4e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	f000 8551 	beq.w	801ff90 <_dtoa_r+0xb80>
 801f4ee:	488b      	ldr	r0, [pc, #556]	; (801f71c <_dtoa_r+0x30c>)
 801f4f0:	6018      	str	r0, [r3, #0]
 801f4f2:	1e43      	subs	r3, r0, #1
 801f4f4:	9300      	str	r3, [sp, #0]
 801f4f6:	e7dd      	b.n	801f4b4 <_dtoa_r+0xa4>
 801f4f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801f4fc:	aa12      	add	r2, sp, #72	; 0x48
 801f4fe:	a913      	add	r1, sp, #76	; 0x4c
 801f500:	4620      	mov	r0, r4
 801f502:	f001 f9f3 	bl	80208ec <__d2b>
 801f506:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f50a:	4683      	mov	fp, r0
 801f50c:	2d00      	cmp	r5, #0
 801f50e:	d07c      	beq.n	801f60a <_dtoa_r+0x1fa>
 801f510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f512:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801f516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f51a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801f51e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801f522:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801f526:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801f52a:	4b7d      	ldr	r3, [pc, #500]	; (801f720 <_dtoa_r+0x310>)
 801f52c:	2200      	movs	r2, #0
 801f52e:	4630      	mov	r0, r6
 801f530:	4639      	mov	r1, r7
 801f532:	f7e0 fea9 	bl	8000288 <__aeabi_dsub>
 801f536:	a36e      	add	r3, pc, #440	; (adr r3, 801f6f0 <_dtoa_r+0x2e0>)
 801f538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f53c:	f7e1 f85c 	bl	80005f8 <__aeabi_dmul>
 801f540:	a36d      	add	r3, pc, #436	; (adr r3, 801f6f8 <_dtoa_r+0x2e8>)
 801f542:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f546:	f7e0 fea1 	bl	800028c <__adddf3>
 801f54a:	4606      	mov	r6, r0
 801f54c:	4628      	mov	r0, r5
 801f54e:	460f      	mov	r7, r1
 801f550:	f7e0 ffe8 	bl	8000524 <__aeabi_i2d>
 801f554:	a36a      	add	r3, pc, #424	; (adr r3, 801f700 <_dtoa_r+0x2f0>)
 801f556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f55a:	f7e1 f84d 	bl	80005f8 <__aeabi_dmul>
 801f55e:	4602      	mov	r2, r0
 801f560:	460b      	mov	r3, r1
 801f562:	4630      	mov	r0, r6
 801f564:	4639      	mov	r1, r7
 801f566:	f7e0 fe91 	bl	800028c <__adddf3>
 801f56a:	4606      	mov	r6, r0
 801f56c:	460f      	mov	r7, r1
 801f56e:	f7e1 faf3 	bl	8000b58 <__aeabi_d2iz>
 801f572:	2200      	movs	r2, #0
 801f574:	4682      	mov	sl, r0
 801f576:	2300      	movs	r3, #0
 801f578:	4630      	mov	r0, r6
 801f57a:	4639      	mov	r1, r7
 801f57c:	f7e1 faae 	bl	8000adc <__aeabi_dcmplt>
 801f580:	b148      	cbz	r0, 801f596 <_dtoa_r+0x186>
 801f582:	4650      	mov	r0, sl
 801f584:	f7e0 ffce 	bl	8000524 <__aeabi_i2d>
 801f588:	4632      	mov	r2, r6
 801f58a:	463b      	mov	r3, r7
 801f58c:	f7e1 fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 801f590:	b908      	cbnz	r0, 801f596 <_dtoa_r+0x186>
 801f592:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f596:	f1ba 0f16 	cmp.w	sl, #22
 801f59a:	d854      	bhi.n	801f646 <_dtoa_r+0x236>
 801f59c:	4b61      	ldr	r3, [pc, #388]	; (801f724 <_dtoa_r+0x314>)
 801f59e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f5aa:	f7e1 fa97 	bl	8000adc <__aeabi_dcmplt>
 801f5ae:	2800      	cmp	r0, #0
 801f5b0:	d04b      	beq.n	801f64a <_dtoa_r+0x23a>
 801f5b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f5b6:	2300      	movs	r3, #0
 801f5b8:	930e      	str	r3, [sp, #56]	; 0x38
 801f5ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f5bc:	1b5d      	subs	r5, r3, r5
 801f5be:	1e6b      	subs	r3, r5, #1
 801f5c0:	9304      	str	r3, [sp, #16]
 801f5c2:	bf43      	ittte	mi
 801f5c4:	2300      	movmi	r3, #0
 801f5c6:	f1c5 0801 	rsbmi	r8, r5, #1
 801f5ca:	9304      	strmi	r3, [sp, #16]
 801f5cc:	f04f 0800 	movpl.w	r8, #0
 801f5d0:	f1ba 0f00 	cmp.w	sl, #0
 801f5d4:	db3b      	blt.n	801f64e <_dtoa_r+0x23e>
 801f5d6:	9b04      	ldr	r3, [sp, #16]
 801f5d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801f5dc:	4453      	add	r3, sl
 801f5de:	9304      	str	r3, [sp, #16]
 801f5e0:	2300      	movs	r3, #0
 801f5e2:	9306      	str	r3, [sp, #24]
 801f5e4:	9b05      	ldr	r3, [sp, #20]
 801f5e6:	2b09      	cmp	r3, #9
 801f5e8:	d869      	bhi.n	801f6be <_dtoa_r+0x2ae>
 801f5ea:	2b05      	cmp	r3, #5
 801f5ec:	bfc4      	itt	gt
 801f5ee:	3b04      	subgt	r3, #4
 801f5f0:	9305      	strgt	r3, [sp, #20]
 801f5f2:	9b05      	ldr	r3, [sp, #20]
 801f5f4:	f1a3 0302 	sub.w	r3, r3, #2
 801f5f8:	bfcc      	ite	gt
 801f5fa:	2500      	movgt	r5, #0
 801f5fc:	2501      	movle	r5, #1
 801f5fe:	2b03      	cmp	r3, #3
 801f600:	d869      	bhi.n	801f6d6 <_dtoa_r+0x2c6>
 801f602:	e8df f003 	tbb	[pc, r3]
 801f606:	4e2c      	.short	0x4e2c
 801f608:	5a4c      	.short	0x5a4c
 801f60a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801f60e:	441d      	add	r5, r3
 801f610:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801f614:	2b20      	cmp	r3, #32
 801f616:	bfc1      	itttt	gt
 801f618:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801f61c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801f620:	fa09 f303 	lslgt.w	r3, r9, r3
 801f624:	fa26 f000 	lsrgt.w	r0, r6, r0
 801f628:	bfda      	itte	le
 801f62a:	f1c3 0320 	rsble	r3, r3, #32
 801f62e:	fa06 f003 	lslle.w	r0, r6, r3
 801f632:	4318      	orrgt	r0, r3
 801f634:	f7e0 ff66 	bl	8000504 <__aeabi_ui2d>
 801f638:	2301      	movs	r3, #1
 801f63a:	4606      	mov	r6, r0
 801f63c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801f640:	3d01      	subs	r5, #1
 801f642:	9310      	str	r3, [sp, #64]	; 0x40
 801f644:	e771      	b.n	801f52a <_dtoa_r+0x11a>
 801f646:	2301      	movs	r3, #1
 801f648:	e7b6      	b.n	801f5b8 <_dtoa_r+0x1a8>
 801f64a:	900e      	str	r0, [sp, #56]	; 0x38
 801f64c:	e7b5      	b.n	801f5ba <_dtoa_r+0x1aa>
 801f64e:	f1ca 0300 	rsb	r3, sl, #0
 801f652:	9306      	str	r3, [sp, #24]
 801f654:	2300      	movs	r3, #0
 801f656:	eba8 080a 	sub.w	r8, r8, sl
 801f65a:	930d      	str	r3, [sp, #52]	; 0x34
 801f65c:	e7c2      	b.n	801f5e4 <_dtoa_r+0x1d4>
 801f65e:	2300      	movs	r3, #0
 801f660:	9308      	str	r3, [sp, #32]
 801f662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f664:	2b00      	cmp	r3, #0
 801f666:	dc39      	bgt.n	801f6dc <_dtoa_r+0x2cc>
 801f668:	f04f 0901 	mov.w	r9, #1
 801f66c:	f8cd 9004 	str.w	r9, [sp, #4]
 801f670:	464b      	mov	r3, r9
 801f672:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f676:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f678:	2200      	movs	r2, #0
 801f67a:	6042      	str	r2, [r0, #4]
 801f67c:	2204      	movs	r2, #4
 801f67e:	f102 0614 	add.w	r6, r2, #20
 801f682:	429e      	cmp	r6, r3
 801f684:	6841      	ldr	r1, [r0, #4]
 801f686:	d92f      	bls.n	801f6e8 <_dtoa_r+0x2d8>
 801f688:	4620      	mov	r0, r4
 801f68a:	f000 fe0d 	bl	80202a8 <_Balloc>
 801f68e:	9000      	str	r0, [sp, #0]
 801f690:	2800      	cmp	r0, #0
 801f692:	d14b      	bne.n	801f72c <_dtoa_r+0x31c>
 801f694:	4b24      	ldr	r3, [pc, #144]	; (801f728 <_dtoa_r+0x318>)
 801f696:	4602      	mov	r2, r0
 801f698:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f69c:	e6d1      	b.n	801f442 <_dtoa_r+0x32>
 801f69e:	2301      	movs	r3, #1
 801f6a0:	e7de      	b.n	801f660 <_dtoa_r+0x250>
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	9308      	str	r3, [sp, #32]
 801f6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6a8:	eb0a 0903 	add.w	r9, sl, r3
 801f6ac:	f109 0301 	add.w	r3, r9, #1
 801f6b0:	2b01      	cmp	r3, #1
 801f6b2:	9301      	str	r3, [sp, #4]
 801f6b4:	bfb8      	it	lt
 801f6b6:	2301      	movlt	r3, #1
 801f6b8:	e7dd      	b.n	801f676 <_dtoa_r+0x266>
 801f6ba:	2301      	movs	r3, #1
 801f6bc:	e7f2      	b.n	801f6a4 <_dtoa_r+0x294>
 801f6be:	2501      	movs	r5, #1
 801f6c0:	2300      	movs	r3, #0
 801f6c2:	9305      	str	r3, [sp, #20]
 801f6c4:	9508      	str	r5, [sp, #32]
 801f6c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801f6ca:	2200      	movs	r2, #0
 801f6cc:	f8cd 9004 	str.w	r9, [sp, #4]
 801f6d0:	2312      	movs	r3, #18
 801f6d2:	9209      	str	r2, [sp, #36]	; 0x24
 801f6d4:	e7cf      	b.n	801f676 <_dtoa_r+0x266>
 801f6d6:	2301      	movs	r3, #1
 801f6d8:	9308      	str	r3, [sp, #32]
 801f6da:	e7f4      	b.n	801f6c6 <_dtoa_r+0x2b6>
 801f6dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f6e0:	f8cd 9004 	str.w	r9, [sp, #4]
 801f6e4:	464b      	mov	r3, r9
 801f6e6:	e7c6      	b.n	801f676 <_dtoa_r+0x266>
 801f6e8:	3101      	adds	r1, #1
 801f6ea:	6041      	str	r1, [r0, #4]
 801f6ec:	0052      	lsls	r2, r2, #1
 801f6ee:	e7c6      	b.n	801f67e <_dtoa_r+0x26e>
 801f6f0:	636f4361 	.word	0x636f4361
 801f6f4:	3fd287a7 	.word	0x3fd287a7
 801f6f8:	8b60c8b3 	.word	0x8b60c8b3
 801f6fc:	3fc68a28 	.word	0x3fc68a28
 801f700:	509f79fb 	.word	0x509f79fb
 801f704:	3fd34413 	.word	0x3fd34413
 801f708:	08026876 	.word	0x08026876
 801f70c:	08026996 	.word	0x08026996
 801f710:	7ff00000 	.word	0x7ff00000
 801f714:	08026992 	.word	0x08026992
 801f718:	08026989 	.word	0x08026989
 801f71c:	08026b7a 	.word	0x08026b7a
 801f720:	3ff80000 	.word	0x3ff80000
 801f724:	08026a90 	.word	0x08026a90
 801f728:	080269f5 	.word	0x080269f5
 801f72c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f72e:	9a00      	ldr	r2, [sp, #0]
 801f730:	601a      	str	r2, [r3, #0]
 801f732:	9b01      	ldr	r3, [sp, #4]
 801f734:	2b0e      	cmp	r3, #14
 801f736:	f200 80ad 	bhi.w	801f894 <_dtoa_r+0x484>
 801f73a:	2d00      	cmp	r5, #0
 801f73c:	f000 80aa 	beq.w	801f894 <_dtoa_r+0x484>
 801f740:	f1ba 0f00 	cmp.w	sl, #0
 801f744:	dd36      	ble.n	801f7b4 <_dtoa_r+0x3a4>
 801f746:	4ac3      	ldr	r2, [pc, #780]	; (801fa54 <_dtoa_r+0x644>)
 801f748:	f00a 030f 	and.w	r3, sl, #15
 801f74c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f750:	ed93 7b00 	vldr	d7, [r3]
 801f754:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801f758:	ea4f 172a 	mov.w	r7, sl, asr #4
 801f75c:	eeb0 8a47 	vmov.f32	s16, s14
 801f760:	eef0 8a67 	vmov.f32	s17, s15
 801f764:	d016      	beq.n	801f794 <_dtoa_r+0x384>
 801f766:	4bbc      	ldr	r3, [pc, #752]	; (801fa58 <_dtoa_r+0x648>)
 801f768:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f76c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f770:	f7e1 f86c 	bl	800084c <__aeabi_ddiv>
 801f774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f778:	f007 070f 	and.w	r7, r7, #15
 801f77c:	2503      	movs	r5, #3
 801f77e:	4eb6      	ldr	r6, [pc, #728]	; (801fa58 <_dtoa_r+0x648>)
 801f780:	b957      	cbnz	r7, 801f798 <_dtoa_r+0x388>
 801f782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f786:	ec53 2b18 	vmov	r2, r3, d8
 801f78a:	f7e1 f85f 	bl	800084c <__aeabi_ddiv>
 801f78e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f792:	e029      	b.n	801f7e8 <_dtoa_r+0x3d8>
 801f794:	2502      	movs	r5, #2
 801f796:	e7f2      	b.n	801f77e <_dtoa_r+0x36e>
 801f798:	07f9      	lsls	r1, r7, #31
 801f79a:	d508      	bpl.n	801f7ae <_dtoa_r+0x39e>
 801f79c:	ec51 0b18 	vmov	r0, r1, d8
 801f7a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f7a4:	f7e0 ff28 	bl	80005f8 <__aeabi_dmul>
 801f7a8:	ec41 0b18 	vmov	d8, r0, r1
 801f7ac:	3501      	adds	r5, #1
 801f7ae:	107f      	asrs	r7, r7, #1
 801f7b0:	3608      	adds	r6, #8
 801f7b2:	e7e5      	b.n	801f780 <_dtoa_r+0x370>
 801f7b4:	f000 80a6 	beq.w	801f904 <_dtoa_r+0x4f4>
 801f7b8:	f1ca 0600 	rsb	r6, sl, #0
 801f7bc:	4ba5      	ldr	r3, [pc, #660]	; (801fa54 <_dtoa_r+0x644>)
 801f7be:	4fa6      	ldr	r7, [pc, #664]	; (801fa58 <_dtoa_r+0x648>)
 801f7c0:	f006 020f 	and.w	r2, r6, #15
 801f7c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f7d0:	f7e0 ff12 	bl	80005f8 <__aeabi_dmul>
 801f7d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f7d8:	1136      	asrs	r6, r6, #4
 801f7da:	2300      	movs	r3, #0
 801f7dc:	2502      	movs	r5, #2
 801f7de:	2e00      	cmp	r6, #0
 801f7e0:	f040 8085 	bne.w	801f8ee <_dtoa_r+0x4de>
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	d1d2      	bne.n	801f78e <_dtoa_r+0x37e>
 801f7e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	f000 808c 	beq.w	801f908 <_dtoa_r+0x4f8>
 801f7f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f7f4:	4b99      	ldr	r3, [pc, #612]	; (801fa5c <_dtoa_r+0x64c>)
 801f7f6:	2200      	movs	r2, #0
 801f7f8:	4630      	mov	r0, r6
 801f7fa:	4639      	mov	r1, r7
 801f7fc:	f7e1 f96e 	bl	8000adc <__aeabi_dcmplt>
 801f800:	2800      	cmp	r0, #0
 801f802:	f000 8081 	beq.w	801f908 <_dtoa_r+0x4f8>
 801f806:	9b01      	ldr	r3, [sp, #4]
 801f808:	2b00      	cmp	r3, #0
 801f80a:	d07d      	beq.n	801f908 <_dtoa_r+0x4f8>
 801f80c:	f1b9 0f00 	cmp.w	r9, #0
 801f810:	dd3c      	ble.n	801f88c <_dtoa_r+0x47c>
 801f812:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801f816:	9307      	str	r3, [sp, #28]
 801f818:	2200      	movs	r2, #0
 801f81a:	4b91      	ldr	r3, [pc, #580]	; (801fa60 <_dtoa_r+0x650>)
 801f81c:	4630      	mov	r0, r6
 801f81e:	4639      	mov	r1, r7
 801f820:	f7e0 feea 	bl	80005f8 <__aeabi_dmul>
 801f824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f828:	3501      	adds	r5, #1
 801f82a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801f82e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f832:	4628      	mov	r0, r5
 801f834:	f7e0 fe76 	bl	8000524 <__aeabi_i2d>
 801f838:	4632      	mov	r2, r6
 801f83a:	463b      	mov	r3, r7
 801f83c:	f7e0 fedc 	bl	80005f8 <__aeabi_dmul>
 801f840:	4b88      	ldr	r3, [pc, #544]	; (801fa64 <_dtoa_r+0x654>)
 801f842:	2200      	movs	r2, #0
 801f844:	f7e0 fd22 	bl	800028c <__adddf3>
 801f848:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f850:	9303      	str	r3, [sp, #12]
 801f852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f854:	2b00      	cmp	r3, #0
 801f856:	d15c      	bne.n	801f912 <_dtoa_r+0x502>
 801f858:	4b83      	ldr	r3, [pc, #524]	; (801fa68 <_dtoa_r+0x658>)
 801f85a:	2200      	movs	r2, #0
 801f85c:	4630      	mov	r0, r6
 801f85e:	4639      	mov	r1, r7
 801f860:	f7e0 fd12 	bl	8000288 <__aeabi_dsub>
 801f864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f868:	4606      	mov	r6, r0
 801f86a:	460f      	mov	r7, r1
 801f86c:	f7e1 f954 	bl	8000b18 <__aeabi_dcmpgt>
 801f870:	2800      	cmp	r0, #0
 801f872:	f040 8296 	bne.w	801fda2 <_dtoa_r+0x992>
 801f876:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f87a:	4630      	mov	r0, r6
 801f87c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f880:	4639      	mov	r1, r7
 801f882:	f7e1 f92b 	bl	8000adc <__aeabi_dcmplt>
 801f886:	2800      	cmp	r0, #0
 801f888:	f040 8288 	bne.w	801fd9c <_dtoa_r+0x98c>
 801f88c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f890:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f894:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f896:	2b00      	cmp	r3, #0
 801f898:	f2c0 8158 	blt.w	801fb4c <_dtoa_r+0x73c>
 801f89c:	f1ba 0f0e 	cmp.w	sl, #14
 801f8a0:	f300 8154 	bgt.w	801fb4c <_dtoa_r+0x73c>
 801f8a4:	4b6b      	ldr	r3, [pc, #428]	; (801fa54 <_dtoa_r+0x644>)
 801f8a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f8aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	f280 80e3 	bge.w	801fa7c <_dtoa_r+0x66c>
 801f8b6:	9b01      	ldr	r3, [sp, #4]
 801f8b8:	2b00      	cmp	r3, #0
 801f8ba:	f300 80df 	bgt.w	801fa7c <_dtoa_r+0x66c>
 801f8be:	f040 826d 	bne.w	801fd9c <_dtoa_r+0x98c>
 801f8c2:	4b69      	ldr	r3, [pc, #420]	; (801fa68 <_dtoa_r+0x658>)
 801f8c4:	2200      	movs	r2, #0
 801f8c6:	4640      	mov	r0, r8
 801f8c8:	4649      	mov	r1, r9
 801f8ca:	f7e0 fe95 	bl	80005f8 <__aeabi_dmul>
 801f8ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f8d2:	f7e1 f917 	bl	8000b04 <__aeabi_dcmpge>
 801f8d6:	9e01      	ldr	r6, [sp, #4]
 801f8d8:	4637      	mov	r7, r6
 801f8da:	2800      	cmp	r0, #0
 801f8dc:	f040 8243 	bne.w	801fd66 <_dtoa_r+0x956>
 801f8e0:	9d00      	ldr	r5, [sp, #0]
 801f8e2:	2331      	movs	r3, #49	; 0x31
 801f8e4:	f805 3b01 	strb.w	r3, [r5], #1
 801f8e8:	f10a 0a01 	add.w	sl, sl, #1
 801f8ec:	e23f      	b.n	801fd6e <_dtoa_r+0x95e>
 801f8ee:	07f2      	lsls	r2, r6, #31
 801f8f0:	d505      	bpl.n	801f8fe <_dtoa_r+0x4ee>
 801f8f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f8f6:	f7e0 fe7f 	bl	80005f8 <__aeabi_dmul>
 801f8fa:	3501      	adds	r5, #1
 801f8fc:	2301      	movs	r3, #1
 801f8fe:	1076      	asrs	r6, r6, #1
 801f900:	3708      	adds	r7, #8
 801f902:	e76c      	b.n	801f7de <_dtoa_r+0x3ce>
 801f904:	2502      	movs	r5, #2
 801f906:	e76f      	b.n	801f7e8 <_dtoa_r+0x3d8>
 801f908:	9b01      	ldr	r3, [sp, #4]
 801f90a:	f8cd a01c 	str.w	sl, [sp, #28]
 801f90e:	930c      	str	r3, [sp, #48]	; 0x30
 801f910:	e78d      	b.n	801f82e <_dtoa_r+0x41e>
 801f912:	9900      	ldr	r1, [sp, #0]
 801f914:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f918:	4b4e      	ldr	r3, [pc, #312]	; (801fa54 <_dtoa_r+0x644>)
 801f91a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f91e:	4401      	add	r1, r0
 801f920:	9102      	str	r1, [sp, #8]
 801f922:	9908      	ldr	r1, [sp, #32]
 801f924:	eeb0 8a47 	vmov.f32	s16, s14
 801f928:	eef0 8a67 	vmov.f32	s17, s15
 801f92c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f930:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f934:	2900      	cmp	r1, #0
 801f936:	d045      	beq.n	801f9c4 <_dtoa_r+0x5b4>
 801f938:	494c      	ldr	r1, [pc, #304]	; (801fa6c <_dtoa_r+0x65c>)
 801f93a:	2000      	movs	r0, #0
 801f93c:	f7e0 ff86 	bl	800084c <__aeabi_ddiv>
 801f940:	ec53 2b18 	vmov	r2, r3, d8
 801f944:	f7e0 fca0 	bl	8000288 <__aeabi_dsub>
 801f948:	9d00      	ldr	r5, [sp, #0]
 801f94a:	ec41 0b18 	vmov	d8, r0, r1
 801f94e:	4639      	mov	r1, r7
 801f950:	4630      	mov	r0, r6
 801f952:	f7e1 f901 	bl	8000b58 <__aeabi_d2iz>
 801f956:	900c      	str	r0, [sp, #48]	; 0x30
 801f958:	f7e0 fde4 	bl	8000524 <__aeabi_i2d>
 801f95c:	4602      	mov	r2, r0
 801f95e:	460b      	mov	r3, r1
 801f960:	4630      	mov	r0, r6
 801f962:	4639      	mov	r1, r7
 801f964:	f7e0 fc90 	bl	8000288 <__aeabi_dsub>
 801f968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f96a:	3330      	adds	r3, #48	; 0x30
 801f96c:	f805 3b01 	strb.w	r3, [r5], #1
 801f970:	ec53 2b18 	vmov	r2, r3, d8
 801f974:	4606      	mov	r6, r0
 801f976:	460f      	mov	r7, r1
 801f978:	f7e1 f8b0 	bl	8000adc <__aeabi_dcmplt>
 801f97c:	2800      	cmp	r0, #0
 801f97e:	d165      	bne.n	801fa4c <_dtoa_r+0x63c>
 801f980:	4632      	mov	r2, r6
 801f982:	463b      	mov	r3, r7
 801f984:	4935      	ldr	r1, [pc, #212]	; (801fa5c <_dtoa_r+0x64c>)
 801f986:	2000      	movs	r0, #0
 801f988:	f7e0 fc7e 	bl	8000288 <__aeabi_dsub>
 801f98c:	ec53 2b18 	vmov	r2, r3, d8
 801f990:	f7e1 f8a4 	bl	8000adc <__aeabi_dcmplt>
 801f994:	2800      	cmp	r0, #0
 801f996:	f040 80b9 	bne.w	801fb0c <_dtoa_r+0x6fc>
 801f99a:	9b02      	ldr	r3, [sp, #8]
 801f99c:	429d      	cmp	r5, r3
 801f99e:	f43f af75 	beq.w	801f88c <_dtoa_r+0x47c>
 801f9a2:	4b2f      	ldr	r3, [pc, #188]	; (801fa60 <_dtoa_r+0x650>)
 801f9a4:	ec51 0b18 	vmov	r0, r1, d8
 801f9a8:	2200      	movs	r2, #0
 801f9aa:	f7e0 fe25 	bl	80005f8 <__aeabi_dmul>
 801f9ae:	4b2c      	ldr	r3, [pc, #176]	; (801fa60 <_dtoa_r+0x650>)
 801f9b0:	ec41 0b18 	vmov	d8, r0, r1
 801f9b4:	2200      	movs	r2, #0
 801f9b6:	4630      	mov	r0, r6
 801f9b8:	4639      	mov	r1, r7
 801f9ba:	f7e0 fe1d 	bl	80005f8 <__aeabi_dmul>
 801f9be:	4606      	mov	r6, r0
 801f9c0:	460f      	mov	r7, r1
 801f9c2:	e7c4      	b.n	801f94e <_dtoa_r+0x53e>
 801f9c4:	ec51 0b17 	vmov	r0, r1, d7
 801f9c8:	f7e0 fe16 	bl	80005f8 <__aeabi_dmul>
 801f9cc:	9b02      	ldr	r3, [sp, #8]
 801f9ce:	9d00      	ldr	r5, [sp, #0]
 801f9d0:	930c      	str	r3, [sp, #48]	; 0x30
 801f9d2:	ec41 0b18 	vmov	d8, r0, r1
 801f9d6:	4639      	mov	r1, r7
 801f9d8:	4630      	mov	r0, r6
 801f9da:	f7e1 f8bd 	bl	8000b58 <__aeabi_d2iz>
 801f9de:	9011      	str	r0, [sp, #68]	; 0x44
 801f9e0:	f7e0 fda0 	bl	8000524 <__aeabi_i2d>
 801f9e4:	4602      	mov	r2, r0
 801f9e6:	460b      	mov	r3, r1
 801f9e8:	4630      	mov	r0, r6
 801f9ea:	4639      	mov	r1, r7
 801f9ec:	f7e0 fc4c 	bl	8000288 <__aeabi_dsub>
 801f9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f9f2:	3330      	adds	r3, #48	; 0x30
 801f9f4:	f805 3b01 	strb.w	r3, [r5], #1
 801f9f8:	9b02      	ldr	r3, [sp, #8]
 801f9fa:	429d      	cmp	r5, r3
 801f9fc:	4606      	mov	r6, r0
 801f9fe:	460f      	mov	r7, r1
 801fa00:	f04f 0200 	mov.w	r2, #0
 801fa04:	d134      	bne.n	801fa70 <_dtoa_r+0x660>
 801fa06:	4b19      	ldr	r3, [pc, #100]	; (801fa6c <_dtoa_r+0x65c>)
 801fa08:	ec51 0b18 	vmov	r0, r1, d8
 801fa0c:	f7e0 fc3e 	bl	800028c <__adddf3>
 801fa10:	4602      	mov	r2, r0
 801fa12:	460b      	mov	r3, r1
 801fa14:	4630      	mov	r0, r6
 801fa16:	4639      	mov	r1, r7
 801fa18:	f7e1 f87e 	bl	8000b18 <__aeabi_dcmpgt>
 801fa1c:	2800      	cmp	r0, #0
 801fa1e:	d175      	bne.n	801fb0c <_dtoa_r+0x6fc>
 801fa20:	ec53 2b18 	vmov	r2, r3, d8
 801fa24:	4911      	ldr	r1, [pc, #68]	; (801fa6c <_dtoa_r+0x65c>)
 801fa26:	2000      	movs	r0, #0
 801fa28:	f7e0 fc2e 	bl	8000288 <__aeabi_dsub>
 801fa2c:	4602      	mov	r2, r0
 801fa2e:	460b      	mov	r3, r1
 801fa30:	4630      	mov	r0, r6
 801fa32:	4639      	mov	r1, r7
 801fa34:	f7e1 f852 	bl	8000adc <__aeabi_dcmplt>
 801fa38:	2800      	cmp	r0, #0
 801fa3a:	f43f af27 	beq.w	801f88c <_dtoa_r+0x47c>
 801fa3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fa40:	1e6b      	subs	r3, r5, #1
 801fa42:	930c      	str	r3, [sp, #48]	; 0x30
 801fa44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801fa48:	2b30      	cmp	r3, #48	; 0x30
 801fa4a:	d0f8      	beq.n	801fa3e <_dtoa_r+0x62e>
 801fa4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fa50:	e04a      	b.n	801fae8 <_dtoa_r+0x6d8>
 801fa52:	bf00      	nop
 801fa54:	08026a90 	.word	0x08026a90
 801fa58:	08026a68 	.word	0x08026a68
 801fa5c:	3ff00000 	.word	0x3ff00000
 801fa60:	40240000 	.word	0x40240000
 801fa64:	401c0000 	.word	0x401c0000
 801fa68:	40140000 	.word	0x40140000
 801fa6c:	3fe00000 	.word	0x3fe00000
 801fa70:	4baf      	ldr	r3, [pc, #700]	; (801fd30 <_dtoa_r+0x920>)
 801fa72:	f7e0 fdc1 	bl	80005f8 <__aeabi_dmul>
 801fa76:	4606      	mov	r6, r0
 801fa78:	460f      	mov	r7, r1
 801fa7a:	e7ac      	b.n	801f9d6 <_dtoa_r+0x5c6>
 801fa7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801fa80:	9d00      	ldr	r5, [sp, #0]
 801fa82:	4642      	mov	r2, r8
 801fa84:	464b      	mov	r3, r9
 801fa86:	4630      	mov	r0, r6
 801fa88:	4639      	mov	r1, r7
 801fa8a:	f7e0 fedf 	bl	800084c <__aeabi_ddiv>
 801fa8e:	f7e1 f863 	bl	8000b58 <__aeabi_d2iz>
 801fa92:	9002      	str	r0, [sp, #8]
 801fa94:	f7e0 fd46 	bl	8000524 <__aeabi_i2d>
 801fa98:	4642      	mov	r2, r8
 801fa9a:	464b      	mov	r3, r9
 801fa9c:	f7e0 fdac 	bl	80005f8 <__aeabi_dmul>
 801faa0:	4602      	mov	r2, r0
 801faa2:	460b      	mov	r3, r1
 801faa4:	4630      	mov	r0, r6
 801faa6:	4639      	mov	r1, r7
 801faa8:	f7e0 fbee 	bl	8000288 <__aeabi_dsub>
 801faac:	9e02      	ldr	r6, [sp, #8]
 801faae:	9f01      	ldr	r7, [sp, #4]
 801fab0:	3630      	adds	r6, #48	; 0x30
 801fab2:	f805 6b01 	strb.w	r6, [r5], #1
 801fab6:	9e00      	ldr	r6, [sp, #0]
 801fab8:	1bae      	subs	r6, r5, r6
 801faba:	42b7      	cmp	r7, r6
 801fabc:	4602      	mov	r2, r0
 801fabe:	460b      	mov	r3, r1
 801fac0:	d137      	bne.n	801fb32 <_dtoa_r+0x722>
 801fac2:	f7e0 fbe3 	bl	800028c <__adddf3>
 801fac6:	4642      	mov	r2, r8
 801fac8:	464b      	mov	r3, r9
 801faca:	4606      	mov	r6, r0
 801facc:	460f      	mov	r7, r1
 801face:	f7e1 f823 	bl	8000b18 <__aeabi_dcmpgt>
 801fad2:	b9c8      	cbnz	r0, 801fb08 <_dtoa_r+0x6f8>
 801fad4:	4642      	mov	r2, r8
 801fad6:	464b      	mov	r3, r9
 801fad8:	4630      	mov	r0, r6
 801fada:	4639      	mov	r1, r7
 801fadc:	f7e0 fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 801fae0:	b110      	cbz	r0, 801fae8 <_dtoa_r+0x6d8>
 801fae2:	9b02      	ldr	r3, [sp, #8]
 801fae4:	07d9      	lsls	r1, r3, #31
 801fae6:	d40f      	bmi.n	801fb08 <_dtoa_r+0x6f8>
 801fae8:	4620      	mov	r0, r4
 801faea:	4659      	mov	r1, fp
 801faec:	f000 fc1c 	bl	8020328 <_Bfree>
 801faf0:	2300      	movs	r3, #0
 801faf2:	702b      	strb	r3, [r5, #0]
 801faf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801faf6:	f10a 0001 	add.w	r0, sl, #1
 801fafa:	6018      	str	r0, [r3, #0]
 801fafc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	f43f acd8 	beq.w	801f4b4 <_dtoa_r+0xa4>
 801fb04:	601d      	str	r5, [r3, #0]
 801fb06:	e4d5      	b.n	801f4b4 <_dtoa_r+0xa4>
 801fb08:	f8cd a01c 	str.w	sl, [sp, #28]
 801fb0c:	462b      	mov	r3, r5
 801fb0e:	461d      	mov	r5, r3
 801fb10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fb14:	2a39      	cmp	r2, #57	; 0x39
 801fb16:	d108      	bne.n	801fb2a <_dtoa_r+0x71a>
 801fb18:	9a00      	ldr	r2, [sp, #0]
 801fb1a:	429a      	cmp	r2, r3
 801fb1c:	d1f7      	bne.n	801fb0e <_dtoa_r+0x6fe>
 801fb1e:	9a07      	ldr	r2, [sp, #28]
 801fb20:	9900      	ldr	r1, [sp, #0]
 801fb22:	3201      	adds	r2, #1
 801fb24:	9207      	str	r2, [sp, #28]
 801fb26:	2230      	movs	r2, #48	; 0x30
 801fb28:	700a      	strb	r2, [r1, #0]
 801fb2a:	781a      	ldrb	r2, [r3, #0]
 801fb2c:	3201      	adds	r2, #1
 801fb2e:	701a      	strb	r2, [r3, #0]
 801fb30:	e78c      	b.n	801fa4c <_dtoa_r+0x63c>
 801fb32:	4b7f      	ldr	r3, [pc, #508]	; (801fd30 <_dtoa_r+0x920>)
 801fb34:	2200      	movs	r2, #0
 801fb36:	f7e0 fd5f 	bl	80005f8 <__aeabi_dmul>
 801fb3a:	2200      	movs	r2, #0
 801fb3c:	2300      	movs	r3, #0
 801fb3e:	4606      	mov	r6, r0
 801fb40:	460f      	mov	r7, r1
 801fb42:	f7e0 ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 801fb46:	2800      	cmp	r0, #0
 801fb48:	d09b      	beq.n	801fa82 <_dtoa_r+0x672>
 801fb4a:	e7cd      	b.n	801fae8 <_dtoa_r+0x6d8>
 801fb4c:	9a08      	ldr	r2, [sp, #32]
 801fb4e:	2a00      	cmp	r2, #0
 801fb50:	f000 80c4 	beq.w	801fcdc <_dtoa_r+0x8cc>
 801fb54:	9a05      	ldr	r2, [sp, #20]
 801fb56:	2a01      	cmp	r2, #1
 801fb58:	f300 80a8 	bgt.w	801fcac <_dtoa_r+0x89c>
 801fb5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb5e:	2a00      	cmp	r2, #0
 801fb60:	f000 80a0 	beq.w	801fca4 <_dtoa_r+0x894>
 801fb64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801fb68:	9e06      	ldr	r6, [sp, #24]
 801fb6a:	4645      	mov	r5, r8
 801fb6c:	9a04      	ldr	r2, [sp, #16]
 801fb6e:	2101      	movs	r1, #1
 801fb70:	441a      	add	r2, r3
 801fb72:	4620      	mov	r0, r4
 801fb74:	4498      	add	r8, r3
 801fb76:	9204      	str	r2, [sp, #16]
 801fb78:	f000 fc92 	bl	80204a0 <__i2b>
 801fb7c:	4607      	mov	r7, r0
 801fb7e:	2d00      	cmp	r5, #0
 801fb80:	dd0b      	ble.n	801fb9a <_dtoa_r+0x78a>
 801fb82:	9b04      	ldr	r3, [sp, #16]
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	dd08      	ble.n	801fb9a <_dtoa_r+0x78a>
 801fb88:	42ab      	cmp	r3, r5
 801fb8a:	9a04      	ldr	r2, [sp, #16]
 801fb8c:	bfa8      	it	ge
 801fb8e:	462b      	movge	r3, r5
 801fb90:	eba8 0803 	sub.w	r8, r8, r3
 801fb94:	1aed      	subs	r5, r5, r3
 801fb96:	1ad3      	subs	r3, r2, r3
 801fb98:	9304      	str	r3, [sp, #16]
 801fb9a:	9b06      	ldr	r3, [sp, #24]
 801fb9c:	b1fb      	cbz	r3, 801fbde <_dtoa_r+0x7ce>
 801fb9e:	9b08      	ldr	r3, [sp, #32]
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	f000 809f 	beq.w	801fce4 <_dtoa_r+0x8d4>
 801fba6:	2e00      	cmp	r6, #0
 801fba8:	dd11      	ble.n	801fbce <_dtoa_r+0x7be>
 801fbaa:	4639      	mov	r1, r7
 801fbac:	4632      	mov	r2, r6
 801fbae:	4620      	mov	r0, r4
 801fbb0:	f000 fd32 	bl	8020618 <__pow5mult>
 801fbb4:	465a      	mov	r2, fp
 801fbb6:	4601      	mov	r1, r0
 801fbb8:	4607      	mov	r7, r0
 801fbba:	4620      	mov	r0, r4
 801fbbc:	f000 fc86 	bl	80204cc <__multiply>
 801fbc0:	4659      	mov	r1, fp
 801fbc2:	9007      	str	r0, [sp, #28]
 801fbc4:	4620      	mov	r0, r4
 801fbc6:	f000 fbaf 	bl	8020328 <_Bfree>
 801fbca:	9b07      	ldr	r3, [sp, #28]
 801fbcc:	469b      	mov	fp, r3
 801fbce:	9b06      	ldr	r3, [sp, #24]
 801fbd0:	1b9a      	subs	r2, r3, r6
 801fbd2:	d004      	beq.n	801fbde <_dtoa_r+0x7ce>
 801fbd4:	4659      	mov	r1, fp
 801fbd6:	4620      	mov	r0, r4
 801fbd8:	f000 fd1e 	bl	8020618 <__pow5mult>
 801fbdc:	4683      	mov	fp, r0
 801fbde:	2101      	movs	r1, #1
 801fbe0:	4620      	mov	r0, r4
 801fbe2:	f000 fc5d 	bl	80204a0 <__i2b>
 801fbe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fbe8:	2b00      	cmp	r3, #0
 801fbea:	4606      	mov	r6, r0
 801fbec:	dd7c      	ble.n	801fce8 <_dtoa_r+0x8d8>
 801fbee:	461a      	mov	r2, r3
 801fbf0:	4601      	mov	r1, r0
 801fbf2:	4620      	mov	r0, r4
 801fbf4:	f000 fd10 	bl	8020618 <__pow5mult>
 801fbf8:	9b05      	ldr	r3, [sp, #20]
 801fbfa:	2b01      	cmp	r3, #1
 801fbfc:	4606      	mov	r6, r0
 801fbfe:	dd76      	ble.n	801fcee <_dtoa_r+0x8de>
 801fc00:	2300      	movs	r3, #0
 801fc02:	9306      	str	r3, [sp, #24]
 801fc04:	6933      	ldr	r3, [r6, #16]
 801fc06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801fc0a:	6918      	ldr	r0, [r3, #16]
 801fc0c:	f000 fbf8 	bl	8020400 <__hi0bits>
 801fc10:	f1c0 0020 	rsb	r0, r0, #32
 801fc14:	9b04      	ldr	r3, [sp, #16]
 801fc16:	4418      	add	r0, r3
 801fc18:	f010 001f 	ands.w	r0, r0, #31
 801fc1c:	f000 8086 	beq.w	801fd2c <_dtoa_r+0x91c>
 801fc20:	f1c0 0320 	rsb	r3, r0, #32
 801fc24:	2b04      	cmp	r3, #4
 801fc26:	dd7f      	ble.n	801fd28 <_dtoa_r+0x918>
 801fc28:	f1c0 001c 	rsb	r0, r0, #28
 801fc2c:	9b04      	ldr	r3, [sp, #16]
 801fc2e:	4403      	add	r3, r0
 801fc30:	4480      	add	r8, r0
 801fc32:	4405      	add	r5, r0
 801fc34:	9304      	str	r3, [sp, #16]
 801fc36:	f1b8 0f00 	cmp.w	r8, #0
 801fc3a:	dd05      	ble.n	801fc48 <_dtoa_r+0x838>
 801fc3c:	4659      	mov	r1, fp
 801fc3e:	4642      	mov	r2, r8
 801fc40:	4620      	mov	r0, r4
 801fc42:	f000 fd43 	bl	80206cc <__lshift>
 801fc46:	4683      	mov	fp, r0
 801fc48:	9b04      	ldr	r3, [sp, #16]
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	dd05      	ble.n	801fc5a <_dtoa_r+0x84a>
 801fc4e:	4631      	mov	r1, r6
 801fc50:	461a      	mov	r2, r3
 801fc52:	4620      	mov	r0, r4
 801fc54:	f000 fd3a 	bl	80206cc <__lshift>
 801fc58:	4606      	mov	r6, r0
 801fc5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc5c:	2b00      	cmp	r3, #0
 801fc5e:	d069      	beq.n	801fd34 <_dtoa_r+0x924>
 801fc60:	4631      	mov	r1, r6
 801fc62:	4658      	mov	r0, fp
 801fc64:	f000 fd9e 	bl	80207a4 <__mcmp>
 801fc68:	2800      	cmp	r0, #0
 801fc6a:	da63      	bge.n	801fd34 <_dtoa_r+0x924>
 801fc6c:	2300      	movs	r3, #0
 801fc6e:	4659      	mov	r1, fp
 801fc70:	220a      	movs	r2, #10
 801fc72:	4620      	mov	r0, r4
 801fc74:	f000 fb7a 	bl	802036c <__multadd>
 801fc78:	9b08      	ldr	r3, [sp, #32]
 801fc7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801fc7e:	4683      	mov	fp, r0
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	f000 818f 	beq.w	801ffa4 <_dtoa_r+0xb94>
 801fc86:	4639      	mov	r1, r7
 801fc88:	2300      	movs	r3, #0
 801fc8a:	220a      	movs	r2, #10
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	f000 fb6d 	bl	802036c <__multadd>
 801fc92:	f1b9 0f00 	cmp.w	r9, #0
 801fc96:	4607      	mov	r7, r0
 801fc98:	f300 808e 	bgt.w	801fdb8 <_dtoa_r+0x9a8>
 801fc9c:	9b05      	ldr	r3, [sp, #20]
 801fc9e:	2b02      	cmp	r3, #2
 801fca0:	dc50      	bgt.n	801fd44 <_dtoa_r+0x934>
 801fca2:	e089      	b.n	801fdb8 <_dtoa_r+0x9a8>
 801fca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fca6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801fcaa:	e75d      	b.n	801fb68 <_dtoa_r+0x758>
 801fcac:	9b01      	ldr	r3, [sp, #4]
 801fcae:	1e5e      	subs	r6, r3, #1
 801fcb0:	9b06      	ldr	r3, [sp, #24]
 801fcb2:	42b3      	cmp	r3, r6
 801fcb4:	bfbf      	itttt	lt
 801fcb6:	9b06      	ldrlt	r3, [sp, #24]
 801fcb8:	9606      	strlt	r6, [sp, #24]
 801fcba:	1af2      	sublt	r2, r6, r3
 801fcbc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801fcbe:	bfb6      	itet	lt
 801fcc0:	189b      	addlt	r3, r3, r2
 801fcc2:	1b9e      	subge	r6, r3, r6
 801fcc4:	930d      	strlt	r3, [sp, #52]	; 0x34
 801fcc6:	9b01      	ldr	r3, [sp, #4]
 801fcc8:	bfb8      	it	lt
 801fcca:	2600      	movlt	r6, #0
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	bfb5      	itete	lt
 801fcd0:	eba8 0503 	sublt.w	r5, r8, r3
 801fcd4:	9b01      	ldrge	r3, [sp, #4]
 801fcd6:	2300      	movlt	r3, #0
 801fcd8:	4645      	movge	r5, r8
 801fcda:	e747      	b.n	801fb6c <_dtoa_r+0x75c>
 801fcdc:	9e06      	ldr	r6, [sp, #24]
 801fcde:	9f08      	ldr	r7, [sp, #32]
 801fce0:	4645      	mov	r5, r8
 801fce2:	e74c      	b.n	801fb7e <_dtoa_r+0x76e>
 801fce4:	9a06      	ldr	r2, [sp, #24]
 801fce6:	e775      	b.n	801fbd4 <_dtoa_r+0x7c4>
 801fce8:	9b05      	ldr	r3, [sp, #20]
 801fcea:	2b01      	cmp	r3, #1
 801fcec:	dc18      	bgt.n	801fd20 <_dtoa_r+0x910>
 801fcee:	9b02      	ldr	r3, [sp, #8]
 801fcf0:	b9b3      	cbnz	r3, 801fd20 <_dtoa_r+0x910>
 801fcf2:	9b03      	ldr	r3, [sp, #12]
 801fcf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fcf8:	b9a3      	cbnz	r3, 801fd24 <_dtoa_r+0x914>
 801fcfa:	9b03      	ldr	r3, [sp, #12]
 801fcfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fd00:	0d1b      	lsrs	r3, r3, #20
 801fd02:	051b      	lsls	r3, r3, #20
 801fd04:	b12b      	cbz	r3, 801fd12 <_dtoa_r+0x902>
 801fd06:	9b04      	ldr	r3, [sp, #16]
 801fd08:	3301      	adds	r3, #1
 801fd0a:	9304      	str	r3, [sp, #16]
 801fd0c:	f108 0801 	add.w	r8, r8, #1
 801fd10:	2301      	movs	r3, #1
 801fd12:	9306      	str	r3, [sp, #24]
 801fd14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	f47f af74 	bne.w	801fc04 <_dtoa_r+0x7f4>
 801fd1c:	2001      	movs	r0, #1
 801fd1e:	e779      	b.n	801fc14 <_dtoa_r+0x804>
 801fd20:	2300      	movs	r3, #0
 801fd22:	e7f6      	b.n	801fd12 <_dtoa_r+0x902>
 801fd24:	9b02      	ldr	r3, [sp, #8]
 801fd26:	e7f4      	b.n	801fd12 <_dtoa_r+0x902>
 801fd28:	d085      	beq.n	801fc36 <_dtoa_r+0x826>
 801fd2a:	4618      	mov	r0, r3
 801fd2c:	301c      	adds	r0, #28
 801fd2e:	e77d      	b.n	801fc2c <_dtoa_r+0x81c>
 801fd30:	40240000 	.word	0x40240000
 801fd34:	9b01      	ldr	r3, [sp, #4]
 801fd36:	2b00      	cmp	r3, #0
 801fd38:	dc38      	bgt.n	801fdac <_dtoa_r+0x99c>
 801fd3a:	9b05      	ldr	r3, [sp, #20]
 801fd3c:	2b02      	cmp	r3, #2
 801fd3e:	dd35      	ble.n	801fdac <_dtoa_r+0x99c>
 801fd40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801fd44:	f1b9 0f00 	cmp.w	r9, #0
 801fd48:	d10d      	bne.n	801fd66 <_dtoa_r+0x956>
 801fd4a:	4631      	mov	r1, r6
 801fd4c:	464b      	mov	r3, r9
 801fd4e:	2205      	movs	r2, #5
 801fd50:	4620      	mov	r0, r4
 801fd52:	f000 fb0b 	bl	802036c <__multadd>
 801fd56:	4601      	mov	r1, r0
 801fd58:	4606      	mov	r6, r0
 801fd5a:	4658      	mov	r0, fp
 801fd5c:	f000 fd22 	bl	80207a4 <__mcmp>
 801fd60:	2800      	cmp	r0, #0
 801fd62:	f73f adbd 	bgt.w	801f8e0 <_dtoa_r+0x4d0>
 801fd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd68:	9d00      	ldr	r5, [sp, #0]
 801fd6a:	ea6f 0a03 	mvn.w	sl, r3
 801fd6e:	f04f 0800 	mov.w	r8, #0
 801fd72:	4631      	mov	r1, r6
 801fd74:	4620      	mov	r0, r4
 801fd76:	f000 fad7 	bl	8020328 <_Bfree>
 801fd7a:	2f00      	cmp	r7, #0
 801fd7c:	f43f aeb4 	beq.w	801fae8 <_dtoa_r+0x6d8>
 801fd80:	f1b8 0f00 	cmp.w	r8, #0
 801fd84:	d005      	beq.n	801fd92 <_dtoa_r+0x982>
 801fd86:	45b8      	cmp	r8, r7
 801fd88:	d003      	beq.n	801fd92 <_dtoa_r+0x982>
 801fd8a:	4641      	mov	r1, r8
 801fd8c:	4620      	mov	r0, r4
 801fd8e:	f000 facb 	bl	8020328 <_Bfree>
 801fd92:	4639      	mov	r1, r7
 801fd94:	4620      	mov	r0, r4
 801fd96:	f000 fac7 	bl	8020328 <_Bfree>
 801fd9a:	e6a5      	b.n	801fae8 <_dtoa_r+0x6d8>
 801fd9c:	2600      	movs	r6, #0
 801fd9e:	4637      	mov	r7, r6
 801fda0:	e7e1      	b.n	801fd66 <_dtoa_r+0x956>
 801fda2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fda4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fda8:	4637      	mov	r7, r6
 801fdaa:	e599      	b.n	801f8e0 <_dtoa_r+0x4d0>
 801fdac:	9b08      	ldr	r3, [sp, #32]
 801fdae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801fdb2:	2b00      	cmp	r3, #0
 801fdb4:	f000 80fd 	beq.w	801ffb2 <_dtoa_r+0xba2>
 801fdb8:	2d00      	cmp	r5, #0
 801fdba:	dd05      	ble.n	801fdc8 <_dtoa_r+0x9b8>
 801fdbc:	4639      	mov	r1, r7
 801fdbe:	462a      	mov	r2, r5
 801fdc0:	4620      	mov	r0, r4
 801fdc2:	f000 fc83 	bl	80206cc <__lshift>
 801fdc6:	4607      	mov	r7, r0
 801fdc8:	9b06      	ldr	r3, [sp, #24]
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d05c      	beq.n	801fe88 <_dtoa_r+0xa78>
 801fdce:	6879      	ldr	r1, [r7, #4]
 801fdd0:	4620      	mov	r0, r4
 801fdd2:	f000 fa69 	bl	80202a8 <_Balloc>
 801fdd6:	4605      	mov	r5, r0
 801fdd8:	b928      	cbnz	r0, 801fde6 <_dtoa_r+0x9d6>
 801fdda:	4b80      	ldr	r3, [pc, #512]	; (801ffdc <_dtoa_r+0xbcc>)
 801fddc:	4602      	mov	r2, r0
 801fdde:	f240 21ea 	movw	r1, #746	; 0x2ea
 801fde2:	f7ff bb2e 	b.w	801f442 <_dtoa_r+0x32>
 801fde6:	693a      	ldr	r2, [r7, #16]
 801fde8:	3202      	adds	r2, #2
 801fdea:	0092      	lsls	r2, r2, #2
 801fdec:	f107 010c 	add.w	r1, r7, #12
 801fdf0:	300c      	adds	r0, #12
 801fdf2:	f7fe f8ff 	bl	801dff4 <memcpy>
 801fdf6:	2201      	movs	r2, #1
 801fdf8:	4629      	mov	r1, r5
 801fdfa:	4620      	mov	r0, r4
 801fdfc:	f000 fc66 	bl	80206cc <__lshift>
 801fe00:	9b00      	ldr	r3, [sp, #0]
 801fe02:	3301      	adds	r3, #1
 801fe04:	9301      	str	r3, [sp, #4]
 801fe06:	9b00      	ldr	r3, [sp, #0]
 801fe08:	444b      	add	r3, r9
 801fe0a:	9307      	str	r3, [sp, #28]
 801fe0c:	9b02      	ldr	r3, [sp, #8]
 801fe0e:	f003 0301 	and.w	r3, r3, #1
 801fe12:	46b8      	mov	r8, r7
 801fe14:	9306      	str	r3, [sp, #24]
 801fe16:	4607      	mov	r7, r0
 801fe18:	9b01      	ldr	r3, [sp, #4]
 801fe1a:	4631      	mov	r1, r6
 801fe1c:	3b01      	subs	r3, #1
 801fe1e:	4658      	mov	r0, fp
 801fe20:	9302      	str	r3, [sp, #8]
 801fe22:	f7ff fa69 	bl	801f2f8 <quorem>
 801fe26:	4603      	mov	r3, r0
 801fe28:	3330      	adds	r3, #48	; 0x30
 801fe2a:	9004      	str	r0, [sp, #16]
 801fe2c:	4641      	mov	r1, r8
 801fe2e:	4658      	mov	r0, fp
 801fe30:	9308      	str	r3, [sp, #32]
 801fe32:	f000 fcb7 	bl	80207a4 <__mcmp>
 801fe36:	463a      	mov	r2, r7
 801fe38:	4681      	mov	r9, r0
 801fe3a:	4631      	mov	r1, r6
 801fe3c:	4620      	mov	r0, r4
 801fe3e:	f000 fccd 	bl	80207dc <__mdiff>
 801fe42:	68c2      	ldr	r2, [r0, #12]
 801fe44:	9b08      	ldr	r3, [sp, #32]
 801fe46:	4605      	mov	r5, r0
 801fe48:	bb02      	cbnz	r2, 801fe8c <_dtoa_r+0xa7c>
 801fe4a:	4601      	mov	r1, r0
 801fe4c:	4658      	mov	r0, fp
 801fe4e:	f000 fca9 	bl	80207a4 <__mcmp>
 801fe52:	9b08      	ldr	r3, [sp, #32]
 801fe54:	4602      	mov	r2, r0
 801fe56:	4629      	mov	r1, r5
 801fe58:	4620      	mov	r0, r4
 801fe5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801fe5e:	f000 fa63 	bl	8020328 <_Bfree>
 801fe62:	9b05      	ldr	r3, [sp, #20]
 801fe64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fe66:	9d01      	ldr	r5, [sp, #4]
 801fe68:	ea43 0102 	orr.w	r1, r3, r2
 801fe6c:	9b06      	ldr	r3, [sp, #24]
 801fe6e:	430b      	orrs	r3, r1
 801fe70:	9b08      	ldr	r3, [sp, #32]
 801fe72:	d10d      	bne.n	801fe90 <_dtoa_r+0xa80>
 801fe74:	2b39      	cmp	r3, #57	; 0x39
 801fe76:	d029      	beq.n	801fecc <_dtoa_r+0xabc>
 801fe78:	f1b9 0f00 	cmp.w	r9, #0
 801fe7c:	dd01      	ble.n	801fe82 <_dtoa_r+0xa72>
 801fe7e:	9b04      	ldr	r3, [sp, #16]
 801fe80:	3331      	adds	r3, #49	; 0x31
 801fe82:	9a02      	ldr	r2, [sp, #8]
 801fe84:	7013      	strb	r3, [r2, #0]
 801fe86:	e774      	b.n	801fd72 <_dtoa_r+0x962>
 801fe88:	4638      	mov	r0, r7
 801fe8a:	e7b9      	b.n	801fe00 <_dtoa_r+0x9f0>
 801fe8c:	2201      	movs	r2, #1
 801fe8e:	e7e2      	b.n	801fe56 <_dtoa_r+0xa46>
 801fe90:	f1b9 0f00 	cmp.w	r9, #0
 801fe94:	db06      	blt.n	801fea4 <_dtoa_r+0xa94>
 801fe96:	9905      	ldr	r1, [sp, #20]
 801fe98:	ea41 0909 	orr.w	r9, r1, r9
 801fe9c:	9906      	ldr	r1, [sp, #24]
 801fe9e:	ea59 0101 	orrs.w	r1, r9, r1
 801fea2:	d120      	bne.n	801fee6 <_dtoa_r+0xad6>
 801fea4:	2a00      	cmp	r2, #0
 801fea6:	ddec      	ble.n	801fe82 <_dtoa_r+0xa72>
 801fea8:	4659      	mov	r1, fp
 801feaa:	2201      	movs	r2, #1
 801feac:	4620      	mov	r0, r4
 801feae:	9301      	str	r3, [sp, #4]
 801feb0:	f000 fc0c 	bl	80206cc <__lshift>
 801feb4:	4631      	mov	r1, r6
 801feb6:	4683      	mov	fp, r0
 801feb8:	f000 fc74 	bl	80207a4 <__mcmp>
 801febc:	2800      	cmp	r0, #0
 801febe:	9b01      	ldr	r3, [sp, #4]
 801fec0:	dc02      	bgt.n	801fec8 <_dtoa_r+0xab8>
 801fec2:	d1de      	bne.n	801fe82 <_dtoa_r+0xa72>
 801fec4:	07da      	lsls	r2, r3, #31
 801fec6:	d5dc      	bpl.n	801fe82 <_dtoa_r+0xa72>
 801fec8:	2b39      	cmp	r3, #57	; 0x39
 801feca:	d1d8      	bne.n	801fe7e <_dtoa_r+0xa6e>
 801fecc:	9a02      	ldr	r2, [sp, #8]
 801fece:	2339      	movs	r3, #57	; 0x39
 801fed0:	7013      	strb	r3, [r2, #0]
 801fed2:	462b      	mov	r3, r5
 801fed4:	461d      	mov	r5, r3
 801fed6:	3b01      	subs	r3, #1
 801fed8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801fedc:	2a39      	cmp	r2, #57	; 0x39
 801fede:	d050      	beq.n	801ff82 <_dtoa_r+0xb72>
 801fee0:	3201      	adds	r2, #1
 801fee2:	701a      	strb	r2, [r3, #0]
 801fee4:	e745      	b.n	801fd72 <_dtoa_r+0x962>
 801fee6:	2a00      	cmp	r2, #0
 801fee8:	dd03      	ble.n	801fef2 <_dtoa_r+0xae2>
 801feea:	2b39      	cmp	r3, #57	; 0x39
 801feec:	d0ee      	beq.n	801fecc <_dtoa_r+0xabc>
 801feee:	3301      	adds	r3, #1
 801fef0:	e7c7      	b.n	801fe82 <_dtoa_r+0xa72>
 801fef2:	9a01      	ldr	r2, [sp, #4]
 801fef4:	9907      	ldr	r1, [sp, #28]
 801fef6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801fefa:	428a      	cmp	r2, r1
 801fefc:	d02a      	beq.n	801ff54 <_dtoa_r+0xb44>
 801fefe:	4659      	mov	r1, fp
 801ff00:	2300      	movs	r3, #0
 801ff02:	220a      	movs	r2, #10
 801ff04:	4620      	mov	r0, r4
 801ff06:	f000 fa31 	bl	802036c <__multadd>
 801ff0a:	45b8      	cmp	r8, r7
 801ff0c:	4683      	mov	fp, r0
 801ff0e:	f04f 0300 	mov.w	r3, #0
 801ff12:	f04f 020a 	mov.w	r2, #10
 801ff16:	4641      	mov	r1, r8
 801ff18:	4620      	mov	r0, r4
 801ff1a:	d107      	bne.n	801ff2c <_dtoa_r+0xb1c>
 801ff1c:	f000 fa26 	bl	802036c <__multadd>
 801ff20:	4680      	mov	r8, r0
 801ff22:	4607      	mov	r7, r0
 801ff24:	9b01      	ldr	r3, [sp, #4]
 801ff26:	3301      	adds	r3, #1
 801ff28:	9301      	str	r3, [sp, #4]
 801ff2a:	e775      	b.n	801fe18 <_dtoa_r+0xa08>
 801ff2c:	f000 fa1e 	bl	802036c <__multadd>
 801ff30:	4639      	mov	r1, r7
 801ff32:	4680      	mov	r8, r0
 801ff34:	2300      	movs	r3, #0
 801ff36:	220a      	movs	r2, #10
 801ff38:	4620      	mov	r0, r4
 801ff3a:	f000 fa17 	bl	802036c <__multadd>
 801ff3e:	4607      	mov	r7, r0
 801ff40:	e7f0      	b.n	801ff24 <_dtoa_r+0xb14>
 801ff42:	f1b9 0f00 	cmp.w	r9, #0
 801ff46:	9a00      	ldr	r2, [sp, #0]
 801ff48:	bfcc      	ite	gt
 801ff4a:	464d      	movgt	r5, r9
 801ff4c:	2501      	movle	r5, #1
 801ff4e:	4415      	add	r5, r2
 801ff50:	f04f 0800 	mov.w	r8, #0
 801ff54:	4659      	mov	r1, fp
 801ff56:	2201      	movs	r2, #1
 801ff58:	4620      	mov	r0, r4
 801ff5a:	9301      	str	r3, [sp, #4]
 801ff5c:	f000 fbb6 	bl	80206cc <__lshift>
 801ff60:	4631      	mov	r1, r6
 801ff62:	4683      	mov	fp, r0
 801ff64:	f000 fc1e 	bl	80207a4 <__mcmp>
 801ff68:	2800      	cmp	r0, #0
 801ff6a:	dcb2      	bgt.n	801fed2 <_dtoa_r+0xac2>
 801ff6c:	d102      	bne.n	801ff74 <_dtoa_r+0xb64>
 801ff6e:	9b01      	ldr	r3, [sp, #4]
 801ff70:	07db      	lsls	r3, r3, #31
 801ff72:	d4ae      	bmi.n	801fed2 <_dtoa_r+0xac2>
 801ff74:	462b      	mov	r3, r5
 801ff76:	461d      	mov	r5, r3
 801ff78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ff7c:	2a30      	cmp	r2, #48	; 0x30
 801ff7e:	d0fa      	beq.n	801ff76 <_dtoa_r+0xb66>
 801ff80:	e6f7      	b.n	801fd72 <_dtoa_r+0x962>
 801ff82:	9a00      	ldr	r2, [sp, #0]
 801ff84:	429a      	cmp	r2, r3
 801ff86:	d1a5      	bne.n	801fed4 <_dtoa_r+0xac4>
 801ff88:	f10a 0a01 	add.w	sl, sl, #1
 801ff8c:	2331      	movs	r3, #49	; 0x31
 801ff8e:	e779      	b.n	801fe84 <_dtoa_r+0xa74>
 801ff90:	4b13      	ldr	r3, [pc, #76]	; (801ffe0 <_dtoa_r+0xbd0>)
 801ff92:	f7ff baaf 	b.w	801f4f4 <_dtoa_r+0xe4>
 801ff96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ff98:	2b00      	cmp	r3, #0
 801ff9a:	f47f aa86 	bne.w	801f4aa <_dtoa_r+0x9a>
 801ff9e:	4b11      	ldr	r3, [pc, #68]	; (801ffe4 <_dtoa_r+0xbd4>)
 801ffa0:	f7ff baa8 	b.w	801f4f4 <_dtoa_r+0xe4>
 801ffa4:	f1b9 0f00 	cmp.w	r9, #0
 801ffa8:	dc03      	bgt.n	801ffb2 <_dtoa_r+0xba2>
 801ffaa:	9b05      	ldr	r3, [sp, #20]
 801ffac:	2b02      	cmp	r3, #2
 801ffae:	f73f aec9 	bgt.w	801fd44 <_dtoa_r+0x934>
 801ffb2:	9d00      	ldr	r5, [sp, #0]
 801ffb4:	4631      	mov	r1, r6
 801ffb6:	4658      	mov	r0, fp
 801ffb8:	f7ff f99e 	bl	801f2f8 <quorem>
 801ffbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801ffc0:	f805 3b01 	strb.w	r3, [r5], #1
 801ffc4:	9a00      	ldr	r2, [sp, #0]
 801ffc6:	1aaa      	subs	r2, r5, r2
 801ffc8:	4591      	cmp	r9, r2
 801ffca:	ddba      	ble.n	801ff42 <_dtoa_r+0xb32>
 801ffcc:	4659      	mov	r1, fp
 801ffce:	2300      	movs	r3, #0
 801ffd0:	220a      	movs	r2, #10
 801ffd2:	4620      	mov	r0, r4
 801ffd4:	f000 f9ca 	bl	802036c <__multadd>
 801ffd8:	4683      	mov	fp, r0
 801ffda:	e7eb      	b.n	801ffb4 <_dtoa_r+0xba4>
 801ffdc:	080269f5 	.word	0x080269f5
 801ffe0:	08026b79 	.word	0x08026b79
 801ffe4:	08026989 	.word	0x08026989

0801ffe8 <__errno>:
 801ffe8:	4b01      	ldr	r3, [pc, #4]	; (801fff0 <__errno+0x8>)
 801ffea:	6818      	ldr	r0, [r3, #0]
 801ffec:	4770      	bx	lr
 801ffee:	bf00      	nop
 801fff0:	20000064 	.word	0x20000064

0801fff4 <__sflush_r>:
 801fff4:	898a      	ldrh	r2, [r1, #12]
 801fff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fffa:	4605      	mov	r5, r0
 801fffc:	0710      	lsls	r0, r2, #28
 801fffe:	460c      	mov	r4, r1
 8020000:	d458      	bmi.n	80200b4 <__sflush_r+0xc0>
 8020002:	684b      	ldr	r3, [r1, #4]
 8020004:	2b00      	cmp	r3, #0
 8020006:	dc05      	bgt.n	8020014 <__sflush_r+0x20>
 8020008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802000a:	2b00      	cmp	r3, #0
 802000c:	dc02      	bgt.n	8020014 <__sflush_r+0x20>
 802000e:	2000      	movs	r0, #0
 8020010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020016:	2e00      	cmp	r6, #0
 8020018:	d0f9      	beq.n	802000e <__sflush_r+0x1a>
 802001a:	2300      	movs	r3, #0
 802001c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020020:	682f      	ldr	r7, [r5, #0]
 8020022:	602b      	str	r3, [r5, #0]
 8020024:	d032      	beq.n	802008c <__sflush_r+0x98>
 8020026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020028:	89a3      	ldrh	r3, [r4, #12]
 802002a:	075a      	lsls	r2, r3, #29
 802002c:	d505      	bpl.n	802003a <__sflush_r+0x46>
 802002e:	6863      	ldr	r3, [r4, #4]
 8020030:	1ac0      	subs	r0, r0, r3
 8020032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020034:	b10b      	cbz	r3, 802003a <__sflush_r+0x46>
 8020036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020038:	1ac0      	subs	r0, r0, r3
 802003a:	2300      	movs	r3, #0
 802003c:	4602      	mov	r2, r0
 802003e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020040:	6a21      	ldr	r1, [r4, #32]
 8020042:	4628      	mov	r0, r5
 8020044:	47b0      	blx	r6
 8020046:	1c43      	adds	r3, r0, #1
 8020048:	89a3      	ldrh	r3, [r4, #12]
 802004a:	d106      	bne.n	802005a <__sflush_r+0x66>
 802004c:	6829      	ldr	r1, [r5, #0]
 802004e:	291d      	cmp	r1, #29
 8020050:	d82c      	bhi.n	80200ac <__sflush_r+0xb8>
 8020052:	4a2a      	ldr	r2, [pc, #168]	; (80200fc <__sflush_r+0x108>)
 8020054:	40ca      	lsrs	r2, r1
 8020056:	07d6      	lsls	r6, r2, #31
 8020058:	d528      	bpl.n	80200ac <__sflush_r+0xb8>
 802005a:	2200      	movs	r2, #0
 802005c:	6062      	str	r2, [r4, #4]
 802005e:	04d9      	lsls	r1, r3, #19
 8020060:	6922      	ldr	r2, [r4, #16]
 8020062:	6022      	str	r2, [r4, #0]
 8020064:	d504      	bpl.n	8020070 <__sflush_r+0x7c>
 8020066:	1c42      	adds	r2, r0, #1
 8020068:	d101      	bne.n	802006e <__sflush_r+0x7a>
 802006a:	682b      	ldr	r3, [r5, #0]
 802006c:	b903      	cbnz	r3, 8020070 <__sflush_r+0x7c>
 802006e:	6560      	str	r0, [r4, #84]	; 0x54
 8020070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020072:	602f      	str	r7, [r5, #0]
 8020074:	2900      	cmp	r1, #0
 8020076:	d0ca      	beq.n	802000e <__sflush_r+0x1a>
 8020078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802007c:	4299      	cmp	r1, r3
 802007e:	d002      	beq.n	8020086 <__sflush_r+0x92>
 8020080:	4628      	mov	r0, r5
 8020082:	f7fd ffe7 	bl	801e054 <_free_r>
 8020086:	2000      	movs	r0, #0
 8020088:	6360      	str	r0, [r4, #52]	; 0x34
 802008a:	e7c1      	b.n	8020010 <__sflush_r+0x1c>
 802008c:	6a21      	ldr	r1, [r4, #32]
 802008e:	2301      	movs	r3, #1
 8020090:	4628      	mov	r0, r5
 8020092:	47b0      	blx	r6
 8020094:	1c41      	adds	r1, r0, #1
 8020096:	d1c7      	bne.n	8020028 <__sflush_r+0x34>
 8020098:	682b      	ldr	r3, [r5, #0]
 802009a:	2b00      	cmp	r3, #0
 802009c:	d0c4      	beq.n	8020028 <__sflush_r+0x34>
 802009e:	2b1d      	cmp	r3, #29
 80200a0:	d001      	beq.n	80200a6 <__sflush_r+0xb2>
 80200a2:	2b16      	cmp	r3, #22
 80200a4:	d101      	bne.n	80200aa <__sflush_r+0xb6>
 80200a6:	602f      	str	r7, [r5, #0]
 80200a8:	e7b1      	b.n	802000e <__sflush_r+0x1a>
 80200aa:	89a3      	ldrh	r3, [r4, #12]
 80200ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80200b0:	81a3      	strh	r3, [r4, #12]
 80200b2:	e7ad      	b.n	8020010 <__sflush_r+0x1c>
 80200b4:	690f      	ldr	r7, [r1, #16]
 80200b6:	2f00      	cmp	r7, #0
 80200b8:	d0a9      	beq.n	802000e <__sflush_r+0x1a>
 80200ba:	0793      	lsls	r3, r2, #30
 80200bc:	680e      	ldr	r6, [r1, #0]
 80200be:	bf08      	it	eq
 80200c0:	694b      	ldreq	r3, [r1, #20]
 80200c2:	600f      	str	r7, [r1, #0]
 80200c4:	bf18      	it	ne
 80200c6:	2300      	movne	r3, #0
 80200c8:	eba6 0807 	sub.w	r8, r6, r7
 80200cc:	608b      	str	r3, [r1, #8]
 80200ce:	f1b8 0f00 	cmp.w	r8, #0
 80200d2:	dd9c      	ble.n	802000e <__sflush_r+0x1a>
 80200d4:	6a21      	ldr	r1, [r4, #32]
 80200d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80200d8:	4643      	mov	r3, r8
 80200da:	463a      	mov	r2, r7
 80200dc:	4628      	mov	r0, r5
 80200de:	47b0      	blx	r6
 80200e0:	2800      	cmp	r0, #0
 80200e2:	dc06      	bgt.n	80200f2 <__sflush_r+0xfe>
 80200e4:	89a3      	ldrh	r3, [r4, #12]
 80200e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80200ea:	81a3      	strh	r3, [r4, #12]
 80200ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80200f0:	e78e      	b.n	8020010 <__sflush_r+0x1c>
 80200f2:	4407      	add	r7, r0
 80200f4:	eba8 0800 	sub.w	r8, r8, r0
 80200f8:	e7e9      	b.n	80200ce <__sflush_r+0xda>
 80200fa:	bf00      	nop
 80200fc:	20400001 	.word	0x20400001

08020100 <_fflush_r>:
 8020100:	b538      	push	{r3, r4, r5, lr}
 8020102:	690b      	ldr	r3, [r1, #16]
 8020104:	4605      	mov	r5, r0
 8020106:	460c      	mov	r4, r1
 8020108:	b913      	cbnz	r3, 8020110 <_fflush_r+0x10>
 802010a:	2500      	movs	r5, #0
 802010c:	4628      	mov	r0, r5
 802010e:	bd38      	pop	{r3, r4, r5, pc}
 8020110:	b118      	cbz	r0, 802011a <_fflush_r+0x1a>
 8020112:	6983      	ldr	r3, [r0, #24]
 8020114:	b90b      	cbnz	r3, 802011a <_fflush_r+0x1a>
 8020116:	f7fd fe89 	bl	801de2c <__sinit>
 802011a:	4b14      	ldr	r3, [pc, #80]	; (802016c <_fflush_r+0x6c>)
 802011c:	429c      	cmp	r4, r3
 802011e:	d11b      	bne.n	8020158 <_fflush_r+0x58>
 8020120:	686c      	ldr	r4, [r5, #4]
 8020122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020126:	2b00      	cmp	r3, #0
 8020128:	d0ef      	beq.n	802010a <_fflush_r+0xa>
 802012a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802012c:	07d0      	lsls	r0, r2, #31
 802012e:	d404      	bmi.n	802013a <_fflush_r+0x3a>
 8020130:	0599      	lsls	r1, r3, #22
 8020132:	d402      	bmi.n	802013a <_fflush_r+0x3a>
 8020134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020136:	f7fd ff3c 	bl	801dfb2 <__retarget_lock_acquire_recursive>
 802013a:	4628      	mov	r0, r5
 802013c:	4621      	mov	r1, r4
 802013e:	f7ff ff59 	bl	801fff4 <__sflush_r>
 8020142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020144:	07da      	lsls	r2, r3, #31
 8020146:	4605      	mov	r5, r0
 8020148:	d4e0      	bmi.n	802010c <_fflush_r+0xc>
 802014a:	89a3      	ldrh	r3, [r4, #12]
 802014c:	059b      	lsls	r3, r3, #22
 802014e:	d4dd      	bmi.n	802010c <_fflush_r+0xc>
 8020150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020152:	f7fd ff2f 	bl	801dfb4 <__retarget_lock_release_recursive>
 8020156:	e7d9      	b.n	802010c <_fflush_r+0xc>
 8020158:	4b05      	ldr	r3, [pc, #20]	; (8020170 <_fflush_r+0x70>)
 802015a:	429c      	cmp	r4, r3
 802015c:	d101      	bne.n	8020162 <_fflush_r+0x62>
 802015e:	68ac      	ldr	r4, [r5, #8]
 8020160:	e7df      	b.n	8020122 <_fflush_r+0x22>
 8020162:	4b04      	ldr	r3, [pc, #16]	; (8020174 <_fflush_r+0x74>)
 8020164:	429c      	cmp	r4, r3
 8020166:	bf08      	it	eq
 8020168:	68ec      	ldreq	r4, [r5, #12]
 802016a:	e7da      	b.n	8020122 <_fflush_r+0x22>
 802016c:	08026800 	.word	0x08026800
 8020170:	08026820 	.word	0x08026820
 8020174:	080267e0 	.word	0x080267e0

08020178 <fiprintf>:
 8020178:	b40e      	push	{r1, r2, r3}
 802017a:	b503      	push	{r0, r1, lr}
 802017c:	4601      	mov	r1, r0
 802017e:	ab03      	add	r3, sp, #12
 8020180:	4805      	ldr	r0, [pc, #20]	; (8020198 <fiprintf+0x20>)
 8020182:	f853 2b04 	ldr.w	r2, [r3], #4
 8020186:	6800      	ldr	r0, [r0, #0]
 8020188:	9301      	str	r3, [sp, #4]
 802018a:	f000 ff71 	bl	8021070 <_vfiprintf_r>
 802018e:	b002      	add	sp, #8
 8020190:	f85d eb04 	ldr.w	lr, [sp], #4
 8020194:	b003      	add	sp, #12
 8020196:	4770      	bx	lr
 8020198:	20000064 	.word	0x20000064

0802019c <_localeconv_r>:
 802019c:	4800      	ldr	r0, [pc, #0]	; (80201a0 <_localeconv_r+0x4>)
 802019e:	4770      	bx	lr
 80201a0:	200001b8 	.word	0x200001b8

080201a4 <_lseek_r>:
 80201a4:	b538      	push	{r3, r4, r5, lr}
 80201a6:	4d07      	ldr	r5, [pc, #28]	; (80201c4 <_lseek_r+0x20>)
 80201a8:	4604      	mov	r4, r0
 80201aa:	4608      	mov	r0, r1
 80201ac:	4611      	mov	r1, r2
 80201ae:	2200      	movs	r2, #0
 80201b0:	602a      	str	r2, [r5, #0]
 80201b2:	461a      	mov	r2, r3
 80201b4:	f7e2 f968 	bl	8002488 <_lseek>
 80201b8:	1c43      	adds	r3, r0, #1
 80201ba:	d102      	bne.n	80201c2 <_lseek_r+0x1e>
 80201bc:	682b      	ldr	r3, [r5, #0]
 80201be:	b103      	cbz	r3, 80201c2 <_lseek_r+0x1e>
 80201c0:	6023      	str	r3, [r4, #0]
 80201c2:	bd38      	pop	{r3, r4, r5, pc}
 80201c4:	2001b118 	.word	0x2001b118

080201c8 <__swhatbuf_r>:
 80201c8:	b570      	push	{r4, r5, r6, lr}
 80201ca:	460e      	mov	r6, r1
 80201cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80201d0:	2900      	cmp	r1, #0
 80201d2:	b096      	sub	sp, #88	; 0x58
 80201d4:	4614      	mov	r4, r2
 80201d6:	461d      	mov	r5, r3
 80201d8:	da07      	bge.n	80201ea <__swhatbuf_r+0x22>
 80201da:	2300      	movs	r3, #0
 80201dc:	602b      	str	r3, [r5, #0]
 80201de:	89b3      	ldrh	r3, [r6, #12]
 80201e0:	061a      	lsls	r2, r3, #24
 80201e2:	d410      	bmi.n	8020206 <__swhatbuf_r+0x3e>
 80201e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80201e8:	e00e      	b.n	8020208 <__swhatbuf_r+0x40>
 80201ea:	466a      	mov	r2, sp
 80201ec:	f001 fac8 	bl	8021780 <_fstat_r>
 80201f0:	2800      	cmp	r0, #0
 80201f2:	dbf2      	blt.n	80201da <__swhatbuf_r+0x12>
 80201f4:	9a01      	ldr	r2, [sp, #4]
 80201f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80201fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80201fe:	425a      	negs	r2, r3
 8020200:	415a      	adcs	r2, r3
 8020202:	602a      	str	r2, [r5, #0]
 8020204:	e7ee      	b.n	80201e4 <__swhatbuf_r+0x1c>
 8020206:	2340      	movs	r3, #64	; 0x40
 8020208:	2000      	movs	r0, #0
 802020a:	6023      	str	r3, [r4, #0]
 802020c:	b016      	add	sp, #88	; 0x58
 802020e:	bd70      	pop	{r4, r5, r6, pc}

08020210 <__smakebuf_r>:
 8020210:	898b      	ldrh	r3, [r1, #12]
 8020212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020214:	079d      	lsls	r5, r3, #30
 8020216:	4606      	mov	r6, r0
 8020218:	460c      	mov	r4, r1
 802021a:	d507      	bpl.n	802022c <__smakebuf_r+0x1c>
 802021c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020220:	6023      	str	r3, [r4, #0]
 8020222:	6123      	str	r3, [r4, #16]
 8020224:	2301      	movs	r3, #1
 8020226:	6163      	str	r3, [r4, #20]
 8020228:	b002      	add	sp, #8
 802022a:	bd70      	pop	{r4, r5, r6, pc}
 802022c:	ab01      	add	r3, sp, #4
 802022e:	466a      	mov	r2, sp
 8020230:	f7ff ffca 	bl	80201c8 <__swhatbuf_r>
 8020234:	9900      	ldr	r1, [sp, #0]
 8020236:	4605      	mov	r5, r0
 8020238:	4630      	mov	r0, r6
 802023a:	f7fd ff5b 	bl	801e0f4 <_malloc_r>
 802023e:	b948      	cbnz	r0, 8020254 <__smakebuf_r+0x44>
 8020240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020244:	059a      	lsls	r2, r3, #22
 8020246:	d4ef      	bmi.n	8020228 <__smakebuf_r+0x18>
 8020248:	f023 0303 	bic.w	r3, r3, #3
 802024c:	f043 0302 	orr.w	r3, r3, #2
 8020250:	81a3      	strh	r3, [r4, #12]
 8020252:	e7e3      	b.n	802021c <__smakebuf_r+0xc>
 8020254:	4b0d      	ldr	r3, [pc, #52]	; (802028c <__smakebuf_r+0x7c>)
 8020256:	62b3      	str	r3, [r6, #40]	; 0x28
 8020258:	89a3      	ldrh	r3, [r4, #12]
 802025a:	6020      	str	r0, [r4, #0]
 802025c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020260:	81a3      	strh	r3, [r4, #12]
 8020262:	9b00      	ldr	r3, [sp, #0]
 8020264:	6163      	str	r3, [r4, #20]
 8020266:	9b01      	ldr	r3, [sp, #4]
 8020268:	6120      	str	r0, [r4, #16]
 802026a:	b15b      	cbz	r3, 8020284 <__smakebuf_r+0x74>
 802026c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020270:	4630      	mov	r0, r6
 8020272:	f001 fa97 	bl	80217a4 <_isatty_r>
 8020276:	b128      	cbz	r0, 8020284 <__smakebuf_r+0x74>
 8020278:	89a3      	ldrh	r3, [r4, #12]
 802027a:	f023 0303 	bic.w	r3, r3, #3
 802027e:	f043 0301 	orr.w	r3, r3, #1
 8020282:	81a3      	strh	r3, [r4, #12]
 8020284:	89a0      	ldrh	r0, [r4, #12]
 8020286:	4305      	orrs	r5, r0
 8020288:	81a5      	strh	r5, [r4, #12]
 802028a:	e7cd      	b.n	8020228 <__smakebuf_r+0x18>
 802028c:	0801ddc5 	.word	0x0801ddc5

08020290 <__malloc_lock>:
 8020290:	4801      	ldr	r0, [pc, #4]	; (8020298 <__malloc_lock+0x8>)
 8020292:	f7fd be8e 	b.w	801dfb2 <__retarget_lock_acquire_recursive>
 8020296:	bf00      	nop
 8020298:	2001b124 	.word	0x2001b124

0802029c <__malloc_unlock>:
 802029c:	4801      	ldr	r0, [pc, #4]	; (80202a4 <__malloc_unlock+0x8>)
 802029e:	f7fd be89 	b.w	801dfb4 <__retarget_lock_release_recursive>
 80202a2:	bf00      	nop
 80202a4:	2001b124 	.word	0x2001b124

080202a8 <_Balloc>:
 80202a8:	b570      	push	{r4, r5, r6, lr}
 80202aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80202ac:	4604      	mov	r4, r0
 80202ae:	460d      	mov	r5, r1
 80202b0:	b976      	cbnz	r6, 80202d0 <_Balloc+0x28>
 80202b2:	2010      	movs	r0, #16
 80202b4:	f7fd fe80 	bl	801dfb8 <malloc>
 80202b8:	4602      	mov	r2, r0
 80202ba:	6260      	str	r0, [r4, #36]	; 0x24
 80202bc:	b920      	cbnz	r0, 80202c8 <_Balloc+0x20>
 80202be:	4b18      	ldr	r3, [pc, #96]	; (8020320 <_Balloc+0x78>)
 80202c0:	4818      	ldr	r0, [pc, #96]	; (8020324 <_Balloc+0x7c>)
 80202c2:	2166      	movs	r1, #102	; 0x66
 80202c4:	f7fe ffea 	bl	801f29c <__assert_func>
 80202c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80202cc:	6006      	str	r6, [r0, #0]
 80202ce:	60c6      	str	r6, [r0, #12]
 80202d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80202d2:	68f3      	ldr	r3, [r6, #12]
 80202d4:	b183      	cbz	r3, 80202f8 <_Balloc+0x50>
 80202d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80202d8:	68db      	ldr	r3, [r3, #12]
 80202da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80202de:	b9b8      	cbnz	r0, 8020310 <_Balloc+0x68>
 80202e0:	2101      	movs	r1, #1
 80202e2:	fa01 f605 	lsl.w	r6, r1, r5
 80202e6:	1d72      	adds	r2, r6, #5
 80202e8:	0092      	lsls	r2, r2, #2
 80202ea:	4620      	mov	r0, r4
 80202ec:	f000 fb5a 	bl	80209a4 <_calloc_r>
 80202f0:	b160      	cbz	r0, 802030c <_Balloc+0x64>
 80202f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80202f6:	e00e      	b.n	8020316 <_Balloc+0x6e>
 80202f8:	2221      	movs	r2, #33	; 0x21
 80202fa:	2104      	movs	r1, #4
 80202fc:	4620      	mov	r0, r4
 80202fe:	f000 fb51 	bl	80209a4 <_calloc_r>
 8020302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020304:	60f0      	str	r0, [r6, #12]
 8020306:	68db      	ldr	r3, [r3, #12]
 8020308:	2b00      	cmp	r3, #0
 802030a:	d1e4      	bne.n	80202d6 <_Balloc+0x2e>
 802030c:	2000      	movs	r0, #0
 802030e:	bd70      	pop	{r4, r5, r6, pc}
 8020310:	6802      	ldr	r2, [r0, #0]
 8020312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020316:	2300      	movs	r3, #0
 8020318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802031c:	e7f7      	b.n	802030e <_Balloc+0x66>
 802031e:	bf00      	nop
 8020320:	08026876 	.word	0x08026876
 8020324:	08026a06 	.word	0x08026a06

08020328 <_Bfree>:
 8020328:	b570      	push	{r4, r5, r6, lr}
 802032a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802032c:	4605      	mov	r5, r0
 802032e:	460c      	mov	r4, r1
 8020330:	b976      	cbnz	r6, 8020350 <_Bfree+0x28>
 8020332:	2010      	movs	r0, #16
 8020334:	f7fd fe40 	bl	801dfb8 <malloc>
 8020338:	4602      	mov	r2, r0
 802033a:	6268      	str	r0, [r5, #36]	; 0x24
 802033c:	b920      	cbnz	r0, 8020348 <_Bfree+0x20>
 802033e:	4b09      	ldr	r3, [pc, #36]	; (8020364 <_Bfree+0x3c>)
 8020340:	4809      	ldr	r0, [pc, #36]	; (8020368 <_Bfree+0x40>)
 8020342:	218a      	movs	r1, #138	; 0x8a
 8020344:	f7fe ffaa 	bl	801f29c <__assert_func>
 8020348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802034c:	6006      	str	r6, [r0, #0]
 802034e:	60c6      	str	r6, [r0, #12]
 8020350:	b13c      	cbz	r4, 8020362 <_Bfree+0x3a>
 8020352:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020354:	6862      	ldr	r2, [r4, #4]
 8020356:	68db      	ldr	r3, [r3, #12]
 8020358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802035c:	6021      	str	r1, [r4, #0]
 802035e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020362:	bd70      	pop	{r4, r5, r6, pc}
 8020364:	08026876 	.word	0x08026876
 8020368:	08026a06 	.word	0x08026a06

0802036c <__multadd>:
 802036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020370:	690e      	ldr	r6, [r1, #16]
 8020372:	4607      	mov	r7, r0
 8020374:	4698      	mov	r8, r3
 8020376:	460c      	mov	r4, r1
 8020378:	f101 0014 	add.w	r0, r1, #20
 802037c:	2300      	movs	r3, #0
 802037e:	6805      	ldr	r5, [r0, #0]
 8020380:	b2a9      	uxth	r1, r5
 8020382:	fb02 8101 	mla	r1, r2, r1, r8
 8020386:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802038a:	0c2d      	lsrs	r5, r5, #16
 802038c:	fb02 c505 	mla	r5, r2, r5, ip
 8020390:	b289      	uxth	r1, r1
 8020392:	3301      	adds	r3, #1
 8020394:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020398:	429e      	cmp	r6, r3
 802039a:	f840 1b04 	str.w	r1, [r0], #4
 802039e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80203a2:	dcec      	bgt.n	802037e <__multadd+0x12>
 80203a4:	f1b8 0f00 	cmp.w	r8, #0
 80203a8:	d022      	beq.n	80203f0 <__multadd+0x84>
 80203aa:	68a3      	ldr	r3, [r4, #8]
 80203ac:	42b3      	cmp	r3, r6
 80203ae:	dc19      	bgt.n	80203e4 <__multadd+0x78>
 80203b0:	6861      	ldr	r1, [r4, #4]
 80203b2:	4638      	mov	r0, r7
 80203b4:	3101      	adds	r1, #1
 80203b6:	f7ff ff77 	bl	80202a8 <_Balloc>
 80203ba:	4605      	mov	r5, r0
 80203bc:	b928      	cbnz	r0, 80203ca <__multadd+0x5e>
 80203be:	4602      	mov	r2, r0
 80203c0:	4b0d      	ldr	r3, [pc, #52]	; (80203f8 <__multadd+0x8c>)
 80203c2:	480e      	ldr	r0, [pc, #56]	; (80203fc <__multadd+0x90>)
 80203c4:	21b5      	movs	r1, #181	; 0xb5
 80203c6:	f7fe ff69 	bl	801f29c <__assert_func>
 80203ca:	6922      	ldr	r2, [r4, #16]
 80203cc:	3202      	adds	r2, #2
 80203ce:	f104 010c 	add.w	r1, r4, #12
 80203d2:	0092      	lsls	r2, r2, #2
 80203d4:	300c      	adds	r0, #12
 80203d6:	f7fd fe0d 	bl	801dff4 <memcpy>
 80203da:	4621      	mov	r1, r4
 80203dc:	4638      	mov	r0, r7
 80203de:	f7ff ffa3 	bl	8020328 <_Bfree>
 80203e2:	462c      	mov	r4, r5
 80203e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80203e8:	3601      	adds	r6, #1
 80203ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80203ee:	6126      	str	r6, [r4, #16]
 80203f0:	4620      	mov	r0, r4
 80203f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203f6:	bf00      	nop
 80203f8:	080269f5 	.word	0x080269f5
 80203fc:	08026a06 	.word	0x08026a06

08020400 <__hi0bits>:
 8020400:	0c03      	lsrs	r3, r0, #16
 8020402:	041b      	lsls	r3, r3, #16
 8020404:	b9d3      	cbnz	r3, 802043c <__hi0bits+0x3c>
 8020406:	0400      	lsls	r0, r0, #16
 8020408:	2310      	movs	r3, #16
 802040a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802040e:	bf04      	itt	eq
 8020410:	0200      	lsleq	r0, r0, #8
 8020412:	3308      	addeq	r3, #8
 8020414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020418:	bf04      	itt	eq
 802041a:	0100      	lsleq	r0, r0, #4
 802041c:	3304      	addeq	r3, #4
 802041e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020422:	bf04      	itt	eq
 8020424:	0080      	lsleq	r0, r0, #2
 8020426:	3302      	addeq	r3, #2
 8020428:	2800      	cmp	r0, #0
 802042a:	db05      	blt.n	8020438 <__hi0bits+0x38>
 802042c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020430:	f103 0301 	add.w	r3, r3, #1
 8020434:	bf08      	it	eq
 8020436:	2320      	moveq	r3, #32
 8020438:	4618      	mov	r0, r3
 802043a:	4770      	bx	lr
 802043c:	2300      	movs	r3, #0
 802043e:	e7e4      	b.n	802040a <__hi0bits+0xa>

08020440 <__lo0bits>:
 8020440:	6803      	ldr	r3, [r0, #0]
 8020442:	f013 0207 	ands.w	r2, r3, #7
 8020446:	4601      	mov	r1, r0
 8020448:	d00b      	beq.n	8020462 <__lo0bits+0x22>
 802044a:	07da      	lsls	r2, r3, #31
 802044c:	d424      	bmi.n	8020498 <__lo0bits+0x58>
 802044e:	0798      	lsls	r0, r3, #30
 8020450:	bf49      	itett	mi
 8020452:	085b      	lsrmi	r3, r3, #1
 8020454:	089b      	lsrpl	r3, r3, #2
 8020456:	2001      	movmi	r0, #1
 8020458:	600b      	strmi	r3, [r1, #0]
 802045a:	bf5c      	itt	pl
 802045c:	600b      	strpl	r3, [r1, #0]
 802045e:	2002      	movpl	r0, #2
 8020460:	4770      	bx	lr
 8020462:	b298      	uxth	r0, r3
 8020464:	b9b0      	cbnz	r0, 8020494 <__lo0bits+0x54>
 8020466:	0c1b      	lsrs	r3, r3, #16
 8020468:	2010      	movs	r0, #16
 802046a:	f013 0fff 	tst.w	r3, #255	; 0xff
 802046e:	bf04      	itt	eq
 8020470:	0a1b      	lsreq	r3, r3, #8
 8020472:	3008      	addeq	r0, #8
 8020474:	071a      	lsls	r2, r3, #28
 8020476:	bf04      	itt	eq
 8020478:	091b      	lsreq	r3, r3, #4
 802047a:	3004      	addeq	r0, #4
 802047c:	079a      	lsls	r2, r3, #30
 802047e:	bf04      	itt	eq
 8020480:	089b      	lsreq	r3, r3, #2
 8020482:	3002      	addeq	r0, #2
 8020484:	07da      	lsls	r2, r3, #31
 8020486:	d403      	bmi.n	8020490 <__lo0bits+0x50>
 8020488:	085b      	lsrs	r3, r3, #1
 802048a:	f100 0001 	add.w	r0, r0, #1
 802048e:	d005      	beq.n	802049c <__lo0bits+0x5c>
 8020490:	600b      	str	r3, [r1, #0]
 8020492:	4770      	bx	lr
 8020494:	4610      	mov	r0, r2
 8020496:	e7e8      	b.n	802046a <__lo0bits+0x2a>
 8020498:	2000      	movs	r0, #0
 802049a:	4770      	bx	lr
 802049c:	2020      	movs	r0, #32
 802049e:	4770      	bx	lr

080204a0 <__i2b>:
 80204a0:	b510      	push	{r4, lr}
 80204a2:	460c      	mov	r4, r1
 80204a4:	2101      	movs	r1, #1
 80204a6:	f7ff feff 	bl	80202a8 <_Balloc>
 80204aa:	4602      	mov	r2, r0
 80204ac:	b928      	cbnz	r0, 80204ba <__i2b+0x1a>
 80204ae:	4b05      	ldr	r3, [pc, #20]	; (80204c4 <__i2b+0x24>)
 80204b0:	4805      	ldr	r0, [pc, #20]	; (80204c8 <__i2b+0x28>)
 80204b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80204b6:	f7fe fef1 	bl	801f29c <__assert_func>
 80204ba:	2301      	movs	r3, #1
 80204bc:	6144      	str	r4, [r0, #20]
 80204be:	6103      	str	r3, [r0, #16]
 80204c0:	bd10      	pop	{r4, pc}
 80204c2:	bf00      	nop
 80204c4:	080269f5 	.word	0x080269f5
 80204c8:	08026a06 	.word	0x08026a06

080204cc <__multiply>:
 80204cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204d0:	4614      	mov	r4, r2
 80204d2:	690a      	ldr	r2, [r1, #16]
 80204d4:	6923      	ldr	r3, [r4, #16]
 80204d6:	429a      	cmp	r2, r3
 80204d8:	bfb8      	it	lt
 80204da:	460b      	movlt	r3, r1
 80204dc:	460d      	mov	r5, r1
 80204de:	bfbc      	itt	lt
 80204e0:	4625      	movlt	r5, r4
 80204e2:	461c      	movlt	r4, r3
 80204e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80204e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80204ec:	68ab      	ldr	r3, [r5, #8]
 80204ee:	6869      	ldr	r1, [r5, #4]
 80204f0:	eb0a 0709 	add.w	r7, sl, r9
 80204f4:	42bb      	cmp	r3, r7
 80204f6:	b085      	sub	sp, #20
 80204f8:	bfb8      	it	lt
 80204fa:	3101      	addlt	r1, #1
 80204fc:	f7ff fed4 	bl	80202a8 <_Balloc>
 8020500:	b930      	cbnz	r0, 8020510 <__multiply+0x44>
 8020502:	4602      	mov	r2, r0
 8020504:	4b42      	ldr	r3, [pc, #264]	; (8020610 <__multiply+0x144>)
 8020506:	4843      	ldr	r0, [pc, #268]	; (8020614 <__multiply+0x148>)
 8020508:	f240 115d 	movw	r1, #349	; 0x15d
 802050c:	f7fe fec6 	bl	801f29c <__assert_func>
 8020510:	f100 0614 	add.w	r6, r0, #20
 8020514:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8020518:	4633      	mov	r3, r6
 802051a:	2200      	movs	r2, #0
 802051c:	4543      	cmp	r3, r8
 802051e:	d31e      	bcc.n	802055e <__multiply+0x92>
 8020520:	f105 0c14 	add.w	ip, r5, #20
 8020524:	f104 0314 	add.w	r3, r4, #20
 8020528:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802052c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020530:	9202      	str	r2, [sp, #8]
 8020532:	ebac 0205 	sub.w	r2, ip, r5
 8020536:	3a15      	subs	r2, #21
 8020538:	f022 0203 	bic.w	r2, r2, #3
 802053c:	3204      	adds	r2, #4
 802053e:	f105 0115 	add.w	r1, r5, #21
 8020542:	458c      	cmp	ip, r1
 8020544:	bf38      	it	cc
 8020546:	2204      	movcc	r2, #4
 8020548:	9201      	str	r2, [sp, #4]
 802054a:	9a02      	ldr	r2, [sp, #8]
 802054c:	9303      	str	r3, [sp, #12]
 802054e:	429a      	cmp	r2, r3
 8020550:	d808      	bhi.n	8020564 <__multiply+0x98>
 8020552:	2f00      	cmp	r7, #0
 8020554:	dc55      	bgt.n	8020602 <__multiply+0x136>
 8020556:	6107      	str	r7, [r0, #16]
 8020558:	b005      	add	sp, #20
 802055a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802055e:	f843 2b04 	str.w	r2, [r3], #4
 8020562:	e7db      	b.n	802051c <__multiply+0x50>
 8020564:	f8b3 a000 	ldrh.w	sl, [r3]
 8020568:	f1ba 0f00 	cmp.w	sl, #0
 802056c:	d020      	beq.n	80205b0 <__multiply+0xe4>
 802056e:	f105 0e14 	add.w	lr, r5, #20
 8020572:	46b1      	mov	r9, r6
 8020574:	2200      	movs	r2, #0
 8020576:	f85e 4b04 	ldr.w	r4, [lr], #4
 802057a:	f8d9 b000 	ldr.w	fp, [r9]
 802057e:	b2a1      	uxth	r1, r4
 8020580:	fa1f fb8b 	uxth.w	fp, fp
 8020584:	fb0a b101 	mla	r1, sl, r1, fp
 8020588:	4411      	add	r1, r2
 802058a:	f8d9 2000 	ldr.w	r2, [r9]
 802058e:	0c24      	lsrs	r4, r4, #16
 8020590:	0c12      	lsrs	r2, r2, #16
 8020592:	fb0a 2404 	mla	r4, sl, r4, r2
 8020596:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802059a:	b289      	uxth	r1, r1
 802059c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80205a0:	45f4      	cmp	ip, lr
 80205a2:	f849 1b04 	str.w	r1, [r9], #4
 80205a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80205aa:	d8e4      	bhi.n	8020576 <__multiply+0xaa>
 80205ac:	9901      	ldr	r1, [sp, #4]
 80205ae:	5072      	str	r2, [r6, r1]
 80205b0:	9a03      	ldr	r2, [sp, #12]
 80205b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80205b6:	3304      	adds	r3, #4
 80205b8:	f1b9 0f00 	cmp.w	r9, #0
 80205bc:	d01f      	beq.n	80205fe <__multiply+0x132>
 80205be:	6834      	ldr	r4, [r6, #0]
 80205c0:	f105 0114 	add.w	r1, r5, #20
 80205c4:	46b6      	mov	lr, r6
 80205c6:	f04f 0a00 	mov.w	sl, #0
 80205ca:	880a      	ldrh	r2, [r1, #0]
 80205cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80205d0:	fb09 b202 	mla	r2, r9, r2, fp
 80205d4:	4492      	add	sl, r2
 80205d6:	b2a4      	uxth	r4, r4
 80205d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80205dc:	f84e 4b04 	str.w	r4, [lr], #4
 80205e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80205e4:	f8be 2000 	ldrh.w	r2, [lr]
 80205e8:	0c24      	lsrs	r4, r4, #16
 80205ea:	fb09 2404 	mla	r4, r9, r4, r2
 80205ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80205f2:	458c      	cmp	ip, r1
 80205f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80205f8:	d8e7      	bhi.n	80205ca <__multiply+0xfe>
 80205fa:	9a01      	ldr	r2, [sp, #4]
 80205fc:	50b4      	str	r4, [r6, r2]
 80205fe:	3604      	adds	r6, #4
 8020600:	e7a3      	b.n	802054a <__multiply+0x7e>
 8020602:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020606:	2b00      	cmp	r3, #0
 8020608:	d1a5      	bne.n	8020556 <__multiply+0x8a>
 802060a:	3f01      	subs	r7, #1
 802060c:	e7a1      	b.n	8020552 <__multiply+0x86>
 802060e:	bf00      	nop
 8020610:	080269f5 	.word	0x080269f5
 8020614:	08026a06 	.word	0x08026a06

08020618 <__pow5mult>:
 8020618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802061c:	4615      	mov	r5, r2
 802061e:	f012 0203 	ands.w	r2, r2, #3
 8020622:	4606      	mov	r6, r0
 8020624:	460f      	mov	r7, r1
 8020626:	d007      	beq.n	8020638 <__pow5mult+0x20>
 8020628:	4c25      	ldr	r4, [pc, #148]	; (80206c0 <__pow5mult+0xa8>)
 802062a:	3a01      	subs	r2, #1
 802062c:	2300      	movs	r3, #0
 802062e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020632:	f7ff fe9b 	bl	802036c <__multadd>
 8020636:	4607      	mov	r7, r0
 8020638:	10ad      	asrs	r5, r5, #2
 802063a:	d03d      	beq.n	80206b8 <__pow5mult+0xa0>
 802063c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802063e:	b97c      	cbnz	r4, 8020660 <__pow5mult+0x48>
 8020640:	2010      	movs	r0, #16
 8020642:	f7fd fcb9 	bl	801dfb8 <malloc>
 8020646:	4602      	mov	r2, r0
 8020648:	6270      	str	r0, [r6, #36]	; 0x24
 802064a:	b928      	cbnz	r0, 8020658 <__pow5mult+0x40>
 802064c:	4b1d      	ldr	r3, [pc, #116]	; (80206c4 <__pow5mult+0xac>)
 802064e:	481e      	ldr	r0, [pc, #120]	; (80206c8 <__pow5mult+0xb0>)
 8020650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8020654:	f7fe fe22 	bl	801f29c <__assert_func>
 8020658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802065c:	6004      	str	r4, [r0, #0]
 802065e:	60c4      	str	r4, [r0, #12]
 8020660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020668:	b94c      	cbnz	r4, 802067e <__pow5mult+0x66>
 802066a:	f240 2171 	movw	r1, #625	; 0x271
 802066e:	4630      	mov	r0, r6
 8020670:	f7ff ff16 	bl	80204a0 <__i2b>
 8020674:	2300      	movs	r3, #0
 8020676:	f8c8 0008 	str.w	r0, [r8, #8]
 802067a:	4604      	mov	r4, r0
 802067c:	6003      	str	r3, [r0, #0]
 802067e:	f04f 0900 	mov.w	r9, #0
 8020682:	07eb      	lsls	r3, r5, #31
 8020684:	d50a      	bpl.n	802069c <__pow5mult+0x84>
 8020686:	4639      	mov	r1, r7
 8020688:	4622      	mov	r2, r4
 802068a:	4630      	mov	r0, r6
 802068c:	f7ff ff1e 	bl	80204cc <__multiply>
 8020690:	4639      	mov	r1, r7
 8020692:	4680      	mov	r8, r0
 8020694:	4630      	mov	r0, r6
 8020696:	f7ff fe47 	bl	8020328 <_Bfree>
 802069a:	4647      	mov	r7, r8
 802069c:	106d      	asrs	r5, r5, #1
 802069e:	d00b      	beq.n	80206b8 <__pow5mult+0xa0>
 80206a0:	6820      	ldr	r0, [r4, #0]
 80206a2:	b938      	cbnz	r0, 80206b4 <__pow5mult+0x9c>
 80206a4:	4622      	mov	r2, r4
 80206a6:	4621      	mov	r1, r4
 80206a8:	4630      	mov	r0, r6
 80206aa:	f7ff ff0f 	bl	80204cc <__multiply>
 80206ae:	6020      	str	r0, [r4, #0]
 80206b0:	f8c0 9000 	str.w	r9, [r0]
 80206b4:	4604      	mov	r4, r0
 80206b6:	e7e4      	b.n	8020682 <__pow5mult+0x6a>
 80206b8:	4638      	mov	r0, r7
 80206ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80206be:	bf00      	nop
 80206c0:	08026b58 	.word	0x08026b58
 80206c4:	08026876 	.word	0x08026876
 80206c8:	08026a06 	.word	0x08026a06

080206cc <__lshift>:
 80206cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206d0:	460c      	mov	r4, r1
 80206d2:	6849      	ldr	r1, [r1, #4]
 80206d4:	6923      	ldr	r3, [r4, #16]
 80206d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80206da:	68a3      	ldr	r3, [r4, #8]
 80206dc:	4607      	mov	r7, r0
 80206de:	4691      	mov	r9, r2
 80206e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80206e4:	f108 0601 	add.w	r6, r8, #1
 80206e8:	42b3      	cmp	r3, r6
 80206ea:	db0b      	blt.n	8020704 <__lshift+0x38>
 80206ec:	4638      	mov	r0, r7
 80206ee:	f7ff fddb 	bl	80202a8 <_Balloc>
 80206f2:	4605      	mov	r5, r0
 80206f4:	b948      	cbnz	r0, 802070a <__lshift+0x3e>
 80206f6:	4602      	mov	r2, r0
 80206f8:	4b28      	ldr	r3, [pc, #160]	; (802079c <__lshift+0xd0>)
 80206fa:	4829      	ldr	r0, [pc, #164]	; (80207a0 <__lshift+0xd4>)
 80206fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020700:	f7fe fdcc 	bl	801f29c <__assert_func>
 8020704:	3101      	adds	r1, #1
 8020706:	005b      	lsls	r3, r3, #1
 8020708:	e7ee      	b.n	80206e8 <__lshift+0x1c>
 802070a:	2300      	movs	r3, #0
 802070c:	f100 0114 	add.w	r1, r0, #20
 8020710:	f100 0210 	add.w	r2, r0, #16
 8020714:	4618      	mov	r0, r3
 8020716:	4553      	cmp	r3, sl
 8020718:	db33      	blt.n	8020782 <__lshift+0xb6>
 802071a:	6920      	ldr	r0, [r4, #16]
 802071c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020720:	f104 0314 	add.w	r3, r4, #20
 8020724:	f019 091f 	ands.w	r9, r9, #31
 8020728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802072c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020730:	d02b      	beq.n	802078a <__lshift+0xbe>
 8020732:	f1c9 0e20 	rsb	lr, r9, #32
 8020736:	468a      	mov	sl, r1
 8020738:	2200      	movs	r2, #0
 802073a:	6818      	ldr	r0, [r3, #0]
 802073c:	fa00 f009 	lsl.w	r0, r0, r9
 8020740:	4302      	orrs	r2, r0
 8020742:	f84a 2b04 	str.w	r2, [sl], #4
 8020746:	f853 2b04 	ldr.w	r2, [r3], #4
 802074a:	459c      	cmp	ip, r3
 802074c:	fa22 f20e 	lsr.w	r2, r2, lr
 8020750:	d8f3      	bhi.n	802073a <__lshift+0x6e>
 8020752:	ebac 0304 	sub.w	r3, ip, r4
 8020756:	3b15      	subs	r3, #21
 8020758:	f023 0303 	bic.w	r3, r3, #3
 802075c:	3304      	adds	r3, #4
 802075e:	f104 0015 	add.w	r0, r4, #21
 8020762:	4584      	cmp	ip, r0
 8020764:	bf38      	it	cc
 8020766:	2304      	movcc	r3, #4
 8020768:	50ca      	str	r2, [r1, r3]
 802076a:	b10a      	cbz	r2, 8020770 <__lshift+0xa4>
 802076c:	f108 0602 	add.w	r6, r8, #2
 8020770:	3e01      	subs	r6, #1
 8020772:	4638      	mov	r0, r7
 8020774:	612e      	str	r6, [r5, #16]
 8020776:	4621      	mov	r1, r4
 8020778:	f7ff fdd6 	bl	8020328 <_Bfree>
 802077c:	4628      	mov	r0, r5
 802077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020782:	f842 0f04 	str.w	r0, [r2, #4]!
 8020786:	3301      	adds	r3, #1
 8020788:	e7c5      	b.n	8020716 <__lshift+0x4a>
 802078a:	3904      	subs	r1, #4
 802078c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020790:	f841 2f04 	str.w	r2, [r1, #4]!
 8020794:	459c      	cmp	ip, r3
 8020796:	d8f9      	bhi.n	802078c <__lshift+0xc0>
 8020798:	e7ea      	b.n	8020770 <__lshift+0xa4>
 802079a:	bf00      	nop
 802079c:	080269f5 	.word	0x080269f5
 80207a0:	08026a06 	.word	0x08026a06

080207a4 <__mcmp>:
 80207a4:	b530      	push	{r4, r5, lr}
 80207a6:	6902      	ldr	r2, [r0, #16]
 80207a8:	690c      	ldr	r4, [r1, #16]
 80207aa:	1b12      	subs	r2, r2, r4
 80207ac:	d10e      	bne.n	80207cc <__mcmp+0x28>
 80207ae:	f100 0314 	add.w	r3, r0, #20
 80207b2:	3114      	adds	r1, #20
 80207b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80207b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80207bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80207c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80207c4:	42a5      	cmp	r5, r4
 80207c6:	d003      	beq.n	80207d0 <__mcmp+0x2c>
 80207c8:	d305      	bcc.n	80207d6 <__mcmp+0x32>
 80207ca:	2201      	movs	r2, #1
 80207cc:	4610      	mov	r0, r2
 80207ce:	bd30      	pop	{r4, r5, pc}
 80207d0:	4283      	cmp	r3, r0
 80207d2:	d3f3      	bcc.n	80207bc <__mcmp+0x18>
 80207d4:	e7fa      	b.n	80207cc <__mcmp+0x28>
 80207d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80207da:	e7f7      	b.n	80207cc <__mcmp+0x28>

080207dc <__mdiff>:
 80207dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207e0:	460c      	mov	r4, r1
 80207e2:	4606      	mov	r6, r0
 80207e4:	4611      	mov	r1, r2
 80207e6:	4620      	mov	r0, r4
 80207e8:	4617      	mov	r7, r2
 80207ea:	f7ff ffdb 	bl	80207a4 <__mcmp>
 80207ee:	1e05      	subs	r5, r0, #0
 80207f0:	d110      	bne.n	8020814 <__mdiff+0x38>
 80207f2:	4629      	mov	r1, r5
 80207f4:	4630      	mov	r0, r6
 80207f6:	f7ff fd57 	bl	80202a8 <_Balloc>
 80207fa:	b930      	cbnz	r0, 802080a <__mdiff+0x2e>
 80207fc:	4b39      	ldr	r3, [pc, #228]	; (80208e4 <__mdiff+0x108>)
 80207fe:	4602      	mov	r2, r0
 8020800:	f240 2132 	movw	r1, #562	; 0x232
 8020804:	4838      	ldr	r0, [pc, #224]	; (80208e8 <__mdiff+0x10c>)
 8020806:	f7fe fd49 	bl	801f29c <__assert_func>
 802080a:	2301      	movs	r3, #1
 802080c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020814:	bfa4      	itt	ge
 8020816:	463b      	movge	r3, r7
 8020818:	4627      	movge	r7, r4
 802081a:	4630      	mov	r0, r6
 802081c:	6879      	ldr	r1, [r7, #4]
 802081e:	bfa6      	itte	ge
 8020820:	461c      	movge	r4, r3
 8020822:	2500      	movge	r5, #0
 8020824:	2501      	movlt	r5, #1
 8020826:	f7ff fd3f 	bl	80202a8 <_Balloc>
 802082a:	b920      	cbnz	r0, 8020836 <__mdiff+0x5a>
 802082c:	4b2d      	ldr	r3, [pc, #180]	; (80208e4 <__mdiff+0x108>)
 802082e:	4602      	mov	r2, r0
 8020830:	f44f 7110 	mov.w	r1, #576	; 0x240
 8020834:	e7e6      	b.n	8020804 <__mdiff+0x28>
 8020836:	693e      	ldr	r6, [r7, #16]
 8020838:	60c5      	str	r5, [r0, #12]
 802083a:	6925      	ldr	r5, [r4, #16]
 802083c:	f107 0114 	add.w	r1, r7, #20
 8020840:	f104 0914 	add.w	r9, r4, #20
 8020844:	f100 0e14 	add.w	lr, r0, #20
 8020848:	f107 0210 	add.w	r2, r7, #16
 802084c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020850:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8020854:	46f2      	mov	sl, lr
 8020856:	2700      	movs	r7, #0
 8020858:	f859 3b04 	ldr.w	r3, [r9], #4
 802085c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020860:	fa1f f883 	uxth.w	r8, r3
 8020864:	fa17 f78b 	uxtah	r7, r7, fp
 8020868:	0c1b      	lsrs	r3, r3, #16
 802086a:	eba7 0808 	sub.w	r8, r7, r8
 802086e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020872:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020876:	fa1f f888 	uxth.w	r8, r8
 802087a:	141f      	asrs	r7, r3, #16
 802087c:	454d      	cmp	r5, r9
 802087e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020882:	f84a 3b04 	str.w	r3, [sl], #4
 8020886:	d8e7      	bhi.n	8020858 <__mdiff+0x7c>
 8020888:	1b2b      	subs	r3, r5, r4
 802088a:	3b15      	subs	r3, #21
 802088c:	f023 0303 	bic.w	r3, r3, #3
 8020890:	3304      	adds	r3, #4
 8020892:	3415      	adds	r4, #21
 8020894:	42a5      	cmp	r5, r4
 8020896:	bf38      	it	cc
 8020898:	2304      	movcc	r3, #4
 802089a:	4419      	add	r1, r3
 802089c:	4473      	add	r3, lr
 802089e:	469e      	mov	lr, r3
 80208a0:	460d      	mov	r5, r1
 80208a2:	4565      	cmp	r5, ip
 80208a4:	d30e      	bcc.n	80208c4 <__mdiff+0xe8>
 80208a6:	f10c 0203 	add.w	r2, ip, #3
 80208aa:	1a52      	subs	r2, r2, r1
 80208ac:	f022 0203 	bic.w	r2, r2, #3
 80208b0:	3903      	subs	r1, #3
 80208b2:	458c      	cmp	ip, r1
 80208b4:	bf38      	it	cc
 80208b6:	2200      	movcc	r2, #0
 80208b8:	441a      	add	r2, r3
 80208ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80208be:	b17b      	cbz	r3, 80208e0 <__mdiff+0x104>
 80208c0:	6106      	str	r6, [r0, #16]
 80208c2:	e7a5      	b.n	8020810 <__mdiff+0x34>
 80208c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80208c8:	fa17 f488 	uxtah	r4, r7, r8
 80208cc:	1422      	asrs	r2, r4, #16
 80208ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80208d2:	b2a4      	uxth	r4, r4
 80208d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80208d8:	f84e 4b04 	str.w	r4, [lr], #4
 80208dc:	1417      	asrs	r7, r2, #16
 80208de:	e7e0      	b.n	80208a2 <__mdiff+0xc6>
 80208e0:	3e01      	subs	r6, #1
 80208e2:	e7ea      	b.n	80208ba <__mdiff+0xde>
 80208e4:	080269f5 	.word	0x080269f5
 80208e8:	08026a06 	.word	0x08026a06

080208ec <__d2b>:
 80208ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80208f0:	4689      	mov	r9, r1
 80208f2:	2101      	movs	r1, #1
 80208f4:	ec57 6b10 	vmov	r6, r7, d0
 80208f8:	4690      	mov	r8, r2
 80208fa:	f7ff fcd5 	bl	80202a8 <_Balloc>
 80208fe:	4604      	mov	r4, r0
 8020900:	b930      	cbnz	r0, 8020910 <__d2b+0x24>
 8020902:	4602      	mov	r2, r0
 8020904:	4b25      	ldr	r3, [pc, #148]	; (802099c <__d2b+0xb0>)
 8020906:	4826      	ldr	r0, [pc, #152]	; (80209a0 <__d2b+0xb4>)
 8020908:	f240 310a 	movw	r1, #778	; 0x30a
 802090c:	f7fe fcc6 	bl	801f29c <__assert_func>
 8020910:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020914:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020918:	bb35      	cbnz	r5, 8020968 <__d2b+0x7c>
 802091a:	2e00      	cmp	r6, #0
 802091c:	9301      	str	r3, [sp, #4]
 802091e:	d028      	beq.n	8020972 <__d2b+0x86>
 8020920:	4668      	mov	r0, sp
 8020922:	9600      	str	r6, [sp, #0]
 8020924:	f7ff fd8c 	bl	8020440 <__lo0bits>
 8020928:	9900      	ldr	r1, [sp, #0]
 802092a:	b300      	cbz	r0, 802096e <__d2b+0x82>
 802092c:	9a01      	ldr	r2, [sp, #4]
 802092e:	f1c0 0320 	rsb	r3, r0, #32
 8020932:	fa02 f303 	lsl.w	r3, r2, r3
 8020936:	430b      	orrs	r3, r1
 8020938:	40c2      	lsrs	r2, r0
 802093a:	6163      	str	r3, [r4, #20]
 802093c:	9201      	str	r2, [sp, #4]
 802093e:	9b01      	ldr	r3, [sp, #4]
 8020940:	61a3      	str	r3, [r4, #24]
 8020942:	2b00      	cmp	r3, #0
 8020944:	bf14      	ite	ne
 8020946:	2202      	movne	r2, #2
 8020948:	2201      	moveq	r2, #1
 802094a:	6122      	str	r2, [r4, #16]
 802094c:	b1d5      	cbz	r5, 8020984 <__d2b+0x98>
 802094e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020952:	4405      	add	r5, r0
 8020954:	f8c9 5000 	str.w	r5, [r9]
 8020958:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802095c:	f8c8 0000 	str.w	r0, [r8]
 8020960:	4620      	mov	r0, r4
 8020962:	b003      	add	sp, #12
 8020964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802096c:	e7d5      	b.n	802091a <__d2b+0x2e>
 802096e:	6161      	str	r1, [r4, #20]
 8020970:	e7e5      	b.n	802093e <__d2b+0x52>
 8020972:	a801      	add	r0, sp, #4
 8020974:	f7ff fd64 	bl	8020440 <__lo0bits>
 8020978:	9b01      	ldr	r3, [sp, #4]
 802097a:	6163      	str	r3, [r4, #20]
 802097c:	2201      	movs	r2, #1
 802097e:	6122      	str	r2, [r4, #16]
 8020980:	3020      	adds	r0, #32
 8020982:	e7e3      	b.n	802094c <__d2b+0x60>
 8020984:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020988:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802098c:	f8c9 0000 	str.w	r0, [r9]
 8020990:	6918      	ldr	r0, [r3, #16]
 8020992:	f7ff fd35 	bl	8020400 <__hi0bits>
 8020996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802099a:	e7df      	b.n	802095c <__d2b+0x70>
 802099c:	080269f5 	.word	0x080269f5
 80209a0:	08026a06 	.word	0x08026a06

080209a4 <_calloc_r>:
 80209a4:	b513      	push	{r0, r1, r4, lr}
 80209a6:	434a      	muls	r2, r1
 80209a8:	4611      	mov	r1, r2
 80209aa:	9201      	str	r2, [sp, #4]
 80209ac:	f7fd fba2 	bl	801e0f4 <_malloc_r>
 80209b0:	4604      	mov	r4, r0
 80209b2:	b118      	cbz	r0, 80209bc <_calloc_r+0x18>
 80209b4:	9a01      	ldr	r2, [sp, #4]
 80209b6:	2100      	movs	r1, #0
 80209b8:	f7fd fb44 	bl	801e044 <memset>
 80209bc:	4620      	mov	r0, r4
 80209be:	b002      	add	sp, #8
 80209c0:	bd10      	pop	{r4, pc}

080209c2 <__ssputs_r>:
 80209c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209c6:	688e      	ldr	r6, [r1, #8]
 80209c8:	429e      	cmp	r6, r3
 80209ca:	4682      	mov	sl, r0
 80209cc:	460c      	mov	r4, r1
 80209ce:	4690      	mov	r8, r2
 80209d0:	461f      	mov	r7, r3
 80209d2:	d838      	bhi.n	8020a46 <__ssputs_r+0x84>
 80209d4:	898a      	ldrh	r2, [r1, #12]
 80209d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80209da:	d032      	beq.n	8020a42 <__ssputs_r+0x80>
 80209dc:	6825      	ldr	r5, [r4, #0]
 80209de:	6909      	ldr	r1, [r1, #16]
 80209e0:	eba5 0901 	sub.w	r9, r5, r1
 80209e4:	6965      	ldr	r5, [r4, #20]
 80209e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80209ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80209ee:	3301      	adds	r3, #1
 80209f0:	444b      	add	r3, r9
 80209f2:	106d      	asrs	r5, r5, #1
 80209f4:	429d      	cmp	r5, r3
 80209f6:	bf38      	it	cc
 80209f8:	461d      	movcc	r5, r3
 80209fa:	0553      	lsls	r3, r2, #21
 80209fc:	d531      	bpl.n	8020a62 <__ssputs_r+0xa0>
 80209fe:	4629      	mov	r1, r5
 8020a00:	f7fd fb78 	bl	801e0f4 <_malloc_r>
 8020a04:	4606      	mov	r6, r0
 8020a06:	b950      	cbnz	r0, 8020a1e <__ssputs_r+0x5c>
 8020a08:	230c      	movs	r3, #12
 8020a0a:	f8ca 3000 	str.w	r3, [sl]
 8020a0e:	89a3      	ldrh	r3, [r4, #12]
 8020a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a14:	81a3      	strh	r3, [r4, #12]
 8020a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a1e:	6921      	ldr	r1, [r4, #16]
 8020a20:	464a      	mov	r2, r9
 8020a22:	f7fd fae7 	bl	801dff4 <memcpy>
 8020a26:	89a3      	ldrh	r3, [r4, #12]
 8020a28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020a30:	81a3      	strh	r3, [r4, #12]
 8020a32:	6126      	str	r6, [r4, #16]
 8020a34:	6165      	str	r5, [r4, #20]
 8020a36:	444e      	add	r6, r9
 8020a38:	eba5 0509 	sub.w	r5, r5, r9
 8020a3c:	6026      	str	r6, [r4, #0]
 8020a3e:	60a5      	str	r5, [r4, #8]
 8020a40:	463e      	mov	r6, r7
 8020a42:	42be      	cmp	r6, r7
 8020a44:	d900      	bls.n	8020a48 <__ssputs_r+0x86>
 8020a46:	463e      	mov	r6, r7
 8020a48:	4632      	mov	r2, r6
 8020a4a:	6820      	ldr	r0, [r4, #0]
 8020a4c:	4641      	mov	r1, r8
 8020a4e:	f7fd fadf 	bl	801e010 <memmove>
 8020a52:	68a3      	ldr	r3, [r4, #8]
 8020a54:	6822      	ldr	r2, [r4, #0]
 8020a56:	1b9b      	subs	r3, r3, r6
 8020a58:	4432      	add	r2, r6
 8020a5a:	60a3      	str	r3, [r4, #8]
 8020a5c:	6022      	str	r2, [r4, #0]
 8020a5e:	2000      	movs	r0, #0
 8020a60:	e7db      	b.n	8020a1a <__ssputs_r+0x58>
 8020a62:	462a      	mov	r2, r5
 8020a64:	f000 fec0 	bl	80217e8 <_realloc_r>
 8020a68:	4606      	mov	r6, r0
 8020a6a:	2800      	cmp	r0, #0
 8020a6c:	d1e1      	bne.n	8020a32 <__ssputs_r+0x70>
 8020a6e:	6921      	ldr	r1, [r4, #16]
 8020a70:	4650      	mov	r0, sl
 8020a72:	f7fd faef 	bl	801e054 <_free_r>
 8020a76:	e7c7      	b.n	8020a08 <__ssputs_r+0x46>

08020a78 <_svfiprintf_r>:
 8020a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a7c:	4698      	mov	r8, r3
 8020a7e:	898b      	ldrh	r3, [r1, #12]
 8020a80:	061b      	lsls	r3, r3, #24
 8020a82:	b09d      	sub	sp, #116	; 0x74
 8020a84:	4607      	mov	r7, r0
 8020a86:	460d      	mov	r5, r1
 8020a88:	4614      	mov	r4, r2
 8020a8a:	d50e      	bpl.n	8020aaa <_svfiprintf_r+0x32>
 8020a8c:	690b      	ldr	r3, [r1, #16]
 8020a8e:	b963      	cbnz	r3, 8020aaa <_svfiprintf_r+0x32>
 8020a90:	2140      	movs	r1, #64	; 0x40
 8020a92:	f7fd fb2f 	bl	801e0f4 <_malloc_r>
 8020a96:	6028      	str	r0, [r5, #0]
 8020a98:	6128      	str	r0, [r5, #16]
 8020a9a:	b920      	cbnz	r0, 8020aa6 <_svfiprintf_r+0x2e>
 8020a9c:	230c      	movs	r3, #12
 8020a9e:	603b      	str	r3, [r7, #0]
 8020aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020aa4:	e0d1      	b.n	8020c4a <_svfiprintf_r+0x1d2>
 8020aa6:	2340      	movs	r3, #64	; 0x40
 8020aa8:	616b      	str	r3, [r5, #20]
 8020aaa:	2300      	movs	r3, #0
 8020aac:	9309      	str	r3, [sp, #36]	; 0x24
 8020aae:	2320      	movs	r3, #32
 8020ab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8020ab8:	2330      	movs	r3, #48	; 0x30
 8020aba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020c64 <_svfiprintf_r+0x1ec>
 8020abe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020ac2:	f04f 0901 	mov.w	r9, #1
 8020ac6:	4623      	mov	r3, r4
 8020ac8:	469a      	mov	sl, r3
 8020aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020ace:	b10a      	cbz	r2, 8020ad4 <_svfiprintf_r+0x5c>
 8020ad0:	2a25      	cmp	r2, #37	; 0x25
 8020ad2:	d1f9      	bne.n	8020ac8 <_svfiprintf_r+0x50>
 8020ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8020ad8:	d00b      	beq.n	8020af2 <_svfiprintf_r+0x7a>
 8020ada:	465b      	mov	r3, fp
 8020adc:	4622      	mov	r2, r4
 8020ade:	4629      	mov	r1, r5
 8020ae0:	4638      	mov	r0, r7
 8020ae2:	f7ff ff6e 	bl	80209c2 <__ssputs_r>
 8020ae6:	3001      	adds	r0, #1
 8020ae8:	f000 80aa 	beq.w	8020c40 <_svfiprintf_r+0x1c8>
 8020aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020aee:	445a      	add	r2, fp
 8020af0:	9209      	str	r2, [sp, #36]	; 0x24
 8020af2:	f89a 3000 	ldrb.w	r3, [sl]
 8020af6:	2b00      	cmp	r3, #0
 8020af8:	f000 80a2 	beq.w	8020c40 <_svfiprintf_r+0x1c8>
 8020afc:	2300      	movs	r3, #0
 8020afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020b06:	f10a 0a01 	add.w	sl, sl, #1
 8020b0a:	9304      	str	r3, [sp, #16]
 8020b0c:	9307      	str	r3, [sp, #28]
 8020b0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020b12:	931a      	str	r3, [sp, #104]	; 0x68
 8020b14:	4654      	mov	r4, sl
 8020b16:	2205      	movs	r2, #5
 8020b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b1c:	4851      	ldr	r0, [pc, #324]	; (8020c64 <_svfiprintf_r+0x1ec>)
 8020b1e:	f7df fb5f 	bl	80001e0 <memchr>
 8020b22:	9a04      	ldr	r2, [sp, #16]
 8020b24:	b9d8      	cbnz	r0, 8020b5e <_svfiprintf_r+0xe6>
 8020b26:	06d0      	lsls	r0, r2, #27
 8020b28:	bf44      	itt	mi
 8020b2a:	2320      	movmi	r3, #32
 8020b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020b30:	0711      	lsls	r1, r2, #28
 8020b32:	bf44      	itt	mi
 8020b34:	232b      	movmi	r3, #43	; 0x2b
 8020b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8020b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8020b40:	d015      	beq.n	8020b6e <_svfiprintf_r+0xf6>
 8020b42:	9a07      	ldr	r2, [sp, #28]
 8020b44:	4654      	mov	r4, sl
 8020b46:	2000      	movs	r0, #0
 8020b48:	f04f 0c0a 	mov.w	ip, #10
 8020b4c:	4621      	mov	r1, r4
 8020b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020b52:	3b30      	subs	r3, #48	; 0x30
 8020b54:	2b09      	cmp	r3, #9
 8020b56:	d94e      	bls.n	8020bf6 <_svfiprintf_r+0x17e>
 8020b58:	b1b0      	cbz	r0, 8020b88 <_svfiprintf_r+0x110>
 8020b5a:	9207      	str	r2, [sp, #28]
 8020b5c:	e014      	b.n	8020b88 <_svfiprintf_r+0x110>
 8020b5e:	eba0 0308 	sub.w	r3, r0, r8
 8020b62:	fa09 f303 	lsl.w	r3, r9, r3
 8020b66:	4313      	orrs	r3, r2
 8020b68:	9304      	str	r3, [sp, #16]
 8020b6a:	46a2      	mov	sl, r4
 8020b6c:	e7d2      	b.n	8020b14 <_svfiprintf_r+0x9c>
 8020b6e:	9b03      	ldr	r3, [sp, #12]
 8020b70:	1d19      	adds	r1, r3, #4
 8020b72:	681b      	ldr	r3, [r3, #0]
 8020b74:	9103      	str	r1, [sp, #12]
 8020b76:	2b00      	cmp	r3, #0
 8020b78:	bfbb      	ittet	lt
 8020b7a:	425b      	neglt	r3, r3
 8020b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8020b80:	9307      	strge	r3, [sp, #28]
 8020b82:	9307      	strlt	r3, [sp, #28]
 8020b84:	bfb8      	it	lt
 8020b86:	9204      	strlt	r2, [sp, #16]
 8020b88:	7823      	ldrb	r3, [r4, #0]
 8020b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8020b8c:	d10c      	bne.n	8020ba8 <_svfiprintf_r+0x130>
 8020b8e:	7863      	ldrb	r3, [r4, #1]
 8020b90:	2b2a      	cmp	r3, #42	; 0x2a
 8020b92:	d135      	bne.n	8020c00 <_svfiprintf_r+0x188>
 8020b94:	9b03      	ldr	r3, [sp, #12]
 8020b96:	1d1a      	adds	r2, r3, #4
 8020b98:	681b      	ldr	r3, [r3, #0]
 8020b9a:	9203      	str	r2, [sp, #12]
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	bfb8      	it	lt
 8020ba0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8020ba4:	3402      	adds	r4, #2
 8020ba6:	9305      	str	r3, [sp, #20]
 8020ba8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020c74 <_svfiprintf_r+0x1fc>
 8020bac:	7821      	ldrb	r1, [r4, #0]
 8020bae:	2203      	movs	r2, #3
 8020bb0:	4650      	mov	r0, sl
 8020bb2:	f7df fb15 	bl	80001e0 <memchr>
 8020bb6:	b140      	cbz	r0, 8020bca <_svfiprintf_r+0x152>
 8020bb8:	2340      	movs	r3, #64	; 0x40
 8020bba:	eba0 000a 	sub.w	r0, r0, sl
 8020bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8020bc2:	9b04      	ldr	r3, [sp, #16]
 8020bc4:	4303      	orrs	r3, r0
 8020bc6:	3401      	adds	r4, #1
 8020bc8:	9304      	str	r3, [sp, #16]
 8020bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020bce:	4826      	ldr	r0, [pc, #152]	; (8020c68 <_svfiprintf_r+0x1f0>)
 8020bd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020bd4:	2206      	movs	r2, #6
 8020bd6:	f7df fb03 	bl	80001e0 <memchr>
 8020bda:	2800      	cmp	r0, #0
 8020bdc:	d038      	beq.n	8020c50 <_svfiprintf_r+0x1d8>
 8020bde:	4b23      	ldr	r3, [pc, #140]	; (8020c6c <_svfiprintf_r+0x1f4>)
 8020be0:	bb1b      	cbnz	r3, 8020c2a <_svfiprintf_r+0x1b2>
 8020be2:	9b03      	ldr	r3, [sp, #12]
 8020be4:	3307      	adds	r3, #7
 8020be6:	f023 0307 	bic.w	r3, r3, #7
 8020bea:	3308      	adds	r3, #8
 8020bec:	9303      	str	r3, [sp, #12]
 8020bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020bf0:	4433      	add	r3, r6
 8020bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8020bf4:	e767      	b.n	8020ac6 <_svfiprintf_r+0x4e>
 8020bf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8020bfa:	460c      	mov	r4, r1
 8020bfc:	2001      	movs	r0, #1
 8020bfe:	e7a5      	b.n	8020b4c <_svfiprintf_r+0xd4>
 8020c00:	2300      	movs	r3, #0
 8020c02:	3401      	adds	r4, #1
 8020c04:	9305      	str	r3, [sp, #20]
 8020c06:	4619      	mov	r1, r3
 8020c08:	f04f 0c0a 	mov.w	ip, #10
 8020c0c:	4620      	mov	r0, r4
 8020c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020c12:	3a30      	subs	r2, #48	; 0x30
 8020c14:	2a09      	cmp	r2, #9
 8020c16:	d903      	bls.n	8020c20 <_svfiprintf_r+0x1a8>
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d0c5      	beq.n	8020ba8 <_svfiprintf_r+0x130>
 8020c1c:	9105      	str	r1, [sp, #20]
 8020c1e:	e7c3      	b.n	8020ba8 <_svfiprintf_r+0x130>
 8020c20:	fb0c 2101 	mla	r1, ip, r1, r2
 8020c24:	4604      	mov	r4, r0
 8020c26:	2301      	movs	r3, #1
 8020c28:	e7f0      	b.n	8020c0c <_svfiprintf_r+0x194>
 8020c2a:	ab03      	add	r3, sp, #12
 8020c2c:	9300      	str	r3, [sp, #0]
 8020c2e:	462a      	mov	r2, r5
 8020c30:	4b0f      	ldr	r3, [pc, #60]	; (8020c70 <_svfiprintf_r+0x1f8>)
 8020c32:	a904      	add	r1, sp, #16
 8020c34:	4638      	mov	r0, r7
 8020c36:	f7fd fb57 	bl	801e2e8 <_printf_float>
 8020c3a:	1c42      	adds	r2, r0, #1
 8020c3c:	4606      	mov	r6, r0
 8020c3e:	d1d6      	bne.n	8020bee <_svfiprintf_r+0x176>
 8020c40:	89ab      	ldrh	r3, [r5, #12]
 8020c42:	065b      	lsls	r3, r3, #25
 8020c44:	f53f af2c 	bmi.w	8020aa0 <_svfiprintf_r+0x28>
 8020c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020c4a:	b01d      	add	sp, #116	; 0x74
 8020c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c50:	ab03      	add	r3, sp, #12
 8020c52:	9300      	str	r3, [sp, #0]
 8020c54:	462a      	mov	r2, r5
 8020c56:	4b06      	ldr	r3, [pc, #24]	; (8020c70 <_svfiprintf_r+0x1f8>)
 8020c58:	a904      	add	r1, sp, #16
 8020c5a:	4638      	mov	r0, r7
 8020c5c:	f7fd fde8 	bl	801e830 <_printf_i>
 8020c60:	e7eb      	b.n	8020c3a <_svfiprintf_r+0x1c2>
 8020c62:	bf00      	nop
 8020c64:	08026b64 	.word	0x08026b64
 8020c68:	08026b6e 	.word	0x08026b6e
 8020c6c:	0801e2e9 	.word	0x0801e2e9
 8020c70:	080209c3 	.word	0x080209c3
 8020c74:	08026b6a 	.word	0x08026b6a

08020c78 <_sungetc_r>:
 8020c78:	b538      	push	{r3, r4, r5, lr}
 8020c7a:	1c4b      	adds	r3, r1, #1
 8020c7c:	4614      	mov	r4, r2
 8020c7e:	d103      	bne.n	8020c88 <_sungetc_r+0x10>
 8020c80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020c84:	4628      	mov	r0, r5
 8020c86:	bd38      	pop	{r3, r4, r5, pc}
 8020c88:	8993      	ldrh	r3, [r2, #12]
 8020c8a:	f023 0320 	bic.w	r3, r3, #32
 8020c8e:	8193      	strh	r3, [r2, #12]
 8020c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020c92:	6852      	ldr	r2, [r2, #4]
 8020c94:	b2cd      	uxtb	r5, r1
 8020c96:	b18b      	cbz	r3, 8020cbc <_sungetc_r+0x44>
 8020c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020c9a:	4293      	cmp	r3, r2
 8020c9c:	dd08      	ble.n	8020cb0 <_sungetc_r+0x38>
 8020c9e:	6823      	ldr	r3, [r4, #0]
 8020ca0:	1e5a      	subs	r2, r3, #1
 8020ca2:	6022      	str	r2, [r4, #0]
 8020ca4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020ca8:	6863      	ldr	r3, [r4, #4]
 8020caa:	3301      	adds	r3, #1
 8020cac:	6063      	str	r3, [r4, #4]
 8020cae:	e7e9      	b.n	8020c84 <_sungetc_r+0xc>
 8020cb0:	4621      	mov	r1, r4
 8020cb2:	f000 fd23 	bl	80216fc <__submore>
 8020cb6:	2800      	cmp	r0, #0
 8020cb8:	d0f1      	beq.n	8020c9e <_sungetc_r+0x26>
 8020cba:	e7e1      	b.n	8020c80 <_sungetc_r+0x8>
 8020cbc:	6921      	ldr	r1, [r4, #16]
 8020cbe:	6823      	ldr	r3, [r4, #0]
 8020cc0:	b151      	cbz	r1, 8020cd8 <_sungetc_r+0x60>
 8020cc2:	4299      	cmp	r1, r3
 8020cc4:	d208      	bcs.n	8020cd8 <_sungetc_r+0x60>
 8020cc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020cca:	42a9      	cmp	r1, r5
 8020ccc:	d104      	bne.n	8020cd8 <_sungetc_r+0x60>
 8020cce:	3b01      	subs	r3, #1
 8020cd0:	3201      	adds	r2, #1
 8020cd2:	6023      	str	r3, [r4, #0]
 8020cd4:	6062      	str	r2, [r4, #4]
 8020cd6:	e7d5      	b.n	8020c84 <_sungetc_r+0xc>
 8020cd8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8020ce2:	2303      	movs	r3, #3
 8020ce4:	63a3      	str	r3, [r4, #56]	; 0x38
 8020ce6:	4623      	mov	r3, r4
 8020ce8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020cec:	6023      	str	r3, [r4, #0]
 8020cee:	2301      	movs	r3, #1
 8020cf0:	e7dc      	b.n	8020cac <_sungetc_r+0x34>

08020cf2 <__ssrefill_r>:
 8020cf2:	b510      	push	{r4, lr}
 8020cf4:	460c      	mov	r4, r1
 8020cf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020cf8:	b169      	cbz	r1, 8020d16 <__ssrefill_r+0x24>
 8020cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020cfe:	4299      	cmp	r1, r3
 8020d00:	d001      	beq.n	8020d06 <__ssrefill_r+0x14>
 8020d02:	f7fd f9a7 	bl	801e054 <_free_r>
 8020d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020d08:	6063      	str	r3, [r4, #4]
 8020d0a:	2000      	movs	r0, #0
 8020d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8020d0e:	b113      	cbz	r3, 8020d16 <__ssrefill_r+0x24>
 8020d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020d12:	6023      	str	r3, [r4, #0]
 8020d14:	bd10      	pop	{r4, pc}
 8020d16:	6923      	ldr	r3, [r4, #16]
 8020d18:	6023      	str	r3, [r4, #0]
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	6063      	str	r3, [r4, #4]
 8020d1e:	89a3      	ldrh	r3, [r4, #12]
 8020d20:	f043 0320 	orr.w	r3, r3, #32
 8020d24:	81a3      	strh	r3, [r4, #12]
 8020d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020d2a:	e7f3      	b.n	8020d14 <__ssrefill_r+0x22>

08020d2c <__ssvfiscanf_r>:
 8020d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d30:	460c      	mov	r4, r1
 8020d32:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8020d36:	2100      	movs	r1, #0
 8020d38:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020d3c:	49b2      	ldr	r1, [pc, #712]	; (8021008 <__ssvfiscanf_r+0x2dc>)
 8020d3e:	91a0      	str	r1, [sp, #640]	; 0x280
 8020d40:	f10d 0804 	add.w	r8, sp, #4
 8020d44:	49b1      	ldr	r1, [pc, #708]	; (802100c <__ssvfiscanf_r+0x2e0>)
 8020d46:	4fb2      	ldr	r7, [pc, #712]	; (8021010 <__ssvfiscanf_r+0x2e4>)
 8020d48:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8021014 <__ssvfiscanf_r+0x2e8>
 8020d4c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020d50:	4606      	mov	r6, r0
 8020d52:	91a1      	str	r1, [sp, #644]	; 0x284
 8020d54:	9300      	str	r3, [sp, #0]
 8020d56:	f892 a000 	ldrb.w	sl, [r2]
 8020d5a:	f1ba 0f00 	cmp.w	sl, #0
 8020d5e:	f000 8151 	beq.w	8021004 <__ssvfiscanf_r+0x2d8>
 8020d62:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8020d66:	f013 0308 	ands.w	r3, r3, #8
 8020d6a:	f102 0501 	add.w	r5, r2, #1
 8020d6e:	d019      	beq.n	8020da4 <__ssvfiscanf_r+0x78>
 8020d70:	6863      	ldr	r3, [r4, #4]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	dd0f      	ble.n	8020d96 <__ssvfiscanf_r+0x6a>
 8020d76:	6823      	ldr	r3, [r4, #0]
 8020d78:	781a      	ldrb	r2, [r3, #0]
 8020d7a:	5cba      	ldrb	r2, [r7, r2]
 8020d7c:	0712      	lsls	r2, r2, #28
 8020d7e:	d401      	bmi.n	8020d84 <__ssvfiscanf_r+0x58>
 8020d80:	462a      	mov	r2, r5
 8020d82:	e7e8      	b.n	8020d56 <__ssvfiscanf_r+0x2a>
 8020d84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020d86:	3201      	adds	r2, #1
 8020d88:	9245      	str	r2, [sp, #276]	; 0x114
 8020d8a:	6862      	ldr	r2, [r4, #4]
 8020d8c:	3301      	adds	r3, #1
 8020d8e:	3a01      	subs	r2, #1
 8020d90:	6062      	str	r2, [r4, #4]
 8020d92:	6023      	str	r3, [r4, #0]
 8020d94:	e7ec      	b.n	8020d70 <__ssvfiscanf_r+0x44>
 8020d96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020d98:	4621      	mov	r1, r4
 8020d9a:	4630      	mov	r0, r6
 8020d9c:	4798      	blx	r3
 8020d9e:	2800      	cmp	r0, #0
 8020da0:	d0e9      	beq.n	8020d76 <__ssvfiscanf_r+0x4a>
 8020da2:	e7ed      	b.n	8020d80 <__ssvfiscanf_r+0x54>
 8020da4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020da8:	f040 8083 	bne.w	8020eb2 <__ssvfiscanf_r+0x186>
 8020dac:	9341      	str	r3, [sp, #260]	; 0x104
 8020dae:	9343      	str	r3, [sp, #268]	; 0x10c
 8020db0:	7853      	ldrb	r3, [r2, #1]
 8020db2:	2b2a      	cmp	r3, #42	; 0x2a
 8020db4:	bf02      	ittt	eq
 8020db6:	2310      	moveq	r3, #16
 8020db8:	1c95      	addeq	r5, r2, #2
 8020dba:	9341      	streq	r3, [sp, #260]	; 0x104
 8020dbc:	220a      	movs	r2, #10
 8020dbe:	46ab      	mov	fp, r5
 8020dc0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8020dc4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020dc8:	2b09      	cmp	r3, #9
 8020dca:	d91d      	bls.n	8020e08 <__ssvfiscanf_r+0xdc>
 8020dcc:	4891      	ldr	r0, [pc, #580]	; (8021014 <__ssvfiscanf_r+0x2e8>)
 8020dce:	2203      	movs	r2, #3
 8020dd0:	f7df fa06 	bl	80001e0 <memchr>
 8020dd4:	b140      	cbz	r0, 8020de8 <__ssvfiscanf_r+0xbc>
 8020dd6:	2301      	movs	r3, #1
 8020dd8:	eba0 0009 	sub.w	r0, r0, r9
 8020ddc:	fa03 f000 	lsl.w	r0, r3, r0
 8020de0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020de2:	4318      	orrs	r0, r3
 8020de4:	9041      	str	r0, [sp, #260]	; 0x104
 8020de6:	465d      	mov	r5, fp
 8020de8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020dec:	2b78      	cmp	r3, #120	; 0x78
 8020dee:	d806      	bhi.n	8020dfe <__ssvfiscanf_r+0xd2>
 8020df0:	2b57      	cmp	r3, #87	; 0x57
 8020df2:	d810      	bhi.n	8020e16 <__ssvfiscanf_r+0xea>
 8020df4:	2b25      	cmp	r3, #37	; 0x25
 8020df6:	d05c      	beq.n	8020eb2 <__ssvfiscanf_r+0x186>
 8020df8:	d856      	bhi.n	8020ea8 <__ssvfiscanf_r+0x17c>
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	d074      	beq.n	8020ee8 <__ssvfiscanf_r+0x1bc>
 8020dfe:	2303      	movs	r3, #3
 8020e00:	9347      	str	r3, [sp, #284]	; 0x11c
 8020e02:	230a      	movs	r3, #10
 8020e04:	9342      	str	r3, [sp, #264]	; 0x108
 8020e06:	e081      	b.n	8020f0c <__ssvfiscanf_r+0x1e0>
 8020e08:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020e0a:	fb02 1303 	mla	r3, r2, r3, r1
 8020e0e:	3b30      	subs	r3, #48	; 0x30
 8020e10:	9343      	str	r3, [sp, #268]	; 0x10c
 8020e12:	465d      	mov	r5, fp
 8020e14:	e7d3      	b.n	8020dbe <__ssvfiscanf_r+0x92>
 8020e16:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020e1a:	2a20      	cmp	r2, #32
 8020e1c:	d8ef      	bhi.n	8020dfe <__ssvfiscanf_r+0xd2>
 8020e1e:	a101      	add	r1, pc, #4	; (adr r1, 8020e24 <__ssvfiscanf_r+0xf8>)
 8020e20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020e24:	08020ef7 	.word	0x08020ef7
 8020e28:	08020dff 	.word	0x08020dff
 8020e2c:	08020dff 	.word	0x08020dff
 8020e30:	08020f55 	.word	0x08020f55
 8020e34:	08020dff 	.word	0x08020dff
 8020e38:	08020dff 	.word	0x08020dff
 8020e3c:	08020dff 	.word	0x08020dff
 8020e40:	08020dff 	.word	0x08020dff
 8020e44:	08020dff 	.word	0x08020dff
 8020e48:	08020dff 	.word	0x08020dff
 8020e4c:	08020dff 	.word	0x08020dff
 8020e50:	08020f6b 	.word	0x08020f6b
 8020e54:	08020f41 	.word	0x08020f41
 8020e58:	08020eaf 	.word	0x08020eaf
 8020e5c:	08020eaf 	.word	0x08020eaf
 8020e60:	08020eaf 	.word	0x08020eaf
 8020e64:	08020dff 	.word	0x08020dff
 8020e68:	08020f45 	.word	0x08020f45
 8020e6c:	08020dff 	.word	0x08020dff
 8020e70:	08020dff 	.word	0x08020dff
 8020e74:	08020dff 	.word	0x08020dff
 8020e78:	08020dff 	.word	0x08020dff
 8020e7c:	08020f7b 	.word	0x08020f7b
 8020e80:	08020f4d 	.word	0x08020f4d
 8020e84:	08020eef 	.word	0x08020eef
 8020e88:	08020dff 	.word	0x08020dff
 8020e8c:	08020dff 	.word	0x08020dff
 8020e90:	08020f77 	.word	0x08020f77
 8020e94:	08020dff 	.word	0x08020dff
 8020e98:	08020f41 	.word	0x08020f41
 8020e9c:	08020dff 	.word	0x08020dff
 8020ea0:	08020dff 	.word	0x08020dff
 8020ea4:	08020ef7 	.word	0x08020ef7
 8020ea8:	3b45      	subs	r3, #69	; 0x45
 8020eaa:	2b02      	cmp	r3, #2
 8020eac:	d8a7      	bhi.n	8020dfe <__ssvfiscanf_r+0xd2>
 8020eae:	2305      	movs	r3, #5
 8020eb0:	e02b      	b.n	8020f0a <__ssvfiscanf_r+0x1de>
 8020eb2:	6863      	ldr	r3, [r4, #4]
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	dd0d      	ble.n	8020ed4 <__ssvfiscanf_r+0x1a8>
 8020eb8:	6823      	ldr	r3, [r4, #0]
 8020eba:	781a      	ldrb	r2, [r3, #0]
 8020ebc:	4552      	cmp	r2, sl
 8020ebe:	f040 80a1 	bne.w	8021004 <__ssvfiscanf_r+0x2d8>
 8020ec2:	3301      	adds	r3, #1
 8020ec4:	6862      	ldr	r2, [r4, #4]
 8020ec6:	6023      	str	r3, [r4, #0]
 8020ec8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020eca:	3a01      	subs	r2, #1
 8020ecc:	3301      	adds	r3, #1
 8020ece:	6062      	str	r2, [r4, #4]
 8020ed0:	9345      	str	r3, [sp, #276]	; 0x114
 8020ed2:	e755      	b.n	8020d80 <__ssvfiscanf_r+0x54>
 8020ed4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020ed6:	4621      	mov	r1, r4
 8020ed8:	4630      	mov	r0, r6
 8020eda:	4798      	blx	r3
 8020edc:	2800      	cmp	r0, #0
 8020ede:	d0eb      	beq.n	8020eb8 <__ssvfiscanf_r+0x18c>
 8020ee0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020ee2:	2800      	cmp	r0, #0
 8020ee4:	f040 8084 	bne.w	8020ff0 <__ssvfiscanf_r+0x2c4>
 8020ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020eec:	e086      	b.n	8020ffc <__ssvfiscanf_r+0x2d0>
 8020eee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020ef0:	f042 0220 	orr.w	r2, r2, #32
 8020ef4:	9241      	str	r2, [sp, #260]	; 0x104
 8020ef6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020efc:	9241      	str	r2, [sp, #260]	; 0x104
 8020efe:	2210      	movs	r2, #16
 8020f00:	2b6f      	cmp	r3, #111	; 0x6f
 8020f02:	9242      	str	r2, [sp, #264]	; 0x108
 8020f04:	bf34      	ite	cc
 8020f06:	2303      	movcc	r3, #3
 8020f08:	2304      	movcs	r3, #4
 8020f0a:	9347      	str	r3, [sp, #284]	; 0x11c
 8020f0c:	6863      	ldr	r3, [r4, #4]
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	dd41      	ble.n	8020f96 <__ssvfiscanf_r+0x26a>
 8020f12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020f14:	0659      	lsls	r1, r3, #25
 8020f16:	d404      	bmi.n	8020f22 <__ssvfiscanf_r+0x1f6>
 8020f18:	6823      	ldr	r3, [r4, #0]
 8020f1a:	781a      	ldrb	r2, [r3, #0]
 8020f1c:	5cba      	ldrb	r2, [r7, r2]
 8020f1e:	0712      	lsls	r2, r2, #28
 8020f20:	d440      	bmi.n	8020fa4 <__ssvfiscanf_r+0x278>
 8020f22:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020f24:	2b02      	cmp	r3, #2
 8020f26:	dc4f      	bgt.n	8020fc8 <__ssvfiscanf_r+0x29c>
 8020f28:	466b      	mov	r3, sp
 8020f2a:	4622      	mov	r2, r4
 8020f2c:	a941      	add	r1, sp, #260	; 0x104
 8020f2e:	4630      	mov	r0, r6
 8020f30:	f000 f9ce 	bl	80212d0 <_scanf_chars>
 8020f34:	2801      	cmp	r0, #1
 8020f36:	d065      	beq.n	8021004 <__ssvfiscanf_r+0x2d8>
 8020f38:	2802      	cmp	r0, #2
 8020f3a:	f47f af21 	bne.w	8020d80 <__ssvfiscanf_r+0x54>
 8020f3e:	e7cf      	b.n	8020ee0 <__ssvfiscanf_r+0x1b4>
 8020f40:	220a      	movs	r2, #10
 8020f42:	e7dd      	b.n	8020f00 <__ssvfiscanf_r+0x1d4>
 8020f44:	2300      	movs	r3, #0
 8020f46:	9342      	str	r3, [sp, #264]	; 0x108
 8020f48:	2303      	movs	r3, #3
 8020f4a:	e7de      	b.n	8020f0a <__ssvfiscanf_r+0x1de>
 8020f4c:	2308      	movs	r3, #8
 8020f4e:	9342      	str	r3, [sp, #264]	; 0x108
 8020f50:	2304      	movs	r3, #4
 8020f52:	e7da      	b.n	8020f0a <__ssvfiscanf_r+0x1de>
 8020f54:	4629      	mov	r1, r5
 8020f56:	4640      	mov	r0, r8
 8020f58:	f000 fb18 	bl	802158c <__sccl>
 8020f5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f62:	9341      	str	r3, [sp, #260]	; 0x104
 8020f64:	4605      	mov	r5, r0
 8020f66:	2301      	movs	r3, #1
 8020f68:	e7cf      	b.n	8020f0a <__ssvfiscanf_r+0x1de>
 8020f6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f70:	9341      	str	r3, [sp, #260]	; 0x104
 8020f72:	2300      	movs	r3, #0
 8020f74:	e7c9      	b.n	8020f0a <__ssvfiscanf_r+0x1de>
 8020f76:	2302      	movs	r3, #2
 8020f78:	e7c7      	b.n	8020f0a <__ssvfiscanf_r+0x1de>
 8020f7a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020f7c:	06c3      	lsls	r3, r0, #27
 8020f7e:	f53f aeff 	bmi.w	8020d80 <__ssvfiscanf_r+0x54>
 8020f82:	9b00      	ldr	r3, [sp, #0]
 8020f84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020f86:	1d19      	adds	r1, r3, #4
 8020f88:	9100      	str	r1, [sp, #0]
 8020f8a:	681b      	ldr	r3, [r3, #0]
 8020f8c:	07c0      	lsls	r0, r0, #31
 8020f8e:	bf4c      	ite	mi
 8020f90:	801a      	strhmi	r2, [r3, #0]
 8020f92:	601a      	strpl	r2, [r3, #0]
 8020f94:	e6f4      	b.n	8020d80 <__ssvfiscanf_r+0x54>
 8020f96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020f98:	4621      	mov	r1, r4
 8020f9a:	4630      	mov	r0, r6
 8020f9c:	4798      	blx	r3
 8020f9e:	2800      	cmp	r0, #0
 8020fa0:	d0b7      	beq.n	8020f12 <__ssvfiscanf_r+0x1e6>
 8020fa2:	e79d      	b.n	8020ee0 <__ssvfiscanf_r+0x1b4>
 8020fa4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020fa6:	3201      	adds	r2, #1
 8020fa8:	9245      	str	r2, [sp, #276]	; 0x114
 8020faa:	6862      	ldr	r2, [r4, #4]
 8020fac:	3a01      	subs	r2, #1
 8020fae:	2a00      	cmp	r2, #0
 8020fb0:	6062      	str	r2, [r4, #4]
 8020fb2:	dd02      	ble.n	8020fba <__ssvfiscanf_r+0x28e>
 8020fb4:	3301      	adds	r3, #1
 8020fb6:	6023      	str	r3, [r4, #0]
 8020fb8:	e7ae      	b.n	8020f18 <__ssvfiscanf_r+0x1ec>
 8020fba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020fbc:	4621      	mov	r1, r4
 8020fbe:	4630      	mov	r0, r6
 8020fc0:	4798      	blx	r3
 8020fc2:	2800      	cmp	r0, #0
 8020fc4:	d0a8      	beq.n	8020f18 <__ssvfiscanf_r+0x1ec>
 8020fc6:	e78b      	b.n	8020ee0 <__ssvfiscanf_r+0x1b4>
 8020fc8:	2b04      	cmp	r3, #4
 8020fca:	dc06      	bgt.n	8020fda <__ssvfiscanf_r+0x2ae>
 8020fcc:	466b      	mov	r3, sp
 8020fce:	4622      	mov	r2, r4
 8020fd0:	a941      	add	r1, sp, #260	; 0x104
 8020fd2:	4630      	mov	r0, r6
 8020fd4:	f000 f9d4 	bl	8021380 <_scanf_i>
 8020fd8:	e7ac      	b.n	8020f34 <__ssvfiscanf_r+0x208>
 8020fda:	4b0f      	ldr	r3, [pc, #60]	; (8021018 <__ssvfiscanf_r+0x2ec>)
 8020fdc:	2b00      	cmp	r3, #0
 8020fde:	f43f aecf 	beq.w	8020d80 <__ssvfiscanf_r+0x54>
 8020fe2:	466b      	mov	r3, sp
 8020fe4:	4622      	mov	r2, r4
 8020fe6:	a941      	add	r1, sp, #260	; 0x104
 8020fe8:	4630      	mov	r0, r6
 8020fea:	f3af 8000 	nop.w
 8020fee:	e7a1      	b.n	8020f34 <__ssvfiscanf_r+0x208>
 8020ff0:	89a3      	ldrh	r3, [r4, #12]
 8020ff2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020ff6:	bf18      	it	ne
 8020ff8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020ffc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8021000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021004:	9844      	ldr	r0, [sp, #272]	; 0x110
 8021006:	e7f9      	b.n	8020ffc <__ssvfiscanf_r+0x2d0>
 8021008:	08020c79 	.word	0x08020c79
 802100c:	08020cf3 	.word	0x08020cf3
 8021010:	080266dd 	.word	0x080266dd
 8021014:	08026b6a 	.word	0x08026b6a
 8021018:	00000000 	.word	0x00000000

0802101c <__sfputc_r>:
 802101c:	6893      	ldr	r3, [r2, #8]
 802101e:	3b01      	subs	r3, #1
 8021020:	2b00      	cmp	r3, #0
 8021022:	b410      	push	{r4}
 8021024:	6093      	str	r3, [r2, #8]
 8021026:	da08      	bge.n	802103a <__sfputc_r+0x1e>
 8021028:	6994      	ldr	r4, [r2, #24]
 802102a:	42a3      	cmp	r3, r4
 802102c:	db01      	blt.n	8021032 <__sfputc_r+0x16>
 802102e:	290a      	cmp	r1, #10
 8021030:	d103      	bne.n	802103a <__sfputc_r+0x1e>
 8021032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021036:	f7fe b85f 	b.w	801f0f8 <__swbuf_r>
 802103a:	6813      	ldr	r3, [r2, #0]
 802103c:	1c58      	adds	r0, r3, #1
 802103e:	6010      	str	r0, [r2, #0]
 8021040:	7019      	strb	r1, [r3, #0]
 8021042:	4608      	mov	r0, r1
 8021044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021048:	4770      	bx	lr

0802104a <__sfputs_r>:
 802104a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802104c:	4606      	mov	r6, r0
 802104e:	460f      	mov	r7, r1
 8021050:	4614      	mov	r4, r2
 8021052:	18d5      	adds	r5, r2, r3
 8021054:	42ac      	cmp	r4, r5
 8021056:	d101      	bne.n	802105c <__sfputs_r+0x12>
 8021058:	2000      	movs	r0, #0
 802105a:	e007      	b.n	802106c <__sfputs_r+0x22>
 802105c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021060:	463a      	mov	r2, r7
 8021062:	4630      	mov	r0, r6
 8021064:	f7ff ffda 	bl	802101c <__sfputc_r>
 8021068:	1c43      	adds	r3, r0, #1
 802106a:	d1f3      	bne.n	8021054 <__sfputs_r+0xa>
 802106c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021070 <_vfiprintf_r>:
 8021070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021074:	460d      	mov	r5, r1
 8021076:	b09d      	sub	sp, #116	; 0x74
 8021078:	4614      	mov	r4, r2
 802107a:	4698      	mov	r8, r3
 802107c:	4606      	mov	r6, r0
 802107e:	b118      	cbz	r0, 8021088 <_vfiprintf_r+0x18>
 8021080:	6983      	ldr	r3, [r0, #24]
 8021082:	b90b      	cbnz	r3, 8021088 <_vfiprintf_r+0x18>
 8021084:	f7fc fed2 	bl	801de2c <__sinit>
 8021088:	4b89      	ldr	r3, [pc, #548]	; (80212b0 <_vfiprintf_r+0x240>)
 802108a:	429d      	cmp	r5, r3
 802108c:	d11b      	bne.n	80210c6 <_vfiprintf_r+0x56>
 802108e:	6875      	ldr	r5, [r6, #4]
 8021090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021092:	07d9      	lsls	r1, r3, #31
 8021094:	d405      	bmi.n	80210a2 <_vfiprintf_r+0x32>
 8021096:	89ab      	ldrh	r3, [r5, #12]
 8021098:	059a      	lsls	r2, r3, #22
 802109a:	d402      	bmi.n	80210a2 <_vfiprintf_r+0x32>
 802109c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802109e:	f7fc ff88 	bl	801dfb2 <__retarget_lock_acquire_recursive>
 80210a2:	89ab      	ldrh	r3, [r5, #12]
 80210a4:	071b      	lsls	r3, r3, #28
 80210a6:	d501      	bpl.n	80210ac <_vfiprintf_r+0x3c>
 80210a8:	692b      	ldr	r3, [r5, #16]
 80210aa:	b9eb      	cbnz	r3, 80210e8 <_vfiprintf_r+0x78>
 80210ac:	4629      	mov	r1, r5
 80210ae:	4630      	mov	r0, r6
 80210b0:	f7fe f886 	bl	801f1c0 <__swsetup_r>
 80210b4:	b1c0      	cbz	r0, 80210e8 <_vfiprintf_r+0x78>
 80210b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80210b8:	07dc      	lsls	r4, r3, #31
 80210ba:	d50e      	bpl.n	80210da <_vfiprintf_r+0x6a>
 80210bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80210c0:	b01d      	add	sp, #116	; 0x74
 80210c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210c6:	4b7b      	ldr	r3, [pc, #492]	; (80212b4 <_vfiprintf_r+0x244>)
 80210c8:	429d      	cmp	r5, r3
 80210ca:	d101      	bne.n	80210d0 <_vfiprintf_r+0x60>
 80210cc:	68b5      	ldr	r5, [r6, #8]
 80210ce:	e7df      	b.n	8021090 <_vfiprintf_r+0x20>
 80210d0:	4b79      	ldr	r3, [pc, #484]	; (80212b8 <_vfiprintf_r+0x248>)
 80210d2:	429d      	cmp	r5, r3
 80210d4:	bf08      	it	eq
 80210d6:	68f5      	ldreq	r5, [r6, #12]
 80210d8:	e7da      	b.n	8021090 <_vfiprintf_r+0x20>
 80210da:	89ab      	ldrh	r3, [r5, #12]
 80210dc:	0598      	lsls	r0, r3, #22
 80210de:	d4ed      	bmi.n	80210bc <_vfiprintf_r+0x4c>
 80210e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80210e2:	f7fc ff67 	bl	801dfb4 <__retarget_lock_release_recursive>
 80210e6:	e7e9      	b.n	80210bc <_vfiprintf_r+0x4c>
 80210e8:	2300      	movs	r3, #0
 80210ea:	9309      	str	r3, [sp, #36]	; 0x24
 80210ec:	2320      	movs	r3, #32
 80210ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80210f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80210f6:	2330      	movs	r3, #48	; 0x30
 80210f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80212bc <_vfiprintf_r+0x24c>
 80210fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021100:	f04f 0901 	mov.w	r9, #1
 8021104:	4623      	mov	r3, r4
 8021106:	469a      	mov	sl, r3
 8021108:	f813 2b01 	ldrb.w	r2, [r3], #1
 802110c:	b10a      	cbz	r2, 8021112 <_vfiprintf_r+0xa2>
 802110e:	2a25      	cmp	r2, #37	; 0x25
 8021110:	d1f9      	bne.n	8021106 <_vfiprintf_r+0x96>
 8021112:	ebba 0b04 	subs.w	fp, sl, r4
 8021116:	d00b      	beq.n	8021130 <_vfiprintf_r+0xc0>
 8021118:	465b      	mov	r3, fp
 802111a:	4622      	mov	r2, r4
 802111c:	4629      	mov	r1, r5
 802111e:	4630      	mov	r0, r6
 8021120:	f7ff ff93 	bl	802104a <__sfputs_r>
 8021124:	3001      	adds	r0, #1
 8021126:	f000 80aa 	beq.w	802127e <_vfiprintf_r+0x20e>
 802112a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802112c:	445a      	add	r2, fp
 802112e:	9209      	str	r2, [sp, #36]	; 0x24
 8021130:	f89a 3000 	ldrb.w	r3, [sl]
 8021134:	2b00      	cmp	r3, #0
 8021136:	f000 80a2 	beq.w	802127e <_vfiprintf_r+0x20e>
 802113a:	2300      	movs	r3, #0
 802113c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021144:	f10a 0a01 	add.w	sl, sl, #1
 8021148:	9304      	str	r3, [sp, #16]
 802114a:	9307      	str	r3, [sp, #28]
 802114c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021150:	931a      	str	r3, [sp, #104]	; 0x68
 8021152:	4654      	mov	r4, sl
 8021154:	2205      	movs	r2, #5
 8021156:	f814 1b01 	ldrb.w	r1, [r4], #1
 802115a:	4858      	ldr	r0, [pc, #352]	; (80212bc <_vfiprintf_r+0x24c>)
 802115c:	f7df f840 	bl	80001e0 <memchr>
 8021160:	9a04      	ldr	r2, [sp, #16]
 8021162:	b9d8      	cbnz	r0, 802119c <_vfiprintf_r+0x12c>
 8021164:	06d1      	lsls	r1, r2, #27
 8021166:	bf44      	itt	mi
 8021168:	2320      	movmi	r3, #32
 802116a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802116e:	0713      	lsls	r3, r2, #28
 8021170:	bf44      	itt	mi
 8021172:	232b      	movmi	r3, #43	; 0x2b
 8021174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021178:	f89a 3000 	ldrb.w	r3, [sl]
 802117c:	2b2a      	cmp	r3, #42	; 0x2a
 802117e:	d015      	beq.n	80211ac <_vfiprintf_r+0x13c>
 8021180:	9a07      	ldr	r2, [sp, #28]
 8021182:	4654      	mov	r4, sl
 8021184:	2000      	movs	r0, #0
 8021186:	f04f 0c0a 	mov.w	ip, #10
 802118a:	4621      	mov	r1, r4
 802118c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021190:	3b30      	subs	r3, #48	; 0x30
 8021192:	2b09      	cmp	r3, #9
 8021194:	d94e      	bls.n	8021234 <_vfiprintf_r+0x1c4>
 8021196:	b1b0      	cbz	r0, 80211c6 <_vfiprintf_r+0x156>
 8021198:	9207      	str	r2, [sp, #28]
 802119a:	e014      	b.n	80211c6 <_vfiprintf_r+0x156>
 802119c:	eba0 0308 	sub.w	r3, r0, r8
 80211a0:	fa09 f303 	lsl.w	r3, r9, r3
 80211a4:	4313      	orrs	r3, r2
 80211a6:	9304      	str	r3, [sp, #16]
 80211a8:	46a2      	mov	sl, r4
 80211aa:	e7d2      	b.n	8021152 <_vfiprintf_r+0xe2>
 80211ac:	9b03      	ldr	r3, [sp, #12]
 80211ae:	1d19      	adds	r1, r3, #4
 80211b0:	681b      	ldr	r3, [r3, #0]
 80211b2:	9103      	str	r1, [sp, #12]
 80211b4:	2b00      	cmp	r3, #0
 80211b6:	bfbb      	ittet	lt
 80211b8:	425b      	neglt	r3, r3
 80211ba:	f042 0202 	orrlt.w	r2, r2, #2
 80211be:	9307      	strge	r3, [sp, #28]
 80211c0:	9307      	strlt	r3, [sp, #28]
 80211c2:	bfb8      	it	lt
 80211c4:	9204      	strlt	r2, [sp, #16]
 80211c6:	7823      	ldrb	r3, [r4, #0]
 80211c8:	2b2e      	cmp	r3, #46	; 0x2e
 80211ca:	d10c      	bne.n	80211e6 <_vfiprintf_r+0x176>
 80211cc:	7863      	ldrb	r3, [r4, #1]
 80211ce:	2b2a      	cmp	r3, #42	; 0x2a
 80211d0:	d135      	bne.n	802123e <_vfiprintf_r+0x1ce>
 80211d2:	9b03      	ldr	r3, [sp, #12]
 80211d4:	1d1a      	adds	r2, r3, #4
 80211d6:	681b      	ldr	r3, [r3, #0]
 80211d8:	9203      	str	r2, [sp, #12]
 80211da:	2b00      	cmp	r3, #0
 80211dc:	bfb8      	it	lt
 80211de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80211e2:	3402      	adds	r4, #2
 80211e4:	9305      	str	r3, [sp, #20]
 80211e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80212cc <_vfiprintf_r+0x25c>
 80211ea:	7821      	ldrb	r1, [r4, #0]
 80211ec:	2203      	movs	r2, #3
 80211ee:	4650      	mov	r0, sl
 80211f0:	f7de fff6 	bl	80001e0 <memchr>
 80211f4:	b140      	cbz	r0, 8021208 <_vfiprintf_r+0x198>
 80211f6:	2340      	movs	r3, #64	; 0x40
 80211f8:	eba0 000a 	sub.w	r0, r0, sl
 80211fc:	fa03 f000 	lsl.w	r0, r3, r0
 8021200:	9b04      	ldr	r3, [sp, #16]
 8021202:	4303      	orrs	r3, r0
 8021204:	3401      	adds	r4, #1
 8021206:	9304      	str	r3, [sp, #16]
 8021208:	f814 1b01 	ldrb.w	r1, [r4], #1
 802120c:	482c      	ldr	r0, [pc, #176]	; (80212c0 <_vfiprintf_r+0x250>)
 802120e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021212:	2206      	movs	r2, #6
 8021214:	f7de ffe4 	bl	80001e0 <memchr>
 8021218:	2800      	cmp	r0, #0
 802121a:	d03f      	beq.n	802129c <_vfiprintf_r+0x22c>
 802121c:	4b29      	ldr	r3, [pc, #164]	; (80212c4 <_vfiprintf_r+0x254>)
 802121e:	bb1b      	cbnz	r3, 8021268 <_vfiprintf_r+0x1f8>
 8021220:	9b03      	ldr	r3, [sp, #12]
 8021222:	3307      	adds	r3, #7
 8021224:	f023 0307 	bic.w	r3, r3, #7
 8021228:	3308      	adds	r3, #8
 802122a:	9303      	str	r3, [sp, #12]
 802122c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802122e:	443b      	add	r3, r7
 8021230:	9309      	str	r3, [sp, #36]	; 0x24
 8021232:	e767      	b.n	8021104 <_vfiprintf_r+0x94>
 8021234:	fb0c 3202 	mla	r2, ip, r2, r3
 8021238:	460c      	mov	r4, r1
 802123a:	2001      	movs	r0, #1
 802123c:	e7a5      	b.n	802118a <_vfiprintf_r+0x11a>
 802123e:	2300      	movs	r3, #0
 8021240:	3401      	adds	r4, #1
 8021242:	9305      	str	r3, [sp, #20]
 8021244:	4619      	mov	r1, r3
 8021246:	f04f 0c0a 	mov.w	ip, #10
 802124a:	4620      	mov	r0, r4
 802124c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021250:	3a30      	subs	r2, #48	; 0x30
 8021252:	2a09      	cmp	r2, #9
 8021254:	d903      	bls.n	802125e <_vfiprintf_r+0x1ee>
 8021256:	2b00      	cmp	r3, #0
 8021258:	d0c5      	beq.n	80211e6 <_vfiprintf_r+0x176>
 802125a:	9105      	str	r1, [sp, #20]
 802125c:	e7c3      	b.n	80211e6 <_vfiprintf_r+0x176>
 802125e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021262:	4604      	mov	r4, r0
 8021264:	2301      	movs	r3, #1
 8021266:	e7f0      	b.n	802124a <_vfiprintf_r+0x1da>
 8021268:	ab03      	add	r3, sp, #12
 802126a:	9300      	str	r3, [sp, #0]
 802126c:	462a      	mov	r2, r5
 802126e:	4b16      	ldr	r3, [pc, #88]	; (80212c8 <_vfiprintf_r+0x258>)
 8021270:	a904      	add	r1, sp, #16
 8021272:	4630      	mov	r0, r6
 8021274:	f7fd f838 	bl	801e2e8 <_printf_float>
 8021278:	4607      	mov	r7, r0
 802127a:	1c78      	adds	r0, r7, #1
 802127c:	d1d6      	bne.n	802122c <_vfiprintf_r+0x1bc>
 802127e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021280:	07d9      	lsls	r1, r3, #31
 8021282:	d405      	bmi.n	8021290 <_vfiprintf_r+0x220>
 8021284:	89ab      	ldrh	r3, [r5, #12]
 8021286:	059a      	lsls	r2, r3, #22
 8021288:	d402      	bmi.n	8021290 <_vfiprintf_r+0x220>
 802128a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802128c:	f7fc fe92 	bl	801dfb4 <__retarget_lock_release_recursive>
 8021290:	89ab      	ldrh	r3, [r5, #12]
 8021292:	065b      	lsls	r3, r3, #25
 8021294:	f53f af12 	bmi.w	80210bc <_vfiprintf_r+0x4c>
 8021298:	9809      	ldr	r0, [sp, #36]	; 0x24
 802129a:	e711      	b.n	80210c0 <_vfiprintf_r+0x50>
 802129c:	ab03      	add	r3, sp, #12
 802129e:	9300      	str	r3, [sp, #0]
 80212a0:	462a      	mov	r2, r5
 80212a2:	4b09      	ldr	r3, [pc, #36]	; (80212c8 <_vfiprintf_r+0x258>)
 80212a4:	a904      	add	r1, sp, #16
 80212a6:	4630      	mov	r0, r6
 80212a8:	f7fd fac2 	bl	801e830 <_printf_i>
 80212ac:	e7e4      	b.n	8021278 <_vfiprintf_r+0x208>
 80212ae:	bf00      	nop
 80212b0:	08026800 	.word	0x08026800
 80212b4:	08026820 	.word	0x08026820
 80212b8:	080267e0 	.word	0x080267e0
 80212bc:	08026b64 	.word	0x08026b64
 80212c0:	08026b6e 	.word	0x08026b6e
 80212c4:	0801e2e9 	.word	0x0801e2e9
 80212c8:	0802104b 	.word	0x0802104b
 80212cc:	08026b6a 	.word	0x08026b6a

080212d0 <_scanf_chars>:
 80212d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212d4:	4615      	mov	r5, r2
 80212d6:	688a      	ldr	r2, [r1, #8]
 80212d8:	4680      	mov	r8, r0
 80212da:	460c      	mov	r4, r1
 80212dc:	b932      	cbnz	r2, 80212ec <_scanf_chars+0x1c>
 80212de:	698a      	ldr	r2, [r1, #24]
 80212e0:	2a00      	cmp	r2, #0
 80212e2:	bf0c      	ite	eq
 80212e4:	2201      	moveq	r2, #1
 80212e6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80212ea:	608a      	str	r2, [r1, #8]
 80212ec:	6822      	ldr	r2, [r4, #0]
 80212ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 802137c <_scanf_chars+0xac>
 80212f2:	06d1      	lsls	r1, r2, #27
 80212f4:	bf5f      	itttt	pl
 80212f6:	681a      	ldrpl	r2, [r3, #0]
 80212f8:	1d11      	addpl	r1, r2, #4
 80212fa:	6019      	strpl	r1, [r3, #0]
 80212fc:	6816      	ldrpl	r6, [r2, #0]
 80212fe:	2700      	movs	r7, #0
 8021300:	69a0      	ldr	r0, [r4, #24]
 8021302:	b188      	cbz	r0, 8021328 <_scanf_chars+0x58>
 8021304:	2801      	cmp	r0, #1
 8021306:	d107      	bne.n	8021318 <_scanf_chars+0x48>
 8021308:	682b      	ldr	r3, [r5, #0]
 802130a:	781a      	ldrb	r2, [r3, #0]
 802130c:	6963      	ldr	r3, [r4, #20]
 802130e:	5c9b      	ldrb	r3, [r3, r2]
 8021310:	b953      	cbnz	r3, 8021328 <_scanf_chars+0x58>
 8021312:	bb27      	cbnz	r7, 802135e <_scanf_chars+0x8e>
 8021314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021318:	2802      	cmp	r0, #2
 802131a:	d120      	bne.n	802135e <_scanf_chars+0x8e>
 802131c:	682b      	ldr	r3, [r5, #0]
 802131e:	781b      	ldrb	r3, [r3, #0]
 8021320:	f813 3009 	ldrb.w	r3, [r3, r9]
 8021324:	071b      	lsls	r3, r3, #28
 8021326:	d41a      	bmi.n	802135e <_scanf_chars+0x8e>
 8021328:	6823      	ldr	r3, [r4, #0]
 802132a:	06da      	lsls	r2, r3, #27
 802132c:	bf5e      	ittt	pl
 802132e:	682b      	ldrpl	r3, [r5, #0]
 8021330:	781b      	ldrbpl	r3, [r3, #0]
 8021332:	f806 3b01 	strbpl.w	r3, [r6], #1
 8021336:	682a      	ldr	r2, [r5, #0]
 8021338:	686b      	ldr	r3, [r5, #4]
 802133a:	3201      	adds	r2, #1
 802133c:	602a      	str	r2, [r5, #0]
 802133e:	68a2      	ldr	r2, [r4, #8]
 8021340:	3b01      	subs	r3, #1
 8021342:	3a01      	subs	r2, #1
 8021344:	606b      	str	r3, [r5, #4]
 8021346:	3701      	adds	r7, #1
 8021348:	60a2      	str	r2, [r4, #8]
 802134a:	b142      	cbz	r2, 802135e <_scanf_chars+0x8e>
 802134c:	2b00      	cmp	r3, #0
 802134e:	dcd7      	bgt.n	8021300 <_scanf_chars+0x30>
 8021350:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021354:	4629      	mov	r1, r5
 8021356:	4640      	mov	r0, r8
 8021358:	4798      	blx	r3
 802135a:	2800      	cmp	r0, #0
 802135c:	d0d0      	beq.n	8021300 <_scanf_chars+0x30>
 802135e:	6823      	ldr	r3, [r4, #0]
 8021360:	f013 0310 	ands.w	r3, r3, #16
 8021364:	d105      	bne.n	8021372 <_scanf_chars+0xa2>
 8021366:	68e2      	ldr	r2, [r4, #12]
 8021368:	3201      	adds	r2, #1
 802136a:	60e2      	str	r2, [r4, #12]
 802136c:	69a2      	ldr	r2, [r4, #24]
 802136e:	b102      	cbz	r2, 8021372 <_scanf_chars+0xa2>
 8021370:	7033      	strb	r3, [r6, #0]
 8021372:	6923      	ldr	r3, [r4, #16]
 8021374:	441f      	add	r7, r3
 8021376:	6127      	str	r7, [r4, #16]
 8021378:	2000      	movs	r0, #0
 802137a:	e7cb      	b.n	8021314 <_scanf_chars+0x44>
 802137c:	080266dd 	.word	0x080266dd

08021380 <_scanf_i>:
 8021380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021384:	4698      	mov	r8, r3
 8021386:	4b74      	ldr	r3, [pc, #464]	; (8021558 <_scanf_i+0x1d8>)
 8021388:	460c      	mov	r4, r1
 802138a:	4682      	mov	sl, r0
 802138c:	4616      	mov	r6, r2
 802138e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021392:	b087      	sub	sp, #28
 8021394:	ab03      	add	r3, sp, #12
 8021396:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802139a:	4b70      	ldr	r3, [pc, #448]	; (802155c <_scanf_i+0x1dc>)
 802139c:	69a1      	ldr	r1, [r4, #24]
 802139e:	4a70      	ldr	r2, [pc, #448]	; (8021560 <_scanf_i+0x1e0>)
 80213a0:	2903      	cmp	r1, #3
 80213a2:	bf18      	it	ne
 80213a4:	461a      	movne	r2, r3
 80213a6:	68a3      	ldr	r3, [r4, #8]
 80213a8:	9201      	str	r2, [sp, #4]
 80213aa:	1e5a      	subs	r2, r3, #1
 80213ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80213b0:	bf88      	it	hi
 80213b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80213b6:	4627      	mov	r7, r4
 80213b8:	bf82      	ittt	hi
 80213ba:	eb03 0905 	addhi.w	r9, r3, r5
 80213be:	f240 135d 	movwhi	r3, #349	; 0x15d
 80213c2:	60a3      	strhi	r3, [r4, #8]
 80213c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80213c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80213cc:	bf98      	it	ls
 80213ce:	f04f 0900 	movls.w	r9, #0
 80213d2:	6023      	str	r3, [r4, #0]
 80213d4:	463d      	mov	r5, r7
 80213d6:	f04f 0b00 	mov.w	fp, #0
 80213da:	6831      	ldr	r1, [r6, #0]
 80213dc:	ab03      	add	r3, sp, #12
 80213de:	7809      	ldrb	r1, [r1, #0]
 80213e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80213e4:	2202      	movs	r2, #2
 80213e6:	f7de fefb 	bl	80001e0 <memchr>
 80213ea:	b328      	cbz	r0, 8021438 <_scanf_i+0xb8>
 80213ec:	f1bb 0f01 	cmp.w	fp, #1
 80213f0:	d159      	bne.n	80214a6 <_scanf_i+0x126>
 80213f2:	6862      	ldr	r2, [r4, #4]
 80213f4:	b92a      	cbnz	r2, 8021402 <_scanf_i+0x82>
 80213f6:	6822      	ldr	r2, [r4, #0]
 80213f8:	2308      	movs	r3, #8
 80213fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80213fe:	6063      	str	r3, [r4, #4]
 8021400:	6022      	str	r2, [r4, #0]
 8021402:	6822      	ldr	r2, [r4, #0]
 8021404:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8021408:	6022      	str	r2, [r4, #0]
 802140a:	68a2      	ldr	r2, [r4, #8]
 802140c:	1e51      	subs	r1, r2, #1
 802140e:	60a1      	str	r1, [r4, #8]
 8021410:	b192      	cbz	r2, 8021438 <_scanf_i+0xb8>
 8021412:	6832      	ldr	r2, [r6, #0]
 8021414:	1c51      	adds	r1, r2, #1
 8021416:	6031      	str	r1, [r6, #0]
 8021418:	7812      	ldrb	r2, [r2, #0]
 802141a:	f805 2b01 	strb.w	r2, [r5], #1
 802141e:	6872      	ldr	r2, [r6, #4]
 8021420:	3a01      	subs	r2, #1
 8021422:	2a00      	cmp	r2, #0
 8021424:	6072      	str	r2, [r6, #4]
 8021426:	dc07      	bgt.n	8021438 <_scanf_i+0xb8>
 8021428:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802142c:	4631      	mov	r1, r6
 802142e:	4650      	mov	r0, sl
 8021430:	4790      	blx	r2
 8021432:	2800      	cmp	r0, #0
 8021434:	f040 8085 	bne.w	8021542 <_scanf_i+0x1c2>
 8021438:	f10b 0b01 	add.w	fp, fp, #1
 802143c:	f1bb 0f03 	cmp.w	fp, #3
 8021440:	d1cb      	bne.n	80213da <_scanf_i+0x5a>
 8021442:	6863      	ldr	r3, [r4, #4]
 8021444:	b90b      	cbnz	r3, 802144a <_scanf_i+0xca>
 8021446:	230a      	movs	r3, #10
 8021448:	6063      	str	r3, [r4, #4]
 802144a:	6863      	ldr	r3, [r4, #4]
 802144c:	4945      	ldr	r1, [pc, #276]	; (8021564 <_scanf_i+0x1e4>)
 802144e:	6960      	ldr	r0, [r4, #20]
 8021450:	1ac9      	subs	r1, r1, r3
 8021452:	f000 f89b 	bl	802158c <__sccl>
 8021456:	f04f 0b00 	mov.w	fp, #0
 802145a:	68a3      	ldr	r3, [r4, #8]
 802145c:	6822      	ldr	r2, [r4, #0]
 802145e:	2b00      	cmp	r3, #0
 8021460:	d03d      	beq.n	80214de <_scanf_i+0x15e>
 8021462:	6831      	ldr	r1, [r6, #0]
 8021464:	6960      	ldr	r0, [r4, #20]
 8021466:	f891 c000 	ldrb.w	ip, [r1]
 802146a:	f810 000c 	ldrb.w	r0, [r0, ip]
 802146e:	2800      	cmp	r0, #0
 8021470:	d035      	beq.n	80214de <_scanf_i+0x15e>
 8021472:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8021476:	d124      	bne.n	80214c2 <_scanf_i+0x142>
 8021478:	0510      	lsls	r0, r2, #20
 802147a:	d522      	bpl.n	80214c2 <_scanf_i+0x142>
 802147c:	f10b 0b01 	add.w	fp, fp, #1
 8021480:	f1b9 0f00 	cmp.w	r9, #0
 8021484:	d003      	beq.n	802148e <_scanf_i+0x10e>
 8021486:	3301      	adds	r3, #1
 8021488:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 802148c:	60a3      	str	r3, [r4, #8]
 802148e:	6873      	ldr	r3, [r6, #4]
 8021490:	3b01      	subs	r3, #1
 8021492:	2b00      	cmp	r3, #0
 8021494:	6073      	str	r3, [r6, #4]
 8021496:	dd1b      	ble.n	80214d0 <_scanf_i+0x150>
 8021498:	6833      	ldr	r3, [r6, #0]
 802149a:	3301      	adds	r3, #1
 802149c:	6033      	str	r3, [r6, #0]
 802149e:	68a3      	ldr	r3, [r4, #8]
 80214a0:	3b01      	subs	r3, #1
 80214a2:	60a3      	str	r3, [r4, #8]
 80214a4:	e7d9      	b.n	802145a <_scanf_i+0xda>
 80214a6:	f1bb 0f02 	cmp.w	fp, #2
 80214aa:	d1ae      	bne.n	802140a <_scanf_i+0x8a>
 80214ac:	6822      	ldr	r2, [r4, #0]
 80214ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80214b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80214b6:	d1bf      	bne.n	8021438 <_scanf_i+0xb8>
 80214b8:	2310      	movs	r3, #16
 80214ba:	6063      	str	r3, [r4, #4]
 80214bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80214c0:	e7a2      	b.n	8021408 <_scanf_i+0x88>
 80214c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80214c6:	6022      	str	r2, [r4, #0]
 80214c8:	780b      	ldrb	r3, [r1, #0]
 80214ca:	f805 3b01 	strb.w	r3, [r5], #1
 80214ce:	e7de      	b.n	802148e <_scanf_i+0x10e>
 80214d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80214d4:	4631      	mov	r1, r6
 80214d6:	4650      	mov	r0, sl
 80214d8:	4798      	blx	r3
 80214da:	2800      	cmp	r0, #0
 80214dc:	d0df      	beq.n	802149e <_scanf_i+0x11e>
 80214de:	6823      	ldr	r3, [r4, #0]
 80214e0:	05d9      	lsls	r1, r3, #23
 80214e2:	d50d      	bpl.n	8021500 <_scanf_i+0x180>
 80214e4:	42bd      	cmp	r5, r7
 80214e6:	d909      	bls.n	80214fc <_scanf_i+0x17c>
 80214e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80214ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80214f0:	4632      	mov	r2, r6
 80214f2:	4650      	mov	r0, sl
 80214f4:	4798      	blx	r3
 80214f6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80214fa:	464d      	mov	r5, r9
 80214fc:	42bd      	cmp	r5, r7
 80214fe:	d028      	beq.n	8021552 <_scanf_i+0x1d2>
 8021500:	6822      	ldr	r2, [r4, #0]
 8021502:	f012 0210 	ands.w	r2, r2, #16
 8021506:	d113      	bne.n	8021530 <_scanf_i+0x1b0>
 8021508:	702a      	strb	r2, [r5, #0]
 802150a:	6863      	ldr	r3, [r4, #4]
 802150c:	9e01      	ldr	r6, [sp, #4]
 802150e:	4639      	mov	r1, r7
 8021510:	4650      	mov	r0, sl
 8021512:	47b0      	blx	r6
 8021514:	f8d8 3000 	ldr.w	r3, [r8]
 8021518:	6821      	ldr	r1, [r4, #0]
 802151a:	1d1a      	adds	r2, r3, #4
 802151c:	f8c8 2000 	str.w	r2, [r8]
 8021520:	f011 0f20 	tst.w	r1, #32
 8021524:	681b      	ldr	r3, [r3, #0]
 8021526:	d00f      	beq.n	8021548 <_scanf_i+0x1c8>
 8021528:	6018      	str	r0, [r3, #0]
 802152a:	68e3      	ldr	r3, [r4, #12]
 802152c:	3301      	adds	r3, #1
 802152e:	60e3      	str	r3, [r4, #12]
 8021530:	1bed      	subs	r5, r5, r7
 8021532:	44ab      	add	fp, r5
 8021534:	6925      	ldr	r5, [r4, #16]
 8021536:	445d      	add	r5, fp
 8021538:	6125      	str	r5, [r4, #16]
 802153a:	2000      	movs	r0, #0
 802153c:	b007      	add	sp, #28
 802153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021542:	f04f 0b00 	mov.w	fp, #0
 8021546:	e7ca      	b.n	80214de <_scanf_i+0x15e>
 8021548:	07ca      	lsls	r2, r1, #31
 802154a:	bf4c      	ite	mi
 802154c:	8018      	strhmi	r0, [r3, #0]
 802154e:	6018      	strpl	r0, [r3, #0]
 8021550:	e7eb      	b.n	802152a <_scanf_i+0x1aa>
 8021552:	2001      	movs	r0, #1
 8021554:	e7f2      	b.n	802153c <_scanf_i+0x1bc>
 8021556:	bf00      	nop
 8021558:	0802644c 	.word	0x0802644c
 802155c:	080216f9 	.word	0x080216f9
 8021560:	0801f0f5 	.word	0x0801f0f5
 8021564:	08026b8e 	.word	0x08026b8e

08021568 <_read_r>:
 8021568:	b538      	push	{r3, r4, r5, lr}
 802156a:	4d07      	ldr	r5, [pc, #28]	; (8021588 <_read_r+0x20>)
 802156c:	4604      	mov	r4, r0
 802156e:	4608      	mov	r0, r1
 8021570:	4611      	mov	r1, r2
 8021572:	2200      	movs	r2, #0
 8021574:	602a      	str	r2, [r5, #0]
 8021576:	461a      	mov	r2, r3
 8021578:	f7e0 ff26 	bl	80023c8 <_read>
 802157c:	1c43      	adds	r3, r0, #1
 802157e:	d102      	bne.n	8021586 <_read_r+0x1e>
 8021580:	682b      	ldr	r3, [r5, #0]
 8021582:	b103      	cbz	r3, 8021586 <_read_r+0x1e>
 8021584:	6023      	str	r3, [r4, #0]
 8021586:	bd38      	pop	{r3, r4, r5, pc}
 8021588:	2001b118 	.word	0x2001b118

0802158c <__sccl>:
 802158c:	b570      	push	{r4, r5, r6, lr}
 802158e:	780b      	ldrb	r3, [r1, #0]
 8021590:	4604      	mov	r4, r0
 8021592:	2b5e      	cmp	r3, #94	; 0x5e
 8021594:	bf0b      	itete	eq
 8021596:	784b      	ldrbeq	r3, [r1, #1]
 8021598:	1c48      	addne	r0, r1, #1
 802159a:	1c88      	addeq	r0, r1, #2
 802159c:	2200      	movne	r2, #0
 802159e:	bf08      	it	eq
 80215a0:	2201      	moveq	r2, #1
 80215a2:	1e61      	subs	r1, r4, #1
 80215a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80215a8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80215ac:	42a9      	cmp	r1, r5
 80215ae:	d1fb      	bne.n	80215a8 <__sccl+0x1c>
 80215b0:	b90b      	cbnz	r3, 80215b6 <__sccl+0x2a>
 80215b2:	3801      	subs	r0, #1
 80215b4:	bd70      	pop	{r4, r5, r6, pc}
 80215b6:	f082 0101 	eor.w	r1, r2, #1
 80215ba:	54e1      	strb	r1, [r4, r3]
 80215bc:	1c42      	adds	r2, r0, #1
 80215be:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80215c2:	2d2d      	cmp	r5, #45	; 0x2d
 80215c4:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80215c8:	4610      	mov	r0, r2
 80215ca:	d006      	beq.n	80215da <__sccl+0x4e>
 80215cc:	2d5d      	cmp	r5, #93	; 0x5d
 80215ce:	d0f1      	beq.n	80215b4 <__sccl+0x28>
 80215d0:	b90d      	cbnz	r5, 80215d6 <__sccl+0x4a>
 80215d2:	4630      	mov	r0, r6
 80215d4:	e7ee      	b.n	80215b4 <__sccl+0x28>
 80215d6:	462b      	mov	r3, r5
 80215d8:	e7ef      	b.n	80215ba <__sccl+0x2e>
 80215da:	7816      	ldrb	r6, [r2, #0]
 80215dc:	2e5d      	cmp	r6, #93	; 0x5d
 80215de:	d0fa      	beq.n	80215d6 <__sccl+0x4a>
 80215e0:	42b3      	cmp	r3, r6
 80215e2:	dcf8      	bgt.n	80215d6 <__sccl+0x4a>
 80215e4:	4618      	mov	r0, r3
 80215e6:	3001      	adds	r0, #1
 80215e8:	4286      	cmp	r6, r0
 80215ea:	5421      	strb	r1, [r4, r0]
 80215ec:	dcfb      	bgt.n	80215e6 <__sccl+0x5a>
 80215ee:	43d8      	mvns	r0, r3
 80215f0:	4430      	add	r0, r6
 80215f2:	1c5d      	adds	r5, r3, #1
 80215f4:	42b3      	cmp	r3, r6
 80215f6:	bfa8      	it	ge
 80215f8:	2000      	movge	r0, #0
 80215fa:	182b      	adds	r3, r5, r0
 80215fc:	3202      	adds	r2, #2
 80215fe:	e7de      	b.n	80215be <__sccl+0x32>

08021600 <_strtoul_l.isra.0>:
 8021600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021604:	4e3b      	ldr	r6, [pc, #236]	; (80216f4 <_strtoul_l.isra.0+0xf4>)
 8021606:	4686      	mov	lr, r0
 8021608:	468c      	mov	ip, r1
 802160a:	4660      	mov	r0, ip
 802160c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021610:	5da5      	ldrb	r5, [r4, r6]
 8021612:	f015 0508 	ands.w	r5, r5, #8
 8021616:	d1f8      	bne.n	802160a <_strtoul_l.isra.0+0xa>
 8021618:	2c2d      	cmp	r4, #45	; 0x2d
 802161a:	d134      	bne.n	8021686 <_strtoul_l.isra.0+0x86>
 802161c:	f89c 4000 	ldrb.w	r4, [ip]
 8021620:	f04f 0801 	mov.w	r8, #1
 8021624:	f100 0c02 	add.w	ip, r0, #2
 8021628:	2b00      	cmp	r3, #0
 802162a:	d05e      	beq.n	80216ea <_strtoul_l.isra.0+0xea>
 802162c:	2b10      	cmp	r3, #16
 802162e:	d10c      	bne.n	802164a <_strtoul_l.isra.0+0x4a>
 8021630:	2c30      	cmp	r4, #48	; 0x30
 8021632:	d10a      	bne.n	802164a <_strtoul_l.isra.0+0x4a>
 8021634:	f89c 0000 	ldrb.w	r0, [ip]
 8021638:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802163c:	2858      	cmp	r0, #88	; 0x58
 802163e:	d14f      	bne.n	80216e0 <_strtoul_l.isra.0+0xe0>
 8021640:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8021644:	2310      	movs	r3, #16
 8021646:	f10c 0c02 	add.w	ip, ip, #2
 802164a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802164e:	2500      	movs	r5, #0
 8021650:	fbb7 f7f3 	udiv	r7, r7, r3
 8021654:	fb03 f907 	mul.w	r9, r3, r7
 8021658:	ea6f 0909 	mvn.w	r9, r9
 802165c:	4628      	mov	r0, r5
 802165e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8021662:	2e09      	cmp	r6, #9
 8021664:	d818      	bhi.n	8021698 <_strtoul_l.isra.0+0x98>
 8021666:	4634      	mov	r4, r6
 8021668:	42a3      	cmp	r3, r4
 802166a:	dd24      	ble.n	80216b6 <_strtoul_l.isra.0+0xb6>
 802166c:	2d00      	cmp	r5, #0
 802166e:	db1f      	blt.n	80216b0 <_strtoul_l.isra.0+0xb0>
 8021670:	4287      	cmp	r7, r0
 8021672:	d31d      	bcc.n	80216b0 <_strtoul_l.isra.0+0xb0>
 8021674:	d101      	bne.n	802167a <_strtoul_l.isra.0+0x7a>
 8021676:	45a1      	cmp	r9, r4
 8021678:	db1a      	blt.n	80216b0 <_strtoul_l.isra.0+0xb0>
 802167a:	fb00 4003 	mla	r0, r0, r3, r4
 802167e:	2501      	movs	r5, #1
 8021680:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021684:	e7eb      	b.n	802165e <_strtoul_l.isra.0+0x5e>
 8021686:	2c2b      	cmp	r4, #43	; 0x2b
 8021688:	bf08      	it	eq
 802168a:	f89c 4000 	ldrbeq.w	r4, [ip]
 802168e:	46a8      	mov	r8, r5
 8021690:	bf08      	it	eq
 8021692:	f100 0c02 	addeq.w	ip, r0, #2
 8021696:	e7c7      	b.n	8021628 <_strtoul_l.isra.0+0x28>
 8021698:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 802169c:	2e19      	cmp	r6, #25
 802169e:	d801      	bhi.n	80216a4 <_strtoul_l.isra.0+0xa4>
 80216a0:	3c37      	subs	r4, #55	; 0x37
 80216a2:	e7e1      	b.n	8021668 <_strtoul_l.isra.0+0x68>
 80216a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80216a8:	2e19      	cmp	r6, #25
 80216aa:	d804      	bhi.n	80216b6 <_strtoul_l.isra.0+0xb6>
 80216ac:	3c57      	subs	r4, #87	; 0x57
 80216ae:	e7db      	b.n	8021668 <_strtoul_l.isra.0+0x68>
 80216b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80216b4:	e7e4      	b.n	8021680 <_strtoul_l.isra.0+0x80>
 80216b6:	2d00      	cmp	r5, #0
 80216b8:	da07      	bge.n	80216ca <_strtoul_l.isra.0+0xca>
 80216ba:	2322      	movs	r3, #34	; 0x22
 80216bc:	f8ce 3000 	str.w	r3, [lr]
 80216c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80216c4:	b942      	cbnz	r2, 80216d8 <_strtoul_l.isra.0+0xd8>
 80216c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80216ca:	f1b8 0f00 	cmp.w	r8, #0
 80216ce:	d000      	beq.n	80216d2 <_strtoul_l.isra.0+0xd2>
 80216d0:	4240      	negs	r0, r0
 80216d2:	2a00      	cmp	r2, #0
 80216d4:	d0f7      	beq.n	80216c6 <_strtoul_l.isra.0+0xc6>
 80216d6:	b10d      	cbz	r5, 80216dc <_strtoul_l.isra.0+0xdc>
 80216d8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80216dc:	6011      	str	r1, [r2, #0]
 80216de:	e7f2      	b.n	80216c6 <_strtoul_l.isra.0+0xc6>
 80216e0:	2430      	movs	r4, #48	; 0x30
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d1b1      	bne.n	802164a <_strtoul_l.isra.0+0x4a>
 80216e6:	2308      	movs	r3, #8
 80216e8:	e7af      	b.n	802164a <_strtoul_l.isra.0+0x4a>
 80216ea:	2c30      	cmp	r4, #48	; 0x30
 80216ec:	d0a2      	beq.n	8021634 <_strtoul_l.isra.0+0x34>
 80216ee:	230a      	movs	r3, #10
 80216f0:	e7ab      	b.n	802164a <_strtoul_l.isra.0+0x4a>
 80216f2:	bf00      	nop
 80216f4:	080266dd 	.word	0x080266dd

080216f8 <_strtoul_r>:
 80216f8:	f7ff bf82 	b.w	8021600 <_strtoul_l.isra.0>

080216fc <__submore>:
 80216fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021700:	460c      	mov	r4, r1
 8021702:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021708:	4299      	cmp	r1, r3
 802170a:	d11d      	bne.n	8021748 <__submore+0x4c>
 802170c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021710:	f7fc fcf0 	bl	801e0f4 <_malloc_r>
 8021714:	b918      	cbnz	r0, 802171e <__submore+0x22>
 8021716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802171a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802171e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021722:	63a3      	str	r3, [r4, #56]	; 0x38
 8021724:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021728:	6360      	str	r0, [r4, #52]	; 0x34
 802172a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802172e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021732:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021736:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802173a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802173e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021742:	6020      	str	r0, [r4, #0]
 8021744:	2000      	movs	r0, #0
 8021746:	e7e8      	b.n	802171a <__submore+0x1e>
 8021748:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802174a:	0077      	lsls	r7, r6, #1
 802174c:	463a      	mov	r2, r7
 802174e:	f000 f84b 	bl	80217e8 <_realloc_r>
 8021752:	4605      	mov	r5, r0
 8021754:	2800      	cmp	r0, #0
 8021756:	d0de      	beq.n	8021716 <__submore+0x1a>
 8021758:	eb00 0806 	add.w	r8, r0, r6
 802175c:	4601      	mov	r1, r0
 802175e:	4632      	mov	r2, r6
 8021760:	4640      	mov	r0, r8
 8021762:	f7fc fc47 	bl	801dff4 <memcpy>
 8021766:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802176a:	f8c4 8000 	str.w	r8, [r4]
 802176e:	e7e9      	b.n	8021744 <__submore+0x48>

08021770 <abort>:
 8021770:	b508      	push	{r3, lr}
 8021772:	2006      	movs	r0, #6
 8021774:	f000 f886 	bl	8021884 <raise>
 8021778:	2001      	movs	r0, #1
 802177a:	f7e0 fe1b 	bl	80023b4 <_exit>
	...

08021780 <_fstat_r>:
 8021780:	b538      	push	{r3, r4, r5, lr}
 8021782:	4d07      	ldr	r5, [pc, #28]	; (80217a0 <_fstat_r+0x20>)
 8021784:	2300      	movs	r3, #0
 8021786:	4604      	mov	r4, r0
 8021788:	4608      	mov	r0, r1
 802178a:	4611      	mov	r1, r2
 802178c:	602b      	str	r3, [r5, #0]
 802178e:	f7e0 fe60 	bl	8002452 <_fstat>
 8021792:	1c43      	adds	r3, r0, #1
 8021794:	d102      	bne.n	802179c <_fstat_r+0x1c>
 8021796:	682b      	ldr	r3, [r5, #0]
 8021798:	b103      	cbz	r3, 802179c <_fstat_r+0x1c>
 802179a:	6023      	str	r3, [r4, #0]
 802179c:	bd38      	pop	{r3, r4, r5, pc}
 802179e:	bf00      	nop
 80217a0:	2001b118 	.word	0x2001b118

080217a4 <_isatty_r>:
 80217a4:	b538      	push	{r3, r4, r5, lr}
 80217a6:	4d06      	ldr	r5, [pc, #24]	; (80217c0 <_isatty_r+0x1c>)
 80217a8:	2300      	movs	r3, #0
 80217aa:	4604      	mov	r4, r0
 80217ac:	4608      	mov	r0, r1
 80217ae:	602b      	str	r3, [r5, #0]
 80217b0:	f7e0 fe5f 	bl	8002472 <_isatty>
 80217b4:	1c43      	adds	r3, r0, #1
 80217b6:	d102      	bne.n	80217be <_isatty_r+0x1a>
 80217b8:	682b      	ldr	r3, [r5, #0]
 80217ba:	b103      	cbz	r3, 80217be <_isatty_r+0x1a>
 80217bc:	6023      	str	r3, [r4, #0]
 80217be:	bd38      	pop	{r3, r4, r5, pc}
 80217c0:	2001b118 	.word	0x2001b118

080217c4 <__ascii_mbtowc>:
 80217c4:	b082      	sub	sp, #8
 80217c6:	b901      	cbnz	r1, 80217ca <__ascii_mbtowc+0x6>
 80217c8:	a901      	add	r1, sp, #4
 80217ca:	b142      	cbz	r2, 80217de <__ascii_mbtowc+0x1a>
 80217cc:	b14b      	cbz	r3, 80217e2 <__ascii_mbtowc+0x1e>
 80217ce:	7813      	ldrb	r3, [r2, #0]
 80217d0:	600b      	str	r3, [r1, #0]
 80217d2:	7812      	ldrb	r2, [r2, #0]
 80217d4:	1e10      	subs	r0, r2, #0
 80217d6:	bf18      	it	ne
 80217d8:	2001      	movne	r0, #1
 80217da:	b002      	add	sp, #8
 80217dc:	4770      	bx	lr
 80217de:	4610      	mov	r0, r2
 80217e0:	e7fb      	b.n	80217da <__ascii_mbtowc+0x16>
 80217e2:	f06f 0001 	mvn.w	r0, #1
 80217e6:	e7f8      	b.n	80217da <__ascii_mbtowc+0x16>

080217e8 <_realloc_r>:
 80217e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80217ea:	4607      	mov	r7, r0
 80217ec:	4614      	mov	r4, r2
 80217ee:	460e      	mov	r6, r1
 80217f0:	b921      	cbnz	r1, 80217fc <_realloc_r+0x14>
 80217f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80217f6:	4611      	mov	r1, r2
 80217f8:	f7fc bc7c 	b.w	801e0f4 <_malloc_r>
 80217fc:	b922      	cbnz	r2, 8021808 <_realloc_r+0x20>
 80217fe:	f7fc fc29 	bl	801e054 <_free_r>
 8021802:	4625      	mov	r5, r4
 8021804:	4628      	mov	r0, r5
 8021806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021808:	f000 f865 	bl	80218d6 <_malloc_usable_size_r>
 802180c:	42a0      	cmp	r0, r4
 802180e:	d20f      	bcs.n	8021830 <_realloc_r+0x48>
 8021810:	4621      	mov	r1, r4
 8021812:	4638      	mov	r0, r7
 8021814:	f7fc fc6e 	bl	801e0f4 <_malloc_r>
 8021818:	4605      	mov	r5, r0
 802181a:	2800      	cmp	r0, #0
 802181c:	d0f2      	beq.n	8021804 <_realloc_r+0x1c>
 802181e:	4631      	mov	r1, r6
 8021820:	4622      	mov	r2, r4
 8021822:	f7fc fbe7 	bl	801dff4 <memcpy>
 8021826:	4631      	mov	r1, r6
 8021828:	4638      	mov	r0, r7
 802182a:	f7fc fc13 	bl	801e054 <_free_r>
 802182e:	e7e9      	b.n	8021804 <_realloc_r+0x1c>
 8021830:	4635      	mov	r5, r6
 8021832:	e7e7      	b.n	8021804 <_realloc_r+0x1c>

08021834 <_raise_r>:
 8021834:	291f      	cmp	r1, #31
 8021836:	b538      	push	{r3, r4, r5, lr}
 8021838:	4604      	mov	r4, r0
 802183a:	460d      	mov	r5, r1
 802183c:	d904      	bls.n	8021848 <_raise_r+0x14>
 802183e:	2316      	movs	r3, #22
 8021840:	6003      	str	r3, [r0, #0]
 8021842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021846:	bd38      	pop	{r3, r4, r5, pc}
 8021848:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802184a:	b112      	cbz	r2, 8021852 <_raise_r+0x1e>
 802184c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021850:	b94b      	cbnz	r3, 8021866 <_raise_r+0x32>
 8021852:	4620      	mov	r0, r4
 8021854:	f000 f830 	bl	80218b8 <_getpid_r>
 8021858:	462a      	mov	r2, r5
 802185a:	4601      	mov	r1, r0
 802185c:	4620      	mov	r0, r4
 802185e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021862:	f000 b817 	b.w	8021894 <_kill_r>
 8021866:	2b01      	cmp	r3, #1
 8021868:	d00a      	beq.n	8021880 <_raise_r+0x4c>
 802186a:	1c59      	adds	r1, r3, #1
 802186c:	d103      	bne.n	8021876 <_raise_r+0x42>
 802186e:	2316      	movs	r3, #22
 8021870:	6003      	str	r3, [r0, #0]
 8021872:	2001      	movs	r0, #1
 8021874:	e7e7      	b.n	8021846 <_raise_r+0x12>
 8021876:	2400      	movs	r4, #0
 8021878:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802187c:	4628      	mov	r0, r5
 802187e:	4798      	blx	r3
 8021880:	2000      	movs	r0, #0
 8021882:	e7e0      	b.n	8021846 <_raise_r+0x12>

08021884 <raise>:
 8021884:	4b02      	ldr	r3, [pc, #8]	; (8021890 <raise+0xc>)
 8021886:	4601      	mov	r1, r0
 8021888:	6818      	ldr	r0, [r3, #0]
 802188a:	f7ff bfd3 	b.w	8021834 <_raise_r>
 802188e:	bf00      	nop
 8021890:	20000064 	.word	0x20000064

08021894 <_kill_r>:
 8021894:	b538      	push	{r3, r4, r5, lr}
 8021896:	4d07      	ldr	r5, [pc, #28]	; (80218b4 <_kill_r+0x20>)
 8021898:	2300      	movs	r3, #0
 802189a:	4604      	mov	r4, r0
 802189c:	4608      	mov	r0, r1
 802189e:	4611      	mov	r1, r2
 80218a0:	602b      	str	r3, [r5, #0]
 80218a2:	f7e0 fd75 	bl	8002390 <_kill>
 80218a6:	1c43      	adds	r3, r0, #1
 80218a8:	d102      	bne.n	80218b0 <_kill_r+0x1c>
 80218aa:	682b      	ldr	r3, [r5, #0]
 80218ac:	b103      	cbz	r3, 80218b0 <_kill_r+0x1c>
 80218ae:	6023      	str	r3, [r4, #0]
 80218b0:	bd38      	pop	{r3, r4, r5, pc}
 80218b2:	bf00      	nop
 80218b4:	2001b118 	.word	0x2001b118

080218b8 <_getpid_r>:
 80218b8:	f7e0 bd62 	b.w	8002380 <_getpid>

080218bc <__ascii_wctomb>:
 80218bc:	b149      	cbz	r1, 80218d2 <__ascii_wctomb+0x16>
 80218be:	2aff      	cmp	r2, #255	; 0xff
 80218c0:	bf85      	ittet	hi
 80218c2:	238a      	movhi	r3, #138	; 0x8a
 80218c4:	6003      	strhi	r3, [r0, #0]
 80218c6:	700a      	strbls	r2, [r1, #0]
 80218c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80218cc:	bf98      	it	ls
 80218ce:	2001      	movls	r0, #1
 80218d0:	4770      	bx	lr
 80218d2:	4608      	mov	r0, r1
 80218d4:	4770      	bx	lr

080218d6 <_malloc_usable_size_r>:
 80218d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80218da:	1f18      	subs	r0, r3, #4
 80218dc:	2b00      	cmp	r3, #0
 80218de:	bfbc      	itt	lt
 80218e0:	580b      	ldrlt	r3, [r1, r0]
 80218e2:	18c0      	addlt	r0, r0, r3
 80218e4:	4770      	bx	lr
	...

080218e8 <_init>:
 80218e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80218ea:	bf00      	nop
 80218ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80218ee:	bc08      	pop	{r3}
 80218f0:	469e      	mov	lr, r3
 80218f2:	4770      	bx	lr

080218f4 <_fini>:
 80218f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80218f6:	bf00      	nop
 80218f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80218fa:	bc08      	pop	{r3}
 80218fc:	469e      	mov	lr, r3
 80218fe:	4770      	bx	lr
