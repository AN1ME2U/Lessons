
tcp_socket_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021820  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000052cc  080219b0  080219b0  000319b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026c7c  08026c7c  00040234  2**0
                  CONTENTS
  4 .ARM          00000008  08026c7c  08026c7c  00036c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026c84  08026c84  00040234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026c84  08026c84  00036c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026c88  08026c88  00036c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08026c8c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001aef8  20000234  08026ec0  00040234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b12c  08026ec0  0004b12c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005a560  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a483  00000000  00000000  0009a7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002880  00000000  00000000  000a4c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002730  00000000  00000000  000a74c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018589  00000000  00000000  000a9bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042ca7  00000000  00000000  000c2181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f817c  00000000  00000000  00104e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fcfa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba58  00000000  00000000  001fcff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000234 	.word	0x20000234
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021998 	.word	0x08021998

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000238 	.word	0x20000238
 80001cc:	08021998 	.word	0x08021998

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__io_putchar>:

#define TRANSMIT_TIMEOUT 5
#define RECEIVE_TIMEOUT 1

int __io_putchar(int ch)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, sizeof(uint8_t), TRANSMIT_TIMEOUT);
 8000ef0:	1d39      	adds	r1, r7, #4
 8000ef2:	2305      	movs	r3, #5
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <__io_putchar+0x20>)
 8000ef8:	f005 fa8f 	bl	800641a <HAL_UART_Transmit>
	return ch;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200144b4 	.word	0x200144b4

08000f0c <http_temperature_path_handler>:
"<h2>Humidity: %s %%</h2>"\
"</body>"\
"</html>"

http_status_t http_temperature_path_handler(http_buffer_t *out)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	6078      	str	r0, [r7, #4]
	printf("http_temperature_path_handler()\n");
 8000f14:	4840      	ldr	r0, [pc, #256]	; (8001018 <http_temperature_path_handler+0x10c>)
 8000f16:	f01d fe8f 	bl	801ec38 <puts>
	if (out == NULL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <http_temperature_path_handler+0x18>
	{
		return HTTP_ERR_FAULT;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e074      	b.n	800100e <http_temperature_path_handler+0x102>
	}
	char * content = malloc(256);
 8000f24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f28:	f01d f89e 	bl	801e068 <malloc>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	647b      	str	r3, [r7, #68]	; 0x44
	if (content == NULL)
 8000f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <http_temperature_path_handler+0x2e>
	{
		return HTTP_ERR_FAULT;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e069      	b.n	800100e <http_temperature_path_handler+0x102>
	snprintf(content, 256, HTTP_TEMPERATURE_PAGE_TEMPLATE_STR, ts);
#else
	char temperature[6];
	uint8_t buffer[4];
	dht11_t dht11;
	dht11_init (&dht11, DHT11_IO_GPIO_Port, DHT11_IO_Pin);
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f42:	4936      	ldr	r1, [pc, #216]	; (800101c <http_temperature_path_handler+0x110>)
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 f9ac 	bl	80032a2 <dht11_init>
	dht_status_t status = dht11_read (&dht11, buffer, sizeof(buffer));
 8000f4a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2204      	movs	r2, #4
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fabb 	bl	80034d0 <dht11_read>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (status == DHT_OK)
 8000f60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10e      	bne.n	8000f86 <http_temperature_path_handler+0x7a>
	{
		dht11_to_str(buffer, sizeof(buffer), NULL, temperature);
 8000f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000f70:	2200      	movs	r2, #0
 8000f72:	2104      	movs	r1, #4
 8000f74:	f002 fb04 	bl	8003580 <dht11_to_str>
		printf("temperature = %s *C\n", temperature);
 8000f78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4828      	ldr	r0, [pc, #160]	; (8001020 <http_temperature_path_handler+0x114>)
 8000f80:	f01d fdd4 	bl	801eb2c <iprintf>
 8000f84:	e00c      	b.n	8000fa0 <http_temperature_path_handler+0x94>
	}
	else
	{
		printf("dht11_read() error: %u\n", status);
 8000f86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4825      	ldr	r0, [pc, #148]	; (8001024 <http_temperature_path_handler+0x118>)
 8000f8e:	f01d fdcd 	bl	801eb2c <iprintf>
		strncpy(temperature, "--", sizeof(temperature));
 8000f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f96:	2206      	movs	r2, #6
 8000f98:	4923      	ldr	r1, [pc, #140]	; (8001028 <http_temperature_path_handler+0x11c>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f01d fff8 	bl	801ef90 <strncpy>
	}
	snprintf(content, 256, HTTP_TEMPERATURE_PAGE_TEMPLATE_STR, temperature);
 8000fa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <http_temperature_path_handler+0x120>)
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000fac:	f01d ff06 	bl	801edbc <sniprintf>
#endif

	int content_len = strlen(content);
 8000fb0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000fb2:	f7ff f90d 	bl	80001d0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6858      	ldr	r0, [r3, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6819      	ldr	r1, [r3, #0]
 8000fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <http_temperature_path_handler+0x124>)
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	23c8      	movs	r3, #200	; 0xc8
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <http_temperature_path_handler+0x128>)
 8000fce:	f01d fef5 	bl	801edbc <sniprintf>
	int header_len = strlen(out->data);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f8fa 	bl	80001d0 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
	if(out->length < header_len + content_len)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fe8:	440a      	add	r2, r1
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d204      	bcs.n	8000ff8 <http_temperature_path_handler+0xec>
	{
		free(content);
 8000fee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000ff0:	f01d f842 	bl	801e078 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e00a      	b.n	800100e <http_temperature_path_handler+0x102>
	}
	strncat(out->data, content, content_len);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001000:	4618      	mov	r0, r3
 8001002:	f01d ffa0 	bl	801ef46 <strncat>
	free(content);
 8001006:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001008:	f01d f836 	bl	801e078 <free>
	return HTTP_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3748      	adds	r7, #72	; 0x48
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	080219ec 	.word	0x080219ec
 800101c:	40020c00 	.word	0x40020c00
 8001020:	08021a0c 	.word	0x08021a0c
 8001024:	08021a24 	.word	0x08021a24
 8001028:	08021a3c 	.word	0x08021a3c
 800102c:	08021a40 	.word	0x08021a40
 8001030:	08021af4 	.word	0x08021af4
 8001034:	08021a7c 	.word	0x08021a7c

08001038 <http_humidity_path_handler>:

http_status_t http_humidity_path_handler(http_buffer_t *out)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	af02      	add	r7, sp, #8
 800103e:	6078      	str	r0, [r7, #4]
	printf("http_humidity_path_handler()\n");
 8001040:	4840      	ldr	r0, [pc, #256]	; (8001144 <http_humidity_path_handler+0x10c>)
 8001042:	f01d fdf9 	bl	801ec38 <puts>
	if (out == NULL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <http_humidity_path_handler+0x18>
	{
		return HTTP_ERR_FAULT;
 800104c:	2301      	movs	r3, #1
 800104e:	e074      	b.n	800113a <http_humidity_path_handler+0x102>
	}
	char * content = malloc(256);
 8001050:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001054:	f01d f808 	bl	801e068 <malloc>
 8001058:	4603      	mov	r3, r0
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
	if (content == NULL)
 800105c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <http_humidity_path_handler+0x2e>
	{
		return HTTP_ERR_FAULT;
 8001062:	2301      	movs	r3, #1
 8001064:	e069      	b.n	800113a <http_humidity_path_handler+0x102>
	snprintf(content, 256, HTTP_HUMIDITY_PAGE_TEMPLATE_STR, hs);
#else
	char humidity[6];
	uint8_t buffer[4];
	dht11_t dht11;
	dht11_init (&dht11, DHT11_IO_GPIO_Port, DHT11_IO_Pin);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106e:	4936      	ldr	r1, [pc, #216]	; (8001148 <http_humidity_path_handler+0x110>)
 8001070:	4618      	mov	r0, r3
 8001072:	f002 f916 	bl	80032a2 <dht11_init>
	dht_status_t status = dht11_read (&dht11, buffer, sizeof(buffer));
 8001076:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2204      	movs	r2, #4
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fa25 	bl	80034d0 <dht11_read>
 8001086:	4603      	mov	r3, r0
 8001088:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	if (status == DHT_OK)
 800108c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10e      	bne.n	80010b2 <http_humidity_path_handler+0x7a>
	{
		dht11_to_str(buffer, sizeof(buffer), humidity, NULL);
 8001094:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001098:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800109c:	2300      	movs	r3, #0
 800109e:	2104      	movs	r1, #4
 80010a0:	f002 fa6e 	bl	8003580 <dht11_to_str>
		printf("humidity = %s %%\n", humidity);
 80010a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a8:	4619      	mov	r1, r3
 80010aa:	4828      	ldr	r0, [pc, #160]	; (800114c <http_humidity_path_handler+0x114>)
 80010ac:	f01d fd3e 	bl	801eb2c <iprintf>
 80010b0:	e00c      	b.n	80010cc <http_humidity_path_handler+0x94>
	}
	else
	{
		printf("dht11_read() error: %u\n", status);
 80010b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80010b6:	4619      	mov	r1, r3
 80010b8:	4825      	ldr	r0, [pc, #148]	; (8001150 <http_humidity_path_handler+0x118>)
 80010ba:	f01d fd37 	bl	801eb2c <iprintf>
		strncpy(humidity, "--", sizeof(humidity));
 80010be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c2:	2206      	movs	r2, #6
 80010c4:	4923      	ldr	r1, [pc, #140]	; (8001154 <http_humidity_path_handler+0x11c>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f01d ff62 	bl	801ef90 <strncpy>
	}
	snprintf(content, 256, HTTP_HUMIDITY_PAGE_TEMPLATE_STR, humidity);
 80010cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <http_humidity_path_handler+0x120>)
 80010d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010d8:	f01d fe70 	bl	801edbc <sniprintf>
#endif

	int content_len = strlen(content);
 80010dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010de:	f7ff f877 	bl	80001d0 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6858      	ldr	r0, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6819      	ldr	r1, [r3, #0]
 80010ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <http_humidity_path_handler+0x124>)
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	23c8      	movs	r3, #200	; 0xc8
 80010f8:	4a19      	ldr	r2, [pc, #100]	; (8001160 <http_humidity_path_handler+0x128>)
 80010fa:	f01d fe5f 	bl	801edbc <sniprintf>
	int header_len = strlen(out->data);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f864 	bl	80001d0 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
	if(out->length < header_len + content_len)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001114:	440a      	add	r2, r1
 8001116:	4293      	cmp	r3, r2
 8001118:	d204      	bcs.n	8001124 <http_humidity_path_handler+0xec>
	{
		free(content);
 800111a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800111c:	f01c ffac 	bl	801e078 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8001120:	2304      	movs	r3, #4
 8001122:	e00a      	b.n	800113a <http_humidity_path_handler+0x102>
	}
	strncat(out->data, content, content_len);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800112a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800112c:	4618      	mov	r0, r3
 800112e:	f01d ff0a 	bl	801ef46 <strncat>
	free(content);
 8001132:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001134:	f01c ffa0 	bl	801e078 <free>
	return HTTP_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3748      	adds	r7, #72	; 0x48
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	08021af8 	.word	0x08021af8
 8001148:	40020c00 	.word	0x40020c00
 800114c:	08021b18 	.word	0x08021b18
 8001150:	08021a24 	.word	0x08021a24
 8001154:	08021a3c 	.word	0x08021a3c
 8001158:	08021b2c 	.word	0x08021b2c
 800115c:	08021af4 	.word	0x08021af4
 8001160:	08021a7c 	.word	0x08021a7c

08001164 <http_led_toggle_handler>:

void http_led_toggle_handler(bool LED[4])
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <http_led_toggle_handler+0x48>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e010      	b.n	800119a <http_led_toggle_handler+0x36>
	{
		if (LED[i])
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <http_led_toggle_handler+0x30>
		{
			BSP_LED_Toggle(led[i]);
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f002 f836 	bl	8003200 <BSP_LED_Toggle>
	for(size_t i = 0; i < 4; i++)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d9eb      	bls.n	8001178 <http_led_toggle_handler+0x14>
		}
	}
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	08021b60 	.word	0x08021b60

080011b0 <http_led_on_handler>:

void http_led_on_handler(bool LED[4])
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <http_led_on_handler+0x48>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e010      	b.n	80011e6 <http_led_on_handler+0x36>
	{
		if (LED[i])
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <http_led_on_handler+0x30>
		{
			BSP_LED_On(led[i]);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 ffdc 	bl	8003198 <BSP_LED_On>
	for(size_t i = 0; i < 4; i++)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d9eb      	bls.n	80011c4 <http_led_on_handler+0x14>
		}
	}
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	08021b60 	.word	0x08021b60

080011fc <http_led_off_handler>:

void http_led_off_handler(bool LED[4])
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	Led_TypeDef led[4] = {LED3, LED4, LED5, LED6};
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <http_led_off_handler+0x48>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60bb      	str	r3, [r7, #8]
	for(size_t i = 0; i < 4; i++)
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	e010      	b.n	8001232 <http_led_off_handler+0x36>
	{
		if (LED[i])
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d007      	beq.n	800122c <http_led_off_handler+0x30>
		{
			BSP_LED_Off(led[i]);
 800121c:	f107 0208 	add.w	r2, r7, #8
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f001 ffd0 	bl	80031cc <BSP_LED_Off>
	for(size_t i = 0; i < 4; i++)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d9eb      	bls.n	8001210 <http_led_off_handler+0x14>
		}
	}
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	08021b60 	.word	0x08021b60

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f003 fcff 	bl	8004c50 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8001252:	2001      	movs	r0, #1
 8001254:	f001 ff28 	bl	80030a8 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8001258:	2000      	movs	r0, #0
 800125a:	f001 ff25 	bl	80030a8 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 800125e:	2002      	movs	r0, #2
 8001260:	f001 ff22 	bl	80030a8 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8001264:	2003      	movs	r0, #3
 8001266:	f001 ff1f 	bl	80030a8 <BSP_LED_Init>
  /* Initialization of DWT module (cortex-m4)*/
  DWT_Init();
 800126a:	f001 fea7 	bl	8002fbc <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126e:	f000 f873 	bl	8001358 <SystemClock_Config>
  printf("Semihosting activated\n");
#endif
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 f905 	bl	8001480 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001276:	f000 f8d9 	bl	800142c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* WARNING: if you use minicom as a terminal utility,
   * please, add 'pu addcarreturn Yes' to the file ~/.minirc.dfl
   * to attach '\r' after '\n'
   * */
  printf("USART3 initialized\n");
 800127a:	482c      	ldr	r0, [pc, #176]	; (800132c <main+0xe4>)
 800127c:	f01d fcdc 	bl	801ec38 <puts>
  NVIC_SetPriorityGrouping(0);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fe0d 	bl	8000ea0 <__NVIC_SetPriorityGrouping>

  lcd_init();
 8001286:	f005 fc51 	bl	8006b2c <lcd_init>
  /* Use the LCD_CLR_SCR_CMD command
   * to clear the LCD screen */
  lcd_command_set(LCD_CLR_SCR_CMD);
 800128a:	2001      	movs	r0, #1
 800128c:	f005 fc28 	bl	8006ae0 <lcd_command_set>
  lcd_puts("GL Embedded");
 8001290:	4827      	ldr	r0, [pc, #156]	; (8001330 <main+0xe8>)
 8001292:	f005 fca9 	bl	8006be8 <lcd_puts>
  /* Do not forget to set the LCD_LFCR_CMD
   * command when printing more than 16
   * characters because LCD 16x2 is used */
  lcd_command_set(LCD_LFCR_CMD);
 8001296:	20a8      	movs	r0, #168	; 0xa8
 8001298:	f005 fc22 	bl	8006ae0 <lcd_command_set>
  lcd_puts("Starter Kit");
 800129c:	4825      	ldr	r0, [pc, #148]	; (8001334 <main+0xec>)
 800129e:	f005 fca3 	bl	8006be8 <lcd_puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <main+0xf0>)
 80012a4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80012a8:	461d      	mov	r5, r3
 80012aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f006 f972 	bl	80075a2 <osThreadCreate>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a1e      	ldr	r2, [pc, #120]	; (800133c <main+0xf4>)
 80012c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpClientTask */
  osThreadDef(tcpClientTask, StartTcpClientTask, osPriorityNormal, 0, 2048);
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <main+0xf8>)
 80012c6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80012ca:	461d      	mov	r5, r3
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	6023      	str	r3, [r4, #0]
  tcpClientTaskHandle = osThreadCreate(osThread(tcpClientTask), NULL);
 80012d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f006 f961 	bl	80075a2 <osThreadCreate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <main+0xfc>)
 80012e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpServerTask */
  osThreadDef(tcpServerTask, StartTcpServerTask, osPriorityNormal, 0, 2048);
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <main+0x100>)
 80012e8:	f107 0414 	add.w	r4, r7, #20
 80012ec:	461d      	mov	r5, r3
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	682b      	ldr	r3, [r5, #0]
 80012f4:	6023      	str	r3, [r4, #0]
  tcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f006 f950 	bl	80075a2 <osThreadCreate>
 8001302:	4603      	mov	r3, r0
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <main+0x104>)
 8001306:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpServerTask */
  osThreadDef(udpServerTask, StartUdpServerTask, osPriorityNormal, 0, 2048);
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <main+0x108>)
 800130a:	463c      	mov	r4, r7
 800130c:	461d      	mov	r5, r3
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	682b      	ldr	r3, [r5, #0]
 8001314:	6023      	str	r3, [r4, #0]
  udpServerTaskHandle = osThreadCreate(osThread(udpServerTask), NULL);
 8001316:	463b      	mov	r3, r7
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f006 f941 	bl	80075a2 <osThreadCreate>
 8001320:	4603      	mov	r3, r0
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <main+0x10c>)
 8001324:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001326:	f006 f925 	bl	8007574 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800132a:	e7fe      	b.n	800132a <main+0xe2>
 800132c:	08021b64 	.word	0x08021b64
 8001330:	08021b78 	.word	0x08021b78
 8001334:	08021b84 	.word	0x08021b84
 8001338:	08021b90 	.word	0x08021b90
 800133c:	200144b0 	.word	0x200144b0
 8001340:	08021ba4 	.word	0x08021ba4
 8001344:	200144f8 	.word	0x200144f8
 8001348:	08021bb8 	.word	0x08021bb8
 800134c:	20014500 	.word	0x20014500
 8001350:	08021bcc 	.word	0x08021bcc
 8001354:	200144fc 	.word	0x200144fc

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b094      	sub	sp, #80	; 0x50
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f01c fec4 	bl	801e0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	4b28      	ldr	r3, [pc, #160]	; (8001424 <SystemClock_Config+0xcc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a27      	ldr	r2, [pc, #156]	; (8001424 <SystemClock_Config+0xcc>)
 8001386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <SystemClock_Config+0xcc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <SystemClock_Config+0xd0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <SystemClock_Config+0xd0>)
 80013a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c8:	2308      	movs	r3, #8
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013d6:	2307      	movs	r3, #7
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 f87a 	bl	80054d8 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013ea:	f000 fa57 	bl	800189c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2302      	movs	r3, #2
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2105      	movs	r1, #5
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fadb 	bl	80059c8 <HAL_RCC_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001418:	f000 fa40 	bl	800189c <Error_Handler>
  }
}
 800141c:	bf00      	nop
 800141e:	3750      	adds	r7, #80	; 0x50
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_USART3_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART3_UART_Init+0x4c>)
 8001464:	f004 ff8c 	bl	8006380 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f000 fa15 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200144b4 	.word	0x200144b4
 800147c:	40004800 	.word	0x40004800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4bb0      	ldr	r3, [pc, #704]	; (800175c <MX_GPIO_Init+0x2dc>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4aaf      	ldr	r2, [pc, #700]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4bad      	ldr	r3, [pc, #692]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4ba9      	ldr	r3, [pc, #676]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4aa8      	ldr	r2, [pc, #672]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4ba6      	ldr	r3, [pc, #664]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4ba2      	ldr	r3, [pc, #648]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4aa1      	ldr	r2, [pc, #644]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b9f      	ldr	r3, [pc, #636]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b9b      	ldr	r3, [pc, #620]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a9a      	ldr	r2, [pc, #616]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b98      	ldr	r3, [pc, #608]	; (800175c <MX_GPIO_Init+0x2dc>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b94      	ldr	r3, [pc, #592]	; (800175c <MX_GPIO_Init+0x2dc>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a93      	ldr	r2, [pc, #588]	; (800175c <MX_GPIO_Init+0x2dc>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b91      	ldr	r3, [pc, #580]	; (800175c <MX_GPIO_Init+0x2dc>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b8d      	ldr	r3, [pc, #564]	; (800175c <MX_GPIO_Init+0x2dc>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a8c      	ldr	r2, [pc, #560]	; (800175c <MX_GPIO_Init+0x2dc>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b8a      	ldr	r3, [pc, #552]	; (800175c <MX_GPIO_Init+0x2dc>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 800153e:	2200      	movs	r2, #0
 8001540:	f64f 4188 	movw	r1, #64648	; 0xfc88
 8001544:	4886      	ldr	r0, [pc, #536]	; (8001760 <MX_GPIO_Init+0x2e0>)
 8001546:	f003 ff7b 	bl	8005440 <HAL_GPIO_WritePin>
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2101      	movs	r1, #1
 800154e:	4885      	ldr	r0, [pc, #532]	; (8001764 <MX_GPIO_Init+0x2e4>)
 8001550:	f003 ff76 	bl	8005440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RMII_PHY_RST_Pin|DHT11_IO_Pin|LD4_Pin|LD3_Pin
 8001554:	2200      	movs	r2, #0
 8001556:	f64f 4110 	movw	r1, #64528	; 0xfc10
 800155a:	4883      	ldr	r0, [pc, #524]	; (8001768 <MX_GPIO_Init+0x2e8>)
 800155c:	f003 ff70 	bl	8005440 <HAL_GPIO_WritePin>
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin DISP_RS_Pin DISP_RW_Pin DISP_ENA_Pin
                           DISP_DB4_Pin DISP_DB5_Pin DISP_DB6_Pin DISP_DB7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 8001560:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8001564:	61fb      	str	r3, [r7, #28]
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4879      	ldr	r0, [pc, #484]	; (8001760 <MX_GPIO_Init+0x2e0>)
 800157a:	f003 fcb1 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800157e:	2301      	movs	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4873      	ldr	r0, [pc, #460]	; (8001764 <MX_GPIO_Init+0x2e4>)
 8001596:	f003 fca3 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800159a:	2308      	movs	r3, #8
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015aa:	2305      	movs	r3, #5
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	486b      	ldr	r0, [pc, #428]	; (8001764 <MX_GPIO_Init+0x2e4>)
 80015b6:	f003 fc93 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015be:	4b6b      	ldr	r3, [pc, #428]	; (800176c <MX_GPIO_Init+0x2ec>)
 80015c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c2:	2302      	movs	r3, #2
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4868      	ldr	r0, [pc, #416]	; (8001770 <MX_GPIO_Init+0x2f0>)
 80015ce:	f003 fc87 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015d2:	2310      	movs	r3, #16
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015e2:	2306      	movs	r3, #6
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4860      	ldr	r0, [pc, #384]	; (8001770 <MX_GPIO_Init+0x2f0>)
 80015ee:	f003 fc77 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin;
 80015f2:	2360      	movs	r3, #96	; 0x60
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001602:	2305      	movs	r3, #5
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4858      	ldr	r0, [pc, #352]	; (8001770 <MX_GPIO_Init+0x2f0>)
 800160e:	f003 fc67 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001612:	2304      	movs	r3, #4
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	4853      	ldr	r0, [pc, #332]	; (8001774 <MX_GPIO_Init+0x2f4>)
 8001626:	f003 fc5b 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_PHY_INT_Pin */
  GPIO_InitStruct.Pin = RMII_PHY_INT_Pin;
 800162a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001630:	4b51      	ldr	r3, [pc, #324]	; (8001778 <MX_GPIO_Init+0x2f8>)
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001634:	2301      	movs	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RMII_PHY_INT_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4848      	ldr	r0, [pc, #288]	; (8001760 <MX_GPIO_Init+0x2e0>)
 8001640:	f003 fc4e 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001656:	2305      	movs	r3, #5
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4844      	ldr	r0, [pc, #272]	; (8001774 <MX_GPIO_Init+0x2f4>)
 8001662:	f003 fc3d 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_PHY_RST_Pin DHT11_IO_Pin LD4_Pin LD3_Pin
                           LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = RMII_PHY_RST_Pin|DHT11_IO_Pin|LD4_Pin|LD3_Pin
 8001666:	f64f 4310 	movw	r3, #64528	; 0xfc10
 800166a:	61fb      	str	r3, [r7, #28]
                          |LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	483a      	ldr	r0, [pc, #232]	; (8001768 <MX_GPIO_Init+0x2e8>)
 8001680:	f003 fc2e 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001684:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001696:	2306      	movs	r3, #6
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4830      	ldr	r0, [pc, #192]	; (8001764 <MX_GPIO_Init+0x2e4>)
 80016a2:	f003 fc1d 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80016a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	482d      	ldr	r0, [pc, #180]	; (8001770 <MX_GPIO_Init+0x2f0>)
 80016bc:	f003 fc10 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80016c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016d2:	230a      	movs	r3, #10
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4824      	ldr	r0, [pc, #144]	; (8001770 <MX_GPIO_Init+0x2f0>)
 80016de:	f003 fbff 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016e2:	2320      	movs	r3, #32
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	481c      	ldr	r0, [pc, #112]	; (8001768 <MX_GPIO_Init+0x2e8>)
 80016f6:	f003 fbf3 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001700:	2312      	movs	r3, #18
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001704:	2301      	movs	r3, #1
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800170c:	2304      	movs	r3, #4
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4817      	ldr	r0, [pc, #92]	; (8001774 <MX_GPIO_Init+0x2f4>)
 8001718:	f003 fbe2 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800171c:	2302      	movs	r3, #2
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_GPIO_Init+0x2fc>)
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	480c      	ldr	r0, [pc, #48]	; (8001760 <MX_GPIO_Init+0x2e0>)
 8001730:	f003 fbd6 	bl	8004ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2105      	movs	r1, #5
 8001738:	2006      	movs	r0, #6
 800173a:	f003 fba7 	bl	8004e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800173e:	2006      	movs	r0, #6
 8001740:	f003 fbc0 	bl	8004ec4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2105      	movs	r1, #5
 8001748:	2017      	movs	r0, #23
 800174a:	f003 fb9f 	bl	8004e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800174e:	2017      	movs	r0, #23
 8001750:	f003 fbb8 	bl	8004ec4 <HAL_NVIC_EnableIRQ>

}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	; 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40021000 	.word	0x40021000
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	10110000 	.word	0x10110000
 8001770:	40020000 	.word	0x40020000
 8001774:	40020400 	.word	0x40020400
 8001778:	10210000 	.word	0x10210000
 800177c:	10120000 	.word	0x10120000

08001780 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin)
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d113      	bne.n	80017b8 <HAL_GPIO_EXTI_Callback+0x38>
	{
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET)
 8001790:	2101      	movs	r1, #1
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001794:	f003 fe3c 	bl	8005410 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	2b01      	cmp	r3, #1
 800179c:	d112      	bne.n	80017c4 <HAL_GPIO_EXTI_Callback+0x44>
		{
			printf("The blue button is pushed\n");
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <HAL_GPIO_EXTI_Callback+0x50>)
 80017a0:	f01d fa4a 	bl	801ec38 <puts>
			BSP_LED_Toggle(GREEN);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f001 fd2b 	bl	8003200 <BSP_LED_Toggle>
			osSignalSet (tcpClientTaskHandle, SIGNAL_PUSH_BUTTON);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_GPIO_EXTI_Callback+0x54>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2102      	movs	r1, #2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 ff45 	bl	8007640 <osSignalSet>
	else if (GPIO_Pin == RMII_PHY_INT_Pin)
	{
        /* Get the IT status register value */
        ethernetif_phy_irq();
	}
}
 80017b6:	e005      	b.n	80017c4 <HAL_GPIO_EXTI_Callback+0x44>
	else if (GPIO_Pin == RMII_PHY_INT_Pin)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_EXTI_Callback+0x44>
        ethernetif_phy_irq();
 80017c0:	f005 fab0 	bl	8006d24 <ethernetif_phy_irq>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40020000 	.word	0x40020000
 80017d0:	08021be0 	.word	0x08021be0
 80017d4:	200144f8 	.word	0x200144f8

080017d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b08f      	sub	sp, #60	; 0x3c
 80017dc:	af04      	add	r7, sp, #16
 80017de:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80017e0:	f005 fa2e 	bl	8006c40 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  struct dhcp *dhcp;
  char msg[16];
  bool dhcp_bound_flag = false;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t offered_ip = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {
	  dhcp = netif_dhcp_data(lwip_get_netif());
 80017ee:	f005 fa1d 	bl	8006c2c <lwip_get_netif>
 80017f2:	4603      	mov	r3, r0
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	61fb      	str	r3, [r7, #28]

	  if (dhcp->state == DHCP_STATE_BOUND && !dhcp_bound_flag)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	795b      	ldrb	r3, [r3, #5]
 80017fc:	2b0a      	cmp	r3, #10
 80017fe:	d12e      	bne.n	800185e <StartDefaultTask+0x86>
 8001800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001804:	f083 0301 	eor.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d027      	beq.n	800185e <StartDefaultTask+0x86>
	  {
		  dhcp_bound_flag = true;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  lcd_command_set(LCD_CLR_SCR_CMD);
 8001814:	2001      	movs	r0, #1
 8001816:	f005 f963 	bl	8006ae0 <lcd_command_set>
		  lcd_puts("DHCP IP address:");
 800181a:	4815      	ldr	r0, [pc, #84]	; (8001870 <StartDefaultTask+0x98>)
 800181c:	f005 f9e4 	bl	8006be8 <lcd_puts>
		  lcd_command_set(LCD_LFCR_CMD);
 8001820:	20a8      	movs	r0, #168	; 0xa8
 8001822:	f005 f95d 	bl	8006ae0 <lcd_command_set>
		  offered_ip = ip4_addr_get_u32(&dhcp->offered_ip_addr);
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	623b      	str	r3, [r7, #32]
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	b2dc      	uxtb	r4, r3
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	0a1b      	lsrs	r3, r3, #8
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001834:	b2db      	uxtb	r3, r3
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 8001836:	6a3a      	ldr	r2, [r7, #32]
 8001838:	0c12      	lsrs	r2, r2, #16
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 800183a:	b2d2      	uxtb	r2, r2
				  (offered_ip)&0xFF,  (offered_ip >> 8)&0xFF, (offered_ip >> 16)&0xFF, (offered_ip >> 24)&0xFF);
 800183c:	6a39      	ldr	r1, [r7, #32]
 800183e:	0e09      	lsrs	r1, r1, #24
		  snprintf(msg, sizeof(msg), "%03lu.%03lu.%03lu.%03lu",
 8001840:	f107 000c 	add.w	r0, r7, #12
 8001844:	9102      	str	r1, [sp, #8]
 8001846:	9201      	str	r2, [sp, #4]
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	4623      	mov	r3, r4
 800184c:	4a09      	ldr	r2, [pc, #36]	; (8001874 <StartDefaultTask+0x9c>)
 800184e:	2110      	movs	r1, #16
 8001850:	f01d fab4 	bl	801edbc <sniprintf>
		  lcd_puts(msg);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4618      	mov	r0, r3
 800185a:	f005 f9c5 	bl	8006be8 <lcd_puts>
	  }

	  BSP_LED_Toggle(BLUE);
 800185e:	2003      	movs	r0, #3
 8001860:	f001 fcce 	bl	8003200 <BSP_LED_Toggle>
	  osDelay(1000);
 8001864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001868:	f005 fed5 	bl	8007616 <osDelay>
	  dhcp = netif_dhcp_data(lwip_get_netif());
 800186c:	e7bf      	b.n	80017ee <StartDefaultTask+0x16>
 800186e:	bf00      	nop
 8001870:	08021bfc 	.word	0x08021bfc
 8001874:	08021c10 	.word	0x08021c10

08001878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800188a:	f003 fa03 	bl	8004c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40010000 	.word	0x40010000

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>
	...

080018a8 <parse_command>:
		parse_version,
		NULL
};

static http_status_t parse_command(const char *token, http_server_request_t *request)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_command() %s\n", token);
	if (strncmp(token, HTTP_GET_STR, HTTP_GET_STR_LEN) == 0)
 80018b2:	2203      	movs	r2, #3
 80018b4:	491a      	ldr	r1, [pc, #104]	; (8001920 <parse_command+0x78>)
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f01d fb58 	bl	801ef6c <strncmp>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d103      	bne.n	80018ca <parse_command+0x22>
	{
		request->command = HTTP_GET;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e025      	b.n	8001916 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_PUT_STR, HTTP_PUT_STR_LEN) == 0)
 80018ca:	2203      	movs	r2, #3
 80018cc:	4915      	ldr	r1, [pc, #84]	; (8001924 <parse_command+0x7c>)
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f01d fb4c 	bl	801ef6c <strncmp>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <parse_command+0x3a>
	{
		request->command = HTTP_PUT;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
 80018e0:	e019      	b.n	8001916 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_POST_STR, HTTP_POST_STR_LEN) == 0)
 80018e2:	2204      	movs	r2, #4
 80018e4:	4910      	ldr	r1, [pc, #64]	; (8001928 <parse_command+0x80>)
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f01d fb40 	bl	801ef6c <strncmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <parse_command+0x52>
	{
		request->command = HTTP_POST;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2202      	movs	r2, #2
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e00d      	b.n	8001916 <parse_command+0x6e>
	}
	else if(strncmp(token, HTTP_RESET_STR, HTTP_RESET_STR_LEN) == 0)
 80018fa:	2205      	movs	r2, #5
 80018fc:	490b      	ldr	r1, [pc, #44]	; (800192c <parse_command+0x84>)
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f01d fb34 	bl	801ef6c <strncmp>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <parse_command+0x6a>
	{
		request->command = HTTP_RESET;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2203      	movs	r2, #3
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e001      	b.n	8001916 <parse_command+0x6e>
	}
	else
	{
		return HTTP_ERR_CMD;
 8001912:	2305      	movs	r3, #5
 8001914:	e000      	b.n	8001918 <parse_command+0x70>
	}
	return HTTP_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	08021c28 	.word	0x08021c28
 8001924:	08021c2c 	.word	0x08021c2c
 8001928:	08021c30 	.word	0x08021c30
 800192c:	08021c38 	.word	0x08021c38

08001930 <parse_path>:

static http_status_t parse_path(const char *token, http_server_request_t *request)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_path()\n");
	int len;
	if ((len = strlen(token)) > MAX_PATH_LENGTH)
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7fe fc48 	bl	80001d0 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b10      	cmp	r3, #16
 8001948:	dd01      	ble.n	800194e <parse_path+0x1e>
	{
		return HTTP_ERR_PATH_LEN;
 800194a:	2306      	movs	r3, #6
 800194c:	e008      	b.n	8001960 <parse_path+0x30>
	}
	strncpy(request->path, token, len + 1);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	1c58      	adds	r0, r3, #1
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	461a      	mov	r2, r3
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	f01d fb19 	bl	801ef90 <strncpy>
	HTTP_DEBUG_PRINF("path: %s\n",request->path);
	return HTTP_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <parse_version>:

static http_status_t parse_version(const char *token, http_server_request_t *request)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("parse_version()\n");
	int len;
	if ((len = strlen(token)) > VERSION_LENGTH)
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fc2c 	bl	80001d0 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b09      	cmp	r3, #9
 8001980:	d901      	bls.n	8001986 <parse_version+0x1e>
	{
		return HTTP_ERR_VERSION_LEN;
 8001982:	2307      	movs	r3, #7
 8001984:	e009      	b.n	800199a <parse_version+0x32>
	}
	strncpy(request->version, token, len + 1);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f103 0011 	add.w	r0, r3, #17
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3301      	adds	r3, #1
 8001990:	461a      	mov	r2, r3
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f01d fafc 	bl	801ef90 <strncpy>
	HTTP_DEBUG_PRINF("version: %s\n",request->version);
	return HTTP_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <parse_command_line>:

static http_status_t parse_command_line(const char *line, http_server_request_t *request)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	http_parser_state_t state = HTTP_PARSE_CMD;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
	char *token = strtok((char *)line, " ");
 80019b2:	4916      	ldr	r1, [pc, #88]	; (8001a0c <parse_command_line+0x68>)
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f01d fb15 	bl	801efe4 <strtok>
 80019ba:	6138      	str	r0, [r7, #16]
	http_status_t status;

	while(token != NULL && state != HTTP_PARSE_DONE)
 80019bc:	e01b      	b.n	80019f6 <parse_command_line+0x52>
	{
		HTTP_DEBUG_PRINF("command line token : %s\n", token);

		if (handlers[state])
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <parse_command_line+0x6c>)
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d010      	beq.n	80019ec <parse_command_line+0x48>
		{
			status = handlers[state](token, request);
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <parse_command_line+0x6c>)
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	6938      	ldr	r0, [r7, #16]
 80019d6:	4798      	blx	r3
 80019d8:	4603      	mov	r3, r0
 80019da:	73fb      	strb	r3, [r7, #15]
			HTTP_DEBUG_PRINF("state : %d\n", state);
			if (status != HTTP_OK)
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <parse_command_line+0x42>
			{
				HTTP_DEBUG_PRINF("handlers() error : %d\n", state);
				return status;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	e00e      	b.n	8001a04 <parse_command_line+0x60>
			}
			state++;
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	3301      	adds	r3, #1
 80019ea:	75fb      	strb	r3, [r7, #23]
		}
		token = strtok(NULL, " ");
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <parse_command_line+0x68>)
 80019ee:	2000      	movs	r0, #0
 80019f0:	f01d faf8 	bl	801efe4 <strtok>
 80019f4:	6138      	str	r0, [r7, #16]
	while(token != NULL && state != HTTP_PARSE_DONE)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <parse_command_line+0x5e>
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d1dd      	bne.n	80019be <parse_command_line+0x1a>
	}
	return status;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	08021c40 	.word	0x08021c40
 8001a10:	20000000 	.word	0x20000000

08001a14 <parse_payload>:

static http_status_t parse_payload(const char *payload, http_server_request_t *request)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b096      	sub	sp, #88	; 0x58
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	http_status_t status;
	if (payload == NULL || request == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <parse_payload+0x16>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <parse_payload+0x1a>
	{
		return HTTP_ERR_FAULT;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e034      	b.n	8001a98 <parse_payload+0x84>
	}
	char *content = strstr(payload, HTTP_CONTENT_SEPARATOR);
 8001a2e:	491c      	ldr	r1, [pc, #112]	; (8001aa0 <parse_payload+0x8c>)
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f01d fac0 	bl	801efb6 <strstr>
 8001a36:	6578      	str	r0, [r7, #84]	; 0x54
	if (content != NULL)
 8001a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <parse_payload+0x3e>
	{
		content += sizeof(HTTP_CONTENT_SEPARATOR) - 1;
 8001a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a40:	3304      	adds	r3, #4
 8001a42:	657b      	str	r3, [r7, #84]	; 0x54
		strncpy(request->content, content, MAX_CONTENT_LENGTH);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	331a      	adds	r3, #26
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f01d fa9f 	bl	801ef90 <strncpy>
		HTTP_DEBUG_PRINF("content : %s\n", content);
	}

	char *token = strtok((char *)payload, HTTP_HEADER_SEPARATOR);
 8001a52:	4914      	ldr	r1, [pc, #80]	; (8001aa4 <parse_payload+0x90>)
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f01d fac5 	bl	801efe4 <strtok>
 8001a5a:	6538      	str	r0, [r7, #80]	; 0x50
	if (token == NULL)
 8001a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <parse_payload+0x52>
	{
		return HTTP_ERR_HEADER;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e018      	b.n	8001a98 <parse_payload+0x84>
	}

	char command_line[MAX_COMMAND_LINE_LENGTH];
	strncpy(command_line, token, sizeof(command_line));
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f01d fa8e 	bl	801ef90 <strncpy>

	status = parse_command_line((const char *)command_line, request);
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff92 	bl	80019a4 <parse_command_line>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (status != HTTP_OK)
 8001a86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <parse_payload+0x80>
	{
		return status;
 8001a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a92:	e001      	b.n	8001a98 <parse_payload+0x84>
	}

	return status;
 8001a94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3758      	adds	r7, #88	; 0x58
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	08021c44 	.word	0x08021c44
 8001aa4:	08021c4c 	.word	0x08021c4c

08001aa8 <error_code_handler>:

static http_status_t error_code_handler(const char *error_str, unsigned int error_code, const char *error_message, http_buffer_t *out)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
	char *tmp = (char *)malloc(256);
 8001ab6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001aba:	f01c fad5 	bl	801e068 <malloc>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	61fb      	str	r3, [r7, #28]
	if (tmp == NULL)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <error_code_handler+0x24>
		return HTTP_ERR_FAULT;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e036      	b.n	8001b3a <error_code_handler+0x92>
	sprintf(tmp, HTTP_ERROR_MESSAGE_TEMPLATE_STR, error_str, error_str, error_message);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	491b      	ldr	r1, [pc, #108]	; (8001b44 <error_code_handler+0x9c>)
 8001ad6:	69f8      	ldr	r0, [r7, #28]
 8001ad8:	f01d f9a4 	bl	801ee24 <siprintf>
	int content_len = strlen(tmp);
 8001adc:	69f8      	ldr	r0, [r7, #28]
 8001ade:	f7fe fb77 	bl	80001d0 <strlen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	61bb      	str	r3, [r7, #24]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, error_code, error_str, content_len);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6858      	ldr	r0, [r3, #4]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <error_code_handler+0xa0>)
 8001afa:	f01d f95f 	bl	801edbc <sniprintf>
	int header_len = strlen(out->data);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fb64 	bl	80001d0 <strlen>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	617b      	str	r3, [r7, #20]
	if (out->length < header_len + content_len)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6979      	ldr	r1, [r7, #20]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	440a      	add	r2, r1
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d204      	bcs.n	8001b24 <error_code_handler+0x7c>
	{
		free(tmp);
 8001b1a:	69f8      	ldr	r0, [r7, #28]
 8001b1c:	f01c faac 	bl	801e078 <free>
		return HTTP_ERR_BUF_OVERFLOW;
 8001b20:	2304      	movs	r3, #4
 8001b22:	e00a      	b.n	8001b3a <error_code_handler+0x92>
	}
	strncat(out->data, tmp, content_len);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69f9      	ldr	r1, [r7, #28]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f01d fa0a 	bl	801ef46 <strncat>
	free(tmp);
 8001b32:	69f8      	ldr	r0, [r7, #28]
 8001b34:	f01c faa0 	bl	801e078 <free>
	return HTTP_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	08021c50 	.word	0x08021c50
 8001b48:	08021cd4 	.word	0x08021cd4

08001b4c <bad_request_handler>:

static http_status_t bad_request_handler(http_buffer_t *out)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_BAD_REQUEST_ERR_STR, HTTP_BAD_REQUEST_ERR_CODE, HTTP_ERR_400_STR, out);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <bad_request_handler+0x20>)
 8001b58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <bad_request_handler+0x24>)
 8001b5e:	f7ff ffa3 	bl	8001aa8 <error_code_handler>
 8001b62:	4603      	mov	r3, r0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	08021d4c 	.word	0x08021d4c
 8001b70:	08021d58 	.word	0x08021d58

08001b74 <not_implemented_handler>:

static http_status_t not_implemented_handler(http_buffer_t *out)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_NOT_IMPLEMENTED_ERR_STR, HTTP_NOT_IMPLEMENTED_ERR_CODE, HTTP_ERR_501_STR, out);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <not_implemented_handler+0x20>)
 8001b80:	f240 11f5 	movw	r1, #501	; 0x1f5
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <not_implemented_handler+0x24>)
 8001b86:	f7ff ff8f 	bl	8001aa8 <error_code_handler>
 8001b8a:	4603      	mov	r3, r0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	08021d64 	.word	0x08021d64
 8001b98:	08021d70 	.word	0x08021d70

08001b9c <not_found_handler>:

static http_status_t not_found_handler(http_buffer_t *out)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	return error_code_handler(HTTP_NOT_FOUND_ERR_STR, HTTP_NOT_FOUND_ERR_CODE, HTTP_ERR_404_STR, out);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <not_found_handler+0x20>)
 8001ba8:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8001bac:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <not_found_handler+0x24>)
 8001bae:	f7ff ff7b 	bl	8001aa8 <error_code_handler>
 8001bb2:	4603      	mov	r3, r0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	08021d80 	.word	0x08021d80
 8001bc0:	08021d8c 	.word	0x08021d8c

08001bc4 <reset_content_handler>:

static http_status_t reset_content_handler(http_buffer_t *out)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_RESET_CONTENT_CODE, HTTP_RESET_CONTENT_STR, 0);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6858      	ldr	r0, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <reset_content_handler+0x2c>)
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	23cd      	movs	r3, #205	; 0xcd
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <reset_content_handler+0x30>)
 8001be0:	f01d f8ec 	bl	801edbc <sniprintf>
	return HTTP_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08021d98 	.word	0x08021d98
 8001bf4:	08021cd4 	.word	0x08021cd4

08001bf8 <error_handler>:

static http_status_t error_handler(http_status_t status, http_buffer_t *out)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
	switch(status)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b0c      	cmp	r3, #12
 8001c08:	d010      	beq.n	8001c2c <error_handler+0x34>
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	dc13      	bgt.n	8001c36 <error_handler+0x3e>
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <error_handler+0x20>
 8001c12:	2b0a      	cmp	r3, #10
 8001c14:	d005      	beq.n	8001c22 <error_handler+0x2a>
 8001c16:	e00e      	b.n	8001c36 <error_handler+0x3e>
	{
	case HTTP_OK:
		return reset_content_handler(out);
 8001c18:	6838      	ldr	r0, [r7, #0]
 8001c1a:	f7ff ffd3 	bl	8001bc4 <reset_content_handler>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	e00d      	b.n	8001c3e <error_handler+0x46>

	case HTTP_ERR_NOT_IMPLEMENTED:
		return not_implemented_handler(out);
 8001c22:	6838      	ldr	r0, [r7, #0]
 8001c24:	f7ff ffa6 	bl	8001b74 <not_implemented_handler>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	e008      	b.n	8001c3e <error_handler+0x46>

	case HTTP_ERR_NOT_FOUND:
		return not_found_handler(out);
 8001c2c:	6838      	ldr	r0, [r7, #0]
 8001c2e:	f7ff ffb5 	bl	8001b9c <not_found_handler>
 8001c32:	4603      	mov	r3, r0
 8001c34:	e003      	b.n	8001c3e <error_handler+0x46>

	default:
	case HTTP_ERR_BAD_REQUEST:
		return bad_request_handler(out);
 8001c36:	6838      	ldr	r0, [r7, #0]
 8001c38:	f7ff ff88 	bl	8001b4c <bad_request_handler>
 8001c3c:	4603      	mov	r3, r0
	}
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <http_root_path_handler>:

http_status_t http_root_path_handler(http_buffer_t *out)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]
	HTTP_DEBUG_PRINF("http_root_path_handler()\n");

	if (out == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <http_root_path_handler+0x12>
	{
		return HTTP_ERR_FAULT;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e026      	b.n	8001ca8 <http_root_path_handler+0x60>
	}
	int content_len = strlen(HTTP_MAIN_PAGE_CONTENT_STR);
 8001c5a:	f240 53dd 	movw	r3, #1501	; 0x5dd
 8001c5e:	60fb      	str	r3, [r7, #12]
	snprintf(out->data, out->length, HTTP_RESPONSE_HEADER_TEMPLATE_STR, HTTP_OK_CODE, HTTP_OK_STR, content_len);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6858      	ldr	r0, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <http_root_path_handler+0x68>)
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	23c8      	movs	r3, #200	; 0xc8
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <http_root_path_handler+0x6c>)
 8001c74:	f01d f8a2 	bl	801edbc <sniprintf>
	int header_len = strlen(out->data);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe faa7 	bl	80001d0 <strlen>
 8001c82:	4603      	mov	r3, r0
 8001c84:	60bb      	str	r3, [r7, #8]
	if(out->length < header_len + content_len)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	440a      	add	r2, r1
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d201      	bcs.n	8001c98 <http_root_path_handler+0x50>
		return HTTP_ERR_BUF_OVERFLOW;
 8001c94:	2304      	movs	r3, #4
 8001c96:	e007      	b.n	8001ca8 <http_root_path_handler+0x60>
	strncat(out->data, HTTP_MAIN_PAGE_CONTENT_STR, content_len);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4906      	ldr	r1, [pc, #24]	; (8001cb8 <http_root_path_handler+0x70>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f01d f950 	bl	801ef46 <strncat>
	return HTTP_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	08021da8 	.word	0x08021da8
 8001cb4:	08021cd4 	.word	0x08021cd4
 8001cb8:	08021dac 	.word	0x08021dac

08001cbc <http_post_request_handler>:
/*
 * End of Weak functions
 * */

http_status_t http_post_request_handler(http_server_request_t *request)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	HTTP_DEBUG_PRINF("http_post_request_handler()\n");

	if (request == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <http_post_request_handler+0x12>
	{
		return HTTP_ERR_FAULT;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e086      	b.n	8001ddc <http_post_request_handler+0x120>
	}

	char action[sizeof("TOGGLE")];
	uint8_t number;
	bool LED[4] = {false, false, false, false};
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
	LED_action_t LED_action;

	char *token = strtok(request->content, "&");
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	331a      	adds	r3, #26
 8001cd6:	4943      	ldr	r1, [pc, #268]	; (8001de4 <http_post_request_handler+0x128>)
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f01d f983 	bl	801efe4 <strtok>
 8001cde:	61b8      	str	r0, [r7, #24]
	while(token != NULL)
 8001ce0:	e05b      	b.n	8001d9a <http_post_request_handler+0xde>
	{
		HTTP_DEBUG_PRINF("token : %s\n", token);

		if (sscanf(token, "LED%01u=EN", (unsigned int *)&number) > 0)
 8001ce2:	f107 030f 	add.w	r3, r7, #15
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	493f      	ldr	r1, [pc, #252]	; (8001de8 <http_post_request_handler+0x12c>)
 8001cea:	69b8      	ldr	r0, [r7, #24]
 8001cec:	f01d f8ba 	bl	801ee64 <siscanf>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	dd0d      	ble.n	8001d12 <http_post_request_handler+0x56>
		{
			if (number > 2 && number < 7)
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d90a      	bls.n	8001d12 <http_post_request_handler+0x56>
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d807      	bhi.n	8001d12 <http_post_request_handler+0x56>
			{
				LED[number - 3] = true;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	f107 0220 	add.w	r2, r7, #32
 8001d0a:	4413      	add	r3, r2
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f803 2c18 	strb.w	r2, [r3, #-24]
			}
		}
		if (sscanf(token, "ACTION=%s", action) > 0)
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	461a      	mov	r2, r3
 8001d18:	4934      	ldr	r1, [pc, #208]	; (8001dec <http_post_request_handler+0x130>)
 8001d1a:	69b8      	ldr	r0, [r7, #24]
 8001d1c:	f01d f8a2 	bl	801ee64 <siscanf>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dd34      	ble.n	8001d90 <http_post_request_handler+0xd4>
		{
			if (strncmp(action, "TOGGLE", strlen(action)) == 0)
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fa50 	bl	80001d0 <strlen>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	492e      	ldr	r1, [pc, #184]	; (8001df0 <http_post_request_handler+0x134>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f01d f917 	bl	801ef6c <strncmp>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <http_post_request_handler+0x8e>
			{
				LED_action = LED_TOGGLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	77fb      	strb	r3, [r7, #31]
 8001d48:	e022      	b.n	8001d90 <http_post_request_handler+0xd4>
			}
			else if (strncmp(action, "ON", strlen(action)) == 0)
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fa3e 	bl	80001d0 <strlen>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4926      	ldr	r1, [pc, #152]	; (8001df4 <http_post_request_handler+0x138>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f01d f905 	bl	801ef6c <strncmp>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <http_post_request_handler+0xb2>
			{
				LED_action = LED_ON;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	77fb      	strb	r3, [r7, #31]
 8001d6c:	e010      	b.n	8001d90 <http_post_request_handler+0xd4>
			}
			else if (strncmp(action, "OFF", strlen(action)) == 0)
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fa2c 	bl	80001d0 <strlen>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	491e      	ldr	r1, [pc, #120]	; (8001df8 <http_post_request_handler+0x13c>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f01d f8f3 	bl	801ef6c <strncmp>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <http_post_request_handler+0xd4>
			{
				LED_action = LED_OFF;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	77fb      	strb	r3, [r7, #31]
			}
		}
		token = strtok(NULL, "&");
 8001d90:	4914      	ldr	r1, [pc, #80]	; (8001de4 <http_post_request_handler+0x128>)
 8001d92:	2000      	movs	r0, #0
 8001d94:	f01d f926 	bl	801efe4 <strtok>
 8001d98:	61b8      	str	r0, [r7, #24]
	while(token != NULL)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1a0      	bne.n	8001ce2 <http_post_request_handler+0x26>
	}

	switch(LED_action)
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d012      	beq.n	8001dcc <http_post_request_handler+0x110>
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	dc16      	bgt.n	8001dd8 <http_post_request_handler+0x11c>
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <http_post_request_handler+0xf8>
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d006      	beq.n	8001dc0 <http_post_request_handler+0x104>
	case LED_OFF:
		http_led_off_handler(LED);
		break;

	default:
		break;
 8001db2:	e011      	b.n	8001dd8 <http_post_request_handler+0x11c>
		http_led_toggle_handler(LED);
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f9d3 	bl	8001164 <http_led_toggle_handler>
		break;
 8001dbe:	e00c      	b.n	8001dda <http_post_request_handler+0x11e>
		http_led_on_handler(LED);
 8001dc0:	f107 0308 	add.w	r3, r7, #8
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f9f3 	bl	80011b0 <http_led_on_handler>
		break;
 8001dca:	e006      	b.n	8001dda <http_post_request_handler+0x11e>
		http_led_off_handler(LED);
 8001dcc:	f107 0308 	add.w	r3, r7, #8
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fa13 	bl	80011fc <http_led_off_handler>
		break;
 8001dd6:	e000      	b.n	8001dda <http_post_request_handler+0x11e>
		break;
 8001dd8:	bf00      	nop
	}
	return HTTP_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	0802238c 	.word	0x0802238c
 8001de8:	08022390 	.word	0x08022390
 8001dec:	0802239c 	.word	0x0802239c
 8001df0:	080223a8 	.word	0x080223a8
 8001df4:	080223b0 	.word	0x080223b0
 8001df8:	080223b4 	.word	0x080223b4

08001dfc <request_handler>:

static http_status_t request_handler(http_server_request_t *request, http_buffer_t *out)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	HTTP_DEBUG_PRINF("request_handler()\n");
	http_status_t status = HTTP_ERR_NOT_IMPLEMENTED;
 8001e06:	230a      	movs	r3, #10
 8001e08:	73fb      	strb	r3, [r7, #15]

	switch (request->command)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <request_handler+0x1c>
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d045      	beq.n	8001ea2 <request_handler+0xa6>
			status = HTTP_ERR_BAD_REQUEST;
		}
		break;

	default:
		break;
 8001e16:	e057      	b.n	8001ec8 <request_handler+0xcc>
		if (strncmp(request->path, "/", strlen(request->path)) == 0)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	1c5c      	adds	r4, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe f9d5 	bl	80001d0 <strlen>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	492a      	ldr	r1, [pc, #168]	; (8001ed4 <request_handler+0xd8>)
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f01d f89d 	bl	801ef6c <strncmp>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <request_handler+0x48>
			status = http_root_path_handler(out);
 8001e38:	6838      	ldr	r0, [r7, #0]
 8001e3a:	f7ff ff05 	bl	8001c48 <http_root_path_handler>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	73fb      	strb	r3, [r7, #15]
		break;
 8001e42:	e041      	b.n	8001ec8 <request_handler+0xcc>
		else if (strncmp(request->path, "/temperature", strlen(request->path)) == 0)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1c5c      	adds	r4, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe f9bf 	bl	80001d0 <strlen>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4920      	ldr	r1, [pc, #128]	; (8001ed8 <request_handler+0xdc>)
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f01d f887 	bl	801ef6c <strncmp>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <request_handler+0x74>
			status = http_temperature_path_handler(out);
 8001e64:	6838      	ldr	r0, [r7, #0]
 8001e66:	f7ff f851 	bl	8000f0c <http_temperature_path_handler>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]
		break;
 8001e6e:	e02b      	b.n	8001ec8 <request_handler+0xcc>
		else if (strncmp(request->path, "/humidity", strlen(request->path)) == 0)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1c5c      	adds	r4, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3301      	adds	r3, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe f9a9 	bl	80001d0 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4916      	ldr	r1, [pc, #88]	; (8001edc <request_handler+0xe0>)
 8001e84:	4620      	mov	r0, r4
 8001e86:	f01d f871 	bl	801ef6c <strncmp>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <request_handler+0xa0>
			status = http_humidity_path_handler(out);
 8001e90:	6838      	ldr	r0, [r7, #0]
 8001e92:	f7ff f8d1 	bl	8001038 <http_humidity_path_handler>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]
		break;
 8001e9a:	e015      	b.n	8001ec8 <request_handler+0xcc>
			status = HTTP_ERR_NOT_FOUND;
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	73fb      	strb	r3, [r7, #15]
		break;
 8001ea0:	e012      	b.n	8001ec8 <request_handler+0xcc>
		if (request->content)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	331a      	adds	r3, #26
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <request_handler+0xc6>
			status = http_post_request_handler(request);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff06 	bl	8001cbc <http_post_request_handler>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	73fb      	strb	r3, [r7, #15]
			if (status == HTTP_OK)
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <request_handler+0xca>
				reset_content_handler(out);
 8001eba:	6838      	ldr	r0, [r7, #0]
 8001ebc:	f7ff fe82 	bl	8001bc4 <reset_content_handler>
		break;
 8001ec0:	e001      	b.n	8001ec6 <request_handler+0xca>
			status = HTTP_ERR_BAD_REQUEST;
 8001ec2:	230b      	movs	r3, #11
 8001ec4:	73fb      	strb	r3, [r7, #15]
		break;
 8001ec6:	bf00      	nop
	}

	return status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	080223b8 	.word	0x080223b8
 8001ed8:	080223bc 	.word	0x080223bc
 8001edc:	080223cc 	.word	0x080223cc

08001ee0 <is_path_correct>:

static bool is_path_correct(const char *path)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	return (strncmp(path, "/", strlen(path)) == 0
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7fe f971 	bl	80001d0 <strlen>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4914      	ldr	r1, [pc, #80]	; (8001f44 <is_path_correct+0x64>)
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f01d f839 	bl	801ef6c <strncmp>
 8001efa:	4603      	mov	r3, r0
		|| strncmp(path, "/temperature", strlen(path)) == 0
		|| strncmp(path, "/humidity", strlen(path)) == 0);
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <is_path_correct+0x50>
		|| strncmp(path, "/temperature", strlen(path)) == 0
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe f965 	bl	80001d0 <strlen>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	490f      	ldr	r1, [pc, #60]	; (8001f48 <is_path_correct+0x68>)
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f01d f82d 	bl	801ef6c <strncmp>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <is_path_correct+0x50>
		|| strncmp(path, "/humidity", strlen(path)) == 0);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe f959 	bl	80001d0 <strlen>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	490a      	ldr	r1, [pc, #40]	; (8001f4c <is_path_correct+0x6c>)
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f01d f821 	bl	801ef6c <strncmp>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <is_path_correct+0x54>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <is_path_correct+0x56>
 8001f34:	2300      	movs	r3, #0
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	080223b8 	.word	0x080223b8
 8001f48:	080223bc 	.word	0x080223bc
 8001f4c:	080223cc 	.word	0x080223cc

08001f50 <is_command_implemented>:

static bool is_command_implemented(http_command_t command)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
	return (command == HTTP_GET
			|| command == HTTP_POST);
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <is_command_implemented+0x16>
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d101      	bne.n	8001f6a <is_command_implemented+0x1a>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <is_command_implemented+0x1c>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <is_version_correct>:

static bool is_version_correct(const char *version)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	return (strncmp(version, HTTP_VERSION_STR, strlen(version)) == 0);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7fe f921 	bl	80001d0 <strlen>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <is_version_correct+0x30>)
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f01c ffe9 	bl	801ef6c <strncmp>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	080223d8 	.word	0x080223d8

08001fb4 <send_answer>:

static int send_answer(int sock, http_buffer_t *out)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	int len = strlen(out->data);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe f904 	bl	80001d0 <strlen>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60fb      	str	r3, [r7, #12]
	if (send(sock, out->data, len, 0) < 0)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f00c f8ff 	bl	800e1d8 <lwip_send>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da05      	bge.n	8001fec <send_answer+0x38>
	{
		printf("send() error\n");
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <send_answer+0x44>)
 8001fe2:	f01c fe29 	bl	801ec38 <puts>
		return -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e000      	b.n	8001fee <send_answer+0x3a>
	}
	return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	080223e4 	.word	0x080223e4

08001ffc <http_server_handler>:

http_status_t http_server_handler(int sock)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b0a0      	sub	sp, #128	; 0x80
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	int nbytes;
	http_status_t status = HTTP_ERR_RCV_TIMEOUT;
 8002004:	2309      	movs	r3, #9
 8002006:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	http_server_request_t request;
	http_buffer_t in;
	http_buffer_t out;

	if (sock < 0) {
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da01      	bge.n	8002014 <http_server_handler+0x18>
		return HTTP_ERR_INVAL;
 8002010:	2302      	movs	r3, #2
 8002012:	e0a9      	b.n	8002168 <http_server_handler+0x16c>
	}

	in.length = MAX_IN_PACKET_LENGTH;
 8002014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002018:	617b      	str	r3, [r7, #20]
	in.data = malloc(in.length);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	4618      	mov	r0, r3
 800201e:	f01c f823 	bl	801e068 <malloc>
 8002022:	4603      	mov	r3, r0
 8002024:	61bb      	str	r3, [r7, #24]
	if (in.data == NULL)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <http_server_handler+0x34>
	{
		return HTTP_ERR_FAULT;
 800202c:	2301      	movs	r3, #1
 800202e:	e09b      	b.n	8002168 <http_server_handler+0x16c>
	}

	out.length = MAX_OUT_PACKET_LENGTH;
 8002030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002034:	60fb      	str	r3, [r7, #12]
	out.data = malloc(out.length);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4618      	mov	r0, r3
 800203a:	f01c f815 	bl	801e068 <malloc>
 800203e:	4603      	mov	r3, r0
 8002040:	613b      	str	r3, [r7, #16]
	if (out.data == NULL)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <http_server_handler+0x58>
	{
		free(in.data);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	4618      	mov	r0, r3
 800204c:	f01c f814 	bl	801e078 <free>
		return HTTP_ERR_FAULT;
 8002050:	2301      	movs	r3, #1
 8002052:	e089      	b.n	8002168 <http_server_handler+0x16c>
	}
	memset(in.data, 0, in.length);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f01c f84a 	bl	801e0f4 <memset>
	memset(out.data, 0, out.length);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f01c f844 	bl	801e0f4 <memset>

	if ( (nbytes = recv(sock, in.data, in.length, 0)) > 0 )
 800206c:	69b9      	ldr	r1, [r7, #24]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	2300      	movs	r3, #0
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f00c f89a 	bl	800e1ac <lwip_recv>
 8002078:	67b8      	str	r0, [r7, #120]	; 0x78
 800207a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800207c:	2b00      	cmp	r3, #0
 800207e:	dd5f      	ble.n	8002140 <http_server_handler+0x144>
	{
		status = parse_payload((const char *)in.data, &request);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f107 021c 	add.w	r2, r7, #28
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fcc3 	bl	8001a14 <parse_payload>
 800208e:	4603      	mov	r3, r0
 8002090:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		if (status != HTTP_OK)
 8002094:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <http_server_handler+0xac>
		{
			HTTP_DEBUG_PRINF("parse_payload() error: %d\n", status);
			bad_request_handler(&out);
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fd53 	bl	8001b4c <bad_request_handler>
			goto error_exit;
 80020a6:	e04c      	b.n	8002142 <http_server_handler+0x146>
		}
		if (!is_command_implemented(request.command))
 80020a8:	7f3b      	ldrb	r3, [r7, #28]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff50 	bl	8001f50 <is_command_implemented>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <http_server_handler+0xcc>
		{
			HTTP_DEBUG_PRINF("command not implemented\n");
			not_implemented_handler(&out);
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fd57 	bl	8001b74 <not_implemented_handler>
			goto error_exit;
 80020c6:	e03c      	b.n	8002142 <http_server_handler+0x146>
		}
		if (!is_path_correct((const char *)request.path))
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	3301      	adds	r3, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff06 	bl	8001ee0 <is_path_correct>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f083 0301 	eor.w	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <http_server_handler+0xf0>
		{
			HTTP_DEBUG_PRINF("requested path not found\n");
			not_found_handler(&out);
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fd59 	bl	8001b9c <not_found_handler>
			goto error_exit;
 80020ea:	e02a      	b.n	8002142 <http_server_handler+0x146>
		}
		if (!is_version_correct((const char *)request.version))
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	3311      	adds	r3, #17
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff44 	bl	8001f80 <is_version_correct>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f083 0301 	eor.w	r3, r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <http_server_handler+0x114>
		{
			HTTP_DEBUG_PRINF("wrong protocol version: %s\n",request.version);
			bad_request_handler(&out);
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fd1f 	bl	8001b4c <bad_request_handler>
			goto error_exit;
 800210e:	e018      	b.n	8002142 <http_server_handler+0x146>
		}
		// if everything is OK
		status = request_handler(&request, &out);
 8002110:	f107 020c 	add.w	r2, r7, #12
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fe6e 	bl	8001dfc <request_handler>
 8002120:	4603      	mov	r3, r0
 8002122:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (status != HTTP_OK)
 8002126:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <http_server_handler+0x144>
		{
			error_handler(status, &out);
 800212e:	f107 020c 	add.w	r2, r7, #12
 8002132:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fd5d 	bl	8001bf8 <error_handler>
 800213e:	e000      	b.n	8002142 <http_server_handler+0x146>
		}
	}
error_exit:
 8002140:	bf00      	nop
	send_answer(sock, &out);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff33 	bl	8001fb4 <send_answer>
	close(sock);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f00b fbec 	bl	800d92c <lwip_close>

	free(in.data);
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	4618      	mov	r0, r3
 8002158:	f01b ff8e 	bl	801e078 <free>
	free(out.data);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4618      	mov	r0, r3
 8002160:	f01b ff8a 	bl	801e078 <free>

	return status;
 8002164:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002168:	4618      	mov	r0, r3
 800216a:	3780      	adds	r7, #128	; 0x80
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_MspInit+0x54>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_MspInit+0x54>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_MspInit+0x54>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_MspInit+0x54>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <HAL_MspInit+0x54>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_MspInit+0x54>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	210f      	movs	r1, #15
 80021b2:	f06f 0001 	mvn.w	r0, #1
 80021b6:	f002 fe69 	bl	8004e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_UART_MspInit+0x84>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d12c      	bne.n	8002244 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_UART_MspInit+0x88>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <HAL_UART_MspInit+0x88>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_UART_MspInit+0x88>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_UART_MspInit+0x88>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_UART_MspInit+0x88>)
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_UART_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART3_TX_Pin|UART3_RX_Pin;
 8002222:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002230:	2303      	movs	r3, #3
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002234:	2307      	movs	r3, #7
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <HAL_UART_MspInit+0x8c>)
 8002240:	f002 fe4e 	bl	8004ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40004800 	.word	0x40004800
 8002250:	40023800 	.word	0x40023800
 8002254:	40020c00 	.word	0x40020c00

08002258 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	2019      	movs	r0, #25
 800226e:	f002 fe0d 	bl	8004e8c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002272:	2019      	movs	r0, #25
 8002274:	f002 fe26 	bl	8004ec4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <HAL_InitTick+0xa4>)
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_InitTick+0xa4>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6453      	str	r3, [r2, #68]	; 0x44
 8002288:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_InitTick+0xa4>)
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002294:	f107 0210 	add.w	r2, r7, #16
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fd8e 	bl	8005dc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80022a4:	f003 fd78 	bl	8005d98 <HAL_RCC_GetPCLK2Freq>
 80022a8:	4603      	mov	r3, r0
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	4a13      	ldr	r2, [pc, #76]	; (8002300 <HAL_InitTick+0xa8>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	3b01      	subs	r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_InitTick+0xac>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <HAL_InitTick+0xb0>)
 80022c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_InitTick+0xac>)
 80022c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_InitTick+0xac>)
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_InitTick+0xac>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_InitTick+0xac>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022dc:	4809      	ldr	r0, [pc, #36]	; (8002304 <HAL_InitTick+0xac>)
 80022de:	f003 fda1 	bl	8005e24 <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80022e8:	4806      	ldr	r0, [pc, #24]	; (8002304 <HAL_InitTick+0xac>)
 80022ea:	f003 fdf5 	bl	8005ed8 <HAL_TIM_Base_Start_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3730      	adds	r7, #48	; 0x30
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	431bde83 	.word	0x431bde83
 8002304:	20014504 	.word	0x20014504
 8002308:	40010000 	.word	0x40010000

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <NMI_Handler+0x4>

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800233c:	2001      	movs	r0, #1
 800233e:	f003 f8b3 	bl	80054a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}

08002346 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800234a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800234e:	f003 f8ab 	bl	80054a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800235e:	f003 fe2b 	bl	8005fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20014504 	.word	0x20014504

0800236c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <ETH_IRQHandler+0x10>)
 8002372:	f001 feab 	bl	80040cc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20015e74 	.word	0x20015e74

08002380 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
	return 1;
 8002384:	2301      	movs	r3, #1
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_kill>:

int _kill(int pid, int sig)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <_kill+0x20>)
 800239c:	2216      	movs	r2, #22
 800239e:	601a      	str	r2, [r3, #0]
	return -1;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	2001b118 	.word	0x2001b118

080023b4 <_exit>:

void _exit (int status)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ffe5 	bl	8002390 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023c6:	e7fe      	b.n	80023c6 <_exit+0x12>

080023c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e00a      	b.n	80023f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023da:	f3af 8000 	nop.w
 80023de:	4601      	mov	r1, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	60ba      	str	r2, [r7, #8]
 80023e6:	b2ca      	uxtb	r2, r1
 80023e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbf0      	blt.n	80023da <_read+0x12>
	}

return len;
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e009      	b.n	8002428 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fd63 	bl	8000ee8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	dbf1      	blt.n	8002414 <_write+0x12>
	}
	return len;
 8002430:	687b      	ldr	r3, [r7, #4]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_close>:

int _close(int file)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
	return -1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002462:	605a      	str	r2, [r3, #4]
	return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_isatty>:

int _isatty(int file)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	return 1;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <_sbrk+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <_sbrk+0x60>)
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <_sbrk+0x64>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <_sbrk+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d205      	bcs.n	80024e0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <_sbrk+0x6c>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	e009      	b.n	80024f4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	4a06      	ldr	r2, [pc, #24]	; (8002508 <_sbrk+0x64>)
 80024f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	20020000 	.word	0x20020000
 8002504:	00000400 	.word	0x00000400
 8002508:	20000250 	.word	0x20000250
 800250c:	2001b130 	.word	0x2001b130
 8002510:	2001b118 	.word	0x2001b118

08002514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <SystemInit+0x20>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <SystemInit+0x20>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <StartTcpClientTask>:

static Status resolve_address(const char *server, uint16_t port, struct sockaddr_in *address);
static int connect_server(const struct sockaddr_in *address);

void StartTcpClientTask(void const * argument)
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    osEvent event;

    for(;;)
    {
         event = osSignalWait (SIGNAL_PUSH_BUTTON, osWaitForever);
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	2102      	movs	r1, #2
 800254a:	4618      	mov	r0, r3
 800254c:	f005 f8b8 	bl	80076c0 <osSignalWait>

         if (event.status == osEventSignal)  {
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d1f4      	bne.n	8002540 <StartTcpClientTask+0x8>
        	TCP_CLIENT_PRINTF("osSignalWait() received event\n");
 			BSP_LED_Off(GREEN);
 8002556:	2000      	movs	r0, #0
 8002558:	f000 fe38 	bl	80031cc <BSP_LED_Off>
			if (resolve_address(SERVER, PORTNUM, &serv_addr) != STATUS_OK)
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <StartTcpClientTask+0xd4>)
 800255e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002562:	482b      	ldr	r0, [pc, #172]	; (8002610 <StartTcpClientTask+0xd8>)
 8002564:	f000 f85c 	bl	8002620 <resolve_address>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <StartTcpClientTask+0x3e>
			{
		    	BSP_LED_On(ORANGE);
 800256e:	2001      	movs	r0, #1
 8002570:	f000 fe12 	bl	8003198 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("resolve_address() error\n");
				continue;
 8002574:	e048      	b.n	8002608 <StartTcpClientTask+0xd0>
			}

			sock_fd = connect_server((const struct sockaddr_in *)&serv_addr);
 8002576:	4825      	ldr	r0, [pc, #148]	; (800260c <StartTcpClientTask+0xd4>)
 8002578:	f000 f88f 	bl	800269a <connect_server>
 800257c:	4603      	mov	r3, r0
 800257e:	4a25      	ldr	r2, [pc, #148]	; (8002614 <StartTcpClientTask+0xdc>)
 8002580:	6013      	str	r3, [r2, #0]
			if (sock_fd == STATUS_ERROR)
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <StartTcpClientTask+0xdc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d103      	bne.n	8002594 <StartTcpClientTask+0x5c>
			{
		    	BSP_LED_On(ORANGE);
 800258c:	2001      	movs	r0, #1
 800258e:	f000 fe03 	bl	8003198 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("connect_server() error\n");
				continue;
 8002592:	e039      	b.n	8002608 <StartTcpClientTask+0xd0>
			}

			const char *message = "This is a Ping-Pong message";
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <StartTcpClientTask+0xe0>)
 8002596:	61fb      	str	r3, [r7, #28]
			if (send(sock_fd, message, strlen(message), 0) < 0)
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <StartTcpClientTask+0xdc>)
 800259a:	681c      	ldr	r4, [r3, #0]
 800259c:	69f8      	ldr	r0, [r7, #28]
 800259e:	f7fd fe17 	bl	80001d0 <strlen>
 80025a2:	4602      	mov	r2, r0
 80025a4:	2300      	movs	r3, #0
 80025a6:	69f9      	ldr	r1, [r7, #28]
 80025a8:	4620      	mov	r0, r4
 80025aa:	f00b fe15 	bl	800e1d8 <lwip_send>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	da08      	bge.n	80025c6 <StartTcpClientTask+0x8e>
			{
		    	BSP_LED_On(ORANGE);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f000 fdef 	bl	8003198 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("send() error\n");
				close(sock_fd);
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <StartTcpClientTask+0xdc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f00b f9b4 	bl	800d92c <lwip_close>
				continue;
 80025c4:	e020      	b.n	8002608 <StartTcpClientTask+0xd0>
			}

			int received;
			if( (received = recv(sock_fd, buf, sizeof(buf), 0)) < 0) {
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <StartTcpClientTask+0xdc>)
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	2300      	movs	r3, #0
 80025cc:	2250      	movs	r2, #80	; 0x50
 80025ce:	4913      	ldr	r1, [pc, #76]	; (800261c <StartTcpClientTask+0xe4>)
 80025d0:	f00b fdec 	bl	800e1ac <lwip_recv>
 80025d4:	61b8      	str	r0, [r7, #24]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da08      	bge.n	80025ee <StartTcpClientTask+0xb6>
		    	BSP_LED_On(ORANGE);
 80025dc:	2001      	movs	r0, #1
 80025de:	f000 fddb 	bl	8003198 <BSP_LED_On>
		    	TCP_CLIENT_PRINTF("recv() error\n");
		        close(sock_fd);
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <StartTcpClientTask+0xdc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00b f9a0 	bl	800d92c <lwip_close>
		        continue;
 80025ec:	e00c      	b.n	8002608 <StartTcpClientTask+0xd0>
		    }
			buf[received] = 0;
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <StartTcpClientTask+0xe4>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]

			TCP_CLIENT_PRINTF("Received from server : %s\n", buf);
			BSP_LED_Off(ORANGE);
 80025f8:	2001      	movs	r0, #1
 80025fa:	f000 fde7 	bl	80031cc <BSP_LED_Off>

			close(sock_fd);
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <StartTcpClientTask+0xdc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f00b f992 	bl	800d92c <lwip_close>
         event = osSignalWait (SIGNAL_PUSH_BUTTON, osWaitForever);
 8002608:	e79a      	b.n	8002540 <StartTcpClientTask+0x8>
 800260a:	bf00      	nop
 800260c:	20000254 	.word	0x20000254
 8002610:	080223f4 	.word	0x080223f4
 8002614:	20000264 	.word	0x20000264
 8002618:	08022404 	.word	0x08022404
 800261c:	20000268 	.word	0x20000268

08002620 <resolve_address>:
         }
    }
}

static Status resolve_address(const char *server, uint16_t port, struct sockaddr_in *address)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	460b      	mov	r3, r1
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	817b      	strh	r3, [r7, #10]
	if (server == NULL || address == NULL )	{
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <resolve_address+0x1a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <resolve_address+0x20>
		TCP_CLIENT_PRINTF("resolve_address() argument error\n");
        return STATUS_ERROR;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e028      	b.n	8002692 <resolve_address+0x72>
	}
	struct hostent *hp;
    if((hp = gethostbyname(server))== NULL) {
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f00a fe6d 	bl	800d320 <lwip_gethostbyname>
 8002646:	6178      	str	r0, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d102      	bne.n	8002654 <resolve_address+0x34>
    	TCP_CLIENT_PRINTF("gethostbyname() error\n");
        return STATUS_ERROR;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e01e      	b.n	8002692 <resolve_address+0x72>
    }

    bzero(address, sizeof(*address));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	2300      	movs	r3, #0
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	6053      	str	r3, [r2, #4]
 800265e:	6093      	str	r3, [r2, #8]
 8002660:	60d3      	str	r3, [r2, #12]
    bcopy(hp->h_addr, &address->sin_addr, hp->h_length);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1d18      	adds	r0, r3, #4
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	461a      	mov	r2, r3
 8002672:	f01b fd25 	bl	801e0c0 <memmove>

    address->sin_family = hp->h_addrtype;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	705a      	strb	r2, [r3, #1]
    address->sin_port = htons(port);
 8002680:	897b      	ldrh	r3, [r7, #10]
 8002682:	4618      	mov	r0, r3
 8002684:	f00c fdea 	bl	800f25c <lwip_htons>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	805a      	strh	r2, [r3, #2]
    return STATUS_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <connect_server>:

static int connect_server(const struct sockaddr_in *address)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	if (address == NULL) {
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <connect_server+0x14>
		TCP_CLIENT_PRINTF("connect_server() argument error\n");
        return STATUS_ERROR;
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	e01c      	b.n	80026e8 <connect_server+0x4e>
	}
	int sock;
    if((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1){
 80026ae:	2200      	movs	r2, #0
 80026b0:	2101      	movs	r1, #1
 80026b2:	2002      	movs	r0, #2
 80026b4:	f00b fea0 	bl	800e3f8 <lwip_socket>
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d102      	bne.n	80026c8 <connect_server+0x2e>
    	TCP_CLIENT_PRINTF("socket() error\n");
        return STATUS_ERROR;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e00f      	b.n	80026e8 <connect_server+0x4e>
    }

    TCP_CLIENT_PRINTF("Server address is %s\n", inet_ntoa(address->sin_addr));

    if(connect(sock, (struct sockaddr *)address, sizeof(*address)) == -1) {
 80026c8:	2210      	movs	r2, #16
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f00b f983 	bl	800d9d8 <lwip_connect>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d105      	bne.n	80026e6 <connect_server+0x4c>
    	TCP_CLIENT_PRINTF("connect() error\n");
        close(sock);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f00b f926 	bl	800d92c <lwip_close>
        return STATUS_ERROR;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	e000      	b.n	80026e8 <connect_server+0x4e>
    }
    return sock;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <tcpServerInit>:
#define THREAD_MUTEX_UNLOCK()	osMutexRelease(thread_mutex_id)
#define PRINTF_MUTEX_LOCK() 	osMutexWait (printf_mutex_id, osWaitForever)
#define PRINTF_MUTEX_UNLOCK()	osMutexRelease(printf_mutex_id)

static int tcpServerInit(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	socket_fd = socket(AF_INET, SOCK_STREAM, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2101      	movs	r1, #1
 80026f8:	2002      	movs	r0, #2
 80026fa:	f00b fe7d 	bl	800e3f8 <lwip_socket>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <tcpServerInit+0xc8>)
 8002702:	6013      	str	r3, [r2, #0]
	if (socket_fd == -1) {
 8002704:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <tcpServerInit+0xc8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d102      	bne.n	8002714 <tcpServerInit+0x24>
		TCP_SERVER_PRINTF("socket() error\n");
		return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	e04e      	b.n	80027b2 <tcpServerInit+0xc2>
	}

	nport = PORTNUM;
 8002714:	4b29      	ldr	r3, [pc, #164]	; (80027bc <tcpServerInit+0xcc>)
 8002716:	2250      	movs	r2, #80	; 0x50
 8002718:	801a      	strh	r2, [r3, #0]
	nport = htons((uint16_t)nport);
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <tcpServerInit+0xcc>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f00c fd9c 	bl	800f25c <lwip_htons>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <tcpServerInit+0xcc>)
 800272a:	801a      	strh	r2, [r3, #0]

	bzero(&serv_addr, sizeof(serv_addr));
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <tcpServerInit+0xd0>)
 800272e:	461a      	mov	r2, r3
 8002730:	2300      	movs	r3, #0
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	6053      	str	r3, [r2, #4]
 8002736:	6093      	str	r3, [r2, #8]
 8002738:	60d3      	str	r3, [r2, #12]

	serv_addr.sin_family = AF_INET;
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <tcpServerInit+0xd0>)
 800273c:	2202      	movs	r2, #2
 800273e:	705a      	strb	r2, [r3, #1]
	serv_addr.sin_addr.s_addr = INADDR_ANY;
 8002740:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <tcpServerInit+0xd0>)
 8002742:	2200      	movs	r2, #0
 8002744:	605a      	str	r2, [r3, #4]
	serv_addr.sin_port = nport;
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <tcpServerInit+0xcc>)
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <tcpServerInit+0xd0>)
 800274c:	805a      	strh	r2, [r3, #2]

	if(bind(socket_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))==-1) {
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <tcpServerInit+0xc8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2210      	movs	r2, #16
 8002754:	491a      	ldr	r1, [pc, #104]	; (80027c0 <tcpServerInit+0xd0>)
 8002756:	4618      	mov	r0, r3
 8002758:	f00b f87a 	bl	800d850 <lwip_bind>
 800275c:	4603      	mov	r3, r0
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d107      	bne.n	8002774 <tcpServerInit+0x84>
		TCP_SERVER_PRINTF("bind() error\n");
		close(socket_fd);
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <tcpServerInit+0xc8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f00b f8df 	bl	800d92c <lwip_close>
		return -1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	e01e      	b.n	80027b2 <tcpServerInit+0xc2>
	}

	if(listen(socket_fd, 5) == -1) {
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <tcpServerInit+0xc8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2105      	movs	r1, #5
 800277a:	4618      	mov	r0, r3
 800277c:	f00b f9ac 	bl	800dad8 <lwip_listen>
 8002780:	4603      	mov	r3, r0
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002786:	d107      	bne.n	8002798 <tcpServerInit+0xa8>
		TCP_SERVER_PRINTF("listen() error\n");
		close(socket_fd);
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <tcpServerInit+0xc8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f00b f8cd 	bl	800d92c <lwip_close>
		return -1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e00c      	b.n	80027b2 <tcpServerInit+0xc2>
	}
	TCP_SERVER_PRINTF("Server is ready\n");

	thread_mutex_id = osMutexCreate (osMutex (thread_mutex));
 8002798:	480a      	ldr	r0, [pc, #40]	; (80027c4 <tcpServerInit+0xd4>)
 800279a:	f004 ffdd 	bl	8007758 <osMutexCreate>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <tcpServerInit+0xd8>)
 80027a2:	6013      	str	r3, [r2, #0]
	printf_mutex_id = osMutexCreate (osMutex (printf_mutex));
 80027a4:	4809      	ldr	r0, [pc, #36]	; (80027cc <tcpServerInit+0xdc>)
 80027a6:	f004 ffd7 	bl	8007758 <osMutexCreate>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <tcpServerInit+0xe0>)
 80027ae:	6013      	str	r3, [r2, #0]

	return 0;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200002d8 	.word	0x200002d8
 80027bc:	200002dc 	.word	0x200002dc
 80027c0:	200002b8 	.word	0x200002b8
 80027c4:	080265b4 	.word	0x080265b4
 80027c8:	2001454c 	.word	0x2001454c
 80027cc:	080265b8 	.word	0x080265b8
 80027d0:	20014550 	.word	0x20014550

080027d4 <StartTcpServerTask>:

void StartTcpServerTask(void const * argument)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    int accept_fd;
	int addr_len;
	size_t i = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

	osDelay(5000);// wait 5 sec to init lwip stack
 80027e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80027e4:	f004 ff17 	bl	8007616 <osDelay>

	if(tcpServerInit() < 0) {
 80027e8:	f7ff ff82 	bl	80026f0 <tcpServerInit>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db7d      	blt.n	80028ee <StartTcpServerTask+0x11a>
		return;
	}

	for(;;)
	{
		  bzero(&client_addr, sizeof(client_addr));
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <StartTcpServerTask+0x124>)
 80027f4:	461a      	mov	r2, r3
 80027f6:	2300      	movs	r3, #0
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	6053      	str	r3, [r2, #4]
 80027fc:	6093      	str	r3, [r2, #8]
 80027fe:	60d3      	str	r3, [r2, #12]
		  addr_len = sizeof(client_addr);
 8002800:	2310      	movs	r3, #16
 8002802:	60fb      	str	r3, [r7, #12]

		  accept_fd = accept(socket_fd, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len);
 8002804:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <StartTcpServerTask+0x128>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f107 020c 	add.w	r2, r7, #12
 800280c:	493a      	ldr	r1, [pc, #232]	; (80028f8 <StartTcpServerTask+0x124>)
 800280e:	4618      	mov	r0, r3
 8002810:	f00a ff00 	bl	800d614 <lwip_accept>
 8002814:	4603      	mov	r3, r0
 8002816:	613b      	str	r3, [r7, #16]

		  if (accept_fd == -1) {
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d10c      	bne.n	800283a <StartTcpServerTask+0x66>
			  PRINTF_MUTEX_LOCK();
 8002820:	4b37      	ldr	r3, [pc, #220]	; (8002900 <StartTcpServerTask+0x12c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	4618      	mov	r0, r3
 800282a:	f004 ffa1 	bl	8007770 <osMutexWait>
			  TCP_SERVER_PRINTF("accept() error\n");
			  PRINTF_MUTEX_UNLOCK();
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <StartTcpServerTask+0x12c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f004 ffea 	bl	800780c <osMutexRelease>
			  continue;
 8002838:	e058      	b.n	80028ec <StartTcpServerTask+0x118>
		  }

		  PRINTF_MUTEX_LOCK();
 800283a:	4b31      	ldr	r3, [pc, #196]	; (8002900 <StartTcpServerTask+0x12c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f04f 31ff 	mov.w	r1, #4294967295
 8002842:	4618      	mov	r0, r3
 8002844:	f004 ff94 	bl	8007770 <osMutexWait>
		  TCP_SERVER_PRINTF("Client: %s\n", inet_ntoa(client_addr.sin_addr));
		  TCP_SERVER_PRINTF("fd: %d\n", accept_fd);
		  PRINTF_MUTEX_UNLOCK();
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <StartTcpServerTask+0x12c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f004 ffdd 	bl	800780c <osMutexRelease>

		  THREAD_MUTEX_LOCK();
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <StartTcpServerTask+0x130>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 31ff 	mov.w	r1, #4294967295
 800285a:	4618      	mov	r0, r3
 800285c:	f004 ff88 	bl	8007770 <osMutexWait>

		  if (ThreadId[i] != NULL) {
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <StartTcpServerTask+0x134>)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d017      	beq.n	800289c <StartTcpServerTask+0xc8>
			  osThreadTerminate(ThreadId[i]);
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <StartTcpServerTask+0x134>)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	4618      	mov	r0, r3
 8002876:	f004 fec2 	bl	80075fe <osThreadTerminate>

			  ThreadId[i] = NULL;
 800287a:	4a23      	ldr	r2, [pc, #140]	; (8002908 <StartTcpServerTask+0x134>)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2100      	movs	r1, #0
 8002880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			  PRINTF_MUTEX_LOCK();
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <StartTcpServerTask+0x12c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f04f 31ff 	mov.w	r1, #4294967295
 800288c:	4618      	mov	r0, r3
 800288e:	f004 ff6f 	bl	8007770 <osMutexWait>
			  TCP_SERVER_PRINTF("(1)Thread[%d] %p terminated\n",i, ThreadId[i]);
			  PRINTF_MUTEX_UNLOCK();
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <StartTcpServerTask+0x12c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 ffb8 	bl	800780c <osMutexRelease>
		  }
		  //create a new thread
		  ThreadId[i] = osThreadCreate (Servers[i], &accept_fd);
 800289c:	4a1b      	ldr	r2, [pc, #108]	; (800290c <StartTcpServerTask+0x138>)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	f107 0210 	add.w	r2, r7, #16
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 fe79 	bl	80075a2 <osThreadCreate>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4915      	ldr	r1, [pc, #84]	; (8002908 <StartTcpServerTask+0x134>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  PRINTF_MUTEX_LOCK();
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <StartTcpServerTask+0x12c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f04f 31ff 	mov.w	r1, #4294967295
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 ff54 	bl	8007770 <osMutexWait>
		  TCP_SERVER_PRINTF("(1)Thread[%d] %p (fd = %d) created\n",i, ThreadId[i], accept_fd);
		  PRINTF_MUTEX_UNLOCK();
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <StartTcpServerTask+0x12c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f004 ff9d 	bl	800780c <osMutexRelease>

		  if (++i > 4) {
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d901      	bls.n	80028e2 <StartTcpServerTask+0x10e>
			  i = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
		  }

		  THREAD_MUTEX_UNLOCK();
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <StartTcpServerTask+0x130>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 ff90 	bl	800780c <osMutexRelease>
		  bzero(&client_addr, sizeof(client_addr));
 80028ec:	e781      	b.n	80027f2 <StartTcpServerTask+0x1e>
		return;
 80028ee:	bf00      	nop

	}
}
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200002c8 	.word	0x200002c8
 80028fc:	200002d8 	.word	0x200002d8
 8002900:	20014550 	.word	0x20014550
 8002904:	2001454c 	.word	0x2001454c
 8002908:	200002e0 	.word	0x200002e0
 800290c:	20000014 	.word	0x20000014

08002910 <ServerThread>:

void ServerThread(void const * argument)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	int accept_fd = *((int *)argument);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	613b      	str	r3, [r7, #16]

	PRINTF_MUTEX_LOCK();
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <ServerThread+0xb8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f04f 31ff 	mov.w	r1, #4294967295
 8002926:	4618      	mov	r0, r3
 8002928:	f004 ff22 	bl	8007770 <osMutexWait>
	TCP_SERVER_PRINTF("(2)Thread (fd = %d) started\n", accept_fd);
	PRINTF_MUTEX_UNLOCK();
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <ServerThread+0xb8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f004 ff6b 	bl	800780c <osMutexRelease>

#if defined(USE_HTTP_SERVER) || !defined(USE_TCP_SERVER)
		PRINTF_MUTEX_LOCK();
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <ServerThread+0xb8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f04f 31ff 	mov.w	r1, #4294967295
 800293e:	4618      	mov	r0, r3
 8002940:	f004 ff16 	bl	8007770 <osMutexWait>
		http_status_t status = http_server_handler(accept_fd);
 8002944:	6938      	ldr	r0, [r7, #16]
 8002946:	f7ff fb59 	bl	8001ffc <http_server_handler>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
		if (status != HTTP_OK)
		{
			TCP_SERVER_PRINTF("http_server_handler() error: %d\n", status);
		}
		PRINTF_MUTEX_UNLOCK();
 800294e:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <ServerThread+0xb8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f004 ff5a 	bl	800780c <osMutexRelease>
			}
		}
		close(accept_fd);
#endif

		osThreadId id = osThreadGetId ();
 8002958:	f004 fe4a 	bl	80075f0 <osThreadGetId>
 800295c:	60b8      	str	r0, [r7, #8]

		THREAD_MUTEX_LOCK();
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <ServerThread+0xbc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f04f 31ff 	mov.w	r1, #4294967295
 8002966:	4618      	mov	r0, r3
 8002968:	f004 ff02 	bl	8007770 <osMutexWait>

		for(size_t i = 0; i < 5; i++)
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	e01b      	b.n	80029aa <ServerThread+0x9a>
		{
		  if (ThreadId[i] == id) {
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <ServerThread+0xc0>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d111      	bne.n	80029a4 <ServerThread+0x94>

			  PRINTF_MUTEX_LOCK();
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <ServerThread+0xb8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fef1 	bl	8007770 <osMutexWait>
			  TCP_SERVER_PRINTF("(2)Thread[%d] %p (fd = %d) finished\n", i, ThreadId[i], accept_fd);
			  PRINTF_MUTEX_UNLOCK();
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <ServerThread+0xb8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f004 ff3a 	bl	800780c <osMutexRelease>

			  ThreadId[i] = NULL;
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <ServerThread+0xc0>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2100      	movs	r1, #0
 800299e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			  break;
 80029a2:	e005      	b.n	80029b0 <ServerThread+0xa0>
		for(size_t i = 0; i < 5; i++)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3301      	adds	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d9e0      	bls.n	8002972 <ServerThread+0x62>
		  }
		}

		THREAD_MUTEX_UNLOCK();
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <ServerThread+0xbc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f004 ff29 	bl	800780c <osMutexRelease>

		osThreadTerminate(NULL);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f004 fe1f 	bl	80075fe <osThreadTerminate>
}
 80029c0:	bf00      	nop
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20014550 	.word	0x20014550
 80029cc:	2001454c 	.word	0x2001454c
 80029d0:	200002e0 	.word	0x200002e0

080029d4 <udpServerInit>:
 * static struct sockaddr_in client2_addr;
 * static int socket2_fd;
 */

static int udpServerInit(uint16_t portnum)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	80fb      	strh	r3, [r7, #6]
	uint16_t port;
	int fd = socket(AF_INET, SOCK_DGRAM, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2102      	movs	r1, #2
 80029e2:	2002      	movs	r0, #2
 80029e4:	f00b fd08 	bl	800e3f8 <lwip_socket>
 80029e8:	60f8      	str	r0, [r7, #12]
	if (fd == -1) {
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d10a      	bne.n	8002a08 <udpServerInit+0x34>
		UDP_SERVER_PRINTF("socket() error\n");
 80029f2:	2231      	movs	r2, #49	; 0x31
 80029f4:	4922      	ldr	r1, [pc, #136]	; (8002a80 <udpServerInit+0xac>)
 80029f6:	4823      	ldr	r0, [pc, #140]	; (8002a84 <udpServerInit+0xb0>)
 80029f8:	f01c f898 	bl	801eb2c <iprintf>
 80029fc:	4822      	ldr	r0, [pc, #136]	; (8002a88 <udpServerInit+0xb4>)
 80029fe:	f01c f91b 	bl	801ec38 <puts>
		return -1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	e037      	b.n	8002a78 <udpServerInit+0xa4>
	}

	port = htons((uint16_t)portnum);
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f00c fc26 	bl	800f25c <lwip_htons>
 8002a10:	4603      	mov	r3, r0
 8002a12:	817b      	strh	r3, [r7, #10]

	bzero(&serv_addr, sizeof(serv_addr));
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <udpServerInit+0xb8>)
 8002a16:	461a      	mov	r2, r3
 8002a18:	2300      	movs	r3, #0
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	6053      	str	r3, [r2, #4]
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	60d3      	str	r3, [r2, #12]

	serv_addr.sin_family = AF_INET;
 8002a22:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <udpServerInit+0xb8>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	705a      	strb	r2, [r3, #1]
	serv_addr.sin_addr.s_addr = INADDR_ANY;
 8002a28:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <udpServerInit+0xb8>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	605a      	str	r2, [r3, #4]
	serv_addr.sin_port = port;
 8002a2e:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <udpServerInit+0xb8>)
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	8053      	strh	r3, [r2, #2]

	if(bind(fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))==-1) {
 8002a34:	2210      	movs	r2, #16
 8002a36:	4915      	ldr	r1, [pc, #84]	; (8002a8c <udpServerInit+0xb8>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f00a ff09 	bl	800d850 <lwip_bind>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d10d      	bne.n	8002a62 <udpServerInit+0x8e>
		UDP_SERVER_PRINTF("bind() error\n");
 8002a46:	223e      	movs	r2, #62	; 0x3e
 8002a48:	490d      	ldr	r1, [pc, #52]	; (8002a80 <udpServerInit+0xac>)
 8002a4a:	480e      	ldr	r0, [pc, #56]	; (8002a84 <udpServerInit+0xb0>)
 8002a4c:	f01c f86e 	bl	801eb2c <iprintf>
 8002a50:	480f      	ldr	r0, [pc, #60]	; (8002a90 <udpServerInit+0xbc>)
 8002a52:	f01c f8f1 	bl	801ec38 <puts>
		close(fd);
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f00a ff68 	bl	800d92c <lwip_close>
		return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a60:	e00a      	b.n	8002a78 <udpServerInit+0xa4>
	}

	UDP_SERVER_PRINTF("UDP Server is bound to port %d\n", portnum);
 8002a62:	2243      	movs	r2, #67	; 0x43
 8002a64:	4906      	ldr	r1, [pc, #24]	; (8002a80 <udpServerInit+0xac>)
 8002a66:	4807      	ldr	r0, [pc, #28]	; (8002a84 <udpServerInit+0xb0>)
 8002a68:	f01c f860 	bl	801eb2c <iprintf>
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4808      	ldr	r0, [pc, #32]	; (8002a94 <udpServerInit+0xc0>)
 8002a72:	f01c f85b 	bl	801eb2c <iprintf>

	return fd;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	080265bc 	.word	0x080265bc
 8002a84:	08022448 	.word	0x08022448
 8002a88:	08022464 	.word	0x08022464
 8002a8c:	200002f4 	.word	0x200002f4
 8002a90:	08022474 	.word	0x08022474
 8002a94:	08022484 	.word	0x08022484

08002a98 <led_status_handler>:
	COMMAND_ERR_ARGUMENT = -7,
	COMMAND_OK = 0
}command_error_t;

static command_error_t led_status_handler(const uint8_t * buffer, size_t len, char* msg)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
	int pin_num;
	char gpio_port;
	if(sscanf((const char *)buffer, "read gpio %s %d", &gpio_port, &pin_num) != 2){
 8002aa4:	f107 0318 	add.w	r3, r7, #24
 8002aa8:	f107 0217 	add.w	r2, r7, #23
 8002aac:	491d      	ldr	r1, [pc, #116]	; (8002b24 <led_status_handler+0x8c>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f01c f9d8 	bl	801ee64 <siscanf>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d002      	beq.n	8002ac0 <led_status_handler+0x28>
		return COMMAND_ERR_WRONG_FORMAT;
 8002aba:	f06f 0301 	mvn.w	r3, #1
 8002abe:	e02c      	b.n	8002b1a <led_status_handler+0x82>
	}
	if(buffer == 0 || len ==0 || len > CMD_BUFFER_MAX_LEN){
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <led_status_handler+0x3a>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <led_status_handler+0x3a>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d902      	bls.n	8002ad8 <led_status_handler+0x40>
		return COMMAND_UNKNOWN_ERROR;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	e020      	b.n	8002b1a <led_status_handler+0x82>
	}
	if(pin_num < 12 || pin_num > 15){
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b0b      	cmp	r3, #11
 8002adc:	dd02      	ble.n	8002ae4 <led_status_handler+0x4c>
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b0f      	cmp	r3, #15
 8002ae2:	dd02      	ble.n	8002aea <led_status_handler+0x52>
		return COMMAND_ERR_GPIO_PIN;
 8002ae4:	f06f 0305 	mvn.w	r3, #5
 8002ae8:	e017      	b.n	8002b1a <led_status_handler+0x82>
	}
	if(gpio_port != 'd'){
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b64      	cmp	r3, #100	; 0x64
 8002aee:	d002      	beq.n	8002af6 <led_status_handler+0x5e>
		return COMMAND_ERR_GPIO_NAME;
 8002af0:	f06f 0304 	mvn.w	r3, #4
 8002af4:	e011      	b.n	8002b1a <led_status_handler+0x82>
	}else {
		uint8_t pin_status = HAL_GPIO_ReadPin (GPIOD, 1 << pin_num);
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2201      	movs	r2, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4619      	mov	r1, r3
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <led_status_handler+0x90>)
 8002b04:	f002 fc84 	bl	8005410 <HAL_GPIO_ReadPin>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	77fb      	strb	r3, [r7, #31]
		sprintf(msg, "Status of GPIOD pin %d = %d\n", pin_num, pin_status);
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	4906      	ldr	r1, [pc, #24]	; (8002b2c <led_status_handler+0x94>)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f01c f986 	bl	801ee24 <siprintf>
	}
	return COMMAND_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	080224a4 	.word	0x080224a4
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	080224b4 	.word	0x080224b4

08002b30 <gpio_command_handler>:
/*
 * Parameters:
 * buffer - a pointer to the input buffer
 * len - buffer length
 **/
static command_error_t gpio_command_handler(const uint8_t * buffer, size_t len){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]

	int pin_state;
	int pin_num;
	sscanf((const char *)buffer, "GPIOD.%d=%d", &pin_num, &pin_state);
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	f107 0208 	add.w	r2, r7, #8
 8002b42:	4919      	ldr	r1, [pc, #100]	; (8002ba8 <gpio_command_handler+0x78>)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f01c f98d 	bl	801ee64 <siscanf>
	if(buffer == 0 || len ==0 || len > CMD_BUFFER_MAX_LEN){
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <gpio_command_handler+0x2c>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <gpio_command_handler+0x2c>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d902      	bls.n	8002b62 <gpio_command_handler+0x32>
		return COMMAND_ERR_WRONG_FORMAT;
 8002b5c:	f06f 0301 	mvn.w	r3, #1
 8002b60:	e01d      	b.n	8002b9e <gpio_command_handler+0x6e>
	}
	if(pin_num < 12 || pin_num > 15){
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b0b      	cmp	r3, #11
 8002b66:	dd02      	ble.n	8002b6e <gpio_command_handler+0x3e>
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	dd02      	ble.n	8002b74 <gpio_command_handler+0x44>
		return COMMAND_ERR_GPIO_PIN;
 8002b6e:	f06f 0305 	mvn.w	r3, #5
 8002b72:	e014      	b.n	8002b9e <gpio_command_handler+0x6e>
	}
	if(pin_state == 0 || pin_state == 1){
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <gpio_command_handler+0x50>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10c      	bne.n	8002b9a <gpio_command_handler+0x6a>
		HAL_GPIO_WritePin(GPIOD, 1 << pin_num, pin_state);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2201      	movs	r2, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4806      	ldr	r0, [pc, #24]	; (8002bac <gpio_command_handler+0x7c>)
 8002b92:	f002 fc55 	bl	8005440 <HAL_GPIO_WritePin>
	} else {
		return COMMAND_UNKNOWN_ERROR;
	}
	return COMMAND_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e001      	b.n	8002b9e <gpio_command_handler+0x6e>
		return COMMAND_UNKNOWN_ERROR;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	080224d4 	.word	0x080224d4
 8002bac:	40020c00 	.word	0x40020c00

08002bb0 <StartUdpServerTask>:

void StartUdpServerTask(void const * argument)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0ac      	sub	sp, #176	; 0xb0
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6078      	str	r0, [r7, #4]
	int addr_len;
	int addr2_len;

	osDelay(5000);// wait 5 sec to init lwip stack
 8002bb8:	f241 3088 	movw	r0, #5000	; 0x1388
 8002bbc:	f004 fd2b 	bl	8007616 <osDelay>

	if((socket_fd = udpServerInit(PORTNUM)) < 0) {
 8002bc0:	f241 602e 	movw	r0, #5678	; 0x162e
 8002bc4:	f7ff ff06 	bl	80029d4 <udpServerInit>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4abc      	ldr	r2, [pc, #752]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	4bbb      	ldr	r3, [pc, #748]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da08      	bge.n	8002be8 <StartUdpServerTask+0x38>
		UDP_SERVER_PRINTF("udpServerInit(PORTNUM) error\n");
 8002bd6:	2289      	movs	r2, #137	; 0x89
 8002bd8:	49b9      	ldr	r1, [pc, #740]	; (8002ec0 <StartUdpServerTask+0x310>)
 8002bda:	48ba      	ldr	r0, [pc, #744]	; (8002ec4 <StartUdpServerTask+0x314>)
 8002bdc:	f01b ffa6 	bl	801eb2c <iprintf>
 8002be0:	48b9      	ldr	r0, [pc, #740]	; (8002ec8 <StartUdpServerTask+0x318>)
 8002be2:	f01c f829 	bl	801ec38 <puts>
		return;
 8002be6:	e1ac      	b.n	8002f42 <StartUdpServerTask+0x392>
	}

	if((socket2_fd = udpServerInit(PORTNUM2)) < 0) {
 8002be8:	f240 40d2 	movw	r0, #1234	; 0x4d2
 8002bec:	f7ff fef2 	bl	80029d4 <udpServerInit>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4ab6      	ldr	r2, [pc, #728]	; (8002ecc <StartUdpServerTask+0x31c>)
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4bb5      	ldr	r3, [pc, #724]	; (8002ecc <StartUdpServerTask+0x31c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da08      	bge.n	8002c10 <StartUdpServerTask+0x60>
		UDP_SERVER_PRINTF("udpServerInit(PORTNUM2) error\n");
 8002bfe:	228e      	movs	r2, #142	; 0x8e
 8002c00:	49af      	ldr	r1, [pc, #700]	; (8002ec0 <StartUdpServerTask+0x310>)
 8002c02:	48b0      	ldr	r0, [pc, #704]	; (8002ec4 <StartUdpServerTask+0x314>)
 8002c04:	f01b ff92 	bl	801eb2c <iprintf>
 8002c08:	48b1      	ldr	r0, [pc, #708]	; (8002ed0 <StartUdpServerTask+0x320>)
 8002c0a:	f01c f815 	bl	801ec38 <puts>
		return;
 8002c0e:	e198      	b.n	8002f42 <StartUdpServerTask+0x392>
	}

	for(;;)
	{
		bzero(&client_addr, sizeof(client_addr));
 8002c10:	4bb0      	ldr	r3, [pc, #704]	; (8002ed4 <StartUdpServerTask+0x324>)
 8002c12:	461a      	mov	r2, r3
 8002c14:	2300      	movs	r3, #0
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	6053      	str	r3, [r2, #4]
 8002c1a:	6093      	str	r3, [r2, #8]
 8002c1c:	60d3      	str	r3, [r2, #12]
		addr_len = sizeof(client_addr);
 8002c1e:	2310      	movs	r3, #16
 8002c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		bzero(&client2_addr, sizeof(client2_addr));
 8002c24:	4bac      	ldr	r3, [pc, #688]	; (8002ed8 <StartUdpServerTask+0x328>)
 8002c26:	461a      	mov	r2, r3
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	6053      	str	r3, [r2, #4]
 8002c2e:	6093      	str	r3, [r2, #8]
 8002c30:	60d3      	str	r3, [r2, #12]
		addr2_len = sizeof(client2_addr);
 8002c32:	2310      	movs	r3, #16
 8002c34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		struct timeval tv;
		int retval;

		/* Watch stdin (fd 0) to see when it has input. */

		FD_ZERO(&rfds);
 8002c38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002c46:	e00b      	b.n	8002c60 <StartUdpServerTask+0xb0>
 8002c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c64:	2b07      	cmp	r3, #7
 8002c66:	d9ef      	bls.n	8002c48 <StartUdpServerTask+0x98>
		FD_SET(socket_fd, &rfds);
 8002c68:	4b94      	ldr	r3, [pc, #592]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	095a      	lsrs	r2, r3, #5
 8002c6e:	0093      	lsls	r3, r2, #2
 8002c70:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002c74:	440b      	add	r3, r1
 8002c76:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002c7a:	4990      	ldr	r1, [pc, #576]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002c7c:	6809      	ldr	r1, [r1, #0]
 8002c7e:	f001 011f 	and.w	r1, r1, #31
 8002c82:	2001      	movs	r0, #1
 8002c84:	fa00 f101 	lsl.w	r1, r0, r1
 8002c88:	4319      	orrs	r1, r3
 8002c8a:	0093      	lsls	r3, r2, #2
 8002c8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c90:	4413      	add	r3, r2
 8002c92:	f843 1c30 	str.w	r1, [r3, #-48]
		FD_SET(socket2_fd, &rfds);
 8002c96:	4b8d      	ldr	r3, [pc, #564]	; (8002ecc <StartUdpServerTask+0x31c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	095a      	lsrs	r2, r3, #5
 8002c9c:	0093      	lsls	r3, r2, #2
 8002c9e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002ca8:	4988      	ldr	r1, [pc, #544]	; (8002ecc <StartUdpServerTask+0x31c>)
 8002caa:	6809      	ldr	r1, [r1, #0]
 8002cac:	f001 011f 	and.w	r1, r1, #31
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f101 	lsl.w	r1, r0, r1
 8002cb6:	4319      	orrs	r1, r3
 8002cb8:	0093      	lsls	r3, r2, #2
 8002cba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f843 1c30 	str.w	r1, [r3, #-48]
		// TODO add the second socket descriptor
		/* Wait up to five seconds. */

		tv.tv_sec = 5;
 8002cc4:	f04f 0205 	mov.w	r2, #5
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		tv.tv_usec = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	673b      	str	r3, [r7, #112]	; 0x70

		retval = select(FD_SETSIZE, &rfds, NULL, NULL, &tv);
 8002cd4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002cd8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2040      	movs	r0, #64	; 0x40
 8002ce4:	f00b fda4 	bl	800e830 <lwip_select>
 8002ce8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		/* Don't rely on the value of tv now! */

		if (retval == -1)
 8002cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d10a      	bne.n	8002d0c <StartUdpServerTask+0x15c>
		{
			close(socket_fd);
 8002cf6:	4b71      	ldr	r3, [pc, #452]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f00a fe16 	bl	800d92c <lwip_close>
			close(socket2_fd);
 8002d00:	4b72      	ldr	r3, [pc, #456]	; (8002ecc <StartUdpServerTask+0x31c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00a fe11 	bl	800d92c <lwip_close>
 8002d0a:	e11a      	b.n	8002f42 <StartUdpServerTask+0x392>
			break;
		}
		else if (retval)
 8002d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 810d 	beq.w	8002f30 <StartUdpServerTask+0x380>
		{
			uint8_t buffer[CMD_BUFFER_MAX_LEN];
			uint8_t buffer2[CMD_BUFFER_MAX_LEN];
			const size_t buf_size = sizeof(buffer);
 8002d16:	2320      	movs	r3, #32
 8002d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			const size_t buf_size2 = sizeof(buffer2);
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			command_error_t  r;
			char gpio_status_feedback[GPIO_STATUS_MSG_LEN];
			ssize_t received;
			ssize_t received2;

			if (FD_ISSET(socket_fd, &rfds))
 8002d22:	4b66      	ldr	r3, [pc, #408]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d2e:	4413      	add	r3, r2
 8002d30:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002d34:	4a61      	ldr	r2, [pc, #388]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	f002 021f 	and.w	r2, r2, #31
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d05c      	beq.n	8002e02 <StartUdpServerTask+0x252>
			{
				received = recvfrom(socket_fd, buffer, buf_size, MSG_DONTWAIT, (struct sockaddr *)&client_addr, (socklen_t *)&addr_len);
 8002d48:	4b5c      	ldr	r3, [pc, #368]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	f107 0108 	add.w	r1, r7, #8
 8002d50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <StartUdpServerTask+0x324>)
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002d60:	f00b f992 	bl	800e088 <lwip_recvfrom>
 8002d64:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

				if (received > 0)
 8002d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dd48      	ble.n	8002e02 <StartUdpServerTask+0x252>
				{
					if ( (r = led_status_handler(buffer, received, gpio_status_feedback)) != COMMAND_OK)
 8002d70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d78:	f107 0308 	add.w	r3, r7, #8
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fe8b 	bl	8002a98 <led_status_handler>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002d88:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d017      	beq.n	8002dc0 <StartUdpServerTask+0x210>
					{
						UDP_SERVER_PRINTF("command_handler() returned error code = %d\n", (int)r);
 8002d90:	22c5      	movs	r2, #197	; 0xc5
 8002d92:	494b      	ldr	r1, [pc, #300]	; (8002ec0 <StartUdpServerTask+0x310>)
 8002d94:	484b      	ldr	r0, [pc, #300]	; (8002ec4 <StartUdpServerTask+0x314>)
 8002d96:	f01b fec9 	bl	801eb2c <iprintf>
 8002d9a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002d9e:	4619      	mov	r1, r3
 8002da0:	484e      	ldr	r0, [pc, #312]	; (8002edc <StartUdpServerTask+0x32c>)
 8002da2:	f01b fec3 	bl	801eb2c <iprintf>
						if (sendto(socket_fd, "error\n", sizeof("error\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 8002da6:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <StartUdpServerTask+0x324>)
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2308      	movs	r3, #8
 8002db6:	2207      	movs	r2, #7
 8002db8:	4949      	ldr	r1, [pc, #292]	; (8002ee0 <StartUdpServerTask+0x330>)
 8002dba:	f00b fa6b 	bl	800e294 <lwip_sendto>
 8002dbe:	e020      	b.n	8002e02 <StartUdpServerTask+0x252>

						}
					}
					else
					{
						UDP_SERVER_PRINTF("command was handles successfully\n");
 8002dc0:	22cd      	movs	r2, #205	; 0xcd
 8002dc2:	493f      	ldr	r1, [pc, #252]	; (8002ec0 <StartUdpServerTask+0x310>)
 8002dc4:	483f      	ldr	r0, [pc, #252]	; (8002ec4 <StartUdpServerTask+0x314>)
 8002dc6:	f01b feb1 	bl	801eb2c <iprintf>
 8002dca:	4846      	ldr	r0, [pc, #280]	; (8002ee4 <StartUdpServerTask+0x334>)
 8002dcc:	f01b ff34 	bl	801ec38 <puts>
						if (sendto(socket_fd, gpio_status_feedback, sizeof(gpio_status_feedback),  MSG_DONTWAIT, (const struct sockaddr *)&client_addr, addr_len) == -1)
 8002dd0:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <StartUdpServerTask+0x30c>)
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <StartUdpServerTask+0x324>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2308      	movs	r3, #8
 8002de4:	221d      	movs	r2, #29
 8002de6:	f00b fa55 	bl	800e294 <lwip_sendto>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d107      	bne.n	8002e02 <StartUdpServerTask+0x252>
						{
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 8002df2:	22d0      	movs	r2, #208	; 0xd0
 8002df4:	4932      	ldr	r1, [pc, #200]	; (8002ec0 <StartUdpServerTask+0x310>)
 8002df6:	4833      	ldr	r0, [pc, #204]	; (8002ec4 <StartUdpServerTask+0x314>)
 8002df8:	f01b fe98 	bl	801eb2c <iprintf>
 8002dfc:	483a      	ldr	r0, [pc, #232]	; (8002ee8 <StartUdpServerTask+0x338>)
 8002dfe:	f01b ff1b 	bl	801ec38 <puts>
						}
					}
				}
			}
			if (FD_ISSET(socket2_fd, &rfds)){
 8002e02:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <StartUdpServerTask+0x31c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002e0e:	4413      	add	r3, r2
 8002e10:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002e14:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <StartUdpServerTask+0x31c>)
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	f002 021f 	and.w	r2, r2, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f43f aef3 	beq.w	8002c10 <StartUdpServerTask+0x60>
				received2 = recvfrom(socket2_fd, buffer2, buf_size2, MSG_DONTWAIT, (struct sockaddr *)&client2_addr, (socklen_t *)&addr2_len);
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <StartUdpServerTask+0x31c>)
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <StartUdpServerTask+0x328>)
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e42:	f00b f921 	bl	800e088 <lwip_recvfrom>
 8002e46:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
				if (received2 > 0){
 8002e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f77f aede 	ble.w	8002c10 <StartUdpServerTask+0x60>
					if ( (r = gpio_command_handler(buffer2, received2)) != COMMAND_OK){
 8002e54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fe66 	bl	8002b30 <gpio_command_handler>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002e6a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d03c      	beq.n	8002eec <StartUdpServerTask+0x33c>
						UDP_SERVER_PRINTF("command_handler() returned error code = %d\n", (int)r);
 8002e72:	22d9      	movs	r2, #217	; 0xd9
 8002e74:	4912      	ldr	r1, [pc, #72]	; (8002ec0 <StartUdpServerTask+0x310>)
 8002e76:	4813      	ldr	r0, [pc, #76]	; (8002ec4 <StartUdpServerTask+0x314>)
 8002e78:	f01b fe58 	bl	801eb2c <iprintf>
 8002e7c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002e80:	4619      	mov	r1, r3
 8002e82:	4816      	ldr	r0, [pc, #88]	; (8002edc <StartUdpServerTask+0x32c>)
 8002e84:	f01b fe52 	bl	801eb2c <iprintf>
						if (sendto(socket2_fd, "error\n", sizeof("error\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client2_addr, addr2_len) == -1){
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <StartUdpServerTask+0x31c>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <StartUdpServerTask+0x328>)
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2308      	movs	r3, #8
 8002e98:	2207      	movs	r2, #7
 8002e9a:	4911      	ldr	r1, [pc, #68]	; (8002ee0 <StartUdpServerTask+0x330>)
 8002e9c:	f00b f9fa 	bl	800e294 <lwip_sendto>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	f47f aeb3 	bne.w	8002c10 <StartUdpServerTask+0x60>
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 8002eaa:	22db      	movs	r2, #219	; 0xdb
 8002eac:	4904      	ldr	r1, [pc, #16]	; (8002ec0 <StartUdpServerTask+0x310>)
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <StartUdpServerTask+0x314>)
 8002eb0:	f01b fe3c 	bl	801eb2c <iprintf>
 8002eb4:	480c      	ldr	r0, [pc, #48]	; (8002ee8 <StartUdpServerTask+0x338>)
 8002eb6:	f01b febf 	bl	801ec38 <puts>
 8002eba:	e6a9      	b.n	8002c10 <StartUdpServerTask+0x60>
 8002ebc:	20000314 	.word	0x20000314
 8002ec0:	080265cc 	.word	0x080265cc
 8002ec4:	08022448 	.word	0x08022448
 8002ec8:	080224e0 	.word	0x080224e0
 8002ecc:	20000328 	.word	0x20000328
 8002ed0:	08022500 	.word	0x08022500
 8002ed4:	20000304 	.word	0x20000304
 8002ed8:	20000318 	.word	0x20000318
 8002edc:	08022520 	.word	0x08022520
 8002ee0:	0802254c 	.word	0x0802254c
 8002ee4:	08022554 	.word	0x08022554
 8002ee8:	08022578 	.word	0x08022578
						}
					}
					else{

						UDP_SERVER_PRINTF("command was handles successfully\n");
 8002eec:	22e0      	movs	r2, #224	; 0xe0
 8002eee:	4916      	ldr	r1, [pc, #88]	; (8002f48 <StartUdpServerTask+0x398>)
 8002ef0:	4816      	ldr	r0, [pc, #88]	; (8002f4c <StartUdpServerTask+0x39c>)
 8002ef2:	f01b fe1b 	bl	801eb2c <iprintf>
 8002ef6:	4816      	ldr	r0, [pc, #88]	; (8002f50 <StartUdpServerTask+0x3a0>)
 8002ef8:	f01b fe9e 	bl	801ec38 <puts>
						if (sendto(socket2_fd, "OK\n", sizeof("OK\n"),  MSG_DONTWAIT, (const struct sockaddr *)&client2_addr, addr2_len) == -1){
 8002efc:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <StartUdpServerTask+0x3a4>)
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <StartUdpServerTask+0x3a8>)
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	4913      	ldr	r1, [pc, #76]	; (8002f5c <StartUdpServerTask+0x3ac>)
 8002f10:	f00b f9c0 	bl	800e294 <lwip_sendto>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	f47f ae79 	bne.w	8002c10 <StartUdpServerTask+0x60>
							UDP_SERVER_PRINTF("sendto() returned -1 \n");
 8002f1e:	22e2      	movs	r2, #226	; 0xe2
 8002f20:	4909      	ldr	r1, [pc, #36]	; (8002f48 <StartUdpServerTask+0x398>)
 8002f22:	480a      	ldr	r0, [pc, #40]	; (8002f4c <StartUdpServerTask+0x39c>)
 8002f24:	f01b fe02 	bl	801eb2c <iprintf>
 8002f28:	480d      	ldr	r0, [pc, #52]	; (8002f60 <StartUdpServerTask+0x3b0>)
 8002f2a:	f01b fe85 	bl	801ec38 <puts>
 8002f2e:	e66f      	b.n	8002c10 <StartUdpServerTask+0x60>
			}
			// TODO Check activity on the second socket descriptor, implement the handler
		}
		else
		{
			UDP_SERVER_PRINTF("No data within five seconds.\n");
 8002f30:	22ed      	movs	r2, #237	; 0xed
 8002f32:	4905      	ldr	r1, [pc, #20]	; (8002f48 <StartUdpServerTask+0x398>)
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <StartUdpServerTask+0x39c>)
 8002f36:	f01b fdf9 	bl	801eb2c <iprintf>
 8002f3a:	480a      	ldr	r0, [pc, #40]	; (8002f64 <StartUdpServerTask+0x3b4>)
 8002f3c:	f01b fe7c 	bl	801ec38 <puts>
	{
 8002f40:	e666      	b.n	8002c10 <StartUdpServerTask+0x60>
		}
	}
}
 8002f42:	37a8      	adds	r7, #168	; 0xa8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	080265cc 	.word	0x080265cc
 8002f4c:	08022448 	.word	0x08022448
 8002f50:	08022554 	.word	0x08022554
 8002f54:	20000328 	.word	0x20000328
 8002f58:	20000318 	.word	0x20000318
 8002f5c:	08022590 	.word	0x08022590
 8002f60:	08022578 	.word	0x08022578
 8002f64:	08022594 	.word	0x08022594

08002f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f6c:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f6e:	490e      	ldr	r1, [pc, #56]	; (8002fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f70:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f74:	e002      	b.n	8002f7c <LoopCopyDataInit>

08002f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f7a:	3304      	adds	r3, #4

08002f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f80:	d3f9      	bcc.n	8002f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f82:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f84:	4c0b      	ldr	r4, [pc, #44]	; (8002fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f88:	e001      	b.n	8002f8e <LoopFillZerobss>

08002f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f8c:	3204      	adds	r2, #4

08002f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f90:	d3fb      	bcc.n	8002f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f92:	f7ff fabf 	bl	8002514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f96:	f01b f83f 	bl	801e018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f9a:	f7fe f955 	bl	8001248 <main>
  bx  lr    
 8002f9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa8:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002fac:	08026c8c 	.word	0x08026c8c
  ldr r2, =_sbss
 8002fb0:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002fb4:	2001b12c 	.word	0x2001b12c

08002fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb8:	e7fe      	b.n	8002fb8 <ADC_IRQHandler>
	...

08002fbc <DWT_Init>:
#include "delay.h"

void DWT_Init(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <DWT_Init+0x2c>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <DWT_Init+0x2c>)
 8002fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fca:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <DWT_Init+0x30>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <DWT_Init+0x30>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a05      	ldr	r2, [pc, #20]	; (8002fec <DWT_Init+0x30>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]
}
 8002fde:	bf00      	nop
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000edf0 	.word	0xe000edf0
 8002fec:	e0001000 	.word	0xe0001000

08002ff0 <DWT_Delay>:

void DWT_Delay(uint32_t Delay)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	uint32_t cyclestamp = DWT->CYCCNT + Delay * (HAL_RCC_GetHCLKFreq() / 1000000);
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <DWT_Delay+0x3c>)
 8002ffa:	685c      	ldr	r4, [r3, #4]
 8002ffc:	f002 feac 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8003000:	4603      	mov	r3, r0
 8003002:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <DWT_Delay+0x40>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	0c9b      	lsrs	r3, r3, #18
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	4423      	add	r3, r4
 8003012:	60fb      	str	r3, [r7, #12]
	while (DWT->CYCCNT < cyclestamp) ;
 8003014:	bf00      	nop
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <DWT_Delay+0x3c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d8fa      	bhi.n	8003016 <DWT_Delay+0x26>
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	bf00      	nop
 800302c:	e0001000 	.word	0xe0001000
 8003030:	431bde83 	.word	0x431bde83

08003034 <DWT_GetCycles>:

uint32_t DWT_GetCycles()
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
	return DWT->CYCCNT;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <DWT_GetCycles+0x14>)
 800303a:	685b      	ldr	r3, [r3, #4]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e0001000 	.word	0xe0001000

0800304c <DWT_Cycles_to_us>:

uint8_t DWT_Cycles_to_us(uint32_t cycles)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	uint32_t clock_in_MHz = (HAL_RCC_GetHCLKFreq() / 1000000);
 8003054:	f002 fe80 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8003058:	4603      	mov	r3, r0
 800305a:	4a07      	ldr	r2, [pc, #28]	; (8003078 <DWT_Cycles_to_us+0x2c>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	0c9b      	lsrs	r3, r3, #18
 8003062:	60fb      	str	r3, [r7, #12]
	return (uint8_t)(cycles / clock_in_MHz);
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	b2db      	uxtb	r3, r3
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	431bde83 	.word	0x431bde83

0800307c <delay_us>:

void delay_us(uint32_t Delay)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	DWT_Delay(Delay);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ffb3 	bl	8002ff0 <DWT_Delay>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <delay_ms>:

void delay_ms(uint32_t Delay)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f001 fe1a 	bl	8004cd4 <HAL_Delay>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08c      	sub	sp, #48	; 0x30
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10e      	bne.n	80030d6 <BSP_LED_Init+0x2e>
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
 80030bc:	4b33      	ldr	r3, [pc, #204]	; (800318c <BSP_LED_Init+0xe4>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <BSP_LED_Init+0xe4>)
 80030c2:	f043 0308 	orr.w	r3, r3, #8
 80030c6:	6313      	str	r3, [r2, #48]	; 0x30
 80030c8:	4b30      	ldr	r3, [pc, #192]	; (800318c <BSP_LED_Init+0xe4>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	e034      	b.n	8003140 <BSP_LED_Init+0x98>
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10e      	bne.n	80030fa <BSP_LED_Init+0x52>
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <BSP_LED_Init+0xe4>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	4a29      	ldr	r2, [pc, #164]	; (800318c <BSP_LED_Init+0xe4>)
 80030e6:	f043 0308 	orr.w	r3, r3, #8
 80030ea:	6313      	str	r3, [r2, #48]	; 0x30
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <BSP_LED_Init+0xe4>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	e022      	b.n	8003140 <BSP_LED_Init+0x98>
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d10e      	bne.n	800311e <BSP_LED_Init+0x76>
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <BSP_LED_Init+0xe4>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	4a20      	ldr	r2, [pc, #128]	; (800318c <BSP_LED_Init+0xe4>)
 800310a:	f043 0308 	orr.w	r3, r3, #8
 800310e:	6313      	str	r3, [r2, #48]	; 0x30
 8003110:	4b1e      	ldr	r3, [pc, #120]	; (800318c <BSP_LED_Init+0xe4>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	e010      	b.n	8003140 <BSP_LED_Init+0x98>
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d10d      	bne.n	8003140 <BSP_LED_Init+0x98>
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	4b18      	ldr	r3, [pc, #96]	; (800318c <BSP_LED_Init+0xe4>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	4a17      	ldr	r2, [pc, #92]	; (800318c <BSP_LED_Init+0xe4>)
 800312e:	f043 0308 	orr.w	r3, r3, #8
 8003132:	6313      	str	r3, [r2, #48]	; 0x30
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <BSP_LED_Init+0xe4>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	4a13      	ldr	r2, [pc, #76]	; (8003190 <BSP_LED_Init+0xe8>)
 8003144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314a:	2301      	movs	r3, #1
 800314c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800314e:	2301      	movs	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003152:	2302      	movs	r3, #2
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <BSP_LED_Init+0xec>)
 800315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315e:	f107 021c 	add.w	r2, r7, #28
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f001 febb 	bl	8004ee0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	4a09      	ldr	r2, [pc, #36]	; (8003194 <BSP_LED_Init+0xec>)
 800316e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	4a06      	ldr	r2, [pc, #24]	; (8003190 <BSP_LED_Init+0xe8>)
 8003176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800317a:	2200      	movs	r2, #0
 800317c:	4619      	mov	r1, r3
 800317e:	f002 f95f 	bl	8005440 <HAL_GPIO_WritePin>
}
 8003182:	bf00      	nop
 8003184:	3730      	adds	r7, #48	; 0x30
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	080265e0 	.word	0x080265e0
 8003194:	20000028 	.word	0x20000028

08003198 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <BSP_LED_On+0x2c>)
 80031a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	4a06      	ldr	r2, [pc, #24]	; (80031c8 <BSP_LED_On+0x30>)
 80031ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031b2:	2201      	movs	r2, #1
 80031b4:	4619      	mov	r1, r3
 80031b6:	f002 f943 	bl	8005440 <HAL_GPIO_WritePin>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000028 	.word	0x20000028
 80031c8:	080265e0 	.word	0x080265e0

080031cc <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <BSP_LED_Off+0x2c>)
 80031da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	4a06      	ldr	r2, [pc, #24]	; (80031fc <BSP_LED_Off+0x30>)
 80031e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031e6:	2200      	movs	r2, #0
 80031e8:	4619      	mov	r1, r3
 80031ea:	f002 f929 	bl	8005440 <HAL_GPIO_WritePin>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000028 	.word	0x20000028
 80031fc:	080265e0 	.word	0x080265e0

08003200 <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <BSP_LED_Toggle+0x2c>)
 800320e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	4906      	ldr	r1, [pc, #24]	; (8003230 <BSP_LED_Toggle+0x30>)
 8003216:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f002 f928 	bl	8005472 <HAL_GPIO_TogglePin>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000028 	.word	0x20000028
 8003230:	080265e0 	.word	0x080265e0

08003234 <dht11_set_callbacks>:
				init_read_pin_t init_read_pin_func,
				init_write_pin_t init_write_pin_func,
				read_pin_t read_pin_func,
				write_pin_t write_pin_func
			)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
	if (cb == NULL
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d011      	beq.n	800326c <dht11_set_callbacks+0x38>
		|| us_delay_func == NULL
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00e      	beq.n	800326c <dht11_set_callbacks+0x38>
		|| ms_delay_func == NULL
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00b      	beq.n	800326c <dht11_set_callbacks+0x38>
		|| init_read_pin_func == NULL
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <dht11_set_callbacks+0x38>
		|| init_write_pin_func == NULL
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <dht11_set_callbacks+0x38>
		|| read_pin_func == NULL
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <dht11_set_callbacks+0x38>
		|| write_pin_func == NULL)
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <dht11_set_callbacks+0x3c>
	{
		return DHT_ERR_FAULT;
 800326c:	2301      	movs	r3, #1
 800326e:	e012      	b.n	8003296 <dht11_set_callbacks+0x62>
	}
	cb->callbacks.us_delay = us_delay_func;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	60da      	str	r2, [r3, #12]
	cb->callbacks.ms_delay = ms_delay_func;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	611a      	str	r2, [r3, #16]
	cb->callbacks.init_read_pin = init_read_pin_func;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	615a      	str	r2, [r3, #20]
	cb->callbacks.init_write_pin = init_write_pin_func;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	619a      	str	r2, [r3, #24]
	cb->callbacks.read_pin = read_pin_func;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	61da      	str	r2, [r3, #28]
	cb->callbacks.write_pin = write_pin_func;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	621a      	str	r2, [r3, #32]
	return DHT_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <dht11_init>:

dht_status_t dht11_init(dht11_t *cb, void *port, uint32_t pin)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
	if (cb == NULL || port == NULL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <dht11_init+0x18>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <dht11_init+0x1c>
	{
		return DHT_ERR_FAULT;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e030      	b.n	8003320 <dht11_init+0x7e>
	}
	cb->port = port;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	601a      	str	r2, [r3, #0]
	cb->pin = pin;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	605a      	str	r2, [r3, #4]

#if defined (STM32F407xx) && defined(USE_HAL_DRIVER)
	dht_status_t status = dht11_stm32_init(cb);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f9fe 	bl	80036cc <dht11_stm32_init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	75fb      	strb	r3, [r7, #23]
	if (status != DHT_OK)
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <dht11_init+0x3c>
	{
		return status;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	e020      	b.n	8003320 <dht11_init+0x7e>
	}
#endif

	/* If callbacks are not initialized */
	if (cb->callbacks.us_delay == NULL
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d013      	beq.n	800330e <dht11_init+0x6c>
		|| cb->callbacks.ms_delay == NULL
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00f      	beq.n	800330e <dht11_init+0x6c>
		|| cb->callbacks.init_read_pin == NULL
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <dht11_init+0x6c>
		|| cb->callbacks.init_write_pin == NULL
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <dht11_init+0x6c>
		|| cb->callbacks.read_pin == NULL
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <dht11_init+0x6c>
		|| cb->callbacks.write_pin == NULL)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <dht11_init+0x70>
	{
		return DHT_ERR_CALLBACKS;
 800330e:	2303      	movs	r3, #3
 8003310:	e006      	b.n	8003320 <dht11_init+0x7e>
	}
	/* If pin reading time is empty there will be default value */
	cb->delay += DHT11_READ_PIN_DFLT_DELAY_USEC;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	7a1b      	ldrb	r3, [r3, #8]
 8003316:	3301      	adds	r3, #1
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	721a      	strb	r2, [r3, #8]
	//printf("cb->delay = %u\n", cb->delay);
	return DHT_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <wait_while_status>:

static bool wait_while_status(dht11_t *cb, size_t timeout, bool init_status)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	71fb      	strb	r3, [r7, #7]
	size_t counter = timeout / cb->delay;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	7a1b      	ldrb	r3, [r3, #8]
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003342:	617b      	str	r3, [r7, #20]
	bool status = init_status;
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	74fb      	strb	r3, [r7, #19]
	do {
		cb->callbacks.us_delay(DHT11_READ_PIN_DFLT_DELAY_USEC);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2001      	movs	r0, #1
 800334e:	4798      	blx	r3
		status = cb->callbacks.read_pin (cb);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	4798      	blx	r3
 8003358:	4603      	mov	r3, r0
 800335a:	74fb      	strb	r3, [r7, #19]
	} while((status == init_status) && --counter);
 800335c:	7cfa      	ldrb	r2, [r7, #19]
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	429a      	cmp	r2, r3
 8003362:	d105      	bne.n	8003370 <wait_while_status+0x48>
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3b01      	subs	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1eb      	bne.n	8003348 <wait_while_status+0x20>
	return status;
 8003370:	7cfb      	ldrb	r3, [r7, #19]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <start_condition>:

/* The first DHT11's state is START CONDITION */
static inline bool start_condition (dht11_t *cb)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
	cb->callbacks.init_write_pin (cb);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
	cb->callbacks.write_pin (cb, false);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	2100      	movs	r1, #0
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
	cb->callbacks.ms_delay (DHT11_START_DELAY_MSEC);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2014      	movs	r0, #20
 800339a:	4798      	blx	r3
	cb->callbacks.write_pin (cb, true);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	2101      	movs	r1, #1
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
	cb->callbacks.init_read_pin (cb);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
	return (wait_while_status(cb, DHT11_START_WAIT_RESP_MAX_USEC, true) == false);
 80033ae:	2201      	movs	r2, #1
 80033b0:	2128      	movs	r1, #40	; 0x28
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffb8 	bl	8003328 <wait_while_status>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f083 0301 	eor.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	b2db      	uxtb	r3, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <read_acknowledge>:

/* The second DHT11's state is READ ACKNOWLEDGE */
static inline bool read_acknowledge (dht11_t *cb)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	wait_while_status(cb, DHT11_ACK_LOW_STATE_USEC, false);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2150      	movs	r1, #80	; 0x50
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff9f 	bl	8003328 <wait_while_status>
	return (wait_while_status(cb, DHT11_ACK_HIGHT_STATE_USEC, true) == false);
 80033ea:	2201      	movs	r2, #1
 80033ec:	2150      	movs	r1, #80	; 0x50
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ff9a 	bl	8003328 <wait_while_status>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f083 0301 	eor.w	r3, r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <read_data_byte>:

/* The third DHT11's state is READ DATA BYTES */
static inline bool read_data_byte (dht11_t *cb, uint8_t *data)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
	uint8_t received = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
	for(int i = 7 ; i >= 0; i--)
 8003422:	2307      	movs	r3, #7
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	e02b      	b.n	8003480 <read_data_byte+0x6c>
	{
		wait_while_status(cb, DHT11_DATA_START_USEC, false);
 8003428:	2200      	movs	r2, #0
 800342a:	2132      	movs	r1, #50	; 0x32
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff7b 	bl	8003328 <wait_while_status>
		if (wait_while_status(cb, DHT11_DATA_READ_LOW_MAX_USEC, true) == false)
 8003432:	2201      	movs	r2, #1
 8003434:	211c      	movs	r1, #28
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ff76 	bl	8003328 <wait_while_status>
 800343c:	4603      	mov	r3, r0
 800343e:	f083 0301 	eor.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d117      	bne.n	8003478 <read_data_byte+0x64>
		{
			continue;
		}
		if (wait_while_status(cb, DHT11_DATA_READ_HIGHT_USEC, true) == false)
 8003448:	2201      	movs	r2, #1
 800344a:	2146      	movs	r1, #70	; 0x46
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ff6b 	bl	8003328 <wait_while_status>
 8003452:	4603      	mov	r3, r0
 8003454:	f083 0301 	eor.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <read_data_byte+0x60>
		{
			received |= (1 << i);
 800345e:	2201      	movs	r2, #1
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	b25a      	sxtb	r2, r3
 8003468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346c:	4313      	orrs	r3, r2
 800346e:	b25b      	sxtb	r3, r3
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e002      	b.n	800347a <read_data_byte+0x66>
		}
		else
		{
			return false;
 8003474:	2300      	movs	r3, #0
 8003476:	e00a      	b.n	800348e <read_data_byte+0x7a>
			continue;
 8003478:	bf00      	nop
	for(int i = 7 ; i >= 0; i--)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3b01      	subs	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	dad0      	bge.n	8003428 <read_data_byte+0x14>
		}
	}
	*data = received;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	701a      	strb	r2, [r3, #0]
	return true;
 800348c:	2301      	movs	r3, #1
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <calc_crc>:

static uint8_t calc_crc(uint8_t *data)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 0; i < 4; i++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	e009      	b.n	80034bc <calc_crc+0x26>
	{
		crc += data[i];
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4413      	add	r3, r2
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	4413      	add	r3, r2
 80034b4:	73fb      	strb	r3, [r7, #15]
	for(size_t i = 0; i < 4; i++)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3301      	adds	r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d9f2      	bls.n	80034a8 <calc_crc+0x12>
	}
	return crc;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <dht11_read>:

dht_status_t dht11_read(dht11_t *cb, uint8_t *data, size_t size)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
	uint8_t response[DHT11_DATA_BYTES];
	if (cb == NULL
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <dht11_read+0x18>
		|| data == NULL)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <dht11_read+0x1c>
	{
		return DHT_ERR_FAULT;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e044      	b.n	8003576 <dht11_read+0xa6>
	}
	if (size < DHT11_DATA_SIZE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d801      	bhi.n	80034f6 <dht11_read+0x26>
	{
		return DHT_ERR_INVAL;
 80034f2:	2302      	movs	r3, #2
 80034f4:	e03f      	b.n	8003576 <dht11_read+0xa6>
	}
	if (!start_condition (cb))
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff ff3f 	bl	800337a <start_condition>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <dht11_read+0x3c>
	{
		return DHT_ERR_START_CONDITION;
 8003508:	2304      	movs	r3, #4
 800350a:	e034      	b.n	8003576 <dht11_read+0xa6>
	}
	if (!read_acknowledge (cb))
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff ff63 	bl	80033d8 <read_acknowledge>
 8003512:	4603      	mov	r3, r0
 8003514:	f083 0301 	eor.w	r3, r3, #1
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <dht11_read+0x52>
	{
		return DHT_ERR_READ_ACK;
 800351e:	2305      	movs	r3, #5
 8003520:	e029      	b.n	8003576 <dht11_read+0xa6>
	}
	for (size_t i = 0; i < DHT11_DATA_BYTES; i++)
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	e012      	b.n	800354e <dht11_read+0x7e>
	{
		if (!read_data_byte (cb, &response[i]))
 8003528:	f107 0214 	add.w	r2, r7, #20
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	4619      	mov	r1, r3
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ff6e 	bl	8003414 <read_data_byte>
 8003538:	4603      	mov	r3, r0
 800353a:	f083 0301 	eor.w	r3, r3, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <dht11_read+0x78>
		{
			return DHT_ERR_READ_DATA;
 8003544:	2306      	movs	r3, #6
 8003546:	e016      	b.n	8003576 <dht11_read+0xa6>
	for (size_t i = 0; i < DHT11_DATA_BYTES; i++)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d9e9      	bls.n	8003528 <dht11_read+0x58>
		}
	}
	uint8_t crc = calc_crc(response);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff9c 	bl	8003496 <calc_crc>
 800355e:	4603      	mov	r3, r0
 8003560:	76fb      	strb	r3, [r7, #27]
	if (crc != response[4])
 8003562:	7e3b      	ldrb	r3, [r7, #24]
 8003564:	7efa      	ldrb	r2, [r7, #27]
 8003566:	429a      	cmp	r2, r3
 8003568:	d001      	beq.n	800356e <dht11_read+0x9e>
	{
		return DHT_ERR_CRC;
 800356a:	2307      	movs	r3, #7
 800356c:	e003      	b.n	8003576 <dht11_read+0xa6>
 800356e:	697a      	ldr	r2, [r7, #20]
	}
	memcpy(data, response, DHT11_DATA_SIZE);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	601a      	str	r2, [r3, #0]
	return DHT_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <dht11_to_str>:

dht_status_t dht11_to_str(uint8_t *data, size_t size, char *humidity, char *temperature)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
	if (data == NULL)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <dht11_to_str+0x18>
	{
		return DHT_ERR_FAULT;
 8003594:	2301      	movs	r3, #1
 8003596:	e026      	b.n	80035e6 <dht11_to_str+0x66>
	}
	if (size < DHT11_DATA_SIZE)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d801      	bhi.n	80035a2 <dht11_to_str+0x22>
	{
		return DHT_ERR_INVAL;
 800359e:	2302      	movs	r3, #2
 80035a0:	e021      	b.n	80035e6 <dht11_to_str+0x66>
	}
	if (humidity)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00c      	beq.n	80035c2 <dht11_to_str+0x42>
		snprintf(humidity, DHT11_HUMIDITY_STR_SIZE, "%02u.%01u", data[0], data[1]);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3301      	adds	r3, #1
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <dht11_to_str+0x70>)
 80035ba:	2105      	movs	r1, #5
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f01b fbfd 	bl	801edbc <sniprintf>
	if (temperature)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00d      	beq.n	80035e4 <dht11_to_str+0x64>
		snprintf(temperature, DHT11_TEMPERATURE_STR_SIZE, "%02u.%01u", data[2], data[3]);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3302      	adds	r3, #2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3303      	adds	r3, #3
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4613      	mov	r3, r2
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <dht11_to_str+0x70>)
 80035dc:	2105      	movs	r1, #5
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	f01b fbec 	bl	801edbc <sniprintf>
	return DHT_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	080225b4 	.word	0x080225b4

080035f4 <HAL_init_read_pin>:
	uint32_t clock_in_MHz = (HAL_RCC_GetHCLKFreq() / 1000000);
	return (uint8_t)(cycles / clock_in_MHz);
}
#endif
static void HAL_init_read_pin(dht11_t *cb)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 030c 	add.w	r3, r7, #12
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = (uint16_t)cb->pin;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	b29b      	uxth	r3, r3
 8003612:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init((GPIO_TypeDef *)cb->port, &GPIO_InitStruct);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f107 020c 	add.w	r2, r7, #12
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fc5a 	bl	8004ee0 <HAL_GPIO_Init>
}
 800362c:	bf00      	nop
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_init_write_pin>:

static void HAL_init_write_pin(dht11_t *cb)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = (uint16_t)cb->pin;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	b29b      	uxth	r3, r3
 8003652:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003654:	2311      	movs	r3, #17
 8003656:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;//GPIO_SPEED_FREQ_LOW;
 800365c:	2302      	movs	r3, #2
 800365e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init((GPIO_TypeDef *)cb->port, &GPIO_InitStruct);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f107 020c 	add.w	r2, r7, #12
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fc38 	bl	8004ee0 <HAL_GPIO_Init>
}
 8003670:	bf00      	nop
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_read_pin>:

static bool HAL_read_pin(dht11_t *cb)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin((GPIO_TypeDef *)cb->port, (uint16_t)cb->pin) != GPIO_PIN_RESET);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	b29b      	uxth	r3, r3
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f001 febf 	bl	8005410 <HAL_GPIO_ReadPin>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_write_pin>:

static void HAL_write_pin(dht11_t *cb, bool state)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	460b      	mov	r3, r1
 80036b0:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin((GPIO_TypeDef *)cb->port, (uint16_t)cb->pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	4619      	mov	r1, r3
 80036c0:	f001 febe 	bl	8005440 <HAL_GPIO_WritePin>
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <dht11_stm32_init>:

dht_status_t dht11_stm32_init(dht11_t *cb)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af04      	add	r7, sp, #16
 80036d2:	6078      	str	r0, [r7, #4]
	/* Setup callbacks */
	dht_status_t status = dht11_set_callbacks(
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <dht11_stm32_init+0x7c>)
 80036d6:	9302      	str	r3, [sp, #8]
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <dht11_stm32_init+0x80>)
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <dht11_stm32_init+0x84>)
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <dht11_stm32_init+0x88>)
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <dht11_stm32_init+0x8c>)
 80036e4:	491d      	ldr	r1, [pc, #116]	; (800375c <dht11_stm32_init+0x90>)
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff fda4 	bl	8003234 <dht11_set_callbacks>
 80036ec:	4603      	mov	r3, r0
 80036ee:	73fb      	strb	r3, [r7, #15]
							HAL_init_read_pin,
							HAL_init_write_pin,
							HAL_read_pin,
							HAL_write_pin
						);
	if (status != DHT_OK)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <dht11_stm32_init+0x2e>
	{
		return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	e022      	b.n	8003740 <dht11_stm32_init+0x74>
	}
	/* Initialization of DWT module (cortex-m4)*/
	DWT_Init();
 80036fa:	f7ff fc5f 	bl	8002fbc <DWT_Init>
	cb->callbacks.init_read_pin (cb);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
	/* We are measuring of pin reading time in microseconds */
	uint32_t cycles = DWT_GetCycles();
 8003706:	f7ff fc95 	bl	8003034 <DWT_GetCycles>
 800370a:	60b8      	str	r0, [r7, #8]
	cb->callbacks.read_pin (cb);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3
	cb->delay = DWT_Cycles_to_us(DWT_GetCycles() - cycles);
 8003714:	f7ff fc8e 	bl	8003034 <DWT_GetCycles>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fc94 	bl	800304c <DWT_Cycles_to_us>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	721a      	strb	r2, [r3, #8]
	/* End of measuring */
	/* Keep line in hight state */
	cb->callbacks.init_write_pin (cb);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
	cb->callbacks.write_pin(cb, true);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	2101      	movs	r1, #1
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
	return DHT_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	080036a7 	.word	0x080036a7
 800374c:	08003679 	.word	0x08003679
 8003750:	08003635 	.word	0x08003635
 8003754:	080035f5 	.word	0x080035f5
 8003758:	08004cd5 	.word	0x08004cd5
 800375c:	08002ff1 	.word	0x08002ff1

08003760 <phy_bootstrap>:
#include <stdio.h>
#define RESET_ASSERT_DELAY_US   500UL
#define BOOTUP_DELAY_US         100UL

void phy_bootstrap()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003774:	2300      	movs	r3, #0
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <phy_bootstrap+0x90>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <phy_bootstrap+0x90>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6313      	str	r3, [r2, #48]	; 0x30
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <phy_bootstrap+0x90>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
	/* Initialization of DWT module (cortex-m4)*/
	DWT_Init();
 8003790:	f7ff fc14 	bl	8002fbc <DWT_Init>

	/*Configure GPIO pin : RMII_CSR_DV_PIN */
	GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003798:	2301      	movs	r3, #1
 800379a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a0:	2300      	movs	r3, #0
 80037a2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	4812      	ldr	r0, [pc, #72]	; (80037f4 <phy_bootstrap+0x94>)
 80037aa:	f001 fb99 	bl	8004ee0 <HAL_GPIO_Init>

    /* Reset PHY */
    HAL_GPIO_WritePin(RMII_PHY_RST_GPIO_Port, RMII_PHY_RST_Pin, GPIO_PIN_RESET);
 80037ae:	2200      	movs	r2, #0
 80037b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037b4:	4810      	ldr	r0, [pc, #64]	; (80037f8 <phy_bootstrap+0x98>)
 80037b6:	f001 fe43 	bl	8005440 <HAL_GPIO_WritePin>
    /* Set PHY address to 0x03 */
    HAL_GPIO_WritePin(RMII_CRS_DV_GPIO_Port, RMII_CRS_DV_Pin, GPIO_PIN_SET);
 80037ba:	2201      	movs	r2, #1
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	480d      	ldr	r0, [pc, #52]	; (80037f4 <phy_bootstrap+0x94>)
 80037c0:	f001 fe3e 	bl	8005440 <HAL_GPIO_WritePin>
    /* Reset pin should be asserted for minimum 500 us */
    delay_us(RESET_ASSERT_DELAY_US);
 80037c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037c8:	f7ff fc58 	bl	800307c <delay_us>
    /* Bootup PHY */
    HAL_GPIO_WritePin(RMII_PHY_RST_GPIO_Port, RMII_PHY_RST_Pin, GPIO_PIN_SET);
 80037cc:	2201      	movs	r2, #1
 80037ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037d2:	4809      	ldr	r0, [pc, #36]	; (80037f8 <phy_bootstrap+0x98>)
 80037d4:	f001 fe34 	bl	8005440 <HAL_GPIO_WritePin>
    /* Bootup delay should be minimum 100 us */
    delay_us(BOOTUP_DELAY_US);
 80037d8:	2064      	movs	r0, #100	; 0x64
 80037da:	f7ff fc4f 	bl	800307c <delay_us>

    HAL_GPIO_DeInit(RMII_CRS_DV_GPIO_Port, RMII_CRS_DV_Pin);
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	4804      	ldr	r0, [pc, #16]	; (80037f4 <phy_bootstrap+0x94>)
 80037e2:	f001 fd19 	bl	8005218 <HAL_GPIO_DeInit>
}
 80037e6:	bf00      	nop
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40020000 	.word	0x40020000
 80037f8:	40020c00 	.word	0x40020c00

080037fc <phy_init>:

void phy_init(ETH_HandleTypeDef *heth)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	// link up/down interrupt via RMII_PHY_INT pin
	uint32_t regval = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

    HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL2, &regval);
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	461a      	mov	r2, r3
 800380e:	211f      	movs	r1, #31
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fcd6 	bl	80041c2 <HAL_ETH_ReadPHYRegister>
    regval &= ~(PHY_INT_LEVEL_ACTIVE_MASK);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800381c:	60fb      	str	r3, [r7, #12]
    regval |= PHY_INT_LEVEL_ACTIVE_LOW;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	60fb      	str	r3, [r7, #12]
    HAL_ETH_WritePHYRegister(heth, PHY_CONTROL2, regval);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	461a      	mov	r2, r3
 8003826:	211f      	movs	r1, #31
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fd32 	bl	8004292 <HAL_ETH_WritePHYRegister>

    /* Read Register Configuration */
    HAL_ETH_ReadPHYRegister(heth, PHY_INTERRUPT_CONTROL, &regval);
 800382e:	f107 030c 	add.w	r3, r7, #12
 8003832:	461a      	mov	r2, r3
 8003834:	211b      	movs	r1, #27
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fcc3 	bl	80041c2 <HAL_ETH_ReadPHYRegister>

    regval |= (PHY_LINK_UP_INT_EN | PHY_LINK_DOWN_INT_EN);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8003842:	60fb      	str	r3, [r7, #12]

    /* Enable Interrupt on change of link status */
    HAL_ETH_WritePHYRegister(heth, PHY_INTERRUPT_CONTROL, regval);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	461a      	mov	r2, r3
 8003848:	211b      	movs	r1, #27
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fd21 	bl	8004292 <HAL_ETH_WritePHYRegister>
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_ETH_Autonegotiate>:
  @endverbatim
  * @{
  */
#ifdef KSZ8021RNL_PHY_ADDRESS
HAL_StatusTypeDef HAL_ETH_Autonegotiate(ETH_HandleTypeDef *heth)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
    uint32_t tickstart = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	74fb      	strb	r3, [r7, #19]

    if (heth == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_ETH_Autonegotiate+0x1e>
    {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e080      	b.n	8003978 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8003876:	f001 fa21 	bl	8004cbc <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    /* Wait while link bring up */
    do
    {
        status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_STATUS, &phyreg);
 800387c:	f107 030c 	add.w	r3, r7, #12
 8003880:	461a      	mov	r2, r3
 8003882:	2101      	movs	r1, #1
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fc9c 	bl	80041c2 <HAL_ETH_ReadPHYRegister>
 800388a:	4603      	mov	r3, r0
 800388c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800388e:	7cfb      	ldrb	r3, [r7, #19]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_ETH_Autonegotiate+0x40>
        {
            return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e06f      	b.n	8003978 <HAL_ETH_Autonegotiate+0x120>
        }

        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003898:	f001 fa10 	bl	8004cbc <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_ETH_Autonegotiate+0x56>
        {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e064      	b.n	8003978 <HAL_ETH_Autonegotiate+0x120>
        }
    } while (((phyreg & PHY_LINK_IS_UP) != PHY_LINK_IS_UP));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0e1      	beq.n	800387c <HAL_ETH_Autonegotiate+0x24>

    status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_CONTROL, &phyreg);
 80038b8:	f107 030c 	add.w	r3, r7, #12
 80038bc:	461a      	mov	r2, r3
 80038be:	2100      	movs	r1, #0
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fc7e 	bl	80041c2 <HAL_ETH_ReadPHYRegister>
 80038c6:	4603      	mov	r3, r0
 80038c8:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 80038ca:	7cfb      	ldrb	r3, [r7, #19]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_ETH_Autonegotiate+0x7c>
    {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e051      	b.n	8003978 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Enable end restart Auto-Negotiation */
    phyreg |= (PHY_AUTONEGOTIATION_ENABLE | PHY_RESTART_AUTONEGOTIATION);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 80038da:	60fb      	str	r3, [r7, #12]
    status = HAL_ETH_WritePHYRegister(heth, PHY_BASIC_CONTROL, PHY_AUTONEGOTIATION_ENABLE);
 80038dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038e0:	2100      	movs	r1, #0
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fcd5 	bl	8004292 <HAL_ETH_WritePHYRegister>
 80038e8:	4603      	mov	r3, r0
 80038ea:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_ETH_Autonegotiate+0x9e>
    {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e040      	b.n	8003978 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80038f6:	f001 f9e1 	bl	8004cbc <HAL_GetTick>
 80038fa:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation is completed */
    do
    {
        HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_STATUS, &phyreg);
 80038fc:	f107 030c 	add.w	r3, r7, #12
 8003900:	461a      	mov	r2, r3
 8003902:	2101      	movs	r1, #1
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fc5c 	bl	80041c2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800390a:	f001 f9d7 	bl	8004cbc <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	; 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_ETH_Autonegotiate+0xc8>
        {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e02b      	b.n	8003978 <HAL_ETH_Autonegotiate+0x120>
        }

    } while (((phyreg & PHY_AUTONEG_COMPLETE) != PHY_AUTONEG_COMPLETE));
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0e8      	beq.n	80038fc <HAL_ETH_Autonegotiate+0xa4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL1, &phyreg)) != HAL_OK)
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	461a      	mov	r2, r3
 8003930:	211e      	movs	r1, #30
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fc45 	bl	80041c2 <HAL_ETH_ReadPHYRegister>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_ETH_Autonegotiate+0xea>
    {
        /* In case of write timeout */
        return  HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e01a      	b.n	8003978 <HAL_ETH_Autonegotiate+0x120>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if (phyreg & PHY_FULL_DUPLEX)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <HAL_ETH_Autonegotiate+0xfe>
    {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	e002      	b.n	800395c <HAL_ETH_Autonegotiate+0x104>
    }
    else
    {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if (phyreg & PHY_SPEED_10BASE_T)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_ETH_Autonegotiate+0x116>
    {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        (heth->Init).Speed = ETH_SPEED_10M;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	e003      	b.n	8003976 <HAL_ETH_Autonegotiate+0x11e>
    }
    else
    {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        (heth->Init).Speed = ETH_SPEED_100M;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003974:	609a      	str	r2, [r3, #8]
    }

    return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_ETH_SetSpeedDuplex>:

HAL_StatusTypeDef HAL_ETH_SetSpeedDuplex(ETH_HandleTypeDef *heth)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60bb      	str	r3, [r7, #8]
    HAL_StatusTypeDef status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]

    if (heth == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_ETH_SetSpeedDuplex+0x1a>
    {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e037      	b.n	8003a0a <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    status = HAL_ETH_ReadPHYRegister(heth, PHY_BASIC_CONTROL, &phyreg);
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	461a      	mov	r2, r3
 80039a0:	2100      	movs	r1, #0
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fc0d 	bl	80041c2 <HAL_ETH_ReadPHYRegister>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_ETH_SetSpeedDuplex+0x36>
    {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e029      	b.n	8003a0a <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    phyreg &= ~(PHY_SPEED_MASK | PHY_DUPLEX_MASK);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f423 5304 	bic.w	r3, r3, #8448	; 0x2100
 80039bc:	60bb      	str	r3, [r7, #8]
    /* Set MAC Speed and Duplex Mode */
    if (heth->Init.Speed == ETH_SPEED_100M)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c6:	d104      	bne.n	80039d2 <HAL_ETH_SetSpeedDuplex+0x52>
    {
        phyreg |= PHY_SPEED_100M;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	e001      	b.n	80039d6 <HAL_ETH_SetSpeedDuplex+0x56>
    }
    else
    {
        phyreg |= PHY_SPEED_10M;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	60bb      	str	r3, [r7, #8]
    }

    if (heth->Init.DuplexMode == ETH_MODE_FULLDUPLEX)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039de:	d104      	bne.n	80039ea <HAL_ETH_SetSpeedDuplex+0x6a>
    {
        phyreg |= PHY_DUPLEX_FULL;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	e001      	b.n	80039ee <HAL_ETH_SetSpeedDuplex+0x6e>
    }
    else
    {
        phyreg |= PHY_DUPLEX_HALF;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	60bb      	str	r3, [r7, #8]
    }

    status = HAL_ETH_WritePHYRegister(heth, PHY_BASIC_CONTROL, phyreg);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	461a      	mov	r2, r3
 80039f2:	2100      	movs	r1, #0
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fc4c 	bl	8004292 <HAL_ETH_WritePHYRegister>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_ETH_SetSpeedDuplex+0x88>
    {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_ETH_SetSpeedDuplex+0x8a>
    }

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
    uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
    uint32_t hclk = 60000000U;
 8003a24:	4b7e      	ldr	r3, [pc, #504]	; (8003c20 <HAL_ETH_Init+0x20c>)
 8003a26:	61bb      	str	r3, [r7, #24]
    uint32_t tickstart = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
    uint32_t err = ETH_SUCCESS;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]
    HAL_StatusTypeDef status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	74fb      	strb	r3, [r7, #19]
    HAL_StatusTypeDef retval = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	77fb      	strb	r3, [r7, #31]

    /* Check the ETH peripheral state */
    if (heth == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_ETH_Init+0x2e>
    {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0e9      	b.n	8003c16 <HAL_ETH_Init+0x202>
    assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
    assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
    assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
    assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

    if (heth->State == HAL_ETH_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_ETH_Init+0x48>
    {
        /* Allocate lock resource and initialize it */
        heth->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            heth->MspInitCallback = HAL_ETH_MspInit;
        }
        heth->MspInitCallback(heth);
#else
        /* Init the low level hardware : GPIO, CLOCK, NVIC. */
        HAL_ETH_MspInit(heth);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f003 f9a8 	bl	8006dac <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }

    /* Enable SYSCFG Clock */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_ETH_Init+0x210>)
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	4a6f      	ldr	r2, [pc, #444]	; (8003c24 <HAL_ETH_Init+0x210>)
 8003a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a6a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6c:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <HAL_ETH_Init+0x210>)
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]

    /* Select MII or RMII Mode*/
    SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a78:	4b6b      	ldr	r3, [pc, #428]	; (8003c28 <HAL_ETH_Init+0x214>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4a6a      	ldr	r2, [pc, #424]	; (8003c28 <HAL_ETH_Init+0x214>)
 8003a7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a82:	6053      	str	r3, [r2, #4]
    SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_ETH_Init+0x214>)
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4966      	ldr	r1, [pc, #408]	; (8003c28 <HAL_ETH_Init+0x214>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]

    /*-------------------------------- MAC Initialization ----------------------*/
    /* Get the ETHERNET MACMIIAR value */
    tmpreg1 = (heth->Instance)->MACMIIAR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear CSR Clock Range CR[2:0] bits */
    tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	f023 031c 	bic.w	r3, r3, #28
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get hclk frequency value */
    hclk = HAL_RCC_GetHCLKFreq();
 8003aa2:	f002 f959 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8003aa6:	61b8      	str	r0, [r7, #24]

    /* Set CR bits depending on hclk value */
    if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	4a60      	ldr	r2, [pc, #384]	; (8003c2c <HAL_ETH_Init+0x218>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d908      	bls.n	8003ac2 <HAL_ETH_Init+0xae>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	4a5f      	ldr	r2, [pc, #380]	; (8003c30 <HAL_ETH_Init+0x21c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d804      	bhi.n	8003ac2 <HAL_ETH_Init+0xae>
    {
        /* CSR Clock Range between 20-35 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	f043 0308 	orr.w	r3, r3, #8
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac0:	e027      	b.n	8003b12 <HAL_ETH_Init+0xfe>
    }
    else if((hclk >= 35000000U) && (hclk < 60000000U))
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	4a5a      	ldr	r2, [pc, #360]	; (8003c30 <HAL_ETH_Init+0x21c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d908      	bls.n	8003adc <HAL_ETH_Init+0xc8>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	4a54      	ldr	r2, [pc, #336]	; (8003c20 <HAL_ETH_Init+0x20c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d204      	bcs.n	8003adc <HAL_ETH_Init+0xc8>
    {
        /* CSR Clock Range between 35-60 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	f043 030c 	orr.w	r3, r3, #12
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	e01a      	b.n	8003b12 <HAL_ETH_Init+0xfe>
    }
    else if((hclk >= 60000000U) && (hclk < 100000000U))
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	4a50      	ldr	r2, [pc, #320]	; (8003c20 <HAL_ETH_Init+0x20c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d303      	bcc.n	8003aec <HAL_ETH_Init+0xd8>
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_ETH_Init+0x220>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d911      	bls.n	8003b10 <HAL_ETH_Init+0xfc>
    {
        /* CSR Clock Range between 60-100 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
    }
    else if((hclk >= 100000000U) && (hclk < 150000000U))
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	4a51      	ldr	r2, [pc, #324]	; (8003c34 <HAL_ETH_Init+0x220>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d908      	bls.n	8003b06 <HAL_ETH_Init+0xf2>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4a50      	ldr	r2, [pc, #320]	; (8003c38 <HAL_ETH_Init+0x224>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d804      	bhi.n	8003b06 <HAL_ETH_Init+0xf2>
    {
        /* CSR Clock Range between 100-150 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
 8003b04:	e005      	b.n	8003b12 <HAL_ETH_Init+0xfe>
    }
    else /* ((hclk >= 150000000) && (hclk <= 183000000)) */
    {
        /* CSR Clock Range between 150-183 MHz */
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f043 0310 	orr.w	r3, r3, #16
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0e:	e000      	b.n	8003b12 <HAL_ETH_Init+0xfe>
        tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003b10:	bf00      	nop
    }

    /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
    (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	611a      	str	r2, [r3, #16]

    status = HAL_ETH_ReadPHYRegister(heth, PHY_CONTROL2, &phyreg);
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	461a      	mov	r2, r3
 8003b20:	211f      	movs	r1, #31
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fb4d 	bl	80041c2 <HAL_ETH_ReadPHYRegister>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_ETH_Init+0x122>
    {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e06f      	b.n	8003c16 <HAL_ETH_Init+0x202>
    /* Set 25MHz clock mode to enable 50 MHz clock on REF_CLK pin
     * Note: After default bootstrap KSZ8081RND has 50MHz clock mode set
     *       thus REF_CLK pin is not connected and MAC module is
     *       not clocking. So bit ETH_DMABMR_SR in DMABMR register
     *       of MAC subsystem will never cleared */
    phyreg &= ~(PHY_REF_CLOCK_SELECT_MASK);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3c:	60fb      	str	r3, [r7, #12]
    phyreg |= (PHY_REF_CLOCK_SELECT_25MHZ);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b44:	60fb      	str	r3, [r7, #12]
    status = HAL_ETH_WritePHYRegister(heth, PHY_CONTROL2, phyreg);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	211f      	movs	r1, #31
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fba0 	bl	8004292 <HAL_ETH_WritePHYRegister>
 8003b52:	4603      	mov	r3, r0
 8003b54:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK)
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_ETH_Init+0x14c>
    {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e05a      	b.n	8003c16 <HAL_ETH_Init+0x202>
    }

    /* Ethernet Software reset */
    /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
    /* After reset all the registers holds their respective reset values */
    (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b78:	f001 f8a0 	bl	8004cbc <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

    /* Wait for software reset */
    while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003b7e:	e011      	b.n	8003ba4 <HAL_ETH_Init+0x190>
    {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003b80:	f001 f89c 	bl	8004cbc <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b8e:	d909      	bls.n	8003ba4 <HAL_ETH_Init+0x190>
        {
            heth->State = HAL_ETH_STATE_TIMEOUT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2203      	movs	r2, #3
 8003b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(heth);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
                not available, please check your external PHY or the IO configuration */
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e038      	b.n	8003c16 <HAL_ETH_Init+0x202>
    while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e4      	bne.n	8003b80 <HAL_ETH_Init+0x16c>
        }
    }

    /*-------------------- PHY initialization and configuration ----------------*/
    if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00f      	beq.n	8003bde <HAL_ETH_Init+0x1ca>
    {
        status = HAL_ETH_Autonegotiate(heth);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fe4a 	bl	8003858 <HAL_ETH_Autonegotiate>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <HAL_ETH_Init+0x1c4>
        {
            err = ETH_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	623b      	str	r3, [r7, #32]
            retval = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	77fb      	strb	r3, [r7, #31]
            goto init_final_stage;
 8003bd6:	e011      	b.n	8003bfc <HAL_ETH_Init+0x1e8>
        }
        else
        {
            retval = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e00e      	b.n	8003bfc <HAL_ETH_Init+0x1e8>
    {
        /* Check parameters */
        assert_param(IS_ETH_SPEED(heth->Init.Speed));
        assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

        status = HAL_ETH_SetSpeedDuplex(heth);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fece 	bl	8003980 <HAL_ETH_SetSpeedDuplex>
 8003be4:	4603      	mov	r3, r0
 8003be6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <HAL_ETH_Init+0x1e4>
        {
            err = ETH_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	623b      	str	r3, [r7, #32]
            retval = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	77fb      	strb	r3, [r7, #31]
            goto init_final_stage;
 8003bf6:	e001      	b.n	8003bfc <HAL_ETH_Init+0x1e8>
        }
        else
        {
            retval = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	77fb      	strb	r3, [r7, #31]
        }
    }

init_final_stage:
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003bfc:	6a39      	ldr	r1, [r7, #32]
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fd06 	bl	8004610 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Return function status */
    return retval;
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	03938700 	.word	0x03938700
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	01312cff 	.word	0x01312cff
 8003c30:	02160ebf 	.word	0x02160ebf
 8003c34:	05f5e0ff 	.word	0x05f5e0ff
 8003c38:	08f0d17f 	.word	0x08f0d17f

08003c3c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_ETH_DMATxDescListInit+0x20>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e052      	b.n	8003d02 <HAL_ETH_DMATxDescListInit+0xc6>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e030      	b.n	8003cda <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	015b      	lsls	r3, r3, #5
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	4413      	add	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c88:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4413      	add	r3, r2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d208      	bcs.n	8003cce <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	015b      	lsls	r3, r3, #5
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	e002      	b.n	8003cd4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3ca      	bcc.n	8003c78 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cec:	3310      	adds	r3, #16
 8003cee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b087      	sub	sp, #28
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_ETH_DMARxDescListInit+0x20>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e056      	b.n	8003ddc <HAL_ETH_DMARxDescListInit+0xce>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e034      	b.n	8003db4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	015b      	lsls	r3, r3, #5
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4413      	add	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d5a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003d62:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	461a      	mov	r2, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d208      	bcs.n	8003da8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	015b      	lsls	r3, r3, #5
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	4413      	add	r3, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	e002      	b.n	8003dae <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	3301      	adds	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d3c6      	bcc.n	8003d4a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_ETH_TransmitFrame+0x24>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e0cd      	b.n	8003fa8 <HAL_ETH_TransmitFrame+0x1c0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003e32:	2301      	movs	r3, #1
 8003e34:	e0b8      	b.n	8003fa8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da09      	bge.n	8003e54 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2212      	movs	r2, #18
 8003e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0a9      	b.n	8003fa8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d915      	bls.n	8003e8a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	4a54      	ldr	r2, [pc, #336]	; (8003fb4 <HAL_ETH_TransmitFrame+0x1cc>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	0a9b      	lsrs	r3, r3, #10
 8003e68:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	4b51      	ldr	r3, [pc, #324]	; (8003fb4 <HAL_ETH_TransmitFrame+0x1cc>)
 8003e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e72:	0a9b      	lsrs	r3, r3, #10
 8003e74:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3301      	adds	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e001      	b.n	8003e8e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d11c      	bne.n	8003ece <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003ea2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003eae:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ebe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ecc:	e04b      	b.n	8003f66 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	e044      	b.n	8003f5e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ee2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d107      	bne.n	8003efa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ef8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003f02:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d116      	bne.n	8003f3c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f1c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	4a25      	ldr	r2, [pc, #148]	; (8003fb8 <HAL_ETH_TransmitFrame+0x1d0>)
 8003f22:	fb02 f203 	mul.w	r2, r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003f2e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003f3a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f4a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	461a      	mov	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d3b6      	bcc.n	8003ed4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6e:	3314      	adds	r3, #20
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f82:	3314      	adds	r3, #20
 8003f84:	2204      	movs	r2, #4
 8003f86:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f90:	3304      	adds	r3, #4
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	ac02b00b 	.word	0xac02b00b
 8003fb8:	fffffa0c 	.word	0xfffffa0c

08003fbc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e074      	b.n	80040c0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003fe6:	e05a      	b.n	800409e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffc:	d10d      	bne.n	800401a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
 8004018:	e041      	b.n	800409e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	461a      	mov	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	629a      	str	r2, [r3, #40]	; 0x28
 800403e:	e02e      	b.n	800409e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	2b01      	cmp	r3, #1
 8004058:	d103      	bne.n	8004062 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800406e:	1f1a      	subs	r2, r3, #4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e010      	b.n	80040c0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	db02      	blt.n	80040ae <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d99c      	bls.n	8003fe8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040dc:	3314      	adds	r3, #20
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d112      	bne.n	800410e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f002 ff0d 	bl	8006f08 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f6:	3314      	adds	r3, #20
 80040f8:	2240      	movs	r2, #64	; 0x40
 80040fa:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800410c:	e01b      	b.n	8004146 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004116:	3314      	adds	r3, #20
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d111      	bne.n	8004146 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f839 	bl	800419a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004130:	3314      	adds	r3, #20
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414e:	3314      	adds	r3, #20
 8004150:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004154:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415e:	3314      	adds	r3, #20
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416a:	d112      	bne.n	8004192 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f81e 	bl	80041ae <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417a:	3314      	adds	r3, #20
 800417c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004180:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	460b      	mov	r3, r1
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b82      	cmp	r3, #130	; 0x82
 80041e2:	d101      	bne.n	80041e8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80041e4:	2302      	movs	r3, #2
 80041e6:	e050      	b.n	800428a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2282      	movs	r2, #130	; 0x82
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f003 031c 	and.w	r3, r3, #28
 80041fe:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8a1b      	ldrh	r3, [r3, #16]
 8004204:	02db      	lsls	r3, r3, #11
 8004206:	b29b      	uxth	r3, r3
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800420e:	897b      	ldrh	r3, [r7, #10]
 8004210:	019b      	lsls	r3, r3, #6
 8004212:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0302 	bic.w	r3, r3, #2
 8004222:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004234:	f000 fd42 	bl	8004cbc <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800423a:	e015      	b.n	8004268 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800423c:	f000 fd3e 	bl	8004cbc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424a:	d309      	bcc.n	8004260 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e014      	b.n	800428a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e4      	bne.n	800423c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	b29b      	uxth	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	460b      	mov	r3, r1
 800429c:	607a      	str	r2, [r7, #4]
 800429e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b42      	cmp	r3, #66	; 0x42
 80042b2:	d101      	bne.n	80042b8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
 80042b6:	e04e      	b.n	8004356 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2242      	movs	r2, #66	; 0x42
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f003 031c 	and.w	r3, r3, #28
 80042ce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8a1b      	ldrh	r3, [r3, #16]
 80042d4:	02db      	lsls	r3, r3, #11
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800430e:	f000 fcd5 	bl	8004cbc <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004314:	e015      	b.n	8004342 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004316:	f000 fcd1 	bl	8004cbc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d309      	bcc.n	800433a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e00d      	b.n	8004356 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e4      	bne.n	8004316 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_ETH_Start+0x16>
 8004370:	2302      	movs	r3, #2
 8004372:	e01f      	b.n	80043b4 <HAL_ETH_Start+0x56>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fb45 	bl	8004a14 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb7c 	bl	8004a88 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fc13 	bl	8004bbc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fbb0 	bl	8004afc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fbdd 	bl	8004b5c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_ETH_Stop+0x16>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e01f      	b.n	8004412 <HAL_ETH_Stop+0x56>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fba2 	bl	8004b2c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fbcf 	bl	8004b8c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fb67 	bl	8004ac2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fbe1 	bl	8004bbc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fb27 	bl	8004a4e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_ETH_ConfigMAC+0x1c>
 8004434:	2302      	movs	r3, #2
 8004436:	e0e4      	b.n	8004602 <HAL_ETH_ConfigMAC+0x1e6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80b1 	beq.w	80045b2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4b6c      	ldr	r3, [pc, #432]	; (800460c <HAL_ETH_ConfigMAC+0x1f0>)
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004468:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800446e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004474:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800447a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004480:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004486:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800448c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004492:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004498:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800449e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80044a4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80044aa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044c2:	2001      	movs	r0, #1
 80044c4:	f000 fc06 	bl	8004cd4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80044d8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80044de:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80044e4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80044ea:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80044f0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80044f6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004502:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004504:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800450e:	2001      	movs	r0, #1
 8004510:	f000 fbe0 	bl	8004cd4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004524:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800452e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800453e:	4013      	ands	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800454c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004552:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004558:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800455e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004564:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800457c:	2001      	movs	r0, #1
 800457e:	f000 fba9 	bl	8004cd4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80045a2:	2001      	movs	r0, #1
 80045a4:	f000 fb96 	bl	8004cd4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	61da      	str	r2, [r3, #28]
 80045b0:	e01e      	b.n	80045f0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80045c0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80045e2:	2001      	movs	r0, #1
 80045e4:	f000 fb76 	bl	8004cd4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	ff20810f 	.word	0xff20810f

08004610 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b0b0      	sub	sp, #192	; 0xc0
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800462c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004634:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004636:	2300      	movs	r3, #0
 8004638:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800463a:	2300      	movs	r3, #0
 800463c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800463e:	2300      	movs	r3, #0
 8004640:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004642:	2300      	movs	r3, #0
 8004644:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004646:	2300      	movs	r3, #0
 8004648:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800464a:	2300      	movs	r3, #0
 800464c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465a:	663b      	str	r3, [r7, #96]	; 0x60
 800465c:	e001      	b.n	8004662 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800465e:	2300      	movs	r3, #0
 8004660:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004666:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004668:	2300      	movs	r3, #0
 800466a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800466c:	2300      	movs	r3, #0
 800466e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004670:	2300      	movs	r3, #0
 8004672:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004674:	2300      	movs	r3, #0
 8004676:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004678:	2300      	movs	r3, #0
 800467a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800467c:	2340      	movs	r3, #64	; 0x40
 800467e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004686:	2300      	movs	r3, #0
 8004688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004692:	2300      	movs	r3, #0
 8004694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004698:	2300      	movs	r3, #0
 800469a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80046bc:	2300      	movs	r3, #0
 80046be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80046e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80046e8:	4bac      	ldr	r3, [pc, #688]	; (800499c <ETH_MACDMAConfig+0x38c>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80046f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80046f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80046f4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80046f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80046f8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80046fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80046fc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004702:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004706:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800470a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004710:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004714:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004718:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800471a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800471c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004720:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004724:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004726:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004738:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004744:	2001      	movs	r0, #1
 8004746:	f000 fac5 	bl	8004cd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004752:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004754:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004758:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800475a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800475c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800475e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004762:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004768:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800476a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800476e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004774:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004778:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004780:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004782:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800478e:	2001      	movs	r0, #1
 8004790:	f000 faa0 	bl	8004cd4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800479c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047a6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80047b0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80047bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047c0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80047c4:	4013      	ands	r3, r2
 80047c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80047ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047ce:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80047d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80047d4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80047d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80047da:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80047dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80047e0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80047e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80047e6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80047e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80047ec:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80047ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004800:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800480c:	2001      	movs	r0, #1
 800480e:	f000 fa61 	bl	8004cd4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800481a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800481c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004820:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004836:	2001      	movs	r0, #1
 8004838:	f000 fa4c 	bl	8004cd4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004844:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800484a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800484e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004854:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004858:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004862:	2300      	movs	r3, #0
 8004864:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800486a:	2304      	movs	r3, #4
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800486e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004878:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800487a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004884:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800488a:	2300      	movs	r3, #0
 800488c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800488e:	2300      	movs	r3, #0
 8004890:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489a:	3318      	adds	r3, #24
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80048a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048a6:	4b3e      	ldr	r3, [pc, #248]	; (80049a0 <ETH_MACDMAConfig+0x390>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80048ae:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80048b0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80048b2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80048b4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80048b6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80048b8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80048ba:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80048bc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80048be:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80048c0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80048c2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80048c4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80048c6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80048ca:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80048ce:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80048d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	3318      	adds	r3, #24
 80048e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048e8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f2:	3318      	adds	r3, #24
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048fa:	2001      	movs	r0, #1
 80048fc:	f000 f9ea 	bl	8004cd4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004908:	3318      	adds	r3, #24
 800490a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800490e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004914:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004918:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800491c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800491e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004920:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004924:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004926:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800492a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004938:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004948:	2001      	movs	r0, #1
 800494a:	f000 f9c3 	bl	8004cd4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004956:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800495a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d10f      	bne.n	8004984 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496c:	331c      	adds	r3, #28
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800497c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004980:	331c      	adds	r3, #28
 8004982:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	461a      	mov	r2, r3
 800498a:	2100      	movs	r1, #0
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f809 	bl	80049a4 <ETH_MACAddressConfig>
}
 8004992:	bf00      	nop
 8004994:	37c0      	adds	r7, #192	; 0xc0
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	ff20810f 	.word	0xff20810f
 80049a0:	f8de3f23 	.word	0xf8de3f23

080049a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3305      	adds	r3, #5
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	3204      	adds	r2, #4
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <ETH_MACAddressConfig+0x68>)
 80049c6:	4413      	add	r3, r2
 80049c8:	461a      	mov	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3303      	adds	r3, #3
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	061a      	lsls	r2, r3, #24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3302      	adds	r3, #2
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3301      	adds	r3, #1
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	4313      	orrs	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <ETH_MACAddressConfig+0x6c>)
 80049f6:	4413      	add	r3, r2
 80049f8:	461a      	mov	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	6013      	str	r3, [r2, #0]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40028040 	.word	0x40028040
 8004a10:	40028044 	.word	0x40028044

08004a14 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0208 	orr.w	r2, r2, #8
 8004a2e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f000 f8e9 	bl	8004c10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0208 	bic.w	r2, r2, #8
 8004a68:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a72:	2001      	movs	r0, #1
 8004a74:	f000 f8cc 	bl	8004c10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	601a      	str	r2, [r3, #0]
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0204 	orr.w	r2, r2, #4
 8004aa2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004aac:	2001      	movs	r0, #1
 8004aae:	f000 f8af 	bl	8004c10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0204 	bic.w	r2, r2, #4
 8004adc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f000 f892 	bl	8004c10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0c:	3318      	adds	r3, #24
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1c:	3318      	adds	r3, #24
 8004b1e:	601a      	str	r2, [r3, #0]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3c:	3318      	adds	r3, #24
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	601a      	str	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b6c:	3318      	adds	r3, #24
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0202 	orr.w	r2, r2, #2
 8004b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7c:	3318      	adds	r3, #24
 8004b7e:	601a      	str	r2, [r3, #0]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9c:	3318      	adds	r3, #24
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0202 	bic.w	r2, r2, #2
 8004ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bac:	3318      	adds	r3, #24
 8004bae:	601a      	str	r2, [r3, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd0:	3318      	adds	r3, #24
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	3318      	adds	r3, #24
 8004be2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bec:	3318      	adds	r3, #24
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	f000 f80c 	bl	8004c10 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c02:	3318      	adds	r3, #24
 8004c04:	601a      	str	r2, [r3, #0]
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <ETH_Delay+0x38>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <ETH_Delay+0x3c>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0a5b      	lsrs	r3, r3, #9
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004c2c:	bf00      	nop
  } 
  while (Delay --);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1e5a      	subs	r2, r3, #1
 8004c32:	60fa      	str	r2, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f9      	bne.n	8004c2c <ETH_Delay+0x1c>
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000010 	.word	0x20000010
 8004c4c:	10624dd3 	.word	0x10624dd3

08004c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <HAL_Init+0x40>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <HAL_Init+0x40>)
 8004c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_Init+0x40>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <HAL_Init+0x40>)
 8004c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_Init+0x40>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <HAL_Init+0x40>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c78:	2003      	movs	r0, #3
 8004c7a:	f000 f8fc 	bl	8004e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f7fd faea 	bl	8002258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c84:	f7fd fa74 	bl	8002170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023c00 	.word	0x40023c00

08004c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <HAL_IncTick+0x20>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <HAL_IncTick+0x24>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	4a04      	ldr	r2, [pc, #16]	; (8004cb8 <HAL_IncTick+0x24>)
 8004ca6:	6013      	str	r3, [r2, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	2000003c 	.word	0x2000003c
 8004cb8:	20014554 	.word	0x20014554

08004cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <HAL_GetTick+0x14>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20014554 	.word	0x20014554

08004cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cdc:	f7ff ffee 	bl	8004cbc <HAL_GetTick>
 8004ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d005      	beq.n	8004cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <HAL_Delay+0x44>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cfa:	bf00      	nop
 8004cfc:	f7ff ffde 	bl	8004cbc <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d8f7      	bhi.n	8004cfc <HAL_Delay+0x28>
  {
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2000003c 	.word	0x2000003c

08004d1c <__NVIC_SetPriorityGrouping>:
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d4e:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <__NVIC_SetPriorityGrouping+0x44>)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	60d3      	str	r3, [r2, #12]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <__NVIC_GetPriorityGrouping+0x18>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	0a1b      	lsrs	r3, r3, #8
 8004d6e:	f003 0307 	and.w	r3, r3, #7
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	e000ed00 	.word	0xe000ed00

08004d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	db0b      	blt.n	8004daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	f003 021f 	and.w	r2, r3, #31
 8004d98:	4907      	ldr	r1, [pc, #28]	; (8004db8 <__NVIC_EnableIRQ+0x38>)
 8004d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2001      	movs	r0, #1
 8004da2:	fa00 f202 	lsl.w	r2, r0, r2
 8004da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	e000e100 	.word	0xe000e100

08004dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	6039      	str	r1, [r7, #0]
 8004dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	db0a      	blt.n	8004de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	490c      	ldr	r1, [pc, #48]	; (8004e08 <__NVIC_SetPriority+0x4c>)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	0112      	lsls	r2, r2, #4
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	440b      	add	r3, r1
 8004de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004de4:	e00a      	b.n	8004dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4908      	ldr	r1, [pc, #32]	; (8004e0c <__NVIC_SetPriority+0x50>)
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	3b04      	subs	r3, #4
 8004df4:	0112      	lsls	r2, r2, #4
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	440b      	add	r3, r1
 8004dfa:	761a      	strb	r2, [r3, #24]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	e000e100 	.word	0xe000e100
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f1c3 0307 	rsb	r3, r3, #7
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	bf28      	it	cs
 8004e2e:	2304      	movcs	r3, #4
 8004e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2b06      	cmp	r3, #6
 8004e38:	d902      	bls.n	8004e40 <NVIC_EncodePriority+0x30>
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3b03      	subs	r3, #3
 8004e3e:	e000      	b.n	8004e42 <NVIC_EncodePriority+0x32>
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	401a      	ands	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e58:	f04f 31ff 	mov.w	r1, #4294967295
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	43d9      	mvns	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e68:	4313      	orrs	r3, r2
         );
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3724      	adds	r7, #36	; 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff ff4c 	bl	8004d1c <__NVIC_SetPriorityGrouping>
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e9e:	f7ff ff61 	bl	8004d64 <__NVIC_GetPriorityGrouping>
 8004ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	6978      	ldr	r0, [r7, #20]
 8004eaa:	f7ff ffb1 	bl	8004e10 <NVIC_EncodePriority>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff80 	bl	8004dbc <__NVIC_SetPriority>
}
 8004ebc:	bf00      	nop
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff ff54 	bl	8004d80 <__NVIC_EnableIRQ>
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b089      	sub	sp, #36	; 0x24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	e16b      	b.n	80051d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004efc:	2201      	movs	r2, #1
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	f040 815a 	bne.w	80051ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d005      	beq.n	8004f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d130      	bne.n	8004f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f68:	2201      	movs	r2, #1
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 0201 	and.w	r2, r3, #1
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d017      	beq.n	8004fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	2203      	movs	r2, #3
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d123      	bne.n	8005024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	08da      	lsrs	r2, r3, #3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3208      	adds	r2, #8
 8004fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	220f      	movs	r2, #15
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	4313      	orrs	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	08da      	lsrs	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3208      	adds	r2, #8
 800501e:	69b9      	ldr	r1, [r7, #24]
 8005020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	2203      	movs	r2, #3
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	43db      	mvns	r3, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4013      	ands	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 0203 	and.w	r2, r3, #3
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4313      	orrs	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80b4 	beq.w	80051ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	4b60      	ldr	r3, [pc, #384]	; (80051ec <HAL_GPIO_Init+0x30c>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	4a5f      	ldr	r2, [pc, #380]	; (80051ec <HAL_GPIO_Init+0x30c>)
 8005070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005074:	6453      	str	r3, [r2, #68]	; 0x44
 8005076:	4b5d      	ldr	r3, [pc, #372]	; (80051ec <HAL_GPIO_Init+0x30c>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005082:	4a5b      	ldr	r2, [pc, #364]	; (80051f0 <HAL_GPIO_Init+0x310>)
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	089b      	lsrs	r3, r3, #2
 8005088:	3302      	adds	r3, #2
 800508a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	220f      	movs	r2, #15
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4013      	ands	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a52      	ldr	r2, [pc, #328]	; (80051f4 <HAL_GPIO_Init+0x314>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d02b      	beq.n	8005106 <HAL_GPIO_Init+0x226>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a51      	ldr	r2, [pc, #324]	; (80051f8 <HAL_GPIO_Init+0x318>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d025      	beq.n	8005102 <HAL_GPIO_Init+0x222>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a50      	ldr	r2, [pc, #320]	; (80051fc <HAL_GPIO_Init+0x31c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01f      	beq.n	80050fe <HAL_GPIO_Init+0x21e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a4f      	ldr	r2, [pc, #316]	; (8005200 <HAL_GPIO_Init+0x320>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d019      	beq.n	80050fa <HAL_GPIO_Init+0x21a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a4e      	ldr	r2, [pc, #312]	; (8005204 <HAL_GPIO_Init+0x324>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_GPIO_Init+0x216>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a4d      	ldr	r2, [pc, #308]	; (8005208 <HAL_GPIO_Init+0x328>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00d      	beq.n	80050f2 <HAL_GPIO_Init+0x212>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a4c      	ldr	r2, [pc, #304]	; (800520c <HAL_GPIO_Init+0x32c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d007      	beq.n	80050ee <HAL_GPIO_Init+0x20e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a4b      	ldr	r2, [pc, #300]	; (8005210 <HAL_GPIO_Init+0x330>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_GPIO_Init+0x20a>
 80050e6:	2307      	movs	r3, #7
 80050e8:	e00e      	b.n	8005108 <HAL_GPIO_Init+0x228>
 80050ea:	2308      	movs	r3, #8
 80050ec:	e00c      	b.n	8005108 <HAL_GPIO_Init+0x228>
 80050ee:	2306      	movs	r3, #6
 80050f0:	e00a      	b.n	8005108 <HAL_GPIO_Init+0x228>
 80050f2:	2305      	movs	r3, #5
 80050f4:	e008      	b.n	8005108 <HAL_GPIO_Init+0x228>
 80050f6:	2304      	movs	r3, #4
 80050f8:	e006      	b.n	8005108 <HAL_GPIO_Init+0x228>
 80050fa:	2303      	movs	r3, #3
 80050fc:	e004      	b.n	8005108 <HAL_GPIO_Init+0x228>
 80050fe:	2302      	movs	r3, #2
 8005100:	e002      	b.n	8005108 <HAL_GPIO_Init+0x228>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <HAL_GPIO_Init+0x228>
 8005106:	2300      	movs	r3, #0
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	f002 0203 	and.w	r2, r2, #3
 800510e:	0092      	lsls	r2, r2, #2
 8005110:	4093      	lsls	r3, r2
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005118:	4935      	ldr	r1, [pc, #212]	; (80051f0 <HAL_GPIO_Init+0x310>)
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	3302      	adds	r3, #2
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005126:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <HAL_GPIO_Init+0x334>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800514a:	4a32      	ldr	r2, [pc, #200]	; (8005214 <HAL_GPIO_Init+0x334>)
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005150:	4b30      	ldr	r3, [pc, #192]	; (8005214 <HAL_GPIO_Init+0x334>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	43db      	mvns	r3, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005174:	4a27      	ldr	r2, [pc, #156]	; (8005214 <HAL_GPIO_Init+0x334>)
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800517a:	4b26      	ldr	r3, [pc, #152]	; (8005214 <HAL_GPIO_Init+0x334>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	43db      	mvns	r3, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4013      	ands	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800519e:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <HAL_GPIO_Init+0x334>)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <HAL_GPIO_Init+0x334>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051c8:	4a12      	ldr	r2, [pc, #72]	; (8005214 <HAL_GPIO_Init+0x334>)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3301      	adds	r3, #1
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	2b0f      	cmp	r3, #15
 80051d8:	f67f ae90 	bls.w	8004efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	3724      	adds	r7, #36	; 0x24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800
 80051f0:	40013800 	.word	0x40013800
 80051f4:	40020000 	.word	0x40020000
 80051f8:	40020400 	.word	0x40020400
 80051fc:	40020800 	.word	0x40020800
 8005200:	40020c00 	.word	0x40020c00
 8005204:	40021000 	.word	0x40021000
 8005208:	40021400 	.word	0x40021400
 800520c:	40021800 	.word	0x40021800
 8005210:	40021c00 	.word	0x40021c00
 8005214:	40013c00 	.word	0x40013c00

08005218 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e0cd      	b.n	80053d0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005234:	2201      	movs	r2, #1
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4013      	ands	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	429a      	cmp	r2, r3
 800524c:	f040 80bd 	bne.w	80053ca <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005250:	4a65      	ldr	r2, [pc, #404]	; (80053e8 <HAL_GPIO_DeInit+0x1d0>)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	089b      	lsrs	r3, r3, #2
 8005256:	3302      	adds	r3, #2
 8005258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	220f      	movs	r2, #15
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a5d      	ldr	r2, [pc, #372]	; (80053ec <HAL_GPIO_DeInit+0x1d4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d02b      	beq.n	80052d2 <HAL_GPIO_DeInit+0xba>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a5c      	ldr	r2, [pc, #368]	; (80053f0 <HAL_GPIO_DeInit+0x1d8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d025      	beq.n	80052ce <HAL_GPIO_DeInit+0xb6>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a5b      	ldr	r2, [pc, #364]	; (80053f4 <HAL_GPIO_DeInit+0x1dc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01f      	beq.n	80052ca <HAL_GPIO_DeInit+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a5a      	ldr	r2, [pc, #360]	; (80053f8 <HAL_GPIO_DeInit+0x1e0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d019      	beq.n	80052c6 <HAL_GPIO_DeInit+0xae>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a59      	ldr	r2, [pc, #356]	; (80053fc <HAL_GPIO_DeInit+0x1e4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_GPIO_DeInit+0xaa>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a58      	ldr	r2, [pc, #352]	; (8005400 <HAL_GPIO_DeInit+0x1e8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00d      	beq.n	80052be <HAL_GPIO_DeInit+0xa6>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a57      	ldr	r2, [pc, #348]	; (8005404 <HAL_GPIO_DeInit+0x1ec>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <HAL_GPIO_DeInit+0xa2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a56      	ldr	r2, [pc, #344]	; (8005408 <HAL_GPIO_DeInit+0x1f0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_GPIO_DeInit+0x9e>
 80052b2:	2307      	movs	r3, #7
 80052b4:	e00e      	b.n	80052d4 <HAL_GPIO_DeInit+0xbc>
 80052b6:	2308      	movs	r3, #8
 80052b8:	e00c      	b.n	80052d4 <HAL_GPIO_DeInit+0xbc>
 80052ba:	2306      	movs	r3, #6
 80052bc:	e00a      	b.n	80052d4 <HAL_GPIO_DeInit+0xbc>
 80052be:	2305      	movs	r3, #5
 80052c0:	e008      	b.n	80052d4 <HAL_GPIO_DeInit+0xbc>
 80052c2:	2304      	movs	r3, #4
 80052c4:	e006      	b.n	80052d4 <HAL_GPIO_DeInit+0xbc>
 80052c6:	2303      	movs	r3, #3
 80052c8:	e004      	b.n	80052d4 <HAL_GPIO_DeInit+0xbc>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e002      	b.n	80052d4 <HAL_GPIO_DeInit+0xbc>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_GPIO_DeInit+0xbc>
 80052d2:	2300      	movs	r3, #0
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	f002 0203 	and.w	r2, r2, #3
 80052da:	0092      	lsls	r2, r2, #2
 80052dc:	4093      	lsls	r3, r2
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d132      	bne.n	800534a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80052e4:	4b49      	ldr	r3, [pc, #292]	; (800540c <HAL_GPIO_DeInit+0x1f4>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	43db      	mvns	r3, r3
 80052ec:	4947      	ldr	r1, [pc, #284]	; (800540c <HAL_GPIO_DeInit+0x1f4>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80052f2:	4b46      	ldr	r3, [pc, #280]	; (800540c <HAL_GPIO_DeInit+0x1f4>)
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	4944      	ldr	r1, [pc, #272]	; (800540c <HAL_GPIO_DeInit+0x1f4>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005300:	4b42      	ldr	r3, [pc, #264]	; (800540c <HAL_GPIO_DeInit+0x1f4>)
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	43db      	mvns	r3, r3
 8005308:	4940      	ldr	r1, [pc, #256]	; (800540c <HAL_GPIO_DeInit+0x1f4>)
 800530a:	4013      	ands	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800530e:	4b3f      	ldr	r3, [pc, #252]	; (800540c <HAL_GPIO_DeInit+0x1f4>)
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	43db      	mvns	r3, r3
 8005316:	493d      	ldr	r1, [pc, #244]	; (800540c <HAL_GPIO_DeInit+0x1f4>)
 8005318:	4013      	ands	r3, r2
 800531a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	220f      	movs	r2, #15
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800532c:	4a2e      	ldr	r2, [pc, #184]	; (80053e8 <HAL_GPIO_DeInit+0x1d0>)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	089b      	lsrs	r3, r3, #2
 8005332:	3302      	adds	r3, #2
 8005334:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	43da      	mvns	r2, r3
 800533c:	482a      	ldr	r0, [pc, #168]	; (80053e8 <HAL_GPIO_DeInit+0x1d0>)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	400a      	ands	r2, r1
 8005344:	3302      	adds	r3, #2
 8005346:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	2103      	movs	r1, #3
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	401a      	ands	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	08da      	lsrs	r2, r3, #3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3208      	adds	r2, #8
 8005368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	220f      	movs	r2, #15
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	43db      	mvns	r3, r3
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	08d2      	lsrs	r2, r2, #3
 8005380:	4019      	ands	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3208      	adds	r2, #8
 8005386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	2103      	movs	r1, #3
 8005394:	fa01 f303 	lsl.w	r3, r1, r3
 8005398:	43db      	mvns	r3, r3
 800539a:	401a      	ands	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	2101      	movs	r1, #1
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	401a      	ands	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	2103      	movs	r1, #3
 80053be:	fa01 f303 	lsl.w	r3, r1, r3
 80053c2:	43db      	mvns	r3, r3
 80053c4:	401a      	ands	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	3301      	adds	r3, #1
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	f67f af2e 	bls.w	8005234 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40013800 	.word	0x40013800
 80053ec:	40020000 	.word	0x40020000
 80053f0:	40020400 	.word	0x40020400
 80053f4:	40020800 	.word	0x40020800
 80053f8:	40020c00 	.word	0x40020c00
 80053fc:	40021000 	.word	0x40021000
 8005400:	40021400 	.word	0x40021400
 8005404:	40021800 	.word	0x40021800
 8005408:	40021c00 	.word	0x40021c00
 800540c:	40013c00 	.word	0x40013c00

08005410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	887b      	ldrh	r3, [r7, #2]
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
 800542c:	e001      	b.n	8005432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	807b      	strh	r3, [r7, #2]
 800544c:	4613      	mov	r3, r2
 800544e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005450:	787b      	ldrb	r3, [r7, #1]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005456:	887a      	ldrh	r2, [r7, #2]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800545c:	e003      	b.n	8005466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800545e:	887b      	ldrh	r3, [r7, #2]
 8005460:	041a      	lsls	r2, r3, #16
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	619a      	str	r2, [r3, #24]
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	460b      	mov	r3, r1
 800547c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005484:	887a      	ldrh	r2, [r7, #2]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4013      	ands	r3, r2
 800548a:	041a      	lsls	r2, r3, #16
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	43d9      	mvns	r1, r3
 8005490:	887b      	ldrh	r3, [r7, #2]
 8005492:	400b      	ands	r3, r1
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	619a      	str	r2, [r3, #24]
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d006      	beq.n	80054cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054be:	4a05      	ldr	r2, [pc, #20]	; (80054d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fc f95a 	bl	8001780 <HAL_GPIO_EXTI_Callback>
  }
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40013c00 	.word	0x40013c00

080054d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e264      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d075      	beq.n	80055e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054f6:	4ba3      	ldr	r3, [pc, #652]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d00c      	beq.n	800551c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005502:	4ba0      	ldr	r3, [pc, #640]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800550a:	2b08      	cmp	r3, #8
 800550c:	d112      	bne.n	8005534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800550e:	4b9d      	ldr	r3, [pc, #628]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800551a:	d10b      	bne.n	8005534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800551c:	4b99      	ldr	r3, [pc, #612]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d05b      	beq.n	80055e0 <HAL_RCC_OscConfig+0x108>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d157      	bne.n	80055e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e23f      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800553c:	d106      	bne.n	800554c <HAL_RCC_OscConfig+0x74>
 800553e:	4b91      	ldr	r3, [pc, #580]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a90      	ldr	r2, [pc, #576]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e01d      	b.n	8005588 <HAL_RCC_OscConfig+0xb0>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x98>
 8005556:	4b8b      	ldr	r3, [pc, #556]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a8a      	ldr	r2, [pc, #552]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b88      	ldr	r3, [pc, #544]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a87      	ldr	r2, [pc, #540]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0xb0>
 8005570:	4b84      	ldr	r3, [pc, #528]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a83      	ldr	r2, [pc, #524]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4b81      	ldr	r3, [pc, #516]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a80      	ldr	r2, [pc, #512]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7ff fb94 	bl	8004cbc <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005598:	f7ff fb90 	bl	8004cbc <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	; 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e204      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055aa:	4b76      	ldr	r3, [pc, #472]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0xc0>
 80055b6:	e014      	b.n	80055e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b8:	f7ff fb80 	bl	8004cbc <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055c0:	f7ff fb7c 	bl	8004cbc <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	; 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e1f0      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d2:	4b6c      	ldr	r3, [pc, #432]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0xe8>
 80055de:	e000      	b.n	80055e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d063      	beq.n	80056b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ee:	4b65      	ldr	r3, [pc, #404]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fa:	4b62      	ldr	r3, [pc, #392]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005602:	2b08      	cmp	r3, #8
 8005604:	d11c      	bne.n	8005640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005606:	4b5f      	ldr	r3, [pc, #380]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d116      	bne.n	8005640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005612:	4b5c      	ldr	r3, [pc, #368]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_RCC_OscConfig+0x152>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d001      	beq.n	800562a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e1c4      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562a:	4b56      	ldr	r3, [pc, #344]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4952      	ldr	r1, [pc, #328]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800563a:	4313      	orrs	r3, r2
 800563c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800563e:	e03a      	b.n	80056b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005648:	4b4f      	ldr	r3, [pc, #316]	; (8005788 <HAL_RCC_OscConfig+0x2b0>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564e:	f7ff fb35 	bl	8004cbc <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005656:	f7ff fb31 	bl	8004cbc <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e1a5      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005668:	4b46      	ldr	r3, [pc, #280]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005674:	4b43      	ldr	r3, [pc, #268]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4940      	ldr	r1, [pc, #256]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	4313      	orrs	r3, r2
 8005686:	600b      	str	r3, [r1, #0]
 8005688:	e015      	b.n	80056b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800568a:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <HAL_RCC_OscConfig+0x2b0>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7ff fb14 	bl	8004cbc <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005698:	f7ff fb10 	bl	8004cbc <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e184      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056aa:	4b36      	ldr	r3, [pc, #216]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d030      	beq.n	8005724 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d016      	beq.n	80056f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ca:	4b30      	ldr	r3, [pc, #192]	; (800578c <HAL_RCC_OscConfig+0x2b4>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7ff faf4 	bl	8004cbc <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056d8:	f7ff faf0 	bl	8004cbc <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e164      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ea:	4b26      	ldr	r3, [pc, #152]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0x200>
 80056f6:	e015      	b.n	8005724 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056f8:	4b24      	ldr	r3, [pc, #144]	; (800578c <HAL_RCC_OscConfig+0x2b4>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fe:	f7ff fadd 	bl	8004cbc <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005706:	f7ff fad9 	bl	8004cbc <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e14d      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005718:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800571a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80a0 	beq.w	8005872 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005732:	2300      	movs	r3, #0
 8005734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	4a0e      	ldr	r2, [pc, #56]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 800574c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005750:	6413      	str	r3, [r2, #64]	; 0x40
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575a:	60bb      	str	r3, [r7, #8]
 800575c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800575e:	2301      	movs	r3, #1
 8005760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005762:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <HAL_RCC_OscConfig+0x2b8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d121      	bne.n	80057b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <HAL_RCC_OscConfig+0x2b8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a07      	ldr	r2, [pc, #28]	; (8005790 <HAL_RCC_OscConfig+0x2b8>)
 8005774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577a:	f7ff fa9f 	bl	8004cbc <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	e011      	b.n	80057a6 <HAL_RCC_OscConfig+0x2ce>
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800
 8005788:	42470000 	.word	0x42470000
 800578c:	42470e80 	.word	0x42470e80
 8005790:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005794:	f7ff fa92 	bl	8004cbc <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e106      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a6:	4b85      	ldr	r3, [pc, #532]	; (80059bc <HAL_RCC_OscConfig+0x4e4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d106      	bne.n	80057c8 <HAL_RCC_OscConfig+0x2f0>
 80057ba:	4b81      	ldr	r3, [pc, #516]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	4a80      	ldr	r2, [pc, #512]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70
 80057c6:	e01c      	b.n	8005802 <HAL_RCC_OscConfig+0x32a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b05      	cmp	r3, #5
 80057ce:	d10c      	bne.n	80057ea <HAL_RCC_OscConfig+0x312>
 80057d0:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a7a      	ldr	r2, [pc, #488]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057d6:	f043 0304 	orr.w	r3, r3, #4
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
 80057dc:	4b78      	ldr	r3, [pc, #480]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4a77      	ldr	r2, [pc, #476]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6713      	str	r3, [r2, #112]	; 0x70
 80057e8:	e00b      	b.n	8005802 <HAL_RCC_OscConfig+0x32a>
 80057ea:	4b75      	ldr	r3, [pc, #468]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a74      	ldr	r2, [pc, #464]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70
 80057f6:	4b72      	ldr	r3, [pc, #456]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	4a71      	ldr	r2, [pc, #452]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80057fc:	f023 0304 	bic.w	r3, r3, #4
 8005800:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d015      	beq.n	8005836 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7ff fa57 	bl	8004cbc <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005810:	e00a      	b.n	8005828 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005812:	f7ff fa53 	bl	8004cbc <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0c5      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005828:	4b65      	ldr	r3, [pc, #404]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0ee      	beq.n	8005812 <HAL_RCC_OscConfig+0x33a>
 8005834:	e014      	b.n	8005860 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005836:	f7ff fa41 	bl	8004cbc <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583c:	e00a      	b.n	8005854 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800583e:	f7ff fa3d 	bl	8004cbc <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f241 3288 	movw	r2, #5000	; 0x1388
 800584c:	4293      	cmp	r3, r2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e0af      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005854:	4b5a      	ldr	r3, [pc, #360]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ee      	bne.n	800583e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d105      	bne.n	8005872 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005866:	4b56      	ldr	r3, [pc, #344]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4a55      	ldr	r2, [pc, #340]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 800586c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005870:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 809b 	beq.w	80059b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800587c:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d05c      	beq.n	8005942 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d141      	bne.n	8005914 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005890:	4b4c      	ldr	r3, [pc, #304]	; (80059c4 <HAL_RCC_OscConfig+0x4ec>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005896:	f7ff fa11 	bl	8004cbc <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589e:	f7ff fa0d 	bl	8004cbc <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e081      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b0:	4b43      	ldr	r3, [pc, #268]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f0      	bne.n	800589e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	019b      	lsls	r3, r3, #6
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	3b01      	subs	r3, #1
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	061b      	lsls	r3, r3, #24
 80058e0:	4937      	ldr	r1, [pc, #220]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e6:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <HAL_RCC_OscConfig+0x4ec>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7ff f9e6 	bl	8004cbc <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f4:	f7ff f9e2 	bl	8004cbc <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e056      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005906:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f0      	beq.n	80058f4 <HAL_RCC_OscConfig+0x41c>
 8005912:	e04e      	b.n	80059b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005914:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <HAL_RCC_OscConfig+0x4ec>)
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591a:	f7ff f9cf 	bl	8004cbc <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005922:	f7ff f9cb 	bl	8004cbc <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e03f      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005934:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f0      	bne.n	8005922 <HAL_RCC_OscConfig+0x44a>
 8005940:	e037      	b.n	80059b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e032      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <HAL_RCC_OscConfig+0x4e8>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d028      	beq.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d121      	bne.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d11a      	bne.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800597e:	4013      	ands	r3, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005984:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005986:	4293      	cmp	r3, r2
 8005988:	d111      	bne.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	3b01      	subs	r3, #1
 8005998:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d107      	bne.n	80059ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d001      	beq.n	80059b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40007000 	.word	0x40007000
 80059c0:	40023800 	.word	0x40023800
 80059c4:	42470060 	.word	0x42470060

080059c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0cc      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059dc:	4b68      	ldr	r3, [pc, #416]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d90c      	bls.n	8005a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b65      	ldr	r3, [pc, #404]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f2:	4b63      	ldr	r3, [pc, #396]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0b8      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d020      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a1c:	4b59      	ldr	r3, [pc, #356]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a58      	ldr	r2, [pc, #352]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a34:	4b53      	ldr	r3, [pc, #332]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a52      	ldr	r2, [pc, #328]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a40:	4b50      	ldr	r3, [pc, #320]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	494d      	ldr	r1, [pc, #308]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d044      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d107      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a66:	4b47      	ldr	r3, [pc, #284]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d119      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e07f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d107      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a86:	4b3f      	ldr	r3, [pc, #252]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e06f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a96:	4b3b      	ldr	r3, [pc, #236]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e067      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aa6:	4b37      	ldr	r3, [pc, #220]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f023 0203 	bic.w	r2, r3, #3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4934      	ldr	r1, [pc, #208]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab8:	f7ff f900 	bl	8004cbc <HAL_GetTick>
 8005abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	e00a      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac0:	f7ff f8fc 	bl	8004cbc <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e04f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad6:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 020c 	and.w	r2, r3, #12
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d1eb      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae8:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d20c      	bcs.n	8005b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af6:	4b22      	ldr	r3, [pc, #136]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afe:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e032      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d008      	beq.n	8005b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b1c:	4b19      	ldr	r3, [pc, #100]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4916      	ldr	r1, [pc, #88]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	490e      	ldr	r1, [pc, #56]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b4e:	f000 f821 	bl	8005b94 <HAL_RCC_GetSysClockFreq>
 8005b52:	4602      	mov	r2, r0
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	091b      	lsrs	r3, r3, #4
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	490a      	ldr	r1, [pc, #40]	; (8005b88 <HAL_RCC_ClockConfig+0x1c0>)
 8005b60:	5ccb      	ldrb	r3, [r1, r3]
 8005b62:	fa22 f303 	lsr.w	r3, r2, r3
 8005b66:	4a09      	ldr	r2, [pc, #36]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b6a:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fc fb72 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40023c00 	.word	0x40023c00
 8005b84:	40023800 	.word	0x40023800
 8005b88:	08026538 	.word	0x08026538
 8005b8c:	20000010 	.word	0x20000010
 8005b90:	20000038 	.word	0x20000038

08005b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bac:	4b67      	ldr	r3, [pc, #412]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 030c 	and.w	r3, r3, #12
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	f200 80bd 	bhi.w	8005d38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d003      	beq.n	8005bce <HAL_RCC_GetSysClockFreq+0x3a>
 8005bc6:	e0b7      	b.n	8005d38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bc8:	4b61      	ldr	r3, [pc, #388]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bca:	60bb      	str	r3, [r7, #8]
       break;
 8005bcc:	e0b7      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bce:	4b61      	ldr	r3, [pc, #388]	; (8005d54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005bd0:	60bb      	str	r3, [r7, #8]
      break;
 8005bd2:	e0b4      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bd4:	4b5d      	ldr	r3, [pc, #372]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bde:	4b5b      	ldr	r3, [pc, #364]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d04d      	beq.n	8005c86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bea:	4b58      	ldr	r3, [pc, #352]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	099b      	lsrs	r3, r3, #6
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bfa:	f04f 0100 	mov.w	r1, #0
 8005bfe:	ea02 0800 	and.w	r8, r2, r0
 8005c02:	ea03 0901 	and.w	r9, r3, r1
 8005c06:	4640      	mov	r0, r8
 8005c08:	4649      	mov	r1, r9
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	014b      	lsls	r3, r1, #5
 8005c14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c18:	0142      	lsls	r2, r0, #5
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	ebb0 0008 	subs.w	r0, r0, r8
 8005c22:	eb61 0109 	sbc.w	r1, r1, r9
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	018b      	lsls	r3, r1, #6
 8005c30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c34:	0182      	lsls	r2, r0, #6
 8005c36:	1a12      	subs	r2, r2, r0
 8005c38:	eb63 0301 	sbc.w	r3, r3, r1
 8005c3c:	f04f 0000 	mov.w	r0, #0
 8005c40:	f04f 0100 	mov.w	r1, #0
 8005c44:	00d9      	lsls	r1, r3, #3
 8005c46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c4a:	00d0      	lsls	r0, r2, #3
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	eb12 0208 	adds.w	r2, r2, r8
 8005c54:	eb43 0309 	adc.w	r3, r3, r9
 8005c58:	f04f 0000 	mov.w	r0, #0
 8005c5c:	f04f 0100 	mov.w	r1, #0
 8005c60:	0259      	lsls	r1, r3, #9
 8005c62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005c66:	0250      	lsls	r0, r2, #9
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	f7fa ff96 	bl	8000ba8 <__aeabi_uldivmod>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4613      	mov	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e04a      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c86:	4b31      	ldr	r3, [pc, #196]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	099b      	lsrs	r3, r3, #6
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c96:	f04f 0100 	mov.w	r1, #0
 8005c9a:	ea02 0400 	and.w	r4, r2, r0
 8005c9e:	ea03 0501 	and.w	r5, r3, r1
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	014b      	lsls	r3, r1, #5
 8005cb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cb4:	0142      	lsls	r2, r0, #5
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	1b00      	subs	r0, r0, r4
 8005cbc:	eb61 0105 	sbc.w	r1, r1, r5
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	018b      	lsls	r3, r1, #6
 8005cca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cce:	0182      	lsls	r2, r0, #6
 8005cd0:	1a12      	subs	r2, r2, r0
 8005cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8005cd6:	f04f 0000 	mov.w	r0, #0
 8005cda:	f04f 0100 	mov.w	r1, #0
 8005cde:	00d9      	lsls	r1, r3, #3
 8005ce0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ce4:	00d0      	lsls	r0, r2, #3
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	1912      	adds	r2, r2, r4
 8005cec:	eb45 0303 	adc.w	r3, r5, r3
 8005cf0:	f04f 0000 	mov.w	r0, #0
 8005cf4:	f04f 0100 	mov.w	r1, #0
 8005cf8:	0299      	lsls	r1, r3, #10
 8005cfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cfe:	0290      	lsls	r0, r2, #10
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4610      	mov	r0, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	f7fa ff4a 	bl	8000ba8 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4613      	mov	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	3301      	adds	r3, #1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	60bb      	str	r3, [r7, #8]
      break;
 8005d36:	e002      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d3a:	60bb      	str	r3, [r7, #8]
      break;
 8005d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	007a1200 	.word	0x007a1200

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000010 	.word	0x20000010

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d74:	f7ff fff0 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0a9b      	lsrs	r3, r3, #10
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	; (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	08026548 	.word	0x08026548

08005d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d9c:	f7ff ffdc 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0b5b      	lsrs	r3, r3, #13
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4903      	ldr	r1, [pc, #12]	; (8005dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	08026548 	.word	0x08026548

08005dc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	220f      	movs	r2, #15
 8005dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005dd0:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <HAL_RCC_GetClockConfig+0x5c>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 0203 	and.w	r2, r3, #3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <HAL_RCC_GetClockConfig+0x5c>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005de8:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <HAL_RCC_GetClockConfig+0x5c>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005df4:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <HAL_RCC_GetClockConfig+0x5c>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	08db      	lsrs	r3, r3, #3
 8005dfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e02:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <HAL_RCC_GetClockConfig+0x60>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0207 	and.w	r2, r3, #7
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	601a      	str	r2, [r3, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40023c00 	.word	0x40023c00

08005e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e041      	b.n	8005eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f839 	bl	8005ec2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4619      	mov	r1, r3
 8005e62:	4610      	mov	r0, r2
 8005e64:	f000 f9d8 	bl	8006218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d001      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e04e      	b.n	8005f8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a23      	ldr	r2, [pc, #140]	; (8005f9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d022      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x80>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1a:	d01d      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x80>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1f      	ldr	r2, [pc, #124]	; (8005fa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d018      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x80>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1e      	ldr	r2, [pc, #120]	; (8005fa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x80>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1c      	ldr	r2, [pc, #112]	; (8005fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00e      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x80>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <HAL_TIM_Base_Start_IT+0xd4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d009      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x80>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a19      	ldr	r2, [pc, #100]	; (8005fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x80>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a18      	ldr	r2, [pc, #96]	; (8005fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d111      	bne.n	8005f7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b06      	cmp	r3, #6
 8005f68:	d010      	beq.n	8005f8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0201 	orr.w	r2, r2, #1
 8005f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7a:	e007      	b.n	8005f8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40010400 	.word	0x40010400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40001800 	.word	0x40001800

08005fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0202 	mvn.w	r2, #2
 8005fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8ee 	bl	80061dc <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f8e0 	bl	80061c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f8f1 	bl	80061f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d122      	bne.n	8006068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b04      	cmp	r3, #4
 800602e:	d11b      	bne.n	8006068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0204 	mvn.w	r2, #4
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8c4 	bl	80061dc <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8b6 	bl	80061c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8c7 	bl	80061f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b08      	cmp	r3, #8
 8006074:	d122      	bne.n	80060bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b08      	cmp	r3, #8
 8006082:	d11b      	bne.n	80060bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0208 	mvn.w	r2, #8
 800608c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2204      	movs	r2, #4
 8006092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f89a 	bl	80061dc <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f88c 	bl	80061c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f89d 	bl	80061f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b10      	cmp	r3, #16
 80060c8:	d122      	bne.n	8006110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d11b      	bne.n	8006110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0210 	mvn.w	r2, #16
 80060e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2208      	movs	r2, #8
 80060e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f870 	bl	80061dc <HAL_TIM_IC_CaptureCallback>
 80060fc:	e005      	b.n	800610a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f862 	bl	80061c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f873 	bl	80061f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b01      	cmp	r3, #1
 800611c:	d10e      	bne.n	800613c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	d107      	bne.n	800613c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0201 	mvn.w	r2, #1
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fb fb9e 	bl	8001878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d10e      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d107      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f902 	bl	800636c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d10e      	bne.n	8006194 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d107      	bne.n	8006194 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f838 	bl	8006204 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d10e      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d107      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0220 	mvn.w	r2, #32
 80061b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f8cc 	bl	8006358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a40      	ldr	r2, [pc, #256]	; (800632c <TIM_Base_SetConfig+0x114>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d013      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006236:	d00f      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a3d      	ldr	r2, [pc, #244]	; (8006330 <TIM_Base_SetConfig+0x118>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00b      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a3c      	ldr	r2, [pc, #240]	; (8006334 <TIM_Base_SetConfig+0x11c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d007      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a3b      	ldr	r2, [pc, #236]	; (8006338 <TIM_Base_SetConfig+0x120>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_Base_SetConfig+0x40>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a3a      	ldr	r2, [pc, #232]	; (800633c <TIM_Base_SetConfig+0x124>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d108      	bne.n	800626a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2f      	ldr	r2, [pc, #188]	; (800632c <TIM_Base_SetConfig+0x114>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d02b      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006278:	d027      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2c      	ldr	r2, [pc, #176]	; (8006330 <TIM_Base_SetConfig+0x118>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d023      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2b      	ldr	r2, [pc, #172]	; (8006334 <TIM_Base_SetConfig+0x11c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01f      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a2a      	ldr	r2, [pc, #168]	; (8006338 <TIM_Base_SetConfig+0x120>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01b      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a29      	ldr	r2, [pc, #164]	; (800633c <TIM_Base_SetConfig+0x124>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d017      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a28      	ldr	r2, [pc, #160]	; (8006340 <TIM_Base_SetConfig+0x128>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a27      	ldr	r2, [pc, #156]	; (8006344 <TIM_Base_SetConfig+0x12c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00f      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a26      	ldr	r2, [pc, #152]	; (8006348 <TIM_Base_SetConfig+0x130>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00b      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a25      	ldr	r2, [pc, #148]	; (800634c <TIM_Base_SetConfig+0x134>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d007      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a24      	ldr	r2, [pc, #144]	; (8006350 <TIM_Base_SetConfig+0x138>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a23      	ldr	r2, [pc, #140]	; (8006354 <TIM_Base_SetConfig+0x13c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d108      	bne.n	80062dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a0a      	ldr	r2, [pc, #40]	; (800632c <TIM_Base_SetConfig+0x114>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_Base_SetConfig+0xf8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a0c      	ldr	r2, [pc, #48]	; (800633c <TIM_Base_SetConfig+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d103      	bne.n	8006318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	615a      	str	r2, [r3, #20]
}
 800631e:	bf00      	nop
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40010000 	.word	0x40010000
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40010400 	.word	0x40010400
 8006340:	40014000 	.word	0x40014000
 8006344:	40014400 	.word	0x40014400
 8006348:	40014800 	.word	0x40014800
 800634c:	40001800 	.word	0x40001800
 8006350:	40001c00 	.word	0x40001c00
 8006354:	40002000 	.word	0x40002000

08006358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e03f      	b.n	8006412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fb ff0e 	bl	80021c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	; 0x24
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f905 	bl	80065d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b08a      	sub	sp, #40	; 0x28
 800641e:	af02      	add	r7, sp, #8
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	603b      	str	r3, [r7, #0]
 8006426:	4613      	mov	r3, r2
 8006428:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b20      	cmp	r3, #32
 8006438:	d17c      	bne.n	8006534 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HAL_UART_Transmit+0x2c>
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e075      	b.n	8006536 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_UART_Transmit+0x3e>
 8006454:	2302      	movs	r3, #2
 8006456:	e06e      	b.n	8006536 <HAL_UART_Transmit+0x11c>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2221      	movs	r2, #33	; 0x21
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800646e:	f7fe fc25 	bl	8004cbc <HAL_GetTick>
 8006472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006488:	d108      	bne.n	800649c <HAL_UART_Transmit+0x82>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	61bb      	str	r3, [r7, #24]
 800649a:	e003      	b.n	80064a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064ac:	e02a      	b.n	8006504 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2200      	movs	r2, #0
 80064b6:	2180      	movs	r1, #128	; 0x80
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f840 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e036      	b.n	8006536 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	3302      	adds	r3, #2
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	e007      	b.n	80064f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	3301      	adds	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1cf      	bne.n	80064ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2200      	movs	r2, #0
 8006516:	2140      	movs	r1, #64	; 0x40
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f810 	bl	800653e <UART_WaitOnFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e006      	b.n	8006536 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e000      	b.n	8006536 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006534:	2302      	movs	r3, #2
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	4613      	mov	r3, r2
 800654c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654e:	e02c      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d028      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <UART_WaitOnFlagUntilTimeout+0x30>
 800655e:	f7fe fbad 	bl	8004cbc <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	429a      	cmp	r2, r3
 800656c:	d21d      	bcs.n	80065aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800657c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0201 	bic.w	r2, r2, #1
 800658c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e00f      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4013      	ands	r3, r2
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d0c3      	beq.n	8006550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	b09f      	sub	sp, #124	; 0x7c
 80065da:	af00      	add	r7, sp, #0
 80065dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ea:	68d9      	ldr	r1, [r3, #12]
 80065ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	ea40 0301 	orr.w	r3, r0, r1
 80065f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	431a      	orrs	r2, r3
 8006600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	431a      	orrs	r2, r3
 8006606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	4313      	orrs	r3, r2
 800660c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800660e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006618:	f021 010c 	bic.w	r1, r1, #12
 800661c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006622:	430b      	orrs	r3, r1
 8006624:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006632:	6999      	ldr	r1, [r3, #24]
 8006634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	ea40 0301 	orr.w	r3, r0, r1
 800663c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800663e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4bc5      	ldr	r3, [pc, #788]	; (8006958 <UART_SetConfig+0x384>)
 8006644:	429a      	cmp	r2, r3
 8006646:	d004      	beq.n	8006652 <UART_SetConfig+0x7e>
 8006648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	4bc3      	ldr	r3, [pc, #780]	; (800695c <UART_SetConfig+0x388>)
 800664e:	429a      	cmp	r2, r3
 8006650:	d103      	bne.n	800665a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006652:	f7ff fba1 	bl	8005d98 <HAL_RCC_GetPCLK2Freq>
 8006656:	6778      	str	r0, [r7, #116]	; 0x74
 8006658:	e002      	b.n	8006660 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800665a:	f7ff fb89 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 800665e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006668:	f040 80b6 	bne.w	80067d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800666c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800666e:	461c      	mov	r4, r3
 8006670:	f04f 0500 	mov.w	r5, #0
 8006674:	4622      	mov	r2, r4
 8006676:	462b      	mov	r3, r5
 8006678:	1891      	adds	r1, r2, r2
 800667a:	6439      	str	r1, [r7, #64]	; 0x40
 800667c:	415b      	adcs	r3, r3
 800667e:	647b      	str	r3, [r7, #68]	; 0x44
 8006680:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006684:	1912      	adds	r2, r2, r4
 8006686:	eb45 0303 	adc.w	r3, r5, r3
 800668a:	f04f 0000 	mov.w	r0, #0
 800668e:	f04f 0100 	mov.w	r1, #0
 8006692:	00d9      	lsls	r1, r3, #3
 8006694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006698:	00d0      	lsls	r0, r2, #3
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	1911      	adds	r1, r2, r4
 80066a0:	6639      	str	r1, [r7, #96]	; 0x60
 80066a2:	416b      	adcs	r3, r5
 80066a4:	667b      	str	r3, [r7, #100]	; 0x64
 80066a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f04f 0300 	mov.w	r3, #0
 80066b0:	1891      	adds	r1, r2, r2
 80066b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80066b4:	415b      	adcs	r3, r3
 80066b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80066c0:	f7fa fa72 	bl	8000ba8 <__aeabi_uldivmod>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4ba5      	ldr	r3, [pc, #660]	; (8006960 <UART_SetConfig+0x38c>)
 80066ca:	fba3 2302 	umull	r2, r3, r3, r2
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	011e      	lsls	r6, r3, #4
 80066d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d4:	461c      	mov	r4, r3
 80066d6:	f04f 0500 	mov.w	r5, #0
 80066da:	4622      	mov	r2, r4
 80066dc:	462b      	mov	r3, r5
 80066de:	1891      	adds	r1, r2, r2
 80066e0:	6339      	str	r1, [r7, #48]	; 0x30
 80066e2:	415b      	adcs	r3, r3
 80066e4:	637b      	str	r3, [r7, #52]	; 0x34
 80066e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80066ea:	1912      	adds	r2, r2, r4
 80066ec:	eb45 0303 	adc.w	r3, r5, r3
 80066f0:	f04f 0000 	mov.w	r0, #0
 80066f4:	f04f 0100 	mov.w	r1, #0
 80066f8:	00d9      	lsls	r1, r3, #3
 80066fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066fe:	00d0      	lsls	r0, r2, #3
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	1911      	adds	r1, r2, r4
 8006706:	65b9      	str	r1, [r7, #88]	; 0x58
 8006708:	416b      	adcs	r3, r5
 800670a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800670c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	461a      	mov	r2, r3
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	1891      	adds	r1, r2, r2
 8006718:	62b9      	str	r1, [r7, #40]	; 0x28
 800671a:	415b      	adcs	r3, r3
 800671c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800671e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006722:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006726:	f7fa fa3f 	bl	8000ba8 <__aeabi_uldivmod>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4b8c      	ldr	r3, [pc, #560]	; (8006960 <UART_SetConfig+0x38c>)
 8006730:	fba3 1302 	umull	r1, r3, r3, r2
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	2164      	movs	r1, #100	; 0x64
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	3332      	adds	r3, #50	; 0x32
 8006742:	4a87      	ldr	r2, [pc, #540]	; (8006960 <UART_SetConfig+0x38c>)
 8006744:	fba2 2303 	umull	r2, r3, r2, r3
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006750:	441e      	add	r6, r3
 8006752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006754:	4618      	mov	r0, r3
 8006756:	f04f 0100 	mov.w	r1, #0
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	1894      	adds	r4, r2, r2
 8006760:	623c      	str	r4, [r7, #32]
 8006762:	415b      	adcs	r3, r3
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
 8006766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800676a:	1812      	adds	r2, r2, r0
 800676c:	eb41 0303 	adc.w	r3, r1, r3
 8006770:	f04f 0400 	mov.w	r4, #0
 8006774:	f04f 0500 	mov.w	r5, #0
 8006778:	00dd      	lsls	r5, r3, #3
 800677a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800677e:	00d4      	lsls	r4, r2, #3
 8006780:	4622      	mov	r2, r4
 8006782:	462b      	mov	r3, r5
 8006784:	1814      	adds	r4, r2, r0
 8006786:	653c      	str	r4, [r7, #80]	; 0x50
 8006788:	414b      	adcs	r3, r1
 800678a:	657b      	str	r3, [r7, #84]	; 0x54
 800678c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	461a      	mov	r2, r3
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	1891      	adds	r1, r2, r2
 8006798:	61b9      	str	r1, [r7, #24]
 800679a:	415b      	adcs	r3, r3
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80067a6:	f7fa f9ff 	bl	8000ba8 <__aeabi_uldivmod>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4b6c      	ldr	r3, [pc, #432]	; (8006960 <UART_SetConfig+0x38c>)
 80067b0:	fba3 1302 	umull	r1, r3, r3, r2
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	2164      	movs	r1, #100	; 0x64
 80067b8:	fb01 f303 	mul.w	r3, r1, r3
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	3332      	adds	r3, #50	; 0x32
 80067c2:	4a67      	ldr	r2, [pc, #412]	; (8006960 <UART_SetConfig+0x38c>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	f003 0207 	and.w	r2, r3, #7
 80067ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4432      	add	r2, r6
 80067d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067d6:	e0b9      	b.n	800694c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067da:	461c      	mov	r4, r3
 80067dc:	f04f 0500 	mov.w	r5, #0
 80067e0:	4622      	mov	r2, r4
 80067e2:	462b      	mov	r3, r5
 80067e4:	1891      	adds	r1, r2, r2
 80067e6:	6139      	str	r1, [r7, #16]
 80067e8:	415b      	adcs	r3, r3
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067f0:	1912      	adds	r2, r2, r4
 80067f2:	eb45 0303 	adc.w	r3, r5, r3
 80067f6:	f04f 0000 	mov.w	r0, #0
 80067fa:	f04f 0100 	mov.w	r1, #0
 80067fe:	00d9      	lsls	r1, r3, #3
 8006800:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006804:	00d0      	lsls	r0, r2, #3
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	eb12 0804 	adds.w	r8, r2, r4
 800680e:	eb43 0905 	adc.w	r9, r3, r5
 8006812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	4618      	mov	r0, r3
 8006818:	f04f 0100 	mov.w	r1, #0
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	008b      	lsls	r3, r1, #2
 8006826:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800682a:	0082      	lsls	r2, r0, #2
 800682c:	4640      	mov	r0, r8
 800682e:	4649      	mov	r1, r9
 8006830:	f7fa f9ba 	bl	8000ba8 <__aeabi_uldivmod>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4b49      	ldr	r3, [pc, #292]	; (8006960 <UART_SetConfig+0x38c>)
 800683a:	fba3 2302 	umull	r2, r3, r3, r2
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	011e      	lsls	r6, r3, #4
 8006842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006844:	4618      	mov	r0, r3
 8006846:	f04f 0100 	mov.w	r1, #0
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	1894      	adds	r4, r2, r2
 8006850:	60bc      	str	r4, [r7, #8]
 8006852:	415b      	adcs	r3, r3
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800685a:	1812      	adds	r2, r2, r0
 800685c:	eb41 0303 	adc.w	r3, r1, r3
 8006860:	f04f 0400 	mov.w	r4, #0
 8006864:	f04f 0500 	mov.w	r5, #0
 8006868:	00dd      	lsls	r5, r3, #3
 800686a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800686e:	00d4      	lsls	r4, r2, #3
 8006870:	4622      	mov	r2, r4
 8006872:	462b      	mov	r3, r5
 8006874:	1814      	adds	r4, r2, r0
 8006876:	64bc      	str	r4, [r7, #72]	; 0x48
 8006878:	414b      	adcs	r3, r1
 800687a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800687c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4618      	mov	r0, r3
 8006882:	f04f 0100 	mov.w	r1, #0
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	008b      	lsls	r3, r1, #2
 8006890:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006894:	0082      	lsls	r2, r0, #2
 8006896:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800689a:	f7fa f985 	bl	8000ba8 <__aeabi_uldivmod>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4b2f      	ldr	r3, [pc, #188]	; (8006960 <UART_SetConfig+0x38c>)
 80068a4:	fba3 1302 	umull	r1, r3, r3, r2
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	2164      	movs	r1, #100	; 0x64
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	3332      	adds	r3, #50	; 0x32
 80068b6:	4a2a      	ldr	r2, [pc, #168]	; (8006960 <UART_SetConfig+0x38c>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068c2:	441e      	add	r6, r3
 80068c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c6:	4618      	mov	r0, r3
 80068c8:	f04f 0100 	mov.w	r1, #0
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	1894      	adds	r4, r2, r2
 80068d2:	603c      	str	r4, [r7, #0]
 80068d4:	415b      	adcs	r3, r3
 80068d6:	607b      	str	r3, [r7, #4]
 80068d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068dc:	1812      	adds	r2, r2, r0
 80068de:	eb41 0303 	adc.w	r3, r1, r3
 80068e2:	f04f 0400 	mov.w	r4, #0
 80068e6:	f04f 0500 	mov.w	r5, #0
 80068ea:	00dd      	lsls	r5, r3, #3
 80068ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068f0:	00d4      	lsls	r4, r2, #3
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	eb12 0a00 	adds.w	sl, r2, r0
 80068fa:	eb43 0b01 	adc.w	fp, r3, r1
 80068fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4618      	mov	r0, r3
 8006904:	f04f 0100 	mov.w	r1, #0
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	008b      	lsls	r3, r1, #2
 8006912:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006916:	0082      	lsls	r2, r0, #2
 8006918:	4650      	mov	r0, sl
 800691a:	4659      	mov	r1, fp
 800691c:	f7fa f944 	bl	8000ba8 <__aeabi_uldivmod>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <UART_SetConfig+0x38c>)
 8006926:	fba3 1302 	umull	r1, r3, r3, r2
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	2164      	movs	r1, #100	; 0x64
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	3332      	adds	r3, #50	; 0x32
 8006938:	4a09      	ldr	r2, [pc, #36]	; (8006960 <UART_SetConfig+0x38c>)
 800693a:	fba2 2303 	umull	r2, r3, r2, r3
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	f003 020f 	and.w	r2, r3, #15
 8006944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4432      	add	r2, r6
 800694a:	609a      	str	r2, [r3, #8]
}
 800694c:	bf00      	nop
 800694e:	377c      	adds	r7, #124	; 0x7c
 8006950:	46bd      	mov	sp, r7
 8006952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006956:	bf00      	nop
 8006958:	40011000 	.word	0x40011000
 800695c:	40011400 	.word	0x40011400
 8006960:	51eb851f 	.word	0x51eb851f

08006964 <DB4_write>:
	{ 0x61, 0xB2, 0xB3, 0xB4, 0xE3, 0x65, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xEF, 0xBE },
	{ 0x70, 0x63, 0xBF, 0x79, 0xE4, 0xD5, 0xE5, 0xC0, 0xC1, 0xE6, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7 }
};
#endif
static void DB4_write(int state)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	if (state == 1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d106      	bne.n	8006980 <DB4_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB4_BIT);
 8006972:	2201      	movs	r2, #1
 8006974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006978:	4808      	ldr	r0, [pc, #32]	; (800699c <DB4_write+0x38>)
 800697a:	f7fe fd61 	bl	8005440 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB4_BIT);
	}
}
 800697e:	e008      	b.n	8006992 <DB4_write+0x2e>
	else if (state == 0)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <DB4_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB4_BIT);
 8006986:	2200      	movs	r2, #0
 8006988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800698c:	4803      	ldr	r0, [pc, #12]	; (800699c <DB4_write+0x38>)
 800698e:	f7fe fd57 	bl	8005440 <HAL_GPIO_WritePin>
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40021000 	.word	0x40021000

080069a0 <DB5_write>:

static void DB5_write(int state)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	if (state == 1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d106      	bne.n	80069bc <DB5_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB5_BIT);
 80069ae:	2201      	movs	r2, #1
 80069b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069b4:	4808      	ldr	r0, [pc, #32]	; (80069d8 <DB5_write+0x38>)
 80069b6:	f7fe fd43 	bl	8005440 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB5_BIT);
	}
}
 80069ba:	e008      	b.n	80069ce <DB5_write+0x2e>
	else if (state == 0)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d105      	bne.n	80069ce <DB5_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB5_BIT);
 80069c2:	2200      	movs	r2, #0
 80069c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069c8:	4803      	ldr	r0, [pc, #12]	; (80069d8 <DB5_write+0x38>)
 80069ca:	f7fe fd39 	bl	8005440 <HAL_GPIO_WritePin>
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40021000 	.word	0x40021000

080069dc <DB6_write>:

static void DB6_write(int state)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	if (state == 1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d106      	bne.n	80069f8 <DB6_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB6_BIT);
 80069ea:	2201      	movs	r2, #1
 80069ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069f0:	4808      	ldr	r0, [pc, #32]	; (8006a14 <DB6_write+0x38>)
 80069f2:	f7fe fd25 	bl	8005440 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB6_BIT);
	}
}
 80069f6:	e008      	b.n	8006a0a <DB6_write+0x2e>
	else if (state == 0)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d105      	bne.n	8006a0a <DB6_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB6_BIT);
 80069fe:	2200      	movs	r2, #0
 8006a00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a04:	4803      	ldr	r0, [pc, #12]	; (8006a14 <DB6_write+0x38>)
 8006a06:	f7fe fd1b 	bl	8005440 <HAL_GPIO_WritePin>
}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40021000 	.word	0x40021000

08006a18 <DB7_write>:

static void DB7_write(int state)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	if (state == 1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d106      	bne.n	8006a34 <DB7_write+0x1c>
	{
		port_bit_set(LCD_DATA_PORT, LCD_DB7_BIT);
 8006a26:	2201      	movs	r2, #1
 8006a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a2c:	4808      	ldr	r0, [pc, #32]	; (8006a50 <DB7_write+0x38>)
 8006a2e:	f7fe fd07 	bl	8005440 <HAL_GPIO_WritePin>
	}
	else if (state == 0)
	{
		port_bit_clear(LCD_DATA_PORT, LCD_DB7_BIT);
	}
}
 8006a32:	e008      	b.n	8006a46 <DB7_write+0x2e>
	else if (state == 0)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d105      	bne.n	8006a46 <DB7_write+0x2e>
		port_bit_clear(LCD_DATA_PORT, LCD_DB7_BIT);
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a40:	4803      	ldr	r0, [pc, #12]	; (8006a50 <DB7_write+0x38>)
 8006a42:	f7fe fcfd 	bl	8005440 <HAL_GPIO_WritePin>
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	40021000 	.word	0x40021000

08006a54 <lcd_clock>:

static inline void lcd_clock()
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
	lcd_en_set;
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a5e:	4808      	ldr	r0, [pc, #32]	; (8006a80 <lcd_clock+0x2c>)
 8006a60:	f7fe fcee 	bl	8005440 <HAL_GPIO_WritePin>
	delay_us( 10 );
 8006a64:	200a      	movs	r0, #10
 8006a66:	f7fc fb09 	bl	800307c <delay_us>
	lcd_en_clear;
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a70:	4803      	ldr	r0, [pc, #12]	; (8006a80 <lcd_clock+0x2c>)
 8006a72:	f7fe fce5 	bl	8005440 <HAL_GPIO_WritePin>
	delay_us( 10 );
 8006a76:	200a      	movs	r0, #10
 8006a78:	f7fc fb00 	bl	800307c <delay_us>
}
 8006a7c:	bf00      	nop
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40021000 	.word	0x40021000

08006a84 <lcd_bus_write>:
	DB6_write,
	DB7_write,
};

static void lcd_bus_write(char data)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
	delay_us( 100 );
 8006a8e:	2064      	movs	r0, #100	; 0x64
 8006a90:	f7fc faf4 	bl	800307c <delay_us>
	for(size_t i = 0; i < 4; i++)
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
 8006a98:	e017      	b.n	8006aca <lcd_bus_write+0x46>
	{
		if (data & ( 1 << i ))
 8006a9a:	79fa      	ldrb	r2, [r7, #7]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	fa42 f303 	asr.w	r3, r2, r3
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d006      	beq.n	8006ab8 <lcd_bus_write+0x34>
		{
			bit_write[i](1);
 8006aaa:	4a0c      	ldr	r2, [pc, #48]	; (8006adc <lcd_bus_write+0x58>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	4798      	blx	r3
 8006ab6:	e005      	b.n	8006ac4 <lcd_bus_write+0x40>
		}
		else
		{
			bit_write[i](0);
 8006ab8:	4a08      	ldr	r2, [pc, #32]	; (8006adc <lcd_bus_write+0x58>)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	4798      	blx	r3
	for(size_t i = 0; i < 4; i++)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d9e4      	bls.n	8006a9a <lcd_bus_write+0x16>
		}
	}
	lcd_clock();
 8006ad0:	f7ff ffc0 	bl	8006a54 <lcd_clock>
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000040 	.word	0x20000040

08006ae0 <lcd_command_set>:

void lcd_command_set(char command )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	71fb      	strb	r3, [r7, #7]
	lcd_rs_clear;			/* R/S = 0 */
 8006aea:	2200      	movs	r2, #0
 8006aec:	2180      	movs	r1, #128	; 0x80
 8006aee:	480e      	ldr	r0, [pc, #56]	; (8006b28 <lcd_command_set+0x48>)
 8006af0:	f7fe fca6 	bl	8005440 <HAL_GPIO_WritePin>
	lcd_rw_clear;
 8006af4:	2200      	movs	r2, #0
 8006af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006afa:	480b      	ldr	r0, [pc, #44]	; (8006b28 <lcd_command_set+0x48>)
 8006afc:	f7fe fca0 	bl	8005440 <HAL_GPIO_WritePin>
	delay_ms( 10 );
 8006b00:	200a      	movs	r0, #10
 8006b02:	f7fc fac6 	bl	8003092 <delay_ms>
	lcd_bus_write(command >> 4);
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	091b      	lsrs	r3, r3, #4
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff ffb9 	bl	8006a84 <lcd_bus_write>
	lcd_bus_write(command & 0x0F);
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff ffb2 	bl	8006a84 <lcd_bus_write>
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40021000 	.word	0x40021000

08006b2c <lcd_init>:

void lcd_init( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
	lcd_rw_clear;
 8006b30:	2200      	movs	r2, #0
 8006b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b36:	4818      	ldr	r0, [pc, #96]	; (8006b98 <lcd_init+0x6c>)
 8006b38:	f7fe fc82 	bl	8005440 <HAL_GPIO_WritePin>
	lcd_rs_clear;
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	4815      	ldr	r0, [pc, #84]	; (8006b98 <lcd_init+0x6c>)
 8006b42:	f7fe fc7d 	bl	8005440 <HAL_GPIO_WritePin>

	lcd_bus_write(0x03);
 8006b46:	2003      	movs	r0, #3
 8006b48:	f7ff ff9c 	bl	8006a84 <lcd_bus_write>
	delay_ms( 5 );
 8006b4c:	2005      	movs	r0, #5
 8006b4e:	f7fc faa0 	bl	8003092 <delay_ms>

	lcd_bus_write(0x03);
 8006b52:	2003      	movs	r0, #3
 8006b54:	f7ff ff96 	bl	8006a84 <lcd_bus_write>
	delay_us( 100 );
 8006b58:	2064      	movs	r0, #100	; 0x64
 8006b5a:	f7fc fa8f 	bl	800307c <delay_us>

	lcd_bus_write(0x03);
 8006b5e:	2003      	movs	r0, #3
 8006b60:	f7ff ff90 	bl	8006a84 <lcd_bus_write>

	lcd_bus_write(0x02);
 8006b64:	2002      	movs	r0, #2
 8006b66:	f7ff ff8d 	bl	8006a84 <lcd_bus_write>
	delay_ms( 10 );
 8006b6a:	200a      	movs	r0, #10
 8006b6c:	f7fc fa91 	bl	8003092 <delay_ms>

	lcd_command_set(LCD_INIT1_CMD);
 8006b70:	2028      	movs	r0, #40	; 0x28
 8006b72:	f7ff ffb5 	bl	8006ae0 <lcd_command_set>
	delay_ms( 1 );
 8006b76:	2001      	movs	r0, #1
 8006b78:	f7fc fa8b 	bl	8003092 <delay_ms>

	lcd_command_set(LCD_INIT2_CMD);
 8006b7c:	200c      	movs	r0, #12
 8006b7e:	f7ff ffaf 	bl	8006ae0 <lcd_command_set>
	delay_ms( 1 );
 8006b82:	2001      	movs	r0, #1
 8006b84:	f7fc fa85 	bl	8003092 <delay_ms>

	lcd_command_set(LCD_INIT3_CMD);
 8006b88:	2006      	movs	r0, #6
 8006b8a:	f7ff ffa9 	bl	8006ae0 <lcd_command_set>
	delay_ms( 1 );
 8006b8e:	2001      	movs	r0, #1
 8006b90:	f7fc fa7f 	bl	8003092 <delay_ms>
}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40021000 	.word	0x40021000

08006b9c <lcd_putchar>:

void lcd_putchar( char data )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	71fb      	strb	r3, [r7, #7]
	lcd_rs_set;
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	2180      	movs	r1, #128	; 0x80
 8006baa:	480e      	ldr	r0, [pc, #56]	; (8006be4 <lcd_putchar+0x48>)
 8006bac:	f7fe fc48 	bl	8005440 <HAL_GPIO_WritePin>
	lcd_rw_clear;
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bb6:	480b      	ldr	r0, [pc, #44]	; (8006be4 <lcd_putchar+0x48>)
 8006bb8:	f7fe fc42 	bl	8005440 <HAL_GPIO_WritePin>

	delay_ms( 10 );
 8006bbc:	200a      	movs	r0, #10
 8006bbe:	f7fc fa68 	bl	8003092 <delay_ms>

	lcd_bus_write(data >> 4);
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff ff5b 	bl	8006a84 <lcd_bus_write>
	lcd_bus_write(data & 0x0F);
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	f003 030f 	and.w	r3, r3, #15
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff ff54 	bl	8006a84 <lcd_bus_write>
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40021000 	.word	0x40021000

08006be8 <lcd_puts>:

bool lcd_puts( char * string )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	if( string == NULL )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <lcd_puts+0x12>
	{
		return false;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e014      	b.n	8006c24 <lcd_puts+0x3c>
	}
	for(size_t i = 0; i < strlen( string ); i++ )
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e009      	b.n	8006c14 <lcd_puts+0x2c>
	{
		lcd_putchar(string[i]);
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff ffc7 	bl	8006b9c <lcd_putchar>
	for(size_t i = 0; i < strlen( string ); i++ )
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3301      	adds	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7f9 fadb 	bl	80001d0 <strlen>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d3ee      	bcc.n	8006c00 <lcd_puts+0x18>
	}
	return true;
 8006c22:	2301      	movs	r3, #1
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <lwip_get_netif>:
ip4_addr_t netmask;
ip4_addr_t gw;

/* USER CODE BEGIN 2 */
const struct netif * const lwip_get_netif()
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
	return &gnetif;
 8006c30:	4b02      	ldr	r3, [pc, #8]	; (8006c3c <lwip_get_netif+0x10>)
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20014560 	.word	0x20014560

08006c40 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006c40:	b5b0      	push	{r4, r5, r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006c46:	2100      	movs	r1, #0
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f008 fabd 	bl	800f1c8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006c4e:	4b2a      	ldr	r3, [pc, #168]	; (8006cf8 <MX_LWIP_Init+0xb8>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006c54:	4b29      	ldr	r3, [pc, #164]	; (8006cfc <MX_LWIP_Init+0xbc>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006c5a:	4b29      	ldr	r3, [pc, #164]	; (8006d00 <MX_LWIP_Init+0xc0>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006c60:	4b28      	ldr	r3, [pc, #160]	; (8006d04 <MX_LWIP_Init+0xc4>)
 8006c62:	9302      	str	r3, [sp, #8]
 8006c64:	4b28      	ldr	r3, [pc, #160]	; (8006d08 <MX_LWIP_Init+0xc8>)
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <MX_LWIP_Init+0xc0>)
 8006c6e:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <MX_LWIP_Init+0xbc>)
 8006c70:	4921      	ldr	r1, [pc, #132]	; (8006cf8 <MX_LWIP_Init+0xb8>)
 8006c72:	4826      	ldr	r0, [pc, #152]	; (8006d0c <MX_LWIP_Init+0xcc>)
 8006c74:	f00a f802 	bl	8010c7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006c78:	4824      	ldr	r0, [pc, #144]	; (8006d0c <MX_LWIP_Init+0xcc>)
 8006c7a:	f00a f9b9 	bl	8010ff0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006c7e:	4b23      	ldr	r3, [pc, #140]	; (8006d0c <MX_LWIP_Init+0xcc>)
 8006c80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c84:	089b      	lsrs	r3, r3, #2
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006c90:	481e      	ldr	r0, [pc, #120]	; (8006d0c <MX_LWIP_Init+0xcc>)
 8006c92:	f00a f9bd 	bl	8011010 <netif_set_up>
 8006c96:	e002      	b.n	8006c9e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006c98:	481c      	ldr	r0, [pc, #112]	; (8006d0c <MX_LWIP_Init+0xcc>)
 8006c9a:	f00a fa25 	bl	80110e8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006c9e:	491c      	ldr	r1, [pc, #112]	; (8006d10 <MX_LWIP_Init+0xd0>)
 8006ca0:	481a      	ldr	r0, [pc, #104]	; (8006d0c <MX_LWIP_Init+0xcc>)
 8006ca2:	f00a fabb 	bl	801121c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	617b      	str	r3, [r7, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8006caa:	f107 0314 	add.w	r3, r7, #20
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fde1 	bl	8007878 <osSemaphoreCreate>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <MX_LWIP_Init+0xd4>)
 8006cba:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8006cbc:	4b16      	ldr	r3, [pc, #88]	; (8006d18 <MX_LWIP_Init+0xd8>)
 8006cbe:	4a13      	ldr	r2, [pc, #76]	; (8006d0c <MX_LWIP_Init+0xcc>)
 8006cc0:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006cc2:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <MX_LWIP_Init+0xd4>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <MX_LWIP_Init+0xd8>)
 8006cc8:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, link_state, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8006cca:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <MX_LWIP_Init+0xdc>)
 8006ccc:	463c      	mov	r4, r7
 8006cce:	461d      	mov	r5, r3
 8006cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	6023      	str	r3, [r4, #0]
  linkStateTaskHandle = osThreadCreate (osThread(LinkThr), &link_arg);
 8006cd8:	463b      	mov	r3, r7
 8006cda:	490f      	ldr	r1, [pc, #60]	; (8006d18 <MX_LWIP_Init+0xd8>)
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fc60 	bl	80075a2 <osThreadCreate>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	4a0e      	ldr	r2, [pc, #56]	; (8006d20 <MX_LWIP_Init+0xe0>)
 8006ce6:	6013      	str	r3, [r2, #0]
  //osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
  //osThreadCreate (osThread(LinkThr), &link_arg);
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006ce8:	4808      	ldr	r0, [pc, #32]	; (8006d0c <MX_LWIP_Init+0xcc>)
 8006cea:	f012 ff39 	bl	8019b60 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20014598 	.word	0x20014598
 8006cfc:	2001459c 	.word	0x2001459c
 8006d00:	200145a0 	.word	0x200145a0
 8006d04:	0800f0d9 	.word	0x0800f0d9
 8006d08:	080073a9 	.word	0x080073a9
 8006d0c:	20014560 	.word	0x20014560
 8006d10:	08007415 	.word	0x08007415
 8006d14:	20000330 	.word	0x20000330
 8006d18:	20014558 	.word	0x20014558
 8006d1c:	080225c8 	.word	0x080225c8
 8006d20:	2000032c 	.word	0x2000032c

08006d24 <ethernetif_phy_irq>:
/* Global Ethernet handle */
ETH_HandleTypeDef heth;

/* USER CODE BEGIN 3 */
void ethernetif_phy_irq()
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
	osSignalSet (linkStateTaskHandle, SIGNAL_LINK_INTERRUPT);
 8006d28:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <ethernetif_phy_irq+0x14>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2104      	movs	r1, #4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fc86 	bl	8007640 <osSignalSet>
}
 8006d34:	bf00      	nop
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	2000032c 	.word	0x2000032c

08006d3c <link_state>:

void link_state(const void * arg)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
    struct link_str *link_arg = (struct link_str *)arg;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	61fb      	str	r3, [r7, #28]
    uint32_t regval = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61bb      	str	r3, [r7, #24]
    osEvent event;

    for (;;)
    {
    	event = osSignalWait (SIGNAL_LINK_INTERRUPT, osWaitForever);
 8006d4c:	f107 030c 	add.w	r3, r7, #12
 8006d50:	f04f 32ff 	mov.w	r2, #4294967295
 8006d54:	2104      	movs	r1, #4
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fcb2 	bl	80076c0 <osSignalWait>

        if (event.status == osEventSignal)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d1f4      	bne.n	8006d4c <link_state+0x10>
        {
            /* Read PHY_MISR*/
            HAL_ETH_ReadPHYRegister((ETH_HandleTypeDef *)&heth, PHY_INTERRUPT_STATUS, &regval);
 8006d62:	f107 0318 	add.w	r3, r7, #24
 8006d66:	461a      	mov	r2, r3
 8006d68:	211b      	movs	r1, #27
 8006d6a:	480f      	ldr	r0, [pc, #60]	; (8006da8 <link_state+0x6c>)
 8006d6c:	f7fd fa29 	bl	80041c2 <HAL_ETH_ReadPHYRegister>

            /* Check whether the PHY link is up */
            if (regval & PHY_LINK_INT_UP_OCCURRED)
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d008      	beq.n	8006d8c <link_state+0x50>
            {
                /* network cable is connected */
                netif_set_link_up(link_arg->netif);
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f00a f9e4 	bl	801114c <netif_set_link_up>
				BSP_LED_Off(RED);
 8006d84:	2002      	movs	r0, #2
 8006d86:	f7fc fa21 	bl	80031cc <BSP_LED_Off>
 8006d8a:	e7df      	b.n	8006d4c <link_state+0x10>
            }
            else if (regval & PHY_LINK_INT_DOWN_OCCURED)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0da      	beq.n	8006d4c <link_state+0x10>
            {
            	/* network cable is dis-connected */
                netif_set_link_down(link_arg->netif);
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f00a fa0e 	bl	80111bc <netif_set_link_down>
				BSP_LED_On(RED);
 8006da0:	2002      	movs	r0, #2
 8006da2:	f7fc f9f9 	bl	8003198 <BSP_LED_On>
    	event = osSignalWait (SIGNAL_LINK_INTERRUPT, osWaitForever);
 8006da6:	e7d1      	b.n	8006d4c <link_state+0x10>
 8006da8:	20015e74 	.word	0x20015e74

08006dac <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08e      	sub	sp, #56	; 0x38
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	605a      	str	r2, [r3, #4]
 8006dbe:	609a      	str	r2, [r3, #8]
 8006dc0:	60da      	str	r2, [r3, #12]
 8006dc2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a4a      	ldr	r2, [pc, #296]	; (8006ef4 <HAL_ETH_MspInit+0x148>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f040 808d 	bne.w	8006eea <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	623b      	str	r3, [r7, #32]
 8006dd4:	4b48      	ldr	r3, [pc, #288]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	4a47      	ldr	r2, [pc, #284]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006dda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006dde:	6313      	str	r3, [r2, #48]	; 0x30
 8006de0:	4b45      	ldr	r3, [pc, #276]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de8:	623b      	str	r3, [r7, #32]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2300      	movs	r3, #0
 8006dee:	61fb      	str	r3, [r7, #28]
 8006df0:	4b41      	ldr	r3, [pc, #260]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	4a40      	ldr	r2, [pc, #256]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8006dfc:	4b3e      	ldr	r3, [pc, #248]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	4b3a      	ldr	r3, [pc, #232]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	4a39      	ldr	r2, [pc, #228]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e16:	6313      	str	r3, [r2, #48]	; 0x30
 8006e18:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	4b33      	ldr	r3, [pc, #204]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	4a32      	ldr	r2, [pc, #200]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e2e:	f043 0304 	orr.w	r3, r3, #4
 8006e32:	6313      	str	r3, [r2, #48]	; 0x30
 8006e34:	4b30      	ldr	r3, [pc, #192]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e40:	2300      	movs	r3, #0
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	4b2c      	ldr	r3, [pc, #176]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	4a2b      	ldr	r2, [pc, #172]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e50:	4b29      	ldr	r3, [pc, #164]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e64:	4a24      	ldr	r2, [pc, #144]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e66:	f043 0302 	orr.w	r3, r3, #2
 8006e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006e6c:	4b22      	ldr	r3, [pc, #136]	; (8006ef8 <HAL_ETH_MspInit+0x14c>)
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006e78:	2332      	movs	r3, #50	; 0x32
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e84:	2303      	movs	r3, #3
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e88:	230b      	movs	r3, #11
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e90:	4619      	mov	r1, r3
 8006e92:	481a      	ldr	r0, [pc, #104]	; (8006efc <HAL_ETH_MspInit+0x150>)
 8006e94:	f7fe f824 	bl	8004ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006e98:	2386      	movs	r3, #134	; 0x86
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ea8:	230b      	movs	r3, #11
 8006eaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4813      	ldr	r0, [pc, #76]	; (8006f00 <HAL_ETH_MspInit+0x154>)
 8006eb4:	f7fe f814 	bl	8004ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXEN_Pin|RMII_TXD0_Pin|RMII_TXD1_Pin;
 8006eb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006eca:	230b      	movs	r3, #11
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	480b      	ldr	r0, [pc, #44]	; (8006f04 <HAL_ETH_MspInit+0x158>)
 8006ed6:	f7fe f803 	bl	8004ee0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006eda:	2200      	movs	r2, #0
 8006edc:	2105      	movs	r1, #5
 8006ede:	203d      	movs	r0, #61	; 0x3d
 8006ee0:	f7fd ffd4 	bl	8004e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006ee4:	203d      	movs	r0, #61	; 0x3d
 8006ee6:	f7fd ffed 	bl	8004ec4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006eea:	bf00      	nop
 8006eec:	3738      	adds	r7, #56	; 0x38
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40028000 	.word	0x40028000
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	40020800 	.word	0x40020800
 8006f00:	40020000 	.word	0x40020000
 8006f04:	40020400 	.word	0x40020400

08006f08 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <HAL_ETH_RxCpltCallback+0x1c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fd1b 	bl	8007950 <osSemaphoreRelease>
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000334 	.word	0x20000334

08006f28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006f28:	b5b0      	push	{r4, r5, r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006f30:	4b54      	ldr	r3, [pc, #336]	; (8007084 <low_level_init+0x15c>)
 8006f32:	4a55      	ldr	r2, [pc, #340]	; (8007088 <low_level_init+0x160>)
 8006f34:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006f36:	4b53      	ldr	r3, [pc, #332]	; (8007084 <low_level_init+0x15c>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006f3c:	4b51      	ldr	r3, [pc, #324]	; (8007084 <low_level_init+0x15c>)
 8006f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f42:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006f44:	4b4f      	ldr	r3, [pc, #316]	; (8007084 <low_level_init+0x15c>)
 8006f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f4a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = KSZ8021RNL_PHY_ADDRESS;
 8006f4c:	4b4d      	ldr	r3, [pc, #308]	; (8007084 <low_level_init+0x15c>)
 8006f4e:	2203      	movs	r2, #3
 8006f50:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x10;
 8006f52:	2310      	movs	r3, #16
 8006f54:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x55;
 8006f58:	2355      	movs	r3, #85	; 0x55
 8006f5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0x03;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x00;
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x44;
 8006f6a:	2344      	movs	r3, #68	; 0x44
 8006f6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x12;
 8006f70:	2312      	movs	r3, #18
 8006f72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 8006f76:	4a43      	ldr	r2, [pc, #268]	; (8007084 <low_level_init+0x15c>)
 8006f78:	f107 0320 	add.w	r3, r7, #32
 8006f7c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006f7e:	4b41      	ldr	r3, [pc, #260]	; (8007084 <low_level_init+0x15c>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006f84:	4b3f      	ldr	r3, [pc, #252]	; (8007084 <low_level_init+0x15c>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006f8a:	4b3e      	ldr	r3, [pc, #248]	; (8007084 <low_level_init+0x15c>)
 8006f8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006f90:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  phy_bootstrap();
 8006f92:	f7fc fbe5 	bl	8003760 <phy_bootstrap>
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006f96:	483b      	ldr	r0, [pc, #236]	; (8007084 <low_level_init+0x15c>)
 8006f98:	f7fc fd3c 	bl	8003a14 <HAL_ETH_Init>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hal_eth_init_status == HAL_OK)
 8006fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d108      	bne.n	8006fbc <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006fb0:	f043 0304 	orr.w	r3, r3, #4
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	4a33      	ldr	r2, [pc, #204]	; (800708c <low_level_init+0x164>)
 8006fc0:	4933      	ldr	r1, [pc, #204]	; (8007090 <low_level_init+0x168>)
 8006fc2:	4830      	ldr	r0, [pc, #192]	; (8007084 <low_level_init+0x15c>)
 8006fc4:	f7fc fe3a 	bl	8003c3c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006fc8:	2304      	movs	r3, #4
 8006fca:	4a32      	ldr	r2, [pc, #200]	; (8007094 <low_level_init+0x16c>)
 8006fcc:	4932      	ldr	r1, [pc, #200]	; (8007098 <low_level_init+0x170>)
 8006fce:	482d      	ldr	r0, [pc, #180]	; (8007084 <low_level_init+0x15c>)
 8006fd0:	f7fc fe9d 	bl	8003d0e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006fdc:	4b29      	ldr	r3, [pc, #164]	; (8007084 <low_level_init+0x15c>)
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	781a      	ldrb	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006fe8:	4b26      	ldr	r3, [pc, #152]	; (8007084 <low_level_init+0x15c>)
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	785a      	ldrb	r2, [r3, #1]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006ff4:	4b23      	ldr	r3, [pc, #140]	; (8007084 <low_level_init+0x15c>)
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	789a      	ldrb	r2, [r3, #2]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007000:	4b20      	ldr	r3, [pc, #128]	; (8007084 <low_level_init+0x15c>)
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	78da      	ldrb	r2, [r3, #3]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800700c:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <low_level_init+0x15c>)
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	791a      	ldrb	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007018:	4b1a      	ldr	r3, [pc, #104]	; (8007084 <low_level_init+0x15c>)
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	795a      	ldrb	r2, [r3, #5]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800702a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007032:	f043 030a 	orr.w	r3, r3, #10
 8007036:	b2da      	uxtb	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800703e:	2300      	movs	r3, #0
 8007040:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007042:	f107 031c 	add.w	r3, r7, #28
 8007046:	2101      	movs	r1, #1
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fc15 	bl	8007878 <osSemaphoreCreate>
 800704e:	4603      	mov	r3, r0
 8007050:	4a12      	ldr	r2, [pc, #72]	; (800709c <low_level_init+0x174>)
 8007052:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007054:	4b12      	ldr	r3, [pc, #72]	; (80070a0 <low_level_init+0x178>)
 8007056:	f107 0408 	add.w	r4, r7, #8
 800705a:	461d      	mov	r5, r3
 800705c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800705e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8007064:	f107 0308 	add.w	r3, r7, #8
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fa99 	bl	80075a2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007070:	4804      	ldr	r0, [pc, #16]	; (8007084 <low_level_init+0x15c>)
 8007072:	f7fd f974 	bl	800435e <HAL_ETH_Start>

/* USER CODE BEGIN PHY_PRE_CONFIG */
    phy_init(&heth);
 8007076:	4803      	ldr	r0, [pc, #12]	; (8007084 <low_level_init+0x15c>)
 8007078:	f7fc fbc0 	bl	80037fc <phy_init>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800707c:	bf00      	nop
 800707e:	3728      	adds	r7, #40	; 0x28
 8007080:	46bd      	mov	sp, r7
 8007082:	bdb0      	pop	{r4, r5, r7, pc}
 8007084:	20015e74 	.word	0x20015e74
 8007088:	40028000 	.word	0x40028000
 800708c:	20015ebc 	.word	0x20015ebc
 8007090:	200145a4 	.word	0x200145a4
 8007094:	20014624 	.word	0x20014624
 8007098:	20015df4 	.word	0x20015df4
 800709c:	20000334 	.word	0x20000334
 80070a0:	080225e4 	.word	0x080225e4

080070a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	; 0x28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80070ae:	4b4b      	ldr	r3, [pc, #300]	; (80071dc <low_level_output+0x138>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80070c6:	4b45      	ldr	r3, [pc, #276]	; (80071dc <low_level_output+0x138>)
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	623b      	str	r3, [r7, #32]
 80070d4:	e05a      	b.n	800718c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da03      	bge.n	80070e6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80070de:	23f8      	movs	r3, #248	; 0xf8
 80070e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80070e4:	e05c      	b.n	80071a0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	895b      	ldrh	r3, [r3, #10]
 80070ea:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80070f0:	e02f      	b.n	8007152 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	18d0      	adds	r0, r2, r3
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	18d1      	adds	r1, r2, r3
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007106:	3304      	adds	r3, #4
 8007108:	461a      	mov	r2, r3
 800710a:	f016 ffcb 	bl	801e0a4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	da03      	bge.n	8007124 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800711c:	23f8      	movs	r3, #248	; 0xf8
 800711e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007122:	e03d      	b.n	80071a0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007134:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007140:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800714c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4413      	add	r3, r2
 8007158:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800715c:	4293      	cmp	r3, r2
 800715e:	d8c8      	bhi.n	80070f2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	18d0      	adds	r0, r2, r3
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	4413      	add	r3, r2
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4619      	mov	r1, r3
 8007172:	f016 ff97 	bl	801e0a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	623b      	str	r3, [r7, #32]
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1a1      	bne.n	80070d6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007192:	6979      	ldr	r1, [r7, #20]
 8007194:	4811      	ldr	r0, [pc, #68]	; (80071dc <low_level_output+0x138>)
 8007196:	f7fc fe27 	bl	8003de8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <low_level_output+0x138>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a8:	3314      	adds	r3, #20
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00d      	beq.n	80071d0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <low_level_output+0x138>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071bc:	3314      	adds	r3, #20
 80071be:	2220      	movs	r2, #32
 80071c0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80071c2:	4b06      	ldr	r3, [pc, #24]	; (80071dc <low_level_output+0x138>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ca:	3304      	adds	r3, #4
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80071d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3728      	adds	r7, #40	; 0x28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20015e74 	.word	0x20015e74

080071e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08c      	sub	sp, #48	; 0x30
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007200:	2300      	movs	r3, #0
 8007202:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007204:	484f      	ldr	r0, [pc, #316]	; (8007344 <low_level_input+0x164>)
 8007206:	f7fc fed9 	bl	8003fbc <HAL_ETH_GetReceivedFrame_IT>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <low_level_input+0x34>

    return NULL;
 8007210:	2300      	movs	r3, #0
 8007212:	e092      	b.n	800733a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007214:	4b4b      	ldr	r3, [pc, #300]	; (8007344 <low_level_input+0x164>)
 8007216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007218:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800721a:	4b4a      	ldr	r3, [pc, #296]	; (8007344 <low_level_input+0x164>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007220:	89fb      	ldrh	r3, [r7, #14]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007226:	89fb      	ldrh	r3, [r7, #14]
 8007228:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800722c:	4619      	mov	r1, r3
 800722e:	2000      	movs	r0, #0
 8007230:	f00a f8be 	bl	80113b0 <pbuf_alloc>
 8007234:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d04b      	beq.n	80072d4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800723c:	4b41      	ldr	r3, [pc, #260]	; (8007344 <low_level_input+0x164>)
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	62bb      	str	r3, [r7, #40]	; 0x28
 800724a:	e040      	b.n	80072ce <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724e:	895b      	ldrh	r3, [r3, #10]
 8007250:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007256:	e021      	b.n	800729c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	18d0      	adds	r0, r2, r3
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	18d1      	adds	r1, r2, r3
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800726c:	3304      	adds	r3, #4
 800726e:	461a      	mov	r2, r3
 8007270:	f016 ff18 	bl	801e0a4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800728a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007296:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d8d6      	bhi.n	8007258 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	18d0      	adds	r0, r2, r3
 80072b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4619      	mov	r1, r3
 80072bc:	f016 fef2 	bl	801e0a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	4413      	add	r3, r2
 80072c6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1bb      	bne.n	800724c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80072d4:	4b1b      	ldr	r3, [pc, #108]	; (8007344 <low_level_input+0x164>)
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80072da:	2300      	movs	r3, #0
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	e00b      	b.n	80072f8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	3301      	adds	r3, #1
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	4b12      	ldr	r3, [pc, #72]	; (8007344 <low_level_input+0x164>)
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d3ee      	bcc.n	80072e0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007302:	4b10      	ldr	r3, [pc, #64]	; (8007344 <low_level_input+0x164>)
 8007304:	2200      	movs	r2, #0
 8007306:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007308:	4b0e      	ldr	r3, [pc, #56]	; (8007344 <low_level_input+0x164>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007310:	3314      	adds	r3, #20
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00d      	beq.n	8007338 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <low_level_input+0x164>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007324:	3314      	adds	r3, #20
 8007326:	2280      	movs	r2, #128	; 0x80
 8007328:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <low_level_input+0x164>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007332:	3308      	adds	r3, #8
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800733a:	4618      	mov	r0, r3
 800733c:	3730      	adds	r7, #48	; 0x30
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20015e74 	.word	0x20015e74

08007348 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007354:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <ethernetif_input+0x58>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f04f 31ff 	mov.w	r1, #4294967295
 800735c:	4618      	mov	r0, r3
 800735e:	f000 faa9 	bl	80078b4 <osSemaphoreWait>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f5      	bne.n	8007354 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8007368:	480e      	ldr	r0, [pc, #56]	; (80073a4 <ethernetif_input+0x5c>)
 800736a:	f016 fd07 	bl	801dd7c <sys_mutex_lock>
        p = low_level_input( netif );
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff ff36 	bl	80071e0 <low_level_input>
 8007374:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	68f9      	ldr	r1, [r7, #12]
 8007382:	68b8      	ldr	r0, [r7, #8]
 8007384:	4798      	blx	r3
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800738c:	68b8      	ldr	r0, [r7, #8]
 800738e:	f00a fb25 	bl	80119dc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007392:	4804      	ldr	r0, [pc, #16]	; (80073a4 <ethernetif_input+0x5c>)
 8007394:	f016 fd01 	bl	801dd9a <sys_mutex_unlock>
      } while(p!=NULL);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e4      	bne.n	8007368 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800739e:	e7d9      	b.n	8007354 <ethernetif_input+0xc>
 80073a0:	20000334 	.word	0x20000334
 80073a4:	200176d0 	.word	0x200176d0

080073a8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <ethernetif_init+0x1c>
 80073b6:	4b0e      	ldr	r3, [pc, #56]	; (80073f0 <ethernetif_init+0x48>)
 80073b8:	f240 2246 	movw	r2, #582	; 0x246
 80073bc:	490d      	ldr	r1, [pc, #52]	; (80073f4 <ethernetif_init+0x4c>)
 80073be:	480e      	ldr	r0, [pc, #56]	; (80073f8 <ethernetif_init+0x50>)
 80073c0:	f017 fbb4 	bl	801eb2c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2273      	movs	r2, #115	; 0x73
 80073c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2274      	movs	r2, #116	; 0x74
 80073d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a09      	ldr	r2, [pc, #36]	; (80073fc <ethernetif_init+0x54>)
 80073d8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a08      	ldr	r2, [pc, #32]	; (8007400 <ethernetif_init+0x58>)
 80073de:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fda1 	bl	8006f28 <low_level_init>

  return ERR_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	080225f8 	.word	0x080225f8
 80073f4:	08022614 	.word	0x08022614
 80073f8:	08022624 	.word	0x08022624
 80073fc:	0801bb05 	.word	0x0801bb05
 8007400:	080070a5 	.word	0x080070a5

08007404 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007408:	f7fd fc58 	bl	8004cbc <HAL_GetTick>
 800740c:	4603      	mov	r3, r0
}
 800740e:	4618      	mov	r0, r3
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800742a:	089b      	lsrs	r3, r3, #2
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d05d      	beq.n	80074f2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007436:	4b34      	ldr	r3, [pc, #208]	; (8007508 <ethernetif_update_config+0xf4>)
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d03f      	beq.n	80074be <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800743e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007442:	2100      	movs	r1, #0
 8007444:	4830      	ldr	r0, [pc, #192]	; (8007508 <ethernetif_update_config+0xf4>)
 8007446:	f7fc ff24 	bl	8004292 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800744a:	f7fd fc37 	bl	8004cbc <HAL_GetTick>
 800744e:	4603      	mov	r3, r0
 8007450:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007452:	f107 0308 	add.w	r3, r7, #8
 8007456:	461a      	mov	r2, r3
 8007458:	2101      	movs	r1, #1
 800745a:	482b      	ldr	r0, [pc, #172]	; (8007508 <ethernetif_update_config+0xf4>)
 800745c:	f7fc feb1 	bl	80041c2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007460:	f7fd fc2c 	bl	8004cbc <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800746e:	d828      	bhi.n	80074c2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0eb      	beq.n	8007452 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800747a:	f107 0308 	add.w	r3, r7, #8
 800747e:	461a      	mov	r2, r3
 8007480:	211e      	movs	r1, #30
 8007482:	4821      	ldr	r0, [pc, #132]	; (8007508 <ethernetif_update_config+0xf4>)
 8007484:	f7fc fe9d 	bl	80041c2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b00      	cmp	r3, #0
 8007490:	d004      	beq.n	800749c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007492:	4b1d      	ldr	r3, [pc, #116]	; (8007508 <ethernetif_update_config+0xf4>)
 8007494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007498:	60da      	str	r2, [r3, #12]
 800749a:	e002      	b.n	80074a2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800749c:	4b1a      	ldr	r3, [pc, #104]	; (8007508 <ethernetif_update_config+0xf4>)
 800749e:	2200      	movs	r2, #0
 80074a0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80074ac:	4b16      	ldr	r3, [pc, #88]	; (8007508 <ethernetif_update_config+0xf4>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
 80074b2:	e016      	b.n	80074e2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80074b4:	4b14      	ldr	r3, [pc, #80]	; (8007508 <ethernetif_update_config+0xf4>)
 80074b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	e011      	b.n	80074e2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80074be:	bf00      	nop
 80074c0:	e000      	b.n	80074c4 <ethernetif_update_config+0xb0>
          goto error;
 80074c2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <ethernetif_update_config+0xf4>)
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	08db      	lsrs	r3, r3, #3
 80074ca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80074cc:	4b0e      	ldr	r3, [pc, #56]	; (8007508 <ethernetif_update_config+0xf4>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80074d4:	4313      	orrs	r3, r2
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	2100      	movs	r1, #0
 80074dc:	480a      	ldr	r0, [pc, #40]	; (8007508 <ethernetif_update_config+0xf4>)
 80074de:	f7fc fed8 	bl	8004292 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80074e2:	2100      	movs	r1, #0
 80074e4:	4808      	ldr	r0, [pc, #32]	; (8007508 <ethernetif_update_config+0xf4>)
 80074e6:	f7fc ff99 	bl	800441c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80074ea:	4807      	ldr	r0, [pc, #28]	; (8007508 <ethernetif_update_config+0xf4>)
 80074ec:	f7fc ff37 	bl	800435e <HAL_ETH_Start>
 80074f0:	e002      	b.n	80074f8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80074f2:	4805      	ldr	r0, [pc, #20]	; (8007508 <ethernetif_update_config+0xf4>)
 80074f4:	f7fc ff62 	bl	80043bc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f807 	bl	800750c <ethernetif_notify_conn_changed>
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20015e74 	.word	0x20015e74

0800750c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800752e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007532:	2b84      	cmp	r3, #132	; 0x84
 8007534:	d005      	beq.n	8007542 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007536:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4413      	add	r3, r2
 800753e:	3303      	adds	r3, #3
 8007540:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007542:	68fb      	ldr	r3, [r7, #12]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007556:	f3ef 8305 	mrs	r3, IPSR
 800755a:	607b      	str	r3, [r7, #4]
  return(result);
 800755c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf14      	ite	ne
 8007562:	2301      	movne	r3, #1
 8007564:	2300      	moveq	r3, #0
 8007566:	b2db      	uxtb	r3, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007578:	f001 fd14 	bl	8008fa4 <vTaskStartScheduler>
  
  return osOK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	bd80      	pop	{r7, pc}

08007582 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007586:	f7ff ffe3 	bl	8007550 <inHandlerMode>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007590:	f001 fe12 	bl	80091b8 <xTaskGetTickCountFromISR>
 8007594:	4603      	mov	r3, r0
 8007596:	e002      	b.n	800759e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007598:	f001 fdfe 	bl	8009198 <xTaskGetTickCount>
 800759c:	4603      	mov	r3, r0
  }
}
 800759e:	4618      	mov	r0, r3
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80075a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a4:	b087      	sub	sp, #28
 80075a6:	af02      	add	r7, sp, #8
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685c      	ldr	r4, [r3, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075b8:	b29e      	uxth	r6, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff ffad 	bl	8007520 <makeFreeRtosPriority>
 80075c6:	4602      	mov	r2, r0
 80075c8:	f107 030c 	add.w	r3, r7, #12
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	9200      	str	r2, [sp, #0]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	4632      	mov	r2, r6
 80075d4:	4629      	mov	r1, r5
 80075d6:	4620      	mov	r0, r4
 80075d8:	f001 fad6 	bl	8008b88 <xTaskCreate>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d001      	beq.n	80075e6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	e000      	b.n	80075e8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80075e6:	68fb      	ldr	r3, [r7, #12]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075f0 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 80075f4:	f002 f8d2 	bl	800979c <xTaskGetCurrentTaskHandle>
 80075f8:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	bd80      	pop	{r7, pc}

080075fe <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 fc08 	bl	8008e1c <vTaskDelete>
  return osOK;
 800760c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <osDelay+0x16>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	e000      	b.n	800762e <osDelay+0x18>
 800762c:	2301      	movs	r3, #1
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fc84 	bl	8008f3c <vTaskDelay>
  
  return osOK;
 8007634:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af02      	add	r7, sp, #8
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8007652:	f7ff ff7d 	bl	8007550 <inHandlerMode>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d01c      	beq.n	8007696 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	f107 0208 	add.w	r2, r7, #8
 8007662:	f107 030c 	add.w	r3, r7, #12
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	4613      	mov	r3, r2
 800766a:	2201      	movs	r2, #1
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f002 fb7f 	bl	8009d70 <xTaskGenericNotifyFromISR>
 8007672:	4603      	mov	r3, r0
 8007674:	2b01      	cmp	r3, #1
 8007676:	d002      	beq.n	800767e <osSignalSet+0x3e>
      return 0x80000000;
 8007678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800767c:	e019      	b.n	80076b2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d015      	beq.n	80076b0 <osSignalSet+0x70>
 8007684:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <osSignalSet+0x7c>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	e00c      	b.n	80076b0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	f107 0308 	add.w	r3, r7, #8
 800769c:	2201      	movs	r2, #1
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f002 faa8 	bl	8009bf4 <xTaskGenericNotify>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d002      	beq.n	80076b0 <osSignalSet+0x70>
    return 0x80000000;
 80076aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076ae:	e000      	b.n	80076b2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80076b0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80076c0:	b590      	push	{r4, r7, lr}
 80076c2:	b089      	sub	sp, #36	; 0x24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d103      	bne.n	80076e4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	e009      	b.n	80076f8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d006      	beq.n	80076f8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <osSignalWait+0x38>
      ticks = 1;
 80076f4:	2301      	movs	r3, #1
 80076f6:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80076f8:	f7ff ff2a 	bl	8007550 <inHandlerMode>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8007702:	2382      	movs	r3, #130	; 0x82
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	e01b      	b.n	8007740 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	f107 0310 	add.w	r3, r7, #16
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	2000      	movs	r0, #0
 8007714:	f002 fa0e 	bl	8009b34 <xTaskNotifyWait>
 8007718:	4603      	mov	r3, r0
 800771a:	2b01      	cmp	r3, #1
 800771c:	d008      	beq.n	8007730 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d102      	bne.n	800772a <osSignalWait+0x6a>
 8007724:	2300      	movs	r3, #0
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	e00a      	b.n	8007740 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800772a:	2340      	movs	r3, #64	; 0x40
 800772c:	613b      	str	r3, [r7, #16]
 800772e:	e007      	b.n	8007740 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	da02      	bge.n	800773c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8007736:	2386      	movs	r3, #134	; 0x86
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	e001      	b.n	8007740 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800773c:	2308      	movs	r3, #8
 800773e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	461c      	mov	r4, r3
 8007744:	f107 0310 	add.w	r3, r7, #16
 8007748:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800774c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	3724      	adds	r7, #36	; 0x24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd90      	pop	{r4, r7, pc}

08007758 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8007760:	2001      	movs	r0, #1
 8007762:	f000 fbba 	bl	8007eda <xQueueCreateMutex>
 8007766:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800777a:	2300      	movs	r3, #0
 800777c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <osMutexWait+0x18>
    return osErrorParameter;
 8007784:	2380      	movs	r3, #128	; 0x80
 8007786:	e03a      	b.n	80077fe <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007792:	d103      	bne.n	800779c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007794:	f04f 33ff 	mov.w	r3, #4294967295
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	e009      	b.n	80077b0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d006      	beq.n	80077b0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <osMutexWait+0x40>
      ticks = 1;
 80077ac:	2301      	movs	r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80077b0:	f7ff fece 	bl	8007550 <inHandlerMode>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d017      	beq.n	80077ea <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80077ba:	f107 0308 	add.w	r3, r7, #8
 80077be:	461a      	mov	r2, r3
 80077c0:	2100      	movs	r1, #0
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 ffb4 	bl	8008730 <xQueueReceiveFromISR>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d001      	beq.n	80077d2 <osMutexWait+0x62>
      return osErrorOS;
 80077ce:	23ff      	movs	r3, #255	; 0xff
 80077d0:	e015      	b.n	80077fe <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d011      	beq.n	80077fc <osMutexWait+0x8c>
 80077d8:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <osMutexWait+0x98>)
 80077da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	e008      	b.n	80077fc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80077ea:	68f9      	ldr	r1, [r7, #12]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fe93 	bl	8008518 <xQueueSemaphoreTake>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d001      	beq.n	80077fc <osMutexWait+0x8c>
    return osErrorOS;
 80077f8:	23ff      	movs	r3, #255	; 0xff
 80077fa:	e000      	b.n	80077fe <osMutexWait+0x8e>
  }
  
  return osOK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007818:	2300      	movs	r3, #0
 800781a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800781c:	f7ff fe98 	bl	8007550 <inHandlerMode>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d016      	beq.n	8007854 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007826:	f107 0308 	add.w	r3, r7, #8
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fd06 	bl	800823e <xQueueGiveFromISR>
 8007832:	4603      	mov	r3, r0
 8007834:	2b01      	cmp	r3, #1
 8007836:	d001      	beq.n	800783c <osMutexRelease+0x30>
      return osErrorOS;
 8007838:	23ff      	movs	r3, #255	; 0xff
 800783a:	e017      	b.n	800786c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d013      	beq.n	800786a <osMutexRelease+0x5e>
 8007842:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <osMutexRelease+0x68>)
 8007844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	e00a      	b.n	800786a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007854:	2300      	movs	r3, #0
 8007856:	2200      	movs	r2, #0
 8007858:	2100      	movs	r1, #0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fb56 	bl	8007f0c <xQueueGenericSend>
 8007860:	4603      	mov	r3, r0
 8007862:	2b01      	cmp	r3, #1
 8007864:	d001      	beq.n	800786a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007866:	23ff      	movs	r3, #255	; 0xff
 8007868:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800786a:	68fb      	ldr	r3, [r7, #12]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d110      	bne.n	80078aa <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8007888:	2203      	movs	r2, #3
 800788a:	2100      	movs	r1, #0
 800788c:	2001      	movs	r0, #1
 800788e:	f000 fab5 	bl	8007dfc <xQueueGenericCreate>
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <osSemaphoreCreate+0x2e>
 800789a:	2300      	movs	r3, #0
 800789c:	2200      	movs	r2, #0
 800789e:	2100      	movs	r1, #0
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fb33 	bl	8007f0c <xQueueGenericSend>
    return sema;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	e000      	b.n	80078ac <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80078aa:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80078c8:	2380      	movs	r3, #128	; 0x80
 80078ca:	e03a      	b.n	8007942 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d103      	bne.n	80078e0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80078d8:	f04f 33ff 	mov.w	r3, #4294967295
 80078dc:	60fb      	str	r3, [r7, #12]
 80078de:	e009      	b.n	80078f4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d006      	beq.n	80078f4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <osSemaphoreWait+0x40>
      ticks = 1;
 80078f0:	2301      	movs	r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80078f4:	f7ff fe2c 	bl	8007550 <inHandlerMode>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d017      	beq.n	800792e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80078fe:	f107 0308 	add.w	r3, r7, #8
 8007902:	461a      	mov	r2, r3
 8007904:	2100      	movs	r1, #0
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 ff12 	bl	8008730 <xQueueReceiveFromISR>
 800790c:	4603      	mov	r3, r0
 800790e:	2b01      	cmp	r3, #1
 8007910:	d001      	beq.n	8007916 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007912:	23ff      	movs	r3, #255	; 0xff
 8007914:	e015      	b.n	8007942 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d011      	beq.n	8007940 <osSemaphoreWait+0x8c>
 800791c:	4b0b      	ldr	r3, [pc, #44]	; (800794c <osSemaphoreWait+0x98>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	e008      	b.n	8007940 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800792e:	68f9      	ldr	r1, [r7, #12]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fdf1 	bl	8008518 <xQueueSemaphoreTake>
 8007936:	4603      	mov	r3, r0
 8007938:	2b01      	cmp	r3, #1
 800793a:	d001      	beq.n	8007940 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800793c:	23ff      	movs	r3, #255	; 0xff
 800793e:	e000      	b.n	8007942 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	e000ed04 	.word	0xe000ed04

08007950 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800795c:	2300      	movs	r3, #0
 800795e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007960:	f7ff fdf6 	bl	8007550 <inHandlerMode>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d016      	beq.n	8007998 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800796a:	f107 0308 	add.w	r3, r7, #8
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fc64 	bl	800823e <xQueueGiveFromISR>
 8007976:	4603      	mov	r3, r0
 8007978:	2b01      	cmp	r3, #1
 800797a:	d001      	beq.n	8007980 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800797c:	23ff      	movs	r3, #255	; 0xff
 800797e:	e017      	b.n	80079b0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d013      	beq.n	80079ae <osSemaphoreRelease+0x5e>
 8007986:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <osSemaphoreRelease+0x68>)
 8007988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	e00a      	b.n	80079ae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007998:	2300      	movs	r3, #0
 800799a:	2200      	movs	r2, #0
 800799c:	2100      	movs	r1, #0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fab4 	bl	8007f0c <xQueueGenericSend>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d001      	beq.n	80079ae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80079aa:	23ff      	movs	r3, #255	; 0xff
 80079ac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80079ae:	68fb      	ldr	r3, [r7, #12]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80079c4:	f7ff fdc4 	bl	8007550 <inHandlerMode>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80079ce:	2382      	movs	r3, #130	; 0x82
 80079d0:	e003      	b.n	80079da <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 ff68 	bl	80088a8 <vQueueDelete>

  return osOK; 
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	4619      	mov	r1, r3
 80079f8:	f000 fa00 	bl	8007dfc <xQueueGenericCreate>
 80079fc:	4603      	mov	r3, r0
#endif
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <osMessagePut+0x1e>
    ticks = 1;
 8007a22:	2301      	movs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007a26:	f7ff fd93 	bl	8007550 <inHandlerMode>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d018      	beq.n	8007a62 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007a30:	f107 0210 	add.w	r2, r7, #16
 8007a34:	f107 0108 	add.w	r1, r7, #8
 8007a38:	2300      	movs	r3, #0
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fb64 	bl	8008108 <xQueueGenericSendFromISR>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d001      	beq.n	8007a4a <osMessagePut+0x42>
      return osErrorOS;
 8007a46:	23ff      	movs	r3, #255	; 0xff
 8007a48:	e018      	b.n	8007a7c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d014      	beq.n	8007a7a <osMessagePut+0x72>
 8007a50:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <osMessagePut+0x7c>)
 8007a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	e00b      	b.n	8007a7a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007a62:	f107 0108 	add.w	r1, r7, #8
 8007a66:	2300      	movs	r3, #0
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 fa4e 	bl	8007f0c <xQueueGenericSend>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d001      	beq.n	8007a7a <osMessagePut+0x72>
      return osErrorOS;
 8007a76:	23ff      	movs	r3, #255	; 0xff
 8007a78:	e000      	b.n	8007a7c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007a88:	b590      	push	{r4, r7, lr}
 8007a8a:	b08b      	sub	sp, #44	; 0x2c
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007aa2:	2380      	movs	r3, #128	; 0x80
 8007aa4:	617b      	str	r3, [r7, #20]
    return event;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	461c      	mov	r4, r3
 8007aaa:	f107 0314 	add.w	r3, r7, #20
 8007aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ab6:	e054      	b.n	8007b62 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac6:	d103      	bne.n	8007ad0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ace:	e009      	b.n	8007ae4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d006      	beq.n	8007ae4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <osMessageGet+0x5c>
      ticks = 1;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007ae4:	f7ff fd34 	bl	8007550 <inHandlerMode>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d01c      	beq.n	8007b28 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007aee:	f107 0220 	add.w	r2, r7, #32
 8007af2:	f107 0314 	add.w	r3, r7, #20
 8007af6:	3304      	adds	r3, #4
 8007af8:	4619      	mov	r1, r3
 8007afa:	68b8      	ldr	r0, [r7, #8]
 8007afc:	f000 fe18 	bl	8008730 <xQueueReceiveFromISR>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d102      	bne.n	8007b0c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007b06:	2310      	movs	r3, #16
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	e001      	b.n	8007b10 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d01d      	beq.n	8007b52 <osMessageGet+0xca>
 8007b16:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <osMessageGet+0xe4>)
 8007b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	e014      	b.n	8007b52 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007b28:	f107 0314 	add.w	r3, r7, #20
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b30:	4619      	mov	r1, r3
 8007b32:	68b8      	ldr	r0, [r7, #8]
 8007b34:	f000 fc10 	bl	8008358 <xQueueReceive>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d102      	bne.n	8007b44 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007b3e:	2310      	movs	r3, #16
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e006      	b.n	8007b52 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <osMessageGet+0xc6>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e000      	b.n	8007b50 <osMessageGet+0xc8>
 8007b4e:	2340      	movs	r3, #64	; 0x40
 8007b50:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	461c      	mov	r4, r3
 8007b56:	f107 0314 	add.w	r3, r7, #20
 8007b5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	372c      	adds	r7, #44	; 0x2c
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd90      	pop	{r4, r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	e000ed04 	.word	0xe000ed04

08007b70 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007b78:	f7ff fcea 	bl	8007550 <inHandlerMode>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fe72 	bl	800886c <uxQueueMessagesWaitingFromISR>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	e003      	b.n	8007b94 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fe4f 	bl	8008830 <uxQueueMessagesWaiting>
 8007b92:	4603      	mov	r3, r0
  }
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007ba4:	f7ff fcd4 	bl	8007550 <inHandlerMode>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <osMessageDelete+0x16>
    return osErrorISR;
 8007bae:	2382      	movs	r3, #130	; 0x82
 8007bb0:	e003      	b.n	8007bba <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fe78 	bl	80088a8 <vQueueDelete>

  return osOK; 
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f103 0208 	add.w	r2, r3, #8
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bda:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f103 0208 	add.w	r2, r3, #8
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f103 0208 	add.w	r2, r3, #8
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]
}
 8007c58:	bf00      	nop
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7a:	d103      	bne.n	8007c84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	60fb      	str	r3, [r7, #12]
 8007c82:	e00c      	b.n	8007c9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3308      	adds	r3, #8
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	e002      	b.n	8007c92 <vListInsert+0x2e>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d2f6      	bcs.n	8007c8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	601a      	str	r2, [r3, #0]
}
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6892      	ldr	r2, [r2, #8]
 8007cec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6852      	ldr	r2, [r2, #4]
 8007cf6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d103      	bne.n	8007d0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689a      	ldr	r2, [r3, #8]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	1e5a      	subs	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d56:	f002 fa85 	bl	800a264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d66:	fb01 f303 	mul.w	r3, r1, r3
 8007d6a:	441a      	add	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d86:	3b01      	subs	r3, #1
 8007d88:	68f9      	ldr	r1, [r7, #12]
 8007d8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d8c:	fb01 f303 	mul.w	r3, r1, r3
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	22ff      	movs	r2, #255	; 0xff
 8007d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	22ff      	movs	r2, #255	; 0xff
 8007da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d114      	bne.n	8007dd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01a      	beq.n	8007dea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3310      	adds	r3, #16
 8007db8:	4618      	mov	r0, r3
 8007dba:	f001 fb4d 	bl	8009458 <xTaskRemoveFromEventList>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d012      	beq.n	8007dea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <xQueueGenericReset+0xcc>)
 8007dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	e009      	b.n	8007dea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3310      	adds	r3, #16
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff fef1 	bl	8007bc2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3324      	adds	r3, #36	; 0x24
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff feec 	bl	8007bc2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007dea:	f002 fa6b 	bl	800a2c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007dee:	2301      	movs	r3, #1
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08a      	sub	sp, #40	; 0x28
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	4613      	mov	r3, r2
 8007e08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	613b      	str	r3, [r7, #16]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	fb02 f303 	mul.w	r3, r2, r3
 8007e2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	3348      	adds	r3, #72	; 0x48
 8007e34:	4618      	mov	r0, r3
 8007e36:	f002 fb37 	bl	800a4a8 <pvPortMalloc>
 8007e3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	3348      	adds	r3, #72	; 0x48
 8007e4a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e4c:	79fa      	ldrb	r2, [r7, #7]
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4613      	mov	r3, r2
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f805 	bl	8007e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
	}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3720      	adds	r7, #32
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e002      	b.n	8007e8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e96:	2101      	movs	r1, #1
 8007e98:	69b8      	ldr	r0, [r7, #24]
 8007e9a:	f7ff ff47 	bl	8007d2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00e      	beq.n	8007ed2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2100      	movs	r1, #0
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f81d 	bl	8007f0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	6939      	ldr	r1, [r7, #16]
 8007ef2:	6978      	ldr	r0, [r7, #20]
 8007ef4:	f7ff ff82 	bl	8007dfc <xQueueGenericCreate>
 8007ef8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7ff ffd3 	bl	8007ea6 <prvInitialiseMutex>

		return xNewQueue;
 8007f00:	68fb      	ldr	r3, [r7, #12]
	}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08e      	sub	sp, #56	; 0x38
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10a      	bne.n	8007f3e <xQueueGenericSend+0x32>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f3a:	bf00      	nop
 8007f3c:	e7fe      	b.n	8007f3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d103      	bne.n	8007f4c <xQueueGenericSend+0x40>
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <xQueueGenericSend+0x44>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e000      	b.n	8007f52 <xQueueGenericSend+0x46>
 8007f50:	2300      	movs	r3, #0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10a      	bne.n	8007f6c <xQueueGenericSend+0x60>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f68:	bf00      	nop
 8007f6a:	e7fe      	b.n	8007f6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d103      	bne.n	8007f7a <xQueueGenericSend+0x6e>
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <xQueueGenericSend+0x72>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <xQueueGenericSend+0x74>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10a      	bne.n	8007f9a <xQueueGenericSend+0x8e>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	623b      	str	r3, [r7, #32]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f9a:	f001 fc0f 	bl	80097bc <xTaskGetSchedulerState>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <xQueueGenericSend+0x9e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <xQueueGenericSend+0xa2>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <xQueueGenericSend+0xa4>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <xQueueGenericSend+0xbe>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	61fb      	str	r3, [r7, #28]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fca:	f002 f94b 	bl	800a264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d302      	bcc.n	8007fe0 <xQueueGenericSend+0xd4>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d129      	bne.n	8008034 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fe6:	f000 fc95 	bl	8008914 <prvCopyDataToQueue>
 8007fea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d010      	beq.n	8008016 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	3324      	adds	r3, #36	; 0x24
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f001 fa2d 	bl	8009458 <xTaskRemoveFromEventList>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d013      	beq.n	800802c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008004:	4b3f      	ldr	r3, [pc, #252]	; (8008104 <xQueueGenericSend+0x1f8>)
 8008006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	e00a      	b.n	800802c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d007      	beq.n	800802c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800801c:	4b39      	ldr	r3, [pc, #228]	; (8008104 <xQueueGenericSend+0x1f8>)
 800801e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800802c:	f002 f94a 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 8008030:	2301      	movs	r3, #1
 8008032:	e063      	b.n	80080fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800803a:	f002 f943 	bl	800a2c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800803e:	2300      	movs	r3, #0
 8008040:	e05c      	b.n	80080fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008044:	2b00      	cmp	r3, #0
 8008046:	d106      	bne.n	8008056 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	4618      	mov	r0, r3
 800804e:	f001 fa65 	bl	800951c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008052:	2301      	movs	r3, #1
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008056:	f002 f935 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800805a:	f000 fff3 	bl	8009044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800805e:	f002 f901 	bl	800a264 <vPortEnterCritical>
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008068:	b25b      	sxtb	r3, r3
 800806a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806e:	d103      	bne.n	8008078 <xQueueGenericSend+0x16c>
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800807e:	b25b      	sxtb	r3, r3
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d103      	bne.n	800808e <xQueueGenericSend+0x182>
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800808e:	f002 f919 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008092:	1d3a      	adds	r2, r7, #4
 8008094:	f107 0314 	add.w	r3, r7, #20
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f001 fa54 	bl	8009548 <xTaskCheckForTimeOut>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d124      	bne.n	80080f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080a8:	f000 fd2c 	bl	8008b04 <prvIsQueueFull>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d018      	beq.n	80080e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	3310      	adds	r3, #16
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 f9a8 	bl	8009410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080c2:	f000 fcb7 	bl	8008a34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080c6:	f000 ffcb 	bl	8009060 <xTaskResumeAll>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f47f af7c 	bne.w	8007fca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80080d2:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <xQueueGenericSend+0x1f8>)
 80080d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	e772      	b.n	8007fca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080e6:	f000 fca5 	bl	8008a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080ea:	f000 ffb9 	bl	8009060 <xTaskResumeAll>
 80080ee:	e76c      	b.n	8007fca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080f2:	f000 fc9f 	bl	8008a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080f6:	f000 ffb3 	bl	8009060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3738      	adds	r7, #56	; 0x38
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b090      	sub	sp, #64	; 0x40
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10a      	bne.n	8008136 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <xQueueGenericSendFromISR+0x3c>
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <xQueueGenericSendFromISR+0x40>
 8008144:	2301      	movs	r3, #1
 8008146:	e000      	b.n	800814a <xQueueGenericSendFromISR+0x42>
 8008148:	2300      	movs	r3, #0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d103      	bne.n	8008172 <xQueueGenericSendFromISR+0x6a>
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <xQueueGenericSendFromISR+0x6e>
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <xQueueGenericSendFromISR+0x70>
 8008176:	2300      	movs	r3, #0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	623b      	str	r3, [r7, #32]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008192:	f002 f949 	bl	800a428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008196:	f3ef 8211 	mrs	r2, BASEPRI
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	61fa      	str	r2, [r7, #28]
 80081ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d302      	bcc.n	80081c4 <xQueueGenericSendFromISR+0xbc>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d12f      	bne.n	8008224 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081da:	f000 fb9b 	bl	8008914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80081e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e6:	d112      	bne.n	800820e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d016      	beq.n	800821e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	3324      	adds	r3, #36	; 0x24
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 f92f 	bl	8009458 <xTaskRemoveFromEventList>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00e      	beq.n	800821e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00b      	beq.n	800821e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	e007      	b.n	800821e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800820e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008212:	3301      	adds	r3, #1
 8008214:	b2db      	uxtb	r3, r3
 8008216:	b25a      	sxtb	r2, r3
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800821e:	2301      	movs	r3, #1
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008222:	e001      	b.n	8008228 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008224:	2300      	movs	r3, #0
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008232:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008236:	4618      	mov	r0, r3
 8008238:	3740      	adds	r7, #64	; 0x40
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b08e      	sub	sp, #56	; 0x38
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	623b      	str	r3, [r7, #32]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	61fb      	str	r3, [r7, #28]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <xQueueGiveFromISR+0x58>
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <xQueueGiveFromISR+0x5c>
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <xQueueGiveFromISR+0x5e>
 800829a:	2300      	movs	r3, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	61bb      	str	r3, [r7, #24]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082b6:	f002 f8b7 	bl	800a428 <vPortValidateInterruptPriority>
	__asm volatile
 80082ba:	f3ef 8211 	mrs	r2, BASEPRI
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	617a      	str	r2, [r7, #20]
 80082d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80082d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d22b      	bcs.n	800833e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d112      	bne.n	8008328 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	d016      	beq.n	8008338 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	3324      	adds	r3, #36	; 0x24
 800830e:	4618      	mov	r0, r3
 8008310:	f001 f8a2 	bl	8009458 <xTaskRemoveFromEventList>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00e      	beq.n	8008338 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2201      	movs	r2, #1
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e007      	b.n	8008338 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800832c:	3301      	adds	r3, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	b25a      	sxtb	r2, r3
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008338:	2301      	movs	r3, #1
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
 800833c:	e001      	b.n	8008342 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800833e:	2300      	movs	r3, #0
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f383 8811 	msr	BASEPRI, r3
}
 800834c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008350:	4618      	mov	r0, r3
 8008352:	3738      	adds	r7, #56	; 0x38
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08c      	sub	sp, #48	; 0x30
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008364:	2300      	movs	r3, #0
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <xQueueReceive+0x30>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	623b      	str	r3, [r7, #32]
}
 8008384:	bf00      	nop
 8008386:	e7fe      	b.n	8008386 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <xQueueReceive+0x3e>
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <xQueueReceive+0x42>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <xQueueReceive+0x44>
 800839a:	2300      	movs	r3, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <xQueueReceive+0x5e>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	61fb      	str	r3, [r7, #28]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083b6:	f001 fa01 	bl	80097bc <xTaskGetSchedulerState>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <xQueueReceive+0x6e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <xQueueReceive+0x72>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e000      	b.n	80083cc <xQueueReceive+0x74>
 80083ca:	2300      	movs	r3, #0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xQueueReceive+0x8e>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	61bb      	str	r3, [r7, #24]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083e6:	f001 ff3d 	bl	800a264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d01f      	beq.n	8008436 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fa:	f000 faf5 	bl	80089e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	1e5a      	subs	r2, r3, #1
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00f      	beq.n	800842e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	3310      	adds	r3, #16
 8008412:	4618      	mov	r0, r3
 8008414:	f001 f820 	bl	8009458 <xTaskRemoveFromEventList>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800841e:	4b3d      	ldr	r3, [pc, #244]	; (8008514 <xQueueReceive+0x1bc>)
 8008420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800842e:	f001 ff49 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 8008432:	2301      	movs	r3, #1
 8008434:	e069      	b.n	800850a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d103      	bne.n	8008444 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800843c:	f001 ff42 	bl	800a2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008440:	2300      	movs	r3, #0
 8008442:	e062      	b.n	800850a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d106      	bne.n	8008458 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800844a:	f107 0310 	add.w	r3, r7, #16
 800844e:	4618      	mov	r0, r3
 8008450:	f001 f864 	bl	800951c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008458:	f001 ff34 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800845c:	f000 fdf2 	bl	8009044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008460:	f001 ff00 	bl	800a264 <vPortEnterCritical>
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800846a:	b25b      	sxtb	r3, r3
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d103      	bne.n	800847a <xQueueReceive+0x122>
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008480:	b25b      	sxtb	r3, r3
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d103      	bne.n	8008490 <xQueueReceive+0x138>
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008490:	f001 ff18 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008494:	1d3a      	adds	r2, r7, #4
 8008496:	f107 0310 	add.w	r3, r7, #16
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f001 f853 	bl	8009548 <xTaskCheckForTimeOut>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d123      	bne.n	80084f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084aa:	f000 fb15 	bl	8008ad8 <prvIsQueueEmpty>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d017      	beq.n	80084e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	3324      	adds	r3, #36	; 0x24
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	4611      	mov	r1, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 ffa7 	bl	8009410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c4:	f000 fab6 	bl	8008a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084c8:	f000 fdca 	bl	8009060 <xTaskResumeAll>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d189      	bne.n	80083e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80084d2:	4b10      	ldr	r3, [pc, #64]	; (8008514 <xQueueReceive+0x1bc>)
 80084d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	e780      	b.n	80083e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e6:	f000 faa5 	bl	8008a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084ea:	f000 fdb9 	bl	8009060 <xTaskResumeAll>
 80084ee:	e77a      	b.n	80083e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084f2:	f000 fa9f 	bl	8008a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084f6:	f000 fdb3 	bl	8009060 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084fc:	f000 faec 	bl	8008ad8 <prvIsQueueEmpty>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	f43f af6f 	beq.w	80083e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008508:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800850a:	4618      	mov	r0, r3
 800850c:	3730      	adds	r7, #48	; 0x30
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08e      	sub	sp, #56	; 0x38
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008522:	2300      	movs	r3, #0
 8008524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800852a:	2300      	movs	r3, #0
 800852c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	623b      	str	r3, [r7, #32]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	61fb      	str	r3, [r7, #28]
}
 8008564:	bf00      	nop
 8008566:	e7fe      	b.n	8008566 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008568:	f001 f928 	bl	80097bc <xTaskGetSchedulerState>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <xQueueSemaphoreTake+0x60>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <xQueueSemaphoreTake+0x64>
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <xQueueSemaphoreTake+0x66>
 800857c:	2300      	movs	r3, #0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	61bb      	str	r3, [r7, #24]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008598:	f001 fe64 	bl	800a264 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d024      	beq.n	80085f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	1e5a      	subs	r2, r3, #1
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80085b8:	f001 faa8 	bl	8009b0c <pvTaskIncrementMutexHeldCount>
 80085bc:	4602      	mov	r2, r0
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00f      	beq.n	80085ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	3310      	adds	r3, #16
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 ff42 	bl	8009458 <xTaskRemoveFromEventList>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085da:	4b54      	ldr	r3, [pc, #336]	; (800872c <xQueueSemaphoreTake+0x214>)
 80085dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085ea:	f001 fe6b 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e097      	b.n	8008722 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d111      	bne.n	800861c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	617b      	str	r3, [r7, #20]
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008614:	f001 fe56 	bl	800a2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008618:	2300      	movs	r3, #0
 800861a:	e082      	b.n	8008722 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008622:	f107 030c 	add.w	r3, r7, #12
 8008626:	4618      	mov	r0, r3
 8008628:	f000 ff78 	bl	800951c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008630:	f001 fe48 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008634:	f000 fd06 	bl	8009044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008638:	f001 fe14 	bl	800a264 <vPortEnterCritical>
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008642:	b25b      	sxtb	r3, r3
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d103      	bne.n	8008652 <xQueueSemaphoreTake+0x13a>
 800864a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008658:	b25b      	sxtb	r3, r3
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d103      	bne.n	8008668 <xQueueSemaphoreTake+0x150>
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008668:	f001 fe2c 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800866c:	463a      	mov	r2, r7
 800866e:	f107 030c 	add.w	r3, r7, #12
 8008672:	4611      	mov	r1, r2
 8008674:	4618      	mov	r0, r3
 8008676:	f000 ff67 	bl	8009548 <xTaskCheckForTimeOut>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d132      	bne.n	80086e6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008682:	f000 fa29 	bl	8008ad8 <prvIsQueueEmpty>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d026      	beq.n	80086da <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008694:	f001 fde6 	bl	800a264 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	4618      	mov	r0, r3
 800869e:	f001 f8ab 	bl	80097f8 <xTaskPriorityInherit>
 80086a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80086a4:	f001 fe0e 	bl	800a2c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086aa:	3324      	adds	r3, #36	; 0x24
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fead 	bl	8009410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086b8:	f000 f9bc 	bl	8008a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086bc:	f000 fcd0 	bl	8009060 <xTaskResumeAll>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f47f af68 	bne.w	8008598 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80086c8:	4b18      	ldr	r3, [pc, #96]	; (800872c <xQueueSemaphoreTake+0x214>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	e75e      	b.n	8008598 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80086da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086dc:	f000 f9aa 	bl	8008a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086e0:	f000 fcbe 	bl	8009060 <xTaskResumeAll>
 80086e4:	e758      	b.n	8008598 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80086e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086e8:	f000 f9a4 	bl	8008a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086ec:	f000 fcb8 	bl	8009060 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086f2:	f000 f9f1 	bl	8008ad8 <prvIsQueueEmpty>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f43f af4d 	beq.w	8008598 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00d      	beq.n	8008720 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008704:	f001 fdae 	bl	800a264 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800870a:	f000 f8eb 	bl	80088e4 <prvGetDisinheritPriorityAfterTimeout>
 800870e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008716:	4618      	mov	r0, r3
 8008718:	f001 f96a 	bl	80099f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800871c:	f001 fdd2 	bl	800a2c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008722:	4618      	mov	r0, r3
 8008724:	3738      	adds	r7, #56	; 0x38
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	e000ed04 	.word	0xe000ed04

08008730 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08e      	sub	sp, #56	; 0x38
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10a      	bne.n	800875c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	623b      	str	r3, [r7, #32]
}
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d103      	bne.n	800876a <xQueueReceiveFromISR+0x3a>
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <xQueueReceiveFromISR+0x3e>
 800876a:	2301      	movs	r3, #1
 800876c:	e000      	b.n	8008770 <xQueueReceiveFromISR+0x40>
 800876e:	2300      	movs	r3, #0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	61fb      	str	r3, [r7, #28]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800878a:	f001 fe4d 	bl	800a428 <vPortValidateInterruptPriority>
	__asm volatile
 800878e:	f3ef 8211 	mrs	r2, BASEPRI
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	61ba      	str	r2, [r7, #24]
 80087a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80087a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d02f      	beq.n	8008816 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087c4:	f000 f910 	bl	80089e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	1e5a      	subs	r2, r3, #1
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80087d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d112      	bne.n	8008800 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d016      	beq.n	8008810 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	3310      	adds	r3, #16
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fe36 	bl	8009458 <xTaskRemoveFromEventList>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00e      	beq.n	8008810 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e007      	b.n	8008810 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008804:	3301      	adds	r3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	b25a      	sxtb	r2, r3
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008810:	2301      	movs	r3, #1
 8008812:	637b      	str	r3, [r7, #52]	; 0x34
 8008814:	e001      	b.n	800881a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008816:	2300      	movs	r3, #0
 8008818:	637b      	str	r3, [r7, #52]	; 0x34
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f383 8811 	msr	BASEPRI, r3
}
 8008824:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008828:	4618      	mov	r0, r3
 800882a:	3738      	adds	r7, #56	; 0x38
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60bb      	str	r3, [r7, #8]
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008854:	f001 fd06 	bl	800a264 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800885e:	f001 fd31 	bl	800a2c4 <vPortExitCritical>

	return uxReturn;
 8008862:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	60fb      	str	r3, [r7, #12]
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800889a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800889c:	4618      	mov	r0, r3
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <vQueueDelete+0x28>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	60bb      	str	r3, [r7, #8]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 f92f 	bl	8008b34 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f001 feb2 	bl	800a640 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d006      	beq.n	8008902 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f1c3 0307 	rsb	r3, r3, #7
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e001      	b.n	8008906 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008906:	68fb      	ldr	r3, [r7, #12]
	}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008920:	2300      	movs	r3, #0
 8008922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10d      	bne.n	800894e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d14d      	bne.n	80089d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	4618      	mov	r0, r3
 8008940:	f000 ffd0 	bl	80098e4 <xTaskPriorityDisinherit>
 8008944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	609a      	str	r2, [r3, #8]
 800894c:	e043      	b.n	80089d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d119      	bne.n	8008988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6858      	ldr	r0, [r3, #4]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895c:	461a      	mov	r2, r3
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	f015 fba0 	bl	801e0a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896c:	441a      	add	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	429a      	cmp	r2, r3
 800897c:	d32b      	bcc.n	80089d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	e026      	b.n	80089d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68d8      	ldr	r0, [r3, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008990:	461a      	mov	r2, r3
 8008992:	68b9      	ldr	r1, [r7, #8]
 8008994:	f015 fb86 	bl	801e0a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a0:	425b      	negs	r3, r3
 80089a2:	441a      	add	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d207      	bcs.n	80089c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089bc:	425b      	negs	r3, r3
 80089be:	441a      	add	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d105      	bne.n	80089d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089de:	697b      	ldr	r3, [r7, #20]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d018      	beq.n	8008a2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	441a      	add	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d303      	bcc.n	8008a1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68d9      	ldr	r1, [r3, #12]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	461a      	mov	r2, r3
 8008a26:	6838      	ldr	r0, [r7, #0]
 8008a28:	f015 fb3c 	bl	801e0a4 <memcpy>
	}
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a3c:	f001 fc12 	bl	800a264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a48:	e011      	b.n	8008a6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d012      	beq.n	8008a78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3324      	adds	r3, #36	; 0x24
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fcfe 	bl	8009458 <xTaskRemoveFromEventList>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a62:	f000 fdd3 	bl	800960c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	dce9      	bgt.n	8008a4a <prvUnlockQueue+0x16>
 8008a76:	e000      	b.n	8008a7a <prvUnlockQueue+0x46>
					break;
 8008a78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	22ff      	movs	r2, #255	; 0xff
 8008a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a82:	f001 fc1f 	bl	800a2c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a86:	f001 fbed 	bl	800a264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a92:	e011      	b.n	8008ab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d012      	beq.n	8008ac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3310      	adds	r3, #16
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fcd9 	bl	8009458 <xTaskRemoveFromEventList>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008aac:	f000 fdae 	bl	800960c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dce9      	bgt.n	8008a94 <prvUnlockQueue+0x60>
 8008ac0:	e000      	b.n	8008ac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008ac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	22ff      	movs	r2, #255	; 0xff
 8008ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008acc:	f001 fbfa 	bl	800a2c4 <vPortExitCritical>
}
 8008ad0:	bf00      	nop
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ae0:	f001 fbc0 	bl	800a264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d102      	bne.n	8008af2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008aec:	2301      	movs	r3, #1
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e001      	b.n	8008af6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008af6:	f001 fbe5 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 8008afa:	68fb      	ldr	r3, [r7, #12]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b0c:	f001 fbaa 	bl	800a264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d102      	bne.n	8008b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	e001      	b.n	8008b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b26:	f001 fbcd 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	e016      	b.n	8008b70 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008b42:	4a10      	ldr	r2, [pc, #64]	; (8008b84 <vQueueUnregisterQueue+0x50>)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	4413      	add	r3, r2
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d10b      	bne.n	8008b6a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008b52:	4a0c      	ldr	r2, [pc, #48]	; (8008b84 <vQueueUnregisterQueue+0x50>)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2100      	movs	r1, #0
 8008b58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008b5c:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <vQueueUnregisterQueue+0x50>)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	4413      	add	r3, r2
 8008b64:	2200      	movs	r2, #0
 8008b66:	605a      	str	r2, [r3, #4]
				break;
 8008b68:	e006      	b.n	8008b78 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b07      	cmp	r3, #7
 8008b74:	d9e5      	bls.n	8008b42 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008b76:	bf00      	nop
 8008b78:	bf00      	nop
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	2001768c 	.word	0x2001768c

08008b88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08c      	sub	sp, #48	; 0x30
 8008b8c:	af04      	add	r7, sp, #16
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	603b      	str	r3, [r7, #0]
 8008b94:	4613      	mov	r3, r2
 8008b96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b98:	88fb      	ldrh	r3, [r7, #6]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f001 fc83 	bl	800a4a8 <pvPortMalloc>
 8008ba2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00e      	beq.n	8008bc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008baa:	20b4      	movs	r0, #180	; 0xb4
 8008bac:	f001 fc7c 	bl	800a4a8 <pvPortMalloc>
 8008bb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8008bbe:	e005      	b.n	8008bcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bc0:	6978      	ldr	r0, [r7, #20]
 8008bc2:	f001 fd3d 	bl	800a640 <vPortFree>
 8008bc6:	e001      	b.n	8008bcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d013      	beq.n	8008bfa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bd2:	88fa      	ldrh	r2, [r7, #6]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9303      	str	r3, [sp, #12]
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	9302      	str	r3, [sp, #8]
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f80f 	bl	8008c0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bee:	69f8      	ldr	r0, [r7, #28]
 8008bf0:	f000 f8aa 	bl	8008d48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	61bb      	str	r3, [r7, #24]
 8008bf8:	e002      	b.n	8008c00 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c00:	69bb      	ldr	r3, [r7, #24]
	}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3720      	adds	r7, #32
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c24:	3b01      	subs	r3, #1
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	f023 0307 	bic.w	r3, r3, #7
 8008c32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	f003 0307 	and.w	r3, r3, #7
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	617b      	str	r3, [r7, #20]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01f      	beq.n	8008c9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	e012      	b.n	8008c86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	4413      	add	r3, r2
 8008c66:	7819      	ldrb	r1, [r3, #0]
 8008c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	3334      	adds	r3, #52	; 0x34
 8008c70:	460a      	mov	r2, r1
 8008c72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	4413      	add	r3, r2
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d006      	beq.n	8008c8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	2b0f      	cmp	r3, #15
 8008c8a:	d9e9      	bls.n	8008c60 <prvInitialiseNewTask+0x54>
 8008c8c:	e000      	b.n	8008c90 <prvInitialiseNewTask+0x84>
			{
				break;
 8008c8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c98:	e003      	b.n	8008ca2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	2b06      	cmp	r3, #6
 8008ca6:	d901      	bls.n	8008cac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ca8:	2306      	movs	r3, #6
 8008caa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	2200      	movs	r2, #0
 8008cbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe ff9d 	bl	8007c02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cca:	3318      	adds	r3, #24
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fe ff98 	bl	8007c02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	f1c3 0207 	rsb	r2, r3, #7
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	334c      	adds	r3, #76	; 0x4c
 8008cfc:	2260      	movs	r2, #96	; 0x60
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f015 f9f7 	bl	801e0f4 <memset>
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	4a0c      	ldr	r2, [pc, #48]	; (8008d3c <prvInitialiseNewTask+0x130>)
 8008d0a:	651a      	str	r2, [r3, #80]	; 0x50
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	4a0c      	ldr	r2, [pc, #48]	; (8008d40 <prvInitialiseNewTask+0x134>)
 8008d10:	655a      	str	r2, [r3, #84]	; 0x54
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	4a0b      	ldr	r2, [pc, #44]	; (8008d44 <prvInitialiseNewTask+0x138>)
 8008d16:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	68f9      	ldr	r1, [r7, #12]
 8008d1c:	69b8      	ldr	r0, [r7, #24]
 8008d1e:	f001 f971 	bl	800a004 <pxPortInitialiseStack>
 8008d22:	4602      	mov	r2, r0
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d34:	bf00      	nop
 8008d36:	3720      	adds	r7, #32
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	080268e0 	.word	0x080268e0
 8008d40:	08026900 	.word	0x08026900
 8008d44:	080268c0 	.word	0x080268c0

08008d48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d50:	f001 fa88 	bl	800a264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d54:	4b2a      	ldr	r3, [pc, #168]	; (8008e00 <prvAddNewTaskToReadyList+0xb8>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	4a29      	ldr	r2, [pc, #164]	; (8008e00 <prvAddNewTaskToReadyList+0xb8>)
 8008d5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d5e:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <prvAddNewTaskToReadyList+0xbc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d66:	4a27      	ldr	r2, [pc, #156]	; (8008e04 <prvAddNewTaskToReadyList+0xbc>)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d6c:	4b24      	ldr	r3, [pc, #144]	; (8008e00 <prvAddNewTaskToReadyList+0xb8>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d110      	bne.n	8008d96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d74:	f000 fc6e 	bl	8009654 <prvInitialiseTaskLists>
 8008d78:	e00d      	b.n	8008d96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d7a:	4b23      	ldr	r3, [pc, #140]	; (8008e08 <prvAddNewTaskToReadyList+0xc0>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d109      	bne.n	8008d96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d82:	4b20      	ldr	r3, [pc, #128]	; (8008e04 <prvAddNewTaskToReadyList+0xbc>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d802      	bhi.n	8008d96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d90:	4a1c      	ldr	r2, [pc, #112]	; (8008e04 <prvAddNewTaskToReadyList+0xbc>)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d96:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <prvAddNewTaskToReadyList+0xc4>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	4a1b      	ldr	r2, [pc, #108]	; (8008e0c <prvAddNewTaskToReadyList+0xc4>)
 8008d9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	2201      	movs	r2, #1
 8008da6:	409a      	lsls	r2, r3
 8008da8:	4b19      	ldr	r3, [pc, #100]	; (8008e10 <prvAddNewTaskToReadyList+0xc8>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	4a18      	ldr	r2, [pc, #96]	; (8008e10 <prvAddNewTaskToReadyList+0xc8>)
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db6:	4613      	mov	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4a15      	ldr	r2, [pc, #84]	; (8008e14 <prvAddNewTaskToReadyList+0xcc>)
 8008dc0:	441a      	add	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f7fe ff27 	bl	8007c1c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008dce:	f001 fa79 	bl	800a2c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <prvAddNewTaskToReadyList+0xc0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00e      	beq.n	8008df8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008dda:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <prvAddNewTaskToReadyList+0xbc>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d207      	bcs.n	8008df8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008de8:	4b0b      	ldr	r3, [pc, #44]	; (8008e18 <prvAddNewTaskToReadyList+0xd0>)
 8008dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20000438 	.word	0x20000438
 8008e04:	20000338 	.word	0x20000338
 8008e08:	20000444 	.word	0x20000444
 8008e0c:	20000454 	.word	0x20000454
 8008e10:	20000440 	.word	0x20000440
 8008e14:	2000033c 	.word	0x2000033c
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008e24:	f001 fa1e 	bl	800a264 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <vTaskDelete+0x18>
 8008e2e:	4b39      	ldr	r3, [pc, #228]	; (8008f14 <vTaskDelete+0xf8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	e000      	b.n	8008e36 <vTaskDelete+0x1a>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe ff4a 	bl	8007cd6 <uxListRemove>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d115      	bne.n	8008e74 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4c:	4932      	ldr	r1, [pc, #200]	; (8008f18 <vTaskDelete+0xfc>)
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	440b      	add	r3, r1
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <vTaskDelete+0x58>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	2201      	movs	r2, #1
 8008e64:	fa02 f303 	lsl.w	r3, r2, r3
 8008e68:	43da      	mvns	r2, r3
 8008e6a:	4b2c      	ldr	r3, [pc, #176]	; (8008f1c <vTaskDelete+0x100>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	4a2a      	ldr	r2, [pc, #168]	; (8008f1c <vTaskDelete+0x100>)
 8008e72:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3318      	adds	r3, #24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe ff28 	bl	8007cd6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008e86:	4b26      	ldr	r3, [pc, #152]	; (8008f20 <vTaskDelete+0x104>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	4a24      	ldr	r2, [pc, #144]	; (8008f20 <vTaskDelete+0x104>)
 8008e8e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008e90:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <vTaskDelete+0xf8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d10b      	bne.n	8008eb2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4820      	ldr	r0, [pc, #128]	; (8008f24 <vTaskDelete+0x108>)
 8008ea2:	f7fe febb 	bl	8007c1c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008ea6:	4b20      	ldr	r3, [pc, #128]	; (8008f28 <vTaskDelete+0x10c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	4a1e      	ldr	r2, [pc, #120]	; (8008f28 <vTaskDelete+0x10c>)
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	e009      	b.n	8008ec6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008eb2:	4b1e      	ldr	r3, [pc, #120]	; (8008f2c <vTaskDelete+0x110>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	4a1c      	ldr	r2, [pc, #112]	; (8008f2c <vTaskDelete+0x110>)
 8008eba:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fc37 	bl	8009730 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008ec2:	f000 fc4b 	bl	800975c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008ec6:	f001 f9fd 	bl	800a2c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008eca:	4b19      	ldr	r3, [pc, #100]	; (8008f30 <vTaskDelete+0x114>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d01b      	beq.n	8008f0a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8008ed2:	4b10      	ldr	r3, [pc, #64]	; (8008f14 <vTaskDelete+0xf8>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d116      	bne.n	8008f0a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008edc:	4b15      	ldr	r3, [pc, #84]	; (8008f34 <vTaskDelete+0x118>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <vTaskDelete+0xde>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	60bb      	str	r3, [r7, #8]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8008efa:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <vTaskDelete+0x11c>)
 8008efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000338 	.word	0x20000338
 8008f18:	2000033c 	.word	0x2000033c
 8008f1c:	20000440 	.word	0x20000440
 8008f20:	20000454 	.word	0x20000454
 8008f24:	2000040c 	.word	0x2000040c
 8008f28:	20000420 	.word	0x20000420
 8008f2c:	20000438 	.word	0x20000438
 8008f30:	20000444 	.word	0x20000444
 8008f34:	20000460 	.word	0x20000460
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d017      	beq.n	8008f7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <vTaskDelay+0x60>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <vTaskDelay+0x30>
	__asm volatile
 8008f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	60bb      	str	r3, [r7, #8]
}
 8008f68:	bf00      	nop
 8008f6a:	e7fe      	b.n	8008f6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f6c:	f000 f86a 	bl	8009044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f70:	2100      	movs	r1, #0
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 ffe0 	bl	8009f38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f78:	f000 f872 	bl	8009060 <xTaskResumeAll>
 8008f7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f84:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <vTaskDelay+0x64>)
 8008f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f94:	bf00      	nop
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20000460 	.word	0x20000460
 8008fa0:	e000ed04 	.word	0xe000ed04

08008fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008faa:	4b1e      	ldr	r3, [pc, #120]	; (8009024 <vTaskStartScheduler+0x80>)
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2280      	movs	r2, #128	; 0x80
 8008fb6:	491c      	ldr	r1, [pc, #112]	; (8009028 <vTaskStartScheduler+0x84>)
 8008fb8:	481c      	ldr	r0, [pc, #112]	; (800902c <vTaskStartScheduler+0x88>)
 8008fba:	f7ff fde5 	bl	8008b88 <xTaskCreate>
 8008fbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d11b      	bne.n	8008ffe <vTaskStartScheduler+0x5a>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	60bb      	str	r3, [r7, #8]
}
 8008fd8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fda:	4b15      	ldr	r3, [pc, #84]	; (8009030 <vTaskStartScheduler+0x8c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	334c      	adds	r3, #76	; 0x4c
 8008fe0:	4a14      	ldr	r2, [pc, #80]	; (8009034 <vTaskStartScheduler+0x90>)
 8008fe2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fe4:	4b14      	ldr	r3, [pc, #80]	; (8009038 <vTaskStartScheduler+0x94>)
 8008fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fec:	4b13      	ldr	r3, [pc, #76]	; (800903c <vTaskStartScheduler+0x98>)
 8008fee:	2201      	movs	r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ff2:	4b13      	ldr	r3, [pc, #76]	; (8009040 <vTaskStartScheduler+0x9c>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ff8:	f001 f892 	bl	800a120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ffc:	e00e      	b.n	800901c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009004:	d10a      	bne.n	800901c <vTaskStartScheduler+0x78>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	607b      	str	r3, [r7, #4]
}
 8009018:	bf00      	nop
 800901a:	e7fe      	b.n	800901a <vTaskStartScheduler+0x76>
}
 800901c:	bf00      	nop
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	2000045c 	.word	0x2000045c
 8009028:	0802264c 	.word	0x0802264c
 800902c:	08009625 	.word	0x08009625
 8009030:	20000338 	.word	0x20000338
 8009034:	20000064 	.word	0x20000064
 8009038:	20000458 	.word	0x20000458
 800903c:	20000444 	.word	0x20000444
 8009040:	2000043c 	.word	0x2000043c

08009044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009048:	4b04      	ldr	r3, [pc, #16]	; (800905c <vTaskSuspendAll+0x18>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3301      	adds	r3, #1
 800904e:	4a03      	ldr	r2, [pc, #12]	; (800905c <vTaskSuspendAll+0x18>)
 8009050:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009052:	bf00      	nop
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	20000460 	.word	0x20000460

08009060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800906a:	2300      	movs	r3, #0
 800906c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800906e:	4b41      	ldr	r3, [pc, #260]	; (8009174 <xTaskResumeAll+0x114>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10a      	bne.n	800908c <xTaskResumeAll+0x2c>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	603b      	str	r3, [r7, #0]
}
 8009088:	bf00      	nop
 800908a:	e7fe      	b.n	800908a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800908c:	f001 f8ea 	bl	800a264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009090:	4b38      	ldr	r3, [pc, #224]	; (8009174 <xTaskResumeAll+0x114>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3b01      	subs	r3, #1
 8009096:	4a37      	ldr	r2, [pc, #220]	; (8009174 <xTaskResumeAll+0x114>)
 8009098:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800909a:	4b36      	ldr	r3, [pc, #216]	; (8009174 <xTaskResumeAll+0x114>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d161      	bne.n	8009166 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090a2:	4b35      	ldr	r3, [pc, #212]	; (8009178 <xTaskResumeAll+0x118>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d05d      	beq.n	8009166 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090aa:	e02e      	b.n	800910a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ac:	4b33      	ldr	r3, [pc, #204]	; (800917c <xTaskResumeAll+0x11c>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3318      	adds	r3, #24
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fe0c 	bl	8007cd6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3304      	adds	r3, #4
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fe07 	bl	8007cd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	2201      	movs	r2, #1
 80090ce:	409a      	lsls	r2, r3
 80090d0:	4b2b      	ldr	r3, [pc, #172]	; (8009180 <xTaskResumeAll+0x120>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	4a2a      	ldr	r2, [pc, #168]	; (8009180 <xTaskResumeAll+0x120>)
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4a27      	ldr	r2, [pc, #156]	; (8009184 <xTaskResumeAll+0x124>)
 80090e8:	441a      	add	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f7fe fd93 	bl	8007c1c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fa:	4b23      	ldr	r3, [pc, #140]	; (8009188 <xTaskResumeAll+0x128>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	429a      	cmp	r2, r3
 8009102:	d302      	bcc.n	800910a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009104:	4b21      	ldr	r3, [pc, #132]	; (800918c <xTaskResumeAll+0x12c>)
 8009106:	2201      	movs	r2, #1
 8009108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800910a:	4b1c      	ldr	r3, [pc, #112]	; (800917c <xTaskResumeAll+0x11c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1cc      	bne.n	80090ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009118:	f000 fb20 	bl	800975c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800911c:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <xTaskResumeAll+0x130>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d010      	beq.n	800914a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009128:	f000 f858 	bl	80091dc <xTaskIncrementTick>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009132:	4b16      	ldr	r3, [pc, #88]	; (800918c <xTaskResumeAll+0x12c>)
 8009134:	2201      	movs	r2, #1
 8009136:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3b01      	subs	r3, #1
 800913c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1f1      	bne.n	8009128 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009144:	4b12      	ldr	r3, [pc, #72]	; (8009190 <xTaskResumeAll+0x130>)
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800914a:	4b10      	ldr	r3, [pc, #64]	; (800918c <xTaskResumeAll+0x12c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009152:	2301      	movs	r3, #1
 8009154:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009156:	4b0f      	ldr	r3, [pc, #60]	; (8009194 <xTaskResumeAll+0x134>)
 8009158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009166:	f001 f8ad 	bl	800a2c4 <vPortExitCritical>

	return xAlreadyYielded;
 800916a:	68bb      	ldr	r3, [r7, #8]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	20000460 	.word	0x20000460
 8009178:	20000438 	.word	0x20000438
 800917c:	200003f8 	.word	0x200003f8
 8009180:	20000440 	.word	0x20000440
 8009184:	2000033c 	.word	0x2000033c
 8009188:	20000338 	.word	0x20000338
 800918c:	2000044c 	.word	0x2000044c
 8009190:	20000448 	.word	0x20000448
 8009194:	e000ed04 	.word	0xe000ed04

08009198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <xTaskGetTickCount+0x1c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091a4:	687b      	ldr	r3, [r7, #4]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	2000043c 	.word	0x2000043c

080091b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091be:	f001 f933 	bl	800a428 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80091c2:	2300      	movs	r3, #0
 80091c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80091c6:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <xTaskGetTickCountFromISR+0x20>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091cc:	683b      	ldr	r3, [r7, #0]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	2000043c 	.word	0x2000043c

080091dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e6:	4b4e      	ldr	r3, [pc, #312]	; (8009320 <xTaskIncrementTick+0x144>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f040 808e 	bne.w	800930c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091f0:	4b4c      	ldr	r3, [pc, #304]	; (8009324 <xTaskIncrementTick+0x148>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091f8:	4a4a      	ldr	r2, [pc, #296]	; (8009324 <xTaskIncrementTick+0x148>)
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d120      	bne.n	8009246 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009204:	4b48      	ldr	r3, [pc, #288]	; (8009328 <xTaskIncrementTick+0x14c>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00a      	beq.n	8009224 <xTaskIncrementTick+0x48>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	603b      	str	r3, [r7, #0]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <xTaskIncrementTick+0x46>
 8009224:	4b40      	ldr	r3, [pc, #256]	; (8009328 <xTaskIncrementTick+0x14c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	4b40      	ldr	r3, [pc, #256]	; (800932c <xTaskIncrementTick+0x150>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a3e      	ldr	r2, [pc, #248]	; (8009328 <xTaskIncrementTick+0x14c>)
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	4a3e      	ldr	r2, [pc, #248]	; (800932c <xTaskIncrementTick+0x150>)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	4b3d      	ldr	r3, [pc, #244]	; (8009330 <xTaskIncrementTick+0x154>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3301      	adds	r3, #1
 800923e:	4a3c      	ldr	r2, [pc, #240]	; (8009330 <xTaskIncrementTick+0x154>)
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	f000 fa8b 	bl	800975c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009246:	4b3b      	ldr	r3, [pc, #236]	; (8009334 <xTaskIncrementTick+0x158>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	429a      	cmp	r2, r3
 800924e:	d348      	bcc.n	80092e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009250:	4b35      	ldr	r3, [pc, #212]	; (8009328 <xTaskIncrementTick+0x14c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d104      	bne.n	8009264 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800925a:	4b36      	ldr	r3, [pc, #216]	; (8009334 <xTaskIncrementTick+0x158>)
 800925c:	f04f 32ff 	mov.w	r2, #4294967295
 8009260:	601a      	str	r2, [r3, #0]
					break;
 8009262:	e03e      	b.n	80092e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009264:	4b30      	ldr	r3, [pc, #192]	; (8009328 <xTaskIncrementTick+0x14c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	429a      	cmp	r2, r3
 800927a:	d203      	bcs.n	8009284 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800927c:	4a2d      	ldr	r2, [pc, #180]	; (8009334 <xTaskIncrementTick+0x158>)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009282:	e02e      	b.n	80092e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	3304      	adds	r3, #4
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fd24 	bl	8007cd6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	2b00      	cmp	r3, #0
 8009294:	d004      	beq.n	80092a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	3318      	adds	r3, #24
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fd1b 	bl	8007cd6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	2201      	movs	r2, #1
 80092a6:	409a      	lsls	r2, r3
 80092a8:	4b23      	ldr	r3, [pc, #140]	; (8009338 <xTaskIncrementTick+0x15c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	4a22      	ldr	r2, [pc, #136]	; (8009338 <xTaskIncrementTick+0x15c>)
 80092b0:	6013      	str	r3, [r2, #0]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b6:	4613      	mov	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4a1f      	ldr	r2, [pc, #124]	; (800933c <xTaskIncrementTick+0x160>)
 80092c0:	441a      	add	r2, r3
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	3304      	adds	r3, #4
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f7fe fca7 	bl	8007c1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d2:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <xTaskIncrementTick+0x164>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	429a      	cmp	r2, r3
 80092da:	d3b9      	bcc.n	8009250 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092dc:	2301      	movs	r3, #1
 80092de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092e0:	e7b6      	b.n	8009250 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092e2:	4b17      	ldr	r3, [pc, #92]	; (8009340 <xTaskIncrementTick+0x164>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e8:	4914      	ldr	r1, [pc, #80]	; (800933c <xTaskIncrementTick+0x160>)
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	440b      	add	r3, r1
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d901      	bls.n	80092fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80092fa:	2301      	movs	r3, #1
 80092fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092fe:	4b11      	ldr	r3, [pc, #68]	; (8009344 <xTaskIncrementTick+0x168>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d007      	beq.n	8009316 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009306:	2301      	movs	r3, #1
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	e004      	b.n	8009316 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800930c:	4b0e      	ldr	r3, [pc, #56]	; (8009348 <xTaskIncrementTick+0x16c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3301      	adds	r3, #1
 8009312:	4a0d      	ldr	r2, [pc, #52]	; (8009348 <xTaskIncrementTick+0x16c>)
 8009314:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009316:	697b      	ldr	r3, [r7, #20]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20000460 	.word	0x20000460
 8009324:	2000043c 	.word	0x2000043c
 8009328:	200003f0 	.word	0x200003f0
 800932c:	200003f4 	.word	0x200003f4
 8009330:	20000450 	.word	0x20000450
 8009334:	20000458 	.word	0x20000458
 8009338:	20000440 	.word	0x20000440
 800933c:	2000033c 	.word	0x2000033c
 8009340:	20000338 	.word	0x20000338
 8009344:	2000044c 	.word	0x2000044c
 8009348:	20000448 	.word	0x20000448

0800934c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009352:	4b29      	ldr	r3, [pc, #164]	; (80093f8 <vTaskSwitchContext+0xac>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800935a:	4b28      	ldr	r3, [pc, #160]	; (80093fc <vTaskSwitchContext+0xb0>)
 800935c:	2201      	movs	r2, #1
 800935e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009360:	e044      	b.n	80093ec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009362:	4b26      	ldr	r3, [pc, #152]	; (80093fc <vTaskSwitchContext+0xb0>)
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009368:	4b25      	ldr	r3, [pc, #148]	; (8009400 <vTaskSwitchContext+0xb4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	fab3 f383 	clz	r3, r3
 8009374:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009376:	7afb      	ldrb	r3, [r7, #11]
 8009378:	f1c3 031f 	rsb	r3, r3, #31
 800937c:	617b      	str	r3, [r7, #20]
 800937e:	4921      	ldr	r1, [pc, #132]	; (8009404 <vTaskSwitchContext+0xb8>)
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10a      	bne.n	80093a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	607b      	str	r3, [r7, #4]
}
 80093a4:	bf00      	nop
 80093a6:	e7fe      	b.n	80093a6 <vTaskSwitchContext+0x5a>
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4a14      	ldr	r2, [pc, #80]	; (8009404 <vTaskSwitchContext+0xb8>)
 80093b4:	4413      	add	r3, r2
 80093b6:	613b      	str	r3, [r7, #16]
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	605a      	str	r2, [r3, #4]
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	3308      	adds	r3, #8
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d104      	bne.n	80093d8 <vTaskSwitchContext+0x8c>
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	605a      	str	r2, [r3, #4]
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	4a0a      	ldr	r2, [pc, #40]	; (8009408 <vTaskSwitchContext+0xbc>)
 80093e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <vTaskSwitchContext+0xbc>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	334c      	adds	r3, #76	; 0x4c
 80093e8:	4a08      	ldr	r2, [pc, #32]	; (800940c <vTaskSwitchContext+0xc0>)
 80093ea:	6013      	str	r3, [r2, #0]
}
 80093ec:	bf00      	nop
 80093ee:	371c      	adds	r7, #28
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20000460 	.word	0x20000460
 80093fc:	2000044c 	.word	0x2000044c
 8009400:	20000440 	.word	0x20000440
 8009404:	2000033c 	.word	0x2000033c
 8009408:	20000338 	.word	0x20000338
 800940c:	20000064 	.word	0x20000064

08009410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	60fb      	str	r3, [r7, #12]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009436:	4b07      	ldr	r3, [pc, #28]	; (8009454 <vTaskPlaceOnEventList+0x44>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3318      	adds	r3, #24
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7fe fc10 	bl	8007c64 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009444:	2101      	movs	r1, #1
 8009446:	6838      	ldr	r0, [r7, #0]
 8009448:	f000 fd76 	bl	8009f38 <prvAddCurrentTaskToDelayedList>
}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20000338 	.word	0x20000338

08009458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10a      	bne.n	8009484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	60fb      	str	r3, [r7, #12]
}
 8009480:	bf00      	nop
 8009482:	e7fe      	b.n	8009482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	3318      	adds	r3, #24
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe fc24 	bl	8007cd6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800948e:	4b1d      	ldr	r3, [pc, #116]	; (8009504 <xTaskRemoveFromEventList+0xac>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d11c      	bne.n	80094d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	3304      	adds	r3, #4
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe fc1b 	bl	8007cd6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	2201      	movs	r2, #1
 80094a6:	409a      	lsls	r2, r3
 80094a8:	4b17      	ldr	r3, [pc, #92]	; (8009508 <xTaskRemoveFromEventList+0xb0>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	4a16      	ldr	r2, [pc, #88]	; (8009508 <xTaskRemoveFromEventList+0xb0>)
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4a13      	ldr	r2, [pc, #76]	; (800950c <xTaskRemoveFromEventList+0xb4>)
 80094c0:	441a      	add	r2, r3
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	3304      	adds	r3, #4
 80094c6:	4619      	mov	r1, r3
 80094c8:	4610      	mov	r0, r2
 80094ca:	f7fe fba7 	bl	8007c1c <vListInsertEnd>
 80094ce:	e005      	b.n	80094dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3318      	adds	r3, #24
 80094d4:	4619      	mov	r1, r3
 80094d6:	480e      	ldr	r0, [pc, #56]	; (8009510 <xTaskRemoveFromEventList+0xb8>)
 80094d8:	f7fe fba0 	bl	8007c1c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e0:	4b0c      	ldr	r3, [pc, #48]	; (8009514 <xTaskRemoveFromEventList+0xbc>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d905      	bls.n	80094f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094ee:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <xTaskRemoveFromEventList+0xc0>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e001      	b.n	80094fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80094f6:	2300      	movs	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80094fa:	697b      	ldr	r3, [r7, #20]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20000460 	.word	0x20000460
 8009508:	20000440 	.word	0x20000440
 800950c:	2000033c 	.word	0x2000033c
 8009510:	200003f8 	.word	0x200003f8
 8009514:	20000338 	.word	0x20000338
 8009518:	2000044c 	.word	0x2000044c

0800951c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009524:	4b06      	ldr	r3, [pc, #24]	; (8009540 <vTaskInternalSetTimeOutState+0x24>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <vTaskInternalSetTimeOutState+0x28>)
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	605a      	str	r2, [r3, #4]
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20000450 	.word	0x20000450
 8009544:	2000043c 	.word	0x2000043c

08009548 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	613b      	str	r3, [r7, #16]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	60fb      	str	r3, [r7, #12]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800958a:	f000 fe6b 	bl	800a264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800958e:	4b1d      	ldr	r3, [pc, #116]	; (8009604 <xTaskCheckForTimeOut+0xbc>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a6:	d102      	bne.n	80095ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	61fb      	str	r3, [r7, #28]
 80095ac:	e023      	b.n	80095f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b15      	ldr	r3, [pc, #84]	; (8009608 <xTaskCheckForTimeOut+0xc0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d007      	beq.n	80095ca <xTaskCheckForTimeOut+0x82>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d302      	bcc.n	80095ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095c4:	2301      	movs	r3, #1
 80095c6:	61fb      	str	r3, [r7, #28]
 80095c8:	e015      	b.n	80095f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d20b      	bcs.n	80095ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff ff9b 	bl	800951c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095e6:	2300      	movs	r3, #0
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	e004      	b.n	80095f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2200      	movs	r2, #0
 80095f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095f2:	2301      	movs	r3, #1
 80095f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80095f6:	f000 fe65 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 80095fa:	69fb      	ldr	r3, [r7, #28]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3720      	adds	r7, #32
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	2000043c 	.word	0x2000043c
 8009608:	20000450 	.word	0x20000450

0800960c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009610:	4b03      	ldr	r3, [pc, #12]	; (8009620 <vTaskMissedYield+0x14>)
 8009612:	2201      	movs	r2, #1
 8009614:	601a      	str	r2, [r3, #0]
}
 8009616:	bf00      	nop
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	2000044c 	.word	0x2000044c

08009624 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800962c:	f000 f852 	bl	80096d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009630:	4b06      	ldr	r3, [pc, #24]	; (800964c <prvIdleTask+0x28>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d9f9      	bls.n	800962c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009638:	4b05      	ldr	r3, [pc, #20]	; (8009650 <prvIdleTask+0x2c>)
 800963a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009648:	e7f0      	b.n	800962c <prvIdleTask+0x8>
 800964a:	bf00      	nop
 800964c:	2000033c 	.word	0x2000033c
 8009650:	e000ed04 	.word	0xe000ed04

08009654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800965a:	2300      	movs	r3, #0
 800965c:	607b      	str	r3, [r7, #4]
 800965e:	e00c      	b.n	800967a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4a12      	ldr	r2, [pc, #72]	; (80096b4 <prvInitialiseTaskLists+0x60>)
 800966c:	4413      	add	r3, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe faa7 	bl	8007bc2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3301      	adds	r3, #1
 8009678:	607b      	str	r3, [r7, #4]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b06      	cmp	r3, #6
 800967e:	d9ef      	bls.n	8009660 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009680:	480d      	ldr	r0, [pc, #52]	; (80096b8 <prvInitialiseTaskLists+0x64>)
 8009682:	f7fe fa9e 	bl	8007bc2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009686:	480d      	ldr	r0, [pc, #52]	; (80096bc <prvInitialiseTaskLists+0x68>)
 8009688:	f7fe fa9b 	bl	8007bc2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800968c:	480c      	ldr	r0, [pc, #48]	; (80096c0 <prvInitialiseTaskLists+0x6c>)
 800968e:	f7fe fa98 	bl	8007bc2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009692:	480c      	ldr	r0, [pc, #48]	; (80096c4 <prvInitialiseTaskLists+0x70>)
 8009694:	f7fe fa95 	bl	8007bc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009698:	480b      	ldr	r0, [pc, #44]	; (80096c8 <prvInitialiseTaskLists+0x74>)
 800969a:	f7fe fa92 	bl	8007bc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800969e:	4b0b      	ldr	r3, [pc, #44]	; (80096cc <prvInitialiseTaskLists+0x78>)
 80096a0:	4a05      	ldr	r2, [pc, #20]	; (80096b8 <prvInitialiseTaskLists+0x64>)
 80096a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096a4:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <prvInitialiseTaskLists+0x7c>)
 80096a6:	4a05      	ldr	r2, [pc, #20]	; (80096bc <prvInitialiseTaskLists+0x68>)
 80096a8:	601a      	str	r2, [r3, #0]
}
 80096aa:	bf00      	nop
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	2000033c 	.word	0x2000033c
 80096b8:	200003c8 	.word	0x200003c8
 80096bc:	200003dc 	.word	0x200003dc
 80096c0:	200003f8 	.word	0x200003f8
 80096c4:	2000040c 	.word	0x2000040c
 80096c8:	20000424 	.word	0x20000424
 80096cc:	200003f0 	.word	0x200003f0
 80096d0:	200003f4 	.word	0x200003f4

080096d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096da:	e019      	b.n	8009710 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096dc:	f000 fdc2 	bl	800a264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e0:	4b10      	ldr	r3, [pc, #64]	; (8009724 <prvCheckTasksWaitingTermination+0x50>)
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3304      	adds	r3, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe faf2 	bl	8007cd6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096f2:	4b0d      	ldr	r3, [pc, #52]	; (8009728 <prvCheckTasksWaitingTermination+0x54>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	4a0b      	ldr	r2, [pc, #44]	; (8009728 <prvCheckTasksWaitingTermination+0x54>)
 80096fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <prvCheckTasksWaitingTermination+0x58>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3b01      	subs	r3, #1
 8009702:	4a0a      	ldr	r2, [pc, #40]	; (800972c <prvCheckTasksWaitingTermination+0x58>)
 8009704:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009706:	f000 fddd 	bl	800a2c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f810 	bl	8009730 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009710:	4b06      	ldr	r3, [pc, #24]	; (800972c <prvCheckTasksWaitingTermination+0x58>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e1      	bne.n	80096dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	2000040c 	.word	0x2000040c
 8009728:	20000438 	.word	0x20000438
 800972c:	20000420 	.word	0x20000420

08009730 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	334c      	adds	r3, #76	; 0x4c
 800973c:	4618      	mov	r0, r3
 800973e:	f015 fad1 	bl	801ece4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009746:	4618      	mov	r0, r3
 8009748:	f000 ff7a 	bl	800a640 <vPortFree>
			vPortFree( pxTCB );
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 ff77 	bl	800a640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009762:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <prvResetNextTaskUnblockTime+0x38>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d104      	bne.n	8009776 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800976c:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <prvResetNextTaskUnblockTime+0x3c>)
 800976e:	f04f 32ff 	mov.w	r2, #4294967295
 8009772:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009774:	e008      	b.n	8009788 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009776:	4b07      	ldr	r3, [pc, #28]	; (8009794 <prvResetNextTaskUnblockTime+0x38>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	4a04      	ldr	r2, [pc, #16]	; (8009798 <prvResetNextTaskUnblockTime+0x3c>)
 8009786:	6013      	str	r3, [r2, #0]
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	200003f0 	.word	0x200003f0
 8009798:	20000458 	.word	0x20000458

0800979c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80097a2:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <xTaskGetCurrentTaskHandle+0x1c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80097a8:	687b      	ldr	r3, [r7, #4]
	}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000338 	.word	0x20000338

080097bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097c2:	4b0b      	ldr	r3, [pc, #44]	; (80097f0 <xTaskGetSchedulerState+0x34>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097ca:	2301      	movs	r3, #1
 80097cc:	607b      	str	r3, [r7, #4]
 80097ce:	e008      	b.n	80097e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097d0:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <xTaskGetSchedulerState+0x38>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d102      	bne.n	80097de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097d8:	2302      	movs	r3, #2
 80097da:	607b      	str	r3, [r7, #4]
 80097dc:	e001      	b.n	80097e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097de:	2300      	movs	r3, #0
 80097e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097e2:	687b      	ldr	r3, [r7, #4]
	}
 80097e4:	4618      	mov	r0, r3
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	20000444 	.word	0x20000444
 80097f4:	20000460 	.word	0x20000460

080097f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d05e      	beq.n	80098cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009812:	4b31      	ldr	r3, [pc, #196]	; (80098d8 <xTaskPriorityInherit+0xe0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	429a      	cmp	r2, r3
 800981a:	d24e      	bcs.n	80098ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	db06      	blt.n	8009832 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009824:	4b2c      	ldr	r3, [pc, #176]	; (80098d8 <xTaskPriorityInherit+0xe0>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982a:	f1c3 0207 	rsb	r2, r3, #7
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	6959      	ldr	r1, [r3, #20]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4a26      	ldr	r2, [pc, #152]	; (80098dc <xTaskPriorityInherit+0xe4>)
 8009844:	4413      	add	r3, r2
 8009846:	4299      	cmp	r1, r3
 8009848:	d12f      	bne.n	80098aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	3304      	adds	r3, #4
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fa41 	bl	8007cd6 <uxListRemove>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10a      	bne.n	8009870 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985e:	2201      	movs	r2, #1
 8009860:	fa02 f303 	lsl.w	r3, r2, r3
 8009864:	43da      	mvns	r2, r3
 8009866:	4b1e      	ldr	r3, [pc, #120]	; (80098e0 <xTaskPriorityInherit+0xe8>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4013      	ands	r3, r2
 800986c:	4a1c      	ldr	r2, [pc, #112]	; (80098e0 <xTaskPriorityInherit+0xe8>)
 800986e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009870:	4b19      	ldr	r3, [pc, #100]	; (80098d8 <xTaskPriorityInherit+0xe0>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	2201      	movs	r2, #1
 8009880:	409a      	lsls	r2, r3
 8009882:	4b17      	ldr	r3, [pc, #92]	; (80098e0 <xTaskPriorityInherit+0xe8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4313      	orrs	r3, r2
 8009888:	4a15      	ldr	r2, [pc, #84]	; (80098e0 <xTaskPriorityInherit+0xe8>)
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4a10      	ldr	r2, [pc, #64]	; (80098dc <xTaskPriorityInherit+0xe4>)
 800989a:	441a      	add	r2, r3
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	3304      	adds	r3, #4
 80098a0:	4619      	mov	r1, r3
 80098a2:	4610      	mov	r0, r2
 80098a4:	f7fe f9ba 	bl	8007c1c <vListInsertEnd>
 80098a8:	e004      	b.n	80098b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098aa:	4b0b      	ldr	r3, [pc, #44]	; (80098d8 <xTaskPriorityInherit+0xe0>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80098b4:	2301      	movs	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	e008      	b.n	80098cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098be:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <xTaskPriorityInherit+0xe0>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d201      	bcs.n	80098cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80098c8:	2301      	movs	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098cc:	68fb      	ldr	r3, [r7, #12]
	}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000338 	.word	0x20000338
 80098dc:	2000033c 	.word	0x2000033c
 80098e0:	20000440 	.word	0x20000440

080098e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098f0:	2300      	movs	r3, #0
 80098f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d06e      	beq.n	80099d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098fa:	4b3a      	ldr	r3, [pc, #232]	; (80099e4 <xTaskPriorityDisinherit+0x100>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	429a      	cmp	r2, r3
 8009902:	d00a      	beq.n	800991a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	60fb      	str	r3, [r7, #12]
}
 8009916:	bf00      	nop
 8009918:	e7fe      	b.n	8009918 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	60bb      	str	r3, [r7, #8]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800993c:	1e5a      	subs	r2, r3, #1
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994a:	429a      	cmp	r2, r3
 800994c:	d044      	beq.n	80099d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009952:	2b00      	cmp	r3, #0
 8009954:	d140      	bne.n	80099d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	3304      	adds	r3, #4
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe f9bb 	bl	8007cd6 <uxListRemove>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d115      	bne.n	8009992 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996a:	491f      	ldr	r1, [pc, #124]	; (80099e8 <xTaskPriorityDisinherit+0x104>)
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xTaskPriorityDisinherit+0xae>
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009980:	2201      	movs	r2, #1
 8009982:	fa02 f303 	lsl.w	r3, r2, r3
 8009986:	43da      	mvns	r2, r3
 8009988:	4b18      	ldr	r3, [pc, #96]	; (80099ec <xTaskPriorityDisinherit+0x108>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4013      	ands	r3, r2
 800998e:	4a17      	ldr	r2, [pc, #92]	; (80099ec <xTaskPriorityDisinherit+0x108>)
 8009990:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	f1c3 0207 	rsb	r2, r3, #7
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099aa:	2201      	movs	r2, #1
 80099ac:	409a      	lsls	r2, r3
 80099ae:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <xTaskPriorityDisinherit+0x108>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	4a0d      	ldr	r2, [pc, #52]	; (80099ec <xTaskPriorityDisinherit+0x108>)
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4a08      	ldr	r2, [pc, #32]	; (80099e8 <xTaskPriorityDisinherit+0x104>)
 80099c6:	441a      	add	r2, r3
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	3304      	adds	r3, #4
 80099cc:	4619      	mov	r1, r3
 80099ce:	4610      	mov	r0, r2
 80099d0:	f7fe f924 	bl	8007c1c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099d4:	2301      	movs	r3, #1
 80099d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099d8:	697b      	ldr	r3, [r7, #20]
	}
 80099da:	4618      	mov	r0, r3
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20000338 	.word	0x20000338
 80099e8:	2000033c 	.word	0x2000033c
 80099ec:	20000440 	.word	0x20000440

080099f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80099fe:	2301      	movs	r3, #1
 8009a00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d077      	beq.n	8009af8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10a      	bne.n	8009a26 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	60fb      	str	r3, [r7, #12]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d902      	bls.n	8009a36 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	61fb      	str	r3, [r7, #28]
 8009a34:	e002      	b.n	8009a3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	69fa      	ldr	r2, [r7, #28]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d058      	beq.n	8009af8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d153      	bne.n	8009af8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009a50:	4b2b      	ldr	r3, [pc, #172]	; (8009b00 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d10a      	bne.n	8009a70 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	60bb      	str	r3, [r7, #8]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	db04      	blt.n	8009a8e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	f1c3 0207 	rsb	r2, r3, #7
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	6959      	ldr	r1, [r3, #20]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4a19      	ldr	r2, [pc, #100]	; (8009b04 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009a9e:	4413      	add	r3, r2
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	d129      	bne.n	8009af8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fe f914 	bl	8007cd6 <uxListRemove>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	2201      	movs	r2, #1
 8009aba:	fa02 f303 	lsl.w	r3, r2, r3
 8009abe:	43da      	mvns	r2, r3
 8009ac0:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	4a10      	ldr	r2, [pc, #64]	; (8009b08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009ac8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	2201      	movs	r2, #1
 8009ad0:	409a      	lsls	r2, r3
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	4a0b      	ldr	r2, [pc, #44]	; (8009b08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4a06      	ldr	r2, [pc, #24]	; (8009b04 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009aea:	441a      	add	r2, r3
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f7fe f892 	bl	8007c1c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009af8:	bf00      	nop
 8009afa:	3720      	adds	r7, #32
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000338 	.word	0x20000338
 8009b04:	2000033c 	.word	0x2000033c
 8009b08:	20000440 	.word	0x20000440

08009b0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009b0c:	b480      	push	{r7}
 8009b0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009b10:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b18:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b1e:	3201      	adds	r2, #1
 8009b20:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009b22:	4b03      	ldr	r3, [pc, #12]	; (8009b30 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b24:	681b      	ldr	r3, [r3, #0]
	}
 8009b26:	4618      	mov	r0, r3
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	20000338 	.word	0x20000338

08009b34 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009b42:	f000 fb8f 	bl	800a264 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009b46:	4b29      	ldr	r3, [pc, #164]	; (8009bec <xTaskNotifyWait+0xb8>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d01c      	beq.n	8009b8e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009b54:	4b25      	ldr	r3, [pc, #148]	; (8009bec <xTaskNotifyWait+0xb8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	43d2      	mvns	r2, r2
 8009b60:	400a      	ands	r2, r1
 8009b62:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009b66:	4b21      	ldr	r3, [pc, #132]	; (8009bec <xTaskNotifyWait+0xb8>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00b      	beq.n	8009b8e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b76:	2101      	movs	r1, #1
 8009b78:	6838      	ldr	r0, [r7, #0]
 8009b7a:	f000 f9dd 	bl	8009f38 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009b7e:	4b1c      	ldr	r3, [pc, #112]	; (8009bf0 <xTaskNotifyWait+0xbc>)
 8009b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009b8e:	f000 fb99 	bl	800a2c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009b92:	f000 fb67 	bl	800a264 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d005      	beq.n	8009ba8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009b9c:	4b13      	ldr	r3, [pc, #76]	; (8009bec <xTaskNotifyWait+0xb8>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009ba8:	4b10      	ldr	r3, [pc, #64]	; (8009bec <xTaskNotifyWait+0xb8>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d002      	beq.n	8009bbc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]
 8009bba:	e00a      	b.n	8009bd2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <xTaskNotifyWait+0xb8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	43d2      	mvns	r2, r2
 8009bc8:	400a      	ands	r2, r1
 8009bca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009bd2:	4b06      	ldr	r3, [pc, #24]	; (8009bec <xTaskNotifyWait+0xb8>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8009bdc:	f000 fb72 	bl	800a2c4 <vPortExitCritical>

		return xReturn;
 8009be0:	697b      	ldr	r3, [r7, #20]
	}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20000338 	.word	0x20000338
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08a      	sub	sp, #40	; 0x28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	4613      	mov	r3, r2
 8009c02:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009c04:	2301      	movs	r3, #1
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <xTaskGenericNotify+0x30>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	61bb      	str	r3, [r7, #24]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009c28:	f000 fb1c 	bl	800a264 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d004      	beq.n	8009c3c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009c42:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009c4c:	79fb      	ldrb	r3, [r7, #7]
 8009c4e:	2b04      	cmp	r3, #4
 8009c50:	d82d      	bhi.n	8009cae <xTaskGenericNotify+0xba>
 8009c52:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <xTaskGenericNotify+0x64>)
 8009c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c58:	08009cd1 	.word	0x08009cd1
 8009c5c:	08009c6d 	.word	0x08009c6d
 8009c60:	08009c7f 	.word	0x08009c7f
 8009c64:	08009c8f 	.word	0x08009c8f
 8009c68:	08009c99 	.word	0x08009c99
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	431a      	orrs	r2, r3
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009c7c:	e02b      	b.n	8009cd6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009c8c:	e023      	b.n	8009cd6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009c96:	e01e      	b.n	8009cd6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009c98:	7ffb      	ldrb	r3, [r7, #31]
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d004      	beq.n	8009ca8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009ca6:	e016      	b.n	8009cd6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009cac:	e013      	b.n	8009cd6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb8:	d00c      	beq.n	8009cd4 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	617b      	str	r3, [r7, #20]
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <xTaskGenericNotify+0xda>
					break;
 8009cd0:	bf00      	nop
 8009cd2:	e000      	b.n	8009cd6 <xTaskGenericNotify+0xe2>

					break;
 8009cd4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009cd6:	7ffb      	ldrb	r3, [r7, #31]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d139      	bne.n	8009d50 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fd fff8 	bl	8007cd6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cea:	2201      	movs	r2, #1
 8009cec:	409a      	lsls	r2, r3
 8009cee:	4b1c      	ldr	r3, [pc, #112]	; (8009d60 <xTaskGenericNotify+0x16c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	4a1a      	ldr	r2, [pc, #104]	; (8009d60 <xTaskGenericNotify+0x16c>)
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4a17      	ldr	r2, [pc, #92]	; (8009d64 <xTaskGenericNotify+0x170>)
 8009d06:	441a      	add	r2, r3
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f7fd ff84 	bl	8007c1c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00a      	beq.n	8009d32 <xTaskGenericNotify+0x13e>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	613b      	str	r3, [r7, #16]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <xTaskGenericNotify+0x174>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d907      	bls.n	8009d50 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <xTaskGenericNotify+0x178>)
 8009d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009d50:	f000 fab8 	bl	800a2c4 <vPortExitCritical>

		return xReturn;
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3728      	adds	r7, #40	; 0x28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000440 	.word	0x20000440
 8009d64:	2000033c 	.word	0x2000033c
 8009d68:	20000338 	.word	0x20000338
 8009d6c:	e000ed04 	.word	0xe000ed04

08009d70 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08e      	sub	sp, #56	; 0x38
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	603b      	str	r3, [r7, #0]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009d80:	2301      	movs	r3, #1
 8009d82:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009da0:	f000 fb42 	bl	800a428 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009da8:	f3ef 8211 	mrs	r2, BASEPRI
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	623a      	str	r2, [r7, #32]
 8009dbe:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009dc0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d004      	beq.n	8009dd4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	2202      	movs	r2, #2
 8009de2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 8009de6:	79fb      	ldrb	r3, [r7, #7]
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d82f      	bhi.n	8009e4c <xTaskGenericNotifyFromISR+0xdc>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <xTaskGenericNotifyFromISR+0x84>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e6f 	.word	0x08009e6f
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009e1b 	.word	0x08009e1b
 8009e00:	08009e2b 	.word	0x08009e2b
 8009e04:	08009e35 	.word	0x08009e35
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	431a      	orrs	r2, r3
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009e18:	e02c      	b.n	8009e74 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009e28:	e024      	b.n	8009e74 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 8009e32:	e01f      	b.n	8009e74 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d004      	beq.n	8009e46 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009e44:	e016      	b.n	8009e74 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009e4a:	e013      	b.n	8009e74 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e56:	d00c      	beq.n	8009e72 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	61bb      	str	r3, [r7, #24]
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009e6e:	bf00      	nop
 8009e70:	e000      	b.n	8009e74 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009e72:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009e74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d145      	bne.n	8009f08 <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00a      	beq.n	8009e9a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	617b      	str	r3, [r7, #20]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e9a:	4b21      	ldr	r3, [pc, #132]	; (8009f20 <xTaskGenericNotifyFromISR+0x1b0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d11c      	bne.n	8009edc <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fd ff15 	bl	8007cd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	409a      	lsls	r2, r3
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <xTaskGenericNotifyFromISR+0x1b4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	4a1a      	ldr	r2, [pc, #104]	; (8009f24 <xTaskGenericNotifyFromISR+0x1b4>)
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4a17      	ldr	r2, [pc, #92]	; (8009f28 <xTaskGenericNotifyFromISR+0x1b8>)
 8009ecc:	441a      	add	r2, r3
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	f7fd fea1 	bl	8007c1c <vListInsertEnd>
 8009eda:	e005      	b.n	8009ee8 <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	3318      	adds	r3, #24
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4812      	ldr	r0, [pc, #72]	; (8009f2c <xTaskGenericNotifyFromISR+0x1bc>)
 8009ee4:	f7fd fe9a 	bl	8007c1c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eec:	4b10      	ldr	r3, [pc, #64]	; (8009f30 <xTaskGenericNotifyFromISR+0x1c0>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d908      	bls.n	8009f08 <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009efe:	2201      	movs	r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009f02:	4b0c      	ldr	r3, [pc, #48]	; (8009f34 <xTaskGenericNotifyFromISR+0x1c4>)
 8009f04:	2201      	movs	r2, #1
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f383 8811 	msr	BASEPRI, r3
}
 8009f12:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3738      	adds	r7, #56	; 0x38
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000460 	.word	0x20000460
 8009f24:	20000440 	.word	0x20000440
 8009f28:	2000033c 	.word	0x2000033c
 8009f2c:	200003f8 	.word	0x200003f8
 8009f30:	20000338 	.word	0x20000338
 8009f34:	2000044c 	.word	0x2000044c

08009f38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f42:	4b29      	ldr	r3, [pc, #164]	; (8009fe8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f48:	4b28      	ldr	r3, [pc, #160]	; (8009fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fd fec1 	bl	8007cd6 <uxListRemove>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10b      	bne.n	8009f72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009f5a:	4b24      	ldr	r3, [pc, #144]	; (8009fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f60:	2201      	movs	r2, #1
 8009f62:	fa02 f303 	lsl.w	r3, r2, r3
 8009f66:	43da      	mvns	r2, r3
 8009f68:	4b21      	ldr	r3, [pc, #132]	; (8009ff0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	4a20      	ldr	r2, [pc, #128]	; (8009ff0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f78:	d10a      	bne.n	8009f90 <prvAddCurrentTaskToDelayedList+0x58>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d007      	beq.n	8009f90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f80:	4b1a      	ldr	r3, [pc, #104]	; (8009fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3304      	adds	r3, #4
 8009f86:	4619      	mov	r1, r3
 8009f88:	481a      	ldr	r0, [pc, #104]	; (8009ff4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f8a:	f7fd fe47 	bl	8007c1c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f8e:	e026      	b.n	8009fde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4413      	add	r3, r2
 8009f96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f98:	4b14      	ldr	r3, [pc, #80]	; (8009fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d209      	bcs.n	8009fbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fa8:	4b13      	ldr	r3, [pc, #76]	; (8009ff8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	f7fd fe55 	bl	8007c64 <vListInsert>
}
 8009fba:	e010      	b.n	8009fde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fbc:	4b0f      	ldr	r3, [pc, #60]	; (8009ffc <prvAddCurrentTaskToDelayedList+0xc4>)
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	; (8009fec <prvAddCurrentTaskToDelayedList+0xb4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f7fd fe4b 	bl	8007c64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fce:	4b0c      	ldr	r3, [pc, #48]	; (800a000 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d202      	bcs.n	8009fde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009fd8:	4a09      	ldr	r2, [pc, #36]	; (800a000 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	6013      	str	r3, [r2, #0]
}
 8009fde:	bf00      	nop
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	2000043c 	.word	0x2000043c
 8009fec:	20000338 	.word	0x20000338
 8009ff0:	20000440 	.word	0x20000440
 8009ff4:	20000424 	.word	0x20000424
 8009ff8:	200003f4 	.word	0x200003f4
 8009ffc:	200003f0 	.word	0x200003f0
 800a000:	20000458 	.word	0x20000458

0800a004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3b04      	subs	r3, #4
 800a014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3b04      	subs	r3, #4
 800a022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f023 0201 	bic.w	r2, r3, #1
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3b04      	subs	r3, #4
 800a032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a034:	4a0c      	ldr	r2, [pc, #48]	; (800a068 <pxPortInitialiseStack+0x64>)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3b14      	subs	r3, #20
 800a03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3b04      	subs	r3, #4
 800a04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f06f 0202 	mvn.w	r2, #2
 800a052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3b20      	subs	r3, #32
 800a058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a05a:	68fb      	ldr	r3, [r7, #12]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	0800a06d 	.word	0x0800a06d

0800a06c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a076:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <prvTaskExitError+0x54>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d00a      	beq.n	800a096 <prvTaskExitError+0x2a>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	60fb      	str	r3, [r7, #12]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <prvTaskExitError+0x28>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	60bb      	str	r3, [r7, #8]
}
 800a0a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a0aa:	bf00      	nop
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0fc      	beq.n	800a0ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	20000050 	.word	0x20000050
	...

0800a0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <pxCurrentTCBConst2>)
 800a0d2:	6819      	ldr	r1, [r3, #0]
 800a0d4:	6808      	ldr	r0, [r1, #0]
 800a0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0da:	f380 8809 	msr	PSP, r0
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8811 	msr	BASEPRI, r0
 800a0ea:	4770      	bx	lr
 800a0ec:	f3af 8000 	nop.w

0800a0f0 <pxCurrentTCBConst2>:
 800a0f0:	20000338 	.word	0x20000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop

0800a0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0f8:	4808      	ldr	r0, [pc, #32]	; (800a11c <prvPortStartFirstTask+0x24>)
 800a0fa:	6800      	ldr	r0, [r0, #0]
 800a0fc:	6800      	ldr	r0, [r0, #0]
 800a0fe:	f380 8808 	msr	MSP, r0
 800a102:	f04f 0000 	mov.w	r0, #0
 800a106:	f380 8814 	msr	CONTROL, r0
 800a10a:	b662      	cpsie	i
 800a10c:	b661      	cpsie	f
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	df00      	svc	0
 800a118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a11a:	bf00      	nop
 800a11c:	e000ed08 	.word	0xe000ed08

0800a120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a126:	4b46      	ldr	r3, [pc, #280]	; (800a240 <xPortStartScheduler+0x120>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a46      	ldr	r2, [pc, #280]	; (800a244 <xPortStartScheduler+0x124>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10a      	bne.n	800a146 <xPortStartScheduler+0x26>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	613b      	str	r3, [r7, #16]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a146:	4b3e      	ldr	r3, [pc, #248]	; (800a240 <xPortStartScheduler+0x120>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a3f      	ldr	r2, [pc, #252]	; (800a248 <xPortStartScheduler+0x128>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d10a      	bne.n	800a166 <xPortStartScheduler+0x46>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60fb      	str	r3, [r7, #12]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a166:	4b39      	ldr	r3, [pc, #228]	; (800a24c <xPortStartScheduler+0x12c>)
 800a168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	22ff      	movs	r2, #255	; 0xff
 800a176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	4b31      	ldr	r3, [pc, #196]	; (800a250 <xPortStartScheduler+0x130>)
 800a18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a18e:	4b31      	ldr	r3, [pc, #196]	; (800a254 <xPortStartScheduler+0x134>)
 800a190:	2207      	movs	r2, #7
 800a192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a194:	e009      	b.n	800a1aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a196:	4b2f      	ldr	r3, [pc, #188]	; (800a254 <xPortStartScheduler+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	4a2d      	ldr	r2, [pc, #180]	; (800a254 <xPortStartScheduler+0x134>)
 800a19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1b2:	2b80      	cmp	r3, #128	; 0x80
 800a1b4:	d0ef      	beq.n	800a196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1b6:	4b27      	ldr	r3, [pc, #156]	; (800a254 <xPortStartScheduler+0x134>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f1c3 0307 	rsb	r3, r3, #7
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d00a      	beq.n	800a1d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	60bb      	str	r3, [r7, #8]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1d8:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <xPortStartScheduler+0x134>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	021b      	lsls	r3, r3, #8
 800a1de:	4a1d      	ldr	r2, [pc, #116]	; (800a254 <xPortStartScheduler+0x134>)
 800a1e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1e2:	4b1c      	ldr	r3, [pc, #112]	; (800a254 <xPortStartScheduler+0x134>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ea:	4a1a      	ldr	r2, [pc, #104]	; (800a254 <xPortStartScheduler+0x134>)
 800a1ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1f6:	4b18      	ldr	r3, [pc, #96]	; (800a258 <xPortStartScheduler+0x138>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a17      	ldr	r2, [pc, #92]	; (800a258 <xPortStartScheduler+0x138>)
 800a1fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a202:	4b15      	ldr	r3, [pc, #84]	; (800a258 <xPortStartScheduler+0x138>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a14      	ldr	r2, [pc, #80]	; (800a258 <xPortStartScheduler+0x138>)
 800a208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a20c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a20e:	f000 f8dd 	bl	800a3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a212:	4b12      	ldr	r3, [pc, #72]	; (800a25c <xPortStartScheduler+0x13c>)
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a218:	f000 f8fc 	bl	800a414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a21c:	4b10      	ldr	r3, [pc, #64]	; (800a260 <xPortStartScheduler+0x140>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a0f      	ldr	r2, [pc, #60]	; (800a260 <xPortStartScheduler+0x140>)
 800a222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a228:	f7ff ff66 	bl	800a0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a22c:	f7ff f88e 	bl	800934c <vTaskSwitchContext>
	prvTaskExitError();
 800a230:	f7ff ff1c 	bl	800a06c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	e000ed00 	.word	0xe000ed00
 800a244:	410fc271 	.word	0x410fc271
 800a248:	410fc270 	.word	0x410fc270
 800a24c:	e000e400 	.word	0xe000e400
 800a250:	20000464 	.word	0x20000464
 800a254:	20000468 	.word	0x20000468
 800a258:	e000ed20 	.word	0xe000ed20
 800a25c:	20000050 	.word	0x20000050
 800a260:	e000ef34 	.word	0xe000ef34

0800a264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	607b      	str	r3, [r7, #4]
}
 800a27c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a27e:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <vPortEnterCritical+0x58>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3301      	adds	r3, #1
 800a284:	4a0d      	ldr	r2, [pc, #52]	; (800a2bc <vPortEnterCritical+0x58>)
 800a286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <vPortEnterCritical+0x58>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d10f      	bne.n	800a2b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a290:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <vPortEnterCritical+0x5c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	603b      	str	r3, [r7, #0]
}
 800a2ac:	bf00      	nop
 800a2ae:	e7fe      	b.n	800a2ae <vPortEnterCritical+0x4a>
	}
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	20000050 	.word	0x20000050
 800a2c0:	e000ed04 	.word	0xe000ed04

0800a2c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2ca:	4b12      	ldr	r3, [pc, #72]	; (800a314 <vPortExitCritical+0x50>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <vPortExitCritical+0x24>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	607b      	str	r3, [r7, #4]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <vPortExitCritical+0x50>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	4a09      	ldr	r2, [pc, #36]	; (800a314 <vPortExitCritical+0x50>)
 800a2f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2f2:	4b08      	ldr	r3, [pc, #32]	; (800a314 <vPortExitCritical+0x50>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d105      	bne.n	800a306 <vPortExitCritical+0x42>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	f383 8811 	msr	BASEPRI, r3
}
 800a304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a306:	bf00      	nop
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000050 	.word	0x20000050
	...

0800a320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a320:	f3ef 8009 	mrs	r0, PSP
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	4b15      	ldr	r3, [pc, #84]	; (800a380 <pxCurrentTCBConst>)
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	f01e 0f10 	tst.w	lr, #16
 800a330:	bf08      	it	eq
 800a332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	6010      	str	r0, [r2, #0]
 800a33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a340:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a344:	f380 8811 	msr	BASEPRI, r0
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f7fe fffc 	bl	800934c <vTaskSwitchContext>
 800a354:	f04f 0000 	mov.w	r0, #0
 800a358:	f380 8811 	msr	BASEPRI, r0
 800a35c:	bc09      	pop	{r0, r3}
 800a35e:	6819      	ldr	r1, [r3, #0]
 800a360:	6808      	ldr	r0, [r1, #0]
 800a362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a366:	f01e 0f10 	tst.w	lr, #16
 800a36a:	bf08      	it	eq
 800a36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a370:	f380 8809 	msr	PSP, r0
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	f3af 8000 	nop.w

0800a380 <pxCurrentTCBConst>:
 800a380:	20000338 	.word	0x20000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	607b      	str	r3, [r7, #4]
}
 800a3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3a2:	f7fe ff1b 	bl	80091dc <xTaskIncrementTick>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3ac:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <SysTick_Handler+0x40>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f383 8811 	msr	BASEPRI, r3
}
 800a3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3d0:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <vPortSetupTimerInterrupt+0x34>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <vPortSetupTimerInterrupt+0x38>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <vPortSetupTimerInterrupt+0x3c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a0a      	ldr	r2, [pc, #40]	; (800a40c <vPortSetupTimerInterrupt+0x40>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	099b      	lsrs	r3, r3, #6
 800a3e8:	4a09      	ldr	r2, [pc, #36]	; (800a410 <vPortSetupTimerInterrupt+0x44>)
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ee:	4b04      	ldr	r3, [pc, #16]	; (800a400 <vPortSetupTimerInterrupt+0x34>)
 800a3f0:	2207      	movs	r2, #7
 800a3f2:	601a      	str	r2, [r3, #0]
}
 800a3f4:	bf00      	nop
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	e000e010 	.word	0xe000e010
 800a404:	e000e018 	.word	0xe000e018
 800a408:	20000010 	.word	0x20000010
 800a40c:	10624dd3 	.word	0x10624dd3
 800a410:	e000e014 	.word	0xe000e014

0800a414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a424 <vPortEnableVFP+0x10>
 800a418:	6801      	ldr	r1, [r0, #0]
 800a41a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a41e:	6001      	str	r1, [r0, #0]
 800a420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a422:	bf00      	nop
 800a424:	e000ed88 	.word	0xe000ed88

0800a428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a42e:	f3ef 8305 	mrs	r3, IPSR
 800a432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b0f      	cmp	r3, #15
 800a438:	d914      	bls.n	800a464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a43a:	4a17      	ldr	r2, [pc, #92]	; (800a498 <vPortValidateInterruptPriority+0x70>)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4413      	add	r3, r2
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a444:	4b15      	ldr	r3, [pc, #84]	; (800a49c <vPortValidateInterruptPriority+0x74>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	7afa      	ldrb	r2, [r7, #11]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d20a      	bcs.n	800a464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a464:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <vPortValidateInterruptPriority+0x78>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a46c:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <vPortValidateInterruptPriority+0x7c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d90a      	bls.n	800a48a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	603b      	str	r3, [r7, #0]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <vPortValidateInterruptPriority+0x60>
	}
 800a48a:	bf00      	nop
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	e000e3f0 	.word	0xe000e3f0
 800a49c:	20000464 	.word	0x20000464
 800a4a0:	e000ed0c 	.word	0xe000ed0c
 800a4a4:	20000468 	.word	0x20000468

0800a4a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08a      	sub	sp, #40	; 0x28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4b4:	f7fe fdc6 	bl	8009044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4b8:	4b5b      	ldr	r3, [pc, #364]	; (800a628 <pvPortMalloc+0x180>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4c0:	f000 f920 	bl	800a704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4c4:	4b59      	ldr	r3, [pc, #356]	; (800a62c <pvPortMalloc+0x184>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f040 8093 	bne.w	800a5f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01d      	beq.n	800a514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a4d8:	2208      	movs	r2, #8
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4413      	add	r3, r2
 800a4de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d014      	beq.n	800a514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f023 0307 	bic.w	r3, r3, #7
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <pvPortMalloc+0x6c>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	617b      	str	r3, [r7, #20]
}
 800a510:	bf00      	nop
 800a512:	e7fe      	b.n	800a512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d06e      	beq.n	800a5f8 <pvPortMalloc+0x150>
 800a51a:	4b45      	ldr	r3, [pc, #276]	; (800a630 <pvPortMalloc+0x188>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d869      	bhi.n	800a5f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a524:	4b43      	ldr	r3, [pc, #268]	; (800a634 <pvPortMalloc+0x18c>)
 800a526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a528:	4b42      	ldr	r3, [pc, #264]	; (800a634 <pvPortMalloc+0x18c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a52e:	e004      	b.n	800a53a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d903      	bls.n	800a54c <pvPortMalloc+0xa4>
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1f1      	bne.n	800a530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a54c:	4b36      	ldr	r3, [pc, #216]	; (800a628 <pvPortMalloc+0x180>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a552:	429a      	cmp	r2, r3
 800a554:	d050      	beq.n	800a5f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2208      	movs	r2, #8
 800a55c:	4413      	add	r3, r2
 800a55e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	1ad2      	subs	r2, r2, r3
 800a570:	2308      	movs	r3, #8
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	429a      	cmp	r2, r3
 800a576:	d91f      	bls.n	800a5b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4413      	add	r3, r2
 800a57e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	613b      	str	r3, [r7, #16]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5b2:	69b8      	ldr	r0, [r7, #24]
 800a5b4:	f000 f90a 	bl	800a7cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5b8:	4b1d      	ldr	r3, [pc, #116]	; (800a630 <pvPortMalloc+0x188>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	4a1b      	ldr	r2, [pc, #108]	; (800a630 <pvPortMalloc+0x188>)
 800a5c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5c6:	4b1a      	ldr	r3, [pc, #104]	; (800a630 <pvPortMalloc+0x188>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	4b1b      	ldr	r3, [pc, #108]	; (800a638 <pvPortMalloc+0x190>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d203      	bcs.n	800a5da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5d2:	4b17      	ldr	r3, [pc, #92]	; (800a630 <pvPortMalloc+0x188>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a18      	ldr	r2, [pc, #96]	; (800a638 <pvPortMalloc+0x190>)
 800a5d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <pvPortMalloc+0x184>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5ee:	4b13      	ldr	r3, [pc, #76]	; (800a63c <pvPortMalloc+0x194>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	4a11      	ldr	r2, [pc, #68]	; (800a63c <pvPortMalloc+0x194>)
 800a5f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5f8:	f7fe fd32 	bl	8009060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f003 0307 	and.w	r3, r3, #7
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <pvPortMalloc+0x174>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	60fb      	str	r3, [r7, #12]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <pvPortMalloc+0x172>
	return pvReturn;
 800a61c:	69fb      	ldr	r3, [r7, #28]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3728      	adds	r7, #40	; 0x28
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20013cf4 	.word	0x20013cf4
 800a62c:	20013d08 	.word	0x20013d08
 800a630:	20013cf8 	.word	0x20013cf8
 800a634:	20013cec 	.word	0x20013cec
 800a638:	20013cfc 	.word	0x20013cfc
 800a63c:	20013d00 	.word	0x20013d00

0800a640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d04d      	beq.n	800a6ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a652:	2308      	movs	r3, #8
 800a654:	425b      	negs	r3, r3
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4413      	add	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	4b24      	ldr	r3, [pc, #144]	; (800a6f8 <vPortFree+0xb8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4013      	ands	r3, r2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10a      	bne.n	800a684 <vPortFree+0x44>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	60fb      	str	r3, [r7, #12]
}
 800a680:	bf00      	nop
 800a682:	e7fe      	b.n	800a682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00a      	beq.n	800a6a2 <vPortFree+0x62>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	60bb      	str	r3, [r7, #8]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <vPortFree+0xb8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01e      	beq.n	800a6ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d11a      	bne.n	800a6ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	4b0e      	ldr	r3, [pc, #56]	; (800a6f8 <vPortFree+0xb8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	43db      	mvns	r3, r3
 800a6c2:	401a      	ands	r2, r3
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6c8:	f7fe fcbc 	bl	8009044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <vPortFree+0xbc>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <vPortFree+0xbc>)
 800a6d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6da:	6938      	ldr	r0, [r7, #16]
 800a6dc:	f000 f876 	bl	800a7cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6e0:	4b07      	ldr	r3, [pc, #28]	; (800a700 <vPortFree+0xc0>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	4a06      	ldr	r2, [pc, #24]	; (800a700 <vPortFree+0xc0>)
 800a6e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6ea:	f7fe fcb9 	bl	8009060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6ee:	bf00      	nop
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20013d08 	.word	0x20013d08
 800a6fc:	20013cf8 	.word	0x20013cf8
 800a700:	20013d04 	.word	0x20013d04

0800a704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a70a:	4b29      	ldr	r3, [pc, #164]	; (800a7b0 <prvHeapInit+0xac>)
 800a70c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a70e:	4b29      	ldr	r3, [pc, #164]	; (800a7b4 <prvHeapInit+0xb0>)
 800a710:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f003 0307 	and.w	r3, r3, #7
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00c      	beq.n	800a736 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	3307      	adds	r3, #7
 800a720:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f023 0307 	bic.w	r3, r3, #7
 800a728:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	4a20      	ldr	r2, [pc, #128]	; (800a7b4 <prvHeapInit+0xb0>)
 800a732:	4413      	add	r3, r2
 800a734:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a73a:	4a1f      	ldr	r2, [pc, #124]	; (800a7b8 <prvHeapInit+0xb4>)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a740:	4b1d      	ldr	r3, [pc, #116]	; (800a7b8 <prvHeapInit+0xb4>)
 800a742:	2200      	movs	r2, #0
 800a744:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	4413      	add	r3, r2
 800a74c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a74e:	2208      	movs	r2, #8
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	1a9b      	subs	r3, r3, r2
 800a754:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f023 0307 	bic.w	r3, r3, #7
 800a75c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4a16      	ldr	r2, [pc, #88]	; (800a7bc <prvHeapInit+0xb8>)
 800a762:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a764:	4b15      	ldr	r3, [pc, #84]	; (800a7bc <prvHeapInit+0xb8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2200      	movs	r2, #0
 800a76a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a76c:	4b13      	ldr	r3, [pc, #76]	; (800a7bc <prvHeapInit+0xb8>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	1ad2      	subs	r2, r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a782:	4b0e      	ldr	r3, [pc, #56]	; (800a7bc <prvHeapInit+0xb8>)
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	4a0c      	ldr	r2, [pc, #48]	; (800a7c0 <prvHeapInit+0xbc>)
 800a790:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	4a0b      	ldr	r2, [pc, #44]	; (800a7c4 <prvHeapInit+0xc0>)
 800a798:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a79a:	4b0b      	ldr	r3, [pc, #44]	; (800a7c8 <prvHeapInit+0xc4>)
 800a79c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7a0:	601a      	str	r2, [r3, #0]
}
 800a7a2:	bf00      	nop
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	00013880 	.word	0x00013880
 800a7b4:	2000046c 	.word	0x2000046c
 800a7b8:	20013cec 	.word	0x20013cec
 800a7bc:	20013cf4 	.word	0x20013cf4
 800a7c0:	20013cfc 	.word	0x20013cfc
 800a7c4:	20013cf8 	.word	0x20013cf8
 800a7c8:	20013d08 	.word	0x20013d08

0800a7cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7d4:	4b28      	ldr	r3, [pc, #160]	; (800a878 <prvInsertBlockIntoFreeList+0xac>)
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	e002      	b.n	800a7e0 <prvInsertBlockIntoFreeList+0x14>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	60fb      	str	r3, [r7, #12]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d8f7      	bhi.n	800a7da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d108      	bne.n	800a80e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	441a      	add	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	441a      	add	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d118      	bne.n	800a854 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	4b15      	ldr	r3, [pc, #84]	; (800a87c <prvInsertBlockIntoFreeList+0xb0>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d00d      	beq.n	800a84a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	441a      	add	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	e008      	b.n	800a85c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a84a:	4b0c      	ldr	r3, [pc, #48]	; (800a87c <prvInsertBlockIntoFreeList+0xb0>)
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	e003      	b.n	800a85c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	d002      	beq.n	800a86a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a86a:	bf00      	nop
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	20013cec 	.word	0x20013cec
 800a87c:	20013cf4 	.word	0x20013cf4

0800a880 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	22fa      	movs	r2, #250	; 0xfa
 800a88e:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	330c      	adds	r3, #12
 800a896:	461a      	mov	r2, r3
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f004 fc7e 	bl	800f19c <tcpip_send_msg_wait_sem>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d103      	bne.n	800a8b4 <netconn_apimsg+0x34>
    return apimsg->err;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a8b2:	e001      	b.n	800a8b8 <netconn_apimsg+0x38>
  }
  return err;
 800a8b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08c      	sub	sp, #48	; 0x30
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	603a      	str	r2, [r7, #0]
 800a8ca:	71fb      	strb	r3, [r7, #7]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a8d0:	79fb      	ldrb	r3, [r7, #7]
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f001 fa61 	bl	800bd9c <netconn_alloc>
 800a8da:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d054      	beq.n	800a98c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a8e2:	79bb      	ldrb	r3, [r7, #6]
 800a8e4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a8ea:	f107 0308 	add.w	r3, r7, #8
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4829      	ldr	r0, [pc, #164]	; (800a998 <netconn_new_with_proto_and_callback+0xd8>)
 800a8f2:	f7ff ffc5 	bl	800a880 <netconn_apimsg>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a8fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a900:	2b00      	cmp	r3, #0
 800a902:	d043      	beq.n	800a98c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d005      	beq.n	800a918 <netconn_new_with_proto_and_callback+0x58>
 800a90c:	4b23      	ldr	r3, [pc, #140]	; (800a99c <netconn_new_with_proto_and_callback+0xdc>)
 800a90e:	22a3      	movs	r2, #163	; 0xa3
 800a910:	4923      	ldr	r1, [pc, #140]	; (800a9a0 <netconn_new_with_proto_and_callback+0xe0>)
 800a912:	4824      	ldr	r0, [pc, #144]	; (800a9a4 <netconn_new_with_proto_and_callback+0xe4>)
 800a914:	f014 f90a 	bl	801eb2c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91a:	3310      	adds	r3, #16
 800a91c:	4618      	mov	r0, r3
 800a91e:	f013 f958 	bl	801dbd2 <sys_mbox_valid>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d105      	bne.n	800a934 <netconn_new_with_proto_and_callback+0x74>
 800a928:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <netconn_new_with_proto_and_callback+0xdc>)
 800a92a:	22a4      	movs	r2, #164	; 0xa4
 800a92c:	491e      	ldr	r1, [pc, #120]	; (800a9a8 <netconn_new_with_proto_and_callback+0xe8>)
 800a92e:	481d      	ldr	r0, [pc, #116]	; (800a9a4 <netconn_new_with_proto_and_callback+0xe4>)
 800a930:	f014 f8fc 	bl	801eb2c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a936:	3314      	adds	r3, #20
 800a938:	4618      	mov	r0, r3
 800a93a:	f013 f94a 	bl	801dbd2 <sys_mbox_valid>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d005      	beq.n	800a950 <netconn_new_with_proto_and_callback+0x90>
 800a944:	4b15      	ldr	r3, [pc, #84]	; (800a99c <netconn_new_with_proto_and_callback+0xdc>)
 800a946:	22a6      	movs	r2, #166	; 0xa6
 800a948:	4918      	ldr	r1, [pc, #96]	; (800a9ac <netconn_new_with_proto_and_callback+0xec>)
 800a94a:	4816      	ldr	r0, [pc, #88]	; (800a9a4 <netconn_new_with_proto_and_callback+0xe4>)
 800a94c:	f014 f8ee 	bl	801eb2c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	330c      	adds	r3, #12
 800a954:	4618      	mov	r0, r3
 800a956:	f013 f9cb 	bl	801dcf0 <sys_sem_valid>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d105      	bne.n	800a96c <netconn_new_with_proto_and_callback+0xac>
 800a960:	4b0e      	ldr	r3, [pc, #56]	; (800a99c <netconn_new_with_proto_and_callback+0xdc>)
 800a962:	22a9      	movs	r2, #169	; 0xa9
 800a964:	4912      	ldr	r1, [pc, #72]	; (800a9b0 <netconn_new_with_proto_and_callback+0xf0>)
 800a966:	480f      	ldr	r0, [pc, #60]	; (800a9a4 <netconn_new_with_proto_and_callback+0xe4>)
 800a968:	f014 f8e0 	bl	801eb2c <iprintf>
      sys_sem_free(&conn->op_completed);
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	330c      	adds	r3, #12
 800a970:	4618      	mov	r0, r3
 800a972:	f013 f9b0 	bl	801dcd6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a978:	3310      	adds	r3, #16
 800a97a:	4618      	mov	r0, r3
 800a97c:	f013 f8a2 	bl	801dac4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a982:	2007      	movs	r0, #7
 800a984:	f006 f948 	bl	8010c18 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	e000      	b.n	800a98e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3730      	adds	r7, #48	; 0x30
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	0800bd71 	.word	0x0800bd71
 800a99c:	08022654 	.word	0x08022654
 800a9a0:	08022688 	.word	0x08022688
 800a9a4:	080226ac 	.word	0x080226ac
 800a9a8:	080226d4 	.word	0x080226d4
 800a9ac:	080226ec 	.word	0x080226ec
 800a9b0:	08022710 	.word	0x08022710

0800a9b4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b08c      	sub	sp, #48	; 0x30
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d101      	bne.n	800a9c6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e014      	b.n	800a9f0 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a9ca:	2329      	movs	r3, #41	; 0x29
 800a9cc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a9ce:	f107 030c 	add.w	r3, r7, #12
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4808      	ldr	r0, [pc, #32]	; (800a9f8 <netconn_prepare_delete+0x44>)
 800a9d6:	f7ff ff53 	bl	800a880 <netconn_apimsg>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a9e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <netconn_prepare_delete+0x3a>
    return err;
 800a9e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a9ec:	e000      	b.n	800a9f0 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3730      	adds	r7, #48	; 0x30
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	0800c2d5 	.word	0x0800c2d5

0800a9fc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <netconn_delete+0x12>
    return ERR_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e00d      	b.n	800aa2a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff ffd0 	bl	800a9b4 <netconn_prepare_delete>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800aa18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <netconn_delete+0x2a>
    netconn_free(conn);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 fa29 	bl	800be78 <netconn_free>
  }
  return err;
 800aa26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
	...

0800aa34 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08e      	sub	sp, #56	; 0x38
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d109      	bne.n	800aa5c <netconn_getaddr+0x28>
 800aa48:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <netconn_getaddr+0x8c>)
 800aa4a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800aa4e:	491d      	ldr	r1, [pc, #116]	; (800aac4 <netconn_getaddr+0x90>)
 800aa50:	481d      	ldr	r0, [pc, #116]	; (800aac8 <netconn_getaddr+0x94>)
 800aa52:	f014 f86b 	bl	801eb2c <iprintf>
 800aa56:	f06f 030f 	mvn.w	r3, #15
 800aa5a:	e02d      	b.n	800aab8 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d109      	bne.n	800aa76 <netconn_getaddr+0x42>
 800aa62:	4b17      	ldr	r3, [pc, #92]	; (800aac0 <netconn_getaddr+0x8c>)
 800aa64:	f240 1213 	movw	r2, #275	; 0x113
 800aa68:	4918      	ldr	r1, [pc, #96]	; (800aacc <netconn_getaddr+0x98>)
 800aa6a:	4817      	ldr	r0, [pc, #92]	; (800aac8 <netconn_getaddr+0x94>)
 800aa6c:	f014 f85e 	bl	801eb2c <iprintf>
 800aa70:	f06f 030f 	mvn.w	r3, #15
 800aa74:	e020      	b.n	800aab8 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <netconn_getaddr+0x5c>
 800aa7c:	4b10      	ldr	r3, [pc, #64]	; (800aac0 <netconn_getaddr+0x8c>)
 800aa7e:	f44f 728a 	mov.w	r2, #276	; 0x114
 800aa82:	4913      	ldr	r1, [pc, #76]	; (800aad0 <netconn_getaddr+0x9c>)
 800aa84:	4810      	ldr	r0, [pc, #64]	; (800aac8 <netconn_getaddr+0x94>)
 800aa86:	f014 f851 	bl	801eb2c <iprintf>
 800aa8a:	f06f 030f 	mvn.w	r3, #15
 800aa8e:	e013      	b.n	800aab8 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800aaa2:	f107 0314 	add.w	r3, r7, #20
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	480a      	ldr	r0, [pc, #40]	; (800aad4 <netconn_getaddr+0xa0>)
 800aaaa:	f7ff fee9 	bl	800a880 <netconn_apimsg>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800aab4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3738      	adds	r7, #56	; 0x38
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	08022654 	.word	0x08022654
 800aac4:	0802272c 	.word	0x0802272c
 800aac8:	080226ac 	.word	0x080226ac
 800aacc:	0802274c 	.word	0x0802274c
 800aad0:	0802276c 	.word	0x0802276c
 800aad4:	0800cecd 	.word	0x0800cecd

0800aad8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08e      	sub	sp, #56	; 0x38
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	4613      	mov	r3, r2
 800aae4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d109      	bne.n	800ab00 <netconn_bind+0x28>
 800aaec:	4b11      	ldr	r3, [pc, #68]	; (800ab34 <netconn_bind+0x5c>)
 800aaee:	f44f 729c 	mov.w	r2, #312	; 0x138
 800aaf2:	4911      	ldr	r1, [pc, #68]	; (800ab38 <netconn_bind+0x60>)
 800aaf4:	4811      	ldr	r0, [pc, #68]	; (800ab3c <netconn_bind+0x64>)
 800aaf6:	f014 f819 	bl	801eb2c <iprintf>
 800aafa:	f06f 030f 	mvn.w	r3, #15
 800aafe:	e015      	b.n	800ab2c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ab06:	4b0e      	ldr	r3, [pc, #56]	; (800ab40 <netconn_bind+0x68>)
 800ab08:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ab12:	88fb      	ldrh	r3, [r7, #6]
 800ab14:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ab16:	f107 0314 	add.w	r3, r7, #20
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4809      	ldr	r0, [pc, #36]	; (800ab44 <netconn_bind+0x6c>)
 800ab1e:	f7ff feaf 	bl	800a880 <netconn_apimsg>
 800ab22:	4603      	mov	r3, r0
 800ab24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ab28:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3738      	adds	r7, #56	; 0x38
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	08022654 	.word	0x08022654
 800ab38:	0802278c 	.word	0x0802278c
 800ab3c:	080226ac 	.word	0x080226ac
 800ab40:	080267a0 	.word	0x080267a0
 800ab44:	0800c49d 	.word	0x0800c49d

0800ab48 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08e      	sub	sp, #56	; 0x38
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	4613      	mov	r3, r2
 800ab54:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d109      	bne.n	800ab70 <netconn_connect+0x28>
 800ab5c:	4b11      	ldr	r3, [pc, #68]	; (800aba4 <netconn_connect+0x5c>)
 800ab5e:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800ab62:	4911      	ldr	r1, [pc, #68]	; (800aba8 <netconn_connect+0x60>)
 800ab64:	4811      	ldr	r0, [pc, #68]	; (800abac <netconn_connect+0x64>)
 800ab66:	f013 ffe1 	bl	801eb2c <iprintf>
 800ab6a:	f06f 030f 	mvn.w	r3, #15
 800ab6e:	e015      	b.n	800ab9c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800ab76:	4b0e      	ldr	r3, [pc, #56]	; (800abb0 <netconn_connect+0x68>)
 800ab78:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ab82:	88fb      	ldrh	r3, [r7, #6]
 800ab84:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800ab86:	f107 0314 	add.w	r3, r7, #20
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4809      	ldr	r0, [pc, #36]	; (800abb4 <netconn_connect+0x6c>)
 800ab8e:	f7ff fe77 	bl	800a880 <netconn_apimsg>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ab98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3738      	adds	r7, #56	; 0x38
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	08022654 	.word	0x08022654
 800aba8:	080227c8 	.word	0x080227c8
 800abac:	080226ac 	.word	0x080226ac
 800abb0:	080267a0 	.word	0x080267a0
 800abb4:	0800c631 	.word	0x0800c631

0800abb8 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b08c      	sub	sp, #48	; 0x30
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d109      	bne.n	800abda <netconn_disconnect+0x22>
 800abc6:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <netconn_disconnect+0x44>)
 800abc8:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800abcc:	490c      	ldr	r1, [pc, #48]	; (800ac00 <netconn_disconnect+0x48>)
 800abce:	480d      	ldr	r0, [pc, #52]	; (800ac04 <netconn_disconnect+0x4c>)
 800abd0:	f013 ffac 	bl	801eb2c <iprintf>
 800abd4:	f06f 030f 	mvn.w	r3, #15
 800abd8:	e00c      	b.n	800abf4 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800abde:	f107 030c 	add.w	r3, r7, #12
 800abe2:	4619      	mov	r1, r3
 800abe4:	4808      	ldr	r0, [pc, #32]	; (800ac08 <netconn_disconnect+0x50>)
 800abe6:	f7ff fe4b 	bl	800a880 <netconn_apimsg>
 800abea:	4603      	mov	r3, r0
 800abec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800abf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3730      	adds	r7, #48	; 0x30
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	08022654 	.word	0x08022654
 800ac00:	080227e8 	.word	0x080227e8
 800ac04:	080226ac 	.word	0x080226ac
 800ac08:	0800c7ad 	.word	0x0800c7ad

0800ac0c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08c      	sub	sp, #48	; 0x30
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d109      	bne.n	800ac32 <netconn_listen_with_backlog+0x26>
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <netconn_listen_with_backlog+0x48>)
 800ac20:	f240 12bb 	movw	r2, #443	; 0x1bb
 800ac24:	490c      	ldr	r1, [pc, #48]	; (800ac58 <netconn_listen_with_backlog+0x4c>)
 800ac26:	480d      	ldr	r0, [pc, #52]	; (800ac5c <netconn_listen_with_backlog+0x50>)
 800ac28:	f013 ff80 	bl	801eb2c <iprintf>
 800ac2c:	f06f 030f 	mvn.w	r3, #15
 800ac30:	e00c      	b.n	800ac4c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ac36:	f107 030c 	add.w	r3, r7, #12
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4808      	ldr	r0, [pc, #32]	; (800ac60 <netconn_listen_with_backlog+0x54>)
 800ac3e:	f7ff fe1f 	bl	800a880 <netconn_apimsg>
 800ac42:	4603      	mov	r3, r0
 800ac44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ac48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3730      	adds	r7, #48	; 0x30
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	08022654 	.word	0x08022654
 800ac58:	0802280c 	.word	0x0802280c
 800ac5c:	080226ac 	.word	0x080226ac
 800ac60:	0800c7e9 	.word	0x0800c7e9

0800ac64 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d109      	bne.n	800ac88 <netconn_accept+0x24>
 800ac74:	4b3d      	ldr	r3, [pc, #244]	; (800ad6c <netconn_accept+0x108>)
 800ac76:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ac7a:	493d      	ldr	r1, [pc, #244]	; (800ad70 <netconn_accept+0x10c>)
 800ac7c:	483d      	ldr	r0, [pc, #244]	; (800ad74 <netconn_accept+0x110>)
 800ac7e:	f013 ff55 	bl	801eb2c <iprintf>
 800ac82:	f06f 030f 	mvn.w	r3, #15
 800ac86:	e06c      	b.n	800ad62 <netconn_accept+0xfe>
  *new_conn = NULL;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d109      	bne.n	800aca8 <netconn_accept+0x44>
 800ac94:	4b35      	ldr	r3, [pc, #212]	; (800ad6c <netconn_accept+0x108>)
 800ac96:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ac9a:	4937      	ldr	r1, [pc, #220]	; (800ad78 <netconn_accept+0x114>)
 800ac9c:	4835      	ldr	r0, [pc, #212]	; (800ad74 <netconn_accept+0x110>)
 800ac9e:	f013 ff45 	bl	801eb2c <iprintf>
 800aca2:	f06f 030f 	mvn.w	r3, #15
 800aca6:	e05c      	b.n	800ad62 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fb99 	bl	800b3e0 <netconn_err>
 800acae:	4603      	mov	r3, r0
 800acb0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800acb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800acba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800acbe:	e050      	b.n	800ad62 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	3314      	adds	r3, #20
 800acc4:	4618      	mov	r0, r3
 800acc6:	f012 ff84 	bl	801dbd2 <sys_mbox_valid>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d005      	beq.n	800acdc <netconn_accept+0x78>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7f1b      	ldrb	r3, [r3, #28]
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800acdc:	f06f 030e 	mvn.w	r3, #14
 800ace0:	e03f      	b.n	800ad62 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	7f1b      	ldrb	r3, [r3, #28]
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00e      	beq.n	800ad0c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3314      	adds	r3, #20
 800acf2:	f107 020c 	add.w	r2, r7, #12
 800acf6:	4611      	mov	r1, r2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f012 ff4e 	bl	801db9a <sys_arch_mbox_tryfetch>
 800acfe:	4603      	mov	r3, r0
 800ad00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad04:	d10a      	bne.n	800ad1c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ad06:	f06f 0306 	mvn.w	r3, #6
 800ad0a:	e02a      	b.n	800ad62 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3314      	adds	r3, #20
 800ad10:	f107 010c 	add.w	r1, r7, #12
 800ad14:	2200      	movs	r2, #0
 800ad16:	4618      	mov	r0, r3
 800ad18:	f012 ff00 	bl	801db1c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d005      	beq.n	800ad30 <netconn_accept+0xcc>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f107 0213 	add.w	r2, r7, #19
 800ad36:	4611      	mov	r1, r2
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 fbff 	bl	800b53c <lwip_netconn_is_err_msg>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800ad44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad48:	e00b      	b.n	800ad62 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800ad50:	f06f 030e 	mvn.w	r3, #14
 800ad54:	e005      	b.n	800ad62 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ad60:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	08022654 	.word	0x08022654
 800ad70:	0802282c 	.word	0x0802282c
 800ad74:	080226ac 	.word	0x080226ac
 800ad78:	0802284c 	.word	0x0802284c

0800ad7c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	4613      	mov	r3, r2
 800ad88:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d109      	bne.n	800ada8 <netconn_recv_data+0x2c>
 800ad94:	4b58      	ldr	r3, [pc, #352]	; (800aef8 <netconn_recv_data+0x17c>)
 800ad96:	f44f 7212 	mov.w	r2, #584	; 0x248
 800ad9a:	4958      	ldr	r1, [pc, #352]	; (800aefc <netconn_recv_data+0x180>)
 800ad9c:	4858      	ldr	r0, [pc, #352]	; (800af00 <netconn_recv_data+0x184>)
 800ad9e:	f013 fec5 	bl	801eb2c <iprintf>
 800ada2:	f06f 030f 	mvn.w	r3, #15
 800ada6:	e0a2      	b.n	800aeee <netconn_recv_data+0x172>
  *new_buf = NULL;
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2200      	movs	r2, #0
 800adac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d109      	bne.n	800adc8 <netconn_recv_data+0x4c>
 800adb4:	4b50      	ldr	r3, [pc, #320]	; (800aef8 <netconn_recv_data+0x17c>)
 800adb6:	f240 224a 	movw	r2, #586	; 0x24a
 800adba:	4952      	ldr	r1, [pc, #328]	; (800af04 <netconn_recv_data+0x188>)
 800adbc:	4850      	ldr	r0, [pc, #320]	; (800af00 <netconn_recv_data+0x184>)
 800adbe:	f013 feb5 	bl	801eb2c <iprintf>
 800adc2:	f06f 030f 	mvn.w	r3, #15
 800adc6:	e092      	b.n	800aeee <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3310      	adds	r3, #16
 800adcc:	4618      	mov	r0, r3
 800adce:	f012 ff00 	bl	801dbd2 <sys_mbox_valid>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10e      	bne.n	800adf6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 fb01 	bl	800b3e0 <netconn_err>
 800adde:	4603      	mov	r3, r0
 800ade0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ade2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800adea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800adee:	e07e      	b.n	800aeee <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800adf0:	f06f 030a 	mvn.w	r3, #10
 800adf4:	e07b      	b.n	800aeee <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	7f1b      	ldrb	r3, [r3, #28]
 800adfa:	f003 0302 	and.w	r3, r3, #2
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10f      	bne.n	800ae22 <netconn_recv_data+0xa6>
 800ae02:	79fb      	ldrb	r3, [r7, #7]
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	7f1b      	ldrb	r3, [r3, #28]
 800ae10:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d104      	bne.n	800ae22 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d023      	beq.n	800ae6a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3310      	adds	r3, #16
 800ae26:	f107 0218 	add.w	r2, r7, #24
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f012 feb4 	bl	801db9a <sys_arch_mbox_tryfetch>
 800ae32:	4603      	mov	r3, r0
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d11f      	bne.n	800ae7a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 fad0 	bl	800b3e0 <netconn_err>
 800ae40:	4603      	mov	r3, r0
 800ae42:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800ae44:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ae4c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ae50:	e04d      	b.n	800aeee <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	7f1b      	ldrb	r3, [r3, #28]
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ae5e:	f06f 030a 	mvn.w	r3, #10
 800ae62:	e044      	b.n	800aeee <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ae64:	f06f 0306 	mvn.w	r3, #6
 800ae68:	e041      	b.n	800aeee <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3310      	adds	r3, #16
 800ae6e:	f107 0118 	add.w	r1, r7, #24
 800ae72:	2200      	movs	r2, #0
 800ae74:	4618      	mov	r0, r3
 800ae76:	f012 fe51 	bl	801db1c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae82:	2b10      	cmp	r3, #16
 800ae84:	d117      	bne.n	800aeb6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	f107 0217 	add.w	r2, r7, #23
 800ae8c:	4611      	mov	r1, r2
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 fb54 	bl	800b53c <lwip_netconn_is_err_msg>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d009      	beq.n	800aeae <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ae9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae9e:	f113 0f0f 	cmn.w	r3, #15
 800aea2:	d101      	bne.n	800aea8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	e022      	b.n	800aeee <netconn_recv_data+0x172>
      }
      return err;
 800aea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aeac:	e01f      	b.n	800aeee <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	891b      	ldrh	r3, [r3, #8]
 800aeb2:	83fb      	strh	r3, [r7, #30]
 800aeb4:	e00d      	b.n	800aed2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <netconn_recv_data+0x14e>
 800aebc:	4b0e      	ldr	r3, [pc, #56]	; (800aef8 <netconn_recv_data+0x17c>)
 800aebe:	f240 2291 	movw	r2, #657	; 0x291
 800aec2:	4911      	ldr	r1, [pc, #68]	; (800af08 <netconn_recv_data+0x18c>)
 800aec4:	480e      	ldr	r0, [pc, #56]	; (800af00 <netconn_recv_data+0x184>)
 800aec6:	f013 fe31 	bl	801eb2c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	891b      	ldrh	r3, [r3, #8]
 800aed0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d005      	beq.n	800aee6 <netconn_recv_data+0x16a>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aede:	8bfa      	ldrh	r2, [r7, #30]
 800aee0:	2101      	movs	r1, #1
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3720      	adds	r7, #32
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	08022654 	.word	0x08022654
 800aefc:	0802286c 	.word	0x0802286c
 800af00:	080226ac 	.word	0x080226ac
 800af04:	0802288c 	.word	0x0802288c
 800af08:	080228a8 	.word	0x080228a8

0800af0c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <netconn_tcp_recvd_msg+0x1e>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af26:	2b10      	cmp	r3, #16
 800af28:	d009      	beq.n	800af3e <netconn_tcp_recvd_msg+0x32>
 800af2a:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <netconn_tcp_recvd_msg+0x50>)
 800af2c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800af30:	490b      	ldr	r1, [pc, #44]	; (800af60 <netconn_tcp_recvd_msg+0x54>)
 800af32:	480c      	ldr	r0, [pc, #48]	; (800af64 <netconn_tcp_recvd_msg+0x58>)
 800af34:	f013 fdfa 	bl	801eb2c <iprintf>
 800af38:	f06f 030f 	mvn.w	r3, #15
 800af3c:	e00a      	b.n	800af54 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	4806      	ldr	r0, [pc, #24]	; (800af68 <netconn_tcp_recvd_msg+0x5c>)
 800af4e:	f7ff fc97 	bl	800a880 <netconn_apimsg>
 800af52:	4603      	mov	r3, r0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	08022654 	.word	0x08022654
 800af60:	080228b4 	.word	0x080228b4
 800af64:	080226ac 	.word	0x080226ac
 800af68:	0800c9b3 	.word	0x0800c9b3

0800af6c <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08c      	sub	sp, #48	; 0x30
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d005      	beq.n	800af88 <netconn_tcp_recvd+0x1c>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af84:	2b10      	cmp	r3, #16
 800af86:	d009      	beq.n	800af9c <netconn_tcp_recvd+0x30>
 800af88:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <netconn_tcp_recvd+0x50>)
 800af8a:	f240 22b5 	movw	r2, #693	; 0x2b5
 800af8e:	490c      	ldr	r1, [pc, #48]	; (800afc0 <netconn_tcp_recvd+0x54>)
 800af90:	480c      	ldr	r0, [pc, #48]	; (800afc4 <netconn_tcp_recvd+0x58>)
 800af92:	f013 fdcb 	bl	801eb2c <iprintf>
 800af96:	f06f 030f 	mvn.w	r3, #15
 800af9a:	e00b      	b.n	800afb4 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800af9c:	f107 030c 	add.w	r3, r7, #12
 800afa0:	461a      	mov	r2, r3
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7ff ffb1 	bl	800af0c <netconn_tcp_recvd_msg>
 800afaa:	4603      	mov	r3, r0
 800afac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800afb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3730      	adds	r7, #48	; 0x30
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	08022654 	.word	0x08022654
 800afc0:	080228b4 	.word	0x080228b4
 800afc4:	080226ac 	.word	0x080226ac

0800afc8 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b090      	sub	sp, #64	; 0x40
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	4613      	mov	r3, r2
 800afd4:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3310      	adds	r3, #16
 800afda:	4618      	mov	r0, r3
 800afdc:	f012 fdf9 	bl	801dbd2 <sys_mbox_valid>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d102      	bne.n	800afec <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800afe6:	f06f 030a 	mvn.w	r3, #10
 800afea:	e06d      	b.n	800b0c8 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	7f1b      	ldrb	r3, [r3, #28]
 800aff0:	b25b      	sxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	da07      	bge.n	800b006 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	7f1b      	ldrb	r3, [r3, #28]
 800affa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800affe:	b2da      	uxtb	r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b004:	e039      	b.n	800b07a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	461a      	mov	r2, r3
 800b00a:	68b9      	ldr	r1, [r7, #8]
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7ff feb5 	bl	800ad7c <netconn_recv_data>
 800b012:	4603      	mov	r3, r0
 800b014:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b018:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b020:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b024:	e050      	b.n	800b0c8 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b02c:	79fb      	ldrb	r3, [r7, #7]
 800b02e:	f003 0308 	and.w	r3, r3, #8
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10e      	bne.n	800b054 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <netconn_recv_data_tcp+0x7a>
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	891b      	ldrh	r3, [r3, #8]
 800b040:	e000      	b.n	800b044 <netconn_recv_data_tcp+0x7c>
 800b042:	2301      	movs	r3, #1
 800b044:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b046:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b048:	f107 0214 	add.w	r2, r7, #20
 800b04c:	4619      	mov	r1, r3
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7ff ff5c 	bl	800af0c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	2b00      	cmp	r3, #0
 800b058:	d134      	bne.n	800b0c4 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	f003 0310 	and.w	r3, r3, #16
 800b060:	2b00      	cmp	r3, #0
 800b062:	d009      	beq.n	800b078 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	7f1b      	ldrb	r3, [r3, #28]
 800b068:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b072:	f06f 0306 	mvn.w	r3, #6
 800b076:	e027      	b.n	800b0c8 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b078:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d005      	beq.n	800b08e <netconn_recv_data_tcp+0xc6>
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b086:	2200      	movs	r2, #0
 800b088:	2101      	movs	r1, #1
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10f      	bne.n	800b0b6 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f000 f9a2 	bl	800b3e0 <netconn_err>
 800b09c:	4603      	mov	r3, r0
 800b09e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b0a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <netconn_recv_data_tcp+0xe8>
          return err;
 800b0aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0ae:	e00b      	b.n	800b0c8 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b0b0:	f06f 030d 	mvn.w	r3, #13
 800b0b4:	e008      	b.n	800b0c8 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f000 f961 	bl	800b380 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b0be:	f06f 030e 	mvn.w	r3, #14
 800b0c2:	e001      	b.n	800b0c8 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b0c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3740      	adds	r7, #64	; 0x40
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d005      	beq.n	800b0f0 <netconn_recv_tcp_pbuf_flags+0x20>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0ec:	2b10      	cmp	r3, #16
 800b0ee:	d009      	beq.n	800b104 <netconn_recv_tcp_pbuf_flags+0x34>
 800b0f0:	4b0a      	ldr	r3, [pc, #40]	; (800b11c <netconn_recv_tcp_pbuf_flags+0x4c>)
 800b0f2:	f240 3225 	movw	r2, #805	; 0x325
 800b0f6:	490a      	ldr	r1, [pc, #40]	; (800b120 <netconn_recv_tcp_pbuf_flags+0x50>)
 800b0f8:	480a      	ldr	r0, [pc, #40]	; (800b124 <netconn_recv_tcp_pbuf_flags+0x54>)
 800b0fa:	f013 fd17 	bl	801eb2c <iprintf>
 800b0fe:	f06f 030f 	mvn.w	r3, #15
 800b102:	e006      	b.n	800b112 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800b104:	79fb      	ldrb	r3, [r7, #7]
 800b106:	461a      	mov	r2, r3
 800b108:	68b9      	ldr	r1, [r7, #8]
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f7ff ff5c 	bl	800afc8 <netconn_recv_data_tcp>
 800b110:	4603      	mov	r3, r0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	08022654 	.word	0x08022654
 800b120:	080228b4 	.word	0x080228b4
 800b124:	080226ac 	.word	0x080226ac

0800b128 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	4613      	mov	r3, r2
 800b134:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d005      	beq.n	800b148 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b144:	2b10      	cmp	r3, #16
 800b146:	d109      	bne.n	800b15c <netconn_recv_udp_raw_netbuf_flags+0x34>
 800b148:	4b0a      	ldr	r3, [pc, #40]	; (800b174 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800b14a:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800b14e:	490a      	ldr	r1, [pc, #40]	; (800b178 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800b150:	480a      	ldr	r0, [pc, #40]	; (800b17c <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800b152:	f013 fceb 	bl	801eb2c <iprintf>
 800b156:	f06f 030f 	mvn.w	r3, #15
 800b15a:	e006      	b.n	800b16a <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b15c:	79fb      	ldrb	r3, [r7, #7]
 800b15e:	461a      	mov	r2, r3
 800b160:	68b9      	ldr	r1, [r7, #8]
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f7ff fe0a 	bl	800ad7c <netconn_recv_data>
 800b168:	4603      	mov	r3, r0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	08022654 	.word	0x08022654
 800b178:	080228d8 	.word	0x080228d8
 800b17c:	080226ac 	.word	0x080226ac

0800b180 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b08c      	sub	sp, #48	; 0x30
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d109      	bne.n	800b1a4 <netconn_send+0x24>
 800b190:	4b0e      	ldr	r3, [pc, #56]	; (800b1cc <netconn_send+0x4c>)
 800b192:	f240 32b2 	movw	r2, #946	; 0x3b2
 800b196:	490e      	ldr	r1, [pc, #56]	; (800b1d0 <netconn_send+0x50>)
 800b198:	480e      	ldr	r0, [pc, #56]	; (800b1d4 <netconn_send+0x54>)
 800b19a:	f013 fcc7 	bl	801eb2c <iprintf>
 800b19e:	f06f 030f 	mvn.w	r3, #15
 800b1a2:	e00e      	b.n	800b1c2 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800b1ac:	f107 030c 	add.w	r3, r7, #12
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	4809      	ldr	r0, [pc, #36]	; (800b1d8 <netconn_send+0x58>)
 800b1b4:	f7ff fb64 	bl	800a880 <netconn_apimsg>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b1be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3730      	adds	r7, #48	; 0x30
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	08022654 	.word	0x08022654
 800b1d0:	08022910 	.word	0x08022910
 800b1d4:	080226ac 	.word	0x080226ac
 800b1d8:	0800c919 	.word	0x0800c919

0800b1dc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af02      	add	r7, sp, #8
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b1f2:	78fa      	ldrb	r2, [r7, #3]
 800b1f4:	f107 0110 	add.w	r1, r7, #16
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	2201      	movs	r2, #1
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 f805 	bl	800b210 <netconn_write_vectors_partly>
 800b206:	4603      	mov	r3, r0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b092      	sub	sp, #72	; 0x48
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	4611      	mov	r1, r2
 800b21c:	461a      	mov	r2, r3
 800b21e:	460b      	mov	r3, r1
 800b220:	80fb      	strh	r3, [r7, #6]
 800b222:	4613      	mov	r3, r2
 800b224:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d109      	bne.n	800b240 <netconn_write_vectors_partly+0x30>
 800b22c:	4b4e      	ldr	r3, [pc, #312]	; (800b368 <netconn_write_vectors_partly+0x158>)
 800b22e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b232:	494e      	ldr	r1, [pc, #312]	; (800b36c <netconn_write_vectors_partly+0x15c>)
 800b234:	484e      	ldr	r0, [pc, #312]	; (800b370 <netconn_write_vectors_partly+0x160>)
 800b236:	f013 fc79 	bl	801eb2c <iprintf>
 800b23a:	f06f 030f 	mvn.w	r3, #15
 800b23e:	e08e      	b.n	800b35e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b248:	2b10      	cmp	r3, #16
 800b24a:	d009      	beq.n	800b260 <netconn_write_vectors_partly+0x50>
 800b24c:	4b46      	ldr	r3, [pc, #280]	; (800b368 <netconn_write_vectors_partly+0x158>)
 800b24e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b252:	4948      	ldr	r1, [pc, #288]	; (800b374 <netconn_write_vectors_partly+0x164>)
 800b254:	4846      	ldr	r0, [pc, #280]	; (800b370 <netconn_write_vectors_partly+0x160>)
 800b256:	f013 fc69 	bl	801eb2c <iprintf>
 800b25a:	f06f 0305 	mvn.w	r3, #5
 800b25e:	e07e      	b.n	800b35e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	7f1b      	ldrb	r3, [r3, #28]
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d104      	bne.n	800b276 <netconn_write_vectors_partly+0x66>
 800b26c:	797b      	ldrb	r3, [r7, #5]
 800b26e:	f003 0304 	and.w	r3, r3, #4
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <netconn_write_vectors_partly+0x6a>
 800b276:	2301      	movs	r3, #1
 800b278:	e000      	b.n	800b27c <netconn_write_vectors_partly+0x6c>
 800b27a:	2300      	movs	r3, #0
 800b27c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b280:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b284:	2b00      	cmp	r3, #0
 800b286:	d005      	beq.n	800b294 <netconn_write_vectors_partly+0x84>
 800b288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b28e:	f06f 0305 	mvn.w	r3, #5
 800b292:	e064      	b.n	800b35e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b298:	2300      	movs	r3, #0
 800b29a:	643b      	str	r3, [r7, #64]	; 0x40
 800b29c:	e015      	b.n	800b2ca <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2a0:	00db      	lsls	r3, r3, #3
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2aa:	4413      	add	r3, r2
 800b2ac:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800b2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d202      	bcs.n	800b2c4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800b2be:	f06f 0305 	mvn.w	r3, #5
 800b2c2:	e04c      	b.n	800b35e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800b2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	643b      	str	r3, [r7, #64]	; 0x40
 800b2ca:	88fb      	ldrh	r3, [r7, #6]
 800b2cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	dbe5      	blt.n	800b29e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800b2d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	e040      	b.n	800b35e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800b2dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	da0a      	bge.n	800b2f8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800b2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d102      	bne.n	800b2ee <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800b2e8:	f06f 0305 	mvn.w	r3, #5
 800b2ec:	e037      	b.n	800b35e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800b2ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b2f2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b300:	88fb      	ldrh	r3, [r7, #6]
 800b302:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b308:	797b      	ldrb	r3, [r7, #5]
 800b30a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800b30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b310:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b316:	f107 0314 	add.w	r3, r7, #20
 800b31a:	4619      	mov	r1, r3
 800b31c:	4816      	ldr	r0, [pc, #88]	; (800b378 <netconn_write_vectors_partly+0x168>)
 800b31e:	f7ff faaf 	bl	800a880 <netconn_apimsg>
 800b322:	4603      	mov	r3, r0
 800b324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800b328:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d114      	bne.n	800b35a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800b330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b332:	2b00      	cmp	r3, #0
 800b334:	d002      	beq.n	800b33c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b33a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800b33c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10a      	bne.n	800b35a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b348:	429a      	cmp	r2, r3
 800b34a:	d006      	beq.n	800b35a <netconn_write_vectors_partly+0x14a>
 800b34c:	4b06      	ldr	r3, [pc, #24]	; (800b368 <netconn_write_vectors_partly+0x158>)
 800b34e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b352:	490a      	ldr	r1, [pc, #40]	; (800b37c <netconn_write_vectors_partly+0x16c>)
 800b354:	4806      	ldr	r0, [pc, #24]	; (800b370 <netconn_write_vectors_partly+0x160>)
 800b356:	f013 fbe9 	bl	801eb2c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800b35a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3748      	adds	r7, #72	; 0x48
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	08022654 	.word	0x08022654
 800b36c:	0802292c 	.word	0x0802292c
 800b370:	080226ac 	.word	0x080226ac
 800b374:	08022948 	.word	0x08022948
 800b378:	0800cdb5 	.word	0x0800cdb5
 800b37c:	0802296c 	.word	0x0802296c

0800b380 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b08c      	sub	sp, #48	; 0x30
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d109      	bne.n	800b3a6 <netconn_close_shutdown+0x26>
 800b392:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <netconn_close_shutdown+0x50>)
 800b394:	f240 4247 	movw	r2, #1095	; 0x447
 800b398:	490e      	ldr	r1, [pc, #56]	; (800b3d4 <netconn_close_shutdown+0x54>)
 800b39a:	480f      	ldr	r0, [pc, #60]	; (800b3d8 <netconn_close_shutdown+0x58>)
 800b39c:	f013 fbc6 	bl	801eb2c <iprintf>
 800b3a0:	f06f 030f 	mvn.w	r3, #15
 800b3a4:	e010      	b.n	800b3c8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b3aa:	78fb      	ldrb	r3, [r7, #3]
 800b3ac:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b3ae:	2329      	movs	r3, #41	; 0x29
 800b3b0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b3b2:	f107 030c 	add.w	r3, r7, #12
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4808      	ldr	r0, [pc, #32]	; (800b3dc <netconn_close_shutdown+0x5c>)
 800b3ba:	f7ff fa61 	bl	800a880 <netconn_apimsg>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b3c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3730      	adds	r7, #48	; 0x30
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	08022654 	.word	0x08022654
 800b3d4:	08022990 	.word	0x08022990
 800b3d8:	080226ac 	.word	0x080226ac
 800b3dc:	0800cfd9 	.word	0x0800cfd9

0800b3e0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <netconn_err+0x12>
    return ERR_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	e00d      	b.n	800b40e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b3f2:	f012 fcfd 	bl	801ddf0 <sys_arch_protect>
 800b3f6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	7a1b      	ldrb	r3, [r3, #8]
 800b3fc:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f012 fd01 	bl	801de0c <sys_arch_unprotect>
  return err;
 800b40a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b08a      	sub	sp, #40	; 0x28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d109      	bne.n	800b43c <netconn_gethostbyname+0x24>
 800b428:	4b24      	ldr	r3, [pc, #144]	; (800b4bc <netconn_gethostbyname+0xa4>)
 800b42a:	f240 5204 	movw	r2, #1284	; 0x504
 800b42e:	4924      	ldr	r1, [pc, #144]	; (800b4c0 <netconn_gethostbyname+0xa8>)
 800b430:	4824      	ldr	r0, [pc, #144]	; (800b4c4 <netconn_gethostbyname+0xac>)
 800b432:	f013 fb7b 	bl	801eb2c <iprintf>
 800b436:	f06f 030f 	mvn.w	r3, #15
 800b43a:	e03b      	b.n	800b4b4 <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d109      	bne.n	800b456 <netconn_gethostbyname+0x3e>
 800b442:	4b1e      	ldr	r3, [pc, #120]	; (800b4bc <netconn_gethostbyname+0xa4>)
 800b444:	f240 5205 	movw	r2, #1285	; 0x505
 800b448:	491f      	ldr	r1, [pc, #124]	; (800b4c8 <netconn_gethostbyname+0xb0>)
 800b44a:	481e      	ldr	r0, [pc, #120]	; (800b4c4 <netconn_gethostbyname+0xac>)
 800b44c:	f013 fb6e 	bl	801eb2c <iprintf>
 800b450:	f06f 030f 	mvn.w	r3, #15
 800b454:	e02e      	b.n	800b4b4 <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 800b456:	f107 030f 	add.w	r3, r7, #15
 800b45a:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 800b45c:	f107 0310 	add.w	r3, r7, #16
 800b460:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	2100      	movs	r1, #0
 800b46e:	4618      	mov	r0, r3
 800b470:	f012 fbcd 	bl	801dc0e <sys_sem_new>
 800b474:	4603      	mov	r3, r0
 800b476:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 800b480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b484:	e016      	b.n	800b4b4 <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 800b486:	69fa      	ldr	r2, [r7, #28]
 800b488:	f107 0314 	add.w	r3, r7, #20
 800b48c:	4619      	mov	r1, r3
 800b48e:	480f      	ldr	r0, [pc, #60]	; (800b4cc <netconn_gethostbyname+0xb4>)
 800b490:	f003 fe84 	bl	800f19c <tcpip_send_msg_wait_sem>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f012 fc1a 	bl	801dcd6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 800b4a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 800b4aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4ae:	e001      	b.n	800b4b4 <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 800b4b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3728      	adds	r7, #40	; 0x28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	08022654 	.word	0x08022654
 800b4c0:	080229ac 	.word	0x080229ac
 800b4c4:	080226ac 	.word	0x080226ac
 800b4c8:	080229d0 	.word	0x080229d0
 800b4cc:	0800d135 	.word	0x0800d135

0800b4d0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b4da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4de:	f113 0f0d 	cmn.w	r3, #13
 800b4e2:	d009      	beq.n	800b4f8 <lwip_netconn_err_to_msg+0x28>
 800b4e4:	f113 0f0d 	cmn.w	r3, #13
 800b4e8:	dc0c      	bgt.n	800b504 <lwip_netconn_err_to_msg+0x34>
 800b4ea:	f113 0f0f 	cmn.w	r3, #15
 800b4ee:	d007      	beq.n	800b500 <lwip_netconn_err_to_msg+0x30>
 800b4f0:	f113 0f0e 	cmn.w	r3, #14
 800b4f4:	d002      	beq.n	800b4fc <lwip_netconn_err_to_msg+0x2c>
 800b4f6:	e005      	b.n	800b504 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	; (800b524 <lwip_netconn_err_to_msg+0x54>)
 800b4fa:	e00e      	b.n	800b51a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b4fc:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <lwip_netconn_err_to_msg+0x58>)
 800b4fe:	e00c      	b.n	800b51a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b500:	4b0a      	ldr	r3, [pc, #40]	; (800b52c <lwip_netconn_err_to_msg+0x5c>)
 800b502:	e00a      	b.n	800b51a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d005      	beq.n	800b518 <lwip_netconn_err_to_msg+0x48>
 800b50c:	4b08      	ldr	r3, [pc, #32]	; (800b530 <lwip_netconn_err_to_msg+0x60>)
 800b50e:	227d      	movs	r2, #125	; 0x7d
 800b510:	4908      	ldr	r1, [pc, #32]	; (800b534 <lwip_netconn_err_to_msg+0x64>)
 800b512:	4809      	ldr	r0, [pc, #36]	; (800b538 <lwip_netconn_err_to_msg+0x68>)
 800b514:	f013 fb0a 	bl	801eb2c <iprintf>
      return NULL;
 800b518:	2300      	movs	r3, #0
  }
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	080265e8 	.word	0x080265e8
 800b528:	080265e9 	.word	0x080265e9
 800b52c:	080265ea 	.word	0x080265ea
 800b530:	080229f4 	.word	0x080229f4
 800b534:	08022a28 	.word	0x08022a28
 800b538:	08022a38 	.word	0x08022a38

0800b53c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d105      	bne.n	800b558 <lwip_netconn_is_err_msg+0x1c>
 800b54c:	4b12      	ldr	r3, [pc, #72]	; (800b598 <lwip_netconn_is_err_msg+0x5c>)
 800b54e:	2285      	movs	r2, #133	; 0x85
 800b550:	4912      	ldr	r1, [pc, #72]	; (800b59c <lwip_netconn_is_err_msg+0x60>)
 800b552:	4813      	ldr	r0, [pc, #76]	; (800b5a0 <lwip_netconn_is_err_msg+0x64>)
 800b554:	f013 faea 	bl	801eb2c <iprintf>

  if (msg == &netconn_aborted) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a12      	ldr	r2, [pc, #72]	; (800b5a4 <lwip_netconn_is_err_msg+0x68>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d104      	bne.n	800b56a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	22f3      	movs	r2, #243	; 0xf3
 800b564:	701a      	strb	r2, [r3, #0]
    return 1;
 800b566:	2301      	movs	r3, #1
 800b568:	e012      	b.n	800b590 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a0e      	ldr	r2, [pc, #56]	; (800b5a8 <lwip_netconn_is_err_msg+0x6c>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d104      	bne.n	800b57c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	22f2      	movs	r2, #242	; 0xf2
 800b576:	701a      	strb	r2, [r3, #0]
    return 1;
 800b578:	2301      	movs	r3, #1
 800b57a:	e009      	b.n	800b590 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a0b      	ldr	r2, [pc, #44]	; (800b5ac <lwip_netconn_is_err_msg+0x70>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d104      	bne.n	800b58e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	22f1      	movs	r2, #241	; 0xf1
 800b588:	701a      	strb	r2, [r3, #0]
    return 1;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e000      	b.n	800b590 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	080229f4 	.word	0x080229f4
 800b59c:	08022a60 	.word	0x08022a60
 800b5a0:	08022a38 	.word	0x08022a38
 800b5a4:	080265e8 	.word	0x080265e8
 800b5a8:	080265e9 	.word	0x080265e9
 800b5ac:	080265ea 	.word	0x080265ea

0800b5b0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
 800b5bc:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d105      	bne.n	800b5d0 <recv_udp+0x20>
 800b5c4:	4b34      	ldr	r3, [pc, #208]	; (800b698 <recv_udp+0xe8>)
 800b5c6:	22e5      	movs	r2, #229	; 0xe5
 800b5c8:	4934      	ldr	r1, [pc, #208]	; (800b69c <recv_udp+0xec>)
 800b5ca:	4835      	ldr	r0, [pc, #212]	; (800b6a0 <recv_udp+0xf0>)
 800b5cc:	f013 faae 	bl	801eb2c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d105      	bne.n	800b5e2 <recv_udp+0x32>
 800b5d6:	4b30      	ldr	r3, [pc, #192]	; (800b698 <recv_udp+0xe8>)
 800b5d8:	22e6      	movs	r2, #230	; 0xe6
 800b5da:	4932      	ldr	r1, [pc, #200]	; (800b6a4 <recv_udp+0xf4>)
 800b5dc:	4830      	ldr	r0, [pc, #192]	; (800b6a0 <recv_udp+0xf0>)
 800b5de:	f013 faa5 	bl	801eb2c <iprintf>
  conn = (struct netconn *)arg;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d103      	bne.n	800b5f4 <recv_udp+0x44>
    pbuf_free(p);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f006 f9f5 	bl	80119dc <pbuf_free>
    return;
 800b5f2:	e04d      	b.n	800b690 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d005      	beq.n	800b60a <recv_udp+0x5a>
 800b5fe:	4b26      	ldr	r3, [pc, #152]	; (800b698 <recv_udp+0xe8>)
 800b600:	22ee      	movs	r2, #238	; 0xee
 800b602:	4929      	ldr	r1, [pc, #164]	; (800b6a8 <recv_udp+0xf8>)
 800b604:	4826      	ldr	r0, [pc, #152]	; (800b6a0 <recv_udp+0xf0>)
 800b606:	f013 fa91 	bl	801eb2c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	3310      	adds	r3, #16
 800b60e:	4618      	mov	r0, r3
 800b610:	f012 fadf 	bl	801dbd2 <sys_mbox_valid>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d103      	bne.n	800b622 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f006 f9de 	bl	80119dc <pbuf_free>
    return;
 800b620:	e036      	b.n	800b690 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b622:	2006      	movs	r0, #6
 800b624:	f005 faa6 	bl	8010b74 <memp_malloc>
 800b628:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d103      	bne.n	800b638 <recv_udp+0x88>
    pbuf_free(p);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f006 f9d3 	bl	80119dc <pbuf_free>
    return;
 800b636:	e02b      	b.n	800b690 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d002      	beq.n	800b650 <recv_udp+0xa0>
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	e000      	b.n	800b652 <recv_udp+0xa2>
 800b650:	2300      	movs	r3, #0
 800b652:	69ba      	ldr	r2, [r7, #24]
 800b654:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b65a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	891b      	ldrh	r3, [r3, #8]
 800b660:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	3310      	adds	r3, #16
 800b666:	69b9      	ldr	r1, [r7, #24]
 800b668:	4618      	mov	r0, r3
 800b66a:	f012 fa3d 	bl	801dae8 <sys_mbox_trypost>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <recv_udp+0xcc>
    netbuf_delete(buf);
 800b674:	69b8      	ldr	r0, [r7, #24]
 800b676:	f001 fdc1 	bl	800d1fc <netbuf_delete>
    return;
 800b67a:	e009      	b.n	800b690 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	2b00      	cmp	r3, #0
 800b682:	d005      	beq.n	800b690 <recv_udp+0xe0>
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	8afa      	ldrh	r2, [r7, #22]
 800b68a:	2100      	movs	r1, #0
 800b68c:	69f8      	ldr	r0, [r7, #28]
 800b68e:	4798      	blx	r3
  }
}
 800b690:	3720      	adds	r7, #32
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	080229f4 	.word	0x080229f4
 800b69c:	08022a6c 	.word	0x08022a6c
 800b6a0:	08022a38 	.word	0x08022a38
 800b6a4:	08022a90 	.word	0x08022a90
 800b6a8:	08022ab0 	.word	0x08022ab0

0800b6ac <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
 800b6b8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d106      	bne.n	800b6ce <recv_tcp+0x22>
 800b6c0:	4b36      	ldr	r3, [pc, #216]	; (800b79c <recv_tcp+0xf0>)
 800b6c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b6c6:	4936      	ldr	r1, [pc, #216]	; (800b7a0 <recv_tcp+0xf4>)
 800b6c8:	4836      	ldr	r0, [pc, #216]	; (800b7a4 <recv_tcp+0xf8>)
 800b6ca:	f013 fa2f 	bl	801eb2c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d106      	bne.n	800b6e2 <recv_tcp+0x36>
 800b6d4:	4b31      	ldr	r3, [pc, #196]	; (800b79c <recv_tcp+0xf0>)
 800b6d6:	f240 122d 	movw	r2, #301	; 0x12d
 800b6da:	4933      	ldr	r1, [pc, #204]	; (800b7a8 <recv_tcp+0xfc>)
 800b6dc:	4831      	ldr	r0, [pc, #196]	; (800b7a4 <recv_tcp+0xf8>)
 800b6de:	f013 fa25 	bl	801eb2c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b6e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d006      	beq.n	800b6f8 <recv_tcp+0x4c>
 800b6ea:	4b2c      	ldr	r3, [pc, #176]	; (800b79c <recv_tcp+0xf0>)
 800b6ec:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b6f0:	492e      	ldr	r1, [pc, #184]	; (800b7ac <recv_tcp+0x100>)
 800b6f2:	482c      	ldr	r0, [pc, #176]	; (800b7a4 <recv_tcp+0xf8>)
 800b6f4:	f013 fa1a 	bl	801eb2c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d102      	bne.n	800b708 <recv_tcp+0x5c>
    return ERR_VAL;
 800b702:	f06f 0305 	mvn.w	r3, #5
 800b706:	e045      	b.n	800b794 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d006      	beq.n	800b720 <recv_tcp+0x74>
 800b712:	4b22      	ldr	r3, [pc, #136]	; (800b79c <recv_tcp+0xf0>)
 800b714:	f240 1235 	movw	r2, #309	; 0x135
 800b718:	4925      	ldr	r1, [pc, #148]	; (800b7b0 <recv_tcp+0x104>)
 800b71a:	4822      	ldr	r0, [pc, #136]	; (800b7a4 <recv_tcp+0xf8>)
 800b71c:	f013 fa06 	bl	801eb2c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	3310      	adds	r3, #16
 800b724:	4618      	mov	r0, r3
 800b726:	f012 fa54 	bl	801dbd2 <sys_mbox_valid>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10d      	bne.n	800b74c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d008      	beq.n	800b748 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	891b      	ldrh	r3, [r3, #8]
 800b73a:	4619      	mov	r1, r3
 800b73c:	68b8      	ldr	r0, [r7, #8]
 800b73e:	f007 fa91 	bl	8012c64 <tcp_recved>
      pbuf_free(p);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f006 f94a 	bl	80119dc <pbuf_free>
    }
    return ERR_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	e023      	b.n	800b794 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d005      	beq.n	800b75e <recv_tcp+0xb2>
    msg = p;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	891b      	ldrh	r3, [r3, #8]
 800b75a:	83fb      	strh	r3, [r7, #30]
 800b75c:	e003      	b.n	800b766 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b75e:	4b15      	ldr	r3, [pc, #84]	; (800b7b4 <recv_tcp+0x108>)
 800b760:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	3310      	adds	r3, #16
 800b76a:	69b9      	ldr	r1, [r7, #24]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f012 f9bb 	bl	801dae8 <sys_mbox_trypost>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b778:	f04f 33ff 	mov.w	r3, #4294967295
 800b77c:	e00a      	b.n	800b794 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	d005      	beq.n	800b792 <recv_tcp+0xe6>
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	8bfa      	ldrh	r2, [r7, #30]
 800b78c:	2100      	movs	r1, #0
 800b78e:	6978      	ldr	r0, [r7, #20]
 800b790:	4798      	blx	r3
  }

  return ERR_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3720      	adds	r7, #32
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	080229f4 	.word	0x080229f4
 800b7a0:	08022ad0 	.word	0x08022ad0
 800b7a4:	08022a38 	.word	0x08022a38
 800b7a8:	08022af4 	.word	0x08022af4
 800b7ac:	08022b14 	.word	0x08022b14
 800b7b0:	08022b2c 	.word	0x08022b2c
 800b7b4:	080265ea 	.word	0x080265ea

0800b7b8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d106      	bne.n	800b7da <poll_tcp+0x22>
 800b7cc:	4b29      	ldr	r3, [pc, #164]	; (800b874 <poll_tcp+0xbc>)
 800b7ce:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b7d2:	4929      	ldr	r1, [pc, #164]	; (800b878 <poll_tcp+0xc0>)
 800b7d4:	4829      	ldr	r0, [pc, #164]	; (800b87c <poll_tcp+0xc4>)
 800b7d6:	f013 f9a9 	bl	801eb2c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	785b      	ldrb	r3, [r3, #1]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d104      	bne.n	800b7ec <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f001 f919 	bl	800ca1c <lwip_netconn_do_writemore>
 800b7ea:	e016      	b.n	800b81a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	785b      	ldrb	r3, [r3, #1]
 800b7f0:	2b04      	cmp	r3, #4
 800b7f2:	d112      	bne.n	800b81a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00a      	beq.n	800b812 <poll_tcp+0x5a>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6a1b      	ldr	r3, [r3, #32]
 800b800:	7a5b      	ldrb	r3, [r3, #9]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d005      	beq.n	800b812 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	7a5a      	ldrb	r2, [r3, #9]
 800b80c:	3a01      	subs	r2, #1
 800b80e:	b2d2      	uxtb	r2, r2
 800b810:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b812:	2101      	movs	r1, #1
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f000 fbf7 	bl	800c008 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	7f1b      	ldrb	r3, [r3, #28]
 800b81e:	f003 0310 	and.w	r3, r3, #16
 800b822:	2b00      	cmp	r3, #0
 800b824:	d021      	beq.n	800b86a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d01d      	beq.n	800b86a <poll_tcp+0xb2>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b836:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b83a:	d316      	bcc.n	800b86a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b844:	2b04      	cmp	r3, #4
 800b846:	d810      	bhi.n	800b86a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	7f1b      	ldrb	r3, [r3, #28]
 800b84c:	f023 0310 	bic.w	r3, r3, #16
 800b850:	b2da      	uxtb	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d005      	beq.n	800b86a <poll_tcp+0xb2>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2200      	movs	r2, #0
 800b864:	2102      	movs	r1, #2
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	080229f4 	.word	0x080229f4
 800b878:	08022b4c 	.word	0x08022b4c
 800b87c:	08022a38 	.word	0x08022a38

0800b880 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	4613      	mov	r3, r2
 800b88c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d106      	bne.n	800b8a6 <sent_tcp+0x26>
 800b898:	4b20      	ldr	r3, [pc, #128]	; (800b91c <sent_tcp+0x9c>)
 800b89a:	f240 1293 	movw	r2, #403	; 0x193
 800b89e:	4920      	ldr	r1, [pc, #128]	; (800b920 <sent_tcp+0xa0>)
 800b8a0:	4820      	ldr	r0, [pc, #128]	; (800b924 <sent_tcp+0xa4>)
 800b8a2:	f013 f943 	bl	801eb2c <iprintf>

  if (conn) {
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d032      	beq.n	800b912 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	785b      	ldrb	r3, [r3, #1]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d104      	bne.n	800b8be <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	6978      	ldr	r0, [r7, #20]
 800b8b8:	f001 f8b0 	bl	800ca1c <lwip_netconn_do_writemore>
 800b8bc:	e007      	b.n	800b8ce <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	785b      	ldrb	r3, [r3, #1]
 800b8c2:	2b04      	cmp	r3, #4
 800b8c4:	d103      	bne.n	800b8ce <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	6978      	ldr	r0, [r7, #20]
 800b8ca:	f000 fb9d 	bl	800c008 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d01d      	beq.n	800b912 <sent_tcp+0x92>
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b8de:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b8e2:	d316      	bcc.n	800b912 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b8ec:	2b04      	cmp	r3, #4
 800b8ee:	d810      	bhi.n	800b912 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	7f1b      	ldrb	r3, [r3, #28]
 800b8f4:	f023 0310 	bic.w	r3, r3, #16
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	2b00      	cmp	r3, #0
 800b904:	d005      	beq.n	800b912 <sent_tcp+0x92>
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90a:	88fa      	ldrh	r2, [r7, #6]
 800b90c:	2102      	movs	r1, #2
 800b90e:	6978      	ldr	r0, [r7, #20]
 800b910:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b912:	2300      	movs	r3, #0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3718      	adds	r7, #24
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	080229f4 	.word	0x080229f4
 800b920:	08022b4c 	.word	0x08022b4c
 800b924:	08022a38 	.word	0x08022a38

0800b928 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d106      	bne.n	800b94c <err_tcp+0x24>
 800b93e:	4b5f      	ldr	r3, [pc, #380]	; (800babc <err_tcp+0x194>)
 800b940:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b944:	495e      	ldr	r1, [pc, #376]	; (800bac0 <err_tcp+0x198>)
 800b946:	485f      	ldr	r0, [pc, #380]	; (800bac4 <err_tcp+0x19c>)
 800b948:	f013 f8f0 	bl	801eb2c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b94c:	f012 fa50 	bl	801ddf0 <sys_arch_protect>
 800b950:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	2200      	movs	r2, #0
 800b956:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	78fa      	ldrb	r2, [r7, #3]
 800b95c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	7f1b      	ldrb	r3, [r3, #28]
 800b962:	f043 0301 	orr.w	r3, r3, #1
 800b966:	b2da      	uxtb	r2, r3
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	785b      	ldrb	r3, [r3, #1]
 800b970:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	2200      	movs	r2, #0
 800b976:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b978:	69b8      	ldr	r0, [r7, #24]
 800b97a:	f012 fa47 	bl	801de0c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b982:	2b00      	cmp	r3, #0
 800b984:	d005      	beq.n	800b992 <err_tcp+0x6a>
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98a:	2200      	movs	r2, #0
 800b98c:	2104      	movs	r1, #4
 800b98e:	69f8      	ldr	r0, [r7, #28]
 800b990:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	2b00      	cmp	r3, #0
 800b998:	d005      	beq.n	800b9a6 <err_tcp+0x7e>
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99e:	2200      	movs	r2, #0
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	69f8      	ldr	r0, [r7, #28]
 800b9a4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d005      	beq.n	800b9ba <err_tcp+0x92>
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2102      	movs	r1, #2
 800b9b6:	69f8      	ldr	r0, [r7, #28]
 800b9b8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b9ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff fd86 	bl	800b4d0 <lwip_netconn_err_to_msg>
 800b9c4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	3310      	adds	r3, #16
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f012 f901 	bl	801dbd2 <sys_mbox_valid>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d005      	beq.n	800b9e2 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	3310      	adds	r3, #16
 800b9da:	6939      	ldr	r1, [r7, #16]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f012 f883 	bl	801dae8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	3314      	adds	r3, #20
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f012 f8f3 	bl	801dbd2 <sys_mbox_valid>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d005      	beq.n	800b9fe <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	3314      	adds	r3, #20
 800b9f6:	6939      	ldr	r1, [r7, #16]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f012 f875 	bl	801dae8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d005      	beq.n	800ba10 <err_tcp+0xe8>
 800ba04:	7dfb      	ldrb	r3, [r7, #23]
 800ba06:	2b04      	cmp	r3, #4
 800ba08:	d002      	beq.n	800ba10 <err_tcp+0xe8>
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d143      	bne.n	800ba98 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	7f1b      	ldrb	r3, [r3, #28]
 800ba14:	f003 0304 	and.w	r3, r3, #4
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bf14      	ite	ne
 800ba1c:	2301      	movne	r3, #1
 800ba1e:	2300      	moveq	r3, #0
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	7f1b      	ldrb	r3, [r3, #28]
 800ba28:	f023 0304 	bic.w	r3, r3, #4
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d13b      	bne.n	800bab0 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d106      	bne.n	800ba4e <err_tcp+0x126>
 800ba40:	4b1e      	ldr	r3, [pc, #120]	; (800babc <err_tcp+0x194>)
 800ba42:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ba46:	4920      	ldr	r1, [pc, #128]	; (800bac8 <err_tcp+0x1a0>)
 800ba48:	481e      	ldr	r0, [pc, #120]	; (800bac4 <err_tcp+0x19c>)
 800ba4a:	f013 f86f 	bl	801eb2c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	d104      	bne.n	800ba5e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	711a      	strb	r2, [r3, #4]
 800ba5c:	e003      	b.n	800ba66 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	78fa      	ldrb	r2, [r7, #3]
 800ba64:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	330c      	adds	r3, #12
 800ba6e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ba70:	68b8      	ldr	r0, [r7, #8]
 800ba72:	f012 f93d 	bl	801dcf0 <sys_sem_valid>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d106      	bne.n	800ba8a <err_tcp+0x162>
 800ba7c:	4b0f      	ldr	r3, [pc, #60]	; (800babc <err_tcp+0x194>)
 800ba7e:	f240 12ef 	movw	r2, #495	; 0x1ef
 800ba82:	4912      	ldr	r1, [pc, #72]	; (800bacc <err_tcp+0x1a4>)
 800ba84:	480f      	ldr	r0, [pc, #60]	; (800bac4 <err_tcp+0x19c>)
 800ba86:	f013 f851 	bl	801eb2c <iprintf>
      conn->current_msg = NULL;
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800ba90:	68b8      	ldr	r0, [r7, #8]
 800ba92:	f012 f913 	bl	801dcbc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800ba96:	e00b      	b.n	800bab0 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d008      	beq.n	800bab2 <err_tcp+0x18a>
 800baa0:	4b06      	ldr	r3, [pc, #24]	; (800babc <err_tcp+0x194>)
 800baa2:	f240 12f7 	movw	r2, #503	; 0x1f7
 800baa6:	490a      	ldr	r1, [pc, #40]	; (800bad0 <err_tcp+0x1a8>)
 800baa8:	4806      	ldr	r0, [pc, #24]	; (800bac4 <err_tcp+0x19c>)
 800baaa:	f013 f83f 	bl	801eb2c <iprintf>
  }
}
 800baae:	e000      	b.n	800bab2 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800bab0:	bf00      	nop
}
 800bab2:	bf00      	nop
 800bab4:	3720      	adds	r7, #32
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	080229f4 	.word	0x080229f4
 800bac0:	08022b4c 	.word	0x08022b4c
 800bac4:	08022a38 	.word	0x08022a38
 800bac8:	08022b5c 	.word	0x08022b5c
 800bacc:	08022b78 	.word	0x08022b78
 800bad0:	08022b94 	.word	0x08022b94

0800bad4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800bae2:	6879      	ldr	r1, [r7, #4]
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f008 f89b 	bl	8013c20 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800baea:	490a      	ldr	r1, [pc, #40]	; (800bb14 <setup_tcp+0x40>)
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f008 f8a9 	bl	8013c44 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800baf2:	4909      	ldr	r1, [pc, #36]	; (800bb18 <setup_tcp+0x44>)
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f008 f8c7 	bl	8013c88 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800bafa:	2202      	movs	r2, #2
 800bafc:	4907      	ldr	r1, [pc, #28]	; (800bb1c <setup_tcp+0x48>)
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f008 f91e 	bl	8013d40 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800bb04:	4906      	ldr	r1, [pc, #24]	; (800bb20 <setup_tcp+0x4c>)
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f008 f8e0 	bl	8013ccc <tcp_err>
}
 800bb0c:	bf00      	nop
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	0800b6ad 	.word	0x0800b6ad
 800bb18:	0800b881 	.word	0x0800b881
 800bb1c:	0800b7b9 	.word	0x0800b7b9
 800bb20:	0800b929 	.word	0x0800b929

0800bb24 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800bb24:	b590      	push	{r4, r7, lr}
 800bb26:	b089      	sub	sp, #36	; 0x24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d102      	bne.n	800bb42 <accept_function+0x1e>
    return ERR_VAL;
 800bb3c:	f06f 0305 	mvn.w	r3, #5
 800bb40:	e0a1      	b.n	800bc86 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	3314      	adds	r3, #20
 800bb46:	4618      	mov	r0, r3
 800bb48:	f012 f843 	bl	801dbd2 <sys_mbox_valid>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d102      	bne.n	800bb58 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800bb52:	f06f 0305 	mvn.w	r3, #5
 800bb56:	e096      	b.n	800bc86 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d11b      	bne.n	800bb96 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	f103 0414 	add.w	r4, r3, #20
 800bb64:	f06f 000c 	mvn.w	r0, #12
 800bb68:	f7ff fcb2 	bl	800b4d0 <lwip_netconn_err_to_msg>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4620      	mov	r0, r4
 800bb72:	f011 ffb9 	bl	801dae8 <sys_mbox_trypost>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d109      	bne.n	800bb90 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d005      	beq.n	800bb90 <accept_function+0x6c>
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	69f8      	ldr	r0, [r7, #28]
 800bb8e:	4798      	blx	r3
    }
    return ERR_VAL;
 800bb90:	f06f 0305 	mvn.w	r3, #5
 800bb94:	e077      	b.n	800bc86 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800bb96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d006      	beq.n	800bbac <accept_function+0x88>
 800bb9e:	4b3c      	ldr	r3, [pc, #240]	; (800bc90 <accept_function+0x16c>)
 800bba0:	f240 222a 	movw	r2, #554	; 0x22a
 800bba4:	493b      	ldr	r1, [pc, #236]	; (800bc94 <accept_function+0x170>)
 800bba6:	483c      	ldr	r0, [pc, #240]	; (800bc98 <accept_function+0x174>)
 800bba8:	f012 ffc0 	bl	801eb2c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	781a      	ldrb	r2, [r3, #0]
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	f000 f8f0 	bl	800bd9c <netconn_alloc>
 800bbbc:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d11b      	bne.n	800bbfc <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	f103 0414 	add.w	r4, r3, #20
 800bbca:	f06f 000c 	mvn.w	r0, #12
 800bbce:	f7ff fc7f 	bl	800b4d0 <lwip_netconn_err_to_msg>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f011 ff86 	bl	801dae8 <sys_mbox_trypost>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d109      	bne.n	800bbf6 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d005      	beq.n	800bbf6 <accept_function+0xd2>
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbee:	2200      	movs	r2, #0
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	69f8      	ldr	r0, [r7, #28]
 800bbf4:	4798      	blx	r3
    }
    return ERR_MEM;
 800bbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbfa:	e044      	b.n	800bc86 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800bc02:	69b8      	ldr	r0, [r7, #24]
 800bc04:	f7ff ff66 	bl	800bad4 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	3314      	adds	r3, #20
 800bc0c:	69b9      	ldr	r1, [r7, #24]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f011 ff6a 	bl	801dae8 <sys_mbox_trypost>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d02a      	beq.n	800bc70 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800bc20:	2100      	movs	r1, #0
 800bc22:	6978      	ldr	r0, [r7, #20]
 800bc24:	f007 fffc 	bl	8013c20 <tcp_arg>
    tcp_recv(pcb, NULL);
 800bc28:	2100      	movs	r1, #0
 800bc2a:	6978      	ldr	r0, [r7, #20]
 800bc2c:	f008 f80a 	bl	8013c44 <tcp_recv>
    tcp_sent(pcb, NULL);
 800bc30:	2100      	movs	r1, #0
 800bc32:	6978      	ldr	r0, [r7, #20]
 800bc34:	f008 f828 	bl	8013c88 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800bc38:	2200      	movs	r2, #0
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	6978      	ldr	r0, [r7, #20]
 800bc3e:	f008 f87f 	bl	8013d40 <tcp_poll>
    tcp_err(pcb, NULL);
 800bc42:	2100      	movs	r1, #0
 800bc44:	6978      	ldr	r0, [r7, #20]
 800bc46:	f008 f841 	bl	8013ccc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	3310      	adds	r3, #16
 800bc54:	4618      	mov	r0, r3
 800bc56:	f011 ff35 	bl	801dac4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	3310      	adds	r3, #16
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f011 ffc8 	bl	801dbf4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800bc64:	69b8      	ldr	r0, [r7, #24]
 800bc66:	f000 f907 	bl	800be78 <netconn_free>
    return ERR_MEM;
 800bc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6e:	e00a      	b.n	800bc86 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d005      	beq.n	800bc84 <accept_function+0x160>
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2100      	movs	r1, #0
 800bc80:	69f8      	ldr	r0, [r7, #28]
 800bc82:	4798      	blx	r3
  }

  return ERR_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3724      	adds	r7, #36	; 0x24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd90      	pop	{r4, r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	080229f4 	.word	0x080229f4
 800bc94:	08022bb0 	.word	0x08022bb0
 800bc98:	08022a38 	.word	0x08022a38

0800bc9c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800bc9c:	b590      	push	{r4, r7, lr}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d006      	beq.n	800bcc0 <pcb_new+0x24>
 800bcb2:	4b2b      	ldr	r3, [pc, #172]	; (800bd60 <pcb_new+0xc4>)
 800bcb4:	f240 2265 	movw	r2, #613	; 0x265
 800bcb8:	492a      	ldr	r1, [pc, #168]	; (800bd64 <pcb_new+0xc8>)
 800bcba:	482b      	ldr	r0, [pc, #172]	; (800bd68 <pcb_new+0xcc>)
 800bcbc:	f012 ff36 	bl	801eb2c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcca:	2b10      	cmp	r3, #16
 800bccc:	d022      	beq.n	800bd14 <pcb_new+0x78>
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	d133      	bne.n	800bd3a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681c      	ldr	r4, [r3, #0]
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f00d fb68 	bl	80193ae <udp_new_ip_type>
 800bcde:	4603      	mov	r3, r0
 800bce0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d02a      	beq.n	800bd42 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b22      	cmp	r3, #34	; 0x22
 800bcf4:	d104      	bne.n	800bd00 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6858      	ldr	r0, [r3, #4]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	4917      	ldr	r1, [pc, #92]	; (800bd6c <pcb_new+0xd0>)
 800bd0e:	f00d fad5 	bl	80192bc <udp_recv>
      }
      break;
 800bd12:	e016      	b.n	800bd42 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681c      	ldr	r4, [r3, #0]
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f007 ff72 	bl	8013c04 <tcp_new_ip_type>
 800bd20:	4603      	mov	r3, r0
 800bd22:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00b      	beq.n	800bd46 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff fece 	bl	800bad4 <setup_tcp>
      }
      break;
 800bd38:	e005      	b.n	800bd46 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	22fa      	movs	r2, #250	; 0xfa
 800bd3e:	711a      	strb	r2, [r3, #4]
      return;
 800bd40:	e00a      	b.n	800bd58 <pcb_new+0xbc>
      break;
 800bd42:	bf00      	nop
 800bd44:	e000      	b.n	800bd48 <pcb_new+0xac>
      break;
 800bd46:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d102      	bne.n	800bd58 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	22ff      	movs	r2, #255	; 0xff
 800bd56:	711a      	strb	r2, [r3, #4]
  }
}
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd90      	pop	{r4, r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	080229f4 	.word	0x080229f4
 800bd64:	08022bd8 	.word	0x08022bd8
 800bd68:	08022a38 	.word	0x08022a38
 800bd6c:	0800b5b1 	.word	0x0800b5b1

0800bd70 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d102      	bne.n	800bd92 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f7ff ff85 	bl	800bc9c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	4603      	mov	r3, r0
 800bda4:	6039      	str	r1, [r7, #0]
 800bda6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800bdac:	2007      	movs	r0, #7
 800bdae:	f004 fee1 	bl	8010b74 <memp_malloc>
 800bdb2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <netconn_alloc+0x22>
    return NULL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	e052      	b.n	800be64 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	79fa      	ldrb	r2, [r7, #7]
 800bdc8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800bdd0:	79fb      	ldrb	r3, [r7, #7]
 800bdd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdd6:	2b10      	cmp	r3, #16
 800bdd8:	d004      	beq.n	800bde4 <netconn_alloc+0x48>
 800bdda:	2b20      	cmp	r3, #32
 800bddc:	d105      	bne.n	800bdea <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800bdde:	2306      	movs	r3, #6
 800bde0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800bde2:	e00a      	b.n	800bdfa <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800bde4:	2306      	movs	r3, #6
 800bde6:	617b      	str	r3, [r7, #20]
      break;
 800bde8:	e007      	b.n	800bdfa <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800bdea:	4b20      	ldr	r3, [pc, #128]	; (800be6c <netconn_alloc+0xd0>)
 800bdec:	f240 22e5 	movw	r2, #741	; 0x2e5
 800bdf0:	491f      	ldr	r1, [pc, #124]	; (800be70 <netconn_alloc+0xd4>)
 800bdf2:	4820      	ldr	r0, [pc, #128]	; (800be74 <netconn_alloc+0xd8>)
 800bdf4:	f012 fe9a 	bl	801eb2c <iprintf>
      goto free_and_return;
 800bdf8:	e02f      	b.n	800be5a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	3310      	adds	r3, #16
 800bdfe:	6979      	ldr	r1, [r7, #20]
 800be00:	4618      	mov	r0, r3
 800be02:	f011 fe41 	bl	801da88 <sys_mbox_new>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d125      	bne.n	800be58 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	330c      	adds	r3, #12
 800be10:	2100      	movs	r1, #0
 800be12:	4618      	mov	r0, r3
 800be14:	f011 fefb 	bl	801dc0e <sys_sem_new>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d005      	beq.n	800be2a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	3310      	adds	r3, #16
 800be22:	4618      	mov	r0, r3
 800be24:	f011 fe4e 	bl	801dac4 <sys_mbox_free>
    goto free_and_return;
 800be28:	e017      	b.n	800be5a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3314      	adds	r3, #20
 800be2e:	4618      	mov	r0, r3
 800be30:	f011 fee0 	bl	801dbf4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f04f 32ff 	mov.w	r2, #4294967295
 800be40:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2200      	movs	r2, #0
 800be4c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	7cfa      	ldrb	r2, [r7, #19]
 800be52:	771a      	strb	r2, [r3, #28]
  return conn;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	e005      	b.n	800be64 <netconn_alloc+0xc8>
    goto free_and_return;
 800be58:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800be5a:	68f9      	ldr	r1, [r7, #12]
 800be5c:	2007      	movs	r0, #7
 800be5e:	f004 fedb 	bl	8010c18 <memp_free>
  return NULL;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3718      	adds	r7, #24
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	080229f4 	.word	0x080229f4
 800be70:	08022bf8 	.word	0x08022bf8
 800be74:	08022a38 	.word	0x08022a38

0800be78 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d006      	beq.n	800be96 <netconn_free+0x1e>
 800be88:	4b1b      	ldr	r3, [pc, #108]	; (800bef8 <netconn_free+0x80>)
 800be8a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800be8e:	491b      	ldr	r1, [pc, #108]	; (800befc <netconn_free+0x84>)
 800be90:	481b      	ldr	r0, [pc, #108]	; (800bf00 <netconn_free+0x88>)
 800be92:	f012 fe4b 	bl	801eb2c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	3310      	adds	r3, #16
 800be9a:	4618      	mov	r0, r3
 800be9c:	f011 fe99 	bl	801dbd2 <sys_mbox_valid>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d006      	beq.n	800beb4 <netconn_free+0x3c>
 800bea6:	4b14      	ldr	r3, [pc, #80]	; (800bef8 <netconn_free+0x80>)
 800bea8:	f240 3223 	movw	r2, #803	; 0x323
 800beac:	4915      	ldr	r1, [pc, #84]	; (800bf04 <netconn_free+0x8c>)
 800beae:	4814      	ldr	r0, [pc, #80]	; (800bf00 <netconn_free+0x88>)
 800beb0:	f012 fe3c 	bl	801eb2c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	3314      	adds	r3, #20
 800beb8:	4618      	mov	r0, r3
 800beba:	f011 fe8a 	bl	801dbd2 <sys_mbox_valid>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d006      	beq.n	800bed2 <netconn_free+0x5a>
 800bec4:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <netconn_free+0x80>)
 800bec6:	f240 3226 	movw	r2, #806	; 0x326
 800beca:	490f      	ldr	r1, [pc, #60]	; (800bf08 <netconn_free+0x90>)
 800becc:	480c      	ldr	r0, [pc, #48]	; (800bf00 <netconn_free+0x88>)
 800bece:	f012 fe2d 	bl	801eb2c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	330c      	adds	r3, #12
 800bed6:	4618      	mov	r0, r3
 800bed8:	f011 fefd 	bl	801dcd6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	330c      	adds	r3, #12
 800bee0:	4618      	mov	r0, r3
 800bee2:	f011 ff16 	bl	801dd12 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800bee6:	6879      	ldr	r1, [r7, #4]
 800bee8:	2007      	movs	r0, #7
 800beea:	f004 fe95 	bl	8010c18 <memp_free>
}
 800beee:	bf00      	nop
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	080229f4 	.word	0x080229f4
 800befc:	08022c20 	.word	0x08022c20
 800bf00:	08022a38 	.word	0x08022a38
 800bf04:	08022c50 	.word	0x08022c50
 800bf08:	08022c8c 	.word	0x08022c8c

0800bf0c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	3310      	adds	r3, #16
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f011 fe5a 	bl	801dbd2 <sys_mbox_valid>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d02f      	beq.n	800bf84 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bf24:	e018      	b.n	800bf58 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf2e:	2b10      	cmp	r3, #16
 800bf30:	d10e      	bne.n	800bf50 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f107 020f 	add.w	r2, r7, #15
 800bf38:	4611      	mov	r1, r2
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff fafe 	bl	800b53c <lwip_netconn_is_err_msg>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d108      	bne.n	800bf58 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f005 fd47 	bl	80119dc <pbuf_free>
 800bf4e:	e003      	b.n	800bf58 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f001 f952 	bl	800d1fc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3310      	adds	r3, #16
 800bf5c:	f107 0210 	add.w	r2, r7, #16
 800bf60:	4611      	mov	r1, r2
 800bf62:	4618      	mov	r0, r3
 800bf64:	f011 fe19 	bl	801db9a <sys_arch_mbox_tryfetch>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6e:	d1da      	bne.n	800bf26 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	3310      	adds	r3, #16
 800bf74:	4618      	mov	r0, r3
 800bf76:	f011 fda5 	bl	801dac4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3310      	adds	r3, #16
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f011 fe38 	bl	801dbf4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	3314      	adds	r3, #20
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f011 fe22 	bl	801dbd2 <sys_mbox_valid>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d034      	beq.n	800bffe <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bf94:	e01d      	b.n	800bfd2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	f107 020e 	add.w	r2, r7, #14
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff facc 	bl	800b53c <lwip_netconn_is_err_msg>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d113      	bne.n	800bfd2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800bfae:	6978      	ldr	r0, [r7, #20]
 800bfb0:	f7ff ffac 	bl	800bf0c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d007      	beq.n	800bfcc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f006 fc87 	bl	80128d4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800bfcc:	6978      	ldr	r0, [r7, #20]
 800bfce:	f7ff ff53 	bl	800be78 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	3314      	adds	r3, #20
 800bfd6:	f107 0210 	add.w	r2, r7, #16
 800bfda:	4611      	mov	r1, r2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f011 fddc 	bl	801db9a <sys_arch_mbox_tryfetch>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe8:	d1d5      	bne.n	800bf96 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3314      	adds	r3, #20
 800bfee:	4618      	mov	r0, r3
 800bff0:	f011 fd68 	bl	801dac4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3314      	adds	r3, #20
 800bff8:	4618      	mov	r0, r3
 800bffa:	f011 fdfb 	bl	801dbf4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800bffe:	bf00      	nop
 800c000:	3718      	adds	r7, #24
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
	...

0800c008 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c014:	2300      	movs	r3, #0
 800c016:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <lwip_netconn_do_close_internal+0x24>
 800c01e:	4ba1      	ldr	r3, [pc, #644]	; (800c2a4 <lwip_netconn_do_close_internal+0x29c>)
 800c020:	f240 32a2 	movw	r2, #930	; 0x3a2
 800c024:	49a0      	ldr	r1, [pc, #640]	; (800c2a8 <lwip_netconn_do_close_internal+0x2a0>)
 800c026:	48a1      	ldr	r0, [pc, #644]	; (800c2ac <lwip_netconn_do_close_internal+0x2a4>)
 800c028:	f012 fd80 	bl	801eb2c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c034:	2b10      	cmp	r3, #16
 800c036:	d006      	beq.n	800c046 <lwip_netconn_do_close_internal+0x3e>
 800c038:	4b9a      	ldr	r3, [pc, #616]	; (800c2a4 <lwip_netconn_do_close_internal+0x29c>)
 800c03a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800c03e:	499c      	ldr	r1, [pc, #624]	; (800c2b0 <lwip_netconn_do_close_internal+0x2a8>)
 800c040:	489a      	ldr	r0, [pc, #616]	; (800c2ac <lwip_netconn_do_close_internal+0x2a4>)
 800c042:	f012 fd73 	bl	801eb2c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	785b      	ldrb	r3, [r3, #1]
 800c04a:	2b04      	cmp	r3, #4
 800c04c:	d006      	beq.n	800c05c <lwip_netconn_do_close_internal+0x54>
 800c04e:	4b95      	ldr	r3, [pc, #596]	; (800c2a4 <lwip_netconn_do_close_internal+0x29c>)
 800c050:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800c054:	4997      	ldr	r1, [pc, #604]	; (800c2b4 <lwip_netconn_do_close_internal+0x2ac>)
 800c056:	4895      	ldr	r0, [pc, #596]	; (800c2ac <lwip_netconn_do_close_internal+0x2a4>)
 800c058:	f012 fd68 	bl	801eb2c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d106      	bne.n	800c072 <lwip_netconn_do_close_internal+0x6a>
 800c064:	4b8f      	ldr	r3, [pc, #572]	; (800c2a4 <lwip_netconn_do_close_internal+0x29c>)
 800c066:	f240 32a5 	movw	r2, #933	; 0x3a5
 800c06a:	4993      	ldr	r1, [pc, #588]	; (800c2b8 <lwip_netconn_do_close_internal+0x2b0>)
 800c06c:	488f      	ldr	r0, [pc, #572]	; (800c2ac <lwip_netconn_do_close_internal+0x2a4>)
 800c06e:	f012 fd5d 	bl	801eb2c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d106      	bne.n	800c088 <lwip_netconn_do_close_internal+0x80>
 800c07a:	4b8a      	ldr	r3, [pc, #552]	; (800c2a4 <lwip_netconn_do_close_internal+0x29c>)
 800c07c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c080:	498e      	ldr	r1, [pc, #568]	; (800c2bc <lwip_netconn_do_close_internal+0x2b4>)
 800c082:	488a      	ldr	r0, [pc, #552]	; (800c2ac <lwip_netconn_do_close_internal+0x2a4>)
 800c084:	f012 fd52 	bl	801eb2c <iprintf>

  tpcb = conn->pcb.tcp;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	7a1b      	ldrb	r3, [r3, #8]
 800c094:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
 800c098:	f003 0301 	and.w	r3, r3, #1
 800c09c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
 800c0a0:	f003 0302 	and.w	r3, r3, #2
 800c0a4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c0a6:	7bfb      	ldrb	r3, [r7, #15]
 800c0a8:	2b03      	cmp	r3, #3
 800c0aa:	d102      	bne.n	800c0b2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	75bb      	strb	r3, [r7, #22]
 800c0b0:	e01f      	b.n	800c0f2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00e      	beq.n	800c0d6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c0bc:	2b05      	cmp	r3, #5
 800c0be:	d007      	beq.n	800c0d0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c0c4:	2b06      	cmp	r3, #6
 800c0c6:	d003      	beq.n	800c0d0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c0cc:	2b08      	cmp	r3, #8
 800c0ce:	d102      	bne.n	800c0d6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	75bb      	strb	r3, [r7, #22]
 800c0d4:	e00d      	b.n	800c0f2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c0d6:	7b7b      	ldrb	r3, [r7, #13]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d008      	beq.n	800c0ee <lwip_netconn_do_close_internal+0xe6>
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	8b5b      	ldrh	r3, [r3, #26]
 800c0e0:	f003 0310 	and.w	r3, r3, #16
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	75bb      	strb	r3, [r7, #22]
 800c0ec:	e001      	b.n	800c0f2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c0f2:	7dbb      	ldrb	r3, [r7, #22]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d003      	beq.n	800c100 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	6938      	ldr	r0, [r7, #16]
 800c0fc:	f007 fd90 	bl	8013c20 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	7d1b      	ldrb	r3, [r3, #20]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d104      	bne.n	800c112 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c108:	2100      	movs	r1, #0
 800c10a:	6938      	ldr	r0, [r7, #16]
 800c10c:	f007 fe00 	bl	8013d10 <tcp_accept>
 800c110:	e01d      	b.n	800c14e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c112:	7bbb      	ldrb	r3, [r7, #14]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d007      	beq.n	800c128 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c118:	2100      	movs	r1, #0
 800c11a:	6938      	ldr	r0, [r7, #16]
 800c11c:	f007 fd92 	bl	8013c44 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c120:	2100      	movs	r1, #0
 800c122:	6938      	ldr	r0, [r7, #16]
 800c124:	f007 fdf4 	bl	8013d10 <tcp_accept>
    }
    if (shut_tx) {
 800c128:	7b7b      	ldrb	r3, [r7, #13]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d003      	beq.n	800c136 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c12e:	2100      	movs	r1, #0
 800c130:	6938      	ldr	r0, [r7, #16]
 800c132:	f007 fda9 	bl	8013c88 <tcp_sent>
    }
    if (shut_close) {
 800c136:	7dbb      	ldrb	r3, [r7, #22]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d008      	beq.n	800c14e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c13c:	2200      	movs	r2, #0
 800c13e:	2100      	movs	r1, #0
 800c140:	6938      	ldr	r0, [r7, #16]
 800c142:	f007 fdfd 	bl	8013d40 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c146:	2100      	movs	r1, #0
 800c148:	6938      	ldr	r0, [r7, #16]
 800c14a:	f007 fdbf 	bl	8013ccc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c14e:	7dbb      	ldrb	r3, [r7, #22]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d005      	beq.n	800c160 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c154:	6938      	ldr	r0, [r7, #16]
 800c156:	f006 fa77 	bl	8012648 <tcp_close>
 800c15a:	4603      	mov	r3, r0
 800c15c:	75fb      	strb	r3, [r7, #23]
 800c15e:	e007      	b.n	800c170 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	7b7a      	ldrb	r2, [r7, #13]
 800c164:	4619      	mov	r1, r3
 800c166:	6938      	ldr	r0, [r7, #16]
 800c168:	f006 fa9a 	bl	80126a0 <tcp_shutdown>
 800c16c:	4603      	mov	r3, r0
 800c16e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c170:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d102      	bne.n	800c17e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c178:	2301      	movs	r3, #1
 800c17a:	757b      	strb	r3, [r7, #21]
 800c17c:	e016      	b.n	800c1ac <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c17e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c186:	d10f      	bne.n	800c1a8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a1b      	ldr	r3, [r3, #32]
 800c18c:	7a5b      	ldrb	r3, [r3, #9]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10c      	bne.n	800c1ac <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c192:	2301      	movs	r3, #1
 800c194:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c196:	7dbb      	ldrb	r3, [r7, #22]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d007      	beq.n	800c1ac <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c19c:	6938      	ldr	r0, [r7, #16]
 800c19e:	f006 fb99 	bl	80128d4 <tcp_abort>
          err = ERR_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	75fb      	strb	r3, [r7, #23]
 800c1a6:	e001      	b.n	800c1ac <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c1ac:	7d7b      	ldrb	r3, [r7, #21]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d044      	beq.n	800c23c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	330c      	adds	r3, #12
 800c1ba:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a1b      	ldr	r3, [r3, #32]
 800c1c0:	7dfa      	ldrb	r2, [r7, #23]
 800c1c2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c1d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d129      	bne.n	800c22c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c1d8:	7dbb      	ldrb	r3, [r7, #22]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00c      	beq.n	800c1f8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d005      	beq.n	800c1f8 <lwip_netconn_do_close_internal+0x1f0>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	2104      	movs	r1, #4
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	4798      	blx	r3
      }
      if (shut_rx) {
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d009      	beq.n	800c212 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c202:	2b00      	cmp	r3, #0
 800c204:	d005      	beq.n	800c212 <lwip_netconn_do_close_internal+0x20a>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20a:	2200      	movs	r2, #0
 800c20c:	2100      	movs	r1, #0
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	4798      	blx	r3
      }
      if (shut_tx) {
 800c212:	7b7b      	ldrb	r3, [r7, #13]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d009      	beq.n	800c22c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d005      	beq.n	800c22c <lwip_netconn_do_close_internal+0x224>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c224:	2200      	movs	r2, #0
 800c226:	2102      	movs	r1, #2
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c22c:	78fb      	ldrb	r3, [r7, #3]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d002      	beq.n	800c238 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c232:	68b8      	ldr	r0, [r7, #8]
 800c234:	f011 fd42 	bl	801dcbc <sys_sem_signal>
    }
    return ERR_OK;
 800c238:	2300      	movs	r3, #0
 800c23a:	e02e      	b.n	800c29a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800c23c:	7d7b      	ldrb	r3, [r7, #21]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d11e      	bne.n	800c280 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	7d1b      	ldrb	r3, [r3, #20]
 800c246:	2b01      	cmp	r3, #1
 800c248:	d106      	bne.n	800c258 <lwip_netconn_do_close_internal+0x250>
 800c24a:	4b16      	ldr	r3, [pc, #88]	; (800c2a4 <lwip_netconn_do_close_internal+0x29c>)
 800c24c:	f240 4241 	movw	r2, #1089	; 0x441
 800c250:	491b      	ldr	r1, [pc, #108]	; (800c2c0 <lwip_netconn_do_close_internal+0x2b8>)
 800c252:	4816      	ldr	r0, [pc, #88]	; (800c2ac <lwip_netconn_do_close_internal+0x2a4>)
 800c254:	f012 fc6a 	bl	801eb2c <iprintf>
    if (shut_tx) {
 800c258:	7b7b      	ldrb	r3, [r7, #13]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800c25e:	4919      	ldr	r1, [pc, #100]	; (800c2c4 <lwip_netconn_do_close_internal+0x2bc>)
 800c260:	6938      	ldr	r0, [r7, #16]
 800c262:	f007 fd11 	bl	8013c88 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800c266:	2201      	movs	r2, #1
 800c268:	4917      	ldr	r1, [pc, #92]	; (800c2c8 <lwip_netconn_do_close_internal+0x2c0>)
 800c26a:	6938      	ldr	r0, [r7, #16]
 800c26c:	f007 fd68 	bl	8013d40 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c270:	4916      	ldr	r1, [pc, #88]	; (800c2cc <lwip_netconn_do_close_internal+0x2c4>)
 800c272:	6938      	ldr	r0, [r7, #16]
 800c274:	f007 fd2a 	bl	8013ccc <tcp_err>
    tcp_arg(tpcb, conn);
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	6938      	ldr	r0, [r7, #16]
 800c27c:	f007 fcd0 	bl	8013c20 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800c280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d106      	bne.n	800c296 <lwip_netconn_do_close_internal+0x28e>
 800c288:	4b06      	ldr	r3, [pc, #24]	; (800c2a4 <lwip_netconn_do_close_internal+0x29c>)
 800c28a:	f240 424d 	movw	r2, #1101	; 0x44d
 800c28e:	4910      	ldr	r1, [pc, #64]	; (800c2d0 <lwip_netconn_do_close_internal+0x2c8>)
 800c290:	4806      	ldr	r0, [pc, #24]	; (800c2ac <lwip_netconn_do_close_internal+0x2a4>)
 800c292:	f012 fc4b 	bl	801eb2c <iprintf>
  return err;
 800c296:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3718      	adds	r7, #24
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	080229f4 	.word	0x080229f4
 800c2a8:	08022cc8 	.word	0x08022cc8
 800c2ac:	08022a38 	.word	0x08022a38
 800c2b0:	08022cd8 	.word	0x08022cd8
 800c2b4:	08022cf8 	.word	0x08022cf8
 800c2b8:	08022d1c 	.word	0x08022d1c
 800c2bc:	08022b5c 	.word	0x08022b5c
 800c2c0:	08022d30 	.word	0x08022d30
 800c2c4:	0800b881 	.word	0x0800b881
 800c2c8:	0800b7b9 	.word	0x0800b7b9
 800c2cc:	0800b929 	.word	0x0800b929
 800c2d0:	08022d54 	.word	0x08022d54

0800c2d4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	785b      	ldrb	r3, [r3, #1]
 800c2e6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c2e8:	7afb      	ldrb	r3, [r7, #11]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00d      	beq.n	800c30a <lwip_netconn_do_delconn+0x36>
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2f8:	2b10      	cmp	r3, #16
 800c2fa:	d006      	beq.n	800c30a <lwip_netconn_do_delconn+0x36>
 800c2fc:	4b60      	ldr	r3, [pc, #384]	; (800c480 <lwip_netconn_do_delconn+0x1ac>)
 800c2fe:	f240 425e 	movw	r2, #1118	; 0x45e
 800c302:	4960      	ldr	r1, [pc, #384]	; (800c484 <lwip_netconn_do_delconn+0x1b0>)
 800c304:	4860      	ldr	r0, [pc, #384]	; (800c488 <lwip_netconn_do_delconn+0x1b4>)
 800c306:	f012 fc11 	bl	801eb2c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800c30a:	7afb      	ldrb	r3, [r7, #11]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d005      	beq.n	800c31c <lwip_netconn_do_delconn+0x48>
 800c310:	7afb      	ldrb	r3, [r7, #11]
 800c312:	2b02      	cmp	r3, #2
 800c314:	d002      	beq.n	800c31c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800c316:	7afb      	ldrb	r3, [r7, #11]
 800c318:	2b03      	cmp	r3, #3
 800c31a:	d109      	bne.n	800c330 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800c31c:	7afb      	ldrb	r3, [r7, #11]
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d10a      	bne.n	800c338 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	7f1b      	ldrb	r3, [r3, #28]
 800c328:	f003 0304 	and.w	r3, r3, #4
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d103      	bne.n	800c338 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	22fb      	movs	r2, #251	; 0xfb
 800c334:	711a      	strb	r2, [r3, #4]
 800c336:	e097      	b.n	800c468 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800c338:	7afb      	ldrb	r3, [r7, #11]
 800c33a:	2b03      	cmp	r3, #3
 800c33c:	d10d      	bne.n	800c35a <lwip_netconn_do_delconn+0x86>
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	7f1b      	ldrb	r3, [r3, #28]
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d106      	bne.n	800c35a <lwip_netconn_do_delconn+0x86>
 800c34c:	4b4c      	ldr	r3, [pc, #304]	; (800c480 <lwip_netconn_do_delconn+0x1ac>)
 800c34e:	f240 427a 	movw	r2, #1146	; 0x47a
 800c352:	494e      	ldr	r1, [pc, #312]	; (800c48c <lwip_netconn_do_delconn+0x1b8>)
 800c354:	484c      	ldr	r0, [pc, #304]	; (800c488 <lwip_netconn_do_delconn+0x1b4>)
 800c356:	f012 fbe9 	bl	801eb2c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2200      	movs	r2, #0
 800c35e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4618      	mov	r0, r3
 800c366:	f7ff fdd1 	bl	800bf0c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d05f      	beq.n	800c434 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c37e:	2b10      	cmp	r3, #16
 800c380:	d00d      	beq.n	800c39e <lwip_netconn_do_delconn+0xca>
 800c382:	2b20      	cmp	r3, #32
 800c384:	d151      	bne.n	800c42a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	4618      	mov	r0, r3
 800c398:	f00c ffb0 	bl	80192fc <udp_remove>
          break;
 800c39c:	e046      	b.n	800c42c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	6a1b      	ldr	r3, [r3, #32]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d006      	beq.n	800c3b6 <lwip_netconn_do_delconn+0xe2>
 800c3a8:	4b35      	ldr	r3, [pc, #212]	; (800c480 <lwip_netconn_do_delconn+0x1ac>)
 800c3aa:	f240 4294 	movw	r2, #1172	; 0x494
 800c3ae:	4938      	ldr	r1, [pc, #224]	; (800c490 <lwip_netconn_do_delconn+0x1bc>)
 800c3b0:	4835      	ldr	r0, [pc, #212]	; (800c488 <lwip_netconn_do_delconn+0x1b4>)
 800c3b2:	f012 fbbb 	bl	801eb2c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2204      	movs	r2, #4
 800c3bc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2203      	movs	r2, #3
 800c3c2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff fe18 	bl	800c008 <lwip_netconn_do_close_internal>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d04b      	beq.n	800c476 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	785b      	ldrb	r3, [r3, #1]
 800c3e4:	2b04      	cmp	r3, #4
 800c3e6:	d006      	beq.n	800c3f6 <lwip_netconn_do_delconn+0x122>
 800c3e8:	4b25      	ldr	r3, [pc, #148]	; (800c480 <lwip_netconn_do_delconn+0x1ac>)
 800c3ea:	f240 429a 	movw	r2, #1178	; 0x49a
 800c3ee:	4929      	ldr	r1, [pc, #164]	; (800c494 <lwip_netconn_do_delconn+0x1c0>)
 800c3f0:	4825      	ldr	r0, [pc, #148]	; (800c488 <lwip_netconn_do_delconn+0x1b4>)
 800c3f2:	f012 fb9b 	bl	801eb2c <iprintf>
            UNLOCK_TCPIP_CORE();
 800c3f6:	4828      	ldr	r0, [pc, #160]	; (800c498 <lwip_netconn_do_delconn+0x1c4>)
 800c3f8:	f011 fccf 	bl	801dd9a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	330c      	adds	r3, #12
 800c402:	2100      	movs	r1, #0
 800c404:	4618      	mov	r0, r3
 800c406:	f011 fc28 	bl	801dc5a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c40a:	4823      	ldr	r0, [pc, #140]	; (800c498 <lwip_netconn_do_delconn+0x1c4>)
 800c40c:	f011 fcb6 	bl	801dd7c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	785b      	ldrb	r3, [r3, #1]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d02d      	beq.n	800c476 <lwip_netconn_do_delconn+0x1a2>
 800c41a:	4b19      	ldr	r3, [pc, #100]	; (800c480 <lwip_netconn_do_delconn+0x1ac>)
 800c41c:	f240 429e 	movw	r2, #1182	; 0x49e
 800c420:	491c      	ldr	r1, [pc, #112]	; (800c494 <lwip_netconn_do_delconn+0x1c0>)
 800c422:	4819      	ldr	r0, [pc, #100]	; (800c488 <lwip_netconn_do_delconn+0x1b4>)
 800c424:	f012 fb82 	bl	801eb2c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c428:	e025      	b.n	800c476 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800c42a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2200      	movs	r2, #0
 800c432:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d007      	beq.n	800c44e <lwip_netconn_do_delconn+0x17a>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	6810      	ldr	r0, [r2, #0]
 800c448:	2200      	movs	r2, #0
 800c44a:	2100      	movs	r1, #0
 800c44c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	d007      	beq.n	800c468 <lwip_netconn_do_delconn+0x194>
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	6810      	ldr	r0, [r2, #0]
 800c462:	2200      	movs	r2, #0
 800c464:	2102      	movs	r1, #2
 800c466:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	330c      	adds	r3, #12
 800c46e:	4618      	mov	r0, r3
 800c470:	f011 fc3e 	bl	801dcf0 <sys_sem_valid>
 800c474:	e000      	b.n	800c478 <lwip_netconn_do_delconn+0x1a4>
          return;
 800c476:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	080229f4 	.word	0x080229f4
 800c484:	08022d64 	.word	0x08022d64
 800c488:	08022a38 	.word	0x08022a38
 800c48c:	08022d78 	.word	0x08022d78
 800c490:	08022d98 	.word	0x08022d98
 800c494:	08022db4 	.word	0x08022db4
 800c498:	200176d0 	.word	0x200176d0

0800c49c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d025      	beq.n	800c4fe <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4bc:	2b10      	cmp	r3, #16
 800c4be:	d00e      	beq.n	800c4de <lwip_netconn_do_bind+0x42>
 800c4c0:	2b20      	cmp	r3, #32
 800c4c2:	d119      	bne.n	800c4f8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6858      	ldr	r0, [r3, #4]
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	6899      	ldr	r1, [r3, #8]
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	899b      	ldrh	r3, [r3, #12]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f00c fdd4 	bl	8019080 <udp_bind>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	73fb      	strb	r3, [r7, #15]
        break;
 800c4dc:	e011      	b.n	800c502 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	6858      	ldr	r0, [r3, #4]
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	6899      	ldr	r1, [r3, #8]
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	899b      	ldrh	r3, [r3, #12]
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	f006 f9fd 	bl	80128ec <tcp_bind>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	73fb      	strb	r3, [r7, #15]
        break;
 800c4f6:	e004      	b.n	800c502 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c4f8:	23fa      	movs	r3, #250	; 0xfa
 800c4fa:	73fb      	strb	r3, [r7, #15]
        break;
 800c4fc:	e001      	b.n	800c502 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800c4fe:	23fa      	movs	r3, #250	; 0xfa
 800c500:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	7bfa      	ldrb	r2, [r7, #15]
 800c506:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c508:	bf00      	nop
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	4613      	mov	r3, r2
 800c51c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800c51e:	2300      	movs	r3, #0
 800c520:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d102      	bne.n	800c532 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800c52c:	f06f 0305 	mvn.w	r3, #5
 800c530:	e070      	b.n	800c614 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	785b      	ldrb	r3, [r3, #1]
 800c536:	2b03      	cmp	r3, #3
 800c538:	d006      	beq.n	800c548 <lwip_netconn_do_connected+0x38>
 800c53a:	4b38      	ldr	r3, [pc, #224]	; (800c61c <lwip_netconn_do_connected+0x10c>)
 800c53c:	f240 5223 	movw	r2, #1315	; 0x523
 800c540:	4937      	ldr	r1, [pc, #220]	; (800c620 <lwip_netconn_do_connected+0x110>)
 800c542:	4838      	ldr	r0, [pc, #224]	; (800c624 <lwip_netconn_do_connected+0x114>)
 800c544:	f012 faf2 	bl	801eb2c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	6a1b      	ldr	r3, [r3, #32]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d10c      	bne.n	800c56a <lwip_netconn_do_connected+0x5a>
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	7f1b      	ldrb	r3, [r3, #28]
 800c554:	f003 0304 	and.w	r3, r3, #4
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d106      	bne.n	800c56a <lwip_netconn_do_connected+0x5a>
 800c55c:	4b2f      	ldr	r3, [pc, #188]	; (800c61c <lwip_netconn_do_connected+0x10c>)
 800c55e:	f240 5224 	movw	r2, #1316	; 0x524
 800c562:	4931      	ldr	r1, [pc, #196]	; (800c628 <lwip_netconn_do_connected+0x118>)
 800c564:	482f      	ldr	r0, [pc, #188]	; (800c624 <lwip_netconn_do_connected+0x114>)
 800c566:	f012 fae1 	bl	801eb2c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d008      	beq.n	800c584 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	79fa      	ldrb	r2, [r7, #7]
 800c578:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	330c      	adds	r3, #12
 800c582:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c58c:	2b10      	cmp	r3, #16
 800c58e:	d106      	bne.n	800c59e <lwip_netconn_do_connected+0x8e>
 800c590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800c598:	69b8      	ldr	r0, [r7, #24]
 800c59a:	f7ff fa9b 	bl	800bad4 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	7f1b      	ldrb	r3, [r3, #28]
 800c5a2:	f003 0304 	and.w	r3, r3, #4
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	bf0c      	ite	eq
 800c5aa:	2301      	moveq	r3, #1
 800c5ac:	2300      	movne	r3, #0
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	7f1b      	ldrb	r3, [r3, #28]
 800c5b6:	f023 0304 	bic.w	r3, r3, #4
 800c5ba:	b2da      	uxtb	r2, r3
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d002      	beq.n	800c5cc <lwip_netconn_do_connected+0xbc>
 800c5c6:	69fb      	ldr	r3, [r7, #28]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10c      	bne.n	800c5e6 <lwip_netconn_do_connected+0xd6>
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d102      	bne.n	800c5d8 <lwip_netconn_do_connected+0xc8>
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d006      	beq.n	800c5e6 <lwip_netconn_do_connected+0xd6>
 800c5d8:	4b10      	ldr	r3, [pc, #64]	; (800c61c <lwip_netconn_do_connected+0x10c>)
 800c5da:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800c5de:	4913      	ldr	r1, [pc, #76]	; (800c62c <lwip_netconn_do_connected+0x11c>)
 800c5e0:	4810      	ldr	r0, [pc, #64]	; (800c624 <lwip_netconn_do_connected+0x114>)
 800c5e2:	f012 faa3 	bl	801eb2c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800c5e6:	69bb      	ldr	r3, [r7, #24]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d005      	beq.n	800c606 <lwip_netconn_do_connected+0xf6>
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fe:	2200      	movs	r2, #0
 800c600:	2102      	movs	r1, #2
 800c602:	69b8      	ldr	r0, [r7, #24]
 800c604:	4798      	blx	r3

  if (was_blocking) {
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800c60c:	69f8      	ldr	r0, [r7, #28]
 800c60e:	f011 fb55 	bl	801dcbc <sys_sem_signal>
  }
  return ERR_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3720      	adds	r7, #32
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	080229f4 	.word	0x080229f4
 800c620:	08022dbc 	.word	0x08022dbc
 800c624:	08022a38 	.word	0x08022a38
 800c628:	08022ddc 	.word	0x08022ddc
 800c62c:	08022e1c 	.word	0x08022e1c

0800c630 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d102      	bne.n	800c64c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800c646:	23f1      	movs	r3, #241	; 0xf1
 800c648:	75fb      	strb	r3, [r7, #23]
 800c64a:	e09b      	b.n	800c784 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c656:	2b10      	cmp	r3, #16
 800c658:	d00f      	beq.n	800c67a <lwip_netconn_do_connect+0x4a>
 800c65a:	2b20      	cmp	r3, #32
 800c65c:	f040 8087 	bne.w	800c76e <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6858      	ldr	r0, [r3, #4]
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	6899      	ldr	r1, [r3, #8]
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	899b      	ldrh	r3, [r3, #12]
 800c66e:	461a      	mov	r2, r3
 800c670:	f00c fd8e 	bl	8019190 <udp_connect>
 800c674:	4603      	mov	r3, r0
 800c676:	75fb      	strb	r3, [r7, #23]
        break;
 800c678:	e084      	b.n	800c784 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	785b      	ldrb	r3, [r3, #1]
 800c680:	2b03      	cmp	r3, #3
 800c682:	d102      	bne.n	800c68a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800c684:	23f7      	movs	r3, #247	; 0xf7
 800c686:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800c688:	e07b      	b.n	800c782 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	785b      	ldrb	r3, [r3, #1]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800c694:	23f6      	movs	r3, #246	; 0xf6
 800c696:	75fb      	strb	r3, [r7, #23]
        break;
 800c698:	e073      	b.n	800c782 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7ff fa18 	bl	800bad4 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6858      	ldr	r0, [r3, #4]
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	6899      	ldr	r1, [r3, #8]
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	899a      	ldrh	r2, [r3, #12]
 800c6b2:	4b38      	ldr	r3, [pc, #224]	; (800c794 <lwip_netconn_do_connect+0x164>)
 800c6b4:	f006 fb6c 	bl	8012d90 <tcp_connect>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800c6bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d15e      	bne.n	800c782 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	7f1b      	ldrb	r3, [r3, #28]
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	bf14      	ite	ne
 800c6d2:	2301      	movne	r3, #1
 800c6d4:	2300      	moveq	r3, #0
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2203      	movs	r2, #3
 800c6e0:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d009      	beq.n	800c6fc <lwip_netconn_do_connect+0xcc>
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	7f1a      	ldrb	r2, [r3, #28]
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f042 0204 	orr.w	r2, r2, #4
 800c6f6:	b2d2      	uxtb	r2, r2
 800c6f8:	771a      	strb	r2, [r3, #28]
 800c6fa:	e008      	b.n	800c70e <lwip_netconn_do_connect+0xde>
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	7f1a      	ldrb	r2, [r3, #28]
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f022 0204 	bic.w	r2, r2, #4
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800c714:	23fb      	movs	r3, #251	; 0xfb
 800c716:	75fb      	strb	r3, [r7, #23]
        break;
 800c718:	e033      	b.n	800c782 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	785b      	ldrb	r3, [r3, #1]
 800c728:	2b03      	cmp	r3, #3
 800c72a:	d006      	beq.n	800c73a <lwip_netconn_do_connect+0x10a>
 800c72c:	4b1a      	ldr	r3, [pc, #104]	; (800c798 <lwip_netconn_do_connect+0x168>)
 800c72e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800c732:	491a      	ldr	r1, [pc, #104]	; (800c79c <lwip_netconn_do_connect+0x16c>)
 800c734:	481a      	ldr	r0, [pc, #104]	; (800c7a0 <lwip_netconn_do_connect+0x170>)
 800c736:	f012 f9f9 	bl	801eb2c <iprintf>
              UNLOCK_TCPIP_CORE();
 800c73a:	481a      	ldr	r0, [pc, #104]	; (800c7a4 <lwip_netconn_do_connect+0x174>)
 800c73c:	f011 fb2d 	bl	801dd9a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	330c      	adds	r3, #12
 800c746:	2100      	movs	r1, #0
 800c748:	4618      	mov	r0, r3
 800c74a:	f011 fa86 	bl	801dc5a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800c74e:	4815      	ldr	r0, [pc, #84]	; (800c7a4 <lwip_netconn_do_connect+0x174>)
 800c750:	f011 fb14 	bl	801dd7c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	785b      	ldrb	r3, [r3, #1]
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	d116      	bne.n	800c78c <lwip_netconn_do_connect+0x15c>
 800c75e:	4b0e      	ldr	r3, [pc, #56]	; (800c798 <lwip_netconn_do_connect+0x168>)
 800c760:	f240 5274 	movw	r2, #1396	; 0x574
 800c764:	490d      	ldr	r1, [pc, #52]	; (800c79c <lwip_netconn_do_connect+0x16c>)
 800c766:	480e      	ldr	r0, [pc, #56]	; (800c7a0 <lwip_netconn_do_connect+0x170>)
 800c768:	f012 f9e0 	bl	801eb2c <iprintf>
              return;
 800c76c:	e00e      	b.n	800c78c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800c76e:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <lwip_netconn_do_connect+0x168>)
 800c770:	f240 527d 	movw	r2, #1405	; 0x57d
 800c774:	490c      	ldr	r1, [pc, #48]	; (800c7a8 <lwip_netconn_do_connect+0x178>)
 800c776:	480a      	ldr	r0, [pc, #40]	; (800c7a0 <lwip_netconn_do_connect+0x170>)
 800c778:	f012 f9d8 	bl	801eb2c <iprintf>
 800c77c:	23fa      	movs	r3, #250	; 0xfa
 800c77e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800c780:	e000      	b.n	800c784 <lwip_netconn_do_connect+0x154>
        break;
 800c782:	bf00      	nop
    }
  }
  msg->err = err;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	7dfa      	ldrb	r2, [r7, #23]
 800c788:	711a      	strb	r2, [r3, #4]
 800c78a:	e000      	b.n	800c78e <lwip_netconn_do_connect+0x15e>
              return;
 800c78c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	0800c511 	.word	0x0800c511
 800c798:	080229f4 	.word	0x080229f4
 800c79c:	08022db4 	.word	0x08022db4
 800c7a0:	08022a38 	.word	0x08022a38
 800c7a4:	200176d0 	.word	0x200176d0
 800c7a8:	08022e3c 	.word	0x08022e3c

0800c7ac <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7c2:	2b20      	cmp	r3, #32
 800c7c4:	d109      	bne.n	800c7da <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f00c fd4d 	bl	801926c <udp_disconnect>
    msg->err = ERR_OK;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c7d8:	e002      	b.n	800c7e0 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	22fa      	movs	r2, #250	; 0xfa
 800c7de:	711a      	strb	r2, [r3, #4]
}
 800c7e0:	bf00      	nop
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d07f      	beq.n	800c8fe <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c808:	2b10      	cmp	r3, #16
 800c80a:	d175      	bne.n	800c8f8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	785b      	ldrb	r3, [r3, #1]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d165      	bne.n	800c8e2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	7d1b      	ldrb	r3, [r3, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d002      	beq.n	800c828 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800c822:	23fa      	movs	r3, #250	; 0xfa
 800c824:	72fb      	strb	r3, [r7, #11]
 800c826:	e06c      	b.n	800c902 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800c828:	23ff      	movs	r3, #255	; 0xff
 800c82a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	f107 020b 	add.w	r2, r7, #11
 800c836:	7cf9      	ldrb	r1, [r7, #19]
 800c838:	4618      	mov	r0, r3
 800c83a:	f006 f90f 	bl	8012a5c <tcp_listen_with_backlog_and_err>
 800c83e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d05d      	beq.n	800c902 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	3310      	adds	r3, #16
 800c84c:	4618      	mov	r0, r3
 800c84e:	f011 f9c0 	bl	801dbd2 <sys_mbox_valid>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00b      	beq.n	800c870 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	3310      	adds	r3, #16
 800c85e:	4618      	mov	r0, r3
 800c860:	f011 f930 	bl	801dac4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	3310      	adds	r3, #16
 800c86a:	4618      	mov	r0, r3
 800c86c:	f011 f9c2 	bl	801dbf4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800c870:	2300      	movs	r3, #0
 800c872:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	3314      	adds	r3, #20
 800c87a:	4618      	mov	r0, r3
 800c87c:	f011 f9a9 	bl	801dbd2 <sys_mbox_valid>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d108      	bne.n	800c898 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3314      	adds	r3, #20
 800c88c:	2106      	movs	r1, #6
 800c88e:	4618      	mov	r0, r3
 800c890:	f011 f8fa 	bl	801da88 <sys_mbox_new>
 800c894:	4603      	mov	r3, r0
 800c896:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800c898:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d118      	bne.n	800c8d2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2202      	movs	r2, #2
 800c8a6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	685a      	ldr	r2, [r3, #4]
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	4610      	mov	r0, r2
 800c8be:	f007 f9af 	bl	8013c20 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	4912      	ldr	r1, [pc, #72]	; (800c914 <lwip_netconn_do_listen+0x12c>)
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f007 fa20 	bl	8013d10 <tcp_accept>
 800c8d0:	e017      	b.n	800c902 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800c8d2:	68f8      	ldr	r0, [r7, #12]
 800c8d4:	f005 feb8 	bl	8012648 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	605a      	str	r2, [r3, #4]
 800c8e0:	e00f      	b.n	800c902 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	785b      	ldrb	r3, [r3, #1]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d102      	bne.n	800c8f2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	72fb      	strb	r3, [r7, #11]
 800c8f0:	e007      	b.n	800c902 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800c8f2:	23f5      	movs	r3, #245	; 0xf5
 800c8f4:	72fb      	strb	r3, [r7, #11]
 800c8f6:	e004      	b.n	800c902 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800c8f8:	23f0      	movs	r3, #240	; 0xf0
 800c8fa:	72fb      	strb	r3, [r7, #11]
 800c8fc:	e001      	b.n	800c902 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800c8fe:	23f5      	movs	r3, #245	; 0xf5
 800c900:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800c902:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c90a:	bf00      	nop
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	0800bb25 	.word	0x0800bb25

0800c918 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe fd59 	bl	800b3e0 <netconn_err>
 800c92e:	4603      	mov	r3, r0
 800c930:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d134      	bne.n	800c9a4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d02d      	beq.n	800c9a0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c94e:	2b20      	cmp	r3, #32
 800c950:	d123      	bne.n	800c99a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10c      	bne.n	800c976 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4619      	mov	r1, r3
 800c96a:	4610      	mov	r0, r2
 800c96c:	f00c f99e 	bl	8018cac <udp_send>
 800c970:	4603      	mov	r3, r0
 800c972:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800c974:	e016      	b.n	800c9a4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	6858      	ldr	r0, [r3, #4]
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	6819      	ldr	r1, [r3, #0]
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	f103 0208 	add.w	r2, r3, #8
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	899b      	ldrh	r3, [r3, #12]
 800c990:	f00c f9c0 	bl	8018d14 <udp_sendto>
 800c994:	4603      	mov	r3, r0
 800c996:	73fb      	strb	r3, [r7, #15]
          break;
 800c998:	e004      	b.n	800c9a4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800c99a:	23f5      	movs	r3, #245	; 0xf5
 800c99c:	73fb      	strb	r3, [r7, #15]
          break;
 800c99e:	e001      	b.n	800c9a4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800c9a0:	23f5      	movs	r3, #245	; 0xf5
 800c9a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	7bfa      	ldrb	r2, [r7, #15]
 800c9a8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c9aa:	bf00      	nop
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b086      	sub	sp, #24
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d022      	beq.n	800ca14 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9d8:	2b10      	cmp	r3, #16
 800c9da:	d11b      	bne.n	800ca14 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9e8:	d202      	bcs.n	800c9f0 <lwip_netconn_do_recv+0x3e>
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	e001      	b.n	800c9f4 <lwip_netconn_do_recv+0x42>
 800c9f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9f4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	89fa      	ldrh	r2, [r7, #14]
 800c9fe:	4611      	mov	r1, r2
 800ca00:	4618      	mov	r0, r3
 800ca02:	f006 f92f 	bl	8012c64 <tcp_recved>
        remaining -= recved;
 800ca06:	89fb      	ldrh	r3, [r7, #14]
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1e6      	bne.n	800c9e2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ca14:	bf00      	nop
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d106      	bne.n	800ca40 <lwip_netconn_do_writemore+0x24>
 800ca32:	4b96      	ldr	r3, [pc, #600]	; (800cc8c <lwip_netconn_do_writemore+0x270>)
 800ca34:	f240 6273 	movw	r2, #1651	; 0x673
 800ca38:	4995      	ldr	r1, [pc, #596]	; (800cc90 <lwip_netconn_do_writemore+0x274>)
 800ca3a:	4896      	ldr	r0, [pc, #600]	; (800cc94 <lwip_netconn_do_writemore+0x278>)
 800ca3c:	f012 f876 	bl	801eb2c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	785b      	ldrb	r3, [r3, #1]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d006      	beq.n	800ca56 <lwip_netconn_do_writemore+0x3a>
 800ca48:	4b90      	ldr	r3, [pc, #576]	; (800cc8c <lwip_netconn_do_writemore+0x270>)
 800ca4a:	f240 6274 	movw	r2, #1652	; 0x674
 800ca4e:	4992      	ldr	r1, [pc, #584]	; (800cc98 <lwip_netconn_do_writemore+0x27c>)
 800ca50:	4890      	ldr	r0, [pc, #576]	; (800cc94 <lwip_netconn_do_writemore+0x278>)
 800ca52:	f012 f86b 	bl	801eb2c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d106      	bne.n	800ca6c <lwip_netconn_do_writemore+0x50>
 800ca5e:	4b8b      	ldr	r3, [pc, #556]	; (800cc8c <lwip_netconn_do_writemore+0x270>)
 800ca60:	f240 6275 	movw	r2, #1653	; 0x675
 800ca64:	498d      	ldr	r1, [pc, #564]	; (800cc9c <lwip_netconn_do_writemore+0x280>)
 800ca66:	488b      	ldr	r0, [pc, #556]	; (800cc94 <lwip_netconn_do_writemore+0x278>)
 800ca68:	f012 f860 	bl	801eb2c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d106      	bne.n	800ca82 <lwip_netconn_do_writemore+0x66>
 800ca74:	4b85      	ldr	r3, [pc, #532]	; (800cc8c <lwip_netconn_do_writemore+0x270>)
 800ca76:	f240 6276 	movw	r2, #1654	; 0x676
 800ca7a:	4989      	ldr	r1, [pc, #548]	; (800cca0 <lwip_netconn_do_writemore+0x284>)
 800ca7c:	4885      	ldr	r0, [pc, #532]	; (800cc94 <lwip_netconn_do_writemore+0x278>)
 800ca7e:	f012 f855 	bl	801eb2c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a1b      	ldr	r3, [r3, #32]
 800ca86:	699a      	ldr	r2, [r3, #24]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6a1b      	ldr	r3, [r3, #32]
 800ca8c:	695b      	ldr	r3, [r3, #20]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d306      	bcc.n	800caa0 <lwip_netconn_do_writemore+0x84>
 800ca92:	4b7e      	ldr	r3, [pc, #504]	; (800cc8c <lwip_netconn_do_writemore+0x270>)
 800ca94:	f240 6277 	movw	r2, #1655	; 0x677
 800ca98:	4982      	ldr	r1, [pc, #520]	; (800cca4 <lwip_netconn_do_writemore+0x288>)
 800ca9a:	487e      	ldr	r0, [pc, #504]	; (800cc94 <lwip_netconn_do_writemore+0x278>)
 800ca9c:	f012 f846 	bl	801eb2c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a1b      	ldr	r3, [r3, #32]
 800caa4:	899b      	ldrh	r3, [r3, #12]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d106      	bne.n	800cab8 <lwip_netconn_do_writemore+0x9c>
 800caaa:	4b78      	ldr	r3, [pc, #480]	; (800cc8c <lwip_netconn_do_writemore+0x270>)
 800caac:	f240 6279 	movw	r2, #1657	; 0x679
 800cab0:	497d      	ldr	r1, [pc, #500]	; (800cca8 <lwip_netconn_do_writemore+0x28c>)
 800cab2:	4878      	ldr	r0, [pc, #480]	; (800cc94 <lwip_netconn_do_writemore+0x278>)
 800cab4:	f012 f83a 	bl	801eb2c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a1b      	ldr	r3, [r3, #32]
 800cabc:	7f1b      	ldrb	r3, [r3, #28]
 800cabe:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	7f1b      	ldrb	r3, [r3, #28]
 800cac4:	f003 0302 	and.w	r3, r3, #2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d104      	bne.n	800cad6 <lwip_netconn_do_writemore+0xba>
 800cacc:	7ebb      	ldrb	r3, [r7, #26]
 800cace:	f003 0304 	and.w	r3, r3, #4
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <lwip_netconn_do_writemore+0xbe>
 800cad6:	2301      	movs	r3, #1
 800cad8:	e000      	b.n	800cadc <lwip_netconn_do_writemore+0xc0>
 800cada:	2300      	movs	r3, #0
 800cadc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1b      	ldr	r3, [r3, #32]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a1b      	ldr	r3, [r3, #32]
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	4413      	add	r3, r2
 800caee:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a1b      	ldr	r3, [r3, #32]
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6a1b      	ldr	r3, [r3, #32]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb08:	d307      	bcc.n	800cb1a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800cb0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb0e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800cb10:	7ebb      	ldrb	r3, [r7, #26]
 800cb12:	f043 0302 	orr.w	r3, r3, #2
 800cb16:	76bb      	strb	r3, [r7, #26]
 800cb18:	e001      	b.n	800cb1e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cb26:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800cb28:	89fa      	ldrh	r2, [r7, #14]
 800cb2a:	8bbb      	ldrh	r3, [r7, #28]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d216      	bcs.n	800cb5e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800cb30:	89fb      	ldrh	r3, [r7, #14]
 800cb32:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800cb34:	7e3b      	ldrb	r3, [r7, #24]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00d      	beq.n	800cb56 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800cb3a:	8bbb      	ldrh	r3, [r7, #28]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10e      	bne.n	800cb5e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a1b      	ldr	r3, [r3, #32]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d102      	bne.n	800cb50 <lwip_netconn_do_writemore+0x134>
 800cb4a:	f06f 0306 	mvn.w	r3, #6
 800cb4e:	e000      	b.n	800cb52 <lwip_netconn_do_writemore+0x136>
 800cb50:	2300      	movs	r3, #0
 800cb52:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800cb54:	e07d      	b.n	800cc52 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800cb56:	7ebb      	ldrb	r3, [r7, #26]
 800cb58:	f043 0302 	orr.w	r3, r3, #2
 800cb5c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a1b      	ldr	r3, [r3, #32]
 800cb62:	691a      	ldr	r2, [r3, #16]
 800cb64:	8bbb      	ldrh	r3, [r7, #28]
 800cb66:	441a      	add	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a1b      	ldr	r3, [r3, #32]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d906      	bls.n	800cb82 <lwip_netconn_do_writemore+0x166>
 800cb74:	4b45      	ldr	r3, [pc, #276]	; (800cc8c <lwip_netconn_do_writemore+0x270>)
 800cb76:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800cb7a:	494c      	ldr	r1, [pc, #304]	; (800ccac <lwip_netconn_do_writemore+0x290>)
 800cb7c:	4845      	ldr	r0, [pc, #276]	; (800cc94 <lwip_netconn_do_writemore+0x278>)
 800cb7e:	f011 ffd5 	bl	801eb2c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800cb82:	8bbb      	ldrh	r3, [r7, #28]
 800cb84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d103      	bne.n	800cb94 <lwip_netconn_do_writemore+0x178>
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb92:	d209      	bcs.n	800cba8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800cb98:	8bba      	ldrh	r2, [r7, #28]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d10b      	bne.n	800cbb6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	899b      	ldrh	r3, [r3, #12]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d906      	bls.n	800cbb6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800cbac:	7ebb      	ldrb	r3, [r7, #26]
 800cbae:	f043 0302 	orr.w	r3, r3, #2
 800cbb2:	76bb      	strb	r3, [r7, #26]
 800cbb4:	e001      	b.n	800cbba <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6858      	ldr	r0, [r3, #4]
 800cbbe:	7ebb      	ldrb	r3, [r7, #26]
 800cbc0:	8bba      	ldrh	r2, [r7, #28]
 800cbc2:	6979      	ldr	r1, [r7, #20]
 800cbc4:	f009 ff6c 	bl	8016aa0 <tcp_write>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800cbcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d12c      	bne.n	800cc2e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	6999      	ldr	r1, [r3, #24]
 800cbda:	8bba      	ldrh	r2, [r7, #28]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a1b      	ldr	r3, [r3, #32]
 800cbe0:	440a      	add	r2, r1
 800cbe2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
 800cbe8:	6919      	ldr	r1, [r3, #16]
 800cbea:	8bba      	ldrh	r2, [r7, #28]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	440a      	add	r2, r1
 800cbf2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a1b      	ldr	r3, [r3, #32]
 800cbf8:	691a      	ldr	r2, [r3, #16]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6a1b      	ldr	r3, [r3, #32]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d113      	bne.n	800cc2e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	899a      	ldrh	r2, [r3, #12]
 800cc0c:	3a01      	subs	r2, #1
 800cc0e:	b292      	uxth	r2, r2
 800cc10:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a1b      	ldr	r3, [r3, #32]
 800cc16:	899b      	ldrh	r3, [r3, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d008      	beq.n	800cc2e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	689a      	ldr	r2, [r3, #8]
 800cc22:	3208      	adds	r2, #8
 800cc24:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800cc2e:	7e7b      	ldrb	r3, [r7, #25]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d004      	beq.n	800cc3e <lwip_netconn_do_writemore+0x222>
 800cc34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f43f af50 	beq.w	800cade <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800cc3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d004      	beq.n	800cc50 <lwip_netconn_do_writemore+0x234>
 800cc46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc4e:	d146      	bne.n	800ccde <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800cc50:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800cc52:	7e3b      	ldrb	r3, [r7, #24]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d02b      	beq.n	800ccb0 <lwip_netconn_do_writemore+0x294>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a1b      	ldr	r3, [r3, #32]
 800cc5c:	699a      	ldr	r2, [r3, #24]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	695b      	ldr	r3, [r3, #20]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d223      	bcs.n	800ccb0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d005      	beq.n	800cc7c <lwip_netconn_do_writemore+0x260>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc74:	2200      	movs	r2, #0
 800cc76:	2103      	movs	r1, #3
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	7f1b      	ldrb	r3, [r3, #28]
 800cc80:	f043 0310 	orr.w	r3, r3, #16
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	771a      	strb	r2, [r3, #28]
 800cc8a:	e028      	b.n	800ccde <lwip_netconn_do_writemore+0x2c2>
 800cc8c:	080229f4 	.word	0x080229f4
 800cc90:	08022b4c 	.word	0x08022b4c
 800cc94:	08022a38 	.word	0x08022a38
 800cc98:	08022e54 	.word	0x08022e54
 800cc9c:	08022b5c 	.word	0x08022b5c
 800cca0:	08022e74 	.word	0x08022e74
 800cca4:	08022e8c 	.word	0x08022e8c
 800cca8:	08022ecc 	.word	0x08022ecc
 800ccac:	08022ef4 	.word	0x08022ef4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ccb8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ccbc:	d305      	bcc.n	800ccca <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ccc6:	2b04      	cmp	r3, #4
 800ccc8:	d909      	bls.n	800ccde <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d005      	beq.n	800ccde <lwip_netconn_do_writemore+0x2c2>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2103      	movs	r1, #3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ccde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d11d      	bne.n	800cd22 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6a1b      	ldr	r3, [r3, #32]
 800ccea:	699a      	ldr	r2, [r3, #24]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a1b      	ldr	r3, [r3, #32]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d002      	beq.n	800ccfc <lwip_netconn_do_writemore+0x2e0>
 800ccf6:	7e3b      	ldrb	r3, [r7, #24]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d001      	beq.n	800cd00 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f00a fd13 	bl	8017730 <tcp_output>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800cd0e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800cd12:	f113 0f04 	cmn.w	r3, #4
 800cd16:	d12c      	bne.n	800cd72 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cd18:	7b3b      	ldrb	r3, [r7, #12]
 800cd1a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	76fb      	strb	r3, [r7, #27]
 800cd20:	e027      	b.n	800cd72 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800cd22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2a:	d120      	bne.n	800cd6e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f00a fcfd 	bl	8017730 <tcp_output>
 800cd36:	4603      	mov	r3, r0
 800cd38:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800cd3a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800cd3e:	f113 0f04 	cmn.w	r3, #4
 800cd42:	d104      	bne.n	800cd4e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800cd44:	7b7b      	ldrb	r3, [r7, #13]
 800cd46:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	76fb      	strb	r3, [r7, #27]
 800cd4c:	e011      	b.n	800cd72 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800cd4e:	7e3b      	ldrb	r3, [r7, #24]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00e      	beq.n	800cd72 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a1b      	ldr	r3, [r3, #32]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d102      	bne.n	800cd64 <lwip_netconn_do_writemore+0x348>
 800cd5e:	f06f 0306 	mvn.w	r3, #6
 800cd62:	e000      	b.n	800cd66 <lwip_netconn_do_writemore+0x34a>
 800cd64:	2300      	movs	r3, #0
 800cd66:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	76fb      	strb	r3, [r7, #27]
 800cd6c:	e001      	b.n	800cd72 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800cd72:	7efb      	ldrb	r3, [r7, #27]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d015      	beq.n	800cda4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6a1b      	ldr	r3, [r3, #32]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	330c      	adds	r3, #12
 800cd80:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a1b      	ldr	r3, [r3, #32]
 800cd86:	7ffa      	ldrb	r2, [r7, #31]
 800cd88:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cd96:	78fb      	ldrb	r3, [r7, #3]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d006      	beq.n	800cdaa <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800cd9c:	68b8      	ldr	r0, [r7, #8]
 800cd9e:	f010 ff8d 	bl	801dcbc <sys_sem_signal>
 800cda2:	e002      	b.n	800cdaa <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800cda4:	f04f 33ff 	mov.w	r3, #4294967295
 800cda8:	e000      	b.n	800cdac <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3720      	adds	r7, #32
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7fe fb0b 	bl	800b3e0 <netconn_err>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cdce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d166      	bne.n	800cea4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cde0:	2b10      	cmp	r3, #16
 800cde2:	d15d      	bne.n	800cea0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	785b      	ldrb	r3, [r3, #1]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d002      	beq.n	800cdf4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800cdee:	23fb      	movs	r3, #251	; 0xfb
 800cdf0:	73fb      	strb	r3, [r7, #15]
 800cdf2:	e057      	b.n	800cea4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d04d      	beq.n	800ce9a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2201      	movs	r2, #1
 800ce04:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6a1b      	ldr	r3, [r3, #32]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d006      	beq.n	800ce1e <lwip_netconn_do_write+0x6a>
 800ce10:	4b28      	ldr	r3, [pc, #160]	; (800ceb4 <lwip_netconn_do_write+0x100>)
 800ce12:	f240 7223 	movw	r2, #1827	; 0x723
 800ce16:	4928      	ldr	r1, [pc, #160]	; (800ceb8 <lwip_netconn_do_write+0x104>)
 800ce18:	4828      	ldr	r0, [pc, #160]	; (800cebc <lwip_netconn_do_write+0x108>)
 800ce1a:	f011 fe87 	bl	801eb2c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d106      	bne.n	800ce34 <lwip_netconn_do_write+0x80>
 800ce26:	4b23      	ldr	r3, [pc, #140]	; (800ceb4 <lwip_netconn_do_write+0x100>)
 800ce28:	f240 7224 	movw	r2, #1828	; 0x724
 800ce2c:	4924      	ldr	r1, [pc, #144]	; (800cec0 <lwip_netconn_do_write+0x10c>)
 800ce2e:	4823      	ldr	r0, [pc, #140]	; (800cebc <lwip_netconn_do_write+0x108>)
 800ce30:	f011 fe7c 	bl	801eb2c <iprintf>
        msg->conn->current_msg = msg;
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2100      	movs	r1, #0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7ff fdea 	bl	800ca1c <lwip_netconn_do_writemore>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d02e      	beq.n	800ceac <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	785b      	ldrb	r3, [r3, #1]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d006      	beq.n	800ce66 <lwip_netconn_do_write+0xb2>
 800ce58:	4b16      	ldr	r3, [pc, #88]	; (800ceb4 <lwip_netconn_do_write+0x100>)
 800ce5a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ce5e:	4919      	ldr	r1, [pc, #100]	; (800cec4 <lwip_netconn_do_write+0x110>)
 800ce60:	4816      	ldr	r0, [pc, #88]	; (800cebc <lwip_netconn_do_write+0x108>)
 800ce62:	f011 fe63 	bl	801eb2c <iprintf>
          UNLOCK_TCPIP_CORE();
 800ce66:	4818      	ldr	r0, [pc, #96]	; (800cec8 <lwip_netconn_do_write+0x114>)
 800ce68:	f010 ff97 	bl	801dd9a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	330c      	adds	r3, #12
 800ce72:	2100      	movs	r1, #0
 800ce74:	4618      	mov	r0, r3
 800ce76:	f010 fef0 	bl	801dc5a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ce7a:	4813      	ldr	r0, [pc, #76]	; (800cec8 <lwip_netconn_do_write+0x114>)
 800ce7c:	f010 ff7e 	bl	801dd7c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	785b      	ldrb	r3, [r3, #1]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d110      	bne.n	800ceac <lwip_netconn_do_write+0xf8>
 800ce8a:	4b0a      	ldr	r3, [pc, #40]	; (800ceb4 <lwip_netconn_do_write+0x100>)
 800ce8c:	f240 722c 	movw	r2, #1836	; 0x72c
 800ce90:	490c      	ldr	r1, [pc, #48]	; (800cec4 <lwip_netconn_do_write+0x110>)
 800ce92:	480a      	ldr	r0, [pc, #40]	; (800cebc <lwip_netconn_do_write+0x108>)
 800ce94:	f011 fe4a 	bl	801eb2c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ce98:	e008      	b.n	800ceac <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ce9a:	23f5      	movs	r3, #245	; 0xf5
 800ce9c:	73fb      	strb	r3, [r7, #15]
 800ce9e:	e001      	b.n	800cea4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800cea0:	23fa      	movs	r3, #250	; 0xfa
 800cea2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	7bfa      	ldrb	r2, [r7, #15]
 800cea8:	711a      	strb	r2, [r3, #4]
 800ceaa:	e000      	b.n	800ceae <lwip_netconn_do_write+0xfa>
        return;
 800ceac:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	080229f4 	.word	0x080229f4
 800ceb8:	08022d98 	.word	0x08022d98
 800cebc:	08022a38 	.word	0x08022a38
 800cec0:	08022f20 	.word	0x08022f20
 800cec4:	08022db4 	.word	0x08022db4
 800cec8:	200176d0 	.word	0x200176d0

0800cecc <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d06b      	beq.n	800cfba <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	7c1b      	ldrb	r3, [r3, #16]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d007      	beq.n	800cefa <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	685a      	ldr	r2, [r3, #4]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	6812      	ldr	r2, [r2, #0]
 800cef6:	601a      	str	r2, [r3, #0]
 800cef8:	e006      	b.n	800cf08 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	685a      	ldr	r2, [r3, #4]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	6852      	ldr	r2, [r2, #4]
 800cf06:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf18:	2b10      	cmp	r3, #16
 800cf1a:	d021      	beq.n	800cf60 <lwip_netconn_do_getaddr+0x94>
 800cf1c:	2b20      	cmp	r3, #32
 800cf1e:	d144      	bne.n	800cfaa <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	7c1b      	ldrb	r3, [r3, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d007      	beq.n	800cf38 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	8a52      	ldrh	r2, [r2, #18]
 800cf34:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800cf36:	e044      	b.n	800cfc2 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	7c1b      	ldrb	r3, [r3, #16]
 800cf40:	f003 0304 	and.w	r3, r3, #4
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	22f5      	movs	r2, #245	; 0xf5
 800cf4c:	711a      	strb	r2, [r3, #4]
        break;
 800cf4e:	e038      	b.n	800cfc2 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	685a      	ldr	r2, [r3, #4]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	8a92      	ldrh	r2, [r2, #20]
 800cf5c:	801a      	strh	r2, [r3, #0]
        break;
 800cf5e:	e030      	b.n	800cfc2 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	7c1b      	ldrb	r3, [r3, #16]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d10f      	bne.n	800cf88 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d005      	beq.n	800cf80 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	7d1b      	ldrb	r3, [r3, #20]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d103      	bne.n	800cf88 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	22f5      	movs	r2, #245	; 0xf5
 800cf84:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800cf86:	e01c      	b.n	800cfc2 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	7c1b      	ldrb	r3, [r3, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d004      	beq.n	800cf9a <lwip_netconn_do_getaddr+0xce>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	8adb      	ldrh	r3, [r3, #22]
 800cf98:	e003      	b.n	800cfa2 <lwip_netconn_do_getaddr+0xd6>
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	8b1b      	ldrh	r3, [r3, #24]
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	68d2      	ldr	r2, [r2, #12]
 800cfa6:	8013      	strh	r3, [r2, #0]
        break;
 800cfa8:	e00b      	b.n	800cfc2 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800cfaa:	4b08      	ldr	r3, [pc, #32]	; (800cfcc <lwip_netconn_do_getaddr+0x100>)
 800cfac:	f240 727d 	movw	r2, #1917	; 0x77d
 800cfb0:	4907      	ldr	r1, [pc, #28]	; (800cfd0 <lwip_netconn_do_getaddr+0x104>)
 800cfb2:	4808      	ldr	r0, [pc, #32]	; (800cfd4 <lwip_netconn_do_getaddr+0x108>)
 800cfb4:	f011 fdba 	bl	801eb2c <iprintf>
        break;
 800cfb8:	e003      	b.n	800cfc2 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	22f5      	movs	r2, #245	; 0xf5
 800cfbe:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cfc0:	bf00      	nop
 800cfc2:	bf00      	nop
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	080229f4 	.word	0x080229f4
 800cfd0:	08022f34 	.word	0x08022f34
 800cfd4:	08022a38 	.word	0x08022a38

0800cfd8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	785b      	ldrb	r3, [r3, #1]
 800cfea:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d069      	beq.n	800d0ca <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800d000:	2b10      	cmp	r3, #16
 800d002:	d162      	bne.n	800d0ca <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d008:	2b03      	cmp	r3, #3
 800d00a:	d002      	beq.n	800d012 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d00c:	7afb      	ldrb	r3, [r7, #11]
 800d00e:	2b02      	cmp	r3, #2
 800d010:	d05b      	beq.n	800d0ca <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800d012:	7afb      	ldrb	r3, [r7, #11]
 800d014:	2b03      	cmp	r3, #3
 800d016:	d103      	bne.n	800d020 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	22f5      	movs	r2, #245	; 0xf5
 800d01c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d01e:	e059      	b.n	800d0d4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800d020:	7afb      	ldrb	r3, [r7, #11]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d103      	bne.n	800d02e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	22fb      	movs	r2, #251	; 0xfb
 800d02a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d02c:	e052      	b.n	800d0d4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	7a1b      	ldrb	r3, [r3, #8]
 800d032:	f003 0301 	and.w	r3, r3, #1
 800d036:	2b00      	cmp	r3, #0
 800d038:	d004      	beq.n	800d044 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe ff64 	bl	800bf0c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d006      	beq.n	800d05c <lwip_netconn_do_close+0x84>
 800d04e:	4b23      	ldr	r3, [pc, #140]	; (800d0dc <lwip_netconn_do_close+0x104>)
 800d050:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800d054:	4922      	ldr	r1, [pc, #136]	; (800d0e0 <lwip_netconn_do_close+0x108>)
 800d056:	4823      	ldr	r0, [pc, #140]	; (800d0e4 <lwip_netconn_do_close+0x10c>)
 800d058:	f011 fd68 	bl	801eb2c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2204      	movs	r2, #4
 800d062:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2100      	movs	r1, #0
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe ffc8 	bl	800c008 <lwip_netconn_do_close_internal>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d029      	beq.n	800d0d2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	785b      	ldrb	r3, [r3, #1]
 800d084:	2b04      	cmp	r3, #4
 800d086:	d006      	beq.n	800d096 <lwip_netconn_do_close+0xbe>
 800d088:	4b14      	ldr	r3, [pc, #80]	; (800d0dc <lwip_netconn_do_close+0x104>)
 800d08a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800d08e:	4916      	ldr	r1, [pc, #88]	; (800d0e8 <lwip_netconn_do_close+0x110>)
 800d090:	4814      	ldr	r0, [pc, #80]	; (800d0e4 <lwip_netconn_do_close+0x10c>)
 800d092:	f011 fd4b 	bl	801eb2c <iprintf>
        UNLOCK_TCPIP_CORE();
 800d096:	4815      	ldr	r0, [pc, #84]	; (800d0ec <lwip_netconn_do_close+0x114>)
 800d098:	f010 fe7f 	bl	801dd9a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	330c      	adds	r3, #12
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f010 fdd8 	bl	801dc5a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800d0aa:	4810      	ldr	r0, [pc, #64]	; (800d0ec <lwip_netconn_do_close+0x114>)
 800d0ac:	f010 fe66 	bl	801dd7c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	785b      	ldrb	r3, [r3, #1]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00b      	beq.n	800d0d2 <lwip_netconn_do_close+0xfa>
 800d0ba:	4b08      	ldr	r3, [pc, #32]	; (800d0dc <lwip_netconn_do_close+0x104>)
 800d0bc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800d0c0:	4909      	ldr	r1, [pc, #36]	; (800d0e8 <lwip_netconn_do_close+0x110>)
 800d0c2:	4808      	ldr	r0, [pc, #32]	; (800d0e4 <lwip_netconn_do_close+0x10c>)
 800d0c4:	f011 fd32 	bl	801eb2c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800d0c8:	e003      	b.n	800d0d2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	22f5      	movs	r2, #245	; 0xf5
 800d0ce:	711a      	strb	r2, [r3, #4]
 800d0d0:	e000      	b.n	800d0d4 <lwip_netconn_do_close+0xfc>
      return;
 800d0d2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	080229f4 	.word	0x080229f4
 800d0e0:	08022d98 	.word	0x08022d98
 800d0e4:	08022a38 	.word	0x08022a38
 800d0e8:	08022db4 	.word	0x08022db4
 800d0ec:	200176d0 	.word	0x200176d0

0800d0f0 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d104      	bne.n	800d110 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	22fa      	movs	r2, #250	; 0xfa
 800d10c:	701a      	strb	r2, [r3, #0]
 800d10e:	e008      	b.n	800d122 <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	6812      	ldr	r2, [r2, #0]
 800d120:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	4618      	mov	r0, r3
 800d128:	f010 fdc8 	bl	801dcbc <sys_sem_signal>
}
 800d12c:	bf00      	nop
 800d12e:	3718      	adds	r7, #24
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 800d134:	b590      	push	{r4, r7, lr}
 800d136:	b087      	sub	sp, #28
 800d138:	af02      	add	r7, sp, #8
 800d13a:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 800d140:	2300      	movs	r3, #0
 800d142:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6818      	ldr	r0, [r3, #0]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6859      	ldr	r1, [r3, #4]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	68dc      	ldr	r4, [r3, #12]
 800d150:	7afb      	ldrb	r3, [r7, #11]
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4a15      	ldr	r2, [pc, #84]	; (800d1ac <lwip_netconn_do_gethostbyname+0x78>)
 800d158:	f003 f83e 	bl	80101d8 <dns_gethostbyname_addrtype>
 800d15c:	4603      	mov	r3, r0
 800d15e:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	f993 3000 	ldrsb.w	r3, [r3]
 800d168:	f113 0f05 	cmn.w	r3, #5
 800d16c:	d119      	bne.n	800d1a2 <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 800d16e:	4810      	ldr	r0, [pc, #64]	; (800d1b0 <lwip_netconn_do_gethostbyname+0x7c>)
 800d170:	f010 fe13 	bl	801dd9a <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	2100      	movs	r1, #0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f010 fd6d 	bl	801dc5a <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 800d180:	480b      	ldr	r0, [pc, #44]	; (800d1b0 <lwip_netconn_do_gethostbyname+0x7c>)
 800d182:	f010 fdfb 	bl	801dd7c <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	f993 3000 	ldrsb.w	r3, [r3]
 800d18e:	f113 0f05 	cmn.w	r3, #5
 800d192:	d106      	bne.n	800d1a2 <lwip_netconn_do_gethostbyname+0x6e>
 800d194:	4b07      	ldr	r3, [pc, #28]	; (800d1b4 <lwip_netconn_do_gethostbyname+0x80>)
 800d196:	f640 0271 	movw	r2, #2161	; 0x871
 800d19a:	4907      	ldr	r1, [pc, #28]	; (800d1b8 <lwip_netconn_do_gethostbyname+0x84>)
 800d19c:	4807      	ldr	r0, [pc, #28]	; (800d1bc <lwip_netconn_do_gethostbyname+0x88>)
 800d19e:	f011 fcc5 	bl	801eb2c <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d1a2:	bf00      	nop
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd90      	pop	{r4, r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	0800d0f1 	.word	0x0800d0f1
 800d1b0:	200176d0 	.word	0x200176d0
 800d1b4:	080229f4 	.word	0x080229f4
 800d1b8:	08022f4c 	.word	0x08022f4c
 800d1bc:	08022a38 	.word	0x08022a38

0800d1c0 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800d1ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	dc04      	bgt.n	800d1dc <err_to_errno+0x1c>
 800d1d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1d6:	f113 0f10 	cmn.w	r3, #16
 800d1da:	da01      	bge.n	800d1e0 <err_to_errno+0x20>
    return EIO;
 800d1dc:	2305      	movs	r3, #5
 800d1de:	e005      	b.n	800d1ec <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800d1e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1e4:	425b      	negs	r3, r3
 800d1e6:	4a04      	ldr	r2, [pc, #16]	; (800d1f8 <err_to_errno+0x38>)
 800d1e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	080265ec 	.word	0x080265ec

0800d1fc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d013      	beq.n	800d232 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00b      	beq.n	800d22a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4618      	mov	r0, r3
 800d218:	f004 fbe0 	bl	80119dc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	605a      	str	r2, [r3, #4]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	685a      	ldr	r2, [r3, #4]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800d22a:	6879      	ldr	r1, [r7, #4]
 800d22c:	2006      	movs	r0, #6
 800d22e:	f003 fcf3 	bl	8010c18 <memp_free>
  }
}
 800d232:	bf00      	nop
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d106      	bne.n	800d258 <netbuf_free+0x1c>
 800d24a:	4b0d      	ldr	r3, [pc, #52]	; (800d280 <netbuf_free+0x44>)
 800d24c:	2281      	movs	r2, #129	; 0x81
 800d24e:	490d      	ldr	r1, [pc, #52]	; (800d284 <netbuf_free+0x48>)
 800d250:	480d      	ldr	r0, [pc, #52]	; (800d288 <netbuf_free+0x4c>)
 800d252:	f011 fc6b 	bl	801eb2c <iprintf>
 800d256:	e00f      	b.n	800d278 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d004      	beq.n	800d26a <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f004 fbb9 	bl	80119dc <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	605a      	str	r2, [r3, #4]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	08022f74 	.word	0x08022f74
 800d284:	08023010 	.word	0x08023010
 800d288:	08022fc4 	.word	0x08022fc4

0800d28c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	4613      	mov	r3, r2
 800d298:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d108      	bne.n	800d2b2 <netbuf_ref+0x26>
 800d2a0:	4b1c      	ldr	r3, [pc, #112]	; (800d314 <netbuf_ref+0x88>)
 800d2a2:	2299      	movs	r2, #153	; 0x99
 800d2a4:	491c      	ldr	r1, [pc, #112]	; (800d318 <netbuf_ref+0x8c>)
 800d2a6:	481d      	ldr	r0, [pc, #116]	; (800d31c <netbuf_ref+0x90>)
 800d2a8:	f011 fc40 	bl	801eb2c <iprintf>
 800d2ac:	f06f 030f 	mvn.w	r3, #15
 800d2b0:	e02b      	b.n	800d30a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d004      	beq.n	800d2c4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f004 fb8c 	bl	80119dc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800d2c4:	2241      	movs	r2, #65	; 0x41
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	2036      	movs	r0, #54	; 0x36
 800d2ca:	f004 f871 	bl	80113b0 <pbuf_alloc>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d105      	bne.n	800d2e8 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800d2e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2e6:	e010      	b.n	800d30a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68ba      	ldr	r2, [r7, #8]
 800d2ee:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	88fa      	ldrh	r2, [r7, #6]
 800d2f6:	811a      	strh	r2, [r3, #8]
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	6812      	ldr	r2, [r2, #0]
 800d2fc:	891b      	ldrh	r3, [r3, #8]
 800d2fe:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	08022f74 	.word	0x08022f74
 800d318:	0802302c 	.word	0x0802302c
 800d31c:	08022fc4 	.word	0x08022fc4

0800d320 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent *
lwip_gethostbyname(const char *name)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
 800d328:	f107 0308 	add.w	r3, r7, #8
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7fe f872 	bl	800b418 <netconn_gethostbyname>
 800d334:	4603      	mov	r3, r0
 800d336:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d004      	beq.n	800d34a <lwip_gethostbyname+0x2a>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
 800d340:	4b17      	ldr	r3, [pc, #92]	; (800d3a0 <lwip_gethostbyname+0x80>)
 800d342:	22d2      	movs	r2, #210	; 0xd2
 800d344:	601a      	str	r2, [r3, #0]
    return NULL;
 800d346:	2300      	movs	r3, #0
 800d348:	e025      	b.n	800d396 <lwip_gethostbyname+0x76>
  }

  /* fill hostent */
  s_hostent_addr = addr;
 800d34a:	4a16      	ldr	r2, [pc, #88]	; (800d3a4 <lwip_gethostbyname+0x84>)
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	6013      	str	r3, [r2, #0]
  s_phostent_addr[0] = &s_hostent_addr;
 800d350:	4b15      	ldr	r3, [pc, #84]	; (800d3a8 <lwip_gethostbyname+0x88>)
 800d352:	4a14      	ldr	r2, [pc, #80]	; (800d3a4 <lwip_gethostbyname+0x84>)
 800d354:	601a      	str	r2, [r3, #0]
  s_phostent_addr[1] = NULL;
 800d356:	4b14      	ldr	r3, [pc, #80]	; (800d3a8 <lwip_gethostbyname+0x88>)
 800d358:	2200      	movs	r2, #0
 800d35a:	605a      	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
 800d35c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d360:	6879      	ldr	r1, [r7, #4]
 800d362:	4812      	ldr	r0, [pc, #72]	; (800d3ac <lwip_gethostbyname+0x8c>)
 800d364:	f011 fe14 	bl	801ef90 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
 800d368:	4b10      	ldr	r3, [pc, #64]	; (800d3ac <lwip_gethostbyname+0x8c>)
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
 800d370:	4b0f      	ldr	r3, [pc, #60]	; (800d3b0 <lwip_gethostbyname+0x90>)
 800d372:	4a0e      	ldr	r2, [pc, #56]	; (800d3ac <lwip_gethostbyname+0x8c>)
 800d374:	601a      	str	r2, [r3, #0]
  s_aliases = NULL;
 800d376:	4b0f      	ldr	r3, [pc, #60]	; (800d3b4 <lwip_gethostbyname+0x94>)
 800d378:	2200      	movs	r2, #0
 800d37a:	601a      	str	r2, [r3, #0]
  s_hostent.h_aliases = &s_aliases;
 800d37c:	4b0c      	ldr	r3, [pc, #48]	; (800d3b0 <lwip_gethostbyname+0x90>)
 800d37e:	4a0d      	ldr	r2, [pc, #52]	; (800d3b4 <lwip_gethostbyname+0x94>)
 800d380:	605a      	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
 800d382:	4b0b      	ldr	r3, [pc, #44]	; (800d3b0 <lwip_gethostbyname+0x90>)
 800d384:	2202      	movs	r2, #2
 800d386:	609a      	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
 800d388:	4b09      	ldr	r3, [pc, #36]	; (800d3b0 <lwip_gethostbyname+0x90>)
 800d38a:	2204      	movs	r2, #4
 800d38c:	60da      	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char **)&s_phostent_addr;
 800d38e:	4b08      	ldr	r3, [pc, #32]	; (800d3b0 <lwip_gethostbyname+0x90>)
 800d390:	4a05      	ldr	r2, [pc, #20]	; (800d3a8 <lwip_gethostbyname+0x88>)
 800d392:	611a      	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
 800d394:	4b06      	ldr	r3, [pc, #24]	; (800d3b0 <lwip_gethostbyname+0x90>)
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
 800d396:	4618      	mov	r0, r3
 800d398:	3710      	adds	r7, #16
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	200176cc 	.word	0x200176cc
 800d3a4:	20013d0c 	.word	0x20013d0c
 800d3a8:	20013d10 	.word	0x20013d10
 800d3ac:	20013d18 	.word	0x20013d18
 800d3b0:	20013e1c 	.word	0x20013e1c
 800d3b4:	20013e30 	.word	0x20013e30

0800d3b8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	db02      	blt.n	800d3d0 <tryget_socket_unconn_nouse+0x18>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	dd01      	ble.n	800d3d4 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	e003      	b.n	800d3dc <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	4a03      	ldr	r2, [pc, #12]	; (800d3e8 <tryget_socket_unconn_nouse+0x30>)
 800d3da:	4413      	add	r3, r2
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3714      	adds	r7, #20
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	20013e34 	.word	0x20013e34

0800d3ec <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f7ff ffdf 	bl	800d3b8 <tryget_socket_unconn_nouse>
 800d3fa:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b084      	sub	sp, #16
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7ff ffd2 	bl	800d3b8 <tryget_socket_unconn_nouse>
 800d414:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 800d416:	68fb      	ldr	r3, [r7, #12]
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff ffdf 	bl	800d3ec <tryget_socket_unconn>
 800d42e:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d005      	beq.n	800d442 <tryget_socket+0x22>
    if (sock->conn) {
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <tryget_socket+0x22>
      return sock;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	e000      	b.n	800d444 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f7ff ffe3 	bl	800d420 <tryget_socket>
 800d45a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d104      	bne.n	800d46c <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800d462:	4b05      	ldr	r3, [pc, #20]	; (800d478 <get_socket+0x2c>)
 800d464:	2209      	movs	r2, #9
 800d466:	601a      	str	r2, [r3, #0]
    return NULL;
 800d468:	2300      	movs	r3, #0
 800d46a:	e000      	b.n	800d46e <get_socket+0x22>
  }
  return sock;
 800d46c:	68fb      	ldr	r3, [r7, #12]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	2001b118 	.word	0x2001b118

0800d47c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800d486:	2300      	movs	r3, #0
 800d488:	60fb      	str	r3, [r7, #12]
 800d48a:	e052      	b.n	800d532 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800d48c:	f010 fcb0 	bl	801ddf0 <sys_arch_protect>
 800d490:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800d492:	4a2c      	ldr	r2, [pc, #176]	; (800d544 <alloc_socket+0xc8>)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	011b      	lsls	r3, r3, #4
 800d498:	4413      	add	r3, r2
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d142      	bne.n	800d526 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800d4a0:	4a28      	ldr	r2, [pc, #160]	; (800d544 <alloc_socket+0xc8>)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	011b      	lsls	r3, r3, #4
 800d4a6:	4413      	add	r3, r2
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800d4ac:	68b8      	ldr	r0, [r7, #8]
 800d4ae:	f010 fcad 	bl	801de0c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800d4b2:	4a24      	ldr	r2, [pc, #144]	; (800d544 <alloc_socket+0xc8>)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	4413      	add	r3, r2
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	2200      	movs	r2, #0
 800d4be:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800d4c0:	4a20      	ldr	r2, [pc, #128]	; (800d544 <alloc_socket+0xc8>)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	011b      	lsls	r3, r3, #4
 800d4c6:	4413      	add	r3, r2
 800d4c8:	330e      	adds	r3, #14
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d006      	beq.n	800d4de <alloc_socket+0x62>
 800d4d0:	4b1d      	ldr	r3, [pc, #116]	; (800d548 <alloc_socket+0xcc>)
 800d4d2:	f240 220e 	movw	r2, #526	; 0x20e
 800d4d6:	491d      	ldr	r1, [pc, #116]	; (800d54c <alloc_socket+0xd0>)
 800d4d8:	481d      	ldr	r0, [pc, #116]	; (800d550 <alloc_socket+0xd4>)
 800d4da:	f011 fb27 	bl	801eb2c <iprintf>
      sockets[i].rcvevent   = 0;
 800d4de:	4a19      	ldr	r2, [pc, #100]	; (800d544 <alloc_socket+0xc8>)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	011b      	lsls	r3, r3, #4
 800d4e4:	4413      	add	r3, r2
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4f4:	2b10      	cmp	r3, #16
 800d4f6:	d102      	bne.n	800d4fe <alloc_socket+0x82>
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <alloc_socket+0x86>
 800d4fe:	2301      	movs	r3, #1
 800d500:	e000      	b.n	800d504 <alloc_socket+0x88>
 800d502:	2300      	movs	r3, #0
 800d504:	b299      	uxth	r1, r3
 800d506:	4a0f      	ldr	r2, [pc, #60]	; (800d544 <alloc_socket+0xc8>)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	011b      	lsls	r3, r3, #4
 800d50c:	4413      	add	r3, r2
 800d50e:	330a      	adds	r3, #10
 800d510:	460a      	mov	r2, r1
 800d512:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800d514:	4a0b      	ldr	r2, [pc, #44]	; (800d544 <alloc_socket+0xc8>)
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	011b      	lsls	r3, r3, #4
 800d51a:	4413      	add	r3, r2
 800d51c:	330c      	adds	r3, #12
 800d51e:	2200      	movs	r2, #0
 800d520:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	e00a      	b.n	800d53c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800d526:	68b8      	ldr	r0, [r7, #8]
 800d528:	f010 fc70 	bl	801de0c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	3301      	adds	r3, #1
 800d530:	60fb      	str	r3, [r7, #12]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2b03      	cmp	r3, #3
 800d536:	dda9      	ble.n	800d48c <alloc_socket+0x10>
  }
  return -1;
 800d538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	20013e34 	.word	0x20013e34
 800d548:	0802310c 	.word	0x0802310c
 800d54c:	08023140 	.word	0x08023140
 800d550:	08023160 	.word	0x08023160

0800d554 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
 800d560:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	6852      	ldr	r2, [r2, #4]
 800d568:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	601a      	str	r2, [r3, #0]
  return 1;
 800d57e:	2301      	movs	r3, #1
}
 800d580:	4618      	mov	r0, r3
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00d      	beq.n	800d5bc <free_socket_free_elements+0x30>
    if (is_tcp) {
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d005      	beq.n	800d5b2 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f004 fa16 	bl	80119dc <pbuf_free>
 800d5b0:	e004      	b.n	800d5bc <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7ff fe20 	bl	800d1fc <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d002      	beq.n	800d5c8 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800d5c2:	68b8      	ldr	r0, [r7, #8]
 800d5c4:	f7fd fa1a 	bl	800a9fc <netconn_delete>
  }
}
 800d5c8:	bf00      	nop
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800d5da:	f010 fc09 	bl	801ddf0 <sys_arch_protect>
 800d5de:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800d5e0:	f107 0308 	add.w	r3, r7, #8
 800d5e4:	f107 020c 	add.w	r2, r7, #12
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7ff ffb2 	bl	800d554 <free_socket_locked>
 800d5f0:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800d5f2:	6978      	ldr	r0, [r7, #20]
 800d5f4:	f010 fc0a 	bl	801de0c <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d006      	beq.n	800d60c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f107 0208 	add.w	r2, r7, #8
 800d604:	4619      	mov	r1, r3
 800d606:	6838      	ldr	r0, [r7, #0]
 800d608:	f7ff ffc0 	bl	800d58c <free_socket_free_elements>
  }
}
 800d60c:	bf00      	nop
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800d614:	b590      	push	{r4, r7, lr}
 800d616:	b099      	sub	sp, #100	; 0x64
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f7ff ff11 	bl	800d44c <get_socket>
 800d62a:	65f8      	str	r0, [r7, #92]	; 0x5c
  if (!sock) {
 800d62c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d102      	bne.n	800d638 <lwip_accept+0x24>
    return -1;
 800d632:	f04f 33ff 	mov.w	r3, #4294967295
 800d636:	e0f9      	b.n	800d82c <lwip_accept+0x218>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800d638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d640:	4611      	mov	r1, r2
 800d642:	4618      	mov	r0, r3
 800d644:	f7fd fb0e 	bl	800ac64 <netconn_accept>
 800d648:	4603      	mov	r3, r0
 800d64a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800d64e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d652:	2b00      	cmp	r3, #0
 800d654:	d02c      	beq.n	800d6b0 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800d656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d660:	2b10      	cmp	r3, #16
 800d662:	d008      	beq.n	800d676 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800d664:	235f      	movs	r3, #95	; 0x5f
 800d666:	633b      	str	r3, [r7, #48]	; 0x30
 800d668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d01d      	beq.n	800d6aa <lwip_accept+0x96>
 800d66e:	4a71      	ldr	r2, [pc, #452]	; (800d834 <lwip_accept+0x220>)
 800d670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	e019      	b.n	800d6aa <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800d676:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d67a:	f113 0f0f 	cmn.w	r3, #15
 800d67e:	d108      	bne.n	800d692 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800d680:	2316      	movs	r3, #22
 800d682:	637b      	str	r3, [r7, #52]	; 0x34
 800d684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00f      	beq.n	800d6aa <lwip_accept+0x96>
 800d68a:	4a6a      	ldr	r2, [pc, #424]	; (800d834 <lwip_accept+0x220>)
 800d68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68e:	6013      	str	r3, [r2, #0]
 800d690:	e00b      	b.n	800d6aa <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800d692:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d696:	4618      	mov	r0, r3
 800d698:	f7ff fd92 	bl	800d1c0 <err_to_errno>
 800d69c:	63b8      	str	r0, [r7, #56]	; 0x38
 800d69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d002      	beq.n	800d6aa <lwip_accept+0x96>
 800d6a4:	4a63      	ldr	r2, [pc, #396]	; (800d834 <lwip_accept+0x220>)
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a8:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800d6aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ae:	e0bd      	b.n	800d82c <lwip_accept+0x218>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <lwip_accept+0xb0>
 800d6b6:	4b60      	ldr	r3, [pc, #384]	; (800d838 <lwip_accept+0x224>)
 800d6b8:	f240 228b 	movw	r2, #651	; 0x28b
 800d6bc:	495f      	ldr	r1, [pc, #380]	; (800d83c <lwip_accept+0x228>)
 800d6be:	4860      	ldr	r0, [pc, #384]	; (800d840 <lwip_accept+0x22c>)
 800d6c0:	f011 fa34 	bl	801eb2c <iprintf>

  newsock = alloc_socket(newconn, 1);
 800d6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c6:	2101      	movs	r1, #1
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7ff fed7 	bl	800d47c <alloc_socket>
 800d6ce:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800d6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d6:	d10e      	bne.n	800d6f6 <lwip_accept+0xe2>
    netconn_delete(newconn);
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fd f98e 	bl	800a9fc <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800d6e0:	2317      	movs	r3, #23
 800d6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d002      	beq.n	800d6f0 <lwip_accept+0xdc>
 800d6ea:	4a52      	ldr	r2, [pc, #328]	; (800d834 <lwip_accept+0x220>)
 800d6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ee:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f4:	e09a      	b.n	800d82c <lwip_accept+0x218>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800d6f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	db02      	blt.n	800d702 <lwip_accept+0xee>
 800d6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6fe:	2b03      	cmp	r3, #3
 800d700:	dd06      	ble.n	800d710 <lwip_accept+0xfc>
 800d702:	4b4d      	ldr	r3, [pc, #308]	; (800d838 <lwip_accept+0x224>)
 800d704:	f44f 7225 	mov.w	r2, #660	; 0x294
 800d708:	494e      	ldr	r1, [pc, #312]	; (800d844 <lwip_accept+0x230>)
 800d70a:	484d      	ldr	r0, [pc, #308]	; (800d840 <lwip_accept+0x22c>)
 800d70c:	f011 fa0e 	bl	801eb2c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800d710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d712:	011b      	lsls	r3, r3, #4
 800d714:	4a4c      	ldr	r2, [pc, #304]	; (800d848 <lwip_accept+0x234>)
 800d716:	4413      	add	r3, r2
 800d718:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800d71a:	f010 fb69 	bl	801ddf0 <sys_arch_protect>
 800d71e:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800d720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	b21b      	sxth	r3, r3
 800d726:	43db      	mvns	r3, r3
 800d728:	b21b      	sxth	r3, r3
 800d72a:	65bb      	str	r3, [r7, #88]	; 0x58
  newconn->socket = newsock;
 800d72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d730:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800d732:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800d734:	f010 fb6a 	bl	801de0c <sys_arch_unprotect>

  if (newconn->callback) {
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d012      	beq.n	800d766 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800d740:	4842      	ldr	r0, [pc, #264]	; (800d84c <lwip_accept+0x238>)
 800d742:	f010 fb1b 	bl	801dd7c <sys_mutex_lock>
    while (recvevent > 0) {
 800d746:	e008      	b.n	800d75a <lwip_accept+0x146>
      recvevent--;
 800d748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d74a:	3b01      	subs	r3, #1
 800d74c:	65bb      	str	r3, [r7, #88]	; 0x58
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d754:	2200      	movs	r2, #0
 800d756:	2100      	movs	r1, #0
 800d758:	4798      	blx	r3
    while (recvevent > 0) {
 800d75a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dcf3      	bgt.n	800d748 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800d760:	483a      	ldr	r0, [pc, #232]	; (800d84c <lwip_accept+0x238>)
 800d762:	f010 fb1a 	bl	801dd9a <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d056      	beq.n	800d81a <lwip_accept+0x206>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d053      	beq.n	800d81a <lwip_accept+0x206>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800d772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d774:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800d778:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d77c:	2300      	movs	r3, #0
 800d77e:	f7fd f959 	bl	800aa34 <netconn_getaddr>
 800d782:	4603      	mov	r3, r0
 800d784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800d788:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d016      	beq.n	800d7be <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	4618      	mov	r0, r3
 800d794:	f7fd f932 	bl	800a9fc <netconn_delete>
      free_socket(nsock, 1);
 800d798:	2101      	movs	r1, #1
 800d79a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d79c:	f7ff ff18 	bl	800d5d0 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800d7a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7ff fd0b 	bl	800d1c0 <err_to_errno>
 800d7aa:	6478      	str	r0, [r7, #68]	; 0x44
 800d7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d002      	beq.n	800d7b8 <lwip_accept+0x1a4>
 800d7b2:	4a20      	ldr	r2, [pc, #128]	; (800d834 <lwip_accept+0x220>)
 800d7b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7b6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800d7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7bc:	e036      	b.n	800d82c <lwip_accept+0x218>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800d7be:	f107 0314 	add.w	r3, r7, #20
 800d7c2:	2210      	movs	r2, #16
 800d7c4:	701a      	strb	r2, [r3, #0]
 800d7c6:	f107 0314 	add.w	r3, r7, #20
 800d7ca:	2202      	movs	r2, #2
 800d7cc:	705a      	strb	r2, [r3, #1]
 800d7ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d7d0:	f107 0414 	add.w	r4, r7, #20
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f001 fd41 	bl	800f25c <lwip_htons>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	8063      	strh	r3, [r4, #2]
 800d7de:	f107 0314 	add.w	r3, r7, #20
 800d7e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7e4:	605a      	str	r2, [r3, #4]
 800d7e6:	f107 0314 	add.w	r3, r7, #20
 800d7ea:	3308      	adds	r3, #8
 800d7ec:	2208      	movs	r2, #8
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f010 fc7f 	bl	801e0f4 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	7d3a      	ldrb	r2, [r7, #20]
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d903      	bls.n	800d808 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800d800:	7d3b      	ldrb	r3, [r7, #20]
 800d802:	461a      	mov	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	f107 0314 	add.w	r3, r7, #20
 800d810:	4619      	mov	r1, r3
 800d812:	68b8      	ldr	r0, [r7, #8]
 800d814:	f010 fc46 	bl	801e0a4 <memcpy>
  if ((addr != NULL) && (addrlen != NULL)) {
 800d818:	bf00      	nop
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800d81a:	2300      	movs	r3, #0
 800d81c:	643b      	str	r3, [r7, #64]	; 0x40
 800d81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <lwip_accept+0x216>
 800d824:	4a03      	ldr	r2, [pc, #12]	; (800d834 <lwip_accept+0x220>)
 800d826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d828:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800d82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3764      	adds	r7, #100	; 0x64
 800d830:	46bd      	mov	sp, r7
 800d832:	bd90      	pop	{r4, r7, pc}
 800d834:	2001b118 	.word	0x2001b118
 800d838:	0802310c 	.word	0x0802310c
 800d83c:	08023188 	.word	0x08023188
 800d840:	08023160 	.word	0x08023160
 800d844:	08023198 	.word	0x08023198
 800d848:	20013e34 	.word	0x20013e34
 800d84c:	200176d0 	.word	0x200176d0

0800d850 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08a      	sub	sp, #40	; 0x28
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f7ff fdf5 	bl	800d44c <get_socket>
 800d862:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	2b00      	cmp	r3, #0
 800d868:	d102      	bne.n	800d870 <lwip_bind+0x20>
    return -1;
 800d86a:	f04f 33ff 	mov.w	r3, #4294967295
 800d86e:	e051      	b.n	800d914 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b10      	cmp	r3, #16
 800d874:	d108      	bne.n	800d888 <lwip_bind+0x38>
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	785b      	ldrb	r3, [r3, #1]
 800d87a:	2b02      	cmp	r3, #2
 800d87c:	d104      	bne.n	800d888 <lwip_bind+0x38>
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	f003 0303 	and.w	r3, r3, #3
 800d884:	2b00      	cmp	r3, #0
 800d886:	d014      	beq.n	800d8b2 <lwip_bind+0x62>
 800d888:	4b24      	ldr	r3, [pc, #144]	; (800d91c <lwip_bind+0xcc>)
 800d88a:	f240 22e2 	movw	r2, #738	; 0x2e2
 800d88e:	4924      	ldr	r1, [pc, #144]	; (800d920 <lwip_bind+0xd0>)
 800d890:	4824      	ldr	r0, [pc, #144]	; (800d924 <lwip_bind+0xd4>)
 800d892:	f011 f94b 	bl	801eb2c <iprintf>
 800d896:	f06f 000f 	mvn.w	r0, #15
 800d89a:	f7ff fc91 	bl	800d1c0 <err_to_errno>
 800d89e:	6178      	str	r0, [r7, #20]
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d002      	beq.n	800d8ac <lwip_bind+0x5c>
 800d8a6:	4a20      	ldr	r2, [pc, #128]	; (800d928 <lwip_bind+0xd8>)
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	6013      	str	r3, [r2, #0]
 800d8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b0:	e030      	b.n	800d914 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	613b      	str	r3, [r7, #16]
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	885b      	ldrh	r3, [r3, #2]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f001 fccd 	bl	800f25c <lwip_htons>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8cc:	f107 0110 	add.w	r1, r7, #16
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fd f901 	bl	800aad8 <netconn_bind>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800d8dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00e      	beq.n	800d902 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800d8e4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff fc69 	bl	800d1c0 <err_to_errno>
 800d8ee:	61b8      	str	r0, [r7, #24]
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <lwip_bind+0xac>
 800d8f6:	4a0c      	ldr	r2, [pc, #48]	; (800d928 <lwip_bind+0xd8>)
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d900:	e008      	b.n	800d914 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800d902:	2300      	movs	r3, #0
 800d904:	61fb      	str	r3, [r7, #28]
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <lwip_bind+0xc2>
 800d90c:	4a06      	ldr	r2, [pc, #24]	; (800d928 <lwip_bind+0xd8>)
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800d912:	2300      	movs	r3, #0
}
 800d914:	4618      	mov	r0, r3
 800d916:	3728      	adds	r7, #40	; 0x28
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	0802310c 	.word	0x0802310c
 800d920:	080231b0 	.word	0x080231b0
 800d924:	08023160 	.word	0x08023160
 800d928:	2001b118 	.word	0x2001b118

0800d92c <lwip_close>:

int
lwip_close(int s)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7ff fd87 	bl	800d44c <get_socket>
 800d93e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d102      	bne.n	800d94c <lwip_close+0x20>
    return -1;
 800d946:	f04f 33ff 	mov.w	r3, #4294967295
 800d94a:	e039      	b.n	800d9c0 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00b      	beq.n	800d96c <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d95e:	2b10      	cmp	r3, #16
 800d960:	bf0c      	ite	eq
 800d962:	2301      	moveq	r3, #1
 800d964:	2300      	movne	r3, #0
 800d966:	b2db      	uxtb	r3, r3
 800d968:	617b      	str	r3, [r7, #20]
 800d96a:	e00a      	b.n	800d982 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	685b      	ldr	r3, [r3, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d006      	beq.n	800d982 <lwip_close+0x56>
 800d974:	4b14      	ldr	r3, [pc, #80]	; (800d9c8 <lwip_close+0x9c>)
 800d976:	f44f 7245 	mov.w	r2, #788	; 0x314
 800d97a:	4914      	ldr	r1, [pc, #80]	; (800d9cc <lwip_close+0xa0>)
 800d97c:	4814      	ldr	r0, [pc, #80]	; (800d9d0 <lwip_close+0xa4>)
 800d97e:	f011 f8d5 	bl	801eb2c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4618      	mov	r0, r3
 800d988:	f7fd f814 	bl	800a9b4 <netconn_prepare_delete>
 800d98c:	4603      	mov	r3, r0
 800d98e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00e      	beq.n	800d9b6 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800d998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7ff fc0f 	bl	800d1c0 <err_to_errno>
 800d9a2:	60b8      	str	r0, [r7, #8]
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d002      	beq.n	800d9b0 <lwip_close+0x84>
 800d9aa:	4a0a      	ldr	r2, [pc, #40]	; (800d9d4 <lwip_close+0xa8>)
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800d9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b4:	e004      	b.n	800d9c0 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800d9b6:	6979      	ldr	r1, [r7, #20]
 800d9b8:	6938      	ldr	r0, [r7, #16]
 800d9ba:	f7ff fe09 	bl	800d5d0 <free_socket>
  set_errno(0);
  return 0;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3718      	adds	r7, #24
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	0802310c 	.word	0x0802310c
 800d9cc:	080231cc 	.word	0x080231cc
 800d9d0:	08023160 	.word	0x08023160
 800d9d4:	2001b118 	.word	0x2001b118

0800d9d8 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08a      	sub	sp, #40	; 0x28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800d9e4:	68f8      	ldr	r0, [r7, #12]
 800d9e6:	f7ff fd31 	bl	800d44c <get_socket>
 800d9ea:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d102      	bne.n	800d9f8 <lwip_connect+0x20>
    return -1;
 800d9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f6:	e062      	b.n	800dabe <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	785b      	ldrb	r3, [r3, #1]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d108      	bne.n	800da12 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4618      	mov	r0, r3
 800da06:	f7fd f8d7 	bl	800abb8 <netconn_disconnect>
 800da0a:	4603      	mov	r3, r0
 800da0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800da10:	e039      	b.n	800da86 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b10      	cmp	r3, #16
 800da16:	d10c      	bne.n	800da32 <lwip_connect+0x5a>
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	785b      	ldrb	r3, [r3, #1]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d003      	beq.n	800da28 <lwip_connect+0x50>
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	785b      	ldrb	r3, [r3, #1]
 800da24:	2b02      	cmp	r3, #2
 800da26:	d104      	bne.n	800da32 <lwip_connect+0x5a>
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	f003 0303 	and.w	r3, r3, #3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d014      	beq.n	800da5c <lwip_connect+0x84>
 800da32:	4b25      	ldr	r3, [pc, #148]	; (800dac8 <lwip_connect+0xf0>)
 800da34:	f240 3247 	movw	r2, #839	; 0x347
 800da38:	4924      	ldr	r1, [pc, #144]	; (800dacc <lwip_connect+0xf4>)
 800da3a:	4825      	ldr	r0, [pc, #148]	; (800dad0 <lwip_connect+0xf8>)
 800da3c:	f011 f876 	bl	801eb2c <iprintf>
 800da40:	f06f 000f 	mvn.w	r0, #15
 800da44:	f7ff fbbc 	bl	800d1c0 <err_to_errno>
 800da48:	61f8      	str	r0, [r7, #28]
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <lwip_connect+0x7e>
 800da50:	4a20      	ldr	r2, [pc, #128]	; (800dad4 <lwip_connect+0xfc>)
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	6013      	str	r3, [r2, #0]
 800da56:	f04f 33ff 	mov.w	r3, #4294967295
 800da5a:	e030      	b.n	800dabe <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	613b      	str	r3, [r7, #16]
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	885b      	ldrh	r3, [r3, #2]
 800da66:	4618      	mov	r0, r3
 800da68:	f001 fbf8 	bl	800f25c <lwip_htons>
 800da6c:	4603      	mov	r3, r0
 800da6e:	847b      	strh	r3, [r7, #34]	; 0x22
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800da76:	f107 0110 	add.w	r1, r7, #16
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fd f864 	bl	800ab48 <netconn_connect>
 800da80:	4603      	mov	r3, r0
 800da82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  }

  if (err != ERR_OK) {
 800da86:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d00e      	beq.n	800daac <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800da8e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fb94 	bl	800d1c0 <err_to_errno>
 800da98:	6178      	str	r0, [r7, #20]
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <lwip_connect+0xce>
 800daa0:	4a0c      	ldr	r2, [pc, #48]	; (800dad4 <lwip_connect+0xfc>)
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800daa6:	f04f 33ff 	mov.w	r3, #4294967295
 800daaa:	e008      	b.n	800dabe <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800daac:	2300      	movs	r3, #0
 800daae:	61bb      	str	r3, [r7, #24]
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d002      	beq.n	800dabc <lwip_connect+0xe4>
 800dab6:	4a07      	ldr	r2, [pc, #28]	; (800dad4 <lwip_connect+0xfc>)
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800dabc:	2300      	movs	r3, #0
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3728      	adds	r7, #40	; 0x28
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	0802310c 	.word	0x0802310c
 800dacc:	080231e4 	.word	0x080231e4
 800dad0:	08023160 	.word	0x08023160
 800dad4:	2001b118 	.word	0x2001b118

0800dad8 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b088      	sub	sp, #32
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7ff fcb2 	bl	800d44c <get_socket>
 800dae8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d102      	bne.n	800daf6 <lwip_listen+0x1e>
    return -1;
 800daf0:	f04f 33ff 	mov.w	r3, #4294967295
 800daf4:	e03e      	b.n	800db74 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2bfe      	cmp	r3, #254	; 0xfe
 800dafa:	dc03      	bgt.n	800db04 <lwip_listen+0x2c>
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800db02:	e000      	b.n	800db06 <lwip_listen+0x2e>
 800db04:	23ff      	movs	r3, #255	; 0xff
 800db06:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	b2d2      	uxtb	r2, r2
 800db10:	4611      	mov	r1, r2
 800db12:	4618      	mov	r0, r3
 800db14:	f7fd f87a 	bl	800ac0c <netconn_listen_with_backlog>
 800db18:	4603      	mov	r3, r0
 800db1a:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800db1c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d01e      	beq.n	800db62 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db2e:	2b10      	cmp	r3, #16
 800db30:	d008      	beq.n	800db44 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800db32:	235f      	movs	r3, #95	; 0x5f
 800db34:	60fb      	str	r3, [r7, #12]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00f      	beq.n	800db5c <lwip_listen+0x84>
 800db3c:	4a0f      	ldr	r2, [pc, #60]	; (800db7c <lwip_listen+0xa4>)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6013      	str	r3, [r2, #0]
 800db42:	e00b      	b.n	800db5c <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800db44:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db48:	4618      	mov	r0, r3
 800db4a:	f7ff fb39 	bl	800d1c0 <err_to_errno>
 800db4e:	6138      	str	r0, [r7, #16]
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d002      	beq.n	800db5c <lwip_listen+0x84>
 800db56:	4a09      	ldr	r2, [pc, #36]	; (800db7c <lwip_listen+0xa4>)
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800db5c:	f04f 33ff 	mov.w	r3, #4294967295
 800db60:	e008      	b.n	800db74 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d002      	beq.n	800db72 <lwip_listen+0x9a>
 800db6c:	4a03      	ldr	r2, [pc, #12]	; (800db7c <lwip_listen+0xa4>)
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3720      	adds	r7, #32
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	2001b118 	.word	0x2001b118

0800db80 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b08c      	sub	sp, #48	; 0x30
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800db8e:	2308      	movs	r3, #8
 800db90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  ssize_t recvd = 0;
 800db94:	2300      	movs	r3, #0
 800db96:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	db01      	blt.n	800dba2 <lwip_recv_tcp+0x22>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	e001      	b.n	800dba6 <lwip_recv_tcp+0x26>
 800dba2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dba6:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d106      	bne.n	800dbbc <lwip_recv_tcp+0x3c>
 800dbae:	4b74      	ldr	r3, [pc, #464]	; (800dd80 <lwip_recv_tcp+0x200>)
 800dbb0:	f240 329e 	movw	r2, #926	; 0x39e
 800dbb4:	4973      	ldr	r1, [pc, #460]	; (800dd84 <lwip_recv_tcp+0x204>)
 800dbb6:	4874      	ldr	r0, [pc, #464]	; (800dd88 <lwip_recv_tcp+0x208>)
 800dbb8:	f010 ffb8 	bl	801eb2c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbc6:	2b10      	cmp	r3, #16
 800dbc8:	d006      	beq.n	800dbd8 <lwip_recv_tcp+0x58>
 800dbca:	4b6d      	ldr	r3, [pc, #436]	; (800dd80 <lwip_recv_tcp+0x200>)
 800dbcc:	f240 329f 	movw	r2, #927	; 0x39f
 800dbd0:	496e      	ldr	r1, [pc, #440]	; (800dd8c <lwip_recv_tcp+0x20c>)
 800dbd2:	486d      	ldr	r0, [pc, #436]	; (800dd88 <lwip_recv_tcp+0x208>)
 800dbd4:	f010 ffaa 	bl	801eb2c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f003 0308 	and.w	r3, r3, #8
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d005      	beq.n	800dbee <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800dbe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbe6:	f043 0304 	orr.w	r3, r3, #4
 800dbea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d003      	beq.n	800dbfe <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	617b      	str	r3, [r7, #20]
 800dbfc:	e036      	b.n	800dc6c <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800dc06:	f107 0114 	add.w	r1, r7, #20
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fd fa60 	bl	800b0d0 <netconn_recv_tcp_pbuf_flags>
 800dc10:	4603      	mov	r3, r0
 800dc12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800dc16:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d019      	beq.n	800dc52 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f300 808d 	bgt.w	800dd40 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800dc26:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff fac8 	bl	800d1c0 <err_to_errno>
 800dc30:	61f8      	str	r0, [r7, #28]
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <lwip_recv_tcp+0xbe>
 800dc38:	4a55      	ldr	r2, [pc, #340]	; (800dd90 <lwip_recv_tcp+0x210>)
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800dc3e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800dc42:	f113 0f0f 	cmn.w	r3, #15
 800dc46:	d101      	bne.n	800dc4c <lwip_recv_tcp+0xcc>
          return 0;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	e094      	b.n	800dd76 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800dc4c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc50:	e091      	b.n	800dd76 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d106      	bne.n	800dc66 <lwip_recv_tcp+0xe6>
 800dc58:	4b49      	ldr	r3, [pc, #292]	; (800dd80 <lwip_recv_tcp+0x200>)
 800dc5a:	f240 32c5 	movw	r2, #965	; 0x3c5
 800dc5e:	494d      	ldr	r1, [pc, #308]	; (800dd94 <lwip_recv_tcp+0x214>)
 800dc60:	4849      	ldr	r0, [pc, #292]	; (800dd88 <lwip_recv_tcp+0x208>)
 800dc62:	f010 ff63 	bl	801eb2c <iprintf>
      sock->lastdata.pbuf = p;
 800dc66:	697a      	ldr	r2, [r7, #20]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	891b      	ldrh	r3, [r3, #8]
 800dc70:	461a      	mov	r2, r3
 800dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc74:	4293      	cmp	r3, r2
 800dc76:	dd03      	ble.n	800dc80 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	891b      	ldrh	r3, [r3, #8]
 800dc7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dc7e:	e001      	b.n	800dc84 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    if (recvd + copylen < recvd) {
 800dc84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	4413      	add	r3, r2
 800dc8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	dd03      	ble.n	800dc98 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	43db      	mvns	r3, r3
 800dc96:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800dc98:	6978      	ldr	r0, [r7, #20]
 800dc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	18d1      	adds	r1, r2, r3
 800dca0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dca2:	2300      	movs	r3, #0
 800dca4:	f004 f8a0 	bl	8011de8 <pbuf_copy_partial>

    recvd += copylen;
 800dca8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcac:	4413      	add	r3, r2
 800dcae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800dcb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	da06      	bge.n	800dcc6 <lwip_recv_tcp+0x146>
 800dcb8:	4b31      	ldr	r3, [pc, #196]	; (800dd80 <lwip_recv_tcp+0x200>)
 800dcba:	f240 32dd 	movw	r2, #989	; 0x3dd
 800dcbe:	4936      	ldr	r1, [pc, #216]	; (800dd98 <lwip_recv_tcp+0x218>)
 800dcc0:	4831      	ldr	r0, [pc, #196]	; (800dd88 <lwip_recv_tcp+0x208>)
 800dcc2:	f010 ff33 	bl	801eb2c <iprintf>
    recv_left -= copylen;
 800dcc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcca:	1ad3      	subs	r3, r2, r3
 800dccc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	f003 0301 	and.w	r3, r3, #1
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d123      	bne.n	800dd20 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	891b      	ldrh	r3, [r3, #8]
 800dcdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d906      	bls.n	800dcf0 <lwip_recv_tcp+0x170>
 800dce2:	4b27      	ldr	r3, [pc, #156]	; (800dd80 <lwip_recv_tcp+0x200>)
 800dce4:	f240 32e3 	movw	r2, #995	; 0x3e3
 800dce8:	492c      	ldr	r1, [pc, #176]	; (800dd9c <lwip_recv_tcp+0x21c>)
 800dcea:	4827      	ldr	r0, [pc, #156]	; (800dd88 <lwip_recv_tcp+0x208>)
 800dcec:	f010 ff1e 	bl	801eb2c <iprintf>
      if (p->tot_len - copylen > 0) {
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	891b      	ldrh	r3, [r3, #8]
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	dd09      	ble.n	800dd12 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd02:	4611      	mov	r1, r2
 800dd04:	4618      	mov	r0, r3
 800dd06:	f003 fe36 	bl	8011976 <pbuf_free_header>
 800dd0a:	4602      	mov	r2, r0
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	605a      	str	r2, [r3, #4]
 800dd10:	e006      	b.n	800dd20 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2200      	movs	r2, #0
 800dd16:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f003 fe5e 	bl	80119dc <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800dd20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd24:	f043 0314 	orr.w	r3, r3, #20
 800dd28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	dd08      	ble.n	800dd44 <lwip_recv_tcp+0x1c4>
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	f003 0301 	and.w	r3, r3, #1
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f43f af58 	beq.w	800dbee <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800dd3e:	e001      	b.n	800dd44 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800dd40:	bf00      	nop
 800dd42:	e000      	b.n	800dd46 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800dd44:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	dd0b      	ble.n	800dd64 <lwip_recv_tcp+0x1e4>
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d106      	bne.n	800dd64 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fd f904 	bl	800af6c <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800dd64:	2300      	movs	r3, #0
 800dd66:	61bb      	str	r3, [r7, #24]
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <lwip_recv_tcp+0x1f4>
 800dd6e:	4a08      	ldr	r2, [pc, #32]	; (800dd90 <lwip_recv_tcp+0x210>)
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	6013      	str	r3, [r2, #0]
  return recvd;
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3730      	adds	r7, #48	; 0x30
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	0802310c 	.word	0x0802310c
 800dd84:	08023204 	.word	0x08023204
 800dd88:	08023160 	.word	0x08023160
 800dd8c:	08023214 	.word	0x08023214
 800dd90:	2001b118 	.word	0x2001b118
 800dd94:	08023238 	.word	0x08023238
 800dd98:	08023244 	.word	0x08023244
 800dd9c:	0802326c 	.word	0x0802326c

0800dda0 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800dda0:	b590      	push	{r4, r7, lr}
 800dda2:	b08b      	sub	sp, #44	; 0x2c
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	603b      	str	r3, [r7, #0]
 800ddac:	4613      	mov	r3, r2
 800ddae:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d106      	bne.n	800ddc8 <lwip_sock_make_addr+0x28>
 800ddba:	4b2b      	ldr	r3, [pc, #172]	; (800de68 <lwip_sock_make_addr+0xc8>)
 800ddbc:	f240 4207 	movw	r2, #1031	; 0x407
 800ddc0:	492a      	ldr	r1, [pc, #168]	; (800de6c <lwip_sock_make_addr+0xcc>)
 800ddc2:	482b      	ldr	r0, [pc, #172]	; (800de70 <lwip_sock_make_addr+0xd0>)
 800ddc4:	f010 feb2 	bl	801eb2c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d106      	bne.n	800dddc <lwip_sock_make_addr+0x3c>
 800ddce:	4b26      	ldr	r3, [pc, #152]	; (800de68 <lwip_sock_make_addr+0xc8>)
 800ddd0:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ddd4:	4927      	ldr	r1, [pc, #156]	; (800de74 <lwip_sock_make_addr+0xd4>)
 800ddd6:	4826      	ldr	r0, [pc, #152]	; (800de70 <lwip_sock_make_addr+0xd0>)
 800ddd8:	f010 fea8 	bl	801eb2c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800dddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d106      	bne.n	800ddf0 <lwip_sock_make_addr+0x50>
 800dde2:	4b21      	ldr	r3, [pc, #132]	; (800de68 <lwip_sock_make_addr+0xc8>)
 800dde4:	f240 4209 	movw	r2, #1033	; 0x409
 800dde8:	4923      	ldr	r1, [pc, #140]	; (800de78 <lwip_sock_make_addr+0xd8>)
 800ddea:	4821      	ldr	r0, [pc, #132]	; (800de70 <lwip_sock_make_addr+0xd0>)
 800ddec:	f010 fe9e 	bl	801eb2c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800ddf0:	f107 0314 	add.w	r3, r7, #20
 800ddf4:	2210      	movs	r2, #16
 800ddf6:	701a      	strb	r2, [r3, #0]
 800ddf8:	f107 0314 	add.w	r3, r7, #20
 800ddfc:	2202      	movs	r2, #2
 800ddfe:	705a      	strb	r2, [r3, #1]
 800de00:	f107 0414 	add.w	r4, r7, #20
 800de04:	88fb      	ldrh	r3, [r7, #6]
 800de06:	4618      	mov	r0, r3
 800de08:	f001 fa28 	bl	800f25c <lwip_htons>
 800de0c:	4603      	mov	r3, r0
 800de0e:	8063      	strh	r3, [r4, #2]
 800de10:	f107 0314 	add.w	r3, r7, #20
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	6812      	ldr	r2, [r2, #0]
 800de18:	605a      	str	r2, [r3, #4]
 800de1a:	f107 0314 	add.w	r3, r7, #20
 800de1e:	3308      	adds	r3, #8
 800de20:	2208      	movs	r2, #8
 800de22:	2100      	movs	r1, #0
 800de24:	4618      	mov	r0, r3
 800de26:	f010 f965 	bl	801e0f4 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800de2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	7d3a      	ldrb	r2, [r7, #20]
 800de30:	4293      	cmp	r3, r2
 800de32:	d202      	bcs.n	800de3a <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800de34:	2301      	movs	r3, #1
 800de36:	627b      	str	r3, [r7, #36]	; 0x24
 800de38:	e008      	b.n	800de4c <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800de3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	7d3a      	ldrb	r2, [r7, #20]
 800de40:	4293      	cmp	r3, r2
 800de42:	d903      	bls.n	800de4c <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800de44:	7d3b      	ldrb	r3, [r7, #20]
 800de46:	461a      	mov	r2, r3
 800de48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4a:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800de4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	f107 0314 	add.w	r3, r7, #20
 800de54:	4619      	mov	r1, r3
 800de56:	6838      	ldr	r0, [r7, #0]
 800de58:	f010 f924 	bl	801e0a4 <memcpy>
  return truncated;
 800de5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de5e:	4618      	mov	r0, r3
 800de60:	372c      	adds	r7, #44	; 0x2c
 800de62:	46bd      	mov	sp, r7
 800de64:	bd90      	pop	{r4, r7, pc}
 800de66:	bf00      	nop
 800de68:	0802310c 	.word	0x0802310c
 800de6c:	0802327c 	.word	0x0802327c
 800de70:	08023160 	.word	0x08023160
 800de74:	08023290 	.word	0x08023290
 800de78:	080232a0 	.word	0x080232a0

0800de7c <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b088      	sub	sp, #32
 800de80:	af02      	add	r7, sp, #8
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d101      	bne.n	800de94 <lwip_recv_tcp_from+0x18>
    return 0;
 800de90:	2300      	movs	r3, #0
 800de92:	e021      	b.n	800ded8 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d01d      	beq.n	800ded6 <lwip_recv_tcp_from+0x5a>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d01a      	beq.n	800ded6 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6818      	ldr	r0, [r3, #0]
 800dea4:	f107 0216 	add.w	r2, r7, #22
 800dea8:	f107 0110 	add.w	r1, r7, #16
 800deac:	2300      	movs	r3, #0
 800deae:	f7fc fdc1 	bl	800aa34 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00e      	beq.n	800ded6 <lwip_recv_tcp_from+0x5a>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00b      	beq.n	800ded6 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6818      	ldr	r0, [r3, #0]
 800dec2:	8afa      	ldrh	r2, [r7, #22]
 800dec4:	f107 0110 	add.w	r1, r7, #16
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	9300      	str	r3, [sp, #0]
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	f7ff ff67 	bl	800dda0 <lwip_sock_make_addr>
 800ded2:	4603      	mov	r3, r0
 800ded4:	e000      	b.n	800ded8 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800dee0:	b590      	push	{r4, r7, lr}
 800dee2:	b08d      	sub	sp, #52	; 0x34
 800dee4:	af02      	add	r7, sp, #8
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d10d      	bne.n	800df12 <lwip_recvfrom_udp_raw+0x32>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	dd09      	ble.n	800df12 <lwip_recvfrom_udp_raw+0x32>
 800defe:	4b5e      	ldr	r3, [pc, #376]	; (800e078 <lwip_recvfrom_udp_raw+0x198>)
 800df00:	f240 4249 	movw	r2, #1097	; 0x449
 800df04:	495d      	ldr	r1, [pc, #372]	; (800e07c <lwip_recvfrom_udp_raw+0x19c>)
 800df06:	485e      	ldr	r0, [pc, #376]	; (800e080 <lwip_recvfrom_udp_raw+0x1a0>)
 800df08:	f010 fe10 	bl	801eb2c <iprintf>
 800df0c:	f06f 030f 	mvn.w	r3, #15
 800df10:	e0ae      	b.n	800e070 <lwip_recvfrom_udp_raw+0x190>

  if (flags & MSG_DONTWAIT) {
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	f003 0308 	and.w	r3, r3, #8
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d003      	beq.n	800df24 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800df1c:	2304      	movs	r3, #4
 800df1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df22:	e002      	b.n	800df2a <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800df24:	2300      	movs	r3, #0
 800df26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d11f      	bne.n	800df76 <lwip_recvfrom_udp_raw+0x96>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df3e:	f107 0110 	add.w	r1, r7, #16
 800df42:	4618      	mov	r0, r3
 800df44:	f7fd f8f0 	bl	800b128 <netconn_recv_udp_raw_netbuf_flags>
 800df48:	4603      	mov	r3, r0
 800df4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800df4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <lwip_recvfrom_udp_raw+0x7c>
      return err;
 800df56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df5a:	e089      	b.n	800e070 <lwip_recvfrom_udp_raw+0x190>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d106      	bne.n	800df70 <lwip_recvfrom_udp_raw+0x90>
 800df62:	4b45      	ldr	r3, [pc, #276]	; (800e078 <lwip_recvfrom_udp_raw+0x198>)
 800df64:	f240 425e 	movw	r2, #1118	; 0x45e
 800df68:	4946      	ldr	r1, [pc, #280]	; (800e084 <lwip_recvfrom_udp_raw+0x1a4>)
 800df6a:	4845      	ldr	r0, [pc, #276]	; (800e080 <lwip_recvfrom_udp_raw+0x1a0>)
 800df6c:	f010 fdde 	bl	801eb2c <iprintf>
    sock->lastdata.netbuf = buf;
 800df70:	693a      	ldr	r2, [r7, #16]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	891b      	ldrh	r3, [r3, #8]
 800df7c:	837b      	strh	r3, [r7, #26]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800df7e:	2300      	movs	r3, #0
 800df80:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800df82:	2300      	movs	r3, #0
 800df84:	61fb      	str	r3, [r7, #28]
 800df86:	e029      	b.n	800dfdc <lwip_recvfrom_udp_raw+0xfc>
    u16_t len_left = (u16_t)(buflen - copied);
 800df88:	8b7a      	ldrh	r2, [r7, #26]
 800df8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	833b      	strh	r3, [r7, #24]
    if (msg->msg_iov[i].iov_len > len_left) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	689a      	ldr	r2, [r3, #8]
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	00db      	lsls	r3, r3, #3
 800df98:	4413      	add	r3, r2
 800df9a:	685a      	ldr	r2, [r3, #4]
 800df9c:	8b3b      	ldrh	r3, [r7, #24]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d902      	bls.n	800dfa8 <lwip_recvfrom_udp_raw+0xc8>
      copylen = len_left;
 800dfa2:	8b3b      	ldrh	r3, [r7, #24]
 800dfa4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dfa6:	e006      	b.n	800dfb6 <lwip_recvfrom_udp_raw+0xd6>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	689a      	ldr	r2, [r3, #8]
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	00db      	lsls	r3, r3, #3
 800dfb0:	4413      	add	r3, r2
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	689a      	ldr	r2, [r3, #8]
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	00db      	lsls	r3, r3, #3
 800dfc2:	4413      	add	r3, r2
 800dfc4:	6819      	ldr	r1, [r3, #0]
 800dfc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dfca:	f003 ff0d 	bl	8011de8 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800dfce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dfd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfd2:	4413      	add	r3, r2
 800dfd4:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	61fb      	str	r3, [r7, #28]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	69fa      	ldr	r2, [r7, #28]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	da03      	bge.n	800dfee <lwip_recvfrom_udp_raw+0x10e>
 800dfe6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dfe8:	8b7b      	ldrh	r3, [r7, #26]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d3cc      	bcc.n	800df88 <lwip_recvfrom_udp_raw+0xa8>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d01a      	beq.n	800e02c <lwip_recvfrom_udp_raw+0x14c>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d016      	beq.n	800e02c <lwip_recvfrom_udp_raw+0x14c>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d012      	beq.n	800e02c <lwip_recvfrom_udp_raw+0x14c>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00e      	beq.n	800e02c <lwip_recvfrom_udp_raw+0x14c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6818      	ldr	r0, [r3, #0]
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	f103 0108 	add.w	r1, r3, #8
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	3304      	adds	r3, #4
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	4623      	mov	r3, r4
 800e028:	f7ff feba 	bl	800dda0 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2200      	movs	r2, #0
 800e030:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d007      	beq.n	800e04a <lwip_recvfrom_udp_raw+0x16a>
    u8_t wrote_msg = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800e03e:	7dfb      	ldrb	r3, [r7, #23]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d102      	bne.n	800e04a <lwip_recvfrom_udp_raw+0x16a>
      msg->msg_controllen = 0;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	2b00      	cmp	r3, #0
 800e052:	d106      	bne.n	800e062 <lwip_recvfrom_udp_raw+0x182>
    sock->lastdata.netbuf = NULL;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2200      	movs	r2, #0
 800e058:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff f8cd 	bl	800d1fc <netbuf_delete>
  }
  if (datagram_len) {
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d002      	beq.n	800e06e <lwip_recvfrom_udp_raw+0x18e>
    *datagram_len = buflen;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	8b7a      	ldrh	r2, [r7, #26]
 800e06c:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	372c      	adds	r7, #44	; 0x2c
 800e074:	46bd      	mov	sp, r7
 800e076:	bd90      	pop	{r4, r7, pc}
 800e078:	0802310c 	.word	0x0802310c
 800e07c:	080232b0 	.word	0x080232b0
 800e080:	08023160 	.word	0x08023160
 800e084:	080232dc 	.word	0x080232dc

0800e088 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b096      	sub	sp, #88	; 0x58
 800e08c:	af02      	add	r7, sp, #8
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
 800e094:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f7ff f9d8 	bl	800d44c <get_socket>
 800e09c:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800e09e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <lwip_recvfrom+0x22>
    return -1;
 800e0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a8:	e078      	b.n	800e19c <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800e0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0b4:	2b10      	cmp	r3, #16
 800e0b6:	d112      	bne.n	800e0de <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	68b9      	ldr	r1, [r7, #8]
 800e0be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e0c0:	f7ff fd5e 	bl	800db80 <lwip_recv_tcp>
 800e0c4:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800e0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	4b35      	ldr	r3, [pc, #212]	; (800e1a4 <lwip_recvfrom+0x11c>)
 800e0d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e0d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e0d6:	f7ff fed1 	bl	800de7c <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800e0da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0dc:	e05e      	b.n	800e19c <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800e0f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0fa:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800e100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e102:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800e104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e106:	2b00      	cmp	r3, #0
 800e108:	d002      	beq.n	800e110 <lwip_recvfrom+0x88>
 800e10a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	e000      	b.n	800e112 <lwip_recvfrom+0x8a>
 800e110:	2300      	movs	r3, #0
 800e112:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800e114:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800e118:	f107 0214 	add.w	r2, r7, #20
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	460b      	mov	r3, r1
 800e122:	6839      	ldr	r1, [r7, #0]
 800e124:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e126:	f7ff fedb 	bl	800dee0 <lwip_recvfrom_udp_raw>
 800e12a:	4603      	mov	r3, r0
 800e12c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800e130:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00e      	beq.n	800e156 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800e138:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7ff f83f 	bl	800d1c0 <err_to_errno>
 800e142:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e146:	2b00      	cmp	r3, #0
 800e148:	d002      	beq.n	800e150 <lwip_recvfrom+0xc8>
 800e14a:	4a17      	ldr	r2, [pc, #92]	; (800e1a8 <lwip_recvfrom+0x120>)
 800e14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e14e:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800e150:	f04f 33ff 	mov.w	r3, #4294967295
 800e154:	e022      	b.n	800e19c <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800e156:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e158:	461a      	mov	r2, r3
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4293      	cmp	r3, r2
 800e15e:	bf28      	it	cs
 800e160:	4613      	movcs	r3, r2
 800e162:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e166:	4293      	cmp	r3, r2
 800e168:	d206      	bcs.n	800e178 <lwip_recvfrom+0xf0>
 800e16a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e16c:	461a      	mov	r2, r3
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4293      	cmp	r3, r2
 800e172:	bf28      	it	cs
 800e174:	4613      	movcs	r3, r2
 800e176:	e001      	b.n	800e17c <lwip_recvfrom+0xf4>
 800e178:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e17c:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800e17e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800e184:	69ba      	ldr	r2, [r7, #24]
 800e186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e188:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800e18a:	2300      	movs	r3, #0
 800e18c:	643b      	str	r3, [r7, #64]	; 0x40
 800e18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <lwip_recvfrom+0x112>
 800e194:	4a04      	ldr	r2, [pc, #16]	; (800e1a8 <lwip_recvfrom+0x120>)
 800e196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e198:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800e19a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3750      	adds	r7, #80	; 0x50
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	080232e8 	.word	0x080232e8
 800e1a8:	2001b118 	.word	0x2001b118

0800e1ac <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
 800e1b8:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	2300      	movs	r3, #0
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	68b9      	ldr	r1, [r7, #8]
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f7ff ff5d 	bl	800e088 <lwip_recvfrom>
 800e1ce:	4603      	mov	r3, r0
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b08a      	sub	sp, #40	; 0x28
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
 800e1e4:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f7ff f930 	bl	800d44c <get_socket>
 800e1ec:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d102      	bne.n	800e1fa <lwip_send+0x22>
    return -1;
 800e1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f8:	e046      	b.n	800e288 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e204:	2b10      	cmp	r3, #16
 800e206:	d00b      	beq.n	800e220 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800e208:	2300      	movs	r3, #0
 800e20a:	9301      	str	r3, [sp, #4]
 800e20c:	2300      	movs	r3, #0
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	68b9      	ldr	r1, [r7, #8]
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f000 f83c 	bl	800e294 <lwip_sendto>
 800e21c:	4603      	mov	r3, r0
 800e21e:	e033      	b.n	800e288 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800e226:	2b00      	cmp	r3, #0
 800e228:	d001      	beq.n	800e22e <lwip_send+0x56>
 800e22a:	2203      	movs	r2, #3
 800e22c:	e000      	b.n	800e230 <lwip_send+0x58>
 800e22e:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	105b      	asrs	r3, r3, #1
 800e234:	b25b      	sxtb	r3, r3
 800e236:	f003 0304 	and.w	r3, r3, #4
 800e23a:	b25b      	sxtb	r3, r3
 800e23c:	4313      	orrs	r3, r2
 800e23e:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800e240:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800e242:	2300      	movs	r3, #0
 800e244:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	6818      	ldr	r0, [r3, #0]
 800e24a:	7efa      	ldrb	r2, [r7, #27]
 800e24c:	f107 0310 	add.w	r3, r7, #16
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	4613      	mov	r3, r2
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	68b9      	ldr	r1, [r7, #8]
 800e258:	f7fc ffc0 	bl	800b1dc <netconn_write_partly>
 800e25c:	4603      	mov	r3, r0
 800e25e:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800e260:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e264:	4618      	mov	r0, r3
 800e266:	f7fe ffab 	bl	800d1c0 <err_to_errno>
 800e26a:	6178      	str	r0, [r7, #20]
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d002      	beq.n	800e278 <lwip_send+0xa0>
 800e272:	4a07      	ldr	r2, [pc, #28]	; (800e290 <lwip_send+0xb8>)
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800e278:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d101      	bne.n	800e284 <lwip_send+0xac>
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	e001      	b.n	800e288 <lwip_send+0xb0>
 800e284:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3720      	adds	r7, #32
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	2001b118 	.word	0x2001b118

0800e294 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b08e      	sub	sp, #56	; 0x38
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	607a      	str	r2, [r7, #4]
 800e2a0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff f8d2 	bl	800d44c <get_socket>
 800e2a8:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d102      	bne.n	800e2b6 <lwip_sendto+0x22>
    return -1;
 800e2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b4:	e093      	b.n	800e3de <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2c0:	2b10      	cmp	r3, #16
 800e2c2:	d107      	bne.n	800e2d4 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	68b9      	ldr	r1, [r7, #8]
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f7ff ff84 	bl	800e1d8 <lwip_send>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	e084      	b.n	800e3de <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2da:	d30a      	bcc.n	800e2f2 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800e2dc:	235a      	movs	r3, #90	; 0x5a
 800e2de:	623b      	str	r3, [r7, #32]
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d002      	beq.n	800e2ec <lwip_sendto+0x58>
 800e2e6:	4a40      	ldr	r2, [pc, #256]	; (800e3e8 <lwip_sendto+0x154>)
 800e2e8:	6a3b      	ldr	r3, [r7, #32]
 800e2ea:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f0:	e075      	b.n	800e3de <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800e2f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d102      	bne.n	800e302 <lwip_sendto+0x6e>
 800e2fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d023      	beq.n	800e34a <lwip_sendto+0xb6>
 800e302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e304:	2b10      	cmp	r3, #16
 800e306:	d10b      	bne.n	800e320 <lwip_sendto+0x8c>
 800e308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d008      	beq.n	800e320 <lwip_sendto+0x8c>
 800e30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e310:	785b      	ldrb	r3, [r3, #1]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d104      	bne.n	800e320 <lwip_sendto+0x8c>
 800e316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e318:	f003 0303 	and.w	r3, r3, #3
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d014      	beq.n	800e34a <lwip_sendto+0xb6>
 800e320:	4b32      	ldr	r3, [pc, #200]	; (800e3ec <lwip_sendto+0x158>)
 800e322:	f240 6252 	movw	r2, #1618	; 0x652
 800e326:	4932      	ldr	r1, [pc, #200]	; (800e3f0 <lwip_sendto+0x15c>)
 800e328:	4832      	ldr	r0, [pc, #200]	; (800e3f4 <lwip_sendto+0x160>)
 800e32a:	f010 fbff 	bl	801eb2c <iprintf>
 800e32e:	f06f 000f 	mvn.w	r0, #15
 800e332:	f7fe ff45 	bl	800d1c0 <err_to_errno>
 800e336:	62b8      	str	r0, [r7, #40]	; 0x28
 800e338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d002      	beq.n	800e344 <lwip_sendto+0xb0>
 800e33e:	4a2a      	ldr	r2, [pc, #168]	; (800e3e8 <lwip_sendto+0x154>)
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	6013      	str	r3, [r2, #0]
 800e344:	f04f 33ff 	mov.w	r3, #4294967295
 800e348:	e049      	b.n	800e3de <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	617b      	str	r3, [r7, #20]
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800e352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00a      	beq.n	800e36e <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800e358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	61bb      	str	r3, [r7, #24]
 800e35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e360:	885b      	ldrh	r3, [r3, #2]
 800e362:	4618      	mov	r0, r3
 800e364:	f000 ff7a 	bl	800f25c <lwip_htons>
 800e368:	4603      	mov	r3, r0
 800e36a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e36c:	e003      	b.n	800e376 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800e36e:	2300      	movs	r3, #0
 800e370:	86fb      	strh	r3, [r7, #54]	; 0x36
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800e372:	2300      	movs	r3, #0
 800e374:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800e376:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e378:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800e37a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e37c:	f107 0310 	add.w	r3, r7, #16
 800e380:	68b9      	ldr	r1, [r7, #8]
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe ff82 	bl	800d28c <netbuf_ref>
 800e388:	4603      	mov	r3, r0
 800e38a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800e38e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800e392:	2b00      	cmp	r3, #0
 800e394:	d10a      	bne.n	800e3ac <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800e396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f107 0210 	add.w	r2, r7, #16
 800e39e:	4611      	mov	r1, r2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fc feed 	bl	800b180 <netconn_send>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800e3ac:	f107 0310 	add.w	r3, r7, #16
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fe ff43 	bl	800d23c <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800e3b6:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fe ff00 	bl	800d1c0 <err_to_errno>
 800e3c0:	6278      	str	r0, [r7, #36]	; 0x24
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d002      	beq.n	800e3ce <lwip_sendto+0x13a>
 800e3c8:	4a07      	ldr	r2, [pc, #28]	; (800e3e8 <lwip_sendto+0x154>)
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800e3ce:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d101      	bne.n	800e3da <lwip_sendto+0x146>
 800e3d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e3d8:	e001      	b.n	800e3de <lwip_sendto+0x14a>
 800e3da:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3738      	adds	r7, #56	; 0x38
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	2001b118 	.word	0x2001b118
 800e3ec:	0802310c 	.word	0x0802310c
 800e3f0:	080233ec 	.word	0x080233ec
 800e3f4:	08023160 	.word	0x08023160

0800e3f8 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b086      	sub	sp, #24
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	2b03      	cmp	r3, #3
 800e408:	d009      	beq.n	800e41e <lwip_socket+0x26>
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	2b03      	cmp	r3, #3
 800e40e:	dc23      	bgt.n	800e458 <lwip_socket+0x60>
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d019      	beq.n	800e44a <lwip_socket+0x52>
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	2b02      	cmp	r3, #2
 800e41a:	d009      	beq.n	800e430 <lwip_socket+0x38>
 800e41c:	e01c      	b.n	800e458 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	b2db      	uxtb	r3, r3
 800e422:	4a22      	ldr	r2, [pc, #136]	; (800e4ac <lwip_socket+0xb4>)
 800e424:	4619      	mov	r1, r3
 800e426:	2040      	movs	r0, #64	; 0x40
 800e428:	f7fc fa4a 	bl	800a8c0 <netconn_new_with_proto_and_callback>
 800e42c:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800e42e:	e019      	b.n	800e464 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b88      	cmp	r3, #136	; 0x88
 800e434:	d101      	bne.n	800e43a <lwip_socket+0x42>
 800e436:	2321      	movs	r3, #33	; 0x21
 800e438:	e000      	b.n	800e43c <lwip_socket+0x44>
 800e43a:	2320      	movs	r3, #32
 800e43c:	4a1b      	ldr	r2, [pc, #108]	; (800e4ac <lwip_socket+0xb4>)
 800e43e:	2100      	movs	r1, #0
 800e440:	4618      	mov	r0, r3
 800e442:	f7fc fa3d 	bl	800a8c0 <netconn_new_with_proto_and_callback>
 800e446:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800e448:	e00c      	b.n	800e464 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800e44a:	4a18      	ldr	r2, [pc, #96]	; (800e4ac <lwip_socket+0xb4>)
 800e44c:	2100      	movs	r1, #0
 800e44e:	2010      	movs	r0, #16
 800e450:	f7fc fa36 	bl	800a8c0 <netconn_new_with_proto_and_callback>
 800e454:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800e456:	e005      	b.n	800e464 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800e458:	4b15      	ldr	r3, [pc, #84]	; (800e4b0 <lwip_socket+0xb8>)
 800e45a:	2216      	movs	r2, #22
 800e45c:	601a      	str	r2, [r3, #0]
      return -1;
 800e45e:	f04f 33ff 	mov.w	r3, #4294967295
 800e462:	e01e      	b.n	800e4a2 <lwip_socket+0xaa>
  }

  if (!conn) {
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d105      	bne.n	800e476 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800e46a:	4b11      	ldr	r3, [pc, #68]	; (800e4b0 <lwip_socket+0xb8>)
 800e46c:	2269      	movs	r2, #105	; 0x69
 800e46e:	601a      	str	r2, [r3, #0]
    return -1;
 800e470:	f04f 33ff 	mov.w	r3, #4294967295
 800e474:	e015      	b.n	800e4a2 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800e476:	2100      	movs	r1, #0
 800e478:	6978      	ldr	r0, [r7, #20]
 800e47a:	f7fe ffff 	bl	800d47c <alloc_socket>
 800e47e:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e486:	d108      	bne.n	800e49a <lwip_socket+0xa2>
    netconn_delete(conn);
 800e488:	6978      	ldr	r0, [r7, #20]
 800e48a:	f7fc fab7 	bl	800a9fc <netconn_delete>
    set_errno(ENFILE);
 800e48e:	4b08      	ldr	r3, [pc, #32]	; (800e4b0 <lwip_socket+0xb8>)
 800e490:	2217      	movs	r2, #23
 800e492:	601a      	str	r2, [r3, #0]
    return -1;
 800e494:	f04f 33ff 	mov.w	r3, #4294967295
 800e498:	e003      	b.n	800e4a2 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	693a      	ldr	r2, [r7, #16]
 800e49e:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800e4a0:	693b      	ldr	r3, [r7, #16]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3718      	adds	r7, #24
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	0800ec69 	.word	0x0800ec69
 800e4b0:	2001b118 	.word	0x2001b118

0800e4b4 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800e4bc:	480c      	ldr	r0, [pc, #48]	; (800e4f0 <lwip_link_select_cb+0x3c>)
 800e4be:	f00f fc5d 	bl	801dd7c <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 800e4c2:	4b0c      	ldr	r3, [pc, #48]	; (800e4f4 <lwip_link_select_cb+0x40>)
 800e4c4:	681a      	ldr	r2, [r3, #0]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 800e4ca:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <lwip_link_select_cb+0x40>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 800e4d2:	4b08      	ldr	r3, [pc, #32]	; (800e4f4 <lwip_link_select_cb+0x40>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 800e4da:	4a06      	ldr	r2, [pc, #24]	; (800e4f4 <lwip_link_select_cb+0x40>)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800e4e0:	4803      	ldr	r0, [pc, #12]	; (800e4f0 <lwip_link_select_cb+0x3c>)
 800e4e2:	f00f fc5a 	bl	801dd9a <sys_mutex_unlock>
}
 800e4e6:	bf00      	nop
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	200176d0 	.word	0x200176d0
 800e4f4:	20013e74 	.word	0x20013e74

0800e4f8 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800e500:	481b      	ldr	r0, [pc, #108]	; (800e570 <lwip_unlink_select_cb+0x78>)
 800e502:	f00f fc3b 	bl	801dd7c <sys_mutex_lock>
  if (select_cb->next != NULL) {
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d004      	beq.n	800e518 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	6852      	ldr	r2, [r2, #4]
 800e516:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 800e518:	4b16      	ldr	r3, [pc, #88]	; (800e574 <lwip_unlink_select_cb+0x7c>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d10f      	bne.n	800e542 <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d006      	beq.n	800e538 <lwip_unlink_select_cb+0x40>
 800e52a:	4b13      	ldr	r3, [pc, #76]	; (800e578 <lwip_unlink_select_cb+0x80>)
 800e52c:	f240 720d 	movw	r2, #1805	; 0x70d
 800e530:	4912      	ldr	r1, [pc, #72]	; (800e57c <lwip_unlink_select_cb+0x84>)
 800e532:	4813      	ldr	r0, [pc, #76]	; (800e580 <lwip_unlink_select_cb+0x88>)
 800e534:	f010 fafa 	bl	801eb2c <iprintf>
    select_cb_list = select_cb->next;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a0d      	ldr	r2, [pc, #52]	; (800e574 <lwip_unlink_select_cb+0x7c>)
 800e53e:	6013      	str	r3, [r2, #0]
 800e540:	e00f      	b.n	800e562 <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d106      	bne.n	800e558 <lwip_unlink_select_cb+0x60>
 800e54a:	4b0b      	ldr	r3, [pc, #44]	; (800e578 <lwip_unlink_select_cb+0x80>)
 800e54c:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 800e550:	490c      	ldr	r1, [pc, #48]	; (800e584 <lwip_unlink_select_cb+0x8c>)
 800e552:	480b      	ldr	r0, [pc, #44]	; (800e580 <lwip_unlink_select_cb+0x88>)
 800e554:	f010 faea 	bl	801eb2c <iprintf>
    select_cb->prev->next = select_cb->next;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	6812      	ldr	r2, [r2, #0]
 800e560:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800e562:	4803      	ldr	r0, [pc, #12]	; (800e570 <lwip_unlink_select_cb+0x78>)
 800e564:	f00f fc19 	bl	801dd9a <sys_mutex_unlock>
}
 800e568:	bf00      	nop
 800e56a:	3708      	adds	r7, #8
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	200176d0 	.word	0x200176d0
 800e574:	20013e74 	.word	0x20013e74
 800e578:	0802310c 	.word	0x0802310c
 800e57c:	0802340c 	.word	0x0802340c
 800e580:	08023160 	.word	0x08023160
 800e584:	08023424 	.word	0x08023424

0800e588 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b098      	sub	sp, #96	; 0x60
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 800e59a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e59e:	653b      	str	r3, [r7, #80]	; 0x50
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	657b      	str	r3, [r7, #84]	; 0x54
 800e5a4:	e007      	b.n	800e5b6 <lwip_selscan+0x2e>
 800e5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5a8:	1c5a      	adds	r2, r3, #1
 800e5aa:	653a      	str	r2, [r7, #80]	; 0x50
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	701a      	strb	r2, [r3, #0]
 800e5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	657b      	str	r3, [r7, #84]	; 0x54
 800e5b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5b8:	2b07      	cmp	r3, #7
 800e5ba:	d9f4      	bls.n	800e5a6 <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 800e5bc:	f107 031c 	add.w	r3, r7, #28
 800e5c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5c6:	e007      	b.n	800e5d8 <lwip_selscan+0x50>
 800e5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5ca:	1c5a      	adds	r2, r3, #1
 800e5cc:	64ba      	str	r2, [r7, #72]	; 0x48
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	701a      	strb	r2, [r3, #0]
 800e5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5da:	2b07      	cmp	r3, #7
 800e5dc:	d9f4      	bls.n	800e5c8 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 800e5de:	f107 0314 	add.w	r3, r7, #20
 800e5e2:	643b      	str	r3, [r7, #64]	; 0x40
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e5e8:	e007      	b.n	800e5fa <lwip_selscan+0x72>
 800e5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ec:	1c5a      	adds	r2, r3, #1
 800e5ee:	643a      	str	r2, [r7, #64]	; 0x40
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	701a      	strb	r2, [r3, #0]
 800e5f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	647b      	str	r3, [r7, #68]	; 0x44
 800e5fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5fc:	2b07      	cmp	r3, #7
 800e5fe:	d9f4      	bls.n	800e5ea <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800e600:	2300      	movs	r3, #0
 800e602:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e604:	e0e1      	b.n	800e7ca <lwip_selscan+0x242>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d00d      	beq.n	800e628 <lwip_selscan+0xa0>
 800e60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e60e:	095a      	lsrs	r2, r3, #5
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e616:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e618:	f002 021f 	and.w	r2, r2, #31
 800e61c:	2101      	movs	r1, #1
 800e61e:	fa01 f202 	lsl.w	r2, r1, r2
 800e622:	4013      	ands	r3, r2
 800e624:	2b00      	cmp	r3, #0
 800e626:	d123      	bne.n	800e670 <lwip_selscan+0xe8>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00d      	beq.n	800e64a <lwip_selscan+0xc2>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 800e62e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e630:	095a      	lsrs	r2, r3, #5
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e63a:	f002 021f 	and.w	r2, r2, #31
 800e63e:	2101      	movs	r1, #1
 800e640:	fa01 f202 	lsl.w	r2, r1, r2
 800e644:	4013      	ands	r3, r2
 800e646:	2b00      	cmp	r3, #0
 800e648:	d112      	bne.n	800e670 <lwip_selscan+0xe8>
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f000 80b8 	beq.w	800e7c2 <lwip_selscan+0x23a>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 800e652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e654:	095a      	lsrs	r2, r3, #5
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e65c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e65e:	f002 021f 	and.w	r2, r2, #31
 800e662:	2101      	movs	r1, #1
 800e664:	fa01 f202 	lsl.w	r2, r1, r2
 800e668:	4013      	ands	r3, r2
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f000 80a9 	beq.w	800e7c2 <lwip_selscan+0x23a>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 800e670:	f00f fbbe 	bl	801ddf0 <sys_arch_protect>
 800e674:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 800e676:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e678:	f7fe fec5 	bl	800d406 <tryget_socket_unconn_locked>
 800e67c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 800e67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 8098 	beq.w	800e7b6 <lwip_selscan+0x22e>
      void *lastdata = sock->lastdata.pbuf;
 800e686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 800e68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68e:	891b      	ldrh	r3, [r3, #8]
 800e690:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 800e692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e694:	895b      	ldrh	r3, [r3, #10]
 800e696:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 800e698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e69a:	899b      	ldrh	r3, [r3, #12]
 800e69c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 800e69e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e6a0:	f00f fbb4 	bl	801de0c <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d02c      	beq.n	800e704 <lwip_selscan+0x17c>
 800e6aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6ac:	095a      	lsrs	r2, r3, #5
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e6b6:	f002 021f 	and.w	r2, r2, #31
 800e6ba:	2101      	movs	r1, #1
 800e6bc:	fa01 f202 	lsl.w	r2, r1, r2
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d01e      	beq.n	800e704 <lwip_selscan+0x17c>
 800e6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d103      	bne.n	800e6d4 <lwip_selscan+0x14c>
 800e6cc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	dd17      	ble.n	800e704 <lwip_selscan+0x17c>
        FD_SET(i, &lreadset);
 800e6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6d6:	095a      	lsrs	r2, r3, #5
 800e6d8:	0093      	lsls	r3, r2, #2
 800e6da:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800e6de:	440b      	add	r3, r1
 800e6e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e6e4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e6e6:	f001 011f 	and.w	r1, r1, #31
 800e6ea:	2001      	movs	r0, #1
 800e6ec:	fa00 f101 	lsl.w	r1, r0, r1
 800e6f0:	4319      	orrs	r1, r3
 800e6f2:	0093      	lsls	r3, r2, #2
 800e6f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e6f8:	4413      	add	r3, r2
 800e6fa:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 800e6fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e700:	3301      	adds	r3, #1
 800e702:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d028      	beq.n	800e75c <lwip_selscan+0x1d4>
 800e70a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e70c:	095a      	lsrs	r2, r3, #5
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e716:	f002 021f 	and.w	r2, r2, #31
 800e71a:	2101      	movs	r1, #1
 800e71c:	fa01 f202 	lsl.w	r2, r1, r2
 800e720:	4013      	ands	r3, r2
 800e722:	2b00      	cmp	r3, #0
 800e724:	d01a      	beq.n	800e75c <lwip_selscan+0x1d4>
 800e726:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d017      	beq.n	800e75c <lwip_selscan+0x1d4>
        FD_SET(i, &lwriteset);
 800e72c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e72e:	095a      	lsrs	r2, r3, #5
 800e730:	0093      	lsls	r3, r2, #2
 800e732:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800e736:	440b      	add	r3, r1
 800e738:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e73c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e73e:	f001 011f 	and.w	r1, r1, #31
 800e742:	2001      	movs	r0, #1
 800e744:	fa00 f101 	lsl.w	r1, r0, r1
 800e748:	4319      	orrs	r1, r3
 800e74a:	0093      	lsls	r3, r2, #2
 800e74c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e750:	4413      	add	r3, r2
 800e752:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 800e756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e758:	3301      	adds	r3, #1
 800e75a:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d030      	beq.n	800e7c4 <lwip_selscan+0x23c>
 800e762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e764:	095a      	lsrs	r2, r3, #5
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e76c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e76e:	f002 021f 	and.w	r2, r2, #31
 800e772:	2101      	movs	r1, #1
 800e774:	fa01 f202 	lsl.w	r2, r1, r2
 800e778:	4013      	ands	r3, r2
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d022      	beq.n	800e7c4 <lwip_selscan+0x23c>
 800e77e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e780:	2b00      	cmp	r3, #0
 800e782:	d01f      	beq.n	800e7c4 <lwip_selscan+0x23c>
        FD_SET(i, &lexceptset);
 800e784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e786:	095a      	lsrs	r2, r3, #5
 800e788:	0093      	lsls	r3, r2, #2
 800e78a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800e78e:	440b      	add	r3, r1
 800e790:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800e794:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e796:	f001 011f 	and.w	r1, r1, #31
 800e79a:	2001      	movs	r0, #1
 800e79c:	fa00 f101 	lsl.w	r1, r0, r1
 800e7a0:	4319      	orrs	r1, r3
 800e7a2:	0093      	lsls	r3, r2, #2
 800e7a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e7a8:	4413      	add	r3, r2
 800e7aa:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 800e7ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e7b4:	e006      	b.n	800e7c4 <lwip_selscan+0x23c>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 800e7b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e7b8:	f00f fb28 	bl	801de0c <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 800e7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e7c0:	e02b      	b.n	800e81a <lwip_selscan+0x292>
      continue;
 800e7c2:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800e7c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	f6ff af19 	blt.w	800e606 <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 800e7d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e7e0:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 800e7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	f107 031c 	add.w	r3, r7, #28
 800e7ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e7f0:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 800e7f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	f107 0314 	add.w	r3, r7, #20
 800e7fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e800:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 800e804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e806:	2b00      	cmp	r3, #0
 800e808:	da06      	bge.n	800e818 <lwip_selscan+0x290>
 800e80a:	4b06      	ldr	r3, [pc, #24]	; (800e824 <lwip_selscan+0x29c>)
 800e80c:	f240 7269 	movw	r2, #1897	; 0x769
 800e810:	4905      	ldr	r1, [pc, #20]	; (800e828 <lwip_selscan+0x2a0>)
 800e812:	4806      	ldr	r0, [pc, #24]	; (800e82c <lwip_selscan+0x2a4>)
 800e814:	f010 f98a 	bl	801eb2c <iprintf>
  return nready;
 800e818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3760      	adds	r7, #96	; 0x60
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	0802310c 	.word	0x0802310c
 800e828:	0802343c 	.word	0x0802343c
 800e82c:	08023160 	.word	0x08023160

0800e830 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b0a0      	sub	sp, #128	; 0x80
 800e834:	af04      	add	r7, sp, #16
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
 800e83c:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 800e83e:	2300      	movs	r3, #0
 800e840:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	db02      	blt.n	800e84e <lwip_select+0x1e>
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2b40      	cmp	r3, #64	; 0x40
 800e84c:	dd05      	ble.n	800e85a <lwip_select+0x2a>
    set_errno(EINVAL);
 800e84e:	4b84      	ldr	r3, [pc, #528]	; (800ea60 <lwip_select+0x230>)
 800e850:	2216      	movs	r2, #22
 800e852:	601a      	str	r2, [r3, #0]
    return -1;
 800e854:	f04f 33ff 	mov.w	r3, #4294967295
 800e858:	e1b5      	b.n	800ebc6 <lwip_select+0x396>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800e85a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e85e:	9302      	str	r3, [sp, #8]
 800e860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e864:	9301      	str	r3, [sp, #4]
 800e866:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	68b9      	ldr	r1, [r7, #8]
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f7ff fe88 	bl	800e588 <lwip_selscan>
 800e878:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 800e87a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	da05      	bge.n	800e88c <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 800e880:	4b77      	ldr	r3, [pc, #476]	; (800ea60 <lwip_select+0x230>)
 800e882:	2209      	movs	r2, #9
 800e884:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 800e886:	f04f 33ff 	mov.w	r3, #4294967295
 800e88a:	e19c      	b.n	800ebc6 <lwip_select+0x396>
  } else if (nready > 0) {
 800e88c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e88e:	2b00      	cmp	r3, #0
 800e890:	f300 8177 	bgt.w	800eb82 <lwip_select+0x352>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 800e894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e896:	2b00      	cmp	r3, #0
 800e898:	d009      	beq.n	800e8ae <lwip_select+0x7e>
 800e89a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	d104      	bne.n	800e8ae <lwip_select+0x7e>
 800e8a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f000 8169 	beq.w	800eb80 <lwip_select+0x350>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 800e8ae:	f107 0310 	add.w	r3, r7, #16
 800e8b2:	2224      	movs	r2, #36	; 0x24
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f00f fc1c 	bl	801e0f4 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 800e8c8:	f107 0310 	add.w	r3, r7, #16
 800e8cc:	3320      	adds	r3, #32
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f00f f99c 	bl	801dc0e <sys_sem_new>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d005      	beq.n	800e8e8 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 800e8dc:	4b60      	ldr	r3, [pc, #384]	; (800ea60 <lwip_select+0x230>)
 800e8de:	220c      	movs	r2, #12
 800e8e0:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 800e8e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e6:	e16e      	b.n	800ebc6 <lwip_select+0x396>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800e8e8:	f107 0310 	add.w	r3, r7, #16
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff fde1 	bl	800e4b4 <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	663b      	str	r3, [r7, #96]	; 0x60
 800e8fa:	e06b      	b.n	800e9d4 <lwip_select+0x1a4>
        if ((readset && FD_ISSET(i, readset)) ||
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00d      	beq.n	800e91e <lwip_select+0xee>
 800e902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e904:	095a      	lsrs	r2, r3, #5
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e90c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e90e:	f002 021f 	and.w	r2, r2, #31
 800e912:	2101      	movs	r1, #1
 800e914:	fa01 f202 	lsl.w	r2, r1, r2
 800e918:	4013      	ands	r3, r2
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d121      	bne.n	800e962 <lwip_select+0x132>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00d      	beq.n	800e940 <lwip_select+0x110>
            (writeset && FD_ISSET(i, writeset)) ||
 800e924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e926:	095a      	lsrs	r2, r3, #5
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e92e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e930:	f002 021f 	and.w	r2, r2, #31
 800e934:	2101      	movs	r1, #1
 800e936:	fa01 f202 	lsl.w	r2, r1, r2
 800e93a:	4013      	ands	r3, r2
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d110      	bne.n	800e962 <lwip_select+0x132>
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d043      	beq.n	800e9ce <lwip_select+0x19e>
            (exceptset && FD_ISSET(i, exceptset))) {
 800e946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e948:	095a      	lsrs	r2, r3, #5
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e952:	f002 021f 	and.w	r2, r2, #31
 800e956:	2101      	movs	r1, #1
 800e958:	fa01 f202 	lsl.w	r2, r1, r2
 800e95c:	4013      	ands	r3, r2
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d035      	beq.n	800e9ce <lwip_select+0x19e>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800e962:	f00f fa45 	bl	801ddf0 <sys_arch_protect>
 800e966:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800e968:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e96a:	f7fe fd4c 	bl	800d406 <tryget_socket_unconn_locked>
 800e96e:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 800e970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e972:	2b00      	cmp	r3, #0
 800e974:	d01f      	beq.n	800e9b6 <lwip_select+0x186>
            sock->select_waiting++;
 800e976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e978:	7b9b      	ldrb	r3, [r3, #14]
 800e97a:	3301      	adds	r3, #1
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e980:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 800e982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e984:	7b9b      	ldrb	r3, [r3, #14]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d111      	bne.n	800e9ae <lwip_select+0x17e>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 800e98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e98c:	7b9b      	ldrb	r3, [r3, #14]
 800e98e:	3b01      	subs	r3, #1
 800e990:	b2da      	uxtb	r2, r3
 800e992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e994:	739a      	strb	r2, [r3, #14]
              nready = -1;
 800e996:	f04f 33ff 	mov.w	r3, #4294967295
 800e99a:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 800e99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e99e:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 800e9a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e9a2:	f00f fa33 	bl	801de0c <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 800e9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ea60 <lwip_select+0x230>)
 800e9a8:	2210      	movs	r2, #16
 800e9aa:	601a      	str	r2, [r3, #0]
              break;
 800e9ac:	e016      	b.n	800e9dc <lwip_select+0x1ac>
            }
            SYS_ARCH_UNPROTECT(lev);
 800e9ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e9b0:	f00f fa2c 	bl	801de0c <sys_arch_unprotect>
 800e9b4:	e00b      	b.n	800e9ce <lwip_select+0x19e>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 800e9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ba:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 800e9bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9be:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 800e9c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e9c2:	f00f fa23 	bl	801de0c <sys_arch_unprotect>
            set_errno(EBADF);
 800e9c6:	4b26      	ldr	r3, [pc, #152]	; (800ea60 <lwip_select+0x230>)
 800e9c8:	2209      	movs	r2, #9
 800e9ca:	601a      	str	r2, [r3, #0]
            break;
 800e9cc:	e006      	b.n	800e9dc <lwip_select+0x1ac>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800e9ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	663b      	str	r3, [r7, #96]	; 0x60
 800e9d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	db8f      	blt.n	800e8fc <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 800e9dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	db3b      	blt.n	800ea5a <lwip_select+0x22a>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800e9e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e9e6:	9302      	str	r3, [sp, #8]
 800e9e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e9ec:	9301      	str	r3, [sp, #4]
 800e9ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	68b9      	ldr	r1, [r7, #8]
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f7ff fdc4 	bl	800e588 <lwip_selscan>
 800ea00:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 800ea02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d128      	bne.n	800ea5a <lwip_select+0x22a>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 800ea08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d102      	bne.n	800ea14 <lwip_select+0x1e4>
            /* Wait forever */
            msectimeout = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	667b      	str	r3, [r7, #100]	; 0x64
 800ea12:	e01a      	b.n	800ea4a <lwip_select+0x21a>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 800ea14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea1e:	fb03 f202 	mul.w	r2, r3, r2
 800ea22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ea2a:	490e      	ldr	r1, [pc, #56]	; (800ea64 <lwip_select+0x234>)
 800ea2c:	fb81 0103 	smull	r0, r1, r1, r3
 800ea30:	1189      	asrs	r1, r1, #6
 800ea32:	17db      	asrs	r3, r3, #31
 800ea34:	1acb      	subs	r3, r1, r3
 800ea36:	4413      	add	r3, r2
 800ea38:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 800ea3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	dc02      	bgt.n	800ea46 <lwip_select+0x216>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 800ea40:	2301      	movs	r3, #1
 800ea42:	667b      	str	r3, [r7, #100]	; 0x64
 800ea44:	e001      	b.n	800ea4a <lwip_select+0x21a>
            } else {
              msectimeout = (u32_t)msecs_long;
 800ea46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea48:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 800ea4a:	f107 0310 	add.w	r3, r7, #16
 800ea4e:	3320      	adds	r3, #32
 800ea50:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ea52:	4618      	mov	r0, r3
 800ea54:	f00f f901 	bl	801dc5a <sys_arch_sem_wait>
 800ea58:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	663b      	str	r3, [r7, #96]	; 0x60
 800ea5e:	e065      	b.n	800eb2c <lwip_select+0x2fc>
 800ea60:	2001b118 	.word	0x2001b118
 800ea64:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00d      	beq.n	800ea8a <lwip_select+0x25a>
 800ea6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea70:	095a      	lsrs	r2, r3, #5
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea7a:	f002 021f 	and.w	r2, r2, #31
 800ea7e:	2101      	movs	r1, #1
 800ea80:	fa01 f202 	lsl.w	r2, r1, r2
 800ea84:	4013      	ands	r3, r2
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d121      	bne.n	800eace <lwip_select+0x29e>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00d      	beq.n	800eaac <lwip_select+0x27c>
            (writeset && FD_ISSET(i, writeset)) ||
 800ea90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea92:	095a      	lsrs	r2, r3, #5
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea9c:	f002 021f 	and.w	r2, r2, #31
 800eaa0:	2101      	movs	r1, #1
 800eaa2:	fa01 f202 	lsl.w	r2, r1, r2
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d110      	bne.n	800eace <lwip_select+0x29e>
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d039      	beq.n	800eb26 <lwip_select+0x2f6>
            (exceptset && FD_ISSET(i, exceptset))) {
 800eab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eab4:	095a      	lsrs	r2, r3, #5
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eabc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eabe:	f002 021f 	and.w	r2, r2, #31
 800eac2:	2101      	movs	r1, #1
 800eac4:	fa01 f202 	lsl.w	r2, r1, r2
 800eac8:	4013      	ands	r3, r2
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d02b      	beq.n	800eb26 <lwip_select+0x2f6>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800eace:	f00f f98f 	bl	801ddf0 <sys_arch_protect>
 800ead2:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800ead4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ead6:	f7fe fc96 	bl	800d406 <tryget_socket_unconn_locked>
 800eada:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 800eadc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d018      	beq.n	800eb14 <lwip_select+0x2e4>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 800eae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eae4:	7b9b      	ldrb	r3, [r3, #14]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d106      	bne.n	800eaf8 <lwip_select+0x2c8>
 800eaea:	4b39      	ldr	r3, [pc, #228]	; (800ebd0 <lwip_select+0x3a0>)
 800eaec:	f640 023c 	movw	r2, #2108	; 0x83c
 800eaf0:	4938      	ldr	r1, [pc, #224]	; (800ebd4 <lwip_select+0x3a4>)
 800eaf2:	4839      	ldr	r0, [pc, #228]	; (800ebd8 <lwip_select+0x3a8>)
 800eaf4:	f010 f81a 	bl	801eb2c <iprintf>
            if (sock->select_waiting > 0) {
 800eaf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eafa:	7b9b      	ldrb	r3, [r3, #14]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d005      	beq.n	800eb0c <lwip_select+0x2dc>
              sock->select_waiting--;
 800eb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb02:	7b9b      	ldrb	r3, [r3, #14]
 800eb04:	3b01      	subs	r3, #1
 800eb06:	b2da      	uxtb	r2, r3
 800eb08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb0a:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 800eb0c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eb0e:	f00f f97d 	bl	801de0c <sys_arch_unprotect>
 800eb12:	e008      	b.n	800eb26 <lwip_select+0x2f6>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 800eb14:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800eb16:	f00f f979 	bl	801de0c <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 800eb1a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb1e:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 800eb20:	4b2e      	ldr	r3, [pc, #184]	; (800ebdc <lwip_select+0x3ac>)
 800eb22:	2209      	movs	r2, #9
 800eb24:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800eb26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb28:	3301      	adds	r3, #1
 800eb2a:	663b      	str	r3, [r7, #96]	; 0x60
 800eb2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb30:	429a      	cmp	r2, r3
 800eb32:	db99      	blt.n	800ea68 <lwip_select+0x238>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800eb34:	f107 0310 	add.w	r3, r7, #16
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fcdd 	bl	800e4f8 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 800eb3e:	f107 0310 	add.w	r3, r7, #16
 800eb42:	3320      	adds	r3, #32
 800eb44:	4618      	mov	r0, r3
 800eb46:	f00f f8c6 	bl	801dcd6 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 800eb4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	da02      	bge.n	800eb56 <lwip_select+0x326>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 800eb50:	f04f 33ff 	mov.w	r3, #4294967295
 800eb54:	e037      	b.n	800ebc6 <lwip_select+0x396>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 800eb56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5c:	d011      	beq.n	800eb82 <lwip_select+0x352>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800eb5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eb62:	9302      	str	r3, [sp, #8]
 800eb64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	68b9      	ldr	r1, [r7, #8]
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f7ff fd06 	bl	800e588 <lwip_selscan>
 800eb7c:	66b8      	str	r0, [r7, #104]	; 0x68
 800eb7e:	e000      	b.n	800eb82 <lwip_select+0x352>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
 800eb80:	bf00      	nop
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d007      	beq.n	800eb98 <lwip_select+0x368>
    *readset = lreadset;
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800eb90:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eb94:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d007      	beq.n	800ebae <lwip_select+0x37e>
    *writeset = lwriteset;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	461a      	mov	r2, r3
 800eba2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eba6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ebaa:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d007      	beq.n	800ebc4 <lwip_select+0x394>
    *exceptset = lexceptset;
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ebbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ebc0:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 800ebc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3770      	adds	r7, #112	; 0x70
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	0802310c 	.word	0x0802310c
 800ebd4:	08023448 	.word	0x08023448
 800ebd8:	08023160 	.word	0x08023160
 800ebdc:	2001b118 	.word	0x2001b118

0800ebe0 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b087      	sub	sp, #28
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ebee:	2300      	movs	r3, #0
 800ebf0:	617b      	str	r3, [r7, #20]
 800ebf2:	e02c      	b.n	800ec4e <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	695a      	ldr	r2, [r3, #20]
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	00db      	lsls	r3, r3, #3
 800ebfc:	4413      	add	r3, r2
 800ebfe:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d11e      	bne.n	800ec48 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d009      	beq.n	800ec24 <lwip_poll_should_wake+0x44>
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	f003 0301 	and.w	r3, r3, #1
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d001      	beq.n	800ec24 <lwip_poll_should_wake+0x44>
        return 1;
 800ec20:	2301      	movs	r3, #1
 800ec22:	e01a      	b.n	800ec5a <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d009      	beq.n	800ec3e <lwip_poll_should_wake+0x5e>
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	f003 0302 	and.w	r3, r3, #2
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <lwip_poll_should_wake+0x5e>
        return 1;
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e00d      	b.n	800ec5a <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800ec44:	2301      	movs	r3, #1
 800ec46:	e008      	b.n	800ec5a <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	617b      	str	r3, [r7, #20]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	699b      	ldr	r3, [r3, #24]
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d3cd      	bcc.n	800ebf4 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	371c      	adds	r7, #28
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr
	...

0800ec68 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08a      	sub	sp, #40	; 0x28
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	460b      	mov	r3, r1
 800ec72:	70fb      	strb	r3, [r7, #3]
 800ec74:	4613      	mov	r3, r2
 800ec76:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f000 80a4 	beq.w	800edc8 <event_callback+0x160>
    s = conn->socket;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	699b      	ldr	r3, [r3, #24]
 800ec84:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800ec86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	da18      	bge.n	800ecbe <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800ec8c:	f00f f8b0 	bl	801ddf0 <sys_arch_protect>
 800ec90:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	699b      	ldr	r3, [r3, #24]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	da0b      	bge.n	800ecb2 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800ec9a:	78fb      	ldrb	r3, [r7, #3]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d104      	bne.n	800ecaa <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	699b      	ldr	r3, [r3, #24]
 800eca4:	1e5a      	subs	r2, r3, #1
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ecaa:	69f8      	ldr	r0, [r7, #28]
 800ecac:	f00f f8ae 	bl	801de0c <sys_arch_unprotect>
        return;
 800ecb0:	e08d      	b.n	800edce <event_callback+0x166>
      }
      s = conn->socket;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	699b      	ldr	r3, [r3, #24]
 800ecb6:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ecb8:	69f8      	ldr	r0, [r7, #28]
 800ecba:	f00f f8a7 	bl	801de0c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800ecbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecc0:	f7fe fbc4 	bl	800d44c <get_socket>
 800ecc4:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d07f      	beq.n	800edcc <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800eccc:	2301      	movs	r3, #1
 800ecce:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800ecd0:	f00f f88e 	bl	801ddf0 <sys_arch_protect>
 800ecd4:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800ecd6:	78fb      	ldrb	r3, [r7, #3]
 800ecd8:	2b04      	cmp	r3, #4
 800ecda:	d83e      	bhi.n	800ed5a <event_callback+0xf2>
 800ecdc:	a201      	add	r2, pc, #4	; (adr r2, 800ece4 <event_callback+0x7c>)
 800ecde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece2:	bf00      	nop
 800ece4:	0800ecf9 	.word	0x0800ecf9
 800ece8:	0800ed1b 	.word	0x0800ed1b
 800ecec:	0800ed33 	.word	0x0800ed33
 800ecf0:	0800ed47 	.word	0x0800ed47
 800ecf4:	0800ed53 	.word	0x0800ed53
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	3301      	adds	r3, #1
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	b21a      	sxth	r2, r3
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	dd2a      	ble.n	800ed6a <event_callback+0x102>
        check_waiters = 0;
 800ed14:	2300      	movs	r3, #0
 800ed16:	623b      	str	r3, [r7, #32]
      }
      break;
 800ed18:	e027      	b.n	800ed6a <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	3b01      	subs	r3, #1
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	b21a      	sxth	r2, r3
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	623b      	str	r3, [r7, #32]
      break;
 800ed30:	e01c      	b.n	800ed6c <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	895b      	ldrh	r3, [r3, #10]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <event_callback+0xd6>
        check_waiters = 0;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	2201      	movs	r2, #1
 800ed42:	815a      	strh	r2, [r3, #10]
      break;
 800ed44:	e012      	b.n	800ed6c <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	623b      	str	r3, [r7, #32]
      break;
 800ed50:	e00c      	b.n	800ed6c <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	2201      	movs	r2, #1
 800ed56:	819a      	strh	r2, [r3, #12]
      break;
 800ed58:	e008      	b.n	800ed6c <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800ed5a:	4b1e      	ldr	r3, [pc, #120]	; (800edd4 <event_callback+0x16c>)
 800ed5c:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800ed60:	491d      	ldr	r1, [pc, #116]	; (800edd8 <event_callback+0x170>)
 800ed62:	481e      	ldr	r0, [pc, #120]	; (800eddc <event_callback+0x174>)
 800ed64:	f00f fee2 	bl	801eb2c <iprintf>
      break;
 800ed68:	e000      	b.n	800ed6c <event_callback+0x104>
      break;
 800ed6a:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	7b9b      	ldrb	r3, [r3, #14]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d025      	beq.n	800edc0 <event_callback+0x158>
 800ed74:	6a3b      	ldr	r3, [r7, #32]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d022      	beq.n	800edc0 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	bfcc      	ite	gt
 800ed84:	2301      	movgt	r3, #1
 800ed86:	2300      	movle	r3, #0
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	895b      	ldrh	r3, [r3, #10]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	bf14      	ite	ne
 800ed94:	2301      	movne	r3, #1
 800ed96:	2300      	moveq	r3, #0
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800ed9c:	69bb      	ldr	r3, [r7, #24]
 800ed9e:	899b      	ldrh	r3, [r3, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	bf14      	ite	ne
 800eda4:	2301      	movne	r3, #1
 800eda6:	2300      	moveq	r3, #0
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800edac:	69f8      	ldr	r0, [r7, #28]
 800edae:	f00f f82d 	bl	801de0c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	693a      	ldr	r2, [r7, #16]
 800edb6:	6979      	ldr	r1, [r7, #20]
 800edb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edba:	f000 f811 	bl	800ede0 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800edbe:	e006      	b.n	800edce <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800edc0:	69f8      	ldr	r0, [r7, #28]
 800edc2:	f00f f823 	bl	801de0c <sys_arch_unprotect>
 800edc6:	e002      	b.n	800edce <event_callback+0x166>
    return;
 800edc8:	bf00      	nop
 800edca:	e000      	b.n	800edce <event_callback+0x166>
      return;
 800edcc:	bf00      	nop
  }
  done_socket(sock);
}
 800edce:	3728      	adds	r7, #40	; 0x28
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	0802310c 	.word	0x0802310c
 800edd8:	08023488 	.word	0x08023488
 800eddc:	08023160 	.word	0x08023160

0800ede0 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b088      	sub	sp, #32
 800ede4:	af02      	add	r7, sp, #8
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
 800edec:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800edee:	4b3e      	ldr	r3, [pc, #248]	; (800eee8 <select_check_waiters+0x108>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	617b      	str	r3, [r7, #20]
 800edf4:	e06f      	b.n	800eed6 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	69db      	ldr	r3, [r3, #28]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d168      	bne.n	800eed0 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	695b      	ldr	r3, [r3, #20]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d009      	beq.n	800ee1e <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	68f9      	ldr	r1, [r7, #12]
 800ee14:	6978      	ldr	r0, [r7, #20]
 800ee16:	f7ff fee3 	bl	800ebe0 <lwip_poll_should_wake>
 800ee1a:	6138      	str	r0, [r7, #16]
 800ee1c:	e04d      	b.n	800eeba <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d014      	beq.n	800ee4e <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d010      	beq.n	800ee4e <select_check_waiters+0x6e>
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	689b      	ldr	r3, [r3, #8]
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	0952      	lsrs	r2, r2, #5
 800ee34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee38:	68fa      	ldr	r2, [r7, #12]
 800ee3a:	f002 021f 	and.w	r2, r2, #31
 800ee3e:	2101      	movs	r1, #1
 800ee40:	fa01 f202 	lsl.w	r2, r1, r2
 800ee44:	4013      	ands	r3, r2
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d001      	beq.n	800ee4e <select_check_waiters+0x6e>
            do_signal = 1;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d017      	beq.n	800ee84 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d114      	bne.n	800ee84 <select_check_waiters+0xa4>
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d010      	beq.n	800ee84 <select_check_waiters+0xa4>
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	68fa      	ldr	r2, [r7, #12]
 800ee68:	0952      	lsrs	r2, r2, #5
 800ee6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	f002 021f 	and.w	r2, r2, #31
 800ee74:	2101      	movs	r1, #1
 800ee76:	fa01 f202 	lsl.w	r2, r1, r2
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d001      	beq.n	800ee84 <select_check_waiters+0xa4>
            do_signal = 1;
 800ee80:	2301      	movs	r3, #1
 800ee82:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d017      	beq.n	800eeba <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d114      	bne.n	800eeba <select_check_waiters+0xda>
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	691b      	ldr	r3, [r3, #16]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d010      	beq.n	800eeba <select_check_waiters+0xda>
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	691b      	ldr	r3, [r3, #16]
 800ee9c:	68fa      	ldr	r2, [r7, #12]
 800ee9e:	0952      	lsrs	r2, r2, #5
 800eea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	f002 021f 	and.w	r2, r2, #31
 800eeaa:	2101      	movs	r1, #1
 800eeac:	fa01 f202 	lsl.w	r2, r1, r2
 800eeb0:	4013      	ands	r3, r2
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d001      	beq.n	800eeba <select_check_waiters+0xda>
            do_signal = 1;
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d007      	beq.n	800eed0 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2201      	movs	r2, #1
 800eec4:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	3320      	adds	r3, #32
 800eeca:	4618      	mov	r0, r3
 800eecc:	f00e fef6 	bl	801dcbc <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	617b      	str	r3, [r7, #20]
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d18c      	bne.n	800edf6 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800eedc:	bf00      	nop
 800eede:	bf00      	nop
 800eee0:	3718      	adds	r7, #24
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	20013e74 	.word	0x20013e74

0800eeec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800eef6:	f009 fcdf 	bl	80188b8 <sys_timeouts_sleeptime>
 800eefa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef02:	d10b      	bne.n	800ef1c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ef04:	4813      	ldr	r0, [pc, #76]	; (800ef54 <tcpip_timeouts_mbox_fetch+0x68>)
 800ef06:	f00e ff48 	bl	801dd9a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	6839      	ldr	r1, [r7, #0]
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f00e fe04 	bl	801db1c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ef14:	480f      	ldr	r0, [pc, #60]	; (800ef54 <tcpip_timeouts_mbox_fetch+0x68>)
 800ef16:	f00e ff31 	bl	801dd7c <sys_mutex_lock>
    return;
 800ef1a:	e018      	b.n	800ef4e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d102      	bne.n	800ef28 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ef22:	f009 fc8f 	bl	8018844 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ef26:	e7e6      	b.n	800eef6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ef28:	480a      	ldr	r0, [pc, #40]	; (800ef54 <tcpip_timeouts_mbox_fetch+0x68>)
 800ef2a:	f00e ff36 	bl	801dd9a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	6839      	ldr	r1, [r7, #0]
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f00e fdf2 	bl	801db1c <sys_arch_mbox_fetch>
 800ef38:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ef3a:	4806      	ldr	r0, [pc, #24]	; (800ef54 <tcpip_timeouts_mbox_fetch+0x68>)
 800ef3c:	f00e ff1e 	bl	801dd7c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef46:	d102      	bne.n	800ef4e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ef48:	f009 fc7c 	bl	8018844 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ef4c:	e7d3      	b.n	800eef6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	200176d0 	.word	0x200176d0

0800ef58 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ef60:	4810      	ldr	r0, [pc, #64]	; (800efa4 <tcpip_thread+0x4c>)
 800ef62:	f00e ff0b 	bl	801dd7c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ef66:	4b10      	ldr	r3, [pc, #64]	; (800efa8 <tcpip_thread+0x50>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d005      	beq.n	800ef7a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ef6e:	4b0e      	ldr	r3, [pc, #56]	; (800efa8 <tcpip_thread+0x50>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a0e      	ldr	r2, [pc, #56]	; (800efac <tcpip_thread+0x54>)
 800ef74:	6812      	ldr	r2, [r2, #0]
 800ef76:	4610      	mov	r0, r2
 800ef78:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ef7a:	f107 030c 	add.w	r3, r7, #12
 800ef7e:	4619      	mov	r1, r3
 800ef80:	480b      	ldr	r0, [pc, #44]	; (800efb0 <tcpip_thread+0x58>)
 800ef82:	f7ff ffb3 	bl	800eeec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d106      	bne.n	800ef9a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ef8c:	4b09      	ldr	r3, [pc, #36]	; (800efb4 <tcpip_thread+0x5c>)
 800ef8e:	2291      	movs	r2, #145	; 0x91
 800ef90:	4909      	ldr	r1, [pc, #36]	; (800efb8 <tcpip_thread+0x60>)
 800ef92:	480a      	ldr	r0, [pc, #40]	; (800efbc <tcpip_thread+0x64>)
 800ef94:	f00f fdca 	bl	801eb2c <iprintf>
      continue;
 800ef98:	e003      	b.n	800efa2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 f80f 	bl	800efc0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800efa2:	e7ea      	b.n	800ef7a <tcpip_thread+0x22>
 800efa4:	200176d0 	.word	0x200176d0
 800efa8:	20013e78 	.word	0x20013e78
 800efac:	20013e7c 	.word	0x20013e7c
 800efb0:	20013e80 	.word	0x20013e80
 800efb4:	080234dc 	.word	0x080234dc
 800efb8:	0802350c 	.word	0x0802350c
 800efbc:	0802352c 	.word	0x0802352c

0800efc0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	2b02      	cmp	r3, #2
 800efce:	d026      	beq.n	800f01e <tcpip_thread_handle_msg+0x5e>
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	dc2b      	bgt.n	800f02c <tcpip_thread_handle_msg+0x6c>
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <tcpip_thread_handle_msg+0x1e>
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d015      	beq.n	800f008 <tcpip_thread_handle_msg+0x48>
 800efdc:	e026      	b.n	800f02c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	6850      	ldr	r0, [r2, #4]
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	6892      	ldr	r2, [r2, #8]
 800efea:	4611      	mov	r1, r2
 800efec:	4798      	blx	r3
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d004      	beq.n	800effe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	4618      	mov	r0, r3
 800effa:	f002 fcef 	bl	80119dc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800effe:	6879      	ldr	r1, [r7, #4]
 800f000:	2009      	movs	r0, #9
 800f002:	f001 fe09 	bl	8010c18 <memp_free>
      break;
 800f006:	e018      	b.n	800f03a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	6892      	ldr	r2, [r2, #8]
 800f010:	4610      	mov	r0, r2
 800f012:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f014:	6879      	ldr	r1, [r7, #4]
 800f016:	2008      	movs	r0, #8
 800f018:	f001 fdfe 	bl	8010c18 <memp_free>
      break;
 800f01c:	e00d      	b.n	800f03a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	6892      	ldr	r2, [r2, #8]
 800f026:	4610      	mov	r0, r2
 800f028:	4798      	blx	r3
      break;
 800f02a:	e006      	b.n	800f03a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f02c:	4b05      	ldr	r3, [pc, #20]	; (800f044 <tcpip_thread_handle_msg+0x84>)
 800f02e:	22cf      	movs	r2, #207	; 0xcf
 800f030:	4905      	ldr	r1, [pc, #20]	; (800f048 <tcpip_thread_handle_msg+0x88>)
 800f032:	4806      	ldr	r0, [pc, #24]	; (800f04c <tcpip_thread_handle_msg+0x8c>)
 800f034:	f00f fd7a 	bl	801eb2c <iprintf>
      break;
 800f038:	bf00      	nop
  }
}
 800f03a:	bf00      	nop
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	080234dc 	.word	0x080234dc
 800f048:	0802350c 	.word	0x0802350c
 800f04c:	0802352c 	.word	0x0802352c

0800f050 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f05c:	481a      	ldr	r0, [pc, #104]	; (800f0c8 <tcpip_inpkt+0x78>)
 800f05e:	f00e fdb8 	bl	801dbd2 <sys_mbox_valid>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d105      	bne.n	800f074 <tcpip_inpkt+0x24>
 800f068:	4b18      	ldr	r3, [pc, #96]	; (800f0cc <tcpip_inpkt+0x7c>)
 800f06a:	22fc      	movs	r2, #252	; 0xfc
 800f06c:	4918      	ldr	r1, [pc, #96]	; (800f0d0 <tcpip_inpkt+0x80>)
 800f06e:	4819      	ldr	r0, [pc, #100]	; (800f0d4 <tcpip_inpkt+0x84>)
 800f070:	f00f fd5c 	bl	801eb2c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f074:	2009      	movs	r0, #9
 800f076:	f001 fd7d 	bl	8010b74 <memp_malloc>
 800f07a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d102      	bne.n	800f088 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f082:	f04f 33ff 	mov.w	r3, #4294967295
 800f086:	e01a      	b.n	800f0be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2200      	movs	r2, #0
 800f08c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	68fa      	ldr	r2, [r7, #12]
 800f092:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	68ba      	ldr	r2, [r7, #8]
 800f098:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f0a0:	6979      	ldr	r1, [r7, #20]
 800f0a2:	4809      	ldr	r0, [pc, #36]	; (800f0c8 <tcpip_inpkt+0x78>)
 800f0a4:	f00e fd20 	bl	801dae8 <sys_mbox_trypost>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d006      	beq.n	800f0bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f0ae:	6979      	ldr	r1, [r7, #20]
 800f0b0:	2009      	movs	r0, #9
 800f0b2:	f001 fdb1 	bl	8010c18 <memp_free>
    return ERR_MEM;
 800f0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ba:	e000      	b.n	800f0be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f0bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3718      	adds	r7, #24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	20013e80 	.word	0x20013e80
 800f0cc:	080234dc 	.word	0x080234dc
 800f0d0:	08023554 	.word	0x08023554
 800f0d4:	0802352c 	.word	0x0802352c

0800f0d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f0e8:	f003 0318 	and.w	r3, r3, #24
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d006      	beq.n	800f0fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f0f0:	4a08      	ldr	r2, [pc, #32]	; (800f114 <tcpip_input+0x3c>)
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7ff ffab 	bl	800f050 <tcpip_inpkt>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	e005      	b.n	800f10a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f0fe:	4a06      	ldr	r2, [pc, #24]	; (800f118 <tcpip_input+0x40>)
 800f100:	6839      	ldr	r1, [r7, #0]
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7ff ffa4 	bl	800f050 <tcpip_inpkt>
 800f108:	4603      	mov	r3, r0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	0801d8dd 	.word	0x0801d8dd
 800f118:	0801c561 	.word	0x0801c561

0800f11c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b084      	sub	sp, #16
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f126:	4819      	ldr	r0, [pc, #100]	; (800f18c <tcpip_try_callback+0x70>)
 800f128:	f00e fd53 	bl	801dbd2 <sys_mbox_valid>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d106      	bne.n	800f140 <tcpip_try_callback+0x24>
 800f132:	4b17      	ldr	r3, [pc, #92]	; (800f190 <tcpip_try_callback+0x74>)
 800f134:	f240 125d 	movw	r2, #349	; 0x15d
 800f138:	4916      	ldr	r1, [pc, #88]	; (800f194 <tcpip_try_callback+0x78>)
 800f13a:	4817      	ldr	r0, [pc, #92]	; (800f198 <tcpip_try_callback+0x7c>)
 800f13c:	f00f fcf6 	bl	801eb2c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f140:	2008      	movs	r0, #8
 800f142:	f001 fd17 	bl	8010b74 <memp_malloc>
 800f146:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d102      	bne.n	800f154 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f14e:	f04f 33ff 	mov.w	r3, #4294967295
 800f152:	e017      	b.n	800f184 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2201      	movs	r2, #1
 800f158:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	683a      	ldr	r2, [r7, #0]
 800f164:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f166:	68f9      	ldr	r1, [r7, #12]
 800f168:	4808      	ldr	r0, [pc, #32]	; (800f18c <tcpip_try_callback+0x70>)
 800f16a:	f00e fcbd 	bl	801dae8 <sys_mbox_trypost>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d006      	beq.n	800f182 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f174:	68f9      	ldr	r1, [r7, #12]
 800f176:	2008      	movs	r0, #8
 800f178:	f001 fd4e 	bl	8010c18 <memp_free>
    return ERR_MEM;
 800f17c:	f04f 33ff 	mov.w	r3, #4294967295
 800f180:	e000      	b.n	800f184 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f182:	2300      	movs	r3, #0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	20013e80 	.word	0x20013e80
 800f190:	080234dc 	.word	0x080234dc
 800f194:	08023554 	.word	0x08023554
 800f198:	0802352c 	.word	0x0802352c

0800f19c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f1a8:	4806      	ldr	r0, [pc, #24]	; (800f1c4 <tcpip_send_msg_wait_sem+0x28>)
 800f1aa:	f00e fde7 	bl	801dd7c <sys_mutex_lock>
  fn(apimsg);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	68b8      	ldr	r0, [r7, #8]
 800f1b2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f1b4:	4803      	ldr	r0, [pc, #12]	; (800f1c4 <tcpip_send_msg_wait_sem+0x28>)
 800f1b6:	f00e fdf0 	bl	801dd9a <sys_mutex_unlock>
  return ERR_OK;
 800f1ba:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3710      	adds	r7, #16
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	200176d0 	.word	0x200176d0

0800f1c8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af02      	add	r7, sp, #8
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f1d2:	f001 f845 	bl	8010260 <lwip_init>

  tcpip_init_done = initfunc;
 800f1d6:	4a17      	ldr	r2, [pc, #92]	; (800f234 <tcpip_init+0x6c>)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f1dc:	4a16      	ldr	r2, [pc, #88]	; (800f238 <tcpip_init+0x70>)
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f1e2:	2106      	movs	r1, #6
 800f1e4:	4815      	ldr	r0, [pc, #84]	; (800f23c <tcpip_init+0x74>)
 800f1e6:	f00e fc4f 	bl	801da88 <sys_mbox_new>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d006      	beq.n	800f1fe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f1f0:	4b13      	ldr	r3, [pc, #76]	; (800f240 <tcpip_init+0x78>)
 800f1f2:	f240 2261 	movw	r2, #609	; 0x261
 800f1f6:	4913      	ldr	r1, [pc, #76]	; (800f244 <tcpip_init+0x7c>)
 800f1f8:	4813      	ldr	r0, [pc, #76]	; (800f248 <tcpip_init+0x80>)
 800f1fa:	f00f fc97 	bl	801eb2c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f1fe:	4813      	ldr	r0, [pc, #76]	; (800f24c <tcpip_init+0x84>)
 800f200:	f00e fda2 	bl	801dd48 <sys_mutex_new>
 800f204:	4603      	mov	r3, r0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d006      	beq.n	800f218 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f20a:	4b0d      	ldr	r3, [pc, #52]	; (800f240 <tcpip_init+0x78>)
 800f20c:	f240 2265 	movw	r2, #613	; 0x265
 800f210:	490f      	ldr	r1, [pc, #60]	; (800f250 <tcpip_init+0x88>)
 800f212:	480d      	ldr	r0, [pc, #52]	; (800f248 <tcpip_init+0x80>)
 800f214:	f00f fc8a 	bl	801eb2c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f218:	2300      	movs	r3, #0
 800f21a:	9300      	str	r3, [sp, #0]
 800f21c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f220:	2200      	movs	r2, #0
 800f222:	490c      	ldr	r1, [pc, #48]	; (800f254 <tcpip_init+0x8c>)
 800f224:	480c      	ldr	r0, [pc, #48]	; (800f258 <tcpip_init+0x90>)
 800f226:	f00e fdc5 	bl	801ddb4 <sys_thread_new>
}
 800f22a:	bf00      	nop
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	20013e78 	.word	0x20013e78
 800f238:	20013e7c 	.word	0x20013e7c
 800f23c:	20013e80 	.word	0x20013e80
 800f240:	080234dc 	.word	0x080234dc
 800f244:	08023564 	.word	0x08023564
 800f248:	0802352c 	.word	0x0802352c
 800f24c:	200176d0 	.word	0x200176d0
 800f250:	08023588 	.word	0x08023588
 800f254:	0800ef59 	.word	0x0800ef59
 800f258:	080235ac 	.word	0x080235ac

0800f25c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
 800f262:	4603      	mov	r3, r0
 800f264:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f266:	88fb      	ldrh	r3, [r7, #6]
 800f268:	021b      	lsls	r3, r3, #8
 800f26a:	b21a      	sxth	r2, r3
 800f26c:	88fb      	ldrh	r3, [r7, #6]
 800f26e:	0a1b      	lsrs	r3, r3, #8
 800f270:	b29b      	uxth	r3, r3
 800f272:	b21b      	sxth	r3, r3
 800f274:	4313      	orrs	r3, r2
 800f276:	b21b      	sxth	r3, r3
 800f278:	b29b      	uxth	r3, r3
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	370c      	adds	r7, #12
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr

0800f286 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f286:	b480      	push	{r7}
 800f288:	b083      	sub	sp, #12
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	061a      	lsls	r2, r3, #24
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	021b      	lsls	r3, r3, #8
 800f296:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f29a:	431a      	orrs	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	0a1b      	lsrs	r3, r3, #8
 800f2a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f2a4:	431a      	orrs	r2, r3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	0e1b      	lsrs	r3, r3, #24
 800f2aa:	4313      	orrs	r3, r2
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr

0800f2b8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b087      	sub	sp, #28
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	1c5a      	adds	r2, r3, #1
 800f2c8:	60fa      	str	r2, [r7, #12]
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	1c5a      	adds	r2, r3, #1
 800f2d2:	60ba      	str	r2, [r7, #8]
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 800f2d8:	7dfa      	ldrb	r2, [r7, #23]
 800f2da:	7dbb      	ldrb	r3, [r7, #22]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d016      	beq.n	800f30e <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 800f2e0:	7dfb      	ldrb	r3, [r7, #23]
 800f2e2:	f043 0320 	orr.w	r3, r3, #32
 800f2e6:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800f2e8:	7d7b      	ldrb	r3, [r7, #21]
 800f2ea:	2b60      	cmp	r3, #96	; 0x60
 800f2ec:	d90c      	bls.n	800f308 <lwip_strnicmp+0x50>
 800f2ee:	7d7b      	ldrb	r3, [r7, #21]
 800f2f0:	2b7a      	cmp	r3, #122	; 0x7a
 800f2f2:	d809      	bhi.n	800f308 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800f2f4:	7dbb      	ldrb	r3, [r7, #22]
 800f2f6:	f043 0320 	orr.w	r3, r3, #32
 800f2fa:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 800f2fc:	7d7a      	ldrb	r2, [r7, #21]
 800f2fe:	7d3b      	ldrb	r3, [r7, #20]
 800f300:	429a      	cmp	r2, r3
 800f302:	d003      	beq.n	800f30c <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800f304:	2301      	movs	r3, #1
 800f306:	e00c      	b.n	800f322 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800f308:	2301      	movs	r3, #1
 800f30a:	e00a      	b.n	800f322 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800f30c:	bf00      	nop
      }
    }
    len--;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	3b01      	subs	r3, #1
 800f312:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d002      	beq.n	800f320 <lwip_strnicmp+0x68>
 800f31a:	7dfb      	ldrb	r3, [r7, #23]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1d1      	bne.n	800f2c4 <lwip_strnicmp+0xc>
  return 0;
 800f320:	2300      	movs	r3, #0
}
 800f322:	4618      	mov	r0, r3
 800f324:	371c      	adds	r7, #28
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr

0800f32e <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800f32e:	b480      	push	{r7}
 800f330:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800f332:	bf00      	nop
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	4603      	mov	r3, r0
 800f344:	6039      	str	r1, [r7, #0]
 800f346:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800f348:	79fb      	ldrb	r3, [r7, #7]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d80f      	bhi.n	800f36e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d006      	beq.n	800f362 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800f354:	79fb      	ldrb	r3, [r7, #7]
 800f356:	4909      	ldr	r1, [pc, #36]	; (800f37c <dns_setserver+0x40>)
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	6812      	ldr	r2, [r2, #0]
 800f35c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800f360:	e005      	b.n	800f36e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800f362:	79fb      	ldrb	r3, [r7, #7]
 800f364:	4905      	ldr	r1, [pc, #20]	; (800f37c <dns_setserver+0x40>)
 800f366:	4a06      	ldr	r2, [pc, #24]	; (800f380 <dns_setserver+0x44>)
 800f368:	6812      	ldr	r2, [r2, #0]
 800f36a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f36e:	bf00      	nop
 800f370:	370c      	adds	r7, #12
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	20014308 	.word	0x20014308
 800f380:	080267a0 	.word	0x080267a0

0800f384 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800f388:	f000 fc54 	bl	800fc34 <dns_check_entries>
}
 800f38c:	bf00      	nop
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f39a:	2300      	movs	r3, #0
 800f39c:	73fb      	strb	r3, [r7, #15]
 800f39e:	e02e      	b.n	800f3fe <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800f3a0:	7bfa      	ldrb	r2, [r7, #15]
 800f3a2:	491b      	ldr	r1, [pc, #108]	; (800f410 <dns_lookup+0x80>)
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	011b      	lsls	r3, r3, #4
 800f3a8:	4413      	add	r3, r2
 800f3aa:	011b      	lsls	r3, r3, #4
 800f3ac:	440b      	add	r3, r1
 800f3ae:	330a      	adds	r3, #10
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	2b03      	cmp	r3, #3
 800f3b4:	d120      	bne.n	800f3f8 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 800f3b6:	7bfa      	ldrb	r2, [r7, #15]
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	011b      	lsls	r3, r3, #4
 800f3bc:	4413      	add	r3, r2
 800f3be:	011b      	lsls	r3, r3, #4
 800f3c0:	3310      	adds	r3, #16
 800f3c2:	4a13      	ldr	r2, [pc, #76]	; (800f410 <dns_lookup+0x80>)
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7ff ff73 	bl	800f2b8 <lwip_strnicmp>
 800f3d2:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d10f      	bne.n	800f3f8 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00a      	beq.n	800f3f4 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 800f3de:	7bfa      	ldrb	r2, [r7, #15]
 800f3e0:	490b      	ldr	r1, [pc, #44]	; (800f410 <dns_lookup+0x80>)
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	011b      	lsls	r3, r3, #4
 800f3e6:	4413      	add	r3, r2
 800f3e8:	011b      	lsls	r3, r3, #4
 800f3ea:	440b      	add	r3, r1
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	e007      	b.n	800f408 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f3f8:	7bfb      	ldrb	r3, [r7, #15]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	73fb      	strb	r3, [r7, #15]
 800f3fe:	7bfb      	ldrb	r3, [r7, #15]
 800f400:	2b03      	cmp	r3, #3
 800f402:	d9cd      	bls.n	800f3a0 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 800f404:	f06f 030f 	mvn.w	r3, #15
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	20013e98 	.word	0x20013e98

0800f414 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b088      	sub	sp, #32
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	4613      	mov	r3, r2
 800f420:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 800f422:	88fb      	ldrh	r3, [r7, #6]
 800f424:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 800f426:	8b7b      	ldrh	r3, [r7, #26]
 800f428:	4619      	mov	r1, r3
 800f42a:	68b8      	ldr	r0, [r7, #8]
 800f42c:	f002 feb8 	bl	80121a0 <pbuf_try_get_at>
 800f430:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	2b00      	cmp	r3, #0
 800f436:	db04      	blt.n	800f442 <dns_compare_name+0x2e>
 800f438:	8b7b      	ldrh	r3, [r7, #26]
 800f43a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f43e:	4293      	cmp	r3, r2
 800f440:	d102      	bne.n	800f448 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 800f442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f446:	e06c      	b.n	800f522 <dns_compare_name+0x10e>
    }
    response_offset++;
 800f448:	8b7b      	ldrh	r3, [r7, #26]
 800f44a:	3301      	adds	r3, #1
 800f44c:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f454:	2bc0      	cmp	r3, #192	; 0xc0
 800f456:	d144      	bne.n	800f4e2 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 800f458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f45c:	e061      	b.n	800f522 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 800f45e:	8b7b      	ldrh	r3, [r7, #26]
 800f460:	4619      	mov	r1, r3
 800f462:	68b8      	ldr	r0, [r7, #8]
 800f464:	f002 fe9c 	bl	80121a0 <pbuf_try_get_at>
 800f468:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	da02      	bge.n	800f476 <dns_compare_name+0x62>
          return 0xFFFF;
 800f470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f474:	e055      	b.n	800f522 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	74fb      	strb	r3, [r7, #19]
 800f47c:	7cfb      	ldrb	r3, [r7, #19]
 800f47e:	3301      	adds	r3, #1
 800f480:	4a2a      	ldr	r2, [pc, #168]	; (800f52c <dns_compare_name+0x118>)
 800f482:	4413      	add	r3, r2
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	f003 0303 	and.w	r3, r3, #3
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d103      	bne.n	800f496 <dns_compare_name+0x82>
 800f48e:	7cfb      	ldrb	r3, [r7, #19]
 800f490:	f103 0220 	add.w	r2, r3, #32
 800f494:	e000      	b.n	800f498 <dns_compare_name+0x84>
 800f496:	7cfa      	ldrb	r2, [r7, #19]
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	74bb      	strb	r3, [r7, #18]
 800f49c:	7cbb      	ldrb	r3, [r7, #18]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	4922      	ldr	r1, [pc, #136]	; (800f52c <dns_compare_name+0x118>)
 800f4a2:	440b      	add	r3, r1
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	f003 0303 	and.w	r3, r3, #3
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d102      	bne.n	800f4b4 <dns_compare_name+0xa0>
 800f4ae:	7cbb      	ldrb	r3, [r7, #18]
 800f4b0:	3320      	adds	r3, #32
 800f4b2:	e000      	b.n	800f4b6 <dns_compare_name+0xa2>
 800f4b4:	7cbb      	ldrb	r3, [r7, #18]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d002      	beq.n	800f4c0 <dns_compare_name+0xac>
          return 0xFFFF;
 800f4ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4be:	e030      	b.n	800f522 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 800f4c0:	8b7b      	ldrh	r3, [r7, #26]
 800f4c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d102      	bne.n	800f4d0 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 800f4ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4ce:	e028      	b.n	800f522 <dns_compare_name+0x10e>
        }
        response_offset++;
 800f4d0:	8b7b      	ldrh	r3, [r7, #26]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	837b      	strh	r3, [r7, #26]
        ++query;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	60fb      	str	r3, [r7, #12]
        --n;
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	3b01      	subs	r3, #1
 800f4e0:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	dcba      	bgt.n	800f45e <dns_compare_name+0x4a>
      }
      ++query;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 800f4ee:	8b7b      	ldrh	r3, [r7, #26]
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	68b8      	ldr	r0, [r7, #8]
 800f4f4:	f002 fe54 	bl	80121a0 <pbuf_try_get_at>
 800f4f8:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 800f4fa:	69fb      	ldr	r3, [r7, #28]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	da02      	bge.n	800f506 <dns_compare_name+0xf2>
      return 0xFFFF;
 800f500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f504:	e00d      	b.n	800f522 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d18c      	bne.n	800f426 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 800f50c:	8b7b      	ldrh	r3, [r7, #26]
 800f50e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f512:	4293      	cmp	r3, r2
 800f514:	d102      	bne.n	800f51c <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 800f516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f51a:	e002      	b.n	800f522 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 800f51c:	8b7b      	ldrh	r3, [r7, #26]
 800f51e:	3301      	adds	r3, #1
 800f520:	b29b      	uxth	r3, r3
}
 800f522:	4618      	mov	r0, r3
 800f524:	3720      	adds	r7, #32
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	080267bc 	.word	0x080267bc

0800f530 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	460b      	mov	r3, r1
 800f53a:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 800f53c:	887b      	ldrh	r3, [r7, #2]
 800f53e:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 800f540:	89fb      	ldrh	r3, [r7, #14]
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	81fa      	strh	r2, [r7, #14]
 800f546:	4619      	mov	r1, r3
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f002 fe29 	bl	80121a0 <pbuf_try_get_at>
 800f54e:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	2b00      	cmp	r3, #0
 800f554:	db02      	blt.n	800f55c <dns_skip_name+0x2c>
 800f556:	89fb      	ldrh	r3, [r7, #14]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d102      	bne.n	800f562 <dns_skip_name+0x32>
      return 0xFFFF;
 800f55c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f560:	e02f      	b.n	800f5c2 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f568:	2bc0      	cmp	r3, #192	; 0xc0
 800f56a:	d01e      	beq.n	800f5aa <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 800f56c:	89fa      	ldrh	r2, [r7, #14]
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	4413      	add	r3, r2
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	8912      	ldrh	r2, [r2, #8]
 800f576:	4293      	cmp	r3, r2
 800f578:	db02      	blt.n	800f580 <dns_skip_name+0x50>
        return 0xFFFF;
 800f57a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f57e:	e020      	b.n	800f5c2 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	b29a      	uxth	r2, r3
 800f584:	89fb      	ldrh	r3, [r7, #14]
 800f586:	4413      	add	r3, r2
 800f588:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 800f58a:	89fb      	ldrh	r3, [r7, #14]
 800f58c:	4619      	mov	r1, r3
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f002 fe06 	bl	80121a0 <pbuf_try_get_at>
 800f594:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	da02      	bge.n	800f5a2 <dns_skip_name+0x72>
      return 0xFFFF;
 800f59c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5a0:	e00f      	b.n	800f5c2 <dns_skip_name+0x92>
    }
  } while (n != 0);
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1cb      	bne.n	800f540 <dns_skip_name+0x10>
 800f5a8:	e000      	b.n	800f5ac <dns_skip_name+0x7c>
      break;
 800f5aa:	bf00      	nop

  if (offset == 0xFFFF) {
 800f5ac:	89fb      	ldrh	r3, [r7, #14]
 800f5ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d102      	bne.n	800f5bc <dns_skip_name+0x8c>
    return 0xFFFF;
 800f5b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5ba:	e002      	b.n	800f5c2 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 800f5bc:	89fb      	ldrh	r3, [r7, #14]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	b29b      	uxth	r3, r3
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
	...

0800f5cc <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b090      	sub	sp, #64	; 0x40
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800f5d6:	79fa      	ldrb	r2, [r7, #7]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	011b      	lsls	r3, r3, #4
 800f5dc:	4413      	add	r3, r2
 800f5de:	011b      	lsls	r3, r3, #4
 800f5e0:	4a6c      	ldr	r2, [pc, #432]	; (800f794 <dns_send+0x1c8>)
 800f5e2:	4413      	add	r3, r2
 800f5e4:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800f5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e8:	7adb      	ldrb	r3, [r3, #11]
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d906      	bls.n	800f5fc <dns_send+0x30>
 800f5ee:	4b6a      	ldr	r3, [pc, #424]	; (800f798 <dns_send+0x1cc>)
 800f5f0:	f240 22fa 	movw	r2, #762	; 0x2fa
 800f5f4:	4969      	ldr	r1, [pc, #420]	; (800f79c <dns_send+0x1d0>)
 800f5f6:	486a      	ldr	r0, [pc, #424]	; (800f7a0 <dns_send+0x1d4>)
 800f5f8:	f00f fa98 	bl	801eb2c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800f5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fe:	7adb      	ldrb	r3, [r3, #11]
 800f600:	461a      	mov	r2, r3
 800f602:	4b68      	ldr	r3, [pc, #416]	; (800f7a4 <dns_send+0x1d8>)
 800f604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d109      	bne.n	800f620 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	2100      	movs	r1, #0
 800f610:	4618      	mov	r0, r3
 800f612:	f000 f959 	bl	800f8c8 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800f616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f618:	2200      	movs	r2, #0
 800f61a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800f61c:	2300      	movs	r3, #0
 800f61e:	e0b4      	b.n	800f78a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800f620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f622:	3310      	adds	r3, #16
 800f624:	4618      	mov	r0, r3
 800f626:	f7f0 fdd3 	bl	80001d0 <strlen>
 800f62a:	4603      	mov	r3, r0
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	3312      	adds	r3, #18
 800f630:	b29b      	uxth	r3, r3
 800f632:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f636:	4619      	mov	r1, r3
 800f638:	2036      	movs	r0, #54	; 0x36
 800f63a:	f001 feb9 	bl	80113b0 <pbuf_alloc>
 800f63e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800f640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f642:	2b00      	cmp	r3, #0
 800f644:	f000 8095 	beq.w	800f772 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800f648:	f107 0310 	add.w	r3, r7, #16
 800f64c:	220c      	movs	r2, #12
 800f64e:	2100      	movs	r1, #0
 800f650:	4618      	mov	r0, r3
 800f652:	f00e fd4f 	bl	801e0f4 <memset>
    hdr.id = lwip_htons(entry->txid);
 800f656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f658:	891b      	ldrh	r3, [r3, #8]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7ff fdfe 	bl	800f25c <lwip_htons>
 800f660:	4603      	mov	r3, r0
 800f662:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800f664:	2301      	movs	r3, #1
 800f666:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800f668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f66c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800f66e:	f107 0310 	add.w	r3, r7, #16
 800f672:	220c      	movs	r2, #12
 800f674:	4619      	mov	r1, r3
 800f676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f678:	f002 fc64 	bl	8011f44 <pbuf_take>
    hostname = entry->name;
 800f67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67e:	3310      	adds	r3, #16
 800f680:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800f682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f684:	3b01      	subs	r3, #1
 800f686:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800f688:	230c      	movs	r3, #12
 800f68a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800f68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68e:	3301      	adds	r3, #1
 800f690:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800f692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f694:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f696:	2300      	movs	r3, #0
 800f698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f69c:	e007      	b.n	800f6ae <dns_send+0xe2>
        ++n;
 800f69e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800f6b4:	d003      	beq.n	800f6be <dns_send+0xf2>
 800f6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1ef      	bne.n	800f69e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800f6be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c2:	1ad3      	subs	r3, r2, r3
 800f6c4:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800f6c6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800f6c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6cc:	4413      	add	r3, r2
 800f6ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	dc53      	bgt.n	800f77e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800f6d6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f6da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6dc:	4619      	mov	r1, r3
 800f6de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6e0:	f002 fd80 	bl	80121e4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800f6e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f6ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6f0:	f002 fcba 	bl	8012068 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800f6f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f6fc:	4413      	add	r3, r2
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	3301      	adds	r3, #1
 800f702:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800f704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d1bf      	bne.n	800f68c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800f70c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f70e:	2200      	movs	r2, #0
 800f710:	4619      	mov	r1, r3
 800f712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f714:	f002 fd66 	bl	80121e4 <pbuf_put_at>
    query_idx++;
 800f718:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f71a:	3301      	adds	r3, #1
 800f71c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800f71e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f722:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800f724:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f728:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800f72a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f72c:	f107 010c 	add.w	r1, r7, #12
 800f730:	2204      	movs	r2, #4
 800f732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f734:	f002 fc98 	bl	8012068 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	7bdb      	ldrb	r3, [r3, #15]
 800f73c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800f740:	2335      	movs	r3, #53	; 0x35
 800f742:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	7adb      	ldrb	r3, [r3, #11]
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	4a16      	ldr	r2, [pc, #88]	; (800f7a4 <dns_send+0x1d8>)
 800f74c:	4413      	add	r3, r2
 800f74e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800f750:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f754:	4a14      	ldr	r2, [pc, #80]	; (800f7a8 <dns_send+0x1dc>)
 800f756:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f75a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f75c:	69fa      	ldr	r2, [r7, #28]
 800f75e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f760:	f009 fad8 	bl	8018d14 <udp_sendto>
 800f764:	4603      	mov	r3, r0
 800f766:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800f76a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f76c:	f002 f936 	bl	80119dc <pbuf_free>
 800f770:	e002      	b.n	800f778 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800f772:	23ff      	movs	r3, #255	; 0xff
 800f774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800f778:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f77c:	e005      	b.n	800f78a <dns_send+0x1be>
        goto overflow_return;
 800f77e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800f780:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f782:	f002 f92b 	bl	80119dc <pbuf_free>
  return ERR_VAL;
 800f786:	f06f 0305 	mvn.w	r3, #5
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3740      	adds	r7, #64	; 0x40
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	20013e98 	.word	0x20013e98
 800f798:	080235bc 	.word	0x080235bc
 800f79c:	080235ec 	.word	0x080235ec
 800f7a0:	08023604 	.word	0x08023604
 800f7a4:	20014308 	.word	0x20014308
 800f7a8:	20013e84 	.word	0x20013e84

0800f7ac <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800f7b2:	202e      	movs	r0, #46	; 0x2e
 800f7b4:	f009 fdfb 	bl	80193ae <udp_new_ip_type>
 800f7b8:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d101      	bne.n	800f7c4 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	e026      	b.n	800f812 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 800f7c4:	f00f fa40 	bl	801ec48 <rand>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 800f7cc:	88fb      	ldrh	r3, [r7, #6]
 800f7ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7d2:	d308      	bcc.n	800f7e6 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 800f7d4:	88fb      	ldrh	r3, [r7, #6]
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	4910      	ldr	r1, [pc, #64]	; (800f81c <dns_alloc_random_port+0x70>)
 800f7da:	68b8      	ldr	r0, [r7, #8]
 800f7dc:	f009 fc50 	bl	8019080 <udp_bind>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	73fb      	strb	r3, [r7, #15]
 800f7e4:	e001      	b.n	800f7ea <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 800f7e6:	23f8      	movs	r3, #248	; 0xf8
 800f7e8:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 800f7ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7ee:	f113 0f08 	cmn.w	r3, #8
 800f7f2:	d0e7      	beq.n	800f7c4 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 800f7f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d004      	beq.n	800f806 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 800f7fc:	68b8      	ldr	r0, [r7, #8]
 800f7fe:	f009 fd7d 	bl	80192fc <udp_remove>
    return NULL;
 800f802:	2300      	movs	r3, #0
 800f804:	e005      	b.n	800f812 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 800f806:	2200      	movs	r2, #0
 800f808:	4905      	ldr	r1, [pc, #20]	; (800f820 <dns_alloc_random_port+0x74>)
 800f80a:	68b8      	ldr	r0, [r7, #8]
 800f80c:	f009 fd56 	bl	80192bc <udp_recv>
  return pcb;
 800f810:	68bb      	ldr	r3, [r7, #8]
}
 800f812:	4618      	mov	r0, r3
 800f814:	3710      	adds	r7, #16
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	080267a0 	.word	0x080267a0
 800f820:	0800fccd 	.word	0x0800fccd

0800f824 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 800f824:	b590      	push	{r4, r7, lr}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800f82a:	2300      	movs	r3, #0
 800f82c:	71fb      	strb	r3, [r7, #7]
 800f82e:	e008      	b.n	800f842 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	4a23      	ldr	r2, [pc, #140]	; (800f8c0 <dns_alloc_pcb+0x9c>)
 800f834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d006      	beq.n	800f84a <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800f83c:	79fb      	ldrb	r3, [r7, #7]
 800f83e:	3301      	adds	r3, #1
 800f840:	71fb      	strb	r3, [r7, #7]
 800f842:	79fb      	ldrb	r3, [r7, #7]
 800f844:	2b03      	cmp	r3, #3
 800f846:	d9f3      	bls.n	800f830 <dns_alloc_pcb+0xc>
 800f848:	e000      	b.n	800f84c <dns_alloc_pcb+0x28>
      break;
 800f84a:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 800f84c:	79fb      	ldrb	r3, [r7, #7]
 800f84e:	2b03      	cmp	r3, #3
 800f850:	d811      	bhi.n	800f876 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 800f852:	79fc      	ldrb	r4, [r7, #7]
 800f854:	f7ff ffaa 	bl	800f7ac <dns_alloc_random_port>
 800f858:	4603      	mov	r3, r0
 800f85a:	4a19      	ldr	r2, [pc, #100]	; (800f8c0 <dns_alloc_pcb+0x9c>)
 800f85c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 800f860:	79fb      	ldrb	r3, [r7, #7]
 800f862:	4a17      	ldr	r2, [pc, #92]	; (800f8c0 <dns_alloc_pcb+0x9c>)
 800f864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d004      	beq.n	800f876 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 800f86c:	4a15      	ldr	r2, [pc, #84]	; (800f8c4 <dns_alloc_pcb+0xa0>)
 800f86e:	79fb      	ldrb	r3, [r7, #7]
 800f870:	7013      	strb	r3, [r2, #0]
      return i;
 800f872:	79fb      	ldrb	r3, [r7, #7]
 800f874:	e020      	b.n	800f8b8 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800f876:	2300      	movs	r3, #0
 800f878:	71fb      	strb	r3, [r7, #7]
 800f87a:	4b12      	ldr	r3, [pc, #72]	; (800f8c4 <dns_alloc_pcb+0xa0>)
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	3301      	adds	r3, #1
 800f880:	71bb      	strb	r3, [r7, #6]
 800f882:	e015      	b.n	800f8b0 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 800f884:	79bb      	ldrb	r3, [r7, #6]
 800f886:	2b03      	cmp	r3, #3
 800f888:	d901      	bls.n	800f88e <dns_alloc_pcb+0x6a>
      idx = 0;
 800f88a:	2300      	movs	r3, #0
 800f88c:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 800f88e:	79bb      	ldrb	r3, [r7, #6]
 800f890:	4a0b      	ldr	r2, [pc, #44]	; (800f8c0 <dns_alloc_pcb+0x9c>)
 800f892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d004      	beq.n	800f8a4 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 800f89a:	4a0a      	ldr	r2, [pc, #40]	; (800f8c4 <dns_alloc_pcb+0xa0>)
 800f89c:	79bb      	ldrb	r3, [r7, #6]
 800f89e:	7013      	strb	r3, [r2, #0]
      return idx;
 800f8a0:	79bb      	ldrb	r3, [r7, #6]
 800f8a2:	e009      	b.n	800f8b8 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800f8a4:	79fb      	ldrb	r3, [r7, #7]
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	71fb      	strb	r3, [r7, #7]
 800f8aa:	79bb      	ldrb	r3, [r7, #6]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	71bb      	strb	r3, [r7, #6]
 800f8b0:	79fb      	ldrb	r3, [r7, #7]
 800f8b2:	2b03      	cmp	r3, #3
 800f8b4:	d9e6      	bls.n	800f884 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 800f8b6:	2304      	movs	r3, #4
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd90      	pop	{r4, r7, pc}
 800f8c0:	20013e84 	.word	0x20013e84
 800f8c4:	20013e94 	.word	0x20013e94

0800f8c8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800f8c8:	b590      	push	{r4, r7, lr}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	6039      	str	r1, [r7, #0]
 800f8d2:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	73fb      	strb	r3, [r7, #15]
 800f8d8:	e03d      	b.n	800f956 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800f8da:	7bfa      	ldrb	r2, [r7, #15]
 800f8dc:	4957      	ldr	r1, [pc, #348]	; (800fa3c <dns_call_found+0x174>)
 800f8de:	4613      	mov	r3, r2
 800f8e0:	005b      	lsls	r3, r3, #1
 800f8e2:	4413      	add	r3, r2
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	440b      	add	r3, r1
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d030      	beq.n	800f950 <dns_call_found+0x88>
 800f8ee:	7bfa      	ldrb	r2, [r7, #15]
 800f8f0:	4952      	ldr	r1, [pc, #328]	; (800fa3c <dns_call_found+0x174>)
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	005b      	lsls	r3, r3, #1
 800f8f6:	4413      	add	r3, r2
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	440b      	add	r3, r1
 800f8fc:	3308      	adds	r3, #8
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	79fa      	ldrb	r2, [r7, #7]
 800f902:	429a      	cmp	r2, r3
 800f904:	d124      	bne.n	800f950 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800f906:	7bfa      	ldrb	r2, [r7, #15]
 800f908:	494c      	ldr	r1, [pc, #304]	; (800fa3c <dns_call_found+0x174>)
 800f90a:	4613      	mov	r3, r2
 800f90c:	005b      	lsls	r3, r3, #1
 800f90e:	4413      	add	r3, r2
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	440b      	add	r3, r1
 800f914:	681c      	ldr	r4, [r3, #0]
 800f916:	79fa      	ldrb	r2, [r7, #7]
 800f918:	4613      	mov	r3, r2
 800f91a:	011b      	lsls	r3, r3, #4
 800f91c:	4413      	add	r3, r2
 800f91e:	011b      	lsls	r3, r3, #4
 800f920:	3310      	adds	r3, #16
 800f922:	4a47      	ldr	r2, [pc, #284]	; (800fa40 <dns_call_found+0x178>)
 800f924:	1898      	adds	r0, r3, r2
 800f926:	7bfa      	ldrb	r2, [r7, #15]
 800f928:	4944      	ldr	r1, [pc, #272]	; (800fa3c <dns_call_found+0x174>)
 800f92a:	4613      	mov	r3, r2
 800f92c:	005b      	lsls	r3, r3, #1
 800f92e:	4413      	add	r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	440b      	add	r3, r1
 800f934:	3304      	adds	r3, #4
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	461a      	mov	r2, r3
 800f93a:	6839      	ldr	r1, [r7, #0]
 800f93c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800f93e:	7bfa      	ldrb	r2, [r7, #15]
 800f940:	493e      	ldr	r1, [pc, #248]	; (800fa3c <dns_call_found+0x174>)
 800f942:	4613      	mov	r3, r2
 800f944:	005b      	lsls	r3, r3, #1
 800f946:	4413      	add	r3, r2
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	440b      	add	r3, r1
 800f94c:	2200      	movs	r2, #0
 800f94e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	3301      	adds	r3, #1
 800f954:	73fb      	strb	r3, [r7, #15]
 800f956:	7bfb      	ldrb	r3, [r7, #15]
 800f958:	2b03      	cmp	r3, #3
 800f95a:	d9be      	bls.n	800f8da <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f95c:	2300      	movs	r3, #0
 800f95e:	73fb      	strb	r3, [r7, #15]
 800f960:	e031      	b.n	800f9c6 <dns_call_found+0xfe>
    if (i == idx) {
 800f962:	7bfa      	ldrb	r2, [r7, #15]
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	429a      	cmp	r2, r3
 800f968:	d029      	beq.n	800f9be <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800f96a:	7bfa      	ldrb	r2, [r7, #15]
 800f96c:	4934      	ldr	r1, [pc, #208]	; (800fa40 <dns_call_found+0x178>)
 800f96e:	4613      	mov	r3, r2
 800f970:	011b      	lsls	r3, r3, #4
 800f972:	4413      	add	r3, r2
 800f974:	011b      	lsls	r3, r3, #4
 800f976:	440b      	add	r3, r1
 800f978:	330a      	adds	r3, #10
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	2b02      	cmp	r3, #2
 800f97e:	d11f      	bne.n	800f9c0 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800f980:	7bfa      	ldrb	r2, [r7, #15]
 800f982:	492f      	ldr	r1, [pc, #188]	; (800fa40 <dns_call_found+0x178>)
 800f984:	4613      	mov	r3, r2
 800f986:	011b      	lsls	r3, r3, #4
 800f988:	4413      	add	r3, r2
 800f98a:	011b      	lsls	r3, r3, #4
 800f98c:	440b      	add	r3, r1
 800f98e:	330f      	adds	r3, #15
 800f990:	7819      	ldrb	r1, [r3, #0]
 800f992:	79fa      	ldrb	r2, [r7, #7]
 800f994:	482a      	ldr	r0, [pc, #168]	; (800fa40 <dns_call_found+0x178>)
 800f996:	4613      	mov	r3, r2
 800f998:	011b      	lsls	r3, r3, #4
 800f99a:	4413      	add	r3, r2
 800f99c:	011b      	lsls	r3, r3, #4
 800f99e:	4403      	add	r3, r0
 800f9a0:	330f      	adds	r3, #15
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	4299      	cmp	r1, r3
 800f9a6:	d10b      	bne.n	800f9c0 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f9a8:	79fa      	ldrb	r2, [r7, #7]
 800f9aa:	4925      	ldr	r1, [pc, #148]	; (800fa40 <dns_call_found+0x178>)
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	011b      	lsls	r3, r3, #4
 800f9b0:	4413      	add	r3, r2
 800f9b2:	011b      	lsls	r3, r3, #4
 800f9b4:	440b      	add	r3, r1
 800f9b6:	330f      	adds	r3, #15
 800f9b8:	2204      	movs	r2, #4
 800f9ba:	701a      	strb	r2, [r3, #0]
        break;
 800f9bc:	e006      	b.n	800f9cc <dns_call_found+0x104>
      continue; /* only check other requests */
 800f9be:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f9c0:	7bfb      	ldrb	r3, [r7, #15]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	73fb      	strb	r3, [r7, #15]
 800f9c6:	7bfb      	ldrb	r3, [r7, #15]
 800f9c8:	2b03      	cmp	r3, #3
 800f9ca:	d9ca      	bls.n	800f962 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800f9cc:	79fa      	ldrb	r2, [r7, #7]
 800f9ce:	491c      	ldr	r1, [pc, #112]	; (800fa40 <dns_call_found+0x178>)
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	011b      	lsls	r3, r3, #4
 800f9d4:	4413      	add	r3, r2
 800f9d6:	011b      	lsls	r3, r3, #4
 800f9d8:	440b      	add	r3, r1
 800f9da:	330f      	adds	r3, #15
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	2b03      	cmp	r3, #3
 800f9e0:	d827      	bhi.n	800fa32 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800f9e2:	79fa      	ldrb	r2, [r7, #7]
 800f9e4:	4916      	ldr	r1, [pc, #88]	; (800fa40 <dns_call_found+0x178>)
 800f9e6:	4613      	mov	r3, r2
 800f9e8:	011b      	lsls	r3, r3, #4
 800f9ea:	4413      	add	r3, r2
 800f9ec:	011b      	lsls	r3, r3, #4
 800f9ee:	440b      	add	r3, r1
 800f9f0:	330f      	adds	r3, #15
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	4b13      	ldr	r3, [pc, #76]	; (800fa44 <dns_call_found+0x17c>)
 800f9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f009 fc7d 	bl	80192fc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800fa02:	79fa      	ldrb	r2, [r7, #7]
 800fa04:	490e      	ldr	r1, [pc, #56]	; (800fa40 <dns_call_found+0x178>)
 800fa06:	4613      	mov	r3, r2
 800fa08:	011b      	lsls	r3, r3, #4
 800fa0a:	4413      	add	r3, r2
 800fa0c:	011b      	lsls	r3, r3, #4
 800fa0e:	440b      	add	r3, r1
 800fa10:	330f      	adds	r3, #15
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	4619      	mov	r1, r3
 800fa16:	4b0b      	ldr	r3, [pc, #44]	; (800fa44 <dns_call_found+0x17c>)
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800fa1e:	79fa      	ldrb	r2, [r7, #7]
 800fa20:	4907      	ldr	r1, [pc, #28]	; (800fa40 <dns_call_found+0x178>)
 800fa22:	4613      	mov	r3, r2
 800fa24:	011b      	lsls	r3, r3, #4
 800fa26:	4413      	add	r3, r2
 800fa28:	011b      	lsls	r3, r3, #4
 800fa2a:	440b      	add	r3, r1
 800fa2c:	330f      	adds	r3, #15
 800fa2e:	2204      	movs	r2, #4
 800fa30:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800fa32:	bf00      	nop
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd90      	pop	{r4, r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	200142d8 	.word	0x200142d8
 800fa40:	20013e98 	.word	0x20013e98
 800fa44:	20013e84 	.word	0x20013e84

0800fa48 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800fa4e:	f00f f8fb 	bl	801ec48 <rand>
 800fa52:	4603      	mov	r3, r0
 800fa54:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fa56:	2300      	movs	r3, #0
 800fa58:	71fb      	strb	r3, [r7, #7]
 800fa5a:	e01a      	b.n	800fa92 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800fa5c:	79fa      	ldrb	r2, [r7, #7]
 800fa5e:	4911      	ldr	r1, [pc, #68]	; (800faa4 <dns_create_txid+0x5c>)
 800fa60:	4613      	mov	r3, r2
 800fa62:	011b      	lsls	r3, r3, #4
 800fa64:	4413      	add	r3, r2
 800fa66:	011b      	lsls	r3, r3, #4
 800fa68:	440b      	add	r3, r1
 800fa6a:	330a      	adds	r3, #10
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	2b02      	cmp	r3, #2
 800fa70:	d10c      	bne.n	800fa8c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800fa72:	79fa      	ldrb	r2, [r7, #7]
 800fa74:	490b      	ldr	r1, [pc, #44]	; (800faa4 <dns_create_txid+0x5c>)
 800fa76:	4613      	mov	r3, r2
 800fa78:	011b      	lsls	r3, r3, #4
 800fa7a:	4413      	add	r3, r2
 800fa7c:	011b      	lsls	r3, r3, #4
 800fa7e:	440b      	add	r3, r1
 800fa80:	3308      	adds	r3, #8
 800fa82:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800fa84:	88ba      	ldrh	r2, [r7, #4]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d100      	bne.n	800fa8c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800fa8a:	e7e0      	b.n	800fa4e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fa8c:	79fb      	ldrb	r3, [r7, #7]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	71fb      	strb	r3, [r7, #7]
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	2b03      	cmp	r3, #3
 800fa96:	d9e1      	bls.n	800fa5c <dns_create_txid+0x14>
    }
  }

  return txid;
 800fa98:	88bb      	ldrh	r3, [r7, #4]
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	20013e98 	.word	0x20013e98

0800faa8 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800fab0:	2300      	movs	r3, #0
 800fab2:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d00d      	beq.n	800fad6 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	7adb      	ldrb	r3, [r3, #11]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d109      	bne.n	800fad6 <dns_backupserver_available+0x2e>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	7adb      	ldrb	r3, [r3, #11]
 800fac6:	3301      	adds	r3, #1
 800fac8:	4a06      	ldr	r2, [pc, #24]	; (800fae4 <dns_backupserver_available+0x3c>)
 800faca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <dns_backupserver_available+0x2e>
      ret = 1;
 800fad2:	2301      	movs	r3, #1
 800fad4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3714      	adds	r7, #20
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr
 800fae4:	20014308 	.word	0x20014308

0800fae8 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	4603      	mov	r3, r0
 800faf0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800faf2:	79fa      	ldrb	r2, [r7, #7]
 800faf4:	4613      	mov	r3, r2
 800faf6:	011b      	lsls	r3, r3, #4
 800faf8:	4413      	add	r3, r2
 800fafa:	011b      	lsls	r3, r3, #4
 800fafc:	4a48      	ldr	r2, [pc, #288]	; (800fc20 <dns_check_entry+0x138>)
 800fafe:	4413      	add	r3, r2
 800fb00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800fb02:	79fb      	ldrb	r3, [r7, #7]
 800fb04:	2b03      	cmp	r3, #3
 800fb06:	d906      	bls.n	800fb16 <dns_check_entry+0x2e>
 800fb08:	4b46      	ldr	r3, [pc, #280]	; (800fc24 <dns_check_entry+0x13c>)
 800fb0a:	f240 421c 	movw	r2, #1052	; 0x41c
 800fb0e:	4946      	ldr	r1, [pc, #280]	; (800fc28 <dns_check_entry+0x140>)
 800fb10:	4846      	ldr	r0, [pc, #280]	; (800fc2c <dns_check_entry+0x144>)
 800fb12:	f00f f80b 	bl	801eb2c <iprintf>

  switch (entry->state) {
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	7a9b      	ldrb	r3, [r3, #10]
 800fb1a:	2b03      	cmp	r3, #3
 800fb1c:	d86f      	bhi.n	800fbfe <dns_check_entry+0x116>
 800fb1e:	a201      	add	r2, pc, #4	; (adr r2, 800fb24 <dns_check_entry+0x3c>)
 800fb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb24:	0800fc0f 	.word	0x0800fc0f
 800fb28:	0800fb35 	.word	0x0800fb35
 800fb2c:	0800fb67 	.word	0x0800fb67
 800fb30:	0800fbdd 	.word	0x0800fbdd
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800fb34:	f7ff ff88 	bl	800fa48 <dns_create_txid>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2202      	movs	r2, #2
 800fb44:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2201      	movs	r2, #1
 800fb50:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2200      	movs	r2, #0
 800fb56:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800fb58:	79fb      	ldrb	r3, [r7, #7]
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7ff fd36 	bl	800f5cc <dns_send>
 800fb60:	4603      	mov	r3, r0
 800fb62:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800fb64:	e058      	b.n	800fc18 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	7b1b      	ldrb	r3, [r3, #12]
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	b2da      	uxtb	r2, r3
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	731a      	strb	r2, [r3, #12]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	7b1b      	ldrb	r3, [r3, #12]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d14b      	bne.n	800fc12 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	7b5b      	ldrb	r3, [r3, #13]
 800fb7e:	3301      	adds	r3, #1
 800fb80:	b2da      	uxtb	r2, r3
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	735a      	strb	r2, [r3, #13]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	7b5b      	ldrb	r3, [r3, #13]
 800fb8a:	2b04      	cmp	r3, #4
 800fb8c:	d11b      	bne.n	800fbc6 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	f7ff ff8a 	bl	800faa8 <dns_backupserver_available>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00c      	beq.n	800fbb4 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	7adb      	ldrb	r3, [r3, #11]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	b2da      	uxtb	r2, r3
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2201      	movs	r2, #1
 800fbaa:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	735a      	strb	r2, [r3, #13]
 800fbb2:	e00c      	b.n	800fbce <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800fbb4:	79fb      	ldrb	r3, [r7, #7]
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7ff fe85 	bl	800f8c8 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	729a      	strb	r2, [r3, #10]
            break;
 800fbc4:	e028      	b.n	800fc18 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	7b5a      	ldrb	r2, [r3, #13]
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800fbce:	79fb      	ldrb	r3, [r7, #7]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff fcfb 	bl	800f5cc <dns_send>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800fbda:	e01a      	b.n	800fc12 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d008      	beq.n	800fbf6 <dns_check_entry+0x10e>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	1e5a      	subs	r2, r3, #1
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	601a      	str	r2, [r3, #0]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d10f      	bne.n	800fc16 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	729a      	strb	r2, [r3, #10]
      }
      break;
 800fbfc:	e00b      	b.n	800fc16 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800fbfe:	4b09      	ldr	r3, [pc, #36]	; (800fc24 <dns_check_entry+0x13c>)
 800fc00:	f240 425b 	movw	r2, #1115	; 0x45b
 800fc04:	490a      	ldr	r1, [pc, #40]	; (800fc30 <dns_check_entry+0x148>)
 800fc06:	4809      	ldr	r0, [pc, #36]	; (800fc2c <dns_check_entry+0x144>)
 800fc08:	f00e ff90 	bl	801eb2c <iprintf>
      break;
 800fc0c:	e004      	b.n	800fc18 <dns_check_entry+0x130>
      break;
 800fc0e:	bf00      	nop
 800fc10:	e002      	b.n	800fc18 <dns_check_entry+0x130>
      break;
 800fc12:	bf00      	nop
 800fc14:	e000      	b.n	800fc18 <dns_check_entry+0x130>
      break;
 800fc16:	bf00      	nop
  }
}
 800fc18:	bf00      	nop
 800fc1a:	3710      	adds	r7, #16
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	20013e98 	.word	0x20013e98
 800fc24:	080235bc 	.word	0x080235bc
 800fc28:	0802362c 	.word	0x0802362c
 800fc2c:	08023604 	.word	0x08023604
 800fc30:	08023648 	.word	0x08023648

0800fc34 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	71fb      	strb	r3, [r7, #7]
 800fc3e:	e006      	b.n	800fc4e <dns_check_entries+0x1a>
    dns_check_entry(i);
 800fc40:	79fb      	ldrb	r3, [r7, #7]
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7ff ff50 	bl	800fae8 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fc48:	79fb      	ldrb	r3, [r7, #7]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	71fb      	strb	r3, [r7, #7]
 800fc4e:	79fb      	ldrb	r3, [r7, #7]
 800fc50:	2b03      	cmp	r3, #3
 800fc52:	d9f5      	bls.n	800fc40 <dns_check_entries+0xc>
  }
}
 800fc54:	bf00      	nop
 800fc56:	bf00      	nop
 800fc58:	3708      	adds	r7, #8
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
	...

0800fc60 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	4603      	mov	r3, r0
 800fc68:	6039      	str	r1, [r7, #0]
 800fc6a:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 800fc6c:	79fa      	ldrb	r2, [r7, #7]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	011b      	lsls	r3, r3, #4
 800fc72:	4413      	add	r3, r2
 800fc74:	011b      	lsls	r3, r3, #4
 800fc76:	4a13      	ldr	r2, [pc, #76]	; (800fcc4 <dns_correct_response+0x64>)
 800fc78:	4413      	add	r3, r2
 800fc7a:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2203      	movs	r2, #3
 800fc80:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	683a      	ldr	r2, [r7, #0]
 800fc86:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a0e      	ldr	r2, [pc, #56]	; (800fcc8 <dns_correct_response+0x68>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d902      	bls.n	800fc98 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	4a0c      	ldr	r2, [pc, #48]	; (800fcc8 <dns_correct_response+0x68>)
 800fc96:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	1d1a      	adds	r2, r3, #4
 800fc9c:	79fb      	ldrb	r3, [r7, #7]
 800fc9e:	4611      	mov	r1, r2
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff fe11 	bl	800f8c8 <dns_call_found>

  if (entry->ttl == 0) {
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d106      	bne.n	800fcbc <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	7a9b      	ldrb	r3, [r3, #10]
 800fcb2:	2b03      	cmp	r3, #3
 800fcb4:	d102      	bne.n	800fcbc <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	729a      	strb	r2, [r3, #10]
    }
  }
}
 800fcbc:	bf00      	nop
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	20013e98 	.word	0x20013e98
 800fcc8:	00093a80 	.word	0x00093a80

0800fccc <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800fccc:	b590      	push	{r4, r7, lr}
 800fcce:	b091      	sub	sp, #68	; 0x44
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	607a      	str	r2, [r7, #4]
 800fcd8:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	891b      	ldrh	r3, [r3, #8]
 800fcde:	2b0f      	cmp	r3, #15
 800fce0:	f240 811e 	bls.w	800ff20 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 800fce4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800fce8:	2300      	movs	r3, #0
 800fcea:	220c      	movs	r2, #12
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f002 f87b 	bl	8011de8 <pbuf_copy_partial>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b0c      	cmp	r3, #12
 800fcf6:	f040 8115 	bne.w	800ff24 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 800fcfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff faad 	bl	800f25c <lwip_htons>
 800fd02:	4603      	mov	r3, r0
 800fd04:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fd06:	2300      	movs	r3, #0
 800fd08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800fd0c:	e102      	b.n	800ff14 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 800fd0e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800fd12:	4613      	mov	r3, r2
 800fd14:	011b      	lsls	r3, r3, #4
 800fd16:	4413      	add	r3, r2
 800fd18:	011b      	lsls	r3, r3, #4
 800fd1a:	4a92      	ldr	r2, [pc, #584]	; (800ff64 <dns_recv+0x298>)
 800fd1c:	4413      	add	r3, r2
 800fd1e:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 800fd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd22:	7a9b      	ldrb	r3, [r3, #10]
 800fd24:	2b02      	cmp	r3, #2
 800fd26:	f040 80f0 	bne.w	800ff0a <dns_recv+0x23e>
          (entry->txid == txid)) {
 800fd2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd2c:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 800fd2e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fd30:	429a      	cmp	r2, r3
 800fd32:	f040 80ea 	bne.w	800ff0a <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 800fd36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7ff fa8f 	bl	800f25c <lwip_htons>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 800fd42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7ff fa89 	bl	800f25c <lwip_htons>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	87fb      	strh	r3, [r7, #62]	; 0x3e

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800fd4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd52:	b25b      	sxtb	r3, r3
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f280 80e7 	bge.w	800ff28 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 800fd5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	f040 80e5 	bne.w	800ff2c <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd68:	7adb      	ldrb	r3, [r3, #11]
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	4b7e      	ldr	r3, [pc, #504]	; (800ff68 <dns_recv+0x29c>)
 800fd6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	f040 80dc 	bne.w	800ff30 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 800fd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7a:	3310      	adds	r3, #16
 800fd7c:	220c      	movs	r2, #12
 800fd7e:	6879      	ldr	r1, [r7, #4]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7ff fb47 	bl	800f414 <dns_compare_name>
 800fd86:	4603      	mov	r3, r0
 800fd88:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 800fd8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd90:	4293      	cmp	r3, r2
 800fd92:	f000 80cf 	beq.w	800ff34 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 800fd96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd98:	f107 0114 	add.w	r1, r7, #20
 800fd9c:	2204      	movs	r2, #4
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f002 f822 	bl	8011de8 <pbuf_copy_partial>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b04      	cmp	r3, #4
 800fda8:	f040 80c6 	bne.w	800ff38 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 800fdac:	8afb      	ldrh	r3, [r7, #22]
 800fdae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdb2:	f040 80c3 	bne.w	800ff3c <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 800fdb6:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 800fdb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdbc:	f040 80be 	bne.w	800ff3c <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 800fdc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fdc2:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	f200 80ba 	bhi.w	800ff40 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 800fdcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fdce:	3304      	adds	r3, #4
 800fdd0:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800fdd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdd6:	f003 030f 	and.w	r3, r3, #15
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d078      	beq.n	800fed0 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 800fdde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fde0:	f7ff fe62 	bl	800faa8 <dns_backupserver_available>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d07a      	beq.n	800fee0 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 800fdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdec:	2203      	movs	r2, #3
 800fdee:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 800fdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 800fdf6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7ff fe74 	bl	800fae8 <dns_check_entry>

            goto ignore_packet;
 800fe00:	e0a9      	b.n	800ff56 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 800fe02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe04:	4619      	mov	r1, r3
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7ff fb92 	bl	800f530 <dns_skip_name>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 800fe10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe16:	4293      	cmp	r3, r2
 800fe18:	f000 8094 	beq.w	800ff44 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 800fe1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe1e:	f107 0118 	add.w	r1, r7, #24
 800fe22:	220a      	movs	r2, #10
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f001 ffdf 	bl	8011de8 <pbuf_copy_partial>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2b0a      	cmp	r3, #10
 800fe2e:	f040 808b 	bne.w	800ff48 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 800fe32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe34:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	f200 8087 	bhi.w	800ff4c <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 800fe3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe40:	330a      	adds	r3, #10
 800fe42:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800fe44:	8b7b      	ldrh	r3, [r7, #26]
 800fe46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe4a:	d12b      	bne.n	800fea4 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800fe4c:	8b3b      	ldrh	r3, [r7, #24]
 800fe4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe52:	d127      	bne.n	800fea4 <dns_recv+0x1d8>
 800fe54:	8c3b      	ldrh	r3, [r7, #32]
 800fe56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe5a:	d123      	bne.n	800fea4 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 800fe5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe5e:	f107 0110 	add.w	r1, r7, #16
 800fe62:	2204      	movs	r2, #4
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f001 ffbf 	bl	8011de8 <pbuf_copy_partial>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2b04      	cmp	r3, #4
 800fe6e:	d16f      	bne.n	800ff50 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 800fe70:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800fe74:	6939      	ldr	r1, [r7, #16]
 800fe76:	483b      	ldr	r0, [pc, #236]	; (800ff64 <dns_recv+0x298>)
 800fe78:	4613      	mov	r3, r2
 800fe7a:	011b      	lsls	r3, r3, #4
 800fe7c:	4413      	add	r3, r2
 800fe7e:	011b      	lsls	r3, r3, #4
 800fe80:	4403      	add	r3, r0
 800fe82:	3304      	adds	r3, #4
 800fe84:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f001 fda8 	bl	80119dc <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7ff f9f9 	bl	800f286 <lwip_htonl>
 800fe94:	4602      	mov	r2, r0
 800fe96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7ff fedf 	bl	800fc60 <dns_correct_response>
 800fea2:	e05c      	b.n	800ff5e <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 800fea4:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800fea6:	8c3b      	ldrh	r3, [r7, #32]
 800fea8:	4618      	mov	r0, r3
 800feaa:	f7ff f9d7 	bl	800f25c <lwip_htons>
 800feae:	4603      	mov	r3, r0
 800feb0:	4423      	add	r3, r4
 800feb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800feb6:	da4d      	bge.n	800ff54 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 800feb8:	8c3b      	ldrh	r3, [r7, #32]
 800feba:	4618      	mov	r0, r3
 800febc:	f7ff f9ce 	bl	800f25c <lwip_htons>
 800fec0:	4603      	mov	r3, r0
 800fec2:	461a      	mov	r2, r3
 800fec4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fec6:	4413      	add	r3, r2
 800fec8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 800feca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fecc:	3b01      	subs	r3, #1
 800fece:	87fb      	strh	r3, [r7, #62]	; 0x3e
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 800fed0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d004      	beq.n	800fee0 <dns_recv+0x214>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	891b      	ldrh	r3, [r3, #8]
 800feda:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800fedc:	429a      	cmp	r2, r3
 800fede:	d390      	bcc.n	800fe02 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f001 fd7b 	bl	80119dc <pbuf_free>
        dns_call_found(i, NULL);
 800fee6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800feea:	2100      	movs	r1, #0
 800feec:	4618      	mov	r0, r3
 800feee:	f7ff fceb 	bl	800f8c8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 800fef2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800fef6:	491b      	ldr	r1, [pc, #108]	; (800ff64 <dns_recv+0x298>)
 800fef8:	4613      	mov	r3, r2
 800fefa:	011b      	lsls	r3, r3, #4
 800fefc:	4413      	add	r3, r2
 800fefe:	011b      	lsls	r3, r3, #4
 800ff00:	440b      	add	r3, r1
 800ff02:	330a      	adds	r3, #10
 800ff04:	2200      	movs	r2, #0
 800ff06:	701a      	strb	r2, [r3, #0]
        return;
 800ff08:	e029      	b.n	800ff5e <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ff0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ff0e:	3301      	adds	r3, #1
 800ff10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ff14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ff18:	2b03      	cmp	r3, #3
 800ff1a:	f67f aef8 	bls.w	800fd0e <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 800ff1e:	e001      	b.n	800ff24 <dns_recv+0x258>
    goto ignore_packet;
 800ff20:	bf00      	nop
 800ff22:	e018      	b.n	800ff56 <dns_recv+0x28a>
ignore_packet:
 800ff24:	bf00      	nop
 800ff26:	e016      	b.n	800ff56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ff28:	bf00      	nop
 800ff2a:	e014      	b.n	800ff56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ff2c:	bf00      	nop
 800ff2e:	e012      	b.n	800ff56 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 800ff30:	bf00      	nop
 800ff32:	e010      	b.n	800ff56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ff34:	bf00      	nop
 800ff36:	e00e      	b.n	800ff56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ff38:	bf00      	nop
 800ff3a:	e00c      	b.n	800ff56 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800ff3c:	bf00      	nop
 800ff3e:	e00a      	b.n	800ff56 <dns_recv+0x28a>
          goto ignore_packet;
 800ff40:	bf00      	nop
 800ff42:	e008      	b.n	800ff56 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800ff44:	bf00      	nop
 800ff46:	e006      	b.n	800ff56 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800ff48:	bf00      	nop
 800ff4a:	e004      	b.n	800ff56 <dns_recv+0x28a>
              goto ignore_packet;
 800ff4c:	bf00      	nop
 800ff4e:	e002      	b.n	800ff56 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 800ff50:	bf00      	nop
 800ff52:	e000      	b.n	800ff56 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800ff54:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f001 fd40 	bl	80119dc <pbuf_free>
  return;
 800ff5c:	bf00      	nop
}
 800ff5e:	3744      	adds	r7, #68	; 0x44
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd90      	pop	{r4, r7, pc}
 800ff64:	20013e98 	.word	0x20013e98
 800ff68:	20014308 	.word	0x20014308

0800ff6c <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b08a      	sub	sp, #40	; 0x28
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	607a      	str	r2, [r7, #4]
 800ff78:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ff7e:	2300      	movs	r3, #0
 800ff80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff84:	e056      	b.n	8010034 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800ff86:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ff8a:	4990      	ldr	r1, [pc, #576]	; (80101cc <dns_enqueue+0x260>)
 800ff8c:	4613      	mov	r3, r2
 800ff8e:	011b      	lsls	r3, r3, #4
 800ff90:	4413      	add	r3, r2
 800ff92:	011b      	lsls	r3, r3, #4
 800ff94:	440b      	add	r3, r1
 800ff96:	330a      	adds	r3, #10
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	2b02      	cmp	r3, #2
 800ff9c:	d145      	bne.n	801002a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 800ff9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	011b      	lsls	r3, r3, #4
 800ffa6:	4413      	add	r3, r2
 800ffa8:	011b      	lsls	r3, r3, #4
 800ffaa:	3310      	adds	r3, #16
 800ffac:	4a87      	ldr	r2, [pc, #540]	; (80101cc <dns_enqueue+0x260>)
 800ffae:	4413      	add	r3, r2
 800ffb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f7ff f97e 	bl	800f2b8 <lwip_strnicmp>
 800ffbc:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d133      	bne.n	801002a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	76fb      	strb	r3, [r7, #27]
 800ffc6:	e02d      	b.n	8010024 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 800ffc8:	7efa      	ldrb	r2, [r7, #27]
 800ffca:	4981      	ldr	r1, [pc, #516]	; (80101d0 <dns_enqueue+0x264>)
 800ffcc:	4613      	mov	r3, r2
 800ffce:	005b      	lsls	r3, r3, #1
 800ffd0:	4413      	add	r3, r2
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	440b      	add	r3, r1
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d120      	bne.n	801001e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 800ffdc:	7efa      	ldrb	r2, [r7, #27]
 800ffde:	497c      	ldr	r1, [pc, #496]	; (80101d0 <dns_enqueue+0x264>)
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	4413      	add	r3, r2
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	440b      	add	r3, r1
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 800ffee:	7efa      	ldrb	r2, [r7, #27]
 800fff0:	4977      	ldr	r1, [pc, #476]	; (80101d0 <dns_enqueue+0x264>)
 800fff2:	4613      	mov	r3, r2
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	4413      	add	r3, r2
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	440b      	add	r3, r1
 800fffc:	3304      	adds	r3, #4
 800fffe:	683a      	ldr	r2, [r7, #0]
 8010000:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 8010002:	7efa      	ldrb	r2, [r7, #27]
 8010004:	4972      	ldr	r1, [pc, #456]	; (80101d0 <dns_enqueue+0x264>)
 8010006:	4613      	mov	r3, r2
 8010008:	005b      	lsls	r3, r3, #1
 801000a:	4413      	add	r3, r2
 801000c:	009b      	lsls	r3, r3, #2
 801000e:	440b      	add	r3, r1
 8010010:	3308      	adds	r3, #8
 8010012:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010016:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 8010018:	f06f 0304 	mvn.w	r3, #4
 801001c:	e0d1      	b.n	80101c2 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801001e:	7efb      	ldrb	r3, [r7, #27]
 8010020:	3301      	adds	r3, #1
 8010022:	76fb      	strb	r3, [r7, #27]
 8010024:	7efb      	ldrb	r3, [r7, #27]
 8010026:	2b03      	cmp	r3, #3
 8010028:	d9ce      	bls.n	800ffc8 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801002a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801002e:	3301      	adds	r3, #1
 8010030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010038:	2b03      	cmp	r3, #3
 801003a:	d9a4      	bls.n	800ff86 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 801003c:	2300      	movs	r3, #0
 801003e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 8010042:	2304      	movs	r3, #4
 8010044:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010048:	2300      	movs	r3, #0
 801004a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801004e:	e027      	b.n	80100a0 <dns_enqueue+0x134>
    entry = &dns_table[i];
 8010050:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010054:	4613      	mov	r3, r2
 8010056:	011b      	lsls	r3, r3, #4
 8010058:	4413      	add	r3, r2
 801005a:	011b      	lsls	r3, r3, #4
 801005c:	4a5b      	ldr	r2, [pc, #364]	; (80101cc <dns_enqueue+0x260>)
 801005e:	4413      	add	r3, r2
 8010060:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	7a9b      	ldrb	r3, [r3, #10]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d01f      	beq.n	80100aa <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 801006a:	6a3b      	ldr	r3, [r7, #32]
 801006c:	7a9b      	ldrb	r3, [r3, #10]
 801006e:	2b03      	cmp	r3, #3
 8010070:	d111      	bne.n	8010096 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8010072:	4b58      	ldr	r3, [pc, #352]	; (80101d4 <dns_enqueue+0x268>)
 8010074:	781a      	ldrb	r2, [r3, #0]
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	7b9b      	ldrb	r3, [r3, #14]
 801007a:	1ad3      	subs	r3, r2, r3
 801007c:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 801007e:	7eba      	ldrb	r2, [r7, #26]
 8010080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010084:	429a      	cmp	r2, r3
 8010086:	d906      	bls.n	8010096 <dns_enqueue+0x12a>
        lseq = age;
 8010088:	7ebb      	ldrb	r3, [r7, #26]
 801008a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 801008e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010092:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801009a:	3301      	adds	r3, #1
 801009c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100a4:	2b03      	cmp	r3, #3
 80100a6:	d9d3      	bls.n	8010050 <dns_enqueue+0xe4>
 80100a8:	e000      	b.n	80100ac <dns_enqueue+0x140>
      break;
 80100aa:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 80100ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100b0:	2b04      	cmp	r3, #4
 80100b2:	d11f      	bne.n	80100f4 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 80100b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80100b8:	2b03      	cmp	r3, #3
 80100ba:	d80b      	bhi.n	80100d4 <dns_enqueue+0x168>
 80100bc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80100c0:	4942      	ldr	r1, [pc, #264]	; (80101cc <dns_enqueue+0x260>)
 80100c2:	4613      	mov	r3, r2
 80100c4:	011b      	lsls	r3, r3, #4
 80100c6:	4413      	add	r3, r2
 80100c8:	011b      	lsls	r3, r3, #4
 80100ca:	440b      	add	r3, r1
 80100cc:	330a      	adds	r3, #10
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	2b03      	cmp	r3, #3
 80100d2:	d002      	beq.n	80100da <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 80100d4:	f04f 33ff 	mov.w	r3, #4294967295
 80100d8:	e073      	b.n	80101c2 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 80100da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80100de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 80100e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80100e6:	4613      	mov	r3, r2
 80100e8:	011b      	lsls	r3, r3, #4
 80100ea:	4413      	add	r3, r2
 80100ec:	011b      	lsls	r3, r3, #4
 80100ee:	4a37      	ldr	r2, [pc, #220]	; (80101cc <dns_enqueue+0x260>)
 80100f0:	4413      	add	r3, r2
 80100f2:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 80100f4:	2300      	movs	r3, #0
 80100f6:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80100f8:	2300      	movs	r3, #0
 80100fa:	76fb      	strb	r3, [r7, #27]
 80100fc:	e015      	b.n	801012a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 80100fe:	7efa      	ldrb	r2, [r7, #27]
 8010100:	4933      	ldr	r1, [pc, #204]	; (80101d0 <dns_enqueue+0x264>)
 8010102:	4613      	mov	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	4413      	add	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	440b      	add	r3, r1
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d108      	bne.n	8010124 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 8010112:	7efa      	ldrb	r2, [r7, #27]
 8010114:	4613      	mov	r3, r2
 8010116:	005b      	lsls	r3, r3, #1
 8010118:	4413      	add	r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	4a2c      	ldr	r2, [pc, #176]	; (80101d0 <dns_enqueue+0x264>)
 801011e:	4413      	add	r3, r2
 8010120:	61fb      	str	r3, [r7, #28]
      break;
 8010122:	e005      	b.n	8010130 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8010124:	7efb      	ldrb	r3, [r7, #27]
 8010126:	3301      	adds	r3, #1
 8010128:	76fb      	strb	r3, [r7, #27]
 801012a:	7efb      	ldrb	r3, [r7, #27]
 801012c:	2b03      	cmp	r3, #3
 801012e:	d9e6      	bls.n	80100fe <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d102      	bne.n	801013c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 8010136:	f04f 33ff 	mov.w	r3, #4294967295
 801013a:	e042      	b.n	80101c2 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010142:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 8010144:	6a3b      	ldr	r3, [r7, #32]
 8010146:	2201      	movs	r2, #1
 8010148:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 801014a:	4b22      	ldr	r3, [pc, #136]	; (80101d4 <dns_enqueue+0x268>)
 801014c:	781a      	ldrb	r2, [r3, #0]
 801014e:	6a3b      	ldr	r3, [r7, #32]
 8010150:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	683a      	ldr	r2, [r7, #0]
 801015c:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	2bff      	cmp	r3, #255	; 0xff
 8010162:	bf28      	it	cs
 8010164:	23ff      	movcs	r3, #255	; 0xff
 8010166:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 8010168:	6a3b      	ldr	r3, [r7, #32]
 801016a:	3310      	adds	r3, #16
 801016c:	697a      	ldr	r2, [r7, #20]
 801016e:	68f9      	ldr	r1, [r7, #12]
 8010170:	4618      	mov	r0, r3
 8010172:	f00d ff97 	bl	801e0a4 <memcpy>
  entry->name[namelen] = 0;
 8010176:	6a3a      	ldr	r2, [r7, #32]
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	4413      	add	r3, r2
 801017c:	3310      	adds	r3, #16
 801017e:	2200      	movs	r2, #0
 8010180:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 8010182:	f7ff fb4f 	bl	800f824 <dns_alloc_pcb>
 8010186:	4603      	mov	r3, r0
 8010188:	461a      	mov	r2, r3
 801018a:	6a3b      	ldr	r3, [r7, #32]
 801018c:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 801018e:	6a3b      	ldr	r3, [r7, #32]
 8010190:	7bdb      	ldrb	r3, [r3, #15]
 8010192:	2b03      	cmp	r3, #3
 8010194:	d908      	bls.n	80101a8 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 8010196:	6a3b      	ldr	r3, [r7, #32]
 8010198:	2200      	movs	r2, #0
 801019a:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	2200      	movs	r2, #0
 80101a0:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 80101a2:	f04f 33ff 	mov.w	r3, #4294967295
 80101a6:	e00c      	b.n	80101c2 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 80101a8:	4b0a      	ldr	r3, [pc, #40]	; (80101d4 <dns_enqueue+0x268>)
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	3301      	adds	r3, #1
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	4b08      	ldr	r3, [pc, #32]	; (80101d4 <dns_enqueue+0x268>)
 80101b2:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 80101b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7ff fc95 	bl	800fae8 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 80101be:	f06f 0304 	mvn.w	r3, #4
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3728      	adds	r7, #40	; 0x28
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20013e98 	.word	0x20013e98
 80101d0:	200142d8 	.word	0x200142d8
 80101d4:	20013e95 	.word	0x20013e95

080101d8 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b086      	sub	sp, #24
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
 80101e4:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d006      	beq.n	80101fa <dns_gethostbyname_addrtype+0x22>
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d003      	beq.n	80101fa <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d102      	bne.n	8010200 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 80101fa:	f06f 030f 	mvn.w	r3, #15
 80101fe:	e029      	b.n	8010254 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8010200:	68f8      	ldr	r0, [r7, #12]
 8010202:	f7ef ffe5 	bl	80001d0 <strlen>
 8010206:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	2bff      	cmp	r3, #255	; 0xff
 801020c:	d902      	bls.n	8010214 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 801020e:	f06f 030f 	mvn.w	r3, #15
 8010212:	e01f      	b.n	8010254 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8010214:	68b9      	ldr	r1, [r7, #8]
 8010216:	68f8      	ldr	r0, [r7, #12]
 8010218:	f00c fbfe 	bl	801ca18 <ip4addr_aton>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8010222:	2300      	movs	r3, #0
 8010224:	e016      	b.n	8010254 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 8010226:	68b9      	ldr	r1, [r7, #8]
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f7ff f8b1 	bl	800f390 <dns_lookup>
 801022e:	4603      	mov	r3, r0
 8010230:	2b00      	cmp	r3, #0
 8010232:	d101      	bne.n	8010238 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 8010234:	2300      	movs	r3, #0
 8010236:	e00d      	b.n	8010254 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 8010238:	4b08      	ldr	r3, [pc, #32]	; (801025c <dns_gethostbyname_addrtype+0x84>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d102      	bne.n	8010246 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 8010240:	f06f 0305 	mvn.w	r3, #5
 8010244:	e006      	b.n	8010254 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	6979      	ldr	r1, [r7, #20]
 801024c:	68f8      	ldr	r0, [r7, #12]
 801024e:	f7ff fe8d 	bl	800ff6c <dns_enqueue>
 8010252:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8010254:	4618      	mov	r0, r3
 8010256:	3718      	adds	r7, #24
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	20014308 	.word	0x20014308

08010260 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010266:	2300      	movs	r3, #0
 8010268:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801026a:	f00d fd5f 	bl	801dd2c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801026e:	f000 f8d7 	bl	8010420 <mem_init>
  memp_init();
 8010272:	f000 fc33 	bl	8010adc <memp_init>
  pbuf_init();
  netif_init();
 8010276:	f000 fcf9 	bl	8010c6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801027a:	f008 fb55 	bl	8018928 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801027e:	f001 ffd3 	bl	8012228 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8010282:	f7ff f854 	bl	800f32e <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010286:	f008 fa95 	bl	80187b4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801028a:	bf00      	nop
 801028c:	3708      	adds	r7, #8
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
	...

08010294 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
 801029a:	4603      	mov	r3, r0
 801029c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801029e:	4b05      	ldr	r3, [pc, #20]	; (80102b4 <ptr_to_mem+0x20>)
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	88fb      	ldrh	r3, [r7, #6]
 80102a4:	4413      	add	r3, r2
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	370c      	adds	r7, #12
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop
 80102b4:	20014310 	.word	0x20014310

080102b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80102c0:	4b05      	ldr	r3, [pc, #20]	; (80102d8 <mem_to_ptr+0x20>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	b29b      	uxth	r3, r3
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	370c      	adds	r7, #12
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	20014310 	.word	0x20014310

080102dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80102dc:	b590      	push	{r4, r7, lr}
 80102de:	b085      	sub	sp, #20
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80102e4:	4b45      	ldr	r3, [pc, #276]	; (80103fc <plug_holes+0x120>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	687a      	ldr	r2, [r7, #4]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d206      	bcs.n	80102fc <plug_holes+0x20>
 80102ee:	4b44      	ldr	r3, [pc, #272]	; (8010400 <plug_holes+0x124>)
 80102f0:	f240 12df 	movw	r2, #479	; 0x1df
 80102f4:	4943      	ldr	r1, [pc, #268]	; (8010404 <plug_holes+0x128>)
 80102f6:	4844      	ldr	r0, [pc, #272]	; (8010408 <plug_holes+0x12c>)
 80102f8:	f00e fc18 	bl	801eb2c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80102fc:	4b43      	ldr	r3, [pc, #268]	; (801040c <plug_holes+0x130>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	429a      	cmp	r2, r3
 8010304:	d306      	bcc.n	8010314 <plug_holes+0x38>
 8010306:	4b3e      	ldr	r3, [pc, #248]	; (8010400 <plug_holes+0x124>)
 8010308:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801030c:	4940      	ldr	r1, [pc, #256]	; (8010410 <plug_holes+0x134>)
 801030e:	483e      	ldr	r0, [pc, #248]	; (8010408 <plug_holes+0x12c>)
 8010310:	f00e fc0c 	bl	801eb2c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	791b      	ldrb	r3, [r3, #4]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d006      	beq.n	801032a <plug_holes+0x4e>
 801031c:	4b38      	ldr	r3, [pc, #224]	; (8010400 <plug_holes+0x124>)
 801031e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010322:	493c      	ldr	r1, [pc, #240]	; (8010414 <plug_holes+0x138>)
 8010324:	4838      	ldr	r0, [pc, #224]	; (8010408 <plug_holes+0x12c>)
 8010326:	f00e fc01 	bl	801eb2c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	881b      	ldrh	r3, [r3, #0]
 801032e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010332:	d906      	bls.n	8010342 <plug_holes+0x66>
 8010334:	4b32      	ldr	r3, [pc, #200]	; (8010400 <plug_holes+0x124>)
 8010336:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801033a:	4937      	ldr	r1, [pc, #220]	; (8010418 <plug_holes+0x13c>)
 801033c:	4832      	ldr	r0, [pc, #200]	; (8010408 <plug_holes+0x12c>)
 801033e:	f00e fbf5 	bl	801eb2c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	881b      	ldrh	r3, [r3, #0]
 8010346:	4618      	mov	r0, r3
 8010348:	f7ff ffa4 	bl	8010294 <ptr_to_mem>
 801034c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	429a      	cmp	r2, r3
 8010354:	d024      	beq.n	80103a0 <plug_holes+0xc4>
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	791b      	ldrb	r3, [r3, #4]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d120      	bne.n	80103a0 <plug_holes+0xc4>
 801035e:	4b2b      	ldr	r3, [pc, #172]	; (801040c <plug_holes+0x130>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	429a      	cmp	r2, r3
 8010366:	d01b      	beq.n	80103a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010368:	4b2c      	ldr	r3, [pc, #176]	; (801041c <plug_holes+0x140>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	68fa      	ldr	r2, [r7, #12]
 801036e:	429a      	cmp	r2, r3
 8010370:	d102      	bne.n	8010378 <plug_holes+0x9c>
      lfree = mem;
 8010372:	4a2a      	ldr	r2, [pc, #168]	; (801041c <plug_holes+0x140>)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	881a      	ldrh	r2, [r3, #0]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	881b      	ldrh	r3, [r3, #0]
 8010384:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010388:	d00a      	beq.n	80103a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	881b      	ldrh	r3, [r3, #0]
 801038e:	4618      	mov	r0, r3
 8010390:	f7ff ff80 	bl	8010294 <ptr_to_mem>
 8010394:	4604      	mov	r4, r0
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff ff8e 	bl	80102b8 <mem_to_ptr>
 801039c:	4603      	mov	r3, r0
 801039e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	885b      	ldrh	r3, [r3, #2]
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7ff ff75 	bl	8010294 <ptr_to_mem>
 80103aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d01f      	beq.n	80103f4 <plug_holes+0x118>
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	791b      	ldrb	r3, [r3, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d11b      	bne.n	80103f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80103bc:	4b17      	ldr	r3, [pc, #92]	; (801041c <plug_holes+0x140>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d102      	bne.n	80103cc <plug_holes+0xf0>
      lfree = pmem;
 80103c6:	4a15      	ldr	r2, [pc, #84]	; (801041c <plug_holes+0x140>)
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	881a      	ldrh	r2, [r3, #0]
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80103dc:	d00a      	beq.n	80103f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7ff ff56 	bl	8010294 <ptr_to_mem>
 80103e8:	4604      	mov	r4, r0
 80103ea:	68b8      	ldr	r0, [r7, #8]
 80103ec:	f7ff ff64 	bl	80102b8 <mem_to_ptr>
 80103f0:	4603      	mov	r3, r0
 80103f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80103f4:	bf00      	nop
 80103f6:	3714      	adds	r7, #20
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd90      	pop	{r4, r7, pc}
 80103fc:	20014310 	.word	0x20014310
 8010400:	08023668 	.word	0x08023668
 8010404:	08023698 	.word	0x08023698
 8010408:	080236b0 	.word	0x080236b0
 801040c:	20014314 	.word	0x20014314
 8010410:	080236d8 	.word	0x080236d8
 8010414:	080236f4 	.word	0x080236f4
 8010418:	08023710 	.word	0x08023710
 801041c:	2001431c 	.word	0x2001431c

08010420 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010426:	4b1f      	ldr	r3, [pc, #124]	; (80104a4 <mem_init+0x84>)
 8010428:	3303      	adds	r3, #3
 801042a:	f023 0303 	bic.w	r3, r3, #3
 801042e:	461a      	mov	r2, r3
 8010430:	4b1d      	ldr	r3, [pc, #116]	; (80104a8 <mem_init+0x88>)
 8010432:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010434:	4b1c      	ldr	r3, [pc, #112]	; (80104a8 <mem_init+0x88>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010440:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2200      	movs	r2, #0
 8010446:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801044e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8010452:	f7ff ff1f 	bl	8010294 <ptr_to_mem>
 8010456:	4603      	mov	r3, r0
 8010458:	4a14      	ldr	r2, [pc, #80]	; (80104ac <mem_init+0x8c>)
 801045a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801045c:	4b13      	ldr	r3, [pc, #76]	; (80104ac <mem_init+0x8c>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	2201      	movs	r2, #1
 8010462:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010464:	4b11      	ldr	r3, [pc, #68]	; (80104ac <mem_init+0x8c>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801046c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801046e:	4b0f      	ldr	r3, [pc, #60]	; (80104ac <mem_init+0x8c>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010476:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010478:	4b0b      	ldr	r3, [pc, #44]	; (80104a8 <mem_init+0x88>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a0c      	ldr	r2, [pc, #48]	; (80104b0 <mem_init+0x90>)
 801047e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010480:	480c      	ldr	r0, [pc, #48]	; (80104b4 <mem_init+0x94>)
 8010482:	f00d fc61 	bl	801dd48 <sys_mutex_new>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d006      	beq.n	801049a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801048c:	4b0a      	ldr	r3, [pc, #40]	; (80104b8 <mem_init+0x98>)
 801048e:	f240 221f 	movw	r2, #543	; 0x21f
 8010492:	490a      	ldr	r1, [pc, #40]	; (80104bc <mem_init+0x9c>)
 8010494:	480a      	ldr	r0, [pc, #40]	; (80104c0 <mem_init+0xa0>)
 8010496:	f00e fb49 	bl	801eb2c <iprintf>
  }
}
 801049a:	bf00      	nop
 801049c:	3708      	adds	r7, #8
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	200176ec 	.word	0x200176ec
 80104a8:	20014310 	.word	0x20014310
 80104ac:	20014314 	.word	0x20014314
 80104b0:	2001431c 	.word	0x2001431c
 80104b4:	20014318 	.word	0x20014318
 80104b8:	08023668 	.word	0x08023668
 80104bc:	0802373c 	.word	0x0802373c
 80104c0:	080236b0 	.word	0x080236b0

080104c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b086      	sub	sp, #24
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f7ff fef3 	bl	80102b8 <mem_to_ptr>
 80104d2:	4603      	mov	r3, r0
 80104d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	881b      	ldrh	r3, [r3, #0]
 80104da:	4618      	mov	r0, r3
 80104dc:	f7ff feda 	bl	8010294 <ptr_to_mem>
 80104e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	885b      	ldrh	r3, [r3, #2]
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7ff fed4 	bl	8010294 <ptr_to_mem>
 80104ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	881b      	ldrh	r3, [r3, #0]
 80104f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80104f6:	d818      	bhi.n	801052a <mem_link_valid+0x66>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	885b      	ldrh	r3, [r3, #2]
 80104fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010500:	d813      	bhi.n	801052a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010506:	8afa      	ldrh	r2, [r7, #22]
 8010508:	429a      	cmp	r2, r3
 801050a:	d004      	beq.n	8010516 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	881b      	ldrh	r3, [r3, #0]
 8010510:	8afa      	ldrh	r2, [r7, #22]
 8010512:	429a      	cmp	r2, r3
 8010514:	d109      	bne.n	801052a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010516:	4b08      	ldr	r3, [pc, #32]	; (8010538 <mem_link_valid+0x74>)
 8010518:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801051a:	693a      	ldr	r2, [r7, #16]
 801051c:	429a      	cmp	r2, r3
 801051e:	d006      	beq.n	801052e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	885b      	ldrh	r3, [r3, #2]
 8010524:	8afa      	ldrh	r2, [r7, #22]
 8010526:	429a      	cmp	r2, r3
 8010528:	d001      	beq.n	801052e <mem_link_valid+0x6a>
    return 0;
 801052a:	2300      	movs	r3, #0
 801052c:	e000      	b.n	8010530 <mem_link_valid+0x6c>
  }
  return 1;
 801052e:	2301      	movs	r3, #1
}
 8010530:	4618      	mov	r0, r3
 8010532:	3718      	adds	r7, #24
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}
 8010538:	20014314 	.word	0x20014314

0801053c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b088      	sub	sp, #32
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d070      	beq.n	801062c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f003 0303 	and.w	r3, r3, #3
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00d      	beq.n	8010570 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010554:	4b37      	ldr	r3, [pc, #220]	; (8010634 <mem_free+0xf8>)
 8010556:	f240 2273 	movw	r2, #627	; 0x273
 801055a:	4937      	ldr	r1, [pc, #220]	; (8010638 <mem_free+0xfc>)
 801055c:	4837      	ldr	r0, [pc, #220]	; (801063c <mem_free+0x100>)
 801055e:	f00e fae5 	bl	801eb2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010562:	f00d fc45 	bl	801ddf0 <sys_arch_protect>
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	f00d fc4f 	bl	801de0c <sys_arch_unprotect>
    return;
 801056e:	e05e      	b.n	801062e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	3b08      	subs	r3, #8
 8010574:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010576:	4b32      	ldr	r3, [pc, #200]	; (8010640 <mem_free+0x104>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	69fa      	ldr	r2, [r7, #28]
 801057c:	429a      	cmp	r2, r3
 801057e:	d306      	bcc.n	801058e <mem_free+0x52>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f103 020c 	add.w	r2, r3, #12
 8010586:	4b2f      	ldr	r3, [pc, #188]	; (8010644 <mem_free+0x108>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	429a      	cmp	r2, r3
 801058c:	d90d      	bls.n	80105aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801058e:	4b29      	ldr	r3, [pc, #164]	; (8010634 <mem_free+0xf8>)
 8010590:	f240 227f 	movw	r2, #639	; 0x27f
 8010594:	492c      	ldr	r1, [pc, #176]	; (8010648 <mem_free+0x10c>)
 8010596:	4829      	ldr	r0, [pc, #164]	; (801063c <mem_free+0x100>)
 8010598:	f00e fac8 	bl	801eb2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801059c:	f00d fc28 	bl	801ddf0 <sys_arch_protect>
 80105a0:	6138      	str	r0, [r7, #16]
 80105a2:	6938      	ldr	r0, [r7, #16]
 80105a4:	f00d fc32 	bl	801de0c <sys_arch_unprotect>
    return;
 80105a8:	e041      	b.n	801062e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80105aa:	4828      	ldr	r0, [pc, #160]	; (801064c <mem_free+0x110>)
 80105ac:	f00d fbe6 	bl	801dd7c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	791b      	ldrb	r3, [r3, #4]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d110      	bne.n	80105da <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80105b8:	4b1e      	ldr	r3, [pc, #120]	; (8010634 <mem_free+0xf8>)
 80105ba:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80105be:	4924      	ldr	r1, [pc, #144]	; (8010650 <mem_free+0x114>)
 80105c0:	481e      	ldr	r0, [pc, #120]	; (801063c <mem_free+0x100>)
 80105c2:	f00e fab3 	bl	801eb2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80105c6:	4821      	ldr	r0, [pc, #132]	; (801064c <mem_free+0x110>)
 80105c8:	f00d fbe7 	bl	801dd9a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80105cc:	f00d fc10 	bl	801ddf0 <sys_arch_protect>
 80105d0:	6178      	str	r0, [r7, #20]
 80105d2:	6978      	ldr	r0, [r7, #20]
 80105d4:	f00d fc1a 	bl	801de0c <sys_arch_unprotect>
    return;
 80105d8:	e029      	b.n	801062e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80105da:	69f8      	ldr	r0, [r7, #28]
 80105dc:	f7ff ff72 	bl	80104c4 <mem_link_valid>
 80105e0:	4603      	mov	r3, r0
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d110      	bne.n	8010608 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80105e6:	4b13      	ldr	r3, [pc, #76]	; (8010634 <mem_free+0xf8>)
 80105e8:	f240 2295 	movw	r2, #661	; 0x295
 80105ec:	4919      	ldr	r1, [pc, #100]	; (8010654 <mem_free+0x118>)
 80105ee:	4813      	ldr	r0, [pc, #76]	; (801063c <mem_free+0x100>)
 80105f0:	f00e fa9c 	bl	801eb2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80105f4:	4815      	ldr	r0, [pc, #84]	; (801064c <mem_free+0x110>)
 80105f6:	f00d fbd0 	bl	801dd9a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80105fa:	f00d fbf9 	bl	801ddf0 <sys_arch_protect>
 80105fe:	61b8      	str	r0, [r7, #24]
 8010600:	69b8      	ldr	r0, [r7, #24]
 8010602:	f00d fc03 	bl	801de0c <sys_arch_unprotect>
    return;
 8010606:	e012      	b.n	801062e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010608:	69fb      	ldr	r3, [r7, #28]
 801060a:	2200      	movs	r2, #0
 801060c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801060e:	4b12      	ldr	r3, [pc, #72]	; (8010658 <mem_free+0x11c>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	69fa      	ldr	r2, [r7, #28]
 8010614:	429a      	cmp	r2, r3
 8010616:	d202      	bcs.n	801061e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010618:	4a0f      	ldr	r2, [pc, #60]	; (8010658 <mem_free+0x11c>)
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801061e:	69f8      	ldr	r0, [r7, #28]
 8010620:	f7ff fe5c 	bl	80102dc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010624:	4809      	ldr	r0, [pc, #36]	; (801064c <mem_free+0x110>)
 8010626:	f00d fbb8 	bl	801dd9a <sys_mutex_unlock>
 801062a:	e000      	b.n	801062e <mem_free+0xf2>
    return;
 801062c:	bf00      	nop
}
 801062e:	3720      	adds	r7, #32
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	08023668 	.word	0x08023668
 8010638:	08023758 	.word	0x08023758
 801063c:	080236b0 	.word	0x080236b0
 8010640:	20014310 	.word	0x20014310
 8010644:	20014314 	.word	0x20014314
 8010648:	0802377c 	.word	0x0802377c
 801064c:	20014318 	.word	0x20014318
 8010650:	08023798 	.word	0x08023798
 8010654:	080237c0 	.word	0x080237c0
 8010658:	2001431c 	.word	0x2001431c

0801065c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b088      	sub	sp, #32
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	460b      	mov	r3, r1
 8010666:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010668:	887b      	ldrh	r3, [r7, #2]
 801066a:	3303      	adds	r3, #3
 801066c:	b29b      	uxth	r3, r3
 801066e:	f023 0303 	bic.w	r3, r3, #3
 8010672:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010674:	8bfb      	ldrh	r3, [r7, #30]
 8010676:	2b0b      	cmp	r3, #11
 8010678:	d801      	bhi.n	801067e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801067a:	230c      	movs	r3, #12
 801067c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801067e:	8bfb      	ldrh	r3, [r7, #30]
 8010680:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010684:	d803      	bhi.n	801068e <mem_trim+0x32>
 8010686:	8bfa      	ldrh	r2, [r7, #30]
 8010688:	887b      	ldrh	r3, [r7, #2]
 801068a:	429a      	cmp	r2, r3
 801068c:	d201      	bcs.n	8010692 <mem_trim+0x36>
    return NULL;
 801068e:	2300      	movs	r3, #0
 8010690:	e0d8      	b.n	8010844 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010692:	4b6e      	ldr	r3, [pc, #440]	; (801084c <mem_trim+0x1f0>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	429a      	cmp	r2, r3
 801069a:	d304      	bcc.n	80106a6 <mem_trim+0x4a>
 801069c:	4b6c      	ldr	r3, [pc, #432]	; (8010850 <mem_trim+0x1f4>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d306      	bcc.n	80106b4 <mem_trim+0x58>
 80106a6:	4b6b      	ldr	r3, [pc, #428]	; (8010854 <mem_trim+0x1f8>)
 80106a8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80106ac:	496a      	ldr	r1, [pc, #424]	; (8010858 <mem_trim+0x1fc>)
 80106ae:	486b      	ldr	r0, [pc, #428]	; (801085c <mem_trim+0x200>)
 80106b0:	f00e fa3c 	bl	801eb2c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80106b4:	4b65      	ldr	r3, [pc, #404]	; (801084c <mem_trim+0x1f0>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d304      	bcc.n	80106c8 <mem_trim+0x6c>
 80106be:	4b64      	ldr	r3, [pc, #400]	; (8010850 <mem_trim+0x1f4>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d307      	bcc.n	80106d8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80106c8:	f00d fb92 	bl	801ddf0 <sys_arch_protect>
 80106cc:	60b8      	str	r0, [r7, #8]
 80106ce:	68b8      	ldr	r0, [r7, #8]
 80106d0:	f00d fb9c 	bl	801de0c <sys_arch_unprotect>
    return rmem;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	e0b5      	b.n	8010844 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	3b08      	subs	r3, #8
 80106dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80106de:	69b8      	ldr	r0, [r7, #24]
 80106e0:	f7ff fdea 	bl	80102b8 <mem_to_ptr>
 80106e4:	4603      	mov	r3, r0
 80106e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	881a      	ldrh	r2, [r3, #0]
 80106ec:	8afb      	ldrh	r3, [r7, #22]
 80106ee:	1ad3      	subs	r3, r2, r3
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	3b08      	subs	r3, #8
 80106f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80106f6:	8bfa      	ldrh	r2, [r7, #30]
 80106f8:	8abb      	ldrh	r3, [r7, #20]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d906      	bls.n	801070c <mem_trim+0xb0>
 80106fe:	4b55      	ldr	r3, [pc, #340]	; (8010854 <mem_trim+0x1f8>)
 8010700:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010704:	4956      	ldr	r1, [pc, #344]	; (8010860 <mem_trim+0x204>)
 8010706:	4855      	ldr	r0, [pc, #340]	; (801085c <mem_trim+0x200>)
 8010708:	f00e fa10 	bl	801eb2c <iprintf>
  if (newsize > size) {
 801070c:	8bfa      	ldrh	r2, [r7, #30]
 801070e:	8abb      	ldrh	r3, [r7, #20]
 8010710:	429a      	cmp	r2, r3
 8010712:	d901      	bls.n	8010718 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010714:	2300      	movs	r3, #0
 8010716:	e095      	b.n	8010844 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010718:	8bfa      	ldrh	r2, [r7, #30]
 801071a:	8abb      	ldrh	r3, [r7, #20]
 801071c:	429a      	cmp	r2, r3
 801071e:	d101      	bne.n	8010724 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	e08f      	b.n	8010844 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010724:	484f      	ldr	r0, [pc, #316]	; (8010864 <mem_trim+0x208>)
 8010726:	f00d fb29 	bl	801dd7c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	881b      	ldrh	r3, [r3, #0]
 801072e:	4618      	mov	r0, r3
 8010730:	f7ff fdb0 	bl	8010294 <ptr_to_mem>
 8010734:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	791b      	ldrb	r3, [r3, #4]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d13f      	bne.n	80107be <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801073e:	69bb      	ldr	r3, [r7, #24]
 8010740:	881b      	ldrh	r3, [r3, #0]
 8010742:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010746:	d106      	bne.n	8010756 <mem_trim+0xfa>
 8010748:	4b42      	ldr	r3, [pc, #264]	; (8010854 <mem_trim+0x1f8>)
 801074a:	f240 22f5 	movw	r2, #757	; 0x2f5
 801074e:	4946      	ldr	r1, [pc, #280]	; (8010868 <mem_trim+0x20c>)
 8010750:	4842      	ldr	r0, [pc, #264]	; (801085c <mem_trim+0x200>)
 8010752:	f00e f9eb 	bl	801eb2c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	881b      	ldrh	r3, [r3, #0]
 801075a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801075c:	8afa      	ldrh	r2, [r7, #22]
 801075e:	8bfb      	ldrh	r3, [r7, #30]
 8010760:	4413      	add	r3, r2
 8010762:	b29b      	uxth	r3, r3
 8010764:	3308      	adds	r3, #8
 8010766:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010768:	4b40      	ldr	r3, [pc, #256]	; (801086c <mem_trim+0x210>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	693a      	ldr	r2, [r7, #16]
 801076e:	429a      	cmp	r2, r3
 8010770:	d106      	bne.n	8010780 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010772:	89fb      	ldrh	r3, [r7, #14]
 8010774:	4618      	mov	r0, r3
 8010776:	f7ff fd8d 	bl	8010294 <ptr_to_mem>
 801077a:	4603      	mov	r3, r0
 801077c:	4a3b      	ldr	r2, [pc, #236]	; (801086c <mem_trim+0x210>)
 801077e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010780:	89fb      	ldrh	r3, [r7, #14]
 8010782:	4618      	mov	r0, r3
 8010784:	f7ff fd86 	bl	8010294 <ptr_to_mem>
 8010788:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	2200      	movs	r2, #0
 801078e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	89ba      	ldrh	r2, [r7, #12]
 8010794:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	8afa      	ldrh	r2, [r7, #22]
 801079a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801079c:	69bb      	ldr	r3, [r7, #24]
 801079e:	89fa      	ldrh	r2, [r7, #14]
 80107a0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	881b      	ldrh	r3, [r3, #0]
 80107a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80107aa:	d047      	beq.n	801083c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	881b      	ldrh	r3, [r3, #0]
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7ff fd6f 	bl	8010294 <ptr_to_mem>
 80107b6:	4602      	mov	r2, r0
 80107b8:	89fb      	ldrh	r3, [r7, #14]
 80107ba:	8053      	strh	r3, [r2, #2]
 80107bc:	e03e      	b.n	801083c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80107be:	8bfb      	ldrh	r3, [r7, #30]
 80107c0:	f103 0214 	add.w	r2, r3, #20
 80107c4:	8abb      	ldrh	r3, [r7, #20]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d838      	bhi.n	801083c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80107ca:	8afa      	ldrh	r2, [r7, #22]
 80107cc:	8bfb      	ldrh	r3, [r7, #30]
 80107ce:	4413      	add	r3, r2
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	3308      	adds	r3, #8
 80107d4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80107de:	d106      	bne.n	80107ee <mem_trim+0x192>
 80107e0:	4b1c      	ldr	r3, [pc, #112]	; (8010854 <mem_trim+0x1f8>)
 80107e2:	f240 3216 	movw	r2, #790	; 0x316
 80107e6:	4920      	ldr	r1, [pc, #128]	; (8010868 <mem_trim+0x20c>)
 80107e8:	481c      	ldr	r0, [pc, #112]	; (801085c <mem_trim+0x200>)
 80107ea:	f00e f99f 	bl	801eb2c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80107ee:	89fb      	ldrh	r3, [r7, #14]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7ff fd4f 	bl	8010294 <ptr_to_mem>
 80107f6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80107f8:	4b1c      	ldr	r3, [pc, #112]	; (801086c <mem_trim+0x210>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	693a      	ldr	r2, [r7, #16]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d202      	bcs.n	8010808 <mem_trim+0x1ac>
      lfree = mem2;
 8010802:	4a1a      	ldr	r2, [pc, #104]	; (801086c <mem_trim+0x210>)
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	2200      	movs	r2, #0
 801080c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	881a      	ldrh	r2, [r3, #0]
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	8afa      	ldrh	r2, [r7, #22]
 801081a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801081c:	69bb      	ldr	r3, [r7, #24]
 801081e:	89fa      	ldrh	r2, [r7, #14]
 8010820:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	881b      	ldrh	r3, [r3, #0]
 8010826:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801082a:	d007      	beq.n	801083c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	881b      	ldrh	r3, [r3, #0]
 8010830:	4618      	mov	r0, r3
 8010832:	f7ff fd2f 	bl	8010294 <ptr_to_mem>
 8010836:	4602      	mov	r2, r0
 8010838:	89fb      	ldrh	r3, [r7, #14]
 801083a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801083c:	4809      	ldr	r0, [pc, #36]	; (8010864 <mem_trim+0x208>)
 801083e:	f00d faac 	bl	801dd9a <sys_mutex_unlock>
  return rmem;
 8010842:	687b      	ldr	r3, [r7, #4]
}
 8010844:	4618      	mov	r0, r3
 8010846:	3720      	adds	r7, #32
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	20014310 	.word	0x20014310
 8010850:	20014314 	.word	0x20014314
 8010854:	08023668 	.word	0x08023668
 8010858:	080237f4 	.word	0x080237f4
 801085c:	080236b0 	.word	0x080236b0
 8010860:	0802380c 	.word	0x0802380c
 8010864:	20014318 	.word	0x20014318
 8010868:	0802382c 	.word	0x0802382c
 801086c:	2001431c 	.word	0x2001431c

08010870 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b088      	sub	sp, #32
 8010874:	af00      	add	r7, sp, #0
 8010876:	4603      	mov	r3, r0
 8010878:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801087a:	88fb      	ldrh	r3, [r7, #6]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d101      	bne.n	8010884 <mem_malloc+0x14>
    return NULL;
 8010880:	2300      	movs	r3, #0
 8010882:	e0e2      	b.n	8010a4a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010884:	88fb      	ldrh	r3, [r7, #6]
 8010886:	3303      	adds	r3, #3
 8010888:	b29b      	uxth	r3, r3
 801088a:	f023 0303 	bic.w	r3, r3, #3
 801088e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010890:	8bbb      	ldrh	r3, [r7, #28]
 8010892:	2b0b      	cmp	r3, #11
 8010894:	d801      	bhi.n	801089a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010896:	230c      	movs	r3, #12
 8010898:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801089a:	8bbb      	ldrh	r3, [r7, #28]
 801089c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80108a0:	d803      	bhi.n	80108aa <mem_malloc+0x3a>
 80108a2:	8bba      	ldrh	r2, [r7, #28]
 80108a4:	88fb      	ldrh	r3, [r7, #6]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d201      	bcs.n	80108ae <mem_malloc+0x3e>
    return NULL;
 80108aa:	2300      	movs	r3, #0
 80108ac:	e0cd      	b.n	8010a4a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80108ae:	4869      	ldr	r0, [pc, #420]	; (8010a54 <mem_malloc+0x1e4>)
 80108b0:	f00d fa64 	bl	801dd7c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80108b4:	4b68      	ldr	r3, [pc, #416]	; (8010a58 <mem_malloc+0x1e8>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7ff fcfd 	bl	80102b8 <mem_to_ptr>
 80108be:	4603      	mov	r3, r0
 80108c0:	83fb      	strh	r3, [r7, #30]
 80108c2:	e0b7      	b.n	8010a34 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80108c4:	8bfb      	ldrh	r3, [r7, #30]
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7ff fce4 	bl	8010294 <ptr_to_mem>
 80108cc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	791b      	ldrb	r3, [r3, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f040 80a7 	bne.w	8010a26 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	881b      	ldrh	r3, [r3, #0]
 80108dc:	461a      	mov	r2, r3
 80108de:	8bfb      	ldrh	r3, [r7, #30]
 80108e0:	1ad3      	subs	r3, r2, r3
 80108e2:	f1a3 0208 	sub.w	r2, r3, #8
 80108e6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80108e8:	429a      	cmp	r2, r3
 80108ea:	f0c0 809c 	bcc.w	8010a26 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	461a      	mov	r2, r3
 80108f4:	8bfb      	ldrh	r3, [r7, #30]
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	f1a3 0208 	sub.w	r2, r3, #8
 80108fc:	8bbb      	ldrh	r3, [r7, #28]
 80108fe:	3314      	adds	r3, #20
 8010900:	429a      	cmp	r2, r3
 8010902:	d333      	bcc.n	801096c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010904:	8bfa      	ldrh	r2, [r7, #30]
 8010906:	8bbb      	ldrh	r3, [r7, #28]
 8010908:	4413      	add	r3, r2
 801090a:	b29b      	uxth	r3, r3
 801090c:	3308      	adds	r3, #8
 801090e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010910:	8a7b      	ldrh	r3, [r7, #18]
 8010912:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010916:	d106      	bne.n	8010926 <mem_malloc+0xb6>
 8010918:	4b50      	ldr	r3, [pc, #320]	; (8010a5c <mem_malloc+0x1ec>)
 801091a:	f240 3287 	movw	r2, #903	; 0x387
 801091e:	4950      	ldr	r1, [pc, #320]	; (8010a60 <mem_malloc+0x1f0>)
 8010920:	4850      	ldr	r0, [pc, #320]	; (8010a64 <mem_malloc+0x1f4>)
 8010922:	f00e f903 	bl	801eb2c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010926:	8a7b      	ldrh	r3, [r7, #18]
 8010928:	4618      	mov	r0, r3
 801092a:	f7ff fcb3 	bl	8010294 <ptr_to_mem>
 801092e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2200      	movs	r2, #0
 8010934:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	881a      	ldrh	r2, [r3, #0]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	8bfa      	ldrh	r2, [r7, #30]
 8010942:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	8a7a      	ldrh	r2, [r7, #18]
 8010948:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	2201      	movs	r2, #1
 801094e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	881b      	ldrh	r3, [r3, #0]
 8010954:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010958:	d00b      	beq.n	8010972 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	881b      	ldrh	r3, [r3, #0]
 801095e:	4618      	mov	r0, r3
 8010960:	f7ff fc98 	bl	8010294 <ptr_to_mem>
 8010964:	4602      	mov	r2, r0
 8010966:	8a7b      	ldrh	r3, [r7, #18]
 8010968:	8053      	strh	r3, [r2, #2]
 801096a:	e002      	b.n	8010972 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	2201      	movs	r2, #1
 8010970:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010972:	4b39      	ldr	r3, [pc, #228]	; (8010a58 <mem_malloc+0x1e8>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	697a      	ldr	r2, [r7, #20]
 8010978:	429a      	cmp	r2, r3
 801097a:	d127      	bne.n	80109cc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801097c:	4b36      	ldr	r3, [pc, #216]	; (8010a58 <mem_malloc+0x1e8>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010982:	e005      	b.n	8010990 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	881b      	ldrh	r3, [r3, #0]
 8010988:	4618      	mov	r0, r3
 801098a:	f7ff fc83 	bl	8010294 <ptr_to_mem>
 801098e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010990:	69bb      	ldr	r3, [r7, #24]
 8010992:	791b      	ldrb	r3, [r3, #4]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d004      	beq.n	80109a2 <mem_malloc+0x132>
 8010998:	4b33      	ldr	r3, [pc, #204]	; (8010a68 <mem_malloc+0x1f8>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	69ba      	ldr	r2, [r7, #24]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d1f0      	bne.n	8010984 <mem_malloc+0x114>
          }
          lfree = cur;
 80109a2:	4a2d      	ldr	r2, [pc, #180]	; (8010a58 <mem_malloc+0x1e8>)
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80109a8:	4b2b      	ldr	r3, [pc, #172]	; (8010a58 <mem_malloc+0x1e8>)
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	4b2e      	ldr	r3, [pc, #184]	; (8010a68 <mem_malloc+0x1f8>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d00b      	beq.n	80109cc <mem_malloc+0x15c>
 80109b4:	4b28      	ldr	r3, [pc, #160]	; (8010a58 <mem_malloc+0x1e8>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	791b      	ldrb	r3, [r3, #4]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d006      	beq.n	80109cc <mem_malloc+0x15c>
 80109be:	4b27      	ldr	r3, [pc, #156]	; (8010a5c <mem_malloc+0x1ec>)
 80109c0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80109c4:	4929      	ldr	r1, [pc, #164]	; (8010a6c <mem_malloc+0x1fc>)
 80109c6:	4827      	ldr	r0, [pc, #156]	; (8010a64 <mem_malloc+0x1f4>)
 80109c8:	f00e f8b0 	bl	801eb2c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80109cc:	4821      	ldr	r0, [pc, #132]	; (8010a54 <mem_malloc+0x1e4>)
 80109ce:	f00d f9e4 	bl	801dd9a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80109d2:	8bba      	ldrh	r2, [r7, #28]
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	4413      	add	r3, r2
 80109d8:	3308      	adds	r3, #8
 80109da:	4a23      	ldr	r2, [pc, #140]	; (8010a68 <mem_malloc+0x1f8>)
 80109dc:	6812      	ldr	r2, [r2, #0]
 80109de:	4293      	cmp	r3, r2
 80109e0:	d906      	bls.n	80109f0 <mem_malloc+0x180>
 80109e2:	4b1e      	ldr	r3, [pc, #120]	; (8010a5c <mem_malloc+0x1ec>)
 80109e4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80109e8:	4921      	ldr	r1, [pc, #132]	; (8010a70 <mem_malloc+0x200>)
 80109ea:	481e      	ldr	r0, [pc, #120]	; (8010a64 <mem_malloc+0x1f4>)
 80109ec:	f00e f89e 	bl	801eb2c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	f003 0303 	and.w	r3, r3, #3
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d006      	beq.n	8010a08 <mem_malloc+0x198>
 80109fa:	4b18      	ldr	r3, [pc, #96]	; (8010a5c <mem_malloc+0x1ec>)
 80109fc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010a00:	491c      	ldr	r1, [pc, #112]	; (8010a74 <mem_malloc+0x204>)
 8010a02:	4818      	ldr	r0, [pc, #96]	; (8010a64 <mem_malloc+0x1f4>)
 8010a04:	f00e f892 	bl	801eb2c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	f003 0303 	and.w	r3, r3, #3
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d006      	beq.n	8010a20 <mem_malloc+0x1b0>
 8010a12:	4b12      	ldr	r3, [pc, #72]	; (8010a5c <mem_malloc+0x1ec>)
 8010a14:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010a18:	4917      	ldr	r1, [pc, #92]	; (8010a78 <mem_malloc+0x208>)
 8010a1a:	4812      	ldr	r0, [pc, #72]	; (8010a64 <mem_malloc+0x1f4>)
 8010a1c:	f00e f886 	bl	801eb2c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	3308      	adds	r3, #8
 8010a24:	e011      	b.n	8010a4a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010a26:	8bfb      	ldrh	r3, [r7, #30]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7ff fc33 	bl	8010294 <ptr_to_mem>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	881b      	ldrh	r3, [r3, #0]
 8010a32:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010a34:	8bfa      	ldrh	r2, [r7, #30]
 8010a36:	8bbb      	ldrh	r3, [r7, #28]
 8010a38:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	f4ff af41 	bcc.w	80108c4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010a42:	4804      	ldr	r0, [pc, #16]	; (8010a54 <mem_malloc+0x1e4>)
 8010a44:	f00d f9a9 	bl	801dd9a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010a48:	2300      	movs	r3, #0
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3720      	adds	r7, #32
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	20014318 	.word	0x20014318
 8010a58:	2001431c 	.word	0x2001431c
 8010a5c:	08023668 	.word	0x08023668
 8010a60:	0802382c 	.word	0x0802382c
 8010a64:	080236b0 	.word	0x080236b0
 8010a68:	20014314 	.word	0x20014314
 8010a6c:	08023840 	.word	0x08023840
 8010a70:	0802385c 	.word	0x0802385c
 8010a74:	0802388c 	.word	0x0802388c
 8010a78:	080238bc 	.word	0x080238bc

08010a7c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b085      	sub	sp, #20
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	3303      	adds	r3, #3
 8010a92:	f023 0303 	bic.w	r3, r3, #3
 8010a96:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010a98:	2300      	movs	r3, #0
 8010a9a:	60fb      	str	r3, [r7, #12]
 8010a9c:	e011      	b.n	8010ac2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	68db      	ldr	r3, [r3, #12]
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	68ba      	ldr	r2, [r7, #8]
 8010aae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	889b      	ldrh	r3, [r3, #4]
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	4413      	add	r3, r2
 8010aba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	3301      	adds	r3, #1
 8010ac0:	60fb      	str	r3, [r7, #12]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	88db      	ldrh	r3, [r3, #6]
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	4293      	cmp	r3, r2
 8010acc:	dbe7      	blt.n	8010a9e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010ace:	bf00      	nop
 8010ad0:	bf00      	nop
 8010ad2:	3714      	adds	r7, #20
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ada:	4770      	bx	lr

08010adc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	80fb      	strh	r3, [r7, #6]
 8010ae6:	e009      	b.n	8010afc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010ae8:	88fb      	ldrh	r3, [r7, #6]
 8010aea:	4a08      	ldr	r2, [pc, #32]	; (8010b0c <memp_init+0x30>)
 8010aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7ff ffc3 	bl	8010a7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010af6:	88fb      	ldrh	r3, [r7, #6]
 8010af8:	3301      	adds	r3, #1
 8010afa:	80fb      	strh	r3, [r7, #6]
 8010afc:	88fb      	ldrh	r3, [r7, #6]
 8010afe:	2b0d      	cmp	r3, #13
 8010b00:	d9f2      	bls.n	8010ae8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010b02:	bf00      	nop
 8010b04:	bf00      	nop
 8010b06:	3708      	adds	r7, #8
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}
 8010b0c:	08026710 	.word	0x08026710

08010b10 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010b18:	f00d f96a 	bl	801ddf0 <sys_arch_protect>
 8010b1c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	68db      	ldr	r3, [r3, #12]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d015      	beq.n	8010b58 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	68ba      	ldr	r2, [r7, #8]
 8010b32:	6812      	ldr	r2, [r2, #0]
 8010b34:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	f003 0303 	and.w	r3, r3, #3
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d006      	beq.n	8010b4e <do_memp_malloc_pool+0x3e>
 8010b40:	4b09      	ldr	r3, [pc, #36]	; (8010b68 <do_memp_malloc_pool+0x58>)
 8010b42:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010b46:	4909      	ldr	r1, [pc, #36]	; (8010b6c <do_memp_malloc_pool+0x5c>)
 8010b48:	4809      	ldr	r0, [pc, #36]	; (8010b70 <do_memp_malloc_pool+0x60>)
 8010b4a:	f00d ffef 	bl	801eb2c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f00d f95c 	bl	801de0c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	e003      	b.n	8010b60 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f00d f957 	bl	801de0c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3710      	adds	r7, #16
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	08023980 	.word	0x08023980
 8010b6c:	080239b0 	.word	0x080239b0
 8010b70:	080239d4 	.word	0x080239d4

08010b74 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010b7e:	79fb      	ldrb	r3, [r7, #7]
 8010b80:	2b0d      	cmp	r3, #13
 8010b82:	d908      	bls.n	8010b96 <memp_malloc+0x22>
 8010b84:	4b0a      	ldr	r3, [pc, #40]	; (8010bb0 <memp_malloc+0x3c>)
 8010b86:	f240 1257 	movw	r2, #343	; 0x157
 8010b8a:	490a      	ldr	r1, [pc, #40]	; (8010bb4 <memp_malloc+0x40>)
 8010b8c:	480a      	ldr	r0, [pc, #40]	; (8010bb8 <memp_malloc+0x44>)
 8010b8e:	f00d ffcd 	bl	801eb2c <iprintf>
 8010b92:	2300      	movs	r3, #0
 8010b94:	e008      	b.n	8010ba8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010b96:	79fb      	ldrb	r3, [r7, #7]
 8010b98:	4a08      	ldr	r2, [pc, #32]	; (8010bbc <memp_malloc+0x48>)
 8010b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7ff ffb6 	bl	8010b10 <do_memp_malloc_pool>
 8010ba4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3710      	adds	r7, #16
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	08023980 	.word	0x08023980
 8010bb4:	08023a10 	.word	0x08023a10
 8010bb8:	080239d4 	.word	0x080239d4
 8010bbc:	08026710 	.word	0x08026710

08010bc0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	f003 0303 	and.w	r3, r3, #3
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d006      	beq.n	8010be2 <do_memp_free_pool+0x22>
 8010bd4:	4b0d      	ldr	r3, [pc, #52]	; (8010c0c <do_memp_free_pool+0x4c>)
 8010bd6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010bda:	490d      	ldr	r1, [pc, #52]	; (8010c10 <do_memp_free_pool+0x50>)
 8010bdc:	480d      	ldr	r0, [pc, #52]	; (8010c14 <do_memp_free_pool+0x54>)
 8010bde:	f00d ffa5 	bl	801eb2c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010be6:	f00d f903 	bl	801ddf0 <sys_arch_protect>
 8010bea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	681a      	ldr	r2, [r3, #0]
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	68fa      	ldr	r2, [r7, #12]
 8010bfc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010bfe:	68b8      	ldr	r0, [r7, #8]
 8010c00:	f00d f904 	bl	801de0c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010c04:	bf00      	nop
 8010c06:	3710      	adds	r7, #16
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	08023980 	.word	0x08023980
 8010c10:	08023a30 	.word	0x08023a30
 8010c14:	080239d4 	.word	0x080239d4

08010c18 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	4603      	mov	r3, r0
 8010c20:	6039      	str	r1, [r7, #0]
 8010c22:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010c24:	79fb      	ldrb	r3, [r7, #7]
 8010c26:	2b0d      	cmp	r3, #13
 8010c28:	d907      	bls.n	8010c3a <memp_free+0x22>
 8010c2a:	4b0c      	ldr	r3, [pc, #48]	; (8010c5c <memp_free+0x44>)
 8010c2c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010c30:	490b      	ldr	r1, [pc, #44]	; (8010c60 <memp_free+0x48>)
 8010c32:	480c      	ldr	r0, [pc, #48]	; (8010c64 <memp_free+0x4c>)
 8010c34:	f00d ff7a 	bl	801eb2c <iprintf>
 8010c38:	e00c      	b.n	8010c54 <memp_free+0x3c>

  if (mem == NULL) {
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d008      	beq.n	8010c52 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010c40:	79fb      	ldrb	r3, [r7, #7]
 8010c42:	4a09      	ldr	r2, [pc, #36]	; (8010c68 <memp_free+0x50>)
 8010c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c48:	6839      	ldr	r1, [r7, #0]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7ff ffb8 	bl	8010bc0 <do_memp_free_pool>
 8010c50:	e000      	b.n	8010c54 <memp_free+0x3c>
    return;
 8010c52:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010c54:	3708      	adds	r7, #8
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	08023980 	.word	0x08023980
 8010c60:	08023a50 	.word	0x08023a50
 8010c64:	080239d4 	.word	0x080239d4
 8010c68:	08026710 	.word	0x08026710

08010c6c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010c70:	bf00      	nop
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr
	...

08010c7c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b086      	sub	sp, #24
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	607a      	str	r2, [r7, #4]
 8010c88:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d108      	bne.n	8010ca2 <netif_add+0x26>
 8010c90:	4b5b      	ldr	r3, [pc, #364]	; (8010e00 <netif_add+0x184>)
 8010c92:	f240 1227 	movw	r2, #295	; 0x127
 8010c96:	495b      	ldr	r1, [pc, #364]	; (8010e04 <netif_add+0x188>)
 8010c98:	485b      	ldr	r0, [pc, #364]	; (8010e08 <netif_add+0x18c>)
 8010c9a:	f00d ff47 	bl	801eb2c <iprintf>
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	e0a9      	b.n	8010df6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d108      	bne.n	8010cba <netif_add+0x3e>
 8010ca8:	4b55      	ldr	r3, [pc, #340]	; (8010e00 <netif_add+0x184>)
 8010caa:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010cae:	4957      	ldr	r1, [pc, #348]	; (8010e0c <netif_add+0x190>)
 8010cb0:	4855      	ldr	r0, [pc, #340]	; (8010e08 <netif_add+0x18c>)
 8010cb2:	f00d ff3b 	bl	801eb2c <iprintf>
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	e09d      	b.n	8010df6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d101      	bne.n	8010cc4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010cc0:	4b53      	ldr	r3, [pc, #332]	; (8010e10 <netif_add+0x194>)
 8010cc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d101      	bne.n	8010cce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010cca:	4b51      	ldr	r3, [pc, #324]	; (8010e10 <netif_add+0x194>)
 8010ccc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d101      	bne.n	8010cd8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010cd4:	4b4e      	ldr	r3, [pc, #312]	; (8010e10 <netif_add+0x194>)
 8010cd6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	4a49      	ldr	r2, [pc, #292]	; (8010e14 <netif_add+0x198>)
 8010cee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	3324      	adds	r3, #36	; 0x24
 8010d02:	2204      	movs	r2, #4
 8010d04:	2100      	movs	r1, #0
 8010d06:	4618      	mov	r0, r3
 8010d08:	f00d f9f4 	bl	801e0f4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6a3a      	ldr	r2, [r7, #32]
 8010d16:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010d18:	4b3f      	ldr	r3, [pc, #252]	; (8010e18 <netif_add+0x19c>)
 8010d1a:	781a      	ldrb	r2, [r3, #0]
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d26:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	68b9      	ldr	r1, [r7, #8]
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	f000 f914 	bl	8010f5c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	4798      	blx	r3
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d001      	beq.n	8010d44 <netif_add+0xc8>
    return NULL;
 8010d40:	2300      	movs	r3, #0
 8010d42:	e058      	b.n	8010df6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010d4a:	2bff      	cmp	r3, #255	; 0xff
 8010d4c:	d103      	bne.n	8010d56 <netif_add+0xda>
        netif->num = 0;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	2200      	movs	r2, #0
 8010d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8010d56:	2300      	movs	r3, #0
 8010d58:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010d5a:	4b30      	ldr	r3, [pc, #192]	; (8010e1c <netif_add+0x1a0>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	617b      	str	r3, [r7, #20]
 8010d60:	e02b      	b.n	8010dba <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010d62:	697a      	ldr	r2, [r7, #20]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d106      	bne.n	8010d78 <netif_add+0xfc>
 8010d6a:	4b25      	ldr	r3, [pc, #148]	; (8010e00 <netif_add+0x184>)
 8010d6c:	f240 128b 	movw	r2, #395	; 0x18b
 8010d70:	492b      	ldr	r1, [pc, #172]	; (8010e20 <netif_add+0x1a4>)
 8010d72:	4825      	ldr	r0, [pc, #148]	; (8010e08 <netif_add+0x18c>)
 8010d74:	f00d feda 	bl	801eb2c <iprintf>
        num_netifs++;
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	2bff      	cmp	r3, #255	; 0xff
 8010d82:	dd06      	ble.n	8010d92 <netif_add+0x116>
 8010d84:	4b1e      	ldr	r3, [pc, #120]	; (8010e00 <netif_add+0x184>)
 8010d86:	f240 128d 	movw	r2, #397	; 0x18d
 8010d8a:	4926      	ldr	r1, [pc, #152]	; (8010e24 <netif_add+0x1a8>)
 8010d8c:	481e      	ldr	r0, [pc, #120]	; (8010e08 <netif_add+0x18c>)
 8010d8e:	f00d fecd 	bl	801eb2c <iprintf>
        if (netif2->num == netif->num) {
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d108      	bne.n	8010db4 <netif_add+0x138>
          netif->num++;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010da8:	3301      	adds	r3, #1
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8010db2:	e005      	b.n	8010dc0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	617b      	str	r3, [r7, #20]
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d1d0      	bne.n	8010d62 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1be      	bne.n	8010d44 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010dcc:	2bfe      	cmp	r3, #254	; 0xfe
 8010dce:	d103      	bne.n	8010dd8 <netif_add+0x15c>
    netif_num = 0;
 8010dd0:	4b11      	ldr	r3, [pc, #68]	; (8010e18 <netif_add+0x19c>)
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	701a      	strb	r2, [r3, #0]
 8010dd6:	e006      	b.n	8010de6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010dde:	3301      	adds	r3, #1
 8010de0:	b2da      	uxtb	r2, r3
 8010de2:	4b0d      	ldr	r3, [pc, #52]	; (8010e18 <netif_add+0x19c>)
 8010de4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010de6:	4b0d      	ldr	r3, [pc, #52]	; (8010e1c <netif_add+0x1a0>)
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010dee:	4a0b      	ldr	r2, [pc, #44]	; (8010e1c <netif_add+0x1a0>)
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010df4:	68fb      	ldr	r3, [r7, #12]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3718      	adds	r7, #24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	08023a6c 	.word	0x08023a6c
 8010e04:	08023b00 	.word	0x08023b00
 8010e08:	08023abc 	.word	0x08023abc
 8010e0c:	08023b1c 	.word	0x08023b1c
 8010e10:	080267a0 	.word	0x080267a0
 8010e14:	0801123f 	.word	0x0801123f
 8010e18:	20014358 	.word	0x20014358
 8010e1c:	2001b0b8 	.word	0x2001b0b8
 8010e20:	08023b40 	.word	0x08023b40
 8010e24:	08023b54 	.word	0x08023b54

08010e28 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f003 f929 	bl	801408c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010e3a:	6839      	ldr	r1, [r7, #0]
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f008 fac3 	bl	80193c8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010e42:	bf00      	nop
 8010e44:	3708      	adds	r7, #8
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
	...

08010e4c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b086      	sub	sp, #24
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d106      	bne.n	8010e6c <netif_do_set_ipaddr+0x20>
 8010e5e:	4b1d      	ldr	r3, [pc, #116]	; (8010ed4 <netif_do_set_ipaddr+0x88>)
 8010e60:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010e64:	491c      	ldr	r1, [pc, #112]	; (8010ed8 <netif_do_set_ipaddr+0x8c>)
 8010e66:	481d      	ldr	r0, [pc, #116]	; (8010edc <netif_do_set_ipaddr+0x90>)
 8010e68:	f00d fe60 	bl	801eb2c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d106      	bne.n	8010e80 <netif_do_set_ipaddr+0x34>
 8010e72:	4b18      	ldr	r3, [pc, #96]	; (8010ed4 <netif_do_set_ipaddr+0x88>)
 8010e74:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010e78:	4917      	ldr	r1, [pc, #92]	; (8010ed8 <netif_do_set_ipaddr+0x8c>)
 8010e7a:	4818      	ldr	r0, [pc, #96]	; (8010edc <netif_do_set_ipaddr+0x90>)
 8010e7c:	f00d fe56 	bl	801eb2c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	3304      	adds	r3, #4
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d01c      	beq.n	8010ec8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	3304      	adds	r3, #4
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010e9e:	f107 0314 	add.w	r3, r7, #20
 8010ea2:	4619      	mov	r1, r3
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f7ff ffbf 	bl	8010e28 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <netif_do_set_ipaddr+0x6a>
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	e000      	b.n	8010eb8 <netif_do_set_ipaddr+0x6c>
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010ebc:	2101      	movs	r1, #1
 8010ebe:	68f8      	ldr	r0, [r7, #12]
 8010ec0:	f000 f8d2 	bl	8011068 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	e000      	b.n	8010eca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010ec8:	2300      	movs	r3, #0
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3718      	adds	r7, #24
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	08023a6c 	.word	0x08023a6c
 8010ed8:	08023b84 	.word	0x08023b84
 8010edc:	08023abc 	.word	0x08023abc

08010ee0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b085      	sub	sp, #20
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	3308      	adds	r3, #8
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d00a      	beq.n	8010f10 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d002      	beq.n	8010f06 <netif_do_set_netmask+0x26>
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	e000      	b.n	8010f08 <netif_do_set_netmask+0x28>
 8010f06:	2300      	movs	r3, #0
 8010f08:	68fa      	ldr	r2, [r7, #12]
 8010f0a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	e000      	b.n	8010f12 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010f10:	2300      	movs	r3, #0
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3714      	adds	r7, #20
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr

08010f1e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010f1e:	b480      	push	{r7}
 8010f20:	b085      	sub	sp, #20
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	60f8      	str	r0, [r7, #12]
 8010f26:	60b9      	str	r1, [r7, #8]
 8010f28:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	330c      	adds	r3, #12
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d00a      	beq.n	8010f4e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d002      	beq.n	8010f44 <netif_do_set_gw+0x26>
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	e000      	b.n	8010f46 <netif_do_set_gw+0x28>
 8010f44:	2300      	movs	r3, #0
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	e000      	b.n	8010f50 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3714      	adds	r7, #20
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr

08010f5c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b088      	sub	sp, #32
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	60b9      	str	r1, [r7, #8]
 8010f66:	607a      	str	r2, [r7, #4]
 8010f68:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010f78:	4b1c      	ldr	r3, [pc, #112]	; (8010fec <netif_set_addr+0x90>)
 8010f7a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d101      	bne.n	8010f86 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010f82:	4b1a      	ldr	r3, [pc, #104]	; (8010fec <netif_set_addr+0x90>)
 8010f84:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d101      	bne.n	8010f90 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010f8c:	4b17      	ldr	r3, [pc, #92]	; (8010fec <netif_set_addr+0x90>)
 8010f8e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d003      	beq.n	8010f9e <netif_set_addr+0x42>
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d101      	bne.n	8010fa2 <netif_set_addr+0x46>
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e000      	b.n	8010fa4 <netif_set_addr+0x48>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d006      	beq.n	8010fba <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010fac:	f107 0310 	add.w	r3, r7, #16
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	68b9      	ldr	r1, [r7, #8]
 8010fb4:	68f8      	ldr	r0, [r7, #12]
 8010fb6:	f7ff ff49 	bl	8010e4c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010fba:	69fa      	ldr	r2, [r7, #28]
 8010fbc:	6879      	ldr	r1, [r7, #4]
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f7ff ff8e 	bl	8010ee0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010fc4:	69ba      	ldr	r2, [r7, #24]
 8010fc6:	6839      	ldr	r1, [r7, #0]
 8010fc8:	68f8      	ldr	r0, [r7, #12]
 8010fca:	f7ff ffa8 	bl	8010f1e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d106      	bne.n	8010fe2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010fd4:	f107 0310 	add.w	r3, r7, #16
 8010fd8:	461a      	mov	r2, r3
 8010fda:	68b9      	ldr	r1, [r7, #8]
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f7ff ff35 	bl	8010e4c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010fe2:	bf00      	nop
 8010fe4:	3720      	adds	r7, #32
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	080267a0 	.word	0x080267a0

08010ff0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010ff8:	4a04      	ldr	r2, [pc, #16]	; (801100c <netif_set_default+0x1c>)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010ffe:	bf00      	nop
 8011000:	370c      	adds	r7, #12
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	2001b0bc 	.word	0x2001b0bc

08011010 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d107      	bne.n	801102e <netif_set_up+0x1e>
 801101e:	4b0f      	ldr	r3, [pc, #60]	; (801105c <netif_set_up+0x4c>)
 8011020:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011024:	490e      	ldr	r1, [pc, #56]	; (8011060 <netif_set_up+0x50>)
 8011026:	480f      	ldr	r0, [pc, #60]	; (8011064 <netif_set_up+0x54>)
 8011028:	f00d fd80 	bl	801eb2c <iprintf>
 801102c:	e013      	b.n	8011056 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	2b00      	cmp	r3, #0
 801103a:	d10c      	bne.n	8011056 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011042:	f043 0301 	orr.w	r3, r3, #1
 8011046:	b2da      	uxtb	r2, r3
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801104e:	2103      	movs	r1, #3
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f000 f809 	bl	8011068 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	08023a6c 	.word	0x08023a6c
 8011060:	08023bf4 	.word	0x08023bf4
 8011064:	08023abc 	.word	0x08023abc

08011068 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	460b      	mov	r3, r1
 8011072:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d106      	bne.n	8011088 <netif_issue_reports+0x20>
 801107a:	4b18      	ldr	r3, [pc, #96]	; (80110dc <netif_issue_reports+0x74>)
 801107c:	f240 326d 	movw	r2, #877	; 0x36d
 8011080:	4917      	ldr	r1, [pc, #92]	; (80110e0 <netif_issue_reports+0x78>)
 8011082:	4818      	ldr	r0, [pc, #96]	; (80110e4 <netif_issue_reports+0x7c>)
 8011084:	f00d fd52 	bl	801eb2c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801108e:	f003 0304 	and.w	r3, r3, #4
 8011092:	2b00      	cmp	r3, #0
 8011094:	d01e      	beq.n	80110d4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801109c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d017      	beq.n	80110d4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80110a4:	78fb      	ldrb	r3, [r7, #3]
 80110a6:	f003 0301 	and.w	r3, r3, #1
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d013      	beq.n	80110d6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	3304      	adds	r3, #4
 80110b2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00e      	beq.n	80110d6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80110be:	f003 0308 	and.w	r3, r3, #8
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d007      	beq.n	80110d6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	3304      	adds	r3, #4
 80110ca:	4619      	mov	r1, r3
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f00b f807 	bl	801c0e0 <etharp_request>
 80110d2:	e000      	b.n	80110d6 <netif_issue_reports+0x6e>
    return;
 80110d4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	08023a6c 	.word	0x08023a6c
 80110e0:	08023c10 	.word	0x08023c10
 80110e4:	08023abc 	.word	0x08023abc

080110e8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d107      	bne.n	8011106 <netif_set_down+0x1e>
 80110f6:	4b12      	ldr	r3, [pc, #72]	; (8011140 <netif_set_down+0x58>)
 80110f8:	f240 329b 	movw	r2, #923	; 0x39b
 80110fc:	4911      	ldr	r1, [pc, #68]	; (8011144 <netif_set_down+0x5c>)
 80110fe:	4812      	ldr	r0, [pc, #72]	; (8011148 <netif_set_down+0x60>)
 8011100:	f00d fd14 	bl	801eb2c <iprintf>
 8011104:	e019      	b.n	801113a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801110c:	f003 0301 	and.w	r3, r3, #1
 8011110:	2b00      	cmp	r3, #0
 8011112:	d012      	beq.n	801113a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801111a:	f023 0301 	bic.w	r3, r3, #1
 801111e:	b2da      	uxtb	r2, r3
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801112c:	f003 0308 	and.w	r3, r3, #8
 8011130:	2b00      	cmp	r3, #0
 8011132:	d002      	beq.n	801113a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f00a fb8d 	bl	801b854 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	08023a6c 	.word	0x08023a6c
 8011144:	08023c34 	.word	0x08023c34
 8011148:	08023abc 	.word	0x08023abc

0801114c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d107      	bne.n	801116a <netif_set_link_up+0x1e>
 801115a:	4b15      	ldr	r3, [pc, #84]	; (80111b0 <netif_set_link_up+0x64>)
 801115c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011160:	4914      	ldr	r1, [pc, #80]	; (80111b4 <netif_set_link_up+0x68>)
 8011162:	4815      	ldr	r0, [pc, #84]	; (80111b8 <netif_set_link_up+0x6c>)
 8011164:	f00d fce2 	bl	801eb2c <iprintf>
 8011168:	e01e      	b.n	80111a8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011170:	f003 0304 	and.w	r3, r3, #4
 8011174:	2b00      	cmp	r3, #0
 8011176:	d117      	bne.n	80111a8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801117e:	f043 0304 	orr.w	r3, r3, #4
 8011182:	b2da      	uxtb	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f008 fd66 	bl	8019c5c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011190:	2103      	movs	r1, #3
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7ff ff68 	bl	8011068 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	69db      	ldr	r3, [r3, #28]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d003      	beq.n	80111a8 <netif_set_link_up+0x5c>
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	69db      	ldr	r3, [r3, #28]
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80111a8:	3708      	adds	r7, #8
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	08023a6c 	.word	0x08023a6c
 80111b4:	08023c54 	.word	0x08023c54
 80111b8:	08023abc 	.word	0x08023abc

080111bc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d107      	bne.n	80111da <netif_set_link_down+0x1e>
 80111ca:	4b11      	ldr	r3, [pc, #68]	; (8011210 <netif_set_link_down+0x54>)
 80111cc:	f240 4206 	movw	r2, #1030	; 0x406
 80111d0:	4910      	ldr	r1, [pc, #64]	; (8011214 <netif_set_link_down+0x58>)
 80111d2:	4811      	ldr	r0, [pc, #68]	; (8011218 <netif_set_link_down+0x5c>)
 80111d4:	f00d fcaa 	bl	801eb2c <iprintf>
 80111d8:	e017      	b.n	801120a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80111e0:	f003 0304 	and.w	r3, r3, #4
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d010      	beq.n	801120a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80111ee:	f023 0304 	bic.w	r3, r3, #4
 80111f2:	b2da      	uxtb	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	69db      	ldr	r3, [r3, #28]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d003      	beq.n	801120a <netif_set_link_down+0x4e>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	69db      	ldr	r3, [r3, #28]
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801120a:	3708      	adds	r7, #8
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	08023a6c 	.word	0x08023a6c
 8011214:	08023c78 	.word	0x08023c78
 8011218:	08023abc 	.word	0x08023abc

0801121c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801121c:	b480      	push	{r7}
 801121e:	b083      	sub	sp, #12
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d002      	beq.n	8011232 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	683a      	ldr	r2, [r7, #0]
 8011230:	61da      	str	r2, [r3, #28]
  }
}
 8011232:	bf00      	nop
 8011234:	370c      	adds	r7, #12
 8011236:	46bd      	mov	sp, r7
 8011238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123c:	4770      	bx	lr

0801123e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801123e:	b480      	push	{r7}
 8011240:	b085      	sub	sp, #20
 8011242:	af00      	add	r7, sp, #0
 8011244:	60f8      	str	r0, [r7, #12]
 8011246:	60b9      	str	r1, [r7, #8]
 8011248:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801124a:	f06f 030b 	mvn.w	r3, #11
}
 801124e:	4618      	mov	r0, r3
 8011250:	3714      	adds	r7, #20
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr
	...

0801125c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
 8011262:	4603      	mov	r3, r0
 8011264:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011266:	79fb      	ldrb	r3, [r7, #7]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d013      	beq.n	8011294 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801126c:	4b0d      	ldr	r3, [pc, #52]	; (80112a4 <netif_get_by_index+0x48>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	60fb      	str	r3, [r7, #12]
 8011272:	e00c      	b.n	801128e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801127a:	3301      	adds	r3, #1
 801127c:	b2db      	uxtb	r3, r3
 801127e:	79fa      	ldrb	r2, [r7, #7]
 8011280:	429a      	cmp	r2, r3
 8011282:	d101      	bne.n	8011288 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	e006      	b.n	8011296 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	60fb      	str	r3, [r7, #12]
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d1ef      	bne.n	8011274 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011294:	2300      	movs	r3, #0
}
 8011296:	4618      	mov	r0, r3
 8011298:	3714      	adds	r7, #20
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	2001b0b8 	.word	0x2001b0b8

080112a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80112ae:	f00c fd9f 	bl	801ddf0 <sys_arch_protect>
 80112b2:	6038      	str	r0, [r7, #0]
 80112b4:	4b0d      	ldr	r3, [pc, #52]	; (80112ec <pbuf_free_ooseq+0x44>)
 80112b6:	2200      	movs	r2, #0
 80112b8:	701a      	strb	r2, [r3, #0]
 80112ba:	6838      	ldr	r0, [r7, #0]
 80112bc:	f00c fda6 	bl	801de0c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80112c0:	4b0b      	ldr	r3, [pc, #44]	; (80112f0 <pbuf_free_ooseq+0x48>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	607b      	str	r3, [r7, #4]
 80112c6:	e00a      	b.n	80112de <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d003      	beq.n	80112d8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f002 ff19 	bl	8014108 <tcp_free_ooseq>
      return;
 80112d6:	e005      	b.n	80112e4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	68db      	ldr	r3, [r3, #12]
 80112dc:	607b      	str	r3, [r7, #4]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1f1      	bne.n	80112c8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80112e4:	3708      	adds	r7, #8
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	2001b0c0 	.word	0x2001b0c0
 80112f0:	2001b0c8 	.word	0x2001b0c8

080112f4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80112fc:	f7ff ffd4 	bl	80112a8 <pbuf_free_ooseq>
}
 8011300:	bf00      	nop
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801130e:	f00c fd6f 	bl	801ddf0 <sys_arch_protect>
 8011312:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011314:	4b0f      	ldr	r3, [pc, #60]	; (8011354 <pbuf_pool_is_empty+0x4c>)
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801131a:	4b0e      	ldr	r3, [pc, #56]	; (8011354 <pbuf_pool_is_empty+0x4c>)
 801131c:	2201      	movs	r2, #1
 801131e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f00c fd73 	bl	801de0c <sys_arch_unprotect>

  if (!queued) {
 8011326:	78fb      	ldrb	r3, [r7, #3]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d10f      	bne.n	801134c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801132c:	2100      	movs	r1, #0
 801132e:	480a      	ldr	r0, [pc, #40]	; (8011358 <pbuf_pool_is_empty+0x50>)
 8011330:	f7fd fef4 	bl	800f11c <tcpip_try_callback>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d008      	beq.n	801134c <pbuf_pool_is_empty+0x44>
 801133a:	f00c fd59 	bl	801ddf0 <sys_arch_protect>
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	4b04      	ldr	r3, [pc, #16]	; (8011354 <pbuf_pool_is_empty+0x4c>)
 8011342:	2200      	movs	r2, #0
 8011344:	701a      	strb	r2, [r3, #0]
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f00c fd60 	bl	801de0c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801134c:	bf00      	nop
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	2001b0c0 	.word	0x2001b0c0
 8011358:	080112f5 	.word	0x080112f5

0801135c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801135c:	b480      	push	{r7}
 801135e:	b085      	sub	sp, #20
 8011360:	af00      	add	r7, sp, #0
 8011362:	60f8      	str	r0, [r7, #12]
 8011364:	60b9      	str	r1, [r7, #8]
 8011366:	4611      	mov	r1, r2
 8011368:	461a      	mov	r2, r3
 801136a:	460b      	mov	r3, r1
 801136c:	80fb      	strh	r3, [r7, #6]
 801136e:	4613      	mov	r3, r2
 8011370:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	2200      	movs	r2, #0
 8011376:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	68ba      	ldr	r2, [r7, #8]
 801137c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	88fa      	ldrh	r2, [r7, #6]
 8011382:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	88ba      	ldrh	r2, [r7, #4]
 8011388:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801138a:	8b3b      	ldrh	r3, [r7, #24]
 801138c:	b2da      	uxtb	r2, r3
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	7f3a      	ldrb	r2, [r7, #28]
 8011396:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2201      	movs	r2, #1
 801139c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2200      	movs	r2, #0
 80113a2:	73da      	strb	r2, [r3, #15]
}
 80113a4:	bf00      	nop
 80113a6:	3714      	adds	r7, #20
 80113a8:	46bd      	mov	sp, r7
 80113aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ae:	4770      	bx	lr

080113b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08c      	sub	sp, #48	; 0x30
 80113b4:	af02      	add	r7, sp, #8
 80113b6:	4603      	mov	r3, r0
 80113b8:	71fb      	strb	r3, [r7, #7]
 80113ba:	460b      	mov	r3, r1
 80113bc:	80bb      	strh	r3, [r7, #4]
 80113be:	4613      	mov	r3, r2
 80113c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80113c2:	79fb      	ldrb	r3, [r7, #7]
 80113c4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80113c6:	887b      	ldrh	r3, [r7, #2]
 80113c8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80113cc:	d07f      	beq.n	80114ce <pbuf_alloc+0x11e>
 80113ce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80113d2:	f300 80c8 	bgt.w	8011566 <pbuf_alloc+0x1b6>
 80113d6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80113da:	d010      	beq.n	80113fe <pbuf_alloc+0x4e>
 80113dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80113e0:	f300 80c1 	bgt.w	8011566 <pbuf_alloc+0x1b6>
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d002      	beq.n	80113ee <pbuf_alloc+0x3e>
 80113e8:	2b41      	cmp	r3, #65	; 0x41
 80113ea:	f040 80bc 	bne.w	8011566 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80113ee:	887a      	ldrh	r2, [r7, #2]
 80113f0:	88bb      	ldrh	r3, [r7, #4]
 80113f2:	4619      	mov	r1, r3
 80113f4:	2000      	movs	r0, #0
 80113f6:	f000 f8d1 	bl	801159c <pbuf_alloc_reference>
 80113fa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80113fc:	e0bd      	b.n	801157a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80113fe:	2300      	movs	r3, #0
 8011400:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011402:	2300      	movs	r3, #0
 8011404:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011406:	88bb      	ldrh	r3, [r7, #4]
 8011408:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801140a:	200d      	movs	r0, #13
 801140c:	f7ff fbb2 	bl	8010b74 <memp_malloc>
 8011410:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d109      	bne.n	801142c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011418:	f7ff ff76 	bl	8011308 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141e:	2b00      	cmp	r3, #0
 8011420:	d002      	beq.n	8011428 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011424:	f000 fada 	bl	80119dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011428:	2300      	movs	r3, #0
 801142a:	e0a7      	b.n	801157c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801142c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801142e:	3303      	adds	r3, #3
 8011430:	b29b      	uxth	r3, r3
 8011432:	f023 0303 	bic.w	r3, r3, #3
 8011436:	b29b      	uxth	r3, r3
 8011438:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801143c:	b29b      	uxth	r3, r3
 801143e:	8b7a      	ldrh	r2, [r7, #26]
 8011440:	4293      	cmp	r3, r2
 8011442:	bf28      	it	cs
 8011444:	4613      	movcs	r3, r2
 8011446:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801144a:	3310      	adds	r3, #16
 801144c:	693a      	ldr	r2, [r7, #16]
 801144e:	4413      	add	r3, r2
 8011450:	3303      	adds	r3, #3
 8011452:	f023 0303 	bic.w	r3, r3, #3
 8011456:	4618      	mov	r0, r3
 8011458:	89f9      	ldrh	r1, [r7, #14]
 801145a:	8b7a      	ldrh	r2, [r7, #26]
 801145c:	2300      	movs	r3, #0
 801145e:	9301      	str	r3, [sp, #4]
 8011460:	887b      	ldrh	r3, [r7, #2]
 8011462:	9300      	str	r3, [sp, #0]
 8011464:	460b      	mov	r3, r1
 8011466:	4601      	mov	r1, r0
 8011468:	6938      	ldr	r0, [r7, #16]
 801146a:	f7ff ff77 	bl	801135c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	f003 0303 	and.w	r3, r3, #3
 8011476:	2b00      	cmp	r3, #0
 8011478:	d006      	beq.n	8011488 <pbuf_alloc+0xd8>
 801147a:	4b42      	ldr	r3, [pc, #264]	; (8011584 <pbuf_alloc+0x1d4>)
 801147c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011480:	4941      	ldr	r1, [pc, #260]	; (8011588 <pbuf_alloc+0x1d8>)
 8011482:	4842      	ldr	r0, [pc, #264]	; (801158c <pbuf_alloc+0x1dc>)
 8011484:	f00d fb52 	bl	801eb2c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011488:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801148a:	3303      	adds	r3, #3
 801148c:	f023 0303 	bic.w	r3, r3, #3
 8011490:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011494:	d106      	bne.n	80114a4 <pbuf_alloc+0xf4>
 8011496:	4b3b      	ldr	r3, [pc, #236]	; (8011584 <pbuf_alloc+0x1d4>)
 8011498:	f44f 7281 	mov.w	r2, #258	; 0x102
 801149c:	493c      	ldr	r1, [pc, #240]	; (8011590 <pbuf_alloc+0x1e0>)
 801149e:	483b      	ldr	r0, [pc, #236]	; (801158c <pbuf_alloc+0x1dc>)
 80114a0:	f00d fb44 	bl	801eb2c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80114a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d102      	bne.n	80114b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	627b      	str	r3, [r7, #36]	; 0x24
 80114ae:	e002      	b.n	80114b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	693a      	ldr	r2, [r7, #16]
 80114b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80114ba:	8b7a      	ldrh	r2, [r7, #26]
 80114bc:	89fb      	ldrh	r3, [r7, #14]
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80114c2:	2300      	movs	r3, #0
 80114c4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80114c6:	8b7b      	ldrh	r3, [r7, #26]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d19e      	bne.n	801140a <pbuf_alloc+0x5a>
      break;
 80114cc:	e055      	b.n	801157a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80114ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114d0:	3303      	adds	r3, #3
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	f023 0303 	bic.w	r3, r3, #3
 80114d8:	b29a      	uxth	r2, r3
 80114da:	88bb      	ldrh	r3, [r7, #4]
 80114dc:	3303      	adds	r3, #3
 80114de:	b29b      	uxth	r3, r3
 80114e0:	f023 0303 	bic.w	r3, r3, #3
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	4413      	add	r3, r2
 80114e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80114ea:	8b3b      	ldrh	r3, [r7, #24]
 80114ec:	3310      	adds	r3, #16
 80114ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80114f0:	8b3a      	ldrh	r2, [r7, #24]
 80114f2:	88bb      	ldrh	r3, [r7, #4]
 80114f4:	3303      	adds	r3, #3
 80114f6:	f023 0303 	bic.w	r3, r3, #3
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d306      	bcc.n	801150c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80114fe:	8afa      	ldrh	r2, [r7, #22]
 8011500:	88bb      	ldrh	r3, [r7, #4]
 8011502:	3303      	adds	r3, #3
 8011504:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011508:	429a      	cmp	r2, r3
 801150a:	d201      	bcs.n	8011510 <pbuf_alloc+0x160>
        return NULL;
 801150c:	2300      	movs	r3, #0
 801150e:	e035      	b.n	801157c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011510:	8afb      	ldrh	r3, [r7, #22]
 8011512:	4618      	mov	r0, r3
 8011514:	f7ff f9ac 	bl	8010870 <mem_malloc>
 8011518:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151c:	2b00      	cmp	r3, #0
 801151e:	d101      	bne.n	8011524 <pbuf_alloc+0x174>
        return NULL;
 8011520:	2300      	movs	r3, #0
 8011522:	e02b      	b.n	801157c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011524:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011526:	3310      	adds	r3, #16
 8011528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801152a:	4413      	add	r3, r2
 801152c:	3303      	adds	r3, #3
 801152e:	f023 0303 	bic.w	r3, r3, #3
 8011532:	4618      	mov	r0, r3
 8011534:	88b9      	ldrh	r1, [r7, #4]
 8011536:	88ba      	ldrh	r2, [r7, #4]
 8011538:	2300      	movs	r3, #0
 801153a:	9301      	str	r3, [sp, #4]
 801153c:	887b      	ldrh	r3, [r7, #2]
 801153e:	9300      	str	r3, [sp, #0]
 8011540:	460b      	mov	r3, r1
 8011542:	4601      	mov	r1, r0
 8011544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011546:	f7ff ff09 	bl	801135c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	f003 0303 	and.w	r3, r3, #3
 8011552:	2b00      	cmp	r3, #0
 8011554:	d010      	beq.n	8011578 <pbuf_alloc+0x1c8>
 8011556:	4b0b      	ldr	r3, [pc, #44]	; (8011584 <pbuf_alloc+0x1d4>)
 8011558:	f44f 7291 	mov.w	r2, #290	; 0x122
 801155c:	490d      	ldr	r1, [pc, #52]	; (8011594 <pbuf_alloc+0x1e4>)
 801155e:	480b      	ldr	r0, [pc, #44]	; (801158c <pbuf_alloc+0x1dc>)
 8011560:	f00d fae4 	bl	801eb2c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011564:	e008      	b.n	8011578 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011566:	4b07      	ldr	r3, [pc, #28]	; (8011584 <pbuf_alloc+0x1d4>)
 8011568:	f240 1227 	movw	r2, #295	; 0x127
 801156c:	490a      	ldr	r1, [pc, #40]	; (8011598 <pbuf_alloc+0x1e8>)
 801156e:	4807      	ldr	r0, [pc, #28]	; (801158c <pbuf_alloc+0x1dc>)
 8011570:	f00d fadc 	bl	801eb2c <iprintf>
      return NULL;
 8011574:	2300      	movs	r3, #0
 8011576:	e001      	b.n	801157c <pbuf_alloc+0x1cc>
      break;
 8011578:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801157c:	4618      	mov	r0, r3
 801157e:	3728      	adds	r7, #40	; 0x28
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	08023c9c 	.word	0x08023c9c
 8011588:	08023ccc 	.word	0x08023ccc
 801158c:	08023cfc 	.word	0x08023cfc
 8011590:	08023d24 	.word	0x08023d24
 8011594:	08023d58 	.word	0x08023d58
 8011598:	08023d84 	.word	0x08023d84

0801159c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b086      	sub	sp, #24
 80115a0:	af02      	add	r7, sp, #8
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	460b      	mov	r3, r1
 80115a6:	807b      	strh	r3, [r7, #2]
 80115a8:	4613      	mov	r3, r2
 80115aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80115ac:	883b      	ldrh	r3, [r7, #0]
 80115ae:	2b41      	cmp	r3, #65	; 0x41
 80115b0:	d009      	beq.n	80115c6 <pbuf_alloc_reference+0x2a>
 80115b2:	883b      	ldrh	r3, [r7, #0]
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d006      	beq.n	80115c6 <pbuf_alloc_reference+0x2a>
 80115b8:	4b0f      	ldr	r3, [pc, #60]	; (80115f8 <pbuf_alloc_reference+0x5c>)
 80115ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80115be:	490f      	ldr	r1, [pc, #60]	; (80115fc <pbuf_alloc_reference+0x60>)
 80115c0:	480f      	ldr	r0, [pc, #60]	; (8011600 <pbuf_alloc_reference+0x64>)
 80115c2:	f00d fab3 	bl	801eb2c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80115c6:	200c      	movs	r0, #12
 80115c8:	f7ff fad4 	bl	8010b74 <memp_malloc>
 80115cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d101      	bne.n	80115d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80115d4:	2300      	movs	r3, #0
 80115d6:	e00b      	b.n	80115f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80115d8:	8879      	ldrh	r1, [r7, #2]
 80115da:	887a      	ldrh	r2, [r7, #2]
 80115dc:	2300      	movs	r3, #0
 80115de:	9301      	str	r3, [sp, #4]
 80115e0:	883b      	ldrh	r3, [r7, #0]
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	460b      	mov	r3, r1
 80115e6:	6879      	ldr	r1, [r7, #4]
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	f7ff feb7 	bl	801135c <pbuf_init_alloced_pbuf>
  return p;
 80115ee:	68fb      	ldr	r3, [r7, #12]
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3710      	adds	r7, #16
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	08023c9c 	.word	0x08023c9c
 80115fc:	08023da0 	.word	0x08023da0
 8011600:	08023cfc 	.word	0x08023cfc

08011604 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b088      	sub	sp, #32
 8011608:	af02      	add	r7, sp, #8
 801160a:	607b      	str	r3, [r7, #4]
 801160c:	4603      	mov	r3, r0
 801160e:	73fb      	strb	r3, [r7, #15]
 8011610:	460b      	mov	r3, r1
 8011612:	81bb      	strh	r3, [r7, #12]
 8011614:	4613      	mov	r3, r2
 8011616:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011618:	7bfb      	ldrb	r3, [r7, #15]
 801161a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801161c:	8a7b      	ldrh	r3, [r7, #18]
 801161e:	3303      	adds	r3, #3
 8011620:	f023 0203 	bic.w	r2, r3, #3
 8011624:	89bb      	ldrh	r3, [r7, #12]
 8011626:	441a      	add	r2, r3
 8011628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801162a:	429a      	cmp	r2, r3
 801162c:	d901      	bls.n	8011632 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801162e:	2300      	movs	r3, #0
 8011630:	e018      	b.n	8011664 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011632:	6a3b      	ldr	r3, [r7, #32]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d007      	beq.n	8011648 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011638:	8a7b      	ldrh	r3, [r7, #18]
 801163a:	3303      	adds	r3, #3
 801163c:	f023 0303 	bic.w	r3, r3, #3
 8011640:	6a3a      	ldr	r2, [r7, #32]
 8011642:	4413      	add	r3, r2
 8011644:	617b      	str	r3, [r7, #20]
 8011646:	e001      	b.n	801164c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011648:	2300      	movs	r3, #0
 801164a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	89b9      	ldrh	r1, [r7, #12]
 8011650:	89ba      	ldrh	r2, [r7, #12]
 8011652:	2302      	movs	r3, #2
 8011654:	9301      	str	r3, [sp, #4]
 8011656:	897b      	ldrh	r3, [r7, #10]
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	460b      	mov	r3, r1
 801165c:	6979      	ldr	r1, [r7, #20]
 801165e:	f7ff fe7d 	bl	801135c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011662:	687b      	ldr	r3, [r7, #4]
}
 8011664:	4618      	mov	r0, r3
 8011666:	3718      	adds	r7, #24
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}

0801166c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	460b      	mov	r3, r1
 8011676:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d106      	bne.n	801168c <pbuf_realloc+0x20>
 801167e:	4b3a      	ldr	r3, [pc, #232]	; (8011768 <pbuf_realloc+0xfc>)
 8011680:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011684:	4939      	ldr	r1, [pc, #228]	; (801176c <pbuf_realloc+0x100>)
 8011686:	483a      	ldr	r0, [pc, #232]	; (8011770 <pbuf_realloc+0x104>)
 8011688:	f00d fa50 	bl	801eb2c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	891b      	ldrh	r3, [r3, #8]
 8011690:	887a      	ldrh	r2, [r7, #2]
 8011692:	429a      	cmp	r2, r3
 8011694:	d263      	bcs.n	801175e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	891a      	ldrh	r2, [r3, #8]
 801169a:	887b      	ldrh	r3, [r7, #2]
 801169c:	1ad3      	subs	r3, r2, r3
 801169e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80116a0:	887b      	ldrh	r3, [r7, #2]
 80116a2:	817b      	strh	r3, [r7, #10]
  q = p;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80116a8:	e018      	b.n	80116dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	895b      	ldrh	r3, [r3, #10]
 80116ae:	897a      	ldrh	r2, [r7, #10]
 80116b0:	1ad3      	subs	r3, r2, r3
 80116b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	891a      	ldrh	r2, [r3, #8]
 80116b8:	893b      	ldrh	r3, [r7, #8]
 80116ba:	1ad3      	subs	r3, r2, r3
 80116bc:	b29a      	uxth	r2, r3
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d106      	bne.n	80116dc <pbuf_realloc+0x70>
 80116ce:	4b26      	ldr	r3, [pc, #152]	; (8011768 <pbuf_realloc+0xfc>)
 80116d0:	f240 12af 	movw	r2, #431	; 0x1af
 80116d4:	4927      	ldr	r1, [pc, #156]	; (8011774 <pbuf_realloc+0x108>)
 80116d6:	4826      	ldr	r0, [pc, #152]	; (8011770 <pbuf_realloc+0x104>)
 80116d8:	f00d fa28 	bl	801eb2c <iprintf>
  while (rem_len > q->len) {
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	895b      	ldrh	r3, [r3, #10]
 80116e0:	897a      	ldrh	r2, [r7, #10]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d8e1      	bhi.n	80116aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	7b1b      	ldrb	r3, [r3, #12]
 80116ea:	f003 030f 	and.w	r3, r3, #15
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d121      	bne.n	8011736 <pbuf_realloc+0xca>
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	895b      	ldrh	r3, [r3, #10]
 80116f6:	897a      	ldrh	r2, [r7, #10]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d01c      	beq.n	8011736 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	7b5b      	ldrb	r3, [r3, #13]
 8011700:	f003 0302 	and.w	r3, r3, #2
 8011704:	2b00      	cmp	r3, #0
 8011706:	d116      	bne.n	8011736 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	685a      	ldr	r2, [r3, #4]
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	b29a      	uxth	r2, r3
 8011712:	897b      	ldrh	r3, [r7, #10]
 8011714:	4413      	add	r3, r2
 8011716:	b29b      	uxth	r3, r3
 8011718:	4619      	mov	r1, r3
 801171a:	68f8      	ldr	r0, [r7, #12]
 801171c:	f7fe ff9e 	bl	801065c <mem_trim>
 8011720:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d106      	bne.n	8011736 <pbuf_realloc+0xca>
 8011728:	4b0f      	ldr	r3, [pc, #60]	; (8011768 <pbuf_realloc+0xfc>)
 801172a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801172e:	4912      	ldr	r1, [pc, #72]	; (8011778 <pbuf_realloc+0x10c>)
 8011730:	480f      	ldr	r0, [pc, #60]	; (8011770 <pbuf_realloc+0x104>)
 8011732:	f00d f9fb 	bl	801eb2c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	897a      	ldrh	r2, [r7, #10]
 801173a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	895a      	ldrh	r2, [r3, #10]
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d004      	beq.n	8011756 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4618      	mov	r0, r3
 8011752:	f000 f943 	bl	80119dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2200      	movs	r2, #0
 801175a:	601a      	str	r2, [r3, #0]
 801175c:	e000      	b.n	8011760 <pbuf_realloc+0xf4>
    return;
 801175e:	bf00      	nop

}
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	08023c9c 	.word	0x08023c9c
 801176c:	08023db4 	.word	0x08023db4
 8011770:	08023cfc 	.word	0x08023cfc
 8011774:	08023dcc 	.word	0x08023dcc
 8011778:	08023de4 	.word	0x08023de4

0801177c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b086      	sub	sp, #24
 8011780:	af00      	add	r7, sp, #0
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	4613      	mov	r3, r2
 8011788:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d106      	bne.n	801179e <pbuf_add_header_impl+0x22>
 8011790:	4b2b      	ldr	r3, [pc, #172]	; (8011840 <pbuf_add_header_impl+0xc4>)
 8011792:	f240 12df 	movw	r2, #479	; 0x1df
 8011796:	492b      	ldr	r1, [pc, #172]	; (8011844 <pbuf_add_header_impl+0xc8>)
 8011798:	482b      	ldr	r0, [pc, #172]	; (8011848 <pbuf_add_header_impl+0xcc>)
 801179a:	f00d f9c7 	bl	801eb2c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d003      	beq.n	80117ac <pbuf_add_header_impl+0x30>
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117aa:	d301      	bcc.n	80117b0 <pbuf_add_header_impl+0x34>
    return 1;
 80117ac:	2301      	movs	r3, #1
 80117ae:	e043      	b.n	8011838 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d101      	bne.n	80117ba <pbuf_add_header_impl+0x3e>
    return 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	e03e      	b.n	8011838 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	891a      	ldrh	r2, [r3, #8]
 80117c2:	8a7b      	ldrh	r3, [r7, #18]
 80117c4:	4413      	add	r3, r2
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	8a7a      	ldrh	r2, [r7, #18]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d901      	bls.n	80117d2 <pbuf_add_header_impl+0x56>
    return 1;
 80117ce:	2301      	movs	r3, #1
 80117d0:	e032      	b.n	8011838 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	7b1b      	ldrb	r3, [r3, #12]
 80117d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80117d8:	8a3b      	ldrh	r3, [r7, #16]
 80117da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d00c      	beq.n	80117fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	685a      	ldr	r2, [r3, #4]
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	425b      	negs	r3, r3
 80117ea:	4413      	add	r3, r2
 80117ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	3310      	adds	r3, #16
 80117f2:	697a      	ldr	r2, [r7, #20]
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d20d      	bcs.n	8011814 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80117f8:	2301      	movs	r3, #1
 80117fa:	e01d      	b.n	8011838 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80117fc:	79fb      	ldrb	r3, [r7, #7]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d006      	beq.n	8011810 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	685a      	ldr	r2, [r3, #4]
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	425b      	negs	r3, r3
 801180a:	4413      	add	r3, r2
 801180c:	617b      	str	r3, [r7, #20]
 801180e:	e001      	b.n	8011814 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011810:	2301      	movs	r3, #1
 8011812:	e011      	b.n	8011838 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	895a      	ldrh	r2, [r3, #10]
 801181e:	8a7b      	ldrh	r3, [r7, #18]
 8011820:	4413      	add	r3, r2
 8011822:	b29a      	uxth	r2, r3
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	891a      	ldrh	r2, [r3, #8]
 801182c:	8a7b      	ldrh	r3, [r7, #18]
 801182e:	4413      	add	r3, r2
 8011830:	b29a      	uxth	r2, r3
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	811a      	strh	r2, [r3, #8]


  return 0;
 8011836:	2300      	movs	r3, #0
}
 8011838:	4618      	mov	r0, r3
 801183a:	3718      	adds	r7, #24
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	08023c9c 	.word	0x08023c9c
 8011844:	08023e00 	.word	0x08023e00
 8011848:	08023cfc 	.word	0x08023cfc

0801184c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011856:	2200      	movs	r2, #0
 8011858:	6839      	ldr	r1, [r7, #0]
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f7ff ff8e 	bl	801177c <pbuf_add_header_impl>
 8011860:	4603      	mov	r3, r0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3708      	adds	r7, #8
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
	...

0801186c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d106      	bne.n	801188a <pbuf_remove_header+0x1e>
 801187c:	4b20      	ldr	r3, [pc, #128]	; (8011900 <pbuf_remove_header+0x94>)
 801187e:	f240 224b 	movw	r2, #587	; 0x24b
 8011882:	4920      	ldr	r1, [pc, #128]	; (8011904 <pbuf_remove_header+0x98>)
 8011884:	4820      	ldr	r0, [pc, #128]	; (8011908 <pbuf_remove_header+0x9c>)
 8011886:	f00d f951 	bl	801eb2c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d003      	beq.n	8011898 <pbuf_remove_header+0x2c>
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011896:	d301      	bcc.n	801189c <pbuf_remove_header+0x30>
    return 1;
 8011898:	2301      	movs	r3, #1
 801189a:	e02c      	b.n	80118f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d101      	bne.n	80118a6 <pbuf_remove_header+0x3a>
    return 0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	e027      	b.n	80118f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	895b      	ldrh	r3, [r3, #10]
 80118ae:	89fa      	ldrh	r2, [r7, #14]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d908      	bls.n	80118c6 <pbuf_remove_header+0x5a>
 80118b4:	4b12      	ldr	r3, [pc, #72]	; (8011900 <pbuf_remove_header+0x94>)
 80118b6:	f240 2255 	movw	r2, #597	; 0x255
 80118ba:	4914      	ldr	r1, [pc, #80]	; (801190c <pbuf_remove_header+0xa0>)
 80118bc:	4812      	ldr	r0, [pc, #72]	; (8011908 <pbuf_remove_header+0x9c>)
 80118be:	f00d f935 	bl	801eb2c <iprintf>
 80118c2:	2301      	movs	r3, #1
 80118c4:	e017      	b.n	80118f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	685a      	ldr	r2, [r3, #4]
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	441a      	add	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	895a      	ldrh	r2, [r3, #10]
 80118dc:	89fb      	ldrh	r3, [r7, #14]
 80118de:	1ad3      	subs	r3, r2, r3
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	891a      	ldrh	r2, [r3, #8]
 80118ea:	89fb      	ldrh	r3, [r7, #14]
 80118ec:	1ad3      	subs	r3, r2, r3
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80118f4:	2300      	movs	r3, #0
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	08023c9c 	.word	0x08023c9c
 8011904:	08023e00 	.word	0x08023e00
 8011908:	08023cfc 	.word	0x08023cfc
 801190c:	08023e0c 	.word	0x08023e0c

08011910 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	460b      	mov	r3, r1
 801191a:	807b      	strh	r3, [r7, #2]
 801191c:	4613      	mov	r3, r2
 801191e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011920:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011924:	2b00      	cmp	r3, #0
 8011926:	da08      	bge.n	801193a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011928:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801192c:	425b      	negs	r3, r3
 801192e:	4619      	mov	r1, r3
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7ff ff9b 	bl	801186c <pbuf_remove_header>
 8011936:	4603      	mov	r3, r0
 8011938:	e007      	b.n	801194a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801193a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801193e:	787a      	ldrb	r2, [r7, #1]
 8011940:	4619      	mov	r1, r3
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7ff ff1a 	bl	801177c <pbuf_add_header_impl>
 8011948:	4603      	mov	r3, r0
  }
}
 801194a:	4618      	mov	r0, r3
 801194c:	3708      	adds	r7, #8
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b082      	sub	sp, #8
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	460b      	mov	r3, r1
 801195c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801195e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011962:	2201      	movs	r2, #1
 8011964:	4619      	mov	r1, r3
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f7ff ffd2 	bl	8011910 <pbuf_header_impl>
 801196c:	4603      	mov	r3, r0
}
 801196e:	4618      	mov	r0, r3
 8011970:	3708      	adds	r7, #8
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}

08011976 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8011976:	b580      	push	{r7, lr}
 8011978:	b086      	sub	sp, #24
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
 801197e:	460b      	mov	r3, r1
 8011980:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8011986:	887b      	ldrh	r3, [r7, #2]
 8011988:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801198a:	e01c      	b.n	80119c6 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	895b      	ldrh	r3, [r3, #10]
 8011990:	8a7a      	ldrh	r2, [r7, #18]
 8011992:	429a      	cmp	r2, r3
 8011994:	d310      	bcc.n	80119b8 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	895b      	ldrh	r3, [r3, #10]
 801199e:	8a7a      	ldrh	r2, [r7, #18]
 80119a0:	1ad3      	subs	r3, r2, r3
 80119a2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2200      	movs	r2, #0
 80119ae:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 80119b0:	68f8      	ldr	r0, [r7, #12]
 80119b2:	f000 f813 	bl	80119dc <pbuf_free>
 80119b6:	e006      	b.n	80119c6 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 80119b8:	8a7b      	ldrh	r3, [r7, #18]
 80119ba:	4619      	mov	r1, r3
 80119bc:	6978      	ldr	r0, [r7, #20]
 80119be:	f7ff ff55 	bl	801186c <pbuf_remove_header>
      free_left = 0;
 80119c2:	2300      	movs	r3, #0
 80119c4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80119c6:	8a7b      	ldrh	r3, [r7, #18]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d002      	beq.n	80119d2 <pbuf_free_header+0x5c>
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d1dc      	bne.n	801198c <pbuf_free_header+0x16>
    }
  }
  return p;
 80119d2:	697b      	ldr	r3, [r7, #20]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3718      	adds	r7, #24
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b088      	sub	sp, #32
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d10b      	bne.n	8011a02 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d106      	bne.n	80119fe <pbuf_free+0x22>
 80119f0:	4b3b      	ldr	r3, [pc, #236]	; (8011ae0 <pbuf_free+0x104>)
 80119f2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80119f6:	493b      	ldr	r1, [pc, #236]	; (8011ae4 <pbuf_free+0x108>)
 80119f8:	483b      	ldr	r0, [pc, #236]	; (8011ae8 <pbuf_free+0x10c>)
 80119fa:	f00d f897 	bl	801eb2c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80119fe:	2300      	movs	r3, #0
 8011a00:	e069      	b.n	8011ad6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011a02:	2300      	movs	r3, #0
 8011a04:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011a06:	e062      	b.n	8011ace <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011a08:	f00c f9f2 	bl	801ddf0 <sys_arch_protect>
 8011a0c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	7b9b      	ldrb	r3, [r3, #14]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d106      	bne.n	8011a24 <pbuf_free+0x48>
 8011a16:	4b32      	ldr	r3, [pc, #200]	; (8011ae0 <pbuf_free+0x104>)
 8011a18:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011a1c:	4933      	ldr	r1, [pc, #204]	; (8011aec <pbuf_free+0x110>)
 8011a1e:	4832      	ldr	r0, [pc, #200]	; (8011ae8 <pbuf_free+0x10c>)
 8011a20:	f00d f884 	bl	801eb2c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	7b9b      	ldrb	r3, [r3, #14]
 8011a28:	3b01      	subs	r3, #1
 8011a2a:	b2da      	uxtb	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	739a      	strb	r2, [r3, #14]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	7b9b      	ldrb	r3, [r3, #14]
 8011a34:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011a36:	69b8      	ldr	r0, [r7, #24]
 8011a38:	f00c f9e8 	bl	801de0c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011a3c:	7dfb      	ldrb	r3, [r7, #23]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d143      	bne.n	8011aca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	7b1b      	ldrb	r3, [r3, #12]
 8011a4c:	f003 030f 	and.w	r3, r3, #15
 8011a50:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	7b5b      	ldrb	r3, [r3, #13]
 8011a56:	f003 0302 	and.w	r3, r3, #2
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d011      	beq.n	8011a82 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	691b      	ldr	r3, [r3, #16]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d106      	bne.n	8011a78 <pbuf_free+0x9c>
 8011a6a:	4b1d      	ldr	r3, [pc, #116]	; (8011ae0 <pbuf_free+0x104>)
 8011a6c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011a70:	491f      	ldr	r1, [pc, #124]	; (8011af0 <pbuf_free+0x114>)
 8011a72:	481d      	ldr	r0, [pc, #116]	; (8011ae8 <pbuf_free+0x10c>)
 8011a74:	f00d f85a 	bl	801eb2c <iprintf>
        pc->custom_free_function(p);
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	691b      	ldr	r3, [r3, #16]
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	4798      	blx	r3
 8011a80:	e01d      	b.n	8011abe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011a82:	7bfb      	ldrb	r3, [r7, #15]
 8011a84:	2b02      	cmp	r3, #2
 8011a86:	d104      	bne.n	8011a92 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011a88:	6879      	ldr	r1, [r7, #4]
 8011a8a:	200d      	movs	r0, #13
 8011a8c:	f7ff f8c4 	bl	8010c18 <memp_free>
 8011a90:	e015      	b.n	8011abe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011a92:	7bfb      	ldrb	r3, [r7, #15]
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d104      	bne.n	8011aa2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011a98:	6879      	ldr	r1, [r7, #4]
 8011a9a:	200c      	movs	r0, #12
 8011a9c:	f7ff f8bc 	bl	8010c18 <memp_free>
 8011aa0:	e00d      	b.n	8011abe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011aa2:	7bfb      	ldrb	r3, [r7, #15]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d103      	bne.n	8011ab0 <pbuf_free+0xd4>
          mem_free(p);
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f7fe fd47 	bl	801053c <mem_free>
 8011aae:	e006      	b.n	8011abe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011ab0:	4b0b      	ldr	r3, [pc, #44]	; (8011ae0 <pbuf_free+0x104>)
 8011ab2:	f240 320f 	movw	r2, #783	; 0x30f
 8011ab6:	490f      	ldr	r1, [pc, #60]	; (8011af4 <pbuf_free+0x118>)
 8011ab8:	480b      	ldr	r0, [pc, #44]	; (8011ae8 <pbuf_free+0x10c>)
 8011aba:	f00d f837 	bl	801eb2c <iprintf>
        }
      }
      count++;
 8011abe:	7ffb      	ldrb	r3, [r7, #31]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	607b      	str	r3, [r7, #4]
 8011ac8:	e001      	b.n	8011ace <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011aca:	2300      	movs	r3, #0
 8011acc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d199      	bne.n	8011a08 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011ad4:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3720      	adds	r7, #32
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	08023c9c 	.word	0x08023c9c
 8011ae4:	08023e00 	.word	0x08023e00
 8011ae8:	08023cfc 	.word	0x08023cfc
 8011aec:	08023e2c 	.word	0x08023e2c
 8011af0:	08023e44 	.word	0x08023e44
 8011af4:	08023e68 	.word	0x08023e68

08011af8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011b00:	2300      	movs	r3, #0
 8011b02:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011b04:	e005      	b.n	8011b12 <pbuf_clen+0x1a>
    ++len;
 8011b06:	89fb      	ldrh	r3, [r7, #14]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d1f6      	bne.n	8011b06 <pbuf_clen+0xe>
  }
  return len;
 8011b18:	89fb      	ldrh	r3, [r7, #14]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3714      	adds	r7, #20
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
	...

08011b28 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d016      	beq.n	8011b64 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011b36:	f00c f95b 	bl	801ddf0 <sys_arch_protect>
 8011b3a:	60f8      	str	r0, [r7, #12]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	7b9b      	ldrb	r3, [r3, #14]
 8011b40:	3301      	adds	r3, #1
 8011b42:	b2da      	uxtb	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	739a      	strb	r2, [r3, #14]
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f00c f95f 	bl	801de0c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	7b9b      	ldrb	r3, [r3, #14]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d106      	bne.n	8011b64 <pbuf_ref+0x3c>
 8011b56:	4b05      	ldr	r3, [pc, #20]	; (8011b6c <pbuf_ref+0x44>)
 8011b58:	f240 3242 	movw	r2, #834	; 0x342
 8011b5c:	4904      	ldr	r1, [pc, #16]	; (8011b70 <pbuf_ref+0x48>)
 8011b5e:	4805      	ldr	r0, [pc, #20]	; (8011b74 <pbuf_ref+0x4c>)
 8011b60:	f00c ffe4 	bl	801eb2c <iprintf>
  }
}
 8011b64:	bf00      	nop
 8011b66:	3710      	adds	r7, #16
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	08023c9c 	.word	0x08023c9c
 8011b70:	08023e7c 	.word	0x08023e7c
 8011b74:	08023cfc 	.word	0x08023cfc

08011b78 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b084      	sub	sp, #16
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d002      	beq.n	8011b8e <pbuf_cat+0x16>
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d107      	bne.n	8011b9e <pbuf_cat+0x26>
 8011b8e:	4b20      	ldr	r3, [pc, #128]	; (8011c10 <pbuf_cat+0x98>)
 8011b90:	f240 3259 	movw	r2, #857	; 0x359
 8011b94:	491f      	ldr	r1, [pc, #124]	; (8011c14 <pbuf_cat+0x9c>)
 8011b96:	4820      	ldr	r0, [pc, #128]	; (8011c18 <pbuf_cat+0xa0>)
 8011b98:	f00c ffc8 	bl	801eb2c <iprintf>
 8011b9c:	e034      	b.n	8011c08 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	60fb      	str	r3, [r7, #12]
 8011ba2:	e00a      	b.n	8011bba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	891a      	ldrh	r2, [r3, #8]
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	891b      	ldrh	r3, [r3, #8]
 8011bac:	4413      	add	r3, r2
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	60fb      	str	r3, [r7, #12]
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d1f0      	bne.n	8011ba4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	891a      	ldrh	r2, [r3, #8]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	895b      	ldrh	r3, [r3, #10]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d006      	beq.n	8011bdc <pbuf_cat+0x64>
 8011bce:	4b10      	ldr	r3, [pc, #64]	; (8011c10 <pbuf_cat+0x98>)
 8011bd0:	f240 3262 	movw	r2, #866	; 0x362
 8011bd4:	4911      	ldr	r1, [pc, #68]	; (8011c1c <pbuf_cat+0xa4>)
 8011bd6:	4810      	ldr	r0, [pc, #64]	; (8011c18 <pbuf_cat+0xa0>)
 8011bd8:	f00c ffa8 	bl	801eb2c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d006      	beq.n	8011bf2 <pbuf_cat+0x7a>
 8011be4:	4b0a      	ldr	r3, [pc, #40]	; (8011c10 <pbuf_cat+0x98>)
 8011be6:	f240 3263 	movw	r2, #867	; 0x363
 8011bea:	490d      	ldr	r1, [pc, #52]	; (8011c20 <pbuf_cat+0xa8>)
 8011bec:	480a      	ldr	r0, [pc, #40]	; (8011c18 <pbuf_cat+0xa0>)
 8011bee:	f00c ff9d 	bl	801eb2c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	891a      	ldrh	r2, [r3, #8]
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	891b      	ldrh	r3, [r3, #8]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	b29a      	uxth	r2, r3
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	683a      	ldr	r2, [r7, #0]
 8011c06:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011c08:	3710      	adds	r7, #16
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	08023c9c 	.word	0x08023c9c
 8011c14:	08023e90 	.word	0x08023e90
 8011c18:	08023cfc 	.word	0x08023cfc
 8011c1c:	08023ec8 	.word	0x08023ec8
 8011c20:	08023ef8 	.word	0x08023ef8

08011c24 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7ff ffa1 	bl	8011b78 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011c36:	6838      	ldr	r0, [r7, #0]
 8011c38:	f7ff ff76 	bl	8011b28 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011c3c:	bf00      	nop
 8011c3e:	3708      	adds	r7, #8
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b086      	sub	sp, #24
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	617b      	str	r3, [r7, #20]
 8011c52:	2300      	movs	r3, #0
 8011c54:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d008      	beq.n	8011c6e <pbuf_copy+0x2a>
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d005      	beq.n	8011c6e <pbuf_copy+0x2a>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	891a      	ldrh	r2, [r3, #8]
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	891b      	ldrh	r3, [r3, #8]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d209      	bcs.n	8011c82 <pbuf_copy+0x3e>
 8011c6e:	4b57      	ldr	r3, [pc, #348]	; (8011dcc <pbuf_copy+0x188>)
 8011c70:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011c74:	4956      	ldr	r1, [pc, #344]	; (8011dd0 <pbuf_copy+0x18c>)
 8011c76:	4857      	ldr	r0, [pc, #348]	; (8011dd4 <pbuf_copy+0x190>)
 8011c78:	f00c ff58 	bl	801eb2c <iprintf>
 8011c7c:	f06f 030f 	mvn.w	r3, #15
 8011c80:	e09f      	b.n	8011dc2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	895b      	ldrh	r3, [r3, #10]
 8011c86:	461a      	mov	r2, r3
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	1ad2      	subs	r2, r2, r3
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	895b      	ldrh	r3, [r3, #10]
 8011c90:	4619      	mov	r1, r3
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	1acb      	subs	r3, r1, r3
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d306      	bcc.n	8011ca8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	895b      	ldrh	r3, [r3, #10]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	1ad3      	subs	r3, r2, r3
 8011ca4:	60fb      	str	r3, [r7, #12]
 8011ca6:	e005      	b.n	8011cb4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	895b      	ldrh	r3, [r3, #10]
 8011cac:	461a      	mov	r2, r3
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	1ad3      	subs	r3, r2, r3
 8011cb2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	685a      	ldr	r2, [r3, #4]
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	18d0      	adds	r0, r2, r3
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	685a      	ldr	r2, [r3, #4]
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	4413      	add	r3, r2
 8011cc4:	68fa      	ldr	r2, [r7, #12]
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	f00c f9ec 	bl	801e0a4 <memcpy>
    offset_to += len;
 8011ccc:	697a      	ldr	r2, [r7, #20]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	4413      	add	r3, r2
 8011cd2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011cd4:	693a      	ldr	r2, [r7, #16]
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	4413      	add	r3, r2
 8011cda:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	895b      	ldrh	r3, [r3, #10]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d906      	bls.n	8011cf6 <pbuf_copy+0xb2>
 8011ce8:	4b38      	ldr	r3, [pc, #224]	; (8011dcc <pbuf_copy+0x188>)
 8011cea:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011cee:	493a      	ldr	r1, [pc, #232]	; (8011dd8 <pbuf_copy+0x194>)
 8011cf0:	4838      	ldr	r0, [pc, #224]	; (8011dd4 <pbuf_copy+0x190>)
 8011cf2:	f00c ff1b 	bl	801eb2c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	895b      	ldrh	r3, [r3, #10]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d906      	bls.n	8011d10 <pbuf_copy+0xcc>
 8011d02:	4b32      	ldr	r3, [pc, #200]	; (8011dcc <pbuf_copy+0x188>)
 8011d04:	f240 32da 	movw	r2, #986	; 0x3da
 8011d08:	4934      	ldr	r1, [pc, #208]	; (8011ddc <pbuf_copy+0x198>)
 8011d0a:	4832      	ldr	r0, [pc, #200]	; (8011dd4 <pbuf_copy+0x190>)
 8011d0c:	f00c ff0e 	bl	801eb2c <iprintf>
    if (offset_from >= p_from->len) {
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	895b      	ldrh	r3, [r3, #10]
 8011d14:	461a      	mov	r2, r3
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d304      	bcc.n	8011d26 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	895b      	ldrh	r3, [r3, #10]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d114      	bne.n	8011d5c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011d32:	2300      	movs	r3, #0
 8011d34:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d10c      	bne.n	8011d5c <pbuf_copy+0x118>
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d009      	beq.n	8011d5c <pbuf_copy+0x118>
 8011d48:	4b20      	ldr	r3, [pc, #128]	; (8011dcc <pbuf_copy+0x188>)
 8011d4a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011d4e:	4924      	ldr	r1, [pc, #144]	; (8011de0 <pbuf_copy+0x19c>)
 8011d50:	4820      	ldr	r0, [pc, #128]	; (8011dd4 <pbuf_copy+0x190>)
 8011d52:	f00c feeb 	bl	801eb2c <iprintf>
 8011d56:	f06f 030f 	mvn.w	r3, #15
 8011d5a:	e032      	b.n	8011dc2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d013      	beq.n	8011d8a <pbuf_copy+0x146>
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	895a      	ldrh	r2, [r3, #10]
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	891b      	ldrh	r3, [r3, #8]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d10d      	bne.n	8011d8a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d009      	beq.n	8011d8a <pbuf_copy+0x146>
 8011d76:	4b15      	ldr	r3, [pc, #84]	; (8011dcc <pbuf_copy+0x188>)
 8011d78:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011d7c:	4919      	ldr	r1, [pc, #100]	; (8011de4 <pbuf_copy+0x1a0>)
 8011d7e:	4815      	ldr	r0, [pc, #84]	; (8011dd4 <pbuf_copy+0x190>)
 8011d80:	f00c fed4 	bl	801eb2c <iprintf>
 8011d84:	f06f 0305 	mvn.w	r3, #5
 8011d88:	e01b      	b.n	8011dc2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d013      	beq.n	8011db8 <pbuf_copy+0x174>
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	895a      	ldrh	r2, [r3, #10]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	891b      	ldrh	r3, [r3, #8]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d10d      	bne.n	8011db8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d009      	beq.n	8011db8 <pbuf_copy+0x174>
 8011da4:	4b09      	ldr	r3, [pc, #36]	; (8011dcc <pbuf_copy+0x188>)
 8011da6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011daa:	490e      	ldr	r1, [pc, #56]	; (8011de4 <pbuf_copy+0x1a0>)
 8011dac:	4809      	ldr	r0, [pc, #36]	; (8011dd4 <pbuf_copy+0x190>)
 8011dae:	f00c febd 	bl	801eb2c <iprintf>
 8011db2:	f06f 0305 	mvn.w	r3, #5
 8011db6:	e004      	b.n	8011dc2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	f47f af61 	bne.w	8011c82 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011dc0:	2300      	movs	r3, #0
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3718      	adds	r7, #24
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	08023c9c 	.word	0x08023c9c
 8011dd0:	08023f44 	.word	0x08023f44
 8011dd4:	08023cfc 	.word	0x08023cfc
 8011dd8:	08023f74 	.word	0x08023f74
 8011ddc:	08023f8c 	.word	0x08023f8c
 8011de0:	08023fa8 	.word	0x08023fa8
 8011de4:	08023fb8 	.word	0x08023fb8

08011de8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b088      	sub	sp, #32
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	4611      	mov	r1, r2
 8011df4:	461a      	mov	r2, r3
 8011df6:	460b      	mov	r3, r1
 8011df8:	80fb      	strh	r3, [r7, #6]
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011e02:	2300      	movs	r3, #0
 8011e04:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d108      	bne.n	8011e1e <pbuf_copy_partial+0x36>
 8011e0c:	4b2b      	ldr	r3, [pc, #172]	; (8011ebc <pbuf_copy_partial+0xd4>)
 8011e0e:	f240 420a 	movw	r2, #1034	; 0x40a
 8011e12:	492b      	ldr	r1, [pc, #172]	; (8011ec0 <pbuf_copy_partial+0xd8>)
 8011e14:	482b      	ldr	r0, [pc, #172]	; (8011ec4 <pbuf_copy_partial+0xdc>)
 8011e16:	f00c fe89 	bl	801eb2c <iprintf>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	e04a      	b.n	8011eb4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d108      	bne.n	8011e36 <pbuf_copy_partial+0x4e>
 8011e24:	4b25      	ldr	r3, [pc, #148]	; (8011ebc <pbuf_copy_partial+0xd4>)
 8011e26:	f240 420b 	movw	r2, #1035	; 0x40b
 8011e2a:	4927      	ldr	r1, [pc, #156]	; (8011ec8 <pbuf_copy_partial+0xe0>)
 8011e2c:	4825      	ldr	r0, [pc, #148]	; (8011ec4 <pbuf_copy_partial+0xdc>)
 8011e2e:	f00c fe7d 	bl	801eb2c <iprintf>
 8011e32:	2300      	movs	r3, #0
 8011e34:	e03e      	b.n	8011eb4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	61fb      	str	r3, [r7, #28]
 8011e3a:	e034      	b.n	8011ea6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011e3c:	88bb      	ldrh	r3, [r7, #4]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d00a      	beq.n	8011e58 <pbuf_copy_partial+0x70>
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	895b      	ldrh	r3, [r3, #10]
 8011e46:	88ba      	ldrh	r2, [r7, #4]
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d305      	bcc.n	8011e58 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	895b      	ldrh	r3, [r3, #10]
 8011e50:	88ba      	ldrh	r2, [r7, #4]
 8011e52:	1ad3      	subs	r3, r2, r3
 8011e54:	80bb      	strh	r3, [r7, #4]
 8011e56:	e023      	b.n	8011ea0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011e58:	69fb      	ldr	r3, [r7, #28]
 8011e5a:	895a      	ldrh	r2, [r3, #10]
 8011e5c:	88bb      	ldrh	r3, [r7, #4]
 8011e5e:	1ad3      	subs	r3, r2, r3
 8011e60:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011e62:	8b3a      	ldrh	r2, [r7, #24]
 8011e64:	88fb      	ldrh	r3, [r7, #6]
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d901      	bls.n	8011e6e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011e6a:	88fb      	ldrh	r3, [r7, #6]
 8011e6c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011e6e:	8b7b      	ldrh	r3, [r7, #26]
 8011e70:	68ba      	ldr	r2, [r7, #8]
 8011e72:	18d0      	adds	r0, r2, r3
 8011e74:	69fb      	ldr	r3, [r7, #28]
 8011e76:	685a      	ldr	r2, [r3, #4]
 8011e78:	88bb      	ldrh	r3, [r7, #4]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	8b3a      	ldrh	r2, [r7, #24]
 8011e7e:	4619      	mov	r1, r3
 8011e80:	f00c f910 	bl	801e0a4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011e84:	8afa      	ldrh	r2, [r7, #22]
 8011e86:	8b3b      	ldrh	r3, [r7, #24]
 8011e88:	4413      	add	r3, r2
 8011e8a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011e8c:	8b7a      	ldrh	r2, [r7, #26]
 8011e8e:	8b3b      	ldrh	r3, [r7, #24]
 8011e90:	4413      	add	r3, r2
 8011e92:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011e94:	88fa      	ldrh	r2, [r7, #6]
 8011e96:	8b3b      	ldrh	r3, [r7, #24]
 8011e98:	1ad3      	subs	r3, r2, r3
 8011e9a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	61fb      	str	r3, [r7, #28]
 8011ea6:	88fb      	ldrh	r3, [r7, #6]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d002      	beq.n	8011eb2 <pbuf_copy_partial+0xca>
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d1c4      	bne.n	8011e3c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011eb2:	8afb      	ldrh	r3, [r7, #22]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3720      	adds	r7, #32
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}
 8011ebc:	08023c9c 	.word	0x08023c9c
 8011ec0:	08023fe4 	.word	0x08023fe4
 8011ec4:	08023cfc 	.word	0x08023cfc
 8011ec8:	08024004 	.word	0x08024004

08011ecc <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b087      	sub	sp, #28
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60f8      	str	r0, [r7, #12]
 8011ed4:	460b      	mov	r3, r1
 8011ed6:	607a      	str	r2, [r7, #4]
 8011ed8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8011eda:	897b      	ldrh	r3, [r7, #10]
 8011edc:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8011ee2:	e007      	b.n	8011ef4 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	895b      	ldrh	r3, [r3, #10]
 8011ee8:	8afa      	ldrh	r2, [r7, #22]
 8011eea:	1ad3      	subs	r3, r2, r3
 8011eec:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d004      	beq.n	8011f04 <pbuf_skip_const+0x38>
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	895b      	ldrh	r3, [r3, #10]
 8011efe:	8afa      	ldrh	r2, [r7, #22]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d2ef      	bcs.n	8011ee4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d002      	beq.n	8011f10 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	8afa      	ldrh	r2, [r7, #22]
 8011f0e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8011f10:	693b      	ldr	r3, [r7, #16]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	371c      	adds	r7, #28
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr

08011f1e <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b086      	sub	sp, #24
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	60f8      	str	r0, [r7, #12]
 8011f26:	460b      	mov	r3, r1
 8011f28:	607a      	str	r2, [r7, #4]
 8011f2a:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8011f2c:	897b      	ldrh	r3, [r7, #10]
 8011f2e:	687a      	ldr	r2, [r7, #4]
 8011f30:	4619      	mov	r1, r3
 8011f32:	68f8      	ldr	r0, [r7, #12]
 8011f34:	f7ff ffca 	bl	8011ecc <pbuf_skip_const>
 8011f38:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8011f3a:	697b      	ldr	r3, [r7, #20]
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3718      	adds	r7, #24
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b088      	sub	sp, #32
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	4613      	mov	r3, r2
 8011f50:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8011f52:	88fb      	ldrh	r3, [r7, #6]
 8011f54:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8011f56:	2300      	movs	r3, #0
 8011f58:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d109      	bne.n	8011f74 <pbuf_take+0x30>
 8011f60:	4b3a      	ldr	r3, [pc, #232]	; (801204c <pbuf_take+0x108>)
 8011f62:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8011f66:	493a      	ldr	r1, [pc, #232]	; (8012050 <pbuf_take+0x10c>)
 8011f68:	483a      	ldr	r0, [pc, #232]	; (8012054 <pbuf_take+0x110>)
 8011f6a:	f00c fddf 	bl	801eb2c <iprintf>
 8011f6e:	f06f 030f 	mvn.w	r3, #15
 8011f72:	e067      	b.n	8012044 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d109      	bne.n	8011f8e <pbuf_take+0x4a>
 8011f7a:	4b34      	ldr	r3, [pc, #208]	; (801204c <pbuf_take+0x108>)
 8011f7c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8011f80:	4935      	ldr	r1, [pc, #212]	; (8012058 <pbuf_take+0x114>)
 8011f82:	4834      	ldr	r0, [pc, #208]	; (8012054 <pbuf_take+0x110>)
 8011f84:	f00c fdd2 	bl	801eb2c <iprintf>
 8011f88:	f06f 030f 	mvn.w	r3, #15
 8011f8c:	e05a      	b.n	8012044 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	891b      	ldrh	r3, [r3, #8]
 8011f92:	88fa      	ldrh	r2, [r7, #6]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d909      	bls.n	8011fac <pbuf_take+0x68>
 8011f98:	4b2c      	ldr	r3, [pc, #176]	; (801204c <pbuf_take+0x108>)
 8011f9a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8011f9e:	492f      	ldr	r1, [pc, #188]	; (801205c <pbuf_take+0x118>)
 8011fa0:	482c      	ldr	r0, [pc, #176]	; (8012054 <pbuf_take+0x110>)
 8011fa2:	f00c fdc3 	bl	801eb2c <iprintf>
 8011fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8011faa:	e04b      	b.n	8012044 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d007      	beq.n	8011fc2 <pbuf_take+0x7e>
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d004      	beq.n	8011fc2 <pbuf_take+0x7e>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	891b      	ldrh	r3, [r3, #8]
 8011fbc:	88fa      	ldrh	r2, [r7, #6]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d902      	bls.n	8011fc8 <pbuf_take+0x84>
    return ERR_ARG;
 8011fc2:	f06f 030f 	mvn.w	r3, #15
 8011fc6:	e03d      	b.n	8012044 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	61fb      	str	r3, [r7, #28]
 8011fcc:	e028      	b.n	8012020 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d106      	bne.n	8011fe2 <pbuf_take+0x9e>
 8011fd4:	4b1d      	ldr	r3, [pc, #116]	; (801204c <pbuf_take+0x108>)
 8011fd6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011fda:	4921      	ldr	r1, [pc, #132]	; (8012060 <pbuf_take+0x11c>)
 8011fdc:	481d      	ldr	r0, [pc, #116]	; (8012054 <pbuf_take+0x110>)
 8011fde:	f00c fda5 	bl	801eb2c <iprintf>
    buf_copy_len = total_copy_len;
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8011fe6:	69fb      	ldr	r3, [r7, #28]
 8011fe8:	895b      	ldrh	r3, [r3, #10]
 8011fea:	461a      	mov	r2, r3
 8011fec:	69bb      	ldr	r3, [r7, #24]
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d902      	bls.n	8011ff8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8011ff2:	69fb      	ldr	r3, [r7, #28]
 8011ff4:	895b      	ldrh	r3, [r3, #10]
 8011ff6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	6858      	ldr	r0, [r3, #4]
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	4413      	add	r3, r2
 8012002:	69ba      	ldr	r2, [r7, #24]
 8012004:	4619      	mov	r1, r3
 8012006:	f00c f84d 	bl	801e0a4 <memcpy>
    total_copy_len -= buf_copy_len;
 801200a:	697a      	ldr	r2, [r7, #20]
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8012012:	693a      	ldr	r2, [r7, #16]
 8012014:	69bb      	ldr	r3, [r7, #24]
 8012016:	4413      	add	r3, r2
 8012018:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	61fb      	str	r3, [r7, #28]
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d1d3      	bne.n	8011fce <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d103      	bne.n	8012034 <pbuf_take+0xf0>
 801202c:	88fb      	ldrh	r3, [r7, #6]
 801202e:	693a      	ldr	r2, [r7, #16]
 8012030:	429a      	cmp	r2, r3
 8012032:	d006      	beq.n	8012042 <pbuf_take+0xfe>
 8012034:	4b05      	ldr	r3, [pc, #20]	; (801204c <pbuf_take+0x108>)
 8012036:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801203a:	490a      	ldr	r1, [pc, #40]	; (8012064 <pbuf_take+0x120>)
 801203c:	4805      	ldr	r0, [pc, #20]	; (8012054 <pbuf_take+0x110>)
 801203e:	f00c fd75 	bl	801eb2c <iprintf>
  return ERR_OK;
 8012042:	2300      	movs	r3, #0
}
 8012044:	4618      	mov	r0, r3
 8012046:	3720      	adds	r7, #32
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	08023c9c 	.word	0x08023c9c
 8012050:	08024074 	.word	0x08024074
 8012054:	08023cfc 	.word	0x08023cfc
 8012058:	0802408c 	.word	0x0802408c
 801205c:	080240a8 	.word	0x080240a8
 8012060:	080240c8 	.word	0x080240c8
 8012064:	080240e0 	.word	0x080240e0

08012068 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b088      	sub	sp, #32
 801206c:	af00      	add	r7, sp, #0
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	4611      	mov	r1, r2
 8012074:	461a      	mov	r2, r3
 8012076:	460b      	mov	r3, r1
 8012078:	80fb      	strh	r3, [r7, #6]
 801207a:	4613      	mov	r3, r2
 801207c:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801207e:	f107 0210 	add.w	r2, r7, #16
 8012082:	88bb      	ldrh	r3, [r7, #4]
 8012084:	4619      	mov	r1, r3
 8012086:	68f8      	ldr	r0, [r7, #12]
 8012088:	f7ff ff49 	bl	8011f1e <pbuf_skip>
 801208c:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801208e:	69fb      	ldr	r3, [r7, #28]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d047      	beq.n	8012124 <pbuf_take_at+0xbc>
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	891b      	ldrh	r3, [r3, #8]
 8012098:	461a      	mov	r2, r3
 801209a:	8a3b      	ldrh	r3, [r7, #16]
 801209c:	4619      	mov	r1, r3
 801209e:	88fb      	ldrh	r3, [r7, #6]
 80120a0:	440b      	add	r3, r1
 80120a2:	429a      	cmp	r2, r3
 80120a4:	db3e      	blt.n	8012124 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 80120a6:	88fb      	ldrh	r3, [r7, #6]
 80120a8:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	895a      	ldrh	r2, [r3, #10]
 80120b2:	8a3b      	ldrh	r3, [r7, #16]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d806      	bhi.n	80120c6 <pbuf_take_at+0x5e>
 80120b8:	4b1d      	ldr	r3, [pc, #116]	; (8012130 <pbuf_take_at+0xc8>)
 80120ba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80120be:	491d      	ldr	r1, [pc, #116]	; (8012134 <pbuf_take_at+0xcc>)
 80120c0:	481d      	ldr	r0, [pc, #116]	; (8012138 <pbuf_take_at+0xd0>)
 80120c2:	f00c fd33 	bl	801eb2c <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	895b      	ldrh	r3, [r3, #10]
 80120ca:	461a      	mov	r2, r3
 80120cc:	8a3b      	ldrh	r3, [r7, #16]
 80120ce:	1ad2      	subs	r2, r2, r3
 80120d0:	88fb      	ldrh	r3, [r7, #6]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	da05      	bge.n	80120e2 <pbuf_take_at+0x7a>
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	895a      	ldrh	r2, [r3, #10]
 80120da:	8a3b      	ldrh	r3, [r7, #16]
 80120dc:	1ad3      	subs	r3, r2, r3
 80120de:	b29b      	uxth	r3, r3
 80120e0:	e000      	b.n	80120e4 <pbuf_take_at+0x7c>
 80120e2:	88fb      	ldrh	r3, [r7, #6]
 80120e4:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	8a3a      	ldrh	r2, [r7, #16]
 80120ec:	4413      	add	r3, r2
 80120ee:	8a7a      	ldrh	r2, [r7, #18]
 80120f0:	68b9      	ldr	r1, [r7, #8]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f00b ffd6 	bl	801e0a4 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 80120f8:	8b7a      	ldrh	r2, [r7, #26]
 80120fa:	8a7b      	ldrh	r3, [r7, #18]
 80120fc:	1ad3      	subs	r3, r2, r3
 80120fe:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8012100:	8a7b      	ldrh	r3, [r7, #18]
 8012102:	697a      	ldr	r2, [r7, #20]
 8012104:	4413      	add	r3, r2
 8012106:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8012108:	8b7b      	ldrh	r3, [r7, #26]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d008      	beq.n	8012120 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	8b7a      	ldrh	r2, [r7, #26]
 8012114:	6979      	ldr	r1, [r7, #20]
 8012116:	4618      	mov	r0, r3
 8012118:	f7ff ff14 	bl	8011f44 <pbuf_take>
 801211c:	4603      	mov	r3, r0
 801211e:	e003      	b.n	8012128 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8012120:	2300      	movs	r3, #0
 8012122:	e001      	b.n	8012128 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8012124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012128:	4618      	mov	r0, r3
 801212a:	3720      	adds	r7, #32
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}
 8012130:	08023c9c 	.word	0x08023c9c
 8012134:	080240f8 	.word	0x080240f8
 8012138:	08023cfc 	.word	0x08023cfc

0801213c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af00      	add	r7, sp, #0
 8012142:	4603      	mov	r3, r0
 8012144:	603a      	str	r2, [r7, #0]
 8012146:	71fb      	strb	r3, [r7, #7]
 8012148:	460b      	mov	r3, r1
 801214a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	8919      	ldrh	r1, [r3, #8]
 8012150:	88ba      	ldrh	r2, [r7, #4]
 8012152:	79fb      	ldrb	r3, [r7, #7]
 8012154:	4618      	mov	r0, r3
 8012156:	f7ff f92b 	bl	80113b0 <pbuf_alloc>
 801215a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d101      	bne.n	8012166 <pbuf_clone+0x2a>
    return NULL;
 8012162:	2300      	movs	r3, #0
 8012164:	e011      	b.n	801218a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012166:	6839      	ldr	r1, [r7, #0]
 8012168:	68f8      	ldr	r0, [r7, #12]
 801216a:	f7ff fd6b 	bl	8011c44 <pbuf_copy>
 801216e:	4603      	mov	r3, r0
 8012170:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012172:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d006      	beq.n	8012188 <pbuf_clone+0x4c>
 801217a:	4b06      	ldr	r3, [pc, #24]	; (8012194 <pbuf_clone+0x58>)
 801217c:	f240 5224 	movw	r2, #1316	; 0x524
 8012180:	4905      	ldr	r1, [pc, #20]	; (8012198 <pbuf_clone+0x5c>)
 8012182:	4806      	ldr	r0, [pc, #24]	; (801219c <pbuf_clone+0x60>)
 8012184:	f00c fcd2 	bl	801eb2c <iprintf>
  return q;
 8012188:	68fb      	ldr	r3, [r7, #12]
}
 801218a:	4618      	mov	r0, r3
 801218c:	3710      	adds	r7, #16
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	08023c9c 	.word	0x08023c9c
 8012198:	08024110 	.word	0x08024110
 801219c:	08023cfc 	.word	0x08023cfc

080121a0 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	460b      	mov	r3, r1
 80121aa:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80121ac:	f107 020a 	add.w	r2, r7, #10
 80121b0:	887b      	ldrh	r3, [r7, #2]
 80121b2:	4619      	mov	r1, r3
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff fe89 	bl	8011ecc <pbuf_skip_const>
 80121ba:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d00a      	beq.n	80121d8 <pbuf_try_get_at+0x38>
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	895a      	ldrh	r2, [r3, #10]
 80121c6:	897b      	ldrh	r3, [r7, #10]
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d905      	bls.n	80121d8 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	897a      	ldrh	r2, [r7, #10]
 80121d2:	4413      	add	r3, r2
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	e001      	b.n	80121dc <pbuf_try_get_at+0x3c>
  }
  return -1;
 80121d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3710      	adds	r7, #16
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	460b      	mov	r3, r1
 80121ee:	807b      	strh	r3, [r7, #2]
 80121f0:	4613      	mov	r3, r2
 80121f2:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80121f4:	f107 020a 	add.w	r2, r7, #10
 80121f8:	887b      	ldrh	r3, [r7, #2]
 80121fa:	4619      	mov	r1, r3
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f7ff fe8e 	bl	8011f1e <pbuf_skip>
 8012202:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d00a      	beq.n	8012220 <pbuf_put_at+0x3c>
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	895a      	ldrh	r2, [r3, #10]
 801220e:	897b      	ldrh	r3, [r7, #10]
 8012210:	429a      	cmp	r2, r3
 8012212:	d905      	bls.n	8012220 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	685b      	ldr	r3, [r3, #4]
 8012218:	897a      	ldrh	r2, [r7, #10]
 801221a:	4413      	add	r3, r2
 801221c:	787a      	ldrb	r2, [r7, #1]
 801221e:	701a      	strb	r2, [r3, #0]
  }
}
 8012220:	bf00      	nop
 8012222:	3710      	adds	r7, #16
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801222c:	f00c fd0c 	bl	801ec48 <rand>
 8012230:	4603      	mov	r3, r0
 8012232:	b29b      	uxth	r3, r3
 8012234:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012238:	b29b      	uxth	r3, r3
 801223a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801223e:	b29a      	uxth	r2, r3
 8012240:	4b01      	ldr	r3, [pc, #4]	; (8012248 <tcp_init+0x20>)
 8012242:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012244:	bf00      	nop
 8012246:	bd80      	pop	{r7, pc}
 8012248:	20000054 	.word	0x20000054

0801224c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	7d1b      	ldrb	r3, [r3, #20]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d105      	bne.n	8012268 <tcp_free+0x1c>
 801225c:	4b06      	ldr	r3, [pc, #24]	; (8012278 <tcp_free+0x2c>)
 801225e:	22d4      	movs	r2, #212	; 0xd4
 8012260:	4906      	ldr	r1, [pc, #24]	; (801227c <tcp_free+0x30>)
 8012262:	4807      	ldr	r0, [pc, #28]	; (8012280 <tcp_free+0x34>)
 8012264:	f00c fc62 	bl	801eb2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012268:	6879      	ldr	r1, [r7, #4]
 801226a:	2001      	movs	r0, #1
 801226c:	f7fe fcd4 	bl	8010c18 <memp_free>
}
 8012270:	bf00      	nop
 8012272:	3708      	adds	r7, #8
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	0802419c 	.word	0x0802419c
 801227c:	080241cc 	.word	0x080241cc
 8012280:	080241e0 	.word	0x080241e0

08012284 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	7d1b      	ldrb	r3, [r3, #20]
 8012290:	2b01      	cmp	r3, #1
 8012292:	d105      	bne.n	80122a0 <tcp_free_listen+0x1c>
 8012294:	4b06      	ldr	r3, [pc, #24]	; (80122b0 <tcp_free_listen+0x2c>)
 8012296:	22df      	movs	r2, #223	; 0xdf
 8012298:	4906      	ldr	r1, [pc, #24]	; (80122b4 <tcp_free_listen+0x30>)
 801229a:	4807      	ldr	r0, [pc, #28]	; (80122b8 <tcp_free_listen+0x34>)
 801229c:	f00c fc46 	bl	801eb2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80122a0:	6879      	ldr	r1, [r7, #4]
 80122a2:	2002      	movs	r0, #2
 80122a4:	f7fe fcb8 	bl	8010c18 <memp_free>
}
 80122a8:	bf00      	nop
 80122aa:	3708      	adds	r7, #8
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}
 80122b0:	0802419c 	.word	0x0802419c
 80122b4:	08024208 	.word	0x08024208
 80122b8:	080241e0 	.word	0x080241e0

080122bc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80122c0:	f001 f9be 	bl	8013640 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80122c4:	4b07      	ldr	r3, [pc, #28]	; (80122e4 <tcp_tmr+0x28>)
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	3301      	adds	r3, #1
 80122ca:	b2da      	uxtb	r2, r3
 80122cc:	4b05      	ldr	r3, [pc, #20]	; (80122e4 <tcp_tmr+0x28>)
 80122ce:	701a      	strb	r2, [r3, #0]
 80122d0:	4b04      	ldr	r3, [pc, #16]	; (80122e4 <tcp_tmr+0x28>)
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	f003 0301 	and.w	r3, r3, #1
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d001      	beq.n	80122e0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80122dc:	f000 fe70 	bl	8012fc0 <tcp_slowtmr>
  }
}
 80122e0:	bf00      	nop
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	20014359 	.word	0x20014359

080122e8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d105      	bne.n	8012304 <tcp_remove_listener+0x1c>
 80122f8:	4b0d      	ldr	r3, [pc, #52]	; (8012330 <tcp_remove_listener+0x48>)
 80122fa:	22ff      	movs	r2, #255	; 0xff
 80122fc:	490d      	ldr	r1, [pc, #52]	; (8012334 <tcp_remove_listener+0x4c>)
 80122fe:	480e      	ldr	r0, [pc, #56]	; (8012338 <tcp_remove_listener+0x50>)
 8012300:	f00c fc14 	bl	801eb2c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	60fb      	str	r3, [r7, #12]
 8012308:	e00a      	b.n	8012320 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801230e:	683a      	ldr	r2, [r7, #0]
 8012310:	429a      	cmp	r2, r3
 8012312:	d102      	bne.n	801231a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2200      	movs	r2, #0
 8012318:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	68db      	ldr	r3, [r3, #12]
 801231e:	60fb      	str	r3, [r7, #12]
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1f1      	bne.n	801230a <tcp_remove_listener+0x22>
    }
  }
}
 8012326:	bf00      	nop
 8012328:	bf00      	nop
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	0802419c 	.word	0x0802419c
 8012334:	08024224 	.word	0x08024224
 8012338:	080241e0 	.word	0x080241e0

0801233c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d106      	bne.n	8012358 <tcp_listen_closed+0x1c>
 801234a:	4b14      	ldr	r3, [pc, #80]	; (801239c <tcp_listen_closed+0x60>)
 801234c:	f240 1211 	movw	r2, #273	; 0x111
 8012350:	4913      	ldr	r1, [pc, #76]	; (80123a0 <tcp_listen_closed+0x64>)
 8012352:	4814      	ldr	r0, [pc, #80]	; (80123a4 <tcp_listen_closed+0x68>)
 8012354:	f00c fbea 	bl	801eb2c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	7d1b      	ldrb	r3, [r3, #20]
 801235c:	2b01      	cmp	r3, #1
 801235e:	d006      	beq.n	801236e <tcp_listen_closed+0x32>
 8012360:	4b0e      	ldr	r3, [pc, #56]	; (801239c <tcp_listen_closed+0x60>)
 8012362:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012366:	4910      	ldr	r1, [pc, #64]	; (80123a8 <tcp_listen_closed+0x6c>)
 8012368:	480e      	ldr	r0, [pc, #56]	; (80123a4 <tcp_listen_closed+0x68>)
 801236a:	f00c fbdf 	bl	801eb2c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801236e:	2301      	movs	r3, #1
 8012370:	60fb      	str	r3, [r7, #12]
 8012372:	e00b      	b.n	801238c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012374:	4a0d      	ldr	r2, [pc, #52]	; (80123ac <tcp_listen_closed+0x70>)
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	6879      	ldr	r1, [r7, #4]
 8012380:	4618      	mov	r0, r3
 8012382:	f7ff ffb1 	bl	80122e8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	3301      	adds	r3, #1
 801238a:	60fb      	str	r3, [r7, #12]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2b03      	cmp	r3, #3
 8012390:	d9f0      	bls.n	8012374 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012392:	bf00      	nop
 8012394:	bf00      	nop
 8012396:	3710      	adds	r7, #16
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	0802419c 	.word	0x0802419c
 80123a0:	0802424c 	.word	0x0802424c
 80123a4:	080241e0 	.word	0x080241e0
 80123a8:	08024258 	.word	0x08024258
 80123ac:	08026760 	.word	0x08026760

080123b0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80123b0:	b5b0      	push	{r4, r5, r7, lr}
 80123b2:	b088      	sub	sp, #32
 80123b4:	af04      	add	r7, sp, #16
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	460b      	mov	r3, r1
 80123ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d106      	bne.n	80123d0 <tcp_close_shutdown+0x20>
 80123c2:	4b63      	ldr	r3, [pc, #396]	; (8012550 <tcp_close_shutdown+0x1a0>)
 80123c4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80123c8:	4962      	ldr	r1, [pc, #392]	; (8012554 <tcp_close_shutdown+0x1a4>)
 80123ca:	4863      	ldr	r0, [pc, #396]	; (8012558 <tcp_close_shutdown+0x1a8>)
 80123cc:	f00c fbae 	bl	801eb2c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80123d0:	78fb      	ldrb	r3, [r7, #3]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d066      	beq.n	80124a4 <tcp_close_shutdown+0xf4>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	7d1b      	ldrb	r3, [r3, #20]
 80123da:	2b04      	cmp	r3, #4
 80123dc:	d003      	beq.n	80123e6 <tcp_close_shutdown+0x36>
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	7d1b      	ldrb	r3, [r3, #20]
 80123e2:	2b07      	cmp	r3, #7
 80123e4:	d15e      	bne.n	80124a4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d104      	bne.n	80123f8 <tcp_close_shutdown+0x48>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80123f6:	d055      	beq.n	80124a4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	8b5b      	ldrh	r3, [r3, #26]
 80123fc:	f003 0310 	and.w	r3, r3, #16
 8012400:	2b00      	cmp	r3, #0
 8012402:	d106      	bne.n	8012412 <tcp_close_shutdown+0x62>
 8012404:	4b52      	ldr	r3, [pc, #328]	; (8012550 <tcp_close_shutdown+0x1a0>)
 8012406:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801240a:	4954      	ldr	r1, [pc, #336]	; (801255c <tcp_close_shutdown+0x1ac>)
 801240c:	4852      	ldr	r0, [pc, #328]	; (8012558 <tcp_close_shutdown+0x1a8>)
 801240e:	f00c fb8d 	bl	801eb2c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801241a:	687d      	ldr	r5, [r7, #4]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	3304      	adds	r3, #4
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	8ad2      	ldrh	r2, [r2, #22]
 8012424:	6879      	ldr	r1, [r7, #4]
 8012426:	8b09      	ldrh	r1, [r1, #24]
 8012428:	9102      	str	r1, [sp, #8]
 801242a:	9201      	str	r2, [sp, #4]
 801242c:	9300      	str	r3, [sp, #0]
 801242e:	462b      	mov	r3, r5
 8012430:	4622      	mov	r2, r4
 8012432:	4601      	mov	r1, r0
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f005 ff3b 	bl	80182b0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f001 fcb0 	bl	8013da0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012440:	4b47      	ldr	r3, [pc, #284]	; (8012560 <tcp_close_shutdown+0x1b0>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	429a      	cmp	r2, r3
 8012448:	d105      	bne.n	8012456 <tcp_close_shutdown+0xa6>
 801244a:	4b45      	ldr	r3, [pc, #276]	; (8012560 <tcp_close_shutdown+0x1b0>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	68db      	ldr	r3, [r3, #12]
 8012450:	4a43      	ldr	r2, [pc, #268]	; (8012560 <tcp_close_shutdown+0x1b0>)
 8012452:	6013      	str	r3, [r2, #0]
 8012454:	e013      	b.n	801247e <tcp_close_shutdown+0xce>
 8012456:	4b42      	ldr	r3, [pc, #264]	; (8012560 <tcp_close_shutdown+0x1b0>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	60fb      	str	r3, [r7, #12]
 801245c:	e00c      	b.n	8012478 <tcp_close_shutdown+0xc8>
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	429a      	cmp	r2, r3
 8012466:	d104      	bne.n	8012472 <tcp_close_shutdown+0xc2>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	68da      	ldr	r2, [r3, #12]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	60da      	str	r2, [r3, #12]
 8012470:	e005      	b.n	801247e <tcp_close_shutdown+0xce>
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	68db      	ldr	r3, [r3, #12]
 8012476:	60fb      	str	r3, [r7, #12]
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d1ef      	bne.n	801245e <tcp_close_shutdown+0xae>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2200      	movs	r2, #0
 8012482:	60da      	str	r2, [r3, #12]
 8012484:	4b37      	ldr	r3, [pc, #220]	; (8012564 <tcp_close_shutdown+0x1b4>)
 8012486:	2201      	movs	r2, #1
 8012488:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801248a:	4b37      	ldr	r3, [pc, #220]	; (8012568 <tcp_close_shutdown+0x1b8>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	429a      	cmp	r2, r3
 8012492:	d102      	bne.n	801249a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012494:	f004 f944 	bl	8016720 <tcp_trigger_input_pcb_close>
 8012498:	e002      	b.n	80124a0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f7ff fed6 	bl	801224c <tcp_free>
      }
      return ERR_OK;
 80124a0:	2300      	movs	r3, #0
 80124a2:	e050      	b.n	8012546 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	7d1b      	ldrb	r3, [r3, #20]
 80124a8:	2b02      	cmp	r3, #2
 80124aa:	d03b      	beq.n	8012524 <tcp_close_shutdown+0x174>
 80124ac:	2b02      	cmp	r3, #2
 80124ae:	dc44      	bgt.n	801253a <tcp_close_shutdown+0x18a>
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d002      	beq.n	80124ba <tcp_close_shutdown+0x10a>
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d02a      	beq.n	801250e <tcp_close_shutdown+0x15e>
 80124b8:	e03f      	b.n	801253a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	8adb      	ldrh	r3, [r3, #22]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d021      	beq.n	8012506 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80124c2:	4b2a      	ldr	r3, [pc, #168]	; (801256c <tcp_close_shutdown+0x1bc>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d105      	bne.n	80124d8 <tcp_close_shutdown+0x128>
 80124cc:	4b27      	ldr	r3, [pc, #156]	; (801256c <tcp_close_shutdown+0x1bc>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	68db      	ldr	r3, [r3, #12]
 80124d2:	4a26      	ldr	r2, [pc, #152]	; (801256c <tcp_close_shutdown+0x1bc>)
 80124d4:	6013      	str	r3, [r2, #0]
 80124d6:	e013      	b.n	8012500 <tcp_close_shutdown+0x150>
 80124d8:	4b24      	ldr	r3, [pc, #144]	; (801256c <tcp_close_shutdown+0x1bc>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	60bb      	str	r3, [r7, #8]
 80124de:	e00c      	b.n	80124fa <tcp_close_shutdown+0x14a>
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	68db      	ldr	r3, [r3, #12]
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d104      	bne.n	80124f4 <tcp_close_shutdown+0x144>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	68da      	ldr	r2, [r3, #12]
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	60da      	str	r2, [r3, #12]
 80124f2:	e005      	b.n	8012500 <tcp_close_shutdown+0x150>
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	60bb      	str	r3, [r7, #8]
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d1ef      	bne.n	80124e0 <tcp_close_shutdown+0x130>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7ff fea0 	bl	801224c <tcp_free>
      break;
 801250c:	e01a      	b.n	8012544 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f7ff ff14 	bl	801233c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012514:	6879      	ldr	r1, [r7, #4]
 8012516:	4816      	ldr	r0, [pc, #88]	; (8012570 <tcp_close_shutdown+0x1c0>)
 8012518:	f001 fc92 	bl	8013e40 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f7ff feb1 	bl	8012284 <tcp_free_listen>
      break;
 8012522:	e00f      	b.n	8012544 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012524:	6879      	ldr	r1, [r7, #4]
 8012526:	480e      	ldr	r0, [pc, #56]	; (8012560 <tcp_close_shutdown+0x1b0>)
 8012528:	f001 fc8a 	bl	8013e40 <tcp_pcb_remove>
 801252c:	4b0d      	ldr	r3, [pc, #52]	; (8012564 <tcp_close_shutdown+0x1b4>)
 801252e:	2201      	movs	r2, #1
 8012530:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f7ff fe8a 	bl	801224c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012538:	e004      	b.n	8012544 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f000 f81a 	bl	8012574 <tcp_close_shutdown_fin>
 8012540:	4603      	mov	r3, r0
 8012542:	e000      	b.n	8012546 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012544:	2300      	movs	r3, #0
}
 8012546:	4618      	mov	r0, r3
 8012548:	3710      	adds	r7, #16
 801254a:	46bd      	mov	sp, r7
 801254c:	bdb0      	pop	{r4, r5, r7, pc}
 801254e:	bf00      	nop
 8012550:	0802419c 	.word	0x0802419c
 8012554:	08024270 	.word	0x08024270
 8012558:	080241e0 	.word	0x080241e0
 801255c:	08024290 	.word	0x08024290
 8012560:	2001b0c8 	.word	0x2001b0c8
 8012564:	2001b0c4 	.word	0x2001b0c4
 8012568:	2001b0dc 	.word	0x2001b0dc
 801256c:	2001b0d4 	.word	0x2001b0d4
 8012570:	2001b0d0 	.word	0x2001b0d0

08012574 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d106      	bne.n	8012590 <tcp_close_shutdown_fin+0x1c>
 8012582:	4b2e      	ldr	r3, [pc, #184]	; (801263c <tcp_close_shutdown_fin+0xc8>)
 8012584:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012588:	492d      	ldr	r1, [pc, #180]	; (8012640 <tcp_close_shutdown_fin+0xcc>)
 801258a:	482e      	ldr	r0, [pc, #184]	; (8012644 <tcp_close_shutdown_fin+0xd0>)
 801258c:	f00c face 	bl	801eb2c <iprintf>

  switch (pcb->state) {
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	7d1b      	ldrb	r3, [r3, #20]
 8012594:	2b07      	cmp	r3, #7
 8012596:	d020      	beq.n	80125da <tcp_close_shutdown_fin+0x66>
 8012598:	2b07      	cmp	r3, #7
 801259a:	dc2b      	bgt.n	80125f4 <tcp_close_shutdown_fin+0x80>
 801259c:	2b03      	cmp	r3, #3
 801259e:	d002      	beq.n	80125a6 <tcp_close_shutdown_fin+0x32>
 80125a0:	2b04      	cmp	r3, #4
 80125a2:	d00d      	beq.n	80125c0 <tcp_close_shutdown_fin+0x4c>
 80125a4:	e026      	b.n	80125f4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f004 ff84 	bl	80174b4 <tcp_send_fin>
 80125ac:	4603      	mov	r3, r0
 80125ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80125b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d11f      	bne.n	80125f8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2205      	movs	r2, #5
 80125bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80125be:	e01b      	b.n	80125f8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f004 ff77 	bl	80174b4 <tcp_send_fin>
 80125c6:	4603      	mov	r3, r0
 80125c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80125ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d114      	bne.n	80125fc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2205      	movs	r2, #5
 80125d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80125d8:	e010      	b.n	80125fc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f004 ff6a 	bl	80174b4 <tcp_send_fin>
 80125e0:	4603      	mov	r3, r0
 80125e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80125e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d109      	bne.n	8012600 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2209      	movs	r2, #9
 80125f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80125f2:	e005      	b.n	8012600 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80125f4:	2300      	movs	r3, #0
 80125f6:	e01c      	b.n	8012632 <tcp_close_shutdown_fin+0xbe>
      break;
 80125f8:	bf00      	nop
 80125fa:	e002      	b.n	8012602 <tcp_close_shutdown_fin+0x8e>
      break;
 80125fc:	bf00      	nop
 80125fe:	e000      	b.n	8012602 <tcp_close_shutdown_fin+0x8e>
      break;
 8012600:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d103      	bne.n	8012612 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f005 f890 	bl	8017730 <tcp_output>
 8012610:	e00d      	b.n	801262e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801261a:	d108      	bne.n	801262e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	8b5b      	ldrh	r3, [r3, #26]
 8012620:	f043 0308 	orr.w	r3, r3, #8
 8012624:	b29a      	uxth	r2, r3
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801262a:	2300      	movs	r3, #0
 801262c:	e001      	b.n	8012632 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012632:	4618      	mov	r0, r3
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
 801263a:	bf00      	nop
 801263c:	0802419c 	.word	0x0802419c
 8012640:	0802424c 	.word	0x0802424c
 8012644:	080241e0 	.word	0x080241e0

08012648 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d109      	bne.n	801266a <tcp_close+0x22>
 8012656:	4b0f      	ldr	r3, [pc, #60]	; (8012694 <tcp_close+0x4c>)
 8012658:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801265c:	490e      	ldr	r1, [pc, #56]	; (8012698 <tcp_close+0x50>)
 801265e:	480f      	ldr	r0, [pc, #60]	; (801269c <tcp_close+0x54>)
 8012660:	f00c fa64 	bl	801eb2c <iprintf>
 8012664:	f06f 030f 	mvn.w	r3, #15
 8012668:	e00f      	b.n	801268a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	7d1b      	ldrb	r3, [r3, #20]
 801266e:	2b01      	cmp	r3, #1
 8012670:	d006      	beq.n	8012680 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	8b5b      	ldrh	r3, [r3, #26]
 8012676:	f043 0310 	orr.w	r3, r3, #16
 801267a:	b29a      	uxth	r2, r3
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012680:	2101      	movs	r1, #1
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f7ff fe94 	bl	80123b0 <tcp_close_shutdown>
 8012688:	4603      	mov	r3, r0
}
 801268a:	4618      	mov	r0, r3
 801268c:	3708      	adds	r7, #8
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	0802419c 	.word	0x0802419c
 8012698:	080242ac 	.word	0x080242ac
 801269c:	080241e0 	.word	0x080241e0

080126a0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d109      	bne.n	80126c6 <tcp_shutdown+0x26>
 80126b2:	4b26      	ldr	r3, [pc, #152]	; (801274c <tcp_shutdown+0xac>)
 80126b4:	f240 2207 	movw	r2, #519	; 0x207
 80126b8:	4925      	ldr	r1, [pc, #148]	; (8012750 <tcp_shutdown+0xb0>)
 80126ba:	4826      	ldr	r0, [pc, #152]	; (8012754 <tcp_shutdown+0xb4>)
 80126bc:	f00c fa36 	bl	801eb2c <iprintf>
 80126c0:	f06f 030f 	mvn.w	r3, #15
 80126c4:	e03d      	b.n	8012742 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	7d1b      	ldrb	r3, [r3, #20]
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d102      	bne.n	80126d4 <tcp_shutdown+0x34>
    return ERR_CONN;
 80126ce:	f06f 030a 	mvn.w	r3, #10
 80126d2:	e036      	b.n	8012742 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d01b      	beq.n	8012712 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	8b5b      	ldrh	r3, [r3, #26]
 80126de:	f043 0310 	orr.w	r3, r3, #16
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d005      	beq.n	80126fa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80126ee:	2101      	movs	r1, #1
 80126f0:	68f8      	ldr	r0, [r7, #12]
 80126f2:	f7ff fe5d 	bl	80123b0 <tcp_close_shutdown>
 80126f6:	4603      	mov	r3, r0
 80126f8:	e023      	b.n	8012742 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d007      	beq.n	8012712 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012706:	4618      	mov	r0, r3
 8012708:	f7ff f968 	bl	80119dc <pbuf_free>
      pcb->refused_data = NULL;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	2200      	movs	r2, #0
 8012710:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d013      	beq.n	8012740 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	7d1b      	ldrb	r3, [r3, #20]
 801271c:	2b04      	cmp	r3, #4
 801271e:	dc02      	bgt.n	8012726 <tcp_shutdown+0x86>
 8012720:	2b03      	cmp	r3, #3
 8012722:	da02      	bge.n	801272a <tcp_shutdown+0x8a>
 8012724:	e009      	b.n	801273a <tcp_shutdown+0x9a>
 8012726:	2b07      	cmp	r3, #7
 8012728:	d107      	bne.n	801273a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	b2db      	uxtb	r3, r3
 801272e:	4619      	mov	r1, r3
 8012730:	68f8      	ldr	r0, [r7, #12]
 8012732:	f7ff fe3d 	bl	80123b0 <tcp_close_shutdown>
 8012736:	4603      	mov	r3, r0
 8012738:	e003      	b.n	8012742 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801273a:	f06f 030a 	mvn.w	r3, #10
 801273e:	e000      	b.n	8012742 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012740:	2300      	movs	r3, #0
}
 8012742:	4618      	mov	r0, r3
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	0802419c 	.word	0x0802419c
 8012750:	080242c4 	.word	0x080242c4
 8012754:	080241e0 	.word	0x080241e0

08012758 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b08e      	sub	sp, #56	; 0x38
 801275c:	af04      	add	r7, sp, #16
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d107      	bne.n	8012778 <tcp_abandon+0x20>
 8012768:	4b52      	ldr	r3, [pc, #328]	; (80128b4 <tcp_abandon+0x15c>)
 801276a:	f240 223d 	movw	r2, #573	; 0x23d
 801276e:	4952      	ldr	r1, [pc, #328]	; (80128b8 <tcp_abandon+0x160>)
 8012770:	4852      	ldr	r0, [pc, #328]	; (80128bc <tcp_abandon+0x164>)
 8012772:	f00c f9db 	bl	801eb2c <iprintf>
 8012776:	e099      	b.n	80128ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	7d1b      	ldrb	r3, [r3, #20]
 801277c:	2b01      	cmp	r3, #1
 801277e:	d106      	bne.n	801278e <tcp_abandon+0x36>
 8012780:	4b4c      	ldr	r3, [pc, #304]	; (80128b4 <tcp_abandon+0x15c>)
 8012782:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012786:	494e      	ldr	r1, [pc, #312]	; (80128c0 <tcp_abandon+0x168>)
 8012788:	484c      	ldr	r0, [pc, #304]	; (80128bc <tcp_abandon+0x164>)
 801278a:	f00c f9cf 	bl	801eb2c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	7d1b      	ldrb	r3, [r3, #20]
 8012792:	2b0a      	cmp	r3, #10
 8012794:	d107      	bne.n	80127a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012796:	6879      	ldr	r1, [r7, #4]
 8012798:	484a      	ldr	r0, [pc, #296]	; (80128c4 <tcp_abandon+0x16c>)
 801279a:	f001 fb51 	bl	8013e40 <tcp_pcb_remove>
    tcp_free(pcb);
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f7ff fd54 	bl	801224c <tcp_free>
 80127a4:	e082      	b.n	80128ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80127a6:	2300      	movs	r3, #0
 80127a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80127aa:	2300      	movs	r3, #0
 80127ac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	691b      	ldr	r3, [r3, #16]
 80127c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	7d1b      	ldrb	r3, [r3, #20]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d126      	bne.n	801281e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	8adb      	ldrh	r3, [r3, #22]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d02e      	beq.n	8012836 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80127d8:	4b3b      	ldr	r3, [pc, #236]	; (80128c8 <tcp_abandon+0x170>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d105      	bne.n	80127ee <tcp_abandon+0x96>
 80127e2:	4b39      	ldr	r3, [pc, #228]	; (80128c8 <tcp_abandon+0x170>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	4a37      	ldr	r2, [pc, #220]	; (80128c8 <tcp_abandon+0x170>)
 80127ea:	6013      	str	r3, [r2, #0]
 80127ec:	e013      	b.n	8012816 <tcp_abandon+0xbe>
 80127ee:	4b36      	ldr	r3, [pc, #216]	; (80128c8 <tcp_abandon+0x170>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	61fb      	str	r3, [r7, #28]
 80127f4:	e00c      	b.n	8012810 <tcp_abandon+0xb8>
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	68db      	ldr	r3, [r3, #12]
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d104      	bne.n	801280a <tcp_abandon+0xb2>
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	68da      	ldr	r2, [r3, #12]
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	60da      	str	r2, [r3, #12]
 8012808:	e005      	b.n	8012816 <tcp_abandon+0xbe>
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	61fb      	str	r3, [r7, #28]
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d1ef      	bne.n	80127f6 <tcp_abandon+0x9e>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2200      	movs	r2, #0
 801281a:	60da      	str	r2, [r3, #12]
 801281c:	e00b      	b.n	8012836 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	8adb      	ldrh	r3, [r3, #22]
 8012826:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012828:	6879      	ldr	r1, [r7, #4]
 801282a:	4828      	ldr	r0, [pc, #160]	; (80128cc <tcp_abandon+0x174>)
 801282c:	f001 fb08 	bl	8013e40 <tcp_pcb_remove>
 8012830:	4b27      	ldr	r3, [pc, #156]	; (80128d0 <tcp_abandon+0x178>)
 8012832:	2201      	movs	r2, #1
 8012834:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801283a:	2b00      	cmp	r3, #0
 801283c:	d004      	beq.n	8012848 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012842:	4618      	mov	r0, r3
 8012844:	f000 ffdc 	bl	8013800 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801284c:	2b00      	cmp	r3, #0
 801284e:	d004      	beq.n	801285a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012854:	4618      	mov	r0, r3
 8012856:	f000 ffd3 	bl	8013800 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801285e:	2b00      	cmp	r3, #0
 8012860:	d004      	beq.n	801286c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012866:	4618      	mov	r0, r3
 8012868:	f000 ffca 	bl	8013800 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286e:	2b00      	cmp	r3, #0
 8012870:	d00e      	beq.n	8012890 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012872:	6879      	ldr	r1, [r7, #4]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	3304      	adds	r3, #4
 8012878:	687a      	ldr	r2, [r7, #4]
 801287a:	8b12      	ldrh	r2, [r2, #24]
 801287c:	9202      	str	r2, [sp, #8]
 801287e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012880:	9201      	str	r2, [sp, #4]
 8012882:	9300      	str	r3, [sp, #0]
 8012884:	460b      	mov	r3, r1
 8012886:	697a      	ldr	r2, [r7, #20]
 8012888:	69b9      	ldr	r1, [r7, #24]
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f005 fd10 	bl	80182b0 <tcp_rst>
    }
    last_state = pcb->state;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	7d1b      	ldrb	r3, [r3, #20]
 8012894:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f7ff fcd8 	bl	801224c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d004      	beq.n	80128ac <tcp_abandon+0x154>
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	f06f 010c 	mvn.w	r1, #12
 80128a8:	68f8      	ldr	r0, [r7, #12]
 80128aa:	4798      	blx	r3
  }
}
 80128ac:	3728      	adds	r7, #40	; 0x28
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	0802419c 	.word	0x0802419c
 80128b8:	080242e0 	.word	0x080242e0
 80128bc:	080241e0 	.word	0x080241e0
 80128c0:	080242fc 	.word	0x080242fc
 80128c4:	2001b0d8 	.word	0x2001b0d8
 80128c8:	2001b0d4 	.word	0x2001b0d4
 80128cc:	2001b0c8 	.word	0x2001b0c8
 80128d0:	2001b0c4 	.word	0x2001b0c4

080128d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b082      	sub	sp, #8
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80128dc:	2101      	movs	r1, #1
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f7ff ff3a 	bl	8012758 <tcp_abandon>
}
 80128e4:	bf00      	nop
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b088      	sub	sp, #32
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	4613      	mov	r3, r2
 80128f8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80128fa:	2304      	movs	r3, #4
 80128fc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d101      	bne.n	8012908 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012904:	4b3e      	ldr	r3, [pc, #248]	; (8012a00 <tcp_bind+0x114>)
 8012906:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d109      	bne.n	8012922 <tcp_bind+0x36>
 801290e:	4b3d      	ldr	r3, [pc, #244]	; (8012a04 <tcp_bind+0x118>)
 8012910:	f240 22a9 	movw	r2, #681	; 0x2a9
 8012914:	493c      	ldr	r1, [pc, #240]	; (8012a08 <tcp_bind+0x11c>)
 8012916:	483d      	ldr	r0, [pc, #244]	; (8012a0c <tcp_bind+0x120>)
 8012918:	f00c f908 	bl	801eb2c <iprintf>
 801291c:	f06f 030f 	mvn.w	r3, #15
 8012920:	e06a      	b.n	80129f8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	7d1b      	ldrb	r3, [r3, #20]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d009      	beq.n	801293e <tcp_bind+0x52>
 801292a:	4b36      	ldr	r3, [pc, #216]	; (8012a04 <tcp_bind+0x118>)
 801292c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012930:	4937      	ldr	r1, [pc, #220]	; (8012a10 <tcp_bind+0x124>)
 8012932:	4836      	ldr	r0, [pc, #216]	; (8012a0c <tcp_bind+0x120>)
 8012934:	f00c f8fa 	bl	801eb2c <iprintf>
 8012938:	f06f 0305 	mvn.w	r3, #5
 801293c:	e05c      	b.n	80129f8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801293e:	88fb      	ldrh	r3, [r7, #6]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d109      	bne.n	8012958 <tcp_bind+0x6c>
    port = tcp_new_port();
 8012944:	f000 f9de 	bl	8012d04 <tcp_new_port>
 8012948:	4603      	mov	r3, r0
 801294a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801294c:	88fb      	ldrh	r3, [r7, #6]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d135      	bne.n	80129be <tcp_bind+0xd2>
      return ERR_BUF;
 8012952:	f06f 0301 	mvn.w	r3, #1
 8012956:	e04f      	b.n	80129f8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012958:	2300      	movs	r3, #0
 801295a:	61fb      	str	r3, [r7, #28]
 801295c:	e02b      	b.n	80129b6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801295e:	4a2d      	ldr	r2, [pc, #180]	; (8012a14 <tcp_bind+0x128>)
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	61bb      	str	r3, [r7, #24]
 801296a:	e01e      	b.n	80129aa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801296c:	69bb      	ldr	r3, [r7, #24]
 801296e:	8adb      	ldrh	r3, [r3, #22]
 8012970:	88fa      	ldrh	r2, [r7, #6]
 8012972:	429a      	cmp	r2, r3
 8012974:	d116      	bne.n	80129a4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8012976:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012978:	2b00      	cmp	r3, #0
 801297a:	d010      	beq.n	801299e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801297c:	69bb      	ldr	r3, [r7, #24]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d00c      	beq.n	801299e <tcp_bind+0xb2>
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d009      	beq.n	801299e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d005      	beq.n	801299e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	681a      	ldr	r2, [r3, #0]
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801299a:	429a      	cmp	r2, r3
 801299c:	d102      	bne.n	80129a4 <tcp_bind+0xb8>
              return ERR_USE;
 801299e:	f06f 0307 	mvn.w	r3, #7
 80129a2:	e029      	b.n	80129f8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80129a4:	69bb      	ldr	r3, [r7, #24]
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	61bb      	str	r3, [r7, #24]
 80129aa:	69bb      	ldr	r3, [r7, #24]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1dd      	bne.n	801296c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	3301      	adds	r3, #1
 80129b4:	61fb      	str	r3, [r7, #28]
 80129b6:	69fa      	ldr	r2, [r7, #28]
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	dbcf      	blt.n	801295e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d00c      	beq.n	80129de <tcp_bind+0xf2>
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d008      	beq.n	80129de <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d002      	beq.n	80129d8 <tcp_bind+0xec>
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	e000      	b.n	80129da <tcp_bind+0xee>
 80129d8:	2300      	movs	r3, #0
 80129da:	68fa      	ldr	r2, [r7, #12]
 80129dc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	88fa      	ldrh	r2, [r7, #6]
 80129e2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80129e4:	4b0c      	ldr	r3, [pc, #48]	; (8012a18 <tcp_bind+0x12c>)
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	60da      	str	r2, [r3, #12]
 80129ec:	4a0a      	ldr	r2, [pc, #40]	; (8012a18 <tcp_bind+0x12c>)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	6013      	str	r3, [r2, #0]
 80129f2:	f005 fe1f 	bl	8018634 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80129f6:	2300      	movs	r3, #0
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3720      	adds	r7, #32
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	080267a0 	.word	0x080267a0
 8012a04:	0802419c 	.word	0x0802419c
 8012a08:	08024330 	.word	0x08024330
 8012a0c:	080241e0 	.word	0x080241e0
 8012a10:	08024348 	.word	0x08024348
 8012a14:	08026760 	.word	0x08026760
 8012a18:	2001b0d4 	.word	0x2001b0d4

08012a1c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	60f8      	str	r0, [r7, #12]
 8012a24:	60b9      	str	r1, [r7, #8]
 8012a26:	4613      	mov	r3, r2
 8012a28:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d106      	bne.n	8012a3e <tcp_accept_null+0x22>
 8012a30:	4b07      	ldr	r3, [pc, #28]	; (8012a50 <tcp_accept_null+0x34>)
 8012a32:	f240 320f 	movw	r2, #783	; 0x30f
 8012a36:	4907      	ldr	r1, [pc, #28]	; (8012a54 <tcp_accept_null+0x38>)
 8012a38:	4807      	ldr	r0, [pc, #28]	; (8012a58 <tcp_accept_null+0x3c>)
 8012a3a:	f00c f877 	bl	801eb2c <iprintf>

  tcp_abort(pcb);
 8012a3e:	68b8      	ldr	r0, [r7, #8]
 8012a40:	f7ff ff48 	bl	80128d4 <tcp_abort>

  return ERR_ABRT;
 8012a44:	f06f 030c 	mvn.w	r3, #12
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3710      	adds	r7, #16
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	0802419c 	.word	0x0802419c
 8012a54:	08024370 	.word	0x08024370
 8012a58:	080241e0 	.word	0x080241e0

08012a5c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b088      	sub	sp, #32
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	460b      	mov	r3, r1
 8012a66:	607a      	str	r2, [r7, #4]
 8012a68:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d109      	bne.n	8012a88 <tcp_listen_with_backlog_and_err+0x2c>
 8012a74:	4b47      	ldr	r3, [pc, #284]	; (8012b94 <tcp_listen_with_backlog_and_err+0x138>)
 8012a76:	f240 3259 	movw	r2, #857	; 0x359
 8012a7a:	4947      	ldr	r1, [pc, #284]	; (8012b98 <tcp_listen_with_backlog_and_err+0x13c>)
 8012a7c:	4847      	ldr	r0, [pc, #284]	; (8012b9c <tcp_listen_with_backlog_and_err+0x140>)
 8012a7e:	f00c f855 	bl	801eb2c <iprintf>
 8012a82:	23f0      	movs	r3, #240	; 0xf0
 8012a84:	76fb      	strb	r3, [r7, #27]
 8012a86:	e079      	b.n	8012b7c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	7d1b      	ldrb	r3, [r3, #20]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d009      	beq.n	8012aa4 <tcp_listen_with_backlog_and_err+0x48>
 8012a90:	4b40      	ldr	r3, [pc, #256]	; (8012b94 <tcp_listen_with_backlog_and_err+0x138>)
 8012a92:	f240 325a 	movw	r2, #858	; 0x35a
 8012a96:	4942      	ldr	r1, [pc, #264]	; (8012ba0 <tcp_listen_with_backlog_and_err+0x144>)
 8012a98:	4840      	ldr	r0, [pc, #256]	; (8012b9c <tcp_listen_with_backlog_and_err+0x140>)
 8012a9a:	f00c f847 	bl	801eb2c <iprintf>
 8012a9e:	23f1      	movs	r3, #241	; 0xf1
 8012aa0:	76fb      	strb	r3, [r7, #27]
 8012aa2:	e06b      	b.n	8012b7c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	7d1b      	ldrb	r3, [r3, #20]
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d104      	bne.n	8012ab6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8012ab0:	23f7      	movs	r3, #247	; 0xf7
 8012ab2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012ab4:	e062      	b.n	8012b7c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8012ab6:	2002      	movs	r0, #2
 8012ab8:	f7fe f85c 	bl	8010b74 <memp_malloc>
 8012abc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8012abe:	69fb      	ldr	r3, [r7, #28]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d102      	bne.n	8012aca <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8012ac4:	23ff      	movs	r3, #255	; 0xff
 8012ac6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012ac8:	e058      	b.n	8012b7c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	691a      	ldr	r2, [r3, #16]
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	8ada      	ldrh	r2, [r3, #22]
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8012ada:	69fb      	ldr	r3, [r7, #28]
 8012adc:	2201      	movs	r2, #1
 8012ade:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	7d5a      	ldrb	r2, [r3, #21]
 8012ae4:	69fb      	ldr	r3, [r7, #28]
 8012ae6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	7a5a      	ldrb	r2, [r3, #9]
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	2200      	movs	r2, #0
 8012af4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	7ada      	ldrb	r2, [r3, #11]
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	7a9a      	ldrb	r2, [r3, #10]
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	69fb      	ldr	r3, [r7, #28]
 8012b0c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	8adb      	ldrh	r3, [r3, #22]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d021      	beq.n	8012b5a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8012b16:	4b23      	ldr	r3, [pc, #140]	; (8012ba4 <tcp_listen_with_backlog_and_err+0x148>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	68fa      	ldr	r2, [r7, #12]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d105      	bne.n	8012b2c <tcp_listen_with_backlog_and_err+0xd0>
 8012b20:	4b20      	ldr	r3, [pc, #128]	; (8012ba4 <tcp_listen_with_backlog_and_err+0x148>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	4a1f      	ldr	r2, [pc, #124]	; (8012ba4 <tcp_listen_with_backlog_and_err+0x148>)
 8012b28:	6013      	str	r3, [r2, #0]
 8012b2a:	e013      	b.n	8012b54 <tcp_listen_with_backlog_and_err+0xf8>
 8012b2c:	4b1d      	ldr	r3, [pc, #116]	; (8012ba4 <tcp_listen_with_backlog_and_err+0x148>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	617b      	str	r3, [r7, #20]
 8012b32:	e00c      	b.n	8012b4e <tcp_listen_with_backlog_and_err+0xf2>
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	68db      	ldr	r3, [r3, #12]
 8012b38:	68fa      	ldr	r2, [r7, #12]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d104      	bne.n	8012b48 <tcp_listen_with_backlog_and_err+0xec>
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	68da      	ldr	r2, [r3, #12]
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	60da      	str	r2, [r3, #12]
 8012b46:	e005      	b.n	8012b54 <tcp_listen_with_backlog_and_err+0xf8>
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	617b      	str	r3, [r7, #20]
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d1ef      	bne.n	8012b34 <tcp_listen_with_backlog_and_err+0xd8>
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2200      	movs	r2, #0
 8012b58:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8012b5a:	68f8      	ldr	r0, [r7, #12]
 8012b5c:	f7ff fb76 	bl	801224c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	4a11      	ldr	r2, [pc, #68]	; (8012ba8 <tcp_listen_with_backlog_and_err+0x14c>)
 8012b64:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8012b66:	4b11      	ldr	r3, [pc, #68]	; (8012bac <tcp_listen_with_backlog_and_err+0x150>)
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	69fb      	ldr	r3, [r7, #28]
 8012b6c:	60da      	str	r2, [r3, #12]
 8012b6e:	4a0f      	ldr	r2, [pc, #60]	; (8012bac <tcp_listen_with_backlog_and_err+0x150>)
 8012b70:	69fb      	ldr	r3, [r7, #28]
 8012b72:	6013      	str	r3, [r2, #0]
 8012b74:	f005 fd5e 	bl	8018634 <tcp_timer_needed>
  res = ERR_OK;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d002      	beq.n	8012b88 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	7efa      	ldrb	r2, [r7, #27]
 8012b86:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012b88:	69fb      	ldr	r3, [r7, #28]
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3720      	adds	r7, #32
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	0802419c 	.word	0x0802419c
 8012b98:	08024390 	.word	0x08024390
 8012b9c:	080241e0 	.word	0x080241e0
 8012ba0:	080243c0 	.word	0x080243c0
 8012ba4:	2001b0d4 	.word	0x2001b0d4
 8012ba8:	08012a1d 	.word	0x08012a1d
 8012bac:	2001b0d0 	.word	0x2001b0d0

08012bb0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d106      	bne.n	8012bcc <tcp_update_rcv_ann_wnd+0x1c>
 8012bbe:	4b25      	ldr	r3, [pc, #148]	; (8012c54 <tcp_update_rcv_ann_wnd+0xa4>)
 8012bc0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012bc4:	4924      	ldr	r1, [pc, #144]	; (8012c58 <tcp_update_rcv_ann_wnd+0xa8>)
 8012bc6:	4825      	ldr	r0, [pc, #148]	; (8012c5c <tcp_update_rcv_ann_wnd+0xac>)
 8012bc8:	f00b ffb0 	bl	801eb2c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012bd4:	4413      	add	r3, r2
 8012bd6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012be0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012be4:	bf28      	it	cs
 8012be6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012bea:	b292      	uxth	r2, r2
 8012bec:	4413      	add	r3, r2
 8012bee:	68fa      	ldr	r2, [r7, #12]
 8012bf0:	1ad3      	subs	r3, r2, r3
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	db08      	blt.n	8012c08 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c02:	68fa      	ldr	r2, [r7, #12]
 8012c04:	1ad3      	subs	r3, r2, r3
 8012c06:	e020      	b.n	8012c4a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c10:	1ad3      	subs	r3, r2, r3
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	dd03      	ble.n	8012c1e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012c1c:	e014      	b.n	8012c48 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c26:	1ad3      	subs	r3, r2, r3
 8012c28:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c30:	d306      	bcc.n	8012c40 <tcp_update_rcv_ann_wnd+0x90>
 8012c32:	4b08      	ldr	r3, [pc, #32]	; (8012c54 <tcp_update_rcv_ann_wnd+0xa4>)
 8012c34:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012c38:	4909      	ldr	r1, [pc, #36]	; (8012c60 <tcp_update_rcv_ann_wnd+0xb0>)
 8012c3a:	4808      	ldr	r0, [pc, #32]	; (8012c5c <tcp_update_rcv_ann_wnd+0xac>)
 8012c3c:	f00b ff76 	bl	801eb2c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	b29a      	uxth	r2, r3
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012c48:	2300      	movs	r3, #0
  }
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3710      	adds	r7, #16
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	0802419c 	.word	0x0802419c
 8012c58:	080243f8 	.word	0x080243f8
 8012c5c:	080241e0 	.word	0x080241e0
 8012c60:	0802441c 	.word	0x0802441c

08012c64 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d107      	bne.n	8012c86 <tcp_recved+0x22>
 8012c76:	4b1f      	ldr	r3, [pc, #124]	; (8012cf4 <tcp_recved+0x90>)
 8012c78:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012c7c:	491e      	ldr	r1, [pc, #120]	; (8012cf8 <tcp_recved+0x94>)
 8012c7e:	481f      	ldr	r0, [pc, #124]	; (8012cfc <tcp_recved+0x98>)
 8012c80:	f00b ff54 	bl	801eb2c <iprintf>
 8012c84:	e032      	b.n	8012cec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	7d1b      	ldrb	r3, [r3, #20]
 8012c8a:	2b01      	cmp	r3, #1
 8012c8c:	d106      	bne.n	8012c9c <tcp_recved+0x38>
 8012c8e:	4b19      	ldr	r3, [pc, #100]	; (8012cf4 <tcp_recved+0x90>)
 8012c90:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012c94:	491a      	ldr	r1, [pc, #104]	; (8012d00 <tcp_recved+0x9c>)
 8012c96:	4819      	ldr	r0, [pc, #100]	; (8012cfc <tcp_recved+0x98>)
 8012c98:	f00b ff48 	bl	801eb2c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ca0:	887b      	ldrh	r3, [r7, #2]
 8012ca2:	4413      	add	r3, r2
 8012ca4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012ca6:	89fb      	ldrh	r3, [r7, #14]
 8012ca8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012cac:	d804      	bhi.n	8012cb8 <tcp_recved+0x54>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cb2:	89fa      	ldrh	r2, [r7, #14]
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d204      	bcs.n	8012cc2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012cbe:	851a      	strh	r2, [r3, #40]	; 0x28
 8012cc0:	e002      	b.n	8012cc8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	89fa      	ldrh	r2, [r7, #14]
 8012cc6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f7ff ff71 	bl	8012bb0 <tcp_update_rcv_ann_wnd>
 8012cce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012cd6:	d309      	bcc.n	8012cec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	8b5b      	ldrh	r3, [r3, #26]
 8012cdc:	f043 0302 	orr.w	r3, r3, #2
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f004 fd22 	bl	8017730 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012cec:	3710      	adds	r7, #16
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	0802419c 	.word	0x0802419c
 8012cf8:	08024438 	.word	0x08024438
 8012cfc:	080241e0 	.word	0x080241e0
 8012d00:	08024450 	.word	0x08024450

08012d04 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012d0e:	4b1e      	ldr	r3, [pc, #120]	; (8012d88 <tcp_new_port+0x84>)
 8012d10:	881b      	ldrh	r3, [r3, #0]
 8012d12:	3301      	adds	r3, #1
 8012d14:	b29a      	uxth	r2, r3
 8012d16:	4b1c      	ldr	r3, [pc, #112]	; (8012d88 <tcp_new_port+0x84>)
 8012d18:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012d1a:	4b1b      	ldr	r3, [pc, #108]	; (8012d88 <tcp_new_port+0x84>)
 8012d1c:	881b      	ldrh	r3, [r3, #0]
 8012d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d22:	4293      	cmp	r3, r2
 8012d24:	d103      	bne.n	8012d2e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012d26:	4b18      	ldr	r3, [pc, #96]	; (8012d88 <tcp_new_port+0x84>)
 8012d28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012d2c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012d2e:	2300      	movs	r3, #0
 8012d30:	71fb      	strb	r3, [r7, #7]
 8012d32:	e01e      	b.n	8012d72 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012d34:	79fb      	ldrb	r3, [r7, #7]
 8012d36:	4a15      	ldr	r2, [pc, #84]	; (8012d8c <tcp_new_port+0x88>)
 8012d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	603b      	str	r3, [r7, #0]
 8012d40:	e011      	b.n	8012d66 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	8ada      	ldrh	r2, [r3, #22]
 8012d46:	4b10      	ldr	r3, [pc, #64]	; (8012d88 <tcp_new_port+0x84>)
 8012d48:	881b      	ldrh	r3, [r3, #0]
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d108      	bne.n	8012d60 <tcp_new_port+0x5c>
        n++;
 8012d4e:	88bb      	ldrh	r3, [r7, #4]
 8012d50:	3301      	adds	r3, #1
 8012d52:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012d54:	88bb      	ldrh	r3, [r7, #4]
 8012d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012d5a:	d3d8      	bcc.n	8012d0e <tcp_new_port+0xa>
          return 0;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	e00d      	b.n	8012d7c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	603b      	str	r3, [r7, #0]
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d1ea      	bne.n	8012d42 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012d6c:	79fb      	ldrb	r3, [r7, #7]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	71fb      	strb	r3, [r7, #7]
 8012d72:	79fb      	ldrb	r3, [r7, #7]
 8012d74:	2b03      	cmp	r3, #3
 8012d76:	d9dd      	bls.n	8012d34 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012d78:	4b03      	ldr	r3, [pc, #12]	; (8012d88 <tcp_new_port+0x84>)
 8012d7a:	881b      	ldrh	r3, [r3, #0]
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr
 8012d88:	20000054 	.word	0x20000054
 8012d8c:	08026760 	.word	0x08026760

08012d90 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b08a      	sub	sp, #40	; 0x28
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	603b      	str	r3, [r7, #0]
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012da0:	2300      	movs	r3, #0
 8012da2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d109      	bne.n	8012dbe <tcp_connect+0x2e>
 8012daa:	4b7d      	ldr	r3, [pc, #500]	; (8012fa0 <tcp_connect+0x210>)
 8012dac:	f240 4235 	movw	r2, #1077	; 0x435
 8012db0:	497c      	ldr	r1, [pc, #496]	; (8012fa4 <tcp_connect+0x214>)
 8012db2:	487d      	ldr	r0, [pc, #500]	; (8012fa8 <tcp_connect+0x218>)
 8012db4:	f00b feba 	bl	801eb2c <iprintf>
 8012db8:	f06f 030f 	mvn.w	r3, #15
 8012dbc:	e0ec      	b.n	8012f98 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d109      	bne.n	8012dd8 <tcp_connect+0x48>
 8012dc4:	4b76      	ldr	r3, [pc, #472]	; (8012fa0 <tcp_connect+0x210>)
 8012dc6:	f240 4236 	movw	r2, #1078	; 0x436
 8012dca:	4978      	ldr	r1, [pc, #480]	; (8012fac <tcp_connect+0x21c>)
 8012dcc:	4876      	ldr	r0, [pc, #472]	; (8012fa8 <tcp_connect+0x218>)
 8012dce:	f00b fead 	bl	801eb2c <iprintf>
 8012dd2:	f06f 030f 	mvn.w	r3, #15
 8012dd6:	e0df      	b.n	8012f98 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	7d1b      	ldrb	r3, [r3, #20]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d009      	beq.n	8012df4 <tcp_connect+0x64>
 8012de0:	4b6f      	ldr	r3, [pc, #444]	; (8012fa0 <tcp_connect+0x210>)
 8012de2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8012de6:	4972      	ldr	r1, [pc, #456]	; (8012fb0 <tcp_connect+0x220>)
 8012de8:	486f      	ldr	r0, [pc, #444]	; (8012fa8 <tcp_connect+0x218>)
 8012dea:	f00b fe9f 	bl	801eb2c <iprintf>
 8012dee:	f06f 0309 	mvn.w	r3, #9
 8012df2:	e0d1      	b.n	8012f98 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d002      	beq.n	8012e00 <tcp_connect+0x70>
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	e000      	b.n	8012e02 <tcp_connect+0x72>
 8012e00:	2300      	movs	r3, #0
 8012e02:	68fa      	ldr	r2, [r7, #12]
 8012e04:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	88fa      	ldrh	r2, [r7, #6]
 8012e0a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	7a1b      	ldrb	r3, [r3, #8]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d006      	beq.n	8012e22 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	7a1b      	ldrb	r3, [r3, #8]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fe fa1f 	bl	801125c <netif_get_by_index>
 8012e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8012e20:	e005      	b.n	8012e2e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	3304      	adds	r3, #4
 8012e26:	4618      	mov	r0, r3
 8012e28:	f009 fb00 	bl	801c42c <ip4_route>
 8012e2c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d102      	bne.n	8012e3a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012e34:	f06f 0303 	mvn.w	r3, #3
 8012e38:	e0ae      	b.n	8012f98 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d003      	beq.n	8012e48 <tcp_connect+0xb8>
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d111      	bne.n	8012e6c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8012e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d002      	beq.n	8012e54 <tcp_connect+0xc4>
 8012e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e50:	3304      	adds	r3, #4
 8012e52:	e000      	b.n	8012e56 <tcp_connect+0xc6>
 8012e54:	2300      	movs	r3, #0
 8012e56:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d102      	bne.n	8012e64 <tcp_connect+0xd4>
      return ERR_RTE;
 8012e5e:	f06f 0303 	mvn.w	r3, #3
 8012e62:	e099      	b.n	8012f98 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012e64:	69fb      	ldr	r3, [r7, #28]
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	8adb      	ldrh	r3, [r3, #22]
 8012e70:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	8adb      	ldrh	r3, [r3, #22]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d10c      	bne.n	8012e94 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8012e7a:	f7ff ff43 	bl	8012d04 <tcp_new_port>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	461a      	mov	r2, r3
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	8adb      	ldrh	r3, [r3, #22]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d102      	bne.n	8012e94 <tcp_connect+0x104>
      return ERR_BUF;
 8012e8e:	f06f 0301 	mvn.w	r3, #1
 8012e92:	e081      	b.n	8012f98 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012e94:	68f8      	ldr	r0, [r7, #12]
 8012e96:	f001 f867 	bl	8013f68 <tcp_next_iss>
 8012e9a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	697a      	ldr	r2, [r7, #20]
 8012ea6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	1e5a      	subs	r2, r3, #1
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	1e5a      	subs	r2, r3, #1
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	1e5a      	subs	r2, r3, #1
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012ede:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012ee8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	3304      	adds	r3, #4
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ef6:	f001 f85d 	bl	8013fb4 <tcp_eff_send_mss_netif>
 8012efa:	4603      	mov	r3, r0
 8012efc:	461a      	mov	r2, r3
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2201      	movs	r2, #1
 8012f06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	683a      	ldr	r2, [r7, #0]
 8012f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012f12:	2102      	movs	r1, #2
 8012f14:	68f8      	ldr	r0, [r7, #12]
 8012f16:	f004 fb1d 	bl	8017554 <tcp_enqueue_flags>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012f1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d136      	bne.n	8012f94 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2202      	movs	r2, #2
 8012f2a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012f2c:	8b7b      	ldrh	r3, [r7, #26]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d021      	beq.n	8012f76 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012f32:	4b20      	ldr	r3, [pc, #128]	; (8012fb4 <tcp_connect+0x224>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	68fa      	ldr	r2, [r7, #12]
 8012f38:	429a      	cmp	r2, r3
 8012f3a:	d105      	bne.n	8012f48 <tcp_connect+0x1b8>
 8012f3c:	4b1d      	ldr	r3, [pc, #116]	; (8012fb4 <tcp_connect+0x224>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	68db      	ldr	r3, [r3, #12]
 8012f42:	4a1c      	ldr	r2, [pc, #112]	; (8012fb4 <tcp_connect+0x224>)
 8012f44:	6013      	str	r3, [r2, #0]
 8012f46:	e013      	b.n	8012f70 <tcp_connect+0x1e0>
 8012f48:	4b1a      	ldr	r3, [pc, #104]	; (8012fb4 <tcp_connect+0x224>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	623b      	str	r3, [r7, #32]
 8012f4e:	e00c      	b.n	8012f6a <tcp_connect+0x1da>
 8012f50:	6a3b      	ldr	r3, [r7, #32]
 8012f52:	68db      	ldr	r3, [r3, #12]
 8012f54:	68fa      	ldr	r2, [r7, #12]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d104      	bne.n	8012f64 <tcp_connect+0x1d4>
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	68da      	ldr	r2, [r3, #12]
 8012f5e:	6a3b      	ldr	r3, [r7, #32]
 8012f60:	60da      	str	r2, [r3, #12]
 8012f62:	e005      	b.n	8012f70 <tcp_connect+0x1e0>
 8012f64:	6a3b      	ldr	r3, [r7, #32]
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	623b      	str	r3, [r7, #32]
 8012f6a:	6a3b      	ldr	r3, [r7, #32]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1ef      	bne.n	8012f50 <tcp_connect+0x1c0>
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2200      	movs	r2, #0
 8012f74:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8012f76:	4b10      	ldr	r3, [pc, #64]	; (8012fb8 <tcp_connect+0x228>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	60da      	str	r2, [r3, #12]
 8012f7e:	4a0e      	ldr	r2, [pc, #56]	; (8012fb8 <tcp_connect+0x228>)
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	6013      	str	r3, [r2, #0]
 8012f84:	f005 fb56 	bl	8018634 <tcp_timer_needed>
 8012f88:	4b0c      	ldr	r3, [pc, #48]	; (8012fbc <tcp_connect+0x22c>)
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012f8e:	68f8      	ldr	r0, [r7, #12]
 8012f90:	f004 fbce 	bl	8017730 <tcp_output>
  }
  return ret;
 8012f94:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3728      	adds	r7, #40	; 0x28
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}
 8012fa0:	0802419c 	.word	0x0802419c
 8012fa4:	08024478 	.word	0x08024478
 8012fa8:	080241e0 	.word	0x080241e0
 8012fac:	08024494 	.word	0x08024494
 8012fb0:	080244b0 	.word	0x080244b0
 8012fb4:	2001b0d4 	.word	0x2001b0d4
 8012fb8:	2001b0c8 	.word	0x2001b0c8
 8012fbc:	2001b0c4 	.word	0x2001b0c4

08012fc0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012fc0:	b5b0      	push	{r4, r5, r7, lr}
 8012fc2:	b090      	sub	sp, #64	; 0x40
 8012fc4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012fcc:	4b94      	ldr	r3, [pc, #592]	; (8013220 <tcp_slowtmr+0x260>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	4a93      	ldr	r2, [pc, #588]	; (8013220 <tcp_slowtmr+0x260>)
 8012fd4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012fd6:	4b93      	ldr	r3, [pc, #588]	; (8013224 <tcp_slowtmr+0x264>)
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	3301      	adds	r3, #1
 8012fdc:	b2da      	uxtb	r2, r3
 8012fde:	4b91      	ldr	r3, [pc, #580]	; (8013224 <tcp_slowtmr+0x264>)
 8012fe0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012fe6:	4b90      	ldr	r3, [pc, #576]	; (8013228 <tcp_slowtmr+0x268>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012fec:	e29f      	b.n	801352e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff0:	7d1b      	ldrb	r3, [r3, #20]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d106      	bne.n	8013004 <tcp_slowtmr+0x44>
 8012ff6:	4b8d      	ldr	r3, [pc, #564]	; (801322c <tcp_slowtmr+0x26c>)
 8012ff8:	f240 42be 	movw	r2, #1214	; 0x4be
 8012ffc:	498c      	ldr	r1, [pc, #560]	; (8013230 <tcp_slowtmr+0x270>)
 8012ffe:	488d      	ldr	r0, [pc, #564]	; (8013234 <tcp_slowtmr+0x274>)
 8013000:	f00b fd94 	bl	801eb2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013006:	7d1b      	ldrb	r3, [r3, #20]
 8013008:	2b01      	cmp	r3, #1
 801300a:	d106      	bne.n	801301a <tcp_slowtmr+0x5a>
 801300c:	4b87      	ldr	r3, [pc, #540]	; (801322c <tcp_slowtmr+0x26c>)
 801300e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013012:	4989      	ldr	r1, [pc, #548]	; (8013238 <tcp_slowtmr+0x278>)
 8013014:	4887      	ldr	r0, [pc, #540]	; (8013234 <tcp_slowtmr+0x274>)
 8013016:	f00b fd89 	bl	801eb2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301c:	7d1b      	ldrb	r3, [r3, #20]
 801301e:	2b0a      	cmp	r3, #10
 8013020:	d106      	bne.n	8013030 <tcp_slowtmr+0x70>
 8013022:	4b82      	ldr	r3, [pc, #520]	; (801322c <tcp_slowtmr+0x26c>)
 8013024:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013028:	4984      	ldr	r1, [pc, #528]	; (801323c <tcp_slowtmr+0x27c>)
 801302a:	4882      	ldr	r0, [pc, #520]	; (8013234 <tcp_slowtmr+0x274>)
 801302c:	f00b fd7e 	bl	801eb2c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013032:	7f9a      	ldrb	r2, [r3, #30]
 8013034:	4b7b      	ldr	r3, [pc, #492]	; (8013224 <tcp_slowtmr+0x264>)
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	429a      	cmp	r2, r3
 801303a:	d105      	bne.n	8013048 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801303e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013042:	68db      	ldr	r3, [r3, #12]
 8013044:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013046:	e272      	b.n	801352e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013048:	4b76      	ldr	r3, [pc, #472]	; (8013224 <tcp_slowtmr+0x264>)
 801304a:	781a      	ldrb	r2, [r3, #0]
 801304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801304e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013050:	2300      	movs	r3, #0
 8013052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013056:	2300      	movs	r3, #0
 8013058:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305e:	7d1b      	ldrb	r3, [r3, #20]
 8013060:	2b02      	cmp	r3, #2
 8013062:	d10a      	bne.n	801307a <tcp_slowtmr+0xba>
 8013064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801306a:	2b05      	cmp	r3, #5
 801306c:	d905      	bls.n	801307a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801306e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013072:	3301      	adds	r3, #1
 8013074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8013078:	e11e      	b.n	80132b8 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013080:	2b0b      	cmp	r3, #11
 8013082:	d905      	bls.n	8013090 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013088:	3301      	adds	r3, #1
 801308a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801308e:	e113      	b.n	80132b8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013092:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013096:	2b00      	cmp	r3, #0
 8013098:	d075      	beq.n	8013186 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d006      	beq.n	80130b0 <tcp_slowtmr+0xf0>
 80130a2:	4b62      	ldr	r3, [pc, #392]	; (801322c <tcp_slowtmr+0x26c>)
 80130a4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80130a8:	4965      	ldr	r1, [pc, #404]	; (8013240 <tcp_slowtmr+0x280>)
 80130aa:	4862      	ldr	r0, [pc, #392]	; (8013234 <tcp_slowtmr+0x274>)
 80130ac:	f00b fd3e 	bl	801eb2c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80130b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d106      	bne.n	80130c6 <tcp_slowtmr+0x106>
 80130b8:	4b5c      	ldr	r3, [pc, #368]	; (801322c <tcp_slowtmr+0x26c>)
 80130ba:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80130be:	4961      	ldr	r1, [pc, #388]	; (8013244 <tcp_slowtmr+0x284>)
 80130c0:	485c      	ldr	r0, [pc, #368]	; (8013234 <tcp_slowtmr+0x274>)
 80130c2:	f00b fd33 	bl	801eb2c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80130c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80130cc:	2b0b      	cmp	r3, #11
 80130ce:	d905      	bls.n	80130dc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80130d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130d4:	3301      	adds	r3, #1
 80130d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80130da:	e0ed      	b.n	80132b8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80130dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80130e2:	3b01      	subs	r3, #1
 80130e4:	4a58      	ldr	r2, [pc, #352]	; (8013248 <tcp_slowtmr+0x288>)
 80130e6:	5cd3      	ldrb	r3, [r2, r3]
 80130e8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80130ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80130f0:	7c7a      	ldrb	r2, [r7, #17]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d907      	bls.n	8013106 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80130f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80130fc:	3301      	adds	r3, #1
 80130fe:	b2da      	uxtb	r2, r3
 8013100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013102:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013108:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801310c:	7c7a      	ldrb	r2, [r7, #17]
 801310e:	429a      	cmp	r2, r3
 8013110:	f200 80d2 	bhi.w	80132b8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013114:	2301      	movs	r3, #1
 8013116:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801311e:	2b00      	cmp	r3, #0
 8013120:	d108      	bne.n	8013134 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013124:	f005 f9b8 	bl	8018498 <tcp_zero_window_probe>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d014      	beq.n	8013158 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801312e:	2300      	movs	r3, #0
 8013130:	623b      	str	r3, [r7, #32]
 8013132:	e011      	b.n	8013158 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801313a:	4619      	mov	r1, r3
 801313c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801313e:	f004 f86d 	bl	801721c <tcp_split_unsent_seg>
 8013142:	4603      	mov	r3, r0
 8013144:	2b00      	cmp	r3, #0
 8013146:	d107      	bne.n	8013158 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801314a:	f004 faf1 	bl	8017730 <tcp_output>
 801314e:	4603      	mov	r3, r0
 8013150:	2b00      	cmp	r3, #0
 8013152:	d101      	bne.n	8013158 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013154:	2300      	movs	r3, #0
 8013156:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013158:	6a3b      	ldr	r3, [r7, #32]
 801315a:	2b00      	cmp	r3, #0
 801315c:	f000 80ac 	beq.w	80132b8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013162:	2200      	movs	r2, #0
 8013164:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801316e:	2b06      	cmp	r3, #6
 8013170:	f200 80a2 	bhi.w	80132b8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013176:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801317a:	3301      	adds	r3, #1
 801317c:	b2da      	uxtb	r2, r3
 801317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013180:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013184:	e098      	b.n	80132b8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013188:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801318c:	2b00      	cmp	r3, #0
 801318e:	db0f      	blt.n	80131b0 <tcp_slowtmr+0x1f0>
 8013190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013192:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013196:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801319a:	4293      	cmp	r3, r2
 801319c:	d008      	beq.n	80131b0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	3301      	adds	r3, #1
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	b21a      	sxth	r2, r3
 80131ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ae:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80131b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80131b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80131bc:	429a      	cmp	r2, r3
 80131be:	db7b      	blt.n	80132b8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80131c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80131c2:	f004 fda9 	bl	8017d18 <tcp_rexmit_rto_prepare>
 80131c6:	4603      	mov	r3, r0
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d007      	beq.n	80131dc <tcp_slowtmr+0x21c>
 80131cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d171      	bne.n	80132b8 <tcp_slowtmr+0x2f8>
 80131d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d06d      	beq.n	80132b8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80131dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131de:	7d1b      	ldrb	r3, [r3, #20]
 80131e0:	2b02      	cmp	r3, #2
 80131e2:	d03a      	beq.n	801325a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80131e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80131ea:	2b0c      	cmp	r3, #12
 80131ec:	bf28      	it	cs
 80131ee:	230c      	movcs	r3, #12
 80131f0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80131f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80131f8:	10db      	asrs	r3, r3, #3
 80131fa:	b21b      	sxth	r3, r3
 80131fc:	461a      	mov	r2, r3
 80131fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013200:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013204:	4413      	add	r3, r2
 8013206:	7efa      	ldrb	r2, [r7, #27]
 8013208:	4910      	ldr	r1, [pc, #64]	; (801324c <tcp_slowtmr+0x28c>)
 801320a:	5c8a      	ldrb	r2, [r1, r2]
 801320c:	4093      	lsls	r3, r2
 801320e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013216:	4293      	cmp	r3, r2
 8013218:	dc1a      	bgt.n	8013250 <tcp_slowtmr+0x290>
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	b21a      	sxth	r2, r3
 801321e:	e019      	b.n	8013254 <tcp_slowtmr+0x294>
 8013220:	2001b0cc 	.word	0x2001b0cc
 8013224:	2001435a 	.word	0x2001435a
 8013228:	2001b0c8 	.word	0x2001b0c8
 801322c:	0802419c 	.word	0x0802419c
 8013230:	080244e0 	.word	0x080244e0
 8013234:	080241e0 	.word	0x080241e0
 8013238:	0802450c 	.word	0x0802450c
 801323c:	08024538 	.word	0x08024538
 8013240:	08024568 	.word	0x08024568
 8013244:	0802459c 	.word	0x0802459c
 8013248:	08026758 	.word	0x08026758
 801324c:	08026748 	.word	0x08026748
 8013250:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013256:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801325c:	2200      	movs	r2, #0
 801325e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013262:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013268:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801326c:	4293      	cmp	r3, r2
 801326e:	bf28      	it	cs
 8013270:	4613      	movcs	r3, r2
 8013272:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013274:	8a7b      	ldrh	r3, [r7, #18]
 8013276:	085b      	lsrs	r3, r3, #1
 8013278:	b29a      	uxth	r2, r3
 801327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013282:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801328a:	005b      	lsls	r3, r3, #1
 801328c:	b29b      	uxth	r3, r3
 801328e:	429a      	cmp	r2, r3
 8013290:	d206      	bcs.n	80132a0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013296:	005b      	lsls	r3, r3, #1
 8013298:	b29a      	uxth	r2, r3
 801329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80132a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80132a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80132aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ac:	2200      	movs	r2, #0
 80132ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80132b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132b4:	f004 fdaa 	bl	8017e0c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80132b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ba:	7d1b      	ldrb	r3, [r3, #20]
 80132bc:	2b06      	cmp	r3, #6
 80132be:	d111      	bne.n	80132e4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80132c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c2:	8b5b      	ldrh	r3, [r3, #26]
 80132c4:	f003 0310 	and.w	r3, r3, #16
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00b      	beq.n	80132e4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80132cc:	4b9d      	ldr	r3, [pc, #628]	; (8013544 <tcp_slowtmr+0x584>)
 80132ce:	681a      	ldr	r2, [r3, #0]
 80132d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d2:	6a1b      	ldr	r3, [r3, #32]
 80132d4:	1ad3      	subs	r3, r2, r3
 80132d6:	2b28      	cmp	r3, #40	; 0x28
 80132d8:	d904      	bls.n	80132e4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80132da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132de:	3301      	adds	r3, #1
 80132e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80132e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e6:	7a5b      	ldrb	r3, [r3, #9]
 80132e8:	f003 0308 	and.w	r3, r3, #8
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d04c      	beq.n	801338a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80132f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80132f4:	2b04      	cmp	r3, #4
 80132f6:	d003      	beq.n	8013300 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80132f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80132fc:	2b07      	cmp	r3, #7
 80132fe:	d144      	bne.n	801338a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013300:	4b90      	ldr	r3, [pc, #576]	; (8013544 <tcp_slowtmr+0x584>)
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013306:	6a1b      	ldr	r3, [r3, #32]
 8013308:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801330c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013310:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8013314:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8013318:	498b      	ldr	r1, [pc, #556]	; (8013548 <tcp_slowtmr+0x588>)
 801331a:	fba1 1303 	umull	r1, r3, r1, r3
 801331e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013320:	429a      	cmp	r2, r3
 8013322:	d90a      	bls.n	801333a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013328:	3301      	adds	r3, #1
 801332a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801332e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013332:	3301      	adds	r3, #1
 8013334:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013338:	e027      	b.n	801338a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801333a:	4b82      	ldr	r3, [pc, #520]	; (8013544 <tcp_slowtmr+0x584>)
 801333c:	681a      	ldr	r2, [r3, #0]
 801333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013340:	6a1b      	ldr	r3, [r3, #32]
 8013342:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013346:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801334c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013350:	4618      	mov	r0, r3
 8013352:	4b7e      	ldr	r3, [pc, #504]	; (801354c <tcp_slowtmr+0x58c>)
 8013354:	fb03 f300 	mul.w	r3, r3, r0
 8013358:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801335a:	497b      	ldr	r1, [pc, #492]	; (8013548 <tcp_slowtmr+0x588>)
 801335c:	fba1 1303 	umull	r1, r3, r1, r3
 8013360:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013362:	429a      	cmp	r2, r3
 8013364:	d911      	bls.n	801338a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013368:	f005 f856 	bl	8018418 <tcp_keepalive>
 801336c:	4603      	mov	r3, r0
 801336e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8013372:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013376:	2b00      	cmp	r3, #0
 8013378:	d107      	bne.n	801338a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013380:	3301      	adds	r3, #1
 8013382:	b2da      	uxtb	r2, r3
 8013384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013386:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801338c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801338e:	2b00      	cmp	r3, #0
 8013390:	d011      	beq.n	80133b6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013392:	4b6c      	ldr	r3, [pc, #432]	; (8013544 <tcp_slowtmr+0x584>)
 8013394:	681a      	ldr	r2, [r3, #0]
 8013396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013398:	6a1b      	ldr	r3, [r3, #32]
 801339a:	1ad2      	subs	r2, r2, r3
 801339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80133a2:	4619      	mov	r1, r3
 80133a4:	460b      	mov	r3, r1
 80133a6:	005b      	lsls	r3, r3, #1
 80133a8:	440b      	add	r3, r1
 80133aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d302      	bcc.n	80133b6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80133b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80133b2:	f000 fea9 	bl	8014108 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80133b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b8:	7d1b      	ldrb	r3, [r3, #20]
 80133ba:	2b03      	cmp	r3, #3
 80133bc:	d10b      	bne.n	80133d6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80133be:	4b61      	ldr	r3, [pc, #388]	; (8013544 <tcp_slowtmr+0x584>)
 80133c0:	681a      	ldr	r2, [r3, #0]
 80133c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c4:	6a1b      	ldr	r3, [r3, #32]
 80133c6:	1ad3      	subs	r3, r2, r3
 80133c8:	2b28      	cmp	r3, #40	; 0x28
 80133ca:	d904      	bls.n	80133d6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80133cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133d0:	3301      	adds	r3, #1
 80133d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80133d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d8:	7d1b      	ldrb	r3, [r3, #20]
 80133da:	2b09      	cmp	r3, #9
 80133dc:	d10b      	bne.n	80133f6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80133de:	4b59      	ldr	r3, [pc, #356]	; (8013544 <tcp_slowtmr+0x584>)
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e4:	6a1b      	ldr	r3, [r3, #32]
 80133e6:	1ad3      	subs	r3, r2, r3
 80133e8:	2bf0      	cmp	r3, #240	; 0xf0
 80133ea:	d904      	bls.n	80133f6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80133ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133f0:	3301      	adds	r3, #1
 80133f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80133f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d060      	beq.n	80134c0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80133fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013404:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013408:	f000 fcca 	bl	8013da0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801340e:	2b00      	cmp	r3, #0
 8013410:	d010      	beq.n	8013434 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013412:	4b4f      	ldr	r3, [pc, #316]	; (8013550 <tcp_slowtmr+0x590>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013418:	429a      	cmp	r2, r3
 801341a:	d106      	bne.n	801342a <tcp_slowtmr+0x46a>
 801341c:	4b4d      	ldr	r3, [pc, #308]	; (8013554 <tcp_slowtmr+0x594>)
 801341e:	f240 526d 	movw	r2, #1389	; 0x56d
 8013422:	494d      	ldr	r1, [pc, #308]	; (8013558 <tcp_slowtmr+0x598>)
 8013424:	484d      	ldr	r0, [pc, #308]	; (801355c <tcp_slowtmr+0x59c>)
 8013426:	f00b fb81 	bl	801eb2c <iprintf>
        prev->next = pcb->next;
 801342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342c:	68da      	ldr	r2, [r3, #12]
 801342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013430:	60da      	str	r2, [r3, #12]
 8013432:	e00f      	b.n	8013454 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013434:	4b46      	ldr	r3, [pc, #280]	; (8013550 <tcp_slowtmr+0x590>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801343a:	429a      	cmp	r2, r3
 801343c:	d006      	beq.n	801344c <tcp_slowtmr+0x48c>
 801343e:	4b45      	ldr	r3, [pc, #276]	; (8013554 <tcp_slowtmr+0x594>)
 8013440:	f240 5271 	movw	r2, #1393	; 0x571
 8013444:	4946      	ldr	r1, [pc, #280]	; (8013560 <tcp_slowtmr+0x5a0>)
 8013446:	4845      	ldr	r0, [pc, #276]	; (801355c <tcp_slowtmr+0x59c>)
 8013448:	f00b fb70 	bl	801eb2c <iprintf>
        tcp_active_pcbs = pcb->next;
 801344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	4a3f      	ldr	r2, [pc, #252]	; (8013550 <tcp_slowtmr+0x590>)
 8013452:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013458:	2b00      	cmp	r3, #0
 801345a:	d013      	beq.n	8013484 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801345e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013462:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013464:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013468:	3304      	adds	r3, #4
 801346a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801346c:	8ad2      	ldrh	r2, [r2, #22]
 801346e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013470:	8b09      	ldrh	r1, [r1, #24]
 8013472:	9102      	str	r1, [sp, #8]
 8013474:	9201      	str	r2, [sp, #4]
 8013476:	9300      	str	r3, [sp, #0]
 8013478:	462b      	mov	r3, r5
 801347a:	4622      	mov	r2, r4
 801347c:	4601      	mov	r1, r0
 801347e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013480:	f004 ff16 	bl	80182b0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013486:	691b      	ldr	r3, [r3, #16]
 8013488:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801348c:	7d1b      	ldrb	r3, [r3, #20]
 801348e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013492:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801349a:	6838      	ldr	r0, [r7, #0]
 801349c:	f7fe fed6 	bl	801224c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80134a0:	4b30      	ldr	r3, [pc, #192]	; (8013564 <tcp_slowtmr+0x5a4>)
 80134a2:	2200      	movs	r2, #0
 80134a4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d004      	beq.n	80134b6 <tcp_slowtmr+0x4f6>
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f06f 010c 	mvn.w	r1, #12
 80134b2:	68b8      	ldr	r0, [r7, #8]
 80134b4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80134b6:	4b2b      	ldr	r3, [pc, #172]	; (8013564 <tcp_slowtmr+0x5a4>)
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d037      	beq.n	801352e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80134be:	e590      	b.n	8012fe2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80134c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80134c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c6:	68db      	ldr	r3, [r3, #12]
 80134c8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80134ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134cc:	7f1b      	ldrb	r3, [r3, #28]
 80134ce:	3301      	adds	r3, #1
 80134d0:	b2da      	uxtb	r2, r3
 80134d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80134d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d8:	7f1a      	ldrb	r2, [r3, #28]
 80134da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134dc:	7f5b      	ldrb	r3, [r3, #29]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d325      	bcc.n	801352e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80134e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e4:	2200      	movs	r2, #0
 80134e6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80134e8:	4b1e      	ldr	r3, [pc, #120]	; (8013564 <tcp_slowtmr+0x5a4>)
 80134ea:	2200      	movs	r2, #0
 80134ec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80134ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d00b      	beq.n	8013510 <tcp_slowtmr+0x550>
 80134f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80134fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013500:	6912      	ldr	r2, [r2, #16]
 8013502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013504:	4610      	mov	r0, r2
 8013506:	4798      	blx	r3
 8013508:	4603      	mov	r3, r0
 801350a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801350e:	e002      	b.n	8013516 <tcp_slowtmr+0x556>
 8013510:	2300      	movs	r3, #0
 8013512:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013516:	4b13      	ldr	r3, [pc, #76]	; (8013564 <tcp_slowtmr+0x5a4>)
 8013518:	781b      	ldrb	r3, [r3, #0]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d000      	beq.n	8013520 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801351e:	e560      	b.n	8012fe2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013520:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013524:	2b00      	cmp	r3, #0
 8013526:	d102      	bne.n	801352e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801352a:	f004 f901 	bl	8017730 <tcp_output>
  while (pcb != NULL) {
 801352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013530:	2b00      	cmp	r3, #0
 8013532:	f47f ad5c 	bne.w	8012fee <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013536:	2300      	movs	r3, #0
 8013538:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801353a:	4b0b      	ldr	r3, [pc, #44]	; (8013568 <tcp_slowtmr+0x5a8>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013540:	e067      	b.n	8013612 <tcp_slowtmr+0x652>
 8013542:	bf00      	nop
 8013544:	2001b0cc 	.word	0x2001b0cc
 8013548:	10624dd3 	.word	0x10624dd3
 801354c:	000124f8 	.word	0x000124f8
 8013550:	2001b0c8 	.word	0x2001b0c8
 8013554:	0802419c 	.word	0x0802419c
 8013558:	080245d4 	.word	0x080245d4
 801355c:	080241e0 	.word	0x080241e0
 8013560:	08024600 	.word	0x08024600
 8013564:	2001b0c4 	.word	0x2001b0c4
 8013568:	2001b0d8 	.word	0x2001b0d8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356e:	7d1b      	ldrb	r3, [r3, #20]
 8013570:	2b0a      	cmp	r3, #10
 8013572:	d006      	beq.n	8013582 <tcp_slowtmr+0x5c2>
 8013574:	4b2b      	ldr	r3, [pc, #172]	; (8013624 <tcp_slowtmr+0x664>)
 8013576:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801357a:	492b      	ldr	r1, [pc, #172]	; (8013628 <tcp_slowtmr+0x668>)
 801357c:	482b      	ldr	r0, [pc, #172]	; (801362c <tcp_slowtmr+0x66c>)
 801357e:	f00b fad5 	bl	801eb2c <iprintf>
    pcb_remove = 0;
 8013582:	2300      	movs	r3, #0
 8013584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013588:	4b29      	ldr	r3, [pc, #164]	; (8013630 <tcp_slowtmr+0x670>)
 801358a:	681a      	ldr	r2, [r3, #0]
 801358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358e:	6a1b      	ldr	r3, [r3, #32]
 8013590:	1ad3      	subs	r3, r2, r3
 8013592:	2bf0      	cmp	r3, #240	; 0xf0
 8013594:	d904      	bls.n	80135a0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8013596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801359a:	3301      	adds	r3, #1
 801359c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80135a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d02f      	beq.n	8013608 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80135a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135aa:	f000 fbf9 	bl	8013da0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80135ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d010      	beq.n	80135d6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80135b4:	4b1f      	ldr	r3, [pc, #124]	; (8013634 <tcp_slowtmr+0x674>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d106      	bne.n	80135cc <tcp_slowtmr+0x60c>
 80135be:	4b19      	ldr	r3, [pc, #100]	; (8013624 <tcp_slowtmr+0x664>)
 80135c0:	f240 52af 	movw	r2, #1455	; 0x5af
 80135c4:	491c      	ldr	r1, [pc, #112]	; (8013638 <tcp_slowtmr+0x678>)
 80135c6:	4819      	ldr	r0, [pc, #100]	; (801362c <tcp_slowtmr+0x66c>)
 80135c8:	f00b fab0 	bl	801eb2c <iprintf>
        prev->next = pcb->next;
 80135cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ce:	68da      	ldr	r2, [r3, #12]
 80135d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d2:	60da      	str	r2, [r3, #12]
 80135d4:	e00f      	b.n	80135f6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80135d6:	4b17      	ldr	r3, [pc, #92]	; (8013634 <tcp_slowtmr+0x674>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135dc:	429a      	cmp	r2, r3
 80135de:	d006      	beq.n	80135ee <tcp_slowtmr+0x62e>
 80135e0:	4b10      	ldr	r3, [pc, #64]	; (8013624 <tcp_slowtmr+0x664>)
 80135e2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80135e6:	4915      	ldr	r1, [pc, #84]	; (801363c <tcp_slowtmr+0x67c>)
 80135e8:	4810      	ldr	r0, [pc, #64]	; (801362c <tcp_slowtmr+0x66c>)
 80135ea:	f00b fa9f 	bl	801eb2c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80135ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	4a10      	ldr	r2, [pc, #64]	; (8013634 <tcp_slowtmr+0x674>)
 80135f4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80135f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80135fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fc:	68db      	ldr	r3, [r3, #12]
 80135fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013600:	69f8      	ldr	r0, [r7, #28]
 8013602:	f7fe fe23 	bl	801224c <tcp_free>
 8013606:	e004      	b.n	8013612 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360e:	68db      	ldr	r3, [r3, #12]
 8013610:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013614:	2b00      	cmp	r3, #0
 8013616:	d1a9      	bne.n	801356c <tcp_slowtmr+0x5ac>
    }
  }
}
 8013618:	bf00      	nop
 801361a:	bf00      	nop
 801361c:	3730      	adds	r7, #48	; 0x30
 801361e:	46bd      	mov	sp, r7
 8013620:	bdb0      	pop	{r4, r5, r7, pc}
 8013622:	bf00      	nop
 8013624:	0802419c 	.word	0x0802419c
 8013628:	0802462c 	.word	0x0802462c
 801362c:	080241e0 	.word	0x080241e0
 8013630:	2001b0cc 	.word	0x2001b0cc
 8013634:	2001b0d8 	.word	0x2001b0d8
 8013638:	0802465c 	.word	0x0802465c
 801363c:	08024684 	.word	0x08024684

08013640 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b082      	sub	sp, #8
 8013644:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013646:	4b2d      	ldr	r3, [pc, #180]	; (80136fc <tcp_fasttmr+0xbc>)
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	3301      	adds	r3, #1
 801364c:	b2da      	uxtb	r2, r3
 801364e:	4b2b      	ldr	r3, [pc, #172]	; (80136fc <tcp_fasttmr+0xbc>)
 8013650:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013652:	4b2b      	ldr	r3, [pc, #172]	; (8013700 <tcp_fasttmr+0xc0>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013658:	e048      	b.n	80136ec <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	7f9a      	ldrb	r2, [r3, #30]
 801365e:	4b27      	ldr	r3, [pc, #156]	; (80136fc <tcp_fasttmr+0xbc>)
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	429a      	cmp	r2, r3
 8013664:	d03f      	beq.n	80136e6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013666:	4b25      	ldr	r3, [pc, #148]	; (80136fc <tcp_fasttmr+0xbc>)
 8013668:	781a      	ldrb	r2, [r3, #0]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	8b5b      	ldrh	r3, [r3, #26]
 8013672:	f003 0301 	and.w	r3, r3, #1
 8013676:	2b00      	cmp	r3, #0
 8013678:	d010      	beq.n	801369c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	8b5b      	ldrh	r3, [r3, #26]
 801367e:	f043 0302 	orr.w	r3, r3, #2
 8013682:	b29a      	uxth	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f004 f851 	bl	8017730 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	8b5b      	ldrh	r3, [r3, #26]
 8013692:	f023 0303 	bic.w	r3, r3, #3
 8013696:	b29a      	uxth	r2, r3
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	8b5b      	ldrh	r3, [r3, #26]
 80136a0:	f003 0308 	and.w	r3, r3, #8
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d009      	beq.n	80136bc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	8b5b      	ldrh	r3, [r3, #26]
 80136ac:	f023 0308 	bic.w	r3, r3, #8
 80136b0:	b29a      	uxth	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f7fe ff5c 	bl	8012574 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	68db      	ldr	r3, [r3, #12]
 80136c0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d00a      	beq.n	80136e0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80136ca:	4b0e      	ldr	r3, [pc, #56]	; (8013704 <tcp_fasttmr+0xc4>)
 80136cc:	2200      	movs	r2, #0
 80136ce:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f000 f819 	bl	8013708 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80136d6:	4b0b      	ldr	r3, [pc, #44]	; (8013704 <tcp_fasttmr+0xc4>)
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d000      	beq.n	80136e0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80136de:	e7b8      	b.n	8013652 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	607b      	str	r3, [r7, #4]
 80136e4:	e002      	b.n	80136ec <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	68db      	ldr	r3, [r3, #12]
 80136ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d1b3      	bne.n	801365a <tcp_fasttmr+0x1a>
    }
  }
}
 80136f2:	bf00      	nop
 80136f4:	bf00      	nop
 80136f6:	3708      	adds	r7, #8
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}
 80136fc:	2001435a 	.word	0x2001435a
 8013700:	2001b0c8 	.word	0x2001b0c8
 8013704:	2001b0c4 	.word	0x2001b0c4

08013708 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013708:	b590      	push	{r4, r7, lr}
 801370a:	b085      	sub	sp, #20
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d109      	bne.n	801372a <tcp_process_refused_data+0x22>
 8013716:	4b37      	ldr	r3, [pc, #220]	; (80137f4 <tcp_process_refused_data+0xec>)
 8013718:	f240 6209 	movw	r2, #1545	; 0x609
 801371c:	4936      	ldr	r1, [pc, #216]	; (80137f8 <tcp_process_refused_data+0xf0>)
 801371e:	4837      	ldr	r0, [pc, #220]	; (80137fc <tcp_process_refused_data+0xf4>)
 8013720:	f00b fa04 	bl	801eb2c <iprintf>
 8013724:	f06f 030f 	mvn.w	r3, #15
 8013728:	e060      	b.n	80137ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801372e:	7b5b      	ldrb	r3, [r3, #13]
 8013730:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013736:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2200      	movs	r2, #0
 801373c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00b      	beq.n	8013760 <tcp_process_refused_data+0x58>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6918      	ldr	r0, [r3, #16]
 8013752:	2300      	movs	r3, #0
 8013754:	68ba      	ldr	r2, [r7, #8]
 8013756:	6879      	ldr	r1, [r7, #4]
 8013758:	47a0      	blx	r4
 801375a:	4603      	mov	r3, r0
 801375c:	73fb      	strb	r3, [r7, #15]
 801375e:	e007      	b.n	8013770 <tcp_process_refused_data+0x68>
 8013760:	2300      	movs	r3, #0
 8013762:	68ba      	ldr	r2, [r7, #8]
 8013764:	6879      	ldr	r1, [r7, #4]
 8013766:	2000      	movs	r0, #0
 8013768:	f000 f8a4 	bl	80138b4 <tcp_recv_null>
 801376c:	4603      	mov	r3, r0
 801376e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d12a      	bne.n	80137ce <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013778:	7bbb      	ldrb	r3, [r7, #14]
 801377a:	f003 0320 	and.w	r3, r3, #32
 801377e:	2b00      	cmp	r3, #0
 8013780:	d033      	beq.n	80137ea <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013786:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801378a:	d005      	beq.n	8013798 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013790:	3301      	adds	r3, #1
 8013792:	b29a      	uxth	r2, r3
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d00b      	beq.n	80137ba <tcp_process_refused_data+0xb2>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6918      	ldr	r0, [r3, #16]
 80137ac:	2300      	movs	r3, #0
 80137ae:	2200      	movs	r2, #0
 80137b0:	6879      	ldr	r1, [r7, #4]
 80137b2:	47a0      	blx	r4
 80137b4:	4603      	mov	r3, r0
 80137b6:	73fb      	strb	r3, [r7, #15]
 80137b8:	e001      	b.n	80137be <tcp_process_refused_data+0xb6>
 80137ba:	2300      	movs	r3, #0
 80137bc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80137be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137c2:	f113 0f0d 	cmn.w	r3, #13
 80137c6:	d110      	bne.n	80137ea <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80137c8:	f06f 030c 	mvn.w	r3, #12
 80137cc:	e00e      	b.n	80137ec <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80137ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137d2:	f113 0f0d 	cmn.w	r3, #13
 80137d6:	d102      	bne.n	80137de <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80137d8:	f06f 030c 	mvn.w	r3, #12
 80137dc:	e006      	b.n	80137ec <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	68ba      	ldr	r2, [r7, #8]
 80137e2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80137e4:	f06f 0304 	mvn.w	r3, #4
 80137e8:	e000      	b.n	80137ec <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80137ea:	2300      	movs	r3, #0
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3714      	adds	r7, #20
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd90      	pop	{r4, r7, pc}
 80137f4:	0802419c 	.word	0x0802419c
 80137f8:	080246ac 	.word	0x080246ac
 80137fc:	080241e0 	.word	0x080241e0

08013800 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b084      	sub	sp, #16
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013808:	e007      	b.n	801381a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f000 f80a 	bl	801382a <tcp_seg_free>
    seg = next;
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d1f4      	bne.n	801380a <tcp_segs_free+0xa>
  }
}
 8013820:	bf00      	nop
 8013822:	bf00      	nop
 8013824:	3710      	adds	r7, #16
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}

0801382a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801382a:	b580      	push	{r7, lr}
 801382c:	b082      	sub	sp, #8
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d00c      	beq.n	8013852 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d004      	beq.n	801384a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	4618      	mov	r0, r3
 8013846:	f7fe f8c9 	bl	80119dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801384a:	6879      	ldr	r1, [r7, #4]
 801384c:	2003      	movs	r0, #3
 801384e:	f7fd f9e3 	bl	8010c18 <memp_free>
  }
}
 8013852:	bf00      	nop
 8013854:	3708      	adds	r7, #8
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
	...

0801385c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d106      	bne.n	8013878 <tcp_seg_copy+0x1c>
 801386a:	4b0f      	ldr	r3, [pc, #60]	; (80138a8 <tcp_seg_copy+0x4c>)
 801386c:	f240 6282 	movw	r2, #1666	; 0x682
 8013870:	490e      	ldr	r1, [pc, #56]	; (80138ac <tcp_seg_copy+0x50>)
 8013872:	480f      	ldr	r0, [pc, #60]	; (80138b0 <tcp_seg_copy+0x54>)
 8013874:	f00b f95a 	bl	801eb2c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013878:	2003      	movs	r0, #3
 801387a:	f7fd f97b 	bl	8010b74 <memp_malloc>
 801387e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d101      	bne.n	801388a <tcp_seg_copy+0x2e>
    return NULL;
 8013886:	2300      	movs	r3, #0
 8013888:	e00a      	b.n	80138a0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801388a:	2214      	movs	r2, #20
 801388c:	6879      	ldr	r1, [r7, #4]
 801388e:	68f8      	ldr	r0, [r7, #12]
 8013890:	f00a fc08 	bl	801e0a4 <memcpy>
  pbuf_ref(cseg->p);
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	4618      	mov	r0, r3
 801389a:	f7fe f945 	bl	8011b28 <pbuf_ref>
  return cseg;
 801389e:	68fb      	ldr	r3, [r7, #12]
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3710      	adds	r7, #16
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}
 80138a8:	0802419c 	.word	0x0802419c
 80138ac:	080246f0 	.word	0x080246f0
 80138b0:	080241e0 	.word	0x080241e0

080138b4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	60f8      	str	r0, [r7, #12]
 80138bc:	60b9      	str	r1, [r7, #8]
 80138be:	607a      	str	r2, [r7, #4]
 80138c0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d109      	bne.n	80138dc <tcp_recv_null+0x28>
 80138c8:	4b12      	ldr	r3, [pc, #72]	; (8013914 <tcp_recv_null+0x60>)
 80138ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80138ce:	4912      	ldr	r1, [pc, #72]	; (8013918 <tcp_recv_null+0x64>)
 80138d0:	4812      	ldr	r0, [pc, #72]	; (801391c <tcp_recv_null+0x68>)
 80138d2:	f00b f92b 	bl	801eb2c <iprintf>
 80138d6:	f06f 030f 	mvn.w	r3, #15
 80138da:	e016      	b.n	801390a <tcp_recv_null+0x56>

  if (p != NULL) {
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d009      	beq.n	80138f6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	891b      	ldrh	r3, [r3, #8]
 80138e6:	4619      	mov	r1, r3
 80138e8:	68b8      	ldr	r0, [r7, #8]
 80138ea:	f7ff f9bb 	bl	8012c64 <tcp_recved>
    pbuf_free(p);
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f7fe f874 	bl	80119dc <pbuf_free>
 80138f4:	e008      	b.n	8013908 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80138f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d104      	bne.n	8013908 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80138fe:	68b8      	ldr	r0, [r7, #8]
 8013900:	f7fe fea2 	bl	8012648 <tcp_close>
 8013904:	4603      	mov	r3, r0
 8013906:	e000      	b.n	801390a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013908:	2300      	movs	r3, #0
}
 801390a:	4618      	mov	r0, r3
 801390c:	3710      	adds	r7, #16
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop
 8013914:	0802419c 	.word	0x0802419c
 8013918:	0802470c 	.word	0x0802470c
 801391c:	080241e0 	.word	0x080241e0

08013920 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b086      	sub	sp, #24
 8013924:	af00      	add	r7, sp, #0
 8013926:	4603      	mov	r3, r0
 8013928:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801392e:	2b00      	cmp	r3, #0
 8013930:	db01      	blt.n	8013936 <tcp_kill_prio+0x16>
 8013932:	79fb      	ldrb	r3, [r7, #7]
 8013934:	e000      	b.n	8013938 <tcp_kill_prio+0x18>
 8013936:	237f      	movs	r3, #127	; 0x7f
 8013938:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801393a:	7afb      	ldrb	r3, [r7, #11]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d034      	beq.n	80139aa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013940:	7afb      	ldrb	r3, [r7, #11]
 8013942:	3b01      	subs	r3, #1
 8013944:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013946:	2300      	movs	r3, #0
 8013948:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801394a:	2300      	movs	r3, #0
 801394c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801394e:	4b19      	ldr	r3, [pc, #100]	; (80139b4 <tcp_kill_prio+0x94>)
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	617b      	str	r3, [r7, #20]
 8013954:	e01f      	b.n	8013996 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	7d5b      	ldrb	r3, [r3, #21]
 801395a:	7afa      	ldrb	r2, [r7, #11]
 801395c:	429a      	cmp	r2, r3
 801395e:	d80c      	bhi.n	801397a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013964:	7afa      	ldrb	r2, [r7, #11]
 8013966:	429a      	cmp	r2, r3
 8013968:	d112      	bne.n	8013990 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801396a:	4b13      	ldr	r3, [pc, #76]	; (80139b8 <tcp_kill_prio+0x98>)
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	6a1b      	ldr	r3, [r3, #32]
 8013972:	1ad3      	subs	r3, r2, r3
 8013974:	68fa      	ldr	r2, [r7, #12]
 8013976:	429a      	cmp	r2, r3
 8013978:	d80a      	bhi.n	8013990 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801397a:	4b0f      	ldr	r3, [pc, #60]	; (80139b8 <tcp_kill_prio+0x98>)
 801397c:	681a      	ldr	r2, [r3, #0]
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	6a1b      	ldr	r3, [r3, #32]
 8013982:	1ad3      	subs	r3, r2, r3
 8013984:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	7d5b      	ldrb	r3, [r3, #21]
 801398e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	68db      	ldr	r3, [r3, #12]
 8013994:	617b      	str	r3, [r7, #20]
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d1dc      	bne.n	8013956 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d004      	beq.n	80139ac <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80139a2:	6938      	ldr	r0, [r7, #16]
 80139a4:	f7fe ff96 	bl	80128d4 <tcp_abort>
 80139a8:	e000      	b.n	80139ac <tcp_kill_prio+0x8c>
    return;
 80139aa:	bf00      	nop
  }
}
 80139ac:	3718      	adds	r7, #24
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	2001b0c8 	.word	0x2001b0c8
 80139b8:	2001b0cc 	.word	0x2001b0cc

080139bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b086      	sub	sp, #24
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	4603      	mov	r3, r0
 80139c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80139c6:	79fb      	ldrb	r3, [r7, #7]
 80139c8:	2b08      	cmp	r3, #8
 80139ca:	d009      	beq.n	80139e0 <tcp_kill_state+0x24>
 80139cc:	79fb      	ldrb	r3, [r7, #7]
 80139ce:	2b09      	cmp	r3, #9
 80139d0:	d006      	beq.n	80139e0 <tcp_kill_state+0x24>
 80139d2:	4b1a      	ldr	r3, [pc, #104]	; (8013a3c <tcp_kill_state+0x80>)
 80139d4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80139d8:	4919      	ldr	r1, [pc, #100]	; (8013a40 <tcp_kill_state+0x84>)
 80139da:	481a      	ldr	r0, [pc, #104]	; (8013a44 <tcp_kill_state+0x88>)
 80139dc:	f00b f8a6 	bl	801eb2c <iprintf>

  inactivity = 0;
 80139e0:	2300      	movs	r3, #0
 80139e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80139e4:	2300      	movs	r3, #0
 80139e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80139e8:	4b17      	ldr	r3, [pc, #92]	; (8013a48 <tcp_kill_state+0x8c>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	617b      	str	r3, [r7, #20]
 80139ee:	e017      	b.n	8013a20 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	7d1b      	ldrb	r3, [r3, #20]
 80139f4:	79fa      	ldrb	r2, [r7, #7]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d10f      	bne.n	8013a1a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80139fa:	4b14      	ldr	r3, [pc, #80]	; (8013a4c <tcp_kill_state+0x90>)
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	6a1b      	ldr	r3, [r3, #32]
 8013a02:	1ad3      	subs	r3, r2, r3
 8013a04:	68fa      	ldr	r2, [r7, #12]
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d807      	bhi.n	8013a1a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013a0a:	4b10      	ldr	r3, [pc, #64]	; (8013a4c <tcp_kill_state+0x90>)
 8013a0c:	681a      	ldr	r2, [r3, #0]
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	6a1b      	ldr	r3, [r3, #32]
 8013a12:	1ad3      	subs	r3, r2, r3
 8013a14:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	68db      	ldr	r3, [r3, #12]
 8013a1e:	617b      	str	r3, [r7, #20]
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d1e4      	bne.n	80139f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d003      	beq.n	8013a34 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	6938      	ldr	r0, [r7, #16]
 8013a30:	f7fe fe92 	bl	8012758 <tcp_abandon>
  }
}
 8013a34:	bf00      	nop
 8013a36:	3718      	adds	r7, #24
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	0802419c 	.word	0x0802419c
 8013a40:	08024728 	.word	0x08024728
 8013a44:	080241e0 	.word	0x080241e0
 8013a48:	2001b0c8 	.word	0x2001b0c8
 8013a4c:	2001b0cc 	.word	0x2001b0cc

08013a50 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013a56:	2300      	movs	r3, #0
 8013a58:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a5e:	4b12      	ldr	r3, [pc, #72]	; (8013aa8 <tcp_kill_timewait+0x58>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	60fb      	str	r3, [r7, #12]
 8013a64:	e012      	b.n	8013a8c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013a66:	4b11      	ldr	r3, [pc, #68]	; (8013aac <tcp_kill_timewait+0x5c>)
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	6a1b      	ldr	r3, [r3, #32]
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	687a      	ldr	r2, [r7, #4]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d807      	bhi.n	8013a86 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013a76:	4b0d      	ldr	r3, [pc, #52]	; (8013aac <tcp_kill_timewait+0x5c>)
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	6a1b      	ldr	r3, [r3, #32]
 8013a7e:	1ad3      	subs	r3, r2, r3
 8013a80:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	68db      	ldr	r3, [r3, #12]
 8013a8a:	60fb      	str	r3, [r7, #12]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d1e9      	bne.n	8013a66 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d002      	beq.n	8013a9e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013a98:	68b8      	ldr	r0, [r7, #8]
 8013a9a:	f7fe ff1b 	bl	80128d4 <tcp_abort>
  }
}
 8013a9e:	bf00      	nop
 8013aa0:	3710      	adds	r7, #16
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	2001b0d8 	.word	0x2001b0d8
 8013aac:	2001b0cc 	.word	0x2001b0cc

08013ab0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013ab6:	4b10      	ldr	r3, [pc, #64]	; (8013af8 <tcp_handle_closepend+0x48>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013abc:	e014      	b.n	8013ae8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	68db      	ldr	r3, [r3, #12]
 8013ac2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	8b5b      	ldrh	r3, [r3, #26]
 8013ac8:	f003 0308 	and.w	r3, r3, #8
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d009      	beq.n	8013ae4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	8b5b      	ldrh	r3, [r3, #26]
 8013ad4:	f023 0308 	bic.w	r3, r3, #8
 8013ad8:	b29a      	uxth	r2, r3
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013ade:	6878      	ldr	r0, [r7, #4]
 8013ae0:	f7fe fd48 	bl	8012574 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d1e7      	bne.n	8013abe <tcp_handle_closepend+0xe>
  }
}
 8013aee:	bf00      	nop
 8013af0:	bf00      	nop
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	2001b0c8 	.word	0x2001b0c8

08013afc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	4603      	mov	r3, r0
 8013b04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b06:	2001      	movs	r0, #1
 8013b08:	f7fd f834 	bl	8010b74 <memp_malloc>
 8013b0c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d126      	bne.n	8013b62 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013b14:	f7ff ffcc 	bl	8013ab0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013b18:	f7ff ff9a 	bl	8013a50 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b1c:	2001      	movs	r0, #1
 8013b1e:	f7fd f829 	bl	8010b74 <memp_malloc>
 8013b22:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d11b      	bne.n	8013b62 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013b2a:	2009      	movs	r0, #9
 8013b2c:	f7ff ff46 	bl	80139bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b30:	2001      	movs	r0, #1
 8013b32:	f7fd f81f 	bl	8010b74 <memp_malloc>
 8013b36:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d111      	bne.n	8013b62 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013b3e:	2008      	movs	r0, #8
 8013b40:	f7ff ff3c 	bl	80139bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b44:	2001      	movs	r0, #1
 8013b46:	f7fd f815 	bl	8010b74 <memp_malloc>
 8013b4a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d107      	bne.n	8013b62 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013b52:	79fb      	ldrb	r3, [r7, #7]
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7ff fee3 	bl	8013920 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013b5a:	2001      	movs	r0, #1
 8013b5c:	f7fd f80a 	bl	8010b74 <memp_malloc>
 8013b60:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d03f      	beq.n	8013be8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013b68:	229c      	movs	r2, #156	; 0x9c
 8013b6a:	2100      	movs	r1, #0
 8013b6c:	68f8      	ldr	r0, [r7, #12]
 8013b6e:	f00a fac1 	bl	801e0f4 <memset>
    pcb->prio = prio;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	79fa      	ldrb	r2, [r7, #7]
 8013b76:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013b7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	22ff      	movs	r2, #255	; 0xff
 8013b96:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013b9e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2206      	movs	r2, #6
 8013ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	2206      	movs	r2, #6
 8013bac:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bb4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2201      	movs	r2, #1
 8013bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013bbe:	4b0d      	ldr	r3, [pc, #52]	; (8013bf4 <tcp_alloc+0xf8>)
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013bc6:	4b0c      	ldr	r3, [pc, #48]	; (8013bf8 <tcp_alloc+0xfc>)
 8013bc8:	781a      	ldrb	r2, [r3, #0]
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013bd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	4a08      	ldr	r2, [pc, #32]	; (8013bfc <tcp_alloc+0x100>)
 8013bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	4a07      	ldr	r2, [pc, #28]	; (8013c00 <tcp_alloc+0x104>)
 8013be4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013be8:	68fb      	ldr	r3, [r7, #12]
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	2001b0cc 	.word	0x2001b0cc
 8013bf8:	2001435a 	.word	0x2001435a
 8013bfc:	080138b5 	.word	0x080138b5
 8013c00:	006ddd00 	.word	0x006ddd00

08013c04 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013c0e:	2040      	movs	r0, #64	; 0x40
 8013c10:	f7ff ff74 	bl	8013afc <tcp_alloc>
 8013c14:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013c16:	68fb      	ldr	r3, [r7, #12]
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3710      	adds	r7, #16
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013c20:	b480      	push	{r7}
 8013c22:	b083      	sub	sp, #12
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d002      	beq.n	8013c36 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	683a      	ldr	r2, [r7, #0]
 8013c34:	611a      	str	r2, [r3, #16]
  }
}
 8013c36:	bf00      	nop
 8013c38:	370c      	adds	r7, #12
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c40:	4770      	bx	lr
	...

08013c44 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b082      	sub	sp, #8
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d00e      	beq.n	8013c72 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	7d1b      	ldrb	r3, [r3, #20]
 8013c58:	2b01      	cmp	r3, #1
 8013c5a:	d106      	bne.n	8013c6a <tcp_recv+0x26>
 8013c5c:	4b07      	ldr	r3, [pc, #28]	; (8013c7c <tcp_recv+0x38>)
 8013c5e:	f240 72df 	movw	r2, #2015	; 0x7df
 8013c62:	4907      	ldr	r1, [pc, #28]	; (8013c80 <tcp_recv+0x3c>)
 8013c64:	4807      	ldr	r0, [pc, #28]	; (8013c84 <tcp_recv+0x40>)
 8013c66:	f00a ff61 	bl	801eb2c <iprintf>
    pcb->recv = recv;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	683a      	ldr	r2, [r7, #0]
 8013c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013c72:	bf00      	nop
 8013c74:	3708      	adds	r7, #8
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	0802419c 	.word	0x0802419c
 8013c80:	08024738 	.word	0x08024738
 8013c84:	080241e0 	.word	0x080241e0

08013c88 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d00e      	beq.n	8013cb6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	7d1b      	ldrb	r3, [r3, #20]
 8013c9c:	2b01      	cmp	r3, #1
 8013c9e:	d106      	bne.n	8013cae <tcp_sent+0x26>
 8013ca0:	4b07      	ldr	r3, [pc, #28]	; (8013cc0 <tcp_sent+0x38>)
 8013ca2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013ca6:	4907      	ldr	r1, [pc, #28]	; (8013cc4 <tcp_sent+0x3c>)
 8013ca8:	4807      	ldr	r0, [pc, #28]	; (8013cc8 <tcp_sent+0x40>)
 8013caa:	f00a ff3f 	bl	801eb2c <iprintf>
    pcb->sent = sent;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	683a      	ldr	r2, [r7, #0]
 8013cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013cb6:	bf00      	nop
 8013cb8:	3708      	adds	r7, #8
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	0802419c 	.word	0x0802419c
 8013cc4:	08024760 	.word	0x08024760
 8013cc8:	080241e0 	.word	0x080241e0

08013ccc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d00e      	beq.n	8013cfa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	7d1b      	ldrb	r3, [r3, #20]
 8013ce0:	2b01      	cmp	r3, #1
 8013ce2:	d106      	bne.n	8013cf2 <tcp_err+0x26>
 8013ce4:	4b07      	ldr	r3, [pc, #28]	; (8013d04 <tcp_err+0x38>)
 8013ce6:	f640 020d 	movw	r2, #2061	; 0x80d
 8013cea:	4907      	ldr	r1, [pc, #28]	; (8013d08 <tcp_err+0x3c>)
 8013cec:	4807      	ldr	r0, [pc, #28]	; (8013d0c <tcp_err+0x40>)
 8013cee:	f00a ff1d 	bl	801eb2c <iprintf>
    pcb->errf = err;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	683a      	ldr	r2, [r7, #0]
 8013cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013cfa:	bf00      	nop
 8013cfc:	3708      	adds	r7, #8
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	0802419c 	.word	0x0802419c
 8013d08:	08024788 	.word	0x08024788
 8013d0c:	080241e0 	.word	0x080241e0

08013d10 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013d10:	b480      	push	{r7}
 8013d12:	b085      	sub	sp, #20
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d008      	beq.n	8013d32 <tcp_accept+0x22>
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	7d1b      	ldrb	r3, [r3, #20]
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d104      	bne.n	8013d32 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	683a      	ldr	r2, [r7, #0]
 8013d30:	619a      	str	r2, [r3, #24]
  }
}
 8013d32:	bf00      	nop
 8013d34:	3714      	adds	r7, #20
 8013d36:	46bd      	mov	sp, r7
 8013d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3c:	4770      	bx	lr
	...

08013d40 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	4613      	mov	r3, r2
 8013d4c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d107      	bne.n	8013d64 <tcp_poll+0x24>
 8013d54:	4b0e      	ldr	r3, [pc, #56]	; (8013d90 <tcp_poll+0x50>)
 8013d56:	f640 023d 	movw	r2, #2109	; 0x83d
 8013d5a:	490e      	ldr	r1, [pc, #56]	; (8013d94 <tcp_poll+0x54>)
 8013d5c:	480e      	ldr	r0, [pc, #56]	; (8013d98 <tcp_poll+0x58>)
 8013d5e:	f00a fee5 	bl	801eb2c <iprintf>
 8013d62:	e011      	b.n	8013d88 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	7d1b      	ldrb	r3, [r3, #20]
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d106      	bne.n	8013d7a <tcp_poll+0x3a>
 8013d6c:	4b08      	ldr	r3, [pc, #32]	; (8013d90 <tcp_poll+0x50>)
 8013d6e:	f640 023e 	movw	r2, #2110	; 0x83e
 8013d72:	490a      	ldr	r1, [pc, #40]	; (8013d9c <tcp_poll+0x5c>)
 8013d74:	4808      	ldr	r0, [pc, #32]	; (8013d98 <tcp_poll+0x58>)
 8013d76:	f00a fed9 	bl	801eb2c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	68ba      	ldr	r2, [r7, #8]
 8013d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	79fa      	ldrb	r2, [r7, #7]
 8013d86:	775a      	strb	r2, [r3, #29]
}
 8013d88:	3710      	adds	r7, #16
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}
 8013d8e:	bf00      	nop
 8013d90:	0802419c 	.word	0x0802419c
 8013d94:	080247b0 	.word	0x080247b0
 8013d98:	080241e0 	.word	0x080241e0
 8013d9c:	080247c8 	.word	0x080247c8

08013da0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d107      	bne.n	8013dbe <tcp_pcb_purge+0x1e>
 8013dae:	4b21      	ldr	r3, [pc, #132]	; (8013e34 <tcp_pcb_purge+0x94>)
 8013db0:	f640 0251 	movw	r2, #2129	; 0x851
 8013db4:	4920      	ldr	r1, [pc, #128]	; (8013e38 <tcp_pcb_purge+0x98>)
 8013db6:	4821      	ldr	r0, [pc, #132]	; (8013e3c <tcp_pcb_purge+0x9c>)
 8013db8:	f00a feb8 	bl	801eb2c <iprintf>
 8013dbc:	e037      	b.n	8013e2e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	7d1b      	ldrb	r3, [r3, #20]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d033      	beq.n	8013e2e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013dca:	2b0a      	cmp	r3, #10
 8013dcc:	d02f      	beq.n	8013e2e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d02b      	beq.n	8013e2e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d007      	beq.n	8013dee <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7fd fdfa 	bl	80119dc <pbuf_free>
      pcb->refused_data = NULL;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2200      	movs	r2, #0
 8013dec:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d002      	beq.n	8013dfc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f000 f986 	bl	8014108 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e02:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7ff fcf9 	bl	8013800 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7ff fcf4 	bl	8013800 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	0802419c 	.word	0x0802419c
 8013e38:	080247e8 	.word	0x080247e8
 8013e3c:	080241e0 	.word	0x080241e0

08013e40 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d106      	bne.n	8013e5e <tcp_pcb_remove+0x1e>
 8013e50:	4b3e      	ldr	r3, [pc, #248]	; (8013f4c <tcp_pcb_remove+0x10c>)
 8013e52:	f640 0283 	movw	r2, #2179	; 0x883
 8013e56:	493e      	ldr	r1, [pc, #248]	; (8013f50 <tcp_pcb_remove+0x110>)
 8013e58:	483e      	ldr	r0, [pc, #248]	; (8013f54 <tcp_pcb_remove+0x114>)
 8013e5a:	f00a fe67 	bl	801eb2c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d106      	bne.n	8013e72 <tcp_pcb_remove+0x32>
 8013e64:	4b39      	ldr	r3, [pc, #228]	; (8013f4c <tcp_pcb_remove+0x10c>)
 8013e66:	f640 0284 	movw	r2, #2180	; 0x884
 8013e6a:	493b      	ldr	r1, [pc, #236]	; (8013f58 <tcp_pcb_remove+0x118>)
 8013e6c:	4839      	ldr	r0, [pc, #228]	; (8013f54 <tcp_pcb_remove+0x114>)
 8013e6e:	f00a fe5d 	bl	801eb2c <iprintf>

  TCP_RMV(pcblist, pcb);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	683a      	ldr	r2, [r7, #0]
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d105      	bne.n	8013e88 <tcp_pcb_remove+0x48>
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	68da      	ldr	r2, [r3, #12]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	601a      	str	r2, [r3, #0]
 8013e86:	e013      	b.n	8013eb0 <tcp_pcb_remove+0x70>
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	60fb      	str	r3, [r7, #12]
 8013e8e:	e00c      	b.n	8013eaa <tcp_pcb_remove+0x6a>
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	68db      	ldr	r3, [r3, #12]
 8013e94:	683a      	ldr	r2, [r7, #0]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d104      	bne.n	8013ea4 <tcp_pcb_remove+0x64>
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	68da      	ldr	r2, [r3, #12]
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	60da      	str	r2, [r3, #12]
 8013ea2:	e005      	b.n	8013eb0 <tcp_pcb_remove+0x70>
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	68db      	ldr	r3, [r3, #12]
 8013ea8:	60fb      	str	r3, [r7, #12]
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d1ef      	bne.n	8013e90 <tcp_pcb_remove+0x50>
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013eb6:	6838      	ldr	r0, [r7, #0]
 8013eb8:	f7ff ff72 	bl	8013da0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	7d1b      	ldrb	r3, [r3, #20]
 8013ec0:	2b0a      	cmp	r3, #10
 8013ec2:	d013      	beq.n	8013eec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013ec4:	683b      	ldr	r3, [r7, #0]
 8013ec6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013ec8:	2b01      	cmp	r3, #1
 8013eca:	d00f      	beq.n	8013eec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	8b5b      	ldrh	r3, [r3, #26]
 8013ed0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d009      	beq.n	8013eec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	8b5b      	ldrh	r3, [r3, #26]
 8013edc:	f043 0302 	orr.w	r3, r3, #2
 8013ee0:	b29a      	uxth	r2, r3
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013ee6:	6838      	ldr	r0, [r7, #0]
 8013ee8:	f003 fc22 	bl	8017730 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	7d1b      	ldrb	r3, [r3, #20]
 8013ef0:	2b01      	cmp	r3, #1
 8013ef2:	d020      	beq.n	8013f36 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d006      	beq.n	8013f0a <tcp_pcb_remove+0xca>
 8013efc:	4b13      	ldr	r3, [pc, #76]	; (8013f4c <tcp_pcb_remove+0x10c>)
 8013efe:	f640 0293 	movw	r2, #2195	; 0x893
 8013f02:	4916      	ldr	r1, [pc, #88]	; (8013f5c <tcp_pcb_remove+0x11c>)
 8013f04:	4813      	ldr	r0, [pc, #76]	; (8013f54 <tcp_pcb_remove+0x114>)
 8013f06:	f00a fe11 	bl	801eb2c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d006      	beq.n	8013f20 <tcp_pcb_remove+0xe0>
 8013f12:	4b0e      	ldr	r3, [pc, #56]	; (8013f4c <tcp_pcb_remove+0x10c>)
 8013f14:	f640 0294 	movw	r2, #2196	; 0x894
 8013f18:	4911      	ldr	r1, [pc, #68]	; (8013f60 <tcp_pcb_remove+0x120>)
 8013f1a:	480e      	ldr	r0, [pc, #56]	; (8013f54 <tcp_pcb_remove+0x114>)
 8013f1c:	f00a fe06 	bl	801eb2c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d006      	beq.n	8013f36 <tcp_pcb_remove+0xf6>
 8013f28:	4b08      	ldr	r3, [pc, #32]	; (8013f4c <tcp_pcb_remove+0x10c>)
 8013f2a:	f640 0296 	movw	r2, #2198	; 0x896
 8013f2e:	490d      	ldr	r1, [pc, #52]	; (8013f64 <tcp_pcb_remove+0x124>)
 8013f30:	4808      	ldr	r0, [pc, #32]	; (8013f54 <tcp_pcb_remove+0x114>)
 8013f32:	f00a fdfb 	bl	801eb2c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013f3c:	683b      	ldr	r3, [r7, #0]
 8013f3e:	2200      	movs	r2, #0
 8013f40:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013f42:	bf00      	nop
 8013f44:	3710      	adds	r7, #16
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}
 8013f4a:	bf00      	nop
 8013f4c:	0802419c 	.word	0x0802419c
 8013f50:	08024804 	.word	0x08024804
 8013f54:	080241e0 	.word	0x080241e0
 8013f58:	08024820 	.word	0x08024820
 8013f5c:	08024840 	.word	0x08024840
 8013f60:	08024858 	.word	0x08024858
 8013f64:	08024874 	.word	0x08024874

08013f68 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d106      	bne.n	8013f84 <tcp_next_iss+0x1c>
 8013f76:	4b0a      	ldr	r3, [pc, #40]	; (8013fa0 <tcp_next_iss+0x38>)
 8013f78:	f640 02af 	movw	r2, #2223	; 0x8af
 8013f7c:	4909      	ldr	r1, [pc, #36]	; (8013fa4 <tcp_next_iss+0x3c>)
 8013f7e:	480a      	ldr	r0, [pc, #40]	; (8013fa8 <tcp_next_iss+0x40>)
 8013f80:	f00a fdd4 	bl	801eb2c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013f84:	4b09      	ldr	r3, [pc, #36]	; (8013fac <tcp_next_iss+0x44>)
 8013f86:	681a      	ldr	r2, [r3, #0]
 8013f88:	4b09      	ldr	r3, [pc, #36]	; (8013fb0 <tcp_next_iss+0x48>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	4a07      	ldr	r2, [pc, #28]	; (8013fac <tcp_next_iss+0x44>)
 8013f90:	6013      	str	r3, [r2, #0]
  return iss;
 8013f92:	4b06      	ldr	r3, [pc, #24]	; (8013fac <tcp_next_iss+0x44>)
 8013f94:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3708      	adds	r7, #8
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	0802419c 	.word	0x0802419c
 8013fa4:	0802488c 	.word	0x0802488c
 8013fa8:	080241e0 	.word	0x080241e0
 8013fac:	20000058 	.word	0x20000058
 8013fb0:	2001b0cc 	.word	0x2001b0cc

08013fb4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b086      	sub	sp, #24
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	4603      	mov	r3, r0
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
 8013fc0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d106      	bne.n	8013fd6 <tcp_eff_send_mss_netif+0x22>
 8013fc8:	4b14      	ldr	r3, [pc, #80]	; (801401c <tcp_eff_send_mss_netif+0x68>)
 8013fca:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013fce:	4914      	ldr	r1, [pc, #80]	; (8014020 <tcp_eff_send_mss_netif+0x6c>)
 8013fd0:	4814      	ldr	r0, [pc, #80]	; (8014024 <tcp_eff_send_mss_netif+0x70>)
 8013fd2:	f00a fdab 	bl	801eb2c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d101      	bne.n	8013fe0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013fdc:	89fb      	ldrh	r3, [r7, #14]
 8013fde:	e019      	b.n	8014014 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fe4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013fe6:	8afb      	ldrh	r3, [r7, #22]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d012      	beq.n	8014012 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013fec:	2328      	movs	r3, #40	; 0x28
 8013fee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013ff0:	8afa      	ldrh	r2, [r7, #22]
 8013ff2:	8abb      	ldrh	r3, [r7, #20]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d904      	bls.n	8014002 <tcp_eff_send_mss_netif+0x4e>
 8013ff8:	8afa      	ldrh	r2, [r7, #22]
 8013ffa:	8abb      	ldrh	r3, [r7, #20]
 8013ffc:	1ad3      	subs	r3, r2, r3
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	e000      	b.n	8014004 <tcp_eff_send_mss_netif+0x50>
 8014002:	2300      	movs	r3, #0
 8014004:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014006:	8a7a      	ldrh	r2, [r7, #18]
 8014008:	89fb      	ldrh	r3, [r7, #14]
 801400a:	4293      	cmp	r3, r2
 801400c:	bf28      	it	cs
 801400e:	4613      	movcs	r3, r2
 8014010:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014012:	89fb      	ldrh	r3, [r7, #14]
}
 8014014:	4618      	mov	r0, r3
 8014016:	3718      	adds	r7, #24
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	0802419c 	.word	0x0802419c
 8014020:	080248a8 	.word	0x080248a8
 8014024:	080241e0 	.word	0x080241e0

08014028 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d119      	bne.n	8014070 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801403c:	4b10      	ldr	r3, [pc, #64]	; (8014080 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801403e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014042:	4910      	ldr	r1, [pc, #64]	; (8014084 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014044:	4810      	ldr	r0, [pc, #64]	; (8014088 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014046:	f00a fd71 	bl	801eb2c <iprintf>

  while (pcb != NULL) {
 801404a:	e011      	b.n	8014070 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	429a      	cmp	r2, r3
 8014056:	d108      	bne.n	801406a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801405e:	68f8      	ldr	r0, [r7, #12]
 8014060:	f7fe fc38 	bl	80128d4 <tcp_abort>
      pcb = next;
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	60fb      	str	r3, [r7, #12]
 8014068:	e002      	b.n	8014070 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d1ea      	bne.n	801404c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014076:	bf00      	nop
 8014078:	bf00      	nop
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}
 8014080:	0802419c 	.word	0x0802419c
 8014084:	080248d0 	.word	0x080248d0
 8014088:	080241e0 	.word	0x080241e0

0801408c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b084      	sub	sp, #16
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d02a      	beq.n	80140f2 <tcp_netif_ip_addr_changed+0x66>
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d026      	beq.n	80140f2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80140a4:	4b15      	ldr	r3, [pc, #84]	; (80140fc <tcp_netif_ip_addr_changed+0x70>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	4619      	mov	r1, r3
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	f7ff ffbc 	bl	8014028 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80140b0:	4b13      	ldr	r3, [pc, #76]	; (8014100 <tcp_netif_ip_addr_changed+0x74>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	4619      	mov	r1, r3
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	f7ff ffb6 	bl	8014028 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d017      	beq.n	80140f2 <tcp_netif_ip_addr_changed+0x66>
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d013      	beq.n	80140f2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80140ca:	4b0e      	ldr	r3, [pc, #56]	; (8014104 <tcp_netif_ip_addr_changed+0x78>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	60fb      	str	r3, [r7, #12]
 80140d0:	e00c      	b.n	80140ec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d103      	bne.n	80140e6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	68db      	ldr	r3, [r3, #12]
 80140ea:	60fb      	str	r3, [r7, #12]
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1ef      	bne.n	80140d2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80140f2:	bf00      	nop
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	2001b0c8 	.word	0x2001b0c8
 8014100:	2001b0d4 	.word	0x2001b0d4
 8014104:	2001b0d0 	.word	0x2001b0d0

08014108 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014114:	2b00      	cmp	r3, #0
 8014116:	d007      	beq.n	8014128 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801411c:	4618      	mov	r0, r3
 801411e:	f7ff fb6f 	bl	8013800 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2200      	movs	r2, #0
 8014126:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014128:	bf00      	nop
 801412a:	3708      	adds	r7, #8
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014130:	b590      	push	{r4, r7, lr}
 8014132:	b08d      	sub	sp, #52	; 0x34
 8014134:	af04      	add	r7, sp, #16
 8014136:	6078      	str	r0, [r7, #4]
 8014138:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d105      	bne.n	801414c <tcp_input+0x1c>
 8014140:	4b9b      	ldr	r3, [pc, #620]	; (80143b0 <tcp_input+0x280>)
 8014142:	2283      	movs	r2, #131	; 0x83
 8014144:	499b      	ldr	r1, [pc, #620]	; (80143b4 <tcp_input+0x284>)
 8014146:	489c      	ldr	r0, [pc, #624]	; (80143b8 <tcp_input+0x288>)
 8014148:	f00a fcf0 	bl	801eb2c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	685b      	ldr	r3, [r3, #4]
 8014150:	4a9a      	ldr	r2, [pc, #616]	; (80143bc <tcp_input+0x28c>)
 8014152:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	895b      	ldrh	r3, [r3, #10]
 8014158:	2b13      	cmp	r3, #19
 801415a:	f240 83c4 	bls.w	80148e6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801415e:	4b98      	ldr	r3, [pc, #608]	; (80143c0 <tcp_input+0x290>)
 8014160:	695b      	ldr	r3, [r3, #20]
 8014162:	4a97      	ldr	r2, [pc, #604]	; (80143c0 <tcp_input+0x290>)
 8014164:	6812      	ldr	r2, [r2, #0]
 8014166:	4611      	mov	r1, r2
 8014168:	4618      	mov	r0, r3
 801416a:	f008 fc13 	bl	801c994 <ip4_addr_isbroadcast_u32>
 801416e:	4603      	mov	r3, r0
 8014170:	2b00      	cmp	r3, #0
 8014172:	f040 83ba 	bne.w	80148ea <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014176:	4b92      	ldr	r3, [pc, #584]	; (80143c0 <tcp_input+0x290>)
 8014178:	695b      	ldr	r3, [r3, #20]
 801417a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801417e:	2be0      	cmp	r3, #224	; 0xe0
 8014180:	f000 83b3 	beq.w	80148ea <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014184:	4b8d      	ldr	r3, [pc, #564]	; (80143bc <tcp_input+0x28c>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	899b      	ldrh	r3, [r3, #12]
 801418a:	b29b      	uxth	r3, r3
 801418c:	4618      	mov	r0, r3
 801418e:	f7fb f865 	bl	800f25c <lwip_htons>
 8014192:	4603      	mov	r3, r0
 8014194:	0b1b      	lsrs	r3, r3, #12
 8014196:	b29b      	uxth	r3, r3
 8014198:	b2db      	uxtb	r3, r3
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801419e:	7cbb      	ldrb	r3, [r7, #18]
 80141a0:	2b13      	cmp	r3, #19
 80141a2:	f240 83a4 	bls.w	80148ee <tcp_input+0x7be>
 80141a6:	7cbb      	ldrb	r3, [r7, #18]
 80141a8:	b29a      	uxth	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	891b      	ldrh	r3, [r3, #8]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	f200 839d 	bhi.w	80148ee <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80141b4:	7cbb      	ldrb	r3, [r7, #18]
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	3b14      	subs	r3, #20
 80141ba:	b29a      	uxth	r2, r3
 80141bc:	4b81      	ldr	r3, [pc, #516]	; (80143c4 <tcp_input+0x294>)
 80141be:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80141c0:	4b81      	ldr	r3, [pc, #516]	; (80143c8 <tcp_input+0x298>)
 80141c2:	2200      	movs	r2, #0
 80141c4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	895a      	ldrh	r2, [r3, #10]
 80141ca:	7cbb      	ldrb	r3, [r7, #18]
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d309      	bcc.n	80141e6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80141d2:	4b7c      	ldr	r3, [pc, #496]	; (80143c4 <tcp_input+0x294>)
 80141d4:	881a      	ldrh	r2, [r3, #0]
 80141d6:	4b7d      	ldr	r3, [pc, #500]	; (80143cc <tcp_input+0x29c>)
 80141d8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80141da:	7cbb      	ldrb	r3, [r7, #18]
 80141dc:	4619      	mov	r1, r3
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f7fd fb44 	bl	801186c <pbuf_remove_header>
 80141e4:	e04e      	b.n	8014284 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d105      	bne.n	80141fa <tcp_input+0xca>
 80141ee:	4b70      	ldr	r3, [pc, #448]	; (80143b0 <tcp_input+0x280>)
 80141f0:	22c2      	movs	r2, #194	; 0xc2
 80141f2:	4977      	ldr	r1, [pc, #476]	; (80143d0 <tcp_input+0x2a0>)
 80141f4:	4870      	ldr	r0, [pc, #448]	; (80143b8 <tcp_input+0x288>)
 80141f6:	f00a fc99 	bl	801eb2c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80141fa:	2114      	movs	r1, #20
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f7fd fb35 	bl	801186c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	895a      	ldrh	r2, [r3, #10]
 8014206:	4b71      	ldr	r3, [pc, #452]	; (80143cc <tcp_input+0x29c>)
 8014208:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801420a:	4b6e      	ldr	r3, [pc, #440]	; (80143c4 <tcp_input+0x294>)
 801420c:	881a      	ldrh	r2, [r3, #0]
 801420e:	4b6f      	ldr	r3, [pc, #444]	; (80143cc <tcp_input+0x29c>)
 8014210:	881b      	ldrh	r3, [r3, #0]
 8014212:	1ad3      	subs	r3, r2, r3
 8014214:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014216:	4b6d      	ldr	r3, [pc, #436]	; (80143cc <tcp_input+0x29c>)
 8014218:	881b      	ldrh	r3, [r3, #0]
 801421a:	4619      	mov	r1, r3
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f7fd fb25 	bl	801186c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	895b      	ldrh	r3, [r3, #10]
 8014228:	8a3a      	ldrh	r2, [r7, #16]
 801422a:	429a      	cmp	r2, r3
 801422c:	f200 8361 	bhi.w	80148f2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	4a64      	ldr	r2, [pc, #400]	; (80143c8 <tcp_input+0x298>)
 8014238:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	8a3a      	ldrh	r2, [r7, #16]
 8014240:	4611      	mov	r1, r2
 8014242:	4618      	mov	r0, r3
 8014244:	f7fd fb12 	bl	801186c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	891a      	ldrh	r2, [r3, #8]
 801424c:	8a3b      	ldrh	r3, [r7, #16]
 801424e:	1ad3      	subs	r3, r2, r3
 8014250:	b29a      	uxth	r2, r3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	895b      	ldrh	r3, [r3, #10]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d005      	beq.n	801426a <tcp_input+0x13a>
 801425e:	4b54      	ldr	r3, [pc, #336]	; (80143b0 <tcp_input+0x280>)
 8014260:	22df      	movs	r2, #223	; 0xdf
 8014262:	495c      	ldr	r1, [pc, #368]	; (80143d4 <tcp_input+0x2a4>)
 8014264:	4854      	ldr	r0, [pc, #336]	; (80143b8 <tcp_input+0x288>)
 8014266:	f00a fc61 	bl	801eb2c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	891a      	ldrh	r2, [r3, #8]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	891b      	ldrh	r3, [r3, #8]
 8014274:	429a      	cmp	r2, r3
 8014276:	d005      	beq.n	8014284 <tcp_input+0x154>
 8014278:	4b4d      	ldr	r3, [pc, #308]	; (80143b0 <tcp_input+0x280>)
 801427a:	22e0      	movs	r2, #224	; 0xe0
 801427c:	4956      	ldr	r1, [pc, #344]	; (80143d8 <tcp_input+0x2a8>)
 801427e:	484e      	ldr	r0, [pc, #312]	; (80143b8 <tcp_input+0x288>)
 8014280:	f00a fc54 	bl	801eb2c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014284:	4b4d      	ldr	r3, [pc, #308]	; (80143bc <tcp_input+0x28c>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	881b      	ldrh	r3, [r3, #0]
 801428a:	b29b      	uxth	r3, r3
 801428c:	4a4b      	ldr	r2, [pc, #300]	; (80143bc <tcp_input+0x28c>)
 801428e:	6814      	ldr	r4, [r2, #0]
 8014290:	4618      	mov	r0, r3
 8014292:	f7fa ffe3 	bl	800f25c <lwip_htons>
 8014296:	4603      	mov	r3, r0
 8014298:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801429a:	4b48      	ldr	r3, [pc, #288]	; (80143bc <tcp_input+0x28c>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	885b      	ldrh	r3, [r3, #2]
 80142a0:	b29b      	uxth	r3, r3
 80142a2:	4a46      	ldr	r2, [pc, #280]	; (80143bc <tcp_input+0x28c>)
 80142a4:	6814      	ldr	r4, [r2, #0]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7fa ffd8 	bl	800f25c <lwip_htons>
 80142ac:	4603      	mov	r3, r0
 80142ae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80142b0:	4b42      	ldr	r3, [pc, #264]	; (80143bc <tcp_input+0x28c>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	685b      	ldr	r3, [r3, #4]
 80142b6:	4a41      	ldr	r2, [pc, #260]	; (80143bc <tcp_input+0x28c>)
 80142b8:	6814      	ldr	r4, [r2, #0]
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7fa ffe3 	bl	800f286 <lwip_htonl>
 80142c0:	4603      	mov	r3, r0
 80142c2:	6063      	str	r3, [r4, #4]
 80142c4:	6863      	ldr	r3, [r4, #4]
 80142c6:	4a45      	ldr	r2, [pc, #276]	; (80143dc <tcp_input+0x2ac>)
 80142c8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80142ca:	4b3c      	ldr	r3, [pc, #240]	; (80143bc <tcp_input+0x28c>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	689b      	ldr	r3, [r3, #8]
 80142d0:	4a3a      	ldr	r2, [pc, #232]	; (80143bc <tcp_input+0x28c>)
 80142d2:	6814      	ldr	r4, [r2, #0]
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7fa ffd6 	bl	800f286 <lwip_htonl>
 80142da:	4603      	mov	r3, r0
 80142dc:	60a3      	str	r3, [r4, #8]
 80142de:	68a3      	ldr	r3, [r4, #8]
 80142e0:	4a3f      	ldr	r2, [pc, #252]	; (80143e0 <tcp_input+0x2b0>)
 80142e2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80142e4:	4b35      	ldr	r3, [pc, #212]	; (80143bc <tcp_input+0x28c>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	89db      	ldrh	r3, [r3, #14]
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	4a33      	ldr	r2, [pc, #204]	; (80143bc <tcp_input+0x28c>)
 80142ee:	6814      	ldr	r4, [r2, #0]
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7fa ffb3 	bl	800f25c <lwip_htons>
 80142f6:	4603      	mov	r3, r0
 80142f8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80142fa:	4b30      	ldr	r3, [pc, #192]	; (80143bc <tcp_input+0x28c>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	899b      	ldrh	r3, [r3, #12]
 8014300:	b29b      	uxth	r3, r3
 8014302:	4618      	mov	r0, r3
 8014304:	f7fa ffaa 	bl	800f25c <lwip_htons>
 8014308:	4603      	mov	r3, r0
 801430a:	b2db      	uxtb	r3, r3
 801430c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014310:	b2da      	uxtb	r2, r3
 8014312:	4b34      	ldr	r3, [pc, #208]	; (80143e4 <tcp_input+0x2b4>)
 8014314:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	891a      	ldrh	r2, [r3, #8]
 801431a:	4b33      	ldr	r3, [pc, #204]	; (80143e8 <tcp_input+0x2b8>)
 801431c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801431e:	4b31      	ldr	r3, [pc, #196]	; (80143e4 <tcp_input+0x2b4>)
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	f003 0303 	and.w	r3, r3, #3
 8014326:	2b00      	cmp	r3, #0
 8014328:	d00c      	beq.n	8014344 <tcp_input+0x214>
    tcplen++;
 801432a:	4b2f      	ldr	r3, [pc, #188]	; (80143e8 <tcp_input+0x2b8>)
 801432c:	881b      	ldrh	r3, [r3, #0]
 801432e:	3301      	adds	r3, #1
 8014330:	b29a      	uxth	r2, r3
 8014332:	4b2d      	ldr	r3, [pc, #180]	; (80143e8 <tcp_input+0x2b8>)
 8014334:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	891a      	ldrh	r2, [r3, #8]
 801433a:	4b2b      	ldr	r3, [pc, #172]	; (80143e8 <tcp_input+0x2b8>)
 801433c:	881b      	ldrh	r3, [r3, #0]
 801433e:	429a      	cmp	r2, r3
 8014340:	f200 82d9 	bhi.w	80148f6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014344:	2300      	movs	r3, #0
 8014346:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014348:	4b28      	ldr	r3, [pc, #160]	; (80143ec <tcp_input+0x2bc>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	61bb      	str	r3, [r7, #24]
 801434e:	e09d      	b.n	801448c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014350:	69bb      	ldr	r3, [r7, #24]
 8014352:	7d1b      	ldrb	r3, [r3, #20]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d105      	bne.n	8014364 <tcp_input+0x234>
 8014358:	4b15      	ldr	r3, [pc, #84]	; (80143b0 <tcp_input+0x280>)
 801435a:	22fb      	movs	r2, #251	; 0xfb
 801435c:	4924      	ldr	r1, [pc, #144]	; (80143f0 <tcp_input+0x2c0>)
 801435e:	4816      	ldr	r0, [pc, #88]	; (80143b8 <tcp_input+0x288>)
 8014360:	f00a fbe4 	bl	801eb2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	7d1b      	ldrb	r3, [r3, #20]
 8014368:	2b0a      	cmp	r3, #10
 801436a:	d105      	bne.n	8014378 <tcp_input+0x248>
 801436c:	4b10      	ldr	r3, [pc, #64]	; (80143b0 <tcp_input+0x280>)
 801436e:	22fc      	movs	r2, #252	; 0xfc
 8014370:	4920      	ldr	r1, [pc, #128]	; (80143f4 <tcp_input+0x2c4>)
 8014372:	4811      	ldr	r0, [pc, #68]	; (80143b8 <tcp_input+0x288>)
 8014374:	f00a fbda 	bl	801eb2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014378:	69bb      	ldr	r3, [r7, #24]
 801437a:	7d1b      	ldrb	r3, [r3, #20]
 801437c:	2b01      	cmp	r3, #1
 801437e:	d105      	bne.n	801438c <tcp_input+0x25c>
 8014380:	4b0b      	ldr	r3, [pc, #44]	; (80143b0 <tcp_input+0x280>)
 8014382:	22fd      	movs	r2, #253	; 0xfd
 8014384:	491c      	ldr	r1, [pc, #112]	; (80143f8 <tcp_input+0x2c8>)
 8014386:	480c      	ldr	r0, [pc, #48]	; (80143b8 <tcp_input+0x288>)
 8014388:	f00a fbd0 	bl	801eb2c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801438c:	69bb      	ldr	r3, [r7, #24]
 801438e:	7a1b      	ldrb	r3, [r3, #8]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d033      	beq.n	80143fc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	7a1a      	ldrb	r2, [r3, #8]
 8014398:	4b09      	ldr	r3, [pc, #36]	; (80143c0 <tcp_input+0x290>)
 801439a:	685b      	ldr	r3, [r3, #4]
 801439c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80143a0:	3301      	adds	r3, #1
 80143a2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80143a4:	429a      	cmp	r2, r3
 80143a6:	d029      	beq.n	80143fc <tcp_input+0x2cc>
      prev = pcb;
 80143a8:	69bb      	ldr	r3, [r7, #24]
 80143aa:	61fb      	str	r3, [r7, #28]
      continue;
 80143ac:	e06b      	b.n	8014486 <tcp_input+0x356>
 80143ae:	bf00      	nop
 80143b0:	08024904 	.word	0x08024904
 80143b4:	08024938 	.word	0x08024938
 80143b8:	08024950 	.word	0x08024950
 80143bc:	20014370 	.word	0x20014370
 80143c0:	200176d4 	.word	0x200176d4
 80143c4:	20014374 	.word	0x20014374
 80143c8:	20014378 	.word	0x20014378
 80143cc:	20014376 	.word	0x20014376
 80143d0:	08024978 	.word	0x08024978
 80143d4:	08024988 	.word	0x08024988
 80143d8:	08024994 	.word	0x08024994
 80143dc:	20014380 	.word	0x20014380
 80143e0:	20014384 	.word	0x20014384
 80143e4:	2001438c 	.word	0x2001438c
 80143e8:	2001438a 	.word	0x2001438a
 80143ec:	2001b0c8 	.word	0x2001b0c8
 80143f0:	080249b4 	.word	0x080249b4
 80143f4:	080249dc 	.word	0x080249dc
 80143f8:	08024a08 	.word	0x08024a08
    }

    if (pcb->remote_port == tcphdr->src &&
 80143fc:	69bb      	ldr	r3, [r7, #24]
 80143fe:	8b1a      	ldrh	r2, [r3, #24]
 8014400:	4b94      	ldr	r3, [pc, #592]	; (8014654 <tcp_input+0x524>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	881b      	ldrh	r3, [r3, #0]
 8014406:	b29b      	uxth	r3, r3
 8014408:	429a      	cmp	r2, r3
 801440a:	d13a      	bne.n	8014482 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801440c:	69bb      	ldr	r3, [r7, #24]
 801440e:	8ada      	ldrh	r2, [r3, #22]
 8014410:	4b90      	ldr	r3, [pc, #576]	; (8014654 <tcp_input+0x524>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	885b      	ldrh	r3, [r3, #2]
 8014416:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014418:	429a      	cmp	r2, r3
 801441a:	d132      	bne.n	8014482 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801441c:	69bb      	ldr	r3, [r7, #24]
 801441e:	685a      	ldr	r2, [r3, #4]
 8014420:	4b8d      	ldr	r3, [pc, #564]	; (8014658 <tcp_input+0x528>)
 8014422:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014424:	429a      	cmp	r2, r3
 8014426:	d12c      	bne.n	8014482 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014428:	69bb      	ldr	r3, [r7, #24]
 801442a:	681a      	ldr	r2, [r3, #0]
 801442c:	4b8a      	ldr	r3, [pc, #552]	; (8014658 <tcp_input+0x528>)
 801442e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014430:	429a      	cmp	r2, r3
 8014432:	d126      	bne.n	8014482 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014434:	69bb      	ldr	r3, [r7, #24]
 8014436:	68db      	ldr	r3, [r3, #12]
 8014438:	69ba      	ldr	r2, [r7, #24]
 801443a:	429a      	cmp	r2, r3
 801443c:	d106      	bne.n	801444c <tcp_input+0x31c>
 801443e:	4b87      	ldr	r3, [pc, #540]	; (801465c <tcp_input+0x52c>)
 8014440:	f240 120d 	movw	r2, #269	; 0x10d
 8014444:	4986      	ldr	r1, [pc, #536]	; (8014660 <tcp_input+0x530>)
 8014446:	4887      	ldr	r0, [pc, #540]	; (8014664 <tcp_input+0x534>)
 8014448:	f00a fb70 	bl	801eb2c <iprintf>
      if (prev != NULL) {
 801444c:	69fb      	ldr	r3, [r7, #28]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d00a      	beq.n	8014468 <tcp_input+0x338>
        prev->next = pcb->next;
 8014452:	69bb      	ldr	r3, [r7, #24]
 8014454:	68da      	ldr	r2, [r3, #12]
 8014456:	69fb      	ldr	r3, [r7, #28]
 8014458:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801445a:	4b83      	ldr	r3, [pc, #524]	; (8014668 <tcp_input+0x538>)
 801445c:	681a      	ldr	r2, [r3, #0]
 801445e:	69bb      	ldr	r3, [r7, #24]
 8014460:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014462:	4a81      	ldr	r2, [pc, #516]	; (8014668 <tcp_input+0x538>)
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014468:	69bb      	ldr	r3, [r7, #24]
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	69ba      	ldr	r2, [r7, #24]
 801446e:	429a      	cmp	r2, r3
 8014470:	d111      	bne.n	8014496 <tcp_input+0x366>
 8014472:	4b7a      	ldr	r3, [pc, #488]	; (801465c <tcp_input+0x52c>)
 8014474:	f240 1215 	movw	r2, #277	; 0x115
 8014478:	497c      	ldr	r1, [pc, #496]	; (801466c <tcp_input+0x53c>)
 801447a:	487a      	ldr	r0, [pc, #488]	; (8014664 <tcp_input+0x534>)
 801447c:	f00a fb56 	bl	801eb2c <iprintf>
      break;
 8014480:	e009      	b.n	8014496 <tcp_input+0x366>
    }
    prev = pcb;
 8014482:	69bb      	ldr	r3, [r7, #24]
 8014484:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	68db      	ldr	r3, [r3, #12]
 801448a:	61bb      	str	r3, [r7, #24]
 801448c:	69bb      	ldr	r3, [r7, #24]
 801448e:	2b00      	cmp	r3, #0
 8014490:	f47f af5e 	bne.w	8014350 <tcp_input+0x220>
 8014494:	e000      	b.n	8014498 <tcp_input+0x368>
      break;
 8014496:	bf00      	nop
  }

  if (pcb == NULL) {
 8014498:	69bb      	ldr	r3, [r7, #24]
 801449a:	2b00      	cmp	r3, #0
 801449c:	f040 8095 	bne.w	80145ca <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80144a0:	4b73      	ldr	r3, [pc, #460]	; (8014670 <tcp_input+0x540>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	61bb      	str	r3, [r7, #24]
 80144a6:	e03f      	b.n	8014528 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80144a8:	69bb      	ldr	r3, [r7, #24]
 80144aa:	7d1b      	ldrb	r3, [r3, #20]
 80144ac:	2b0a      	cmp	r3, #10
 80144ae:	d006      	beq.n	80144be <tcp_input+0x38e>
 80144b0:	4b6a      	ldr	r3, [pc, #424]	; (801465c <tcp_input+0x52c>)
 80144b2:	f240 121f 	movw	r2, #287	; 0x11f
 80144b6:	496f      	ldr	r1, [pc, #444]	; (8014674 <tcp_input+0x544>)
 80144b8:	486a      	ldr	r0, [pc, #424]	; (8014664 <tcp_input+0x534>)
 80144ba:	f00a fb37 	bl	801eb2c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144be:	69bb      	ldr	r3, [r7, #24]
 80144c0:	7a1b      	ldrb	r3, [r3, #8]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d009      	beq.n	80144da <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80144c6:	69bb      	ldr	r3, [r7, #24]
 80144c8:	7a1a      	ldrb	r2, [r3, #8]
 80144ca:	4b63      	ldr	r3, [pc, #396]	; (8014658 <tcp_input+0x528>)
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144d2:	3301      	adds	r3, #1
 80144d4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144d6:	429a      	cmp	r2, r3
 80144d8:	d122      	bne.n	8014520 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	8b1a      	ldrh	r2, [r3, #24]
 80144de:	4b5d      	ldr	r3, [pc, #372]	; (8014654 <tcp_input+0x524>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	881b      	ldrh	r3, [r3, #0]
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d11b      	bne.n	8014522 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80144ea:	69bb      	ldr	r3, [r7, #24]
 80144ec:	8ada      	ldrh	r2, [r3, #22]
 80144ee:	4b59      	ldr	r3, [pc, #356]	; (8014654 <tcp_input+0x524>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	885b      	ldrh	r3, [r3, #2]
 80144f4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80144f6:	429a      	cmp	r2, r3
 80144f8:	d113      	bne.n	8014522 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80144fa:	69bb      	ldr	r3, [r7, #24]
 80144fc:	685a      	ldr	r2, [r3, #4]
 80144fe:	4b56      	ldr	r3, [pc, #344]	; (8014658 <tcp_input+0x528>)
 8014500:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014502:	429a      	cmp	r2, r3
 8014504:	d10d      	bne.n	8014522 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014506:	69bb      	ldr	r3, [r7, #24]
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	4b53      	ldr	r3, [pc, #332]	; (8014658 <tcp_input+0x528>)
 801450c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801450e:	429a      	cmp	r2, r3
 8014510:	d107      	bne.n	8014522 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014512:	69b8      	ldr	r0, [r7, #24]
 8014514:	f000 fb54 	bl	8014bc0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f7fd fa5f 	bl	80119dc <pbuf_free>
        return;
 801451e:	e1f0      	b.n	8014902 <tcp_input+0x7d2>
        continue;
 8014520:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014522:	69bb      	ldr	r3, [r7, #24]
 8014524:	68db      	ldr	r3, [r3, #12]
 8014526:	61bb      	str	r3, [r7, #24]
 8014528:	69bb      	ldr	r3, [r7, #24]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d1bc      	bne.n	80144a8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801452e:	2300      	movs	r3, #0
 8014530:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014532:	4b51      	ldr	r3, [pc, #324]	; (8014678 <tcp_input+0x548>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	617b      	str	r3, [r7, #20]
 8014538:	e02a      	b.n	8014590 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801453a:	697b      	ldr	r3, [r7, #20]
 801453c:	7a1b      	ldrb	r3, [r3, #8]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00c      	beq.n	801455c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	7a1a      	ldrb	r2, [r3, #8]
 8014546:	4b44      	ldr	r3, [pc, #272]	; (8014658 <tcp_input+0x528>)
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801454e:	3301      	adds	r3, #1
 8014550:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014552:	429a      	cmp	r2, r3
 8014554:	d002      	beq.n	801455c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	61fb      	str	r3, [r7, #28]
        continue;
 801455a:	e016      	b.n	801458a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	8ada      	ldrh	r2, [r3, #22]
 8014560:	4b3c      	ldr	r3, [pc, #240]	; (8014654 <tcp_input+0x524>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	885b      	ldrh	r3, [r3, #2]
 8014566:	b29b      	uxth	r3, r3
 8014568:	429a      	cmp	r2, r3
 801456a:	d10c      	bne.n	8014586 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	681a      	ldr	r2, [r3, #0]
 8014570:	4b39      	ldr	r3, [pc, #228]	; (8014658 <tcp_input+0x528>)
 8014572:	695b      	ldr	r3, [r3, #20]
 8014574:	429a      	cmp	r2, r3
 8014576:	d00f      	beq.n	8014598 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d00d      	beq.n	801459a <tcp_input+0x46a>
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d009      	beq.n	801459a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	68db      	ldr	r3, [r3, #12]
 801458e:	617b      	str	r3, [r7, #20]
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d1d1      	bne.n	801453a <tcp_input+0x40a>
 8014596:	e000      	b.n	801459a <tcp_input+0x46a>
            break;
 8014598:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d014      	beq.n	80145ca <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80145a0:	69fb      	ldr	r3, [r7, #28]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d00a      	beq.n	80145bc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	68da      	ldr	r2, [r3, #12]
 80145aa:	69fb      	ldr	r3, [r7, #28]
 80145ac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80145ae:	4b32      	ldr	r3, [pc, #200]	; (8014678 <tcp_input+0x548>)
 80145b0:	681a      	ldr	r2, [r3, #0]
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80145b6:	4a30      	ldr	r2, [pc, #192]	; (8014678 <tcp_input+0x548>)
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80145bc:	6978      	ldr	r0, [r7, #20]
 80145be:	f000 fa01 	bl	80149c4 <tcp_listen_input>
      }
      pbuf_free(p);
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f7fd fa0a 	bl	80119dc <pbuf_free>
      return;
 80145c8:	e19b      	b.n	8014902 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80145ca:	69bb      	ldr	r3, [r7, #24]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	f000 8160 	beq.w	8014892 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80145d2:	4b2a      	ldr	r3, [pc, #168]	; (801467c <tcp_input+0x54c>)
 80145d4:	2200      	movs	r2, #0
 80145d6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	891a      	ldrh	r2, [r3, #8]
 80145dc:	4b27      	ldr	r3, [pc, #156]	; (801467c <tcp_input+0x54c>)
 80145de:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80145e0:	4a26      	ldr	r2, [pc, #152]	; (801467c <tcp_input+0x54c>)
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80145e6:	4b1b      	ldr	r3, [pc, #108]	; (8014654 <tcp_input+0x524>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	4a24      	ldr	r2, [pc, #144]	; (801467c <tcp_input+0x54c>)
 80145ec:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 80145ee:	4b24      	ldr	r3, [pc, #144]	; (8014680 <tcp_input+0x550>)
 80145f0:	2200      	movs	r2, #0
 80145f2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80145f4:	4b23      	ldr	r3, [pc, #140]	; (8014684 <tcp_input+0x554>)
 80145f6:	2200      	movs	r2, #0
 80145f8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80145fa:	4b23      	ldr	r3, [pc, #140]	; (8014688 <tcp_input+0x558>)
 80145fc:	2200      	movs	r2, #0
 80145fe:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014600:	4b22      	ldr	r3, [pc, #136]	; (801468c <tcp_input+0x55c>)
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	f003 0308 	and.w	r3, r3, #8
 8014608:	2b00      	cmp	r3, #0
 801460a:	d006      	beq.n	801461a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	7b5b      	ldrb	r3, [r3, #13]
 8014610:	f043 0301 	orr.w	r3, r3, #1
 8014614:	b2da      	uxtb	r2, r3
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801461a:	69bb      	ldr	r3, [r7, #24]
 801461c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801461e:	2b00      	cmp	r3, #0
 8014620:	d038      	beq.n	8014694 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014622:	69b8      	ldr	r0, [r7, #24]
 8014624:	f7ff f870 	bl	8013708 <tcp_process_refused_data>
 8014628:	4603      	mov	r3, r0
 801462a:	f113 0f0d 	cmn.w	r3, #13
 801462e:	d007      	beq.n	8014640 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014634:	2b00      	cmp	r3, #0
 8014636:	d02d      	beq.n	8014694 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014638:	4b15      	ldr	r3, [pc, #84]	; (8014690 <tcp_input+0x560>)
 801463a:	881b      	ldrh	r3, [r3, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d029      	beq.n	8014694 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014640:	69bb      	ldr	r3, [r7, #24]
 8014642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014644:	2b00      	cmp	r3, #0
 8014646:	f040 8104 	bne.w	8014852 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801464a:	69b8      	ldr	r0, [r7, #24]
 801464c:	f003 fe82 	bl	8018354 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014650:	e0ff      	b.n	8014852 <tcp_input+0x722>
 8014652:	bf00      	nop
 8014654:	20014370 	.word	0x20014370
 8014658:	200176d4 	.word	0x200176d4
 801465c:	08024904 	.word	0x08024904
 8014660:	08024a30 	.word	0x08024a30
 8014664:	08024950 	.word	0x08024950
 8014668:	2001b0c8 	.word	0x2001b0c8
 801466c:	08024a5c 	.word	0x08024a5c
 8014670:	2001b0d8 	.word	0x2001b0d8
 8014674:	08024a88 	.word	0x08024a88
 8014678:	2001b0d0 	.word	0x2001b0d0
 801467c:	2001435c 	.word	0x2001435c
 8014680:	20014390 	.word	0x20014390
 8014684:	2001438d 	.word	0x2001438d
 8014688:	20014388 	.word	0x20014388
 801468c:	2001438c 	.word	0x2001438c
 8014690:	2001438a 	.word	0x2001438a
      }
    }
    tcp_input_pcb = pcb;
 8014694:	4a9c      	ldr	r2, [pc, #624]	; (8014908 <tcp_input+0x7d8>)
 8014696:	69bb      	ldr	r3, [r7, #24]
 8014698:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801469a:	69b8      	ldr	r0, [r7, #24]
 801469c:	f000 fb0a 	bl	8014cb4 <tcp_process>
 80146a0:	4603      	mov	r3, r0
 80146a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80146a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146a8:	f113 0f0d 	cmn.w	r3, #13
 80146ac:	f000 80d3 	beq.w	8014856 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80146b0:	4b96      	ldr	r3, [pc, #600]	; (801490c <tcp_input+0x7dc>)
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	f003 0308 	and.w	r3, r3, #8
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d015      	beq.n	80146e8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80146bc:	69bb      	ldr	r3, [r7, #24]
 80146be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d008      	beq.n	80146d8 <tcp_input+0x5a8>
 80146c6:	69bb      	ldr	r3, [r7, #24]
 80146c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146cc:	69ba      	ldr	r2, [r7, #24]
 80146ce:	6912      	ldr	r2, [r2, #16]
 80146d0:	f06f 010d 	mvn.w	r1, #13
 80146d4:	4610      	mov	r0, r2
 80146d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80146d8:	69b9      	ldr	r1, [r7, #24]
 80146da:	488d      	ldr	r0, [pc, #564]	; (8014910 <tcp_input+0x7e0>)
 80146dc:	f7ff fbb0 	bl	8013e40 <tcp_pcb_remove>
        tcp_free(pcb);
 80146e0:	69b8      	ldr	r0, [r7, #24]
 80146e2:	f7fd fdb3 	bl	801224c <tcp_free>
 80146e6:	e0c1      	b.n	801486c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80146e8:	2300      	movs	r3, #0
 80146ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80146ec:	4b89      	ldr	r3, [pc, #548]	; (8014914 <tcp_input+0x7e4>)
 80146ee:	881b      	ldrh	r3, [r3, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d01d      	beq.n	8014730 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80146f4:	4b87      	ldr	r3, [pc, #540]	; (8014914 <tcp_input+0x7e4>)
 80146f6:	881b      	ldrh	r3, [r3, #0]
 80146f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80146fa:	69bb      	ldr	r3, [r7, #24]
 80146fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014700:	2b00      	cmp	r3, #0
 8014702:	d00a      	beq.n	801471a <tcp_input+0x5ea>
 8014704:	69bb      	ldr	r3, [r7, #24]
 8014706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801470a:	69ba      	ldr	r2, [r7, #24]
 801470c:	6910      	ldr	r0, [r2, #16]
 801470e:	89fa      	ldrh	r2, [r7, #14]
 8014710:	69b9      	ldr	r1, [r7, #24]
 8014712:	4798      	blx	r3
 8014714:	4603      	mov	r3, r0
 8014716:	74fb      	strb	r3, [r7, #19]
 8014718:	e001      	b.n	801471e <tcp_input+0x5ee>
 801471a:	2300      	movs	r3, #0
 801471c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801471e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014722:	f113 0f0d 	cmn.w	r3, #13
 8014726:	f000 8098 	beq.w	801485a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801472a:	4b7a      	ldr	r3, [pc, #488]	; (8014914 <tcp_input+0x7e4>)
 801472c:	2200      	movs	r2, #0
 801472e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014730:	69b8      	ldr	r0, [r7, #24]
 8014732:	f000 f907 	bl	8014944 <tcp_input_delayed_close>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	f040 8090 	bne.w	801485e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801473e:	4b76      	ldr	r3, [pc, #472]	; (8014918 <tcp_input+0x7e8>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d041      	beq.n	80147ca <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014746:	69bb      	ldr	r3, [r7, #24]
 8014748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801474a:	2b00      	cmp	r3, #0
 801474c:	d006      	beq.n	801475c <tcp_input+0x62c>
 801474e:	4b73      	ldr	r3, [pc, #460]	; (801491c <tcp_input+0x7ec>)
 8014750:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014754:	4972      	ldr	r1, [pc, #456]	; (8014920 <tcp_input+0x7f0>)
 8014756:	4873      	ldr	r0, [pc, #460]	; (8014924 <tcp_input+0x7f4>)
 8014758:	f00a f9e8 	bl	801eb2c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801475c:	69bb      	ldr	r3, [r7, #24]
 801475e:	8b5b      	ldrh	r3, [r3, #26]
 8014760:	f003 0310 	and.w	r3, r3, #16
 8014764:	2b00      	cmp	r3, #0
 8014766:	d008      	beq.n	801477a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014768:	4b6b      	ldr	r3, [pc, #428]	; (8014918 <tcp_input+0x7e8>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	4618      	mov	r0, r3
 801476e:	f7fd f935 	bl	80119dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014772:	69b8      	ldr	r0, [r7, #24]
 8014774:	f7fe f8ae 	bl	80128d4 <tcp_abort>
            goto aborted;
 8014778:	e078      	b.n	801486c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014780:	2b00      	cmp	r3, #0
 8014782:	d00c      	beq.n	801479e <tcp_input+0x66e>
 8014784:	69bb      	ldr	r3, [r7, #24]
 8014786:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801478a:	69bb      	ldr	r3, [r7, #24]
 801478c:	6918      	ldr	r0, [r3, #16]
 801478e:	4b62      	ldr	r3, [pc, #392]	; (8014918 <tcp_input+0x7e8>)
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	2300      	movs	r3, #0
 8014794:	69b9      	ldr	r1, [r7, #24]
 8014796:	47a0      	blx	r4
 8014798:	4603      	mov	r3, r0
 801479a:	74fb      	strb	r3, [r7, #19]
 801479c:	e008      	b.n	80147b0 <tcp_input+0x680>
 801479e:	4b5e      	ldr	r3, [pc, #376]	; (8014918 <tcp_input+0x7e8>)
 80147a0:	681a      	ldr	r2, [r3, #0]
 80147a2:	2300      	movs	r3, #0
 80147a4:	69b9      	ldr	r1, [r7, #24]
 80147a6:	2000      	movs	r0, #0
 80147a8:	f7ff f884 	bl	80138b4 <tcp_recv_null>
 80147ac:	4603      	mov	r3, r0
 80147ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80147b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147b4:	f113 0f0d 	cmn.w	r3, #13
 80147b8:	d053      	beq.n	8014862 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80147ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d003      	beq.n	80147ca <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80147c2:	4b55      	ldr	r3, [pc, #340]	; (8014918 <tcp_input+0x7e8>)
 80147c4:	681a      	ldr	r2, [r3, #0]
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80147ca:	4b50      	ldr	r3, [pc, #320]	; (801490c <tcp_input+0x7dc>)
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	f003 0320 	and.w	r3, r3, #32
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d030      	beq.n	8014838 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80147d6:	69bb      	ldr	r3, [r7, #24]
 80147d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d009      	beq.n	80147f2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80147de:	69bb      	ldr	r3, [r7, #24]
 80147e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147e2:	7b5a      	ldrb	r2, [r3, #13]
 80147e4:	69bb      	ldr	r3, [r7, #24]
 80147e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147e8:	f042 0220 	orr.w	r2, r2, #32
 80147ec:	b2d2      	uxtb	r2, r2
 80147ee:	735a      	strb	r2, [r3, #13]
 80147f0:	e022      	b.n	8014838 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80147f2:	69bb      	ldr	r3, [r7, #24]
 80147f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80147f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80147fa:	d005      	beq.n	8014808 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80147fc:	69bb      	ldr	r3, [r7, #24]
 80147fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014800:	3301      	adds	r3, #1
 8014802:	b29a      	uxth	r2, r3
 8014804:	69bb      	ldr	r3, [r7, #24]
 8014806:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014808:	69bb      	ldr	r3, [r7, #24]
 801480a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801480e:	2b00      	cmp	r3, #0
 8014810:	d00b      	beq.n	801482a <tcp_input+0x6fa>
 8014812:	69bb      	ldr	r3, [r7, #24]
 8014814:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014818:	69bb      	ldr	r3, [r7, #24]
 801481a:	6918      	ldr	r0, [r3, #16]
 801481c:	2300      	movs	r3, #0
 801481e:	2200      	movs	r2, #0
 8014820:	69b9      	ldr	r1, [r7, #24]
 8014822:	47a0      	blx	r4
 8014824:	4603      	mov	r3, r0
 8014826:	74fb      	strb	r3, [r7, #19]
 8014828:	e001      	b.n	801482e <tcp_input+0x6fe>
 801482a:	2300      	movs	r3, #0
 801482c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801482e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014832:	f113 0f0d 	cmn.w	r3, #13
 8014836:	d016      	beq.n	8014866 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014838:	4b33      	ldr	r3, [pc, #204]	; (8014908 <tcp_input+0x7d8>)
 801483a:	2200      	movs	r2, #0
 801483c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801483e:	69b8      	ldr	r0, [r7, #24]
 8014840:	f000 f880 	bl	8014944 <tcp_input_delayed_close>
 8014844:	4603      	mov	r3, r0
 8014846:	2b00      	cmp	r3, #0
 8014848:	d10f      	bne.n	801486a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801484a:	69b8      	ldr	r0, [r7, #24]
 801484c:	f002 ff70 	bl	8017730 <tcp_output>
 8014850:	e00c      	b.n	801486c <tcp_input+0x73c>
        goto aborted;
 8014852:	bf00      	nop
 8014854:	e00a      	b.n	801486c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014856:	bf00      	nop
 8014858:	e008      	b.n	801486c <tcp_input+0x73c>
              goto aborted;
 801485a:	bf00      	nop
 801485c:	e006      	b.n	801486c <tcp_input+0x73c>
          goto aborted;
 801485e:	bf00      	nop
 8014860:	e004      	b.n	801486c <tcp_input+0x73c>
            goto aborted;
 8014862:	bf00      	nop
 8014864:	e002      	b.n	801486c <tcp_input+0x73c>
              goto aborted;
 8014866:	bf00      	nop
 8014868:	e000      	b.n	801486c <tcp_input+0x73c>
          goto aborted;
 801486a:	bf00      	nop
    tcp_input_pcb = NULL;
 801486c:	4b26      	ldr	r3, [pc, #152]	; (8014908 <tcp_input+0x7d8>)
 801486e:	2200      	movs	r2, #0
 8014870:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014872:	4b29      	ldr	r3, [pc, #164]	; (8014918 <tcp_input+0x7e8>)
 8014874:	2200      	movs	r2, #0
 8014876:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014878:	4b2b      	ldr	r3, [pc, #172]	; (8014928 <tcp_input+0x7f8>)
 801487a:	685b      	ldr	r3, [r3, #4]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d03f      	beq.n	8014900 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8014880:	4b29      	ldr	r3, [pc, #164]	; (8014928 <tcp_input+0x7f8>)
 8014882:	685b      	ldr	r3, [r3, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	f7fd f8a9 	bl	80119dc <pbuf_free>
      inseg.p = NULL;
 801488a:	4b27      	ldr	r3, [pc, #156]	; (8014928 <tcp_input+0x7f8>)
 801488c:	2200      	movs	r2, #0
 801488e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014890:	e036      	b.n	8014900 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014892:	4b26      	ldr	r3, [pc, #152]	; (801492c <tcp_input+0x7fc>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	899b      	ldrh	r3, [r3, #12]
 8014898:	b29b      	uxth	r3, r3
 801489a:	4618      	mov	r0, r3
 801489c:	f7fa fcde 	bl	800f25c <lwip_htons>
 80148a0:	4603      	mov	r3, r0
 80148a2:	b2db      	uxtb	r3, r3
 80148a4:	f003 0304 	and.w	r3, r3, #4
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d118      	bne.n	80148de <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148ac:	4b20      	ldr	r3, [pc, #128]	; (8014930 <tcp_input+0x800>)
 80148ae:	6819      	ldr	r1, [r3, #0]
 80148b0:	4b20      	ldr	r3, [pc, #128]	; (8014934 <tcp_input+0x804>)
 80148b2:	881b      	ldrh	r3, [r3, #0]
 80148b4:	461a      	mov	r2, r3
 80148b6:	4b20      	ldr	r3, [pc, #128]	; (8014938 <tcp_input+0x808>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148bc:	4b1b      	ldr	r3, [pc, #108]	; (801492c <tcp_input+0x7fc>)
 80148be:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148c0:	885b      	ldrh	r3, [r3, #2]
 80148c2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148c4:	4a19      	ldr	r2, [pc, #100]	; (801492c <tcp_input+0x7fc>)
 80148c6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148c8:	8812      	ldrh	r2, [r2, #0]
 80148ca:	b292      	uxth	r2, r2
 80148cc:	9202      	str	r2, [sp, #8]
 80148ce:	9301      	str	r3, [sp, #4]
 80148d0:	4b1a      	ldr	r3, [pc, #104]	; (801493c <tcp_input+0x80c>)
 80148d2:	9300      	str	r3, [sp, #0]
 80148d4:	4b1a      	ldr	r3, [pc, #104]	; (8014940 <tcp_input+0x810>)
 80148d6:	4602      	mov	r2, r0
 80148d8:	2000      	movs	r0, #0
 80148da:	f003 fce9 	bl	80182b0 <tcp_rst>
    pbuf_free(p);
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f7fd f87c 	bl	80119dc <pbuf_free>
  return;
 80148e4:	e00c      	b.n	8014900 <tcp_input+0x7d0>
    goto dropped;
 80148e6:	bf00      	nop
 80148e8:	e006      	b.n	80148f8 <tcp_input+0x7c8>
    goto dropped;
 80148ea:	bf00      	nop
 80148ec:	e004      	b.n	80148f8 <tcp_input+0x7c8>
    goto dropped;
 80148ee:	bf00      	nop
 80148f0:	e002      	b.n	80148f8 <tcp_input+0x7c8>
      goto dropped;
 80148f2:	bf00      	nop
 80148f4:	e000      	b.n	80148f8 <tcp_input+0x7c8>
      goto dropped;
 80148f6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f7fd f86f 	bl	80119dc <pbuf_free>
 80148fe:	e000      	b.n	8014902 <tcp_input+0x7d2>
  return;
 8014900:	bf00      	nop
}
 8014902:	3724      	adds	r7, #36	; 0x24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd90      	pop	{r4, r7, pc}
 8014908:	2001b0dc 	.word	0x2001b0dc
 801490c:	2001438d 	.word	0x2001438d
 8014910:	2001b0c8 	.word	0x2001b0c8
 8014914:	20014388 	.word	0x20014388
 8014918:	20014390 	.word	0x20014390
 801491c:	08024904 	.word	0x08024904
 8014920:	08024ab8 	.word	0x08024ab8
 8014924:	08024950 	.word	0x08024950
 8014928:	2001435c 	.word	0x2001435c
 801492c:	20014370 	.word	0x20014370
 8014930:	20014384 	.word	0x20014384
 8014934:	2001438a 	.word	0x2001438a
 8014938:	20014380 	.word	0x20014380
 801493c:	200176e4 	.word	0x200176e4
 8014940:	200176e8 	.word	0x200176e8

08014944 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b082      	sub	sp, #8
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d106      	bne.n	8014960 <tcp_input_delayed_close+0x1c>
 8014952:	4b17      	ldr	r3, [pc, #92]	; (80149b0 <tcp_input_delayed_close+0x6c>)
 8014954:	f240 225a 	movw	r2, #602	; 0x25a
 8014958:	4916      	ldr	r1, [pc, #88]	; (80149b4 <tcp_input_delayed_close+0x70>)
 801495a:	4817      	ldr	r0, [pc, #92]	; (80149b8 <tcp_input_delayed_close+0x74>)
 801495c:	f00a f8e6 	bl	801eb2c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014960:	4b16      	ldr	r3, [pc, #88]	; (80149bc <tcp_input_delayed_close+0x78>)
 8014962:	781b      	ldrb	r3, [r3, #0]
 8014964:	f003 0310 	and.w	r3, r3, #16
 8014968:	2b00      	cmp	r3, #0
 801496a:	d01c      	beq.n	80149a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	8b5b      	ldrh	r3, [r3, #26]
 8014970:	f003 0310 	and.w	r3, r3, #16
 8014974:	2b00      	cmp	r3, #0
 8014976:	d10d      	bne.n	8014994 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801497e:	2b00      	cmp	r3, #0
 8014980:	d008      	beq.n	8014994 <tcp_input_delayed_close+0x50>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014988:	687a      	ldr	r2, [r7, #4]
 801498a:	6912      	ldr	r2, [r2, #16]
 801498c:	f06f 010e 	mvn.w	r1, #14
 8014990:	4610      	mov	r0, r2
 8014992:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014994:	6879      	ldr	r1, [r7, #4]
 8014996:	480a      	ldr	r0, [pc, #40]	; (80149c0 <tcp_input_delayed_close+0x7c>)
 8014998:	f7ff fa52 	bl	8013e40 <tcp_pcb_remove>
    tcp_free(pcb);
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f7fd fc55 	bl	801224c <tcp_free>
    return 1;
 80149a2:	2301      	movs	r3, #1
 80149a4:	e000      	b.n	80149a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80149a6:	2300      	movs	r3, #0
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3708      	adds	r7, #8
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	08024904 	.word	0x08024904
 80149b4:	08024ad4 	.word	0x08024ad4
 80149b8:	08024950 	.word	0x08024950
 80149bc:	2001438d 	.word	0x2001438d
 80149c0:	2001b0c8 	.word	0x2001b0c8

080149c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80149c4:	b590      	push	{r4, r7, lr}
 80149c6:	b08b      	sub	sp, #44	; 0x2c
 80149c8:	af04      	add	r7, sp, #16
 80149ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80149cc:	4b6f      	ldr	r3, [pc, #444]	; (8014b8c <tcp_listen_input+0x1c8>)
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	f003 0304 	and.w	r3, r3, #4
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	f040 80d2 	bne.w	8014b7e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d106      	bne.n	80149ee <tcp_listen_input+0x2a>
 80149e0:	4b6b      	ldr	r3, [pc, #428]	; (8014b90 <tcp_listen_input+0x1cc>)
 80149e2:	f240 2281 	movw	r2, #641	; 0x281
 80149e6:	496b      	ldr	r1, [pc, #428]	; (8014b94 <tcp_listen_input+0x1d0>)
 80149e8:	486b      	ldr	r0, [pc, #428]	; (8014b98 <tcp_listen_input+0x1d4>)
 80149ea:	f00a f89f 	bl	801eb2c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80149ee:	4b67      	ldr	r3, [pc, #412]	; (8014b8c <tcp_listen_input+0x1c8>)
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	f003 0310 	and.w	r3, r3, #16
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d019      	beq.n	8014a2e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149fa:	4b68      	ldr	r3, [pc, #416]	; (8014b9c <tcp_listen_input+0x1d8>)
 80149fc:	6819      	ldr	r1, [r3, #0]
 80149fe:	4b68      	ldr	r3, [pc, #416]	; (8014ba0 <tcp_listen_input+0x1dc>)
 8014a00:	881b      	ldrh	r3, [r3, #0]
 8014a02:	461a      	mov	r2, r3
 8014a04:	4b67      	ldr	r3, [pc, #412]	; (8014ba4 <tcp_listen_input+0x1e0>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a0a:	4b67      	ldr	r3, [pc, #412]	; (8014ba8 <tcp_listen_input+0x1e4>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a0e:	885b      	ldrh	r3, [r3, #2]
 8014a10:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a12:	4a65      	ldr	r2, [pc, #404]	; (8014ba8 <tcp_listen_input+0x1e4>)
 8014a14:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a16:	8812      	ldrh	r2, [r2, #0]
 8014a18:	b292      	uxth	r2, r2
 8014a1a:	9202      	str	r2, [sp, #8]
 8014a1c:	9301      	str	r3, [sp, #4]
 8014a1e:	4b63      	ldr	r3, [pc, #396]	; (8014bac <tcp_listen_input+0x1e8>)
 8014a20:	9300      	str	r3, [sp, #0]
 8014a22:	4b63      	ldr	r3, [pc, #396]	; (8014bb0 <tcp_listen_input+0x1ec>)
 8014a24:	4602      	mov	r2, r0
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f003 fc42 	bl	80182b0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014a2c:	e0a9      	b.n	8014b82 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014a2e:	4b57      	ldr	r3, [pc, #348]	; (8014b8c <tcp_listen_input+0x1c8>)
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	f003 0302 	and.w	r3, r3, #2
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	f000 80a3 	beq.w	8014b82 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	7d5b      	ldrb	r3, [r3, #21]
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7ff f85b 	bl	8013afc <tcp_alloc>
 8014a46:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d111      	bne.n	8014a72 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	699b      	ldr	r3, [r3, #24]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d00a      	beq.n	8014a6c <tcp_listen_input+0xa8>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	699b      	ldr	r3, [r3, #24]
 8014a5a:	687a      	ldr	r2, [r7, #4]
 8014a5c:	6910      	ldr	r0, [r2, #16]
 8014a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8014a62:	2100      	movs	r1, #0
 8014a64:	4798      	blx	r3
 8014a66:	4603      	mov	r3, r0
 8014a68:	73bb      	strb	r3, [r7, #14]
      return;
 8014a6a:	e08b      	b.n	8014b84 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014a6c:	23f0      	movs	r3, #240	; 0xf0
 8014a6e:	73bb      	strb	r3, [r7, #14]
      return;
 8014a70:	e088      	b.n	8014b84 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014a72:	4b50      	ldr	r3, [pc, #320]	; (8014bb4 <tcp_listen_input+0x1f0>)
 8014a74:	695a      	ldr	r2, [r3, #20]
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014a7a:	4b4e      	ldr	r3, [pc, #312]	; (8014bb4 <tcp_listen_input+0x1f0>)
 8014a7c:	691a      	ldr	r2, [r3, #16]
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	8ada      	ldrh	r2, [r3, #22]
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014a8a:	4b47      	ldr	r3, [pc, #284]	; (8014ba8 <tcp_listen_input+0x1e4>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	881b      	ldrh	r3, [r3, #0]
 8014a90:	b29a      	uxth	r2, r3
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	2203      	movs	r2, #3
 8014a9a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014a9c:	4b41      	ldr	r3, [pc, #260]	; (8014ba4 <tcp_listen_input+0x1e0>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	1c5a      	adds	r2, r3, #1
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014aae:	6978      	ldr	r0, [r7, #20]
 8014ab0:	f7ff fa5a 	bl	8013f68 <tcp_next_iss>
 8014ab4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	693a      	ldr	r2, [r7, #16]
 8014aba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	693a      	ldr	r2, [r7, #16]
 8014ac0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	693a      	ldr	r2, [r7, #16]
 8014ac6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	693a      	ldr	r2, [r7, #16]
 8014acc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014ace:	4b35      	ldr	r3, [pc, #212]	; (8014ba4 <tcp_listen_input+0x1e0>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	1e5a      	subs	r2, r3, #1
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	691a      	ldr	r2, [r3, #16]
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	7a5b      	ldrb	r3, [r3, #9]
 8014aea:	f003 030c 	and.w	r3, r3, #12
 8014aee:	b2da      	uxtb	r2, r3
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	7a1a      	ldrb	r2, [r3, #8]
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014afc:	4b2e      	ldr	r3, [pc, #184]	; (8014bb8 <tcp_listen_input+0x1f4>)
 8014afe:	681a      	ldr	r2, [r3, #0]
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	60da      	str	r2, [r3, #12]
 8014b04:	4a2c      	ldr	r2, [pc, #176]	; (8014bb8 <tcp_listen_input+0x1f4>)
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	6013      	str	r3, [r2, #0]
 8014b0a:	f003 fd93 	bl	8018634 <tcp_timer_needed>
 8014b0e:	4b2b      	ldr	r3, [pc, #172]	; (8014bbc <tcp_listen_input+0x1f8>)
 8014b10:	2201      	movs	r2, #1
 8014b12:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014b14:	6978      	ldr	r0, [r7, #20]
 8014b16:	f001 fd8d 	bl	8016634 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014b1a:	4b23      	ldr	r3, [pc, #140]	; (8014ba8 <tcp_listen_input+0x1e4>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	89db      	ldrh	r3, [r3, #14]
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	697b      	ldr	r3, [r7, #20]
 8014b24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	3304      	adds	r3, #4
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f007 fc75 	bl	801c42c <ip4_route>
 8014b42:	4601      	mov	r1, r0
 8014b44:	697b      	ldr	r3, [r7, #20]
 8014b46:	3304      	adds	r3, #4
 8014b48:	461a      	mov	r2, r3
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f7ff fa32 	bl	8013fb4 <tcp_eff_send_mss_netif>
 8014b50:	4603      	mov	r3, r0
 8014b52:	461a      	mov	r2, r3
 8014b54:	697b      	ldr	r3, [r7, #20]
 8014b56:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014b58:	2112      	movs	r1, #18
 8014b5a:	6978      	ldr	r0, [r7, #20]
 8014b5c:	f002 fcfa 	bl	8017554 <tcp_enqueue_flags>
 8014b60:	4603      	mov	r3, r0
 8014b62:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d004      	beq.n	8014b76 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014b6c:	2100      	movs	r1, #0
 8014b6e:	6978      	ldr	r0, [r7, #20]
 8014b70:	f7fd fdf2 	bl	8012758 <tcp_abandon>
      return;
 8014b74:	e006      	b.n	8014b84 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014b76:	6978      	ldr	r0, [r7, #20]
 8014b78:	f002 fdda 	bl	8017730 <tcp_output>
  return;
 8014b7c:	e001      	b.n	8014b82 <tcp_listen_input+0x1be>
    return;
 8014b7e:	bf00      	nop
 8014b80:	e000      	b.n	8014b84 <tcp_listen_input+0x1c0>
  return;
 8014b82:	bf00      	nop
}
 8014b84:	371c      	adds	r7, #28
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd90      	pop	{r4, r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	2001438c 	.word	0x2001438c
 8014b90:	08024904 	.word	0x08024904
 8014b94:	08024afc 	.word	0x08024afc
 8014b98:	08024950 	.word	0x08024950
 8014b9c:	20014384 	.word	0x20014384
 8014ba0:	2001438a 	.word	0x2001438a
 8014ba4:	20014380 	.word	0x20014380
 8014ba8:	20014370 	.word	0x20014370
 8014bac:	200176e4 	.word	0x200176e4
 8014bb0:	200176e8 	.word	0x200176e8
 8014bb4:	200176d4 	.word	0x200176d4
 8014bb8:	2001b0c8 	.word	0x2001b0c8
 8014bbc:	2001b0c4 	.word	0x2001b0c4

08014bc0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b086      	sub	sp, #24
 8014bc4:	af04      	add	r7, sp, #16
 8014bc6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014bc8:	4b2f      	ldr	r3, [pc, #188]	; (8014c88 <tcp_timewait_input+0xc8>)
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	f003 0304 	and.w	r3, r3, #4
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d153      	bne.n	8014c7c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d106      	bne.n	8014be8 <tcp_timewait_input+0x28>
 8014bda:	4b2c      	ldr	r3, [pc, #176]	; (8014c8c <tcp_timewait_input+0xcc>)
 8014bdc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014be0:	492b      	ldr	r1, [pc, #172]	; (8014c90 <tcp_timewait_input+0xd0>)
 8014be2:	482c      	ldr	r0, [pc, #176]	; (8014c94 <tcp_timewait_input+0xd4>)
 8014be4:	f009 ffa2 	bl	801eb2c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014be8:	4b27      	ldr	r3, [pc, #156]	; (8014c88 <tcp_timewait_input+0xc8>)
 8014bea:	781b      	ldrb	r3, [r3, #0]
 8014bec:	f003 0302 	and.w	r3, r3, #2
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d02a      	beq.n	8014c4a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014bf4:	4b28      	ldr	r3, [pc, #160]	; (8014c98 <tcp_timewait_input+0xd8>)
 8014bf6:	681a      	ldr	r2, [r3, #0]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bfc:	1ad3      	subs	r3, r2, r3
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	db2d      	blt.n	8014c5e <tcp_timewait_input+0x9e>
 8014c02:	4b25      	ldr	r3, [pc, #148]	; (8014c98 <tcp_timewait_input+0xd8>)
 8014c04:	681a      	ldr	r2, [r3, #0]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c0a:	6879      	ldr	r1, [r7, #4]
 8014c0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c0e:	440b      	add	r3, r1
 8014c10:	1ad3      	subs	r3, r2, r3
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	dc23      	bgt.n	8014c5e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c16:	4b21      	ldr	r3, [pc, #132]	; (8014c9c <tcp_timewait_input+0xdc>)
 8014c18:	6819      	ldr	r1, [r3, #0]
 8014c1a:	4b21      	ldr	r3, [pc, #132]	; (8014ca0 <tcp_timewait_input+0xe0>)
 8014c1c:	881b      	ldrh	r3, [r3, #0]
 8014c1e:	461a      	mov	r2, r3
 8014c20:	4b1d      	ldr	r3, [pc, #116]	; (8014c98 <tcp_timewait_input+0xd8>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014c26:	4b1f      	ldr	r3, [pc, #124]	; (8014ca4 <tcp_timewait_input+0xe4>)
 8014c28:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c2a:	885b      	ldrh	r3, [r3, #2]
 8014c2c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014c2e:	4a1d      	ldr	r2, [pc, #116]	; (8014ca4 <tcp_timewait_input+0xe4>)
 8014c30:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c32:	8812      	ldrh	r2, [r2, #0]
 8014c34:	b292      	uxth	r2, r2
 8014c36:	9202      	str	r2, [sp, #8]
 8014c38:	9301      	str	r3, [sp, #4]
 8014c3a:	4b1b      	ldr	r3, [pc, #108]	; (8014ca8 <tcp_timewait_input+0xe8>)
 8014c3c:	9300      	str	r3, [sp, #0]
 8014c3e:	4b1b      	ldr	r3, [pc, #108]	; (8014cac <tcp_timewait_input+0xec>)
 8014c40:	4602      	mov	r2, r0
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f003 fb34 	bl	80182b0 <tcp_rst>
      return;
 8014c48:	e01b      	b.n	8014c82 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014c4a:	4b0f      	ldr	r3, [pc, #60]	; (8014c88 <tcp_timewait_input+0xc8>)
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	f003 0301 	and.w	r3, r3, #1
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d003      	beq.n	8014c5e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014c56:	4b16      	ldr	r3, [pc, #88]	; (8014cb0 <tcp_timewait_input+0xf0>)
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014c5e:	4b10      	ldr	r3, [pc, #64]	; (8014ca0 <tcp_timewait_input+0xe0>)
 8014c60:	881b      	ldrh	r3, [r3, #0]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d00c      	beq.n	8014c80 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	8b5b      	ldrh	r3, [r3, #26]
 8014c6a:	f043 0302 	orr.w	r3, r3, #2
 8014c6e:	b29a      	uxth	r2, r3
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f002 fd5b 	bl	8017730 <tcp_output>
  }
  return;
 8014c7a:	e001      	b.n	8014c80 <tcp_timewait_input+0xc0>
    return;
 8014c7c:	bf00      	nop
 8014c7e:	e000      	b.n	8014c82 <tcp_timewait_input+0xc2>
  return;
 8014c80:	bf00      	nop
}
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	2001438c 	.word	0x2001438c
 8014c8c:	08024904 	.word	0x08024904
 8014c90:	08024b1c 	.word	0x08024b1c
 8014c94:	08024950 	.word	0x08024950
 8014c98:	20014380 	.word	0x20014380
 8014c9c:	20014384 	.word	0x20014384
 8014ca0:	2001438a 	.word	0x2001438a
 8014ca4:	20014370 	.word	0x20014370
 8014ca8:	200176e4 	.word	0x200176e4
 8014cac:	200176e8 	.word	0x200176e8
 8014cb0:	2001b0cc 	.word	0x2001b0cc

08014cb4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014cb4:	b590      	push	{r4, r7, lr}
 8014cb6:	b08d      	sub	sp, #52	; 0x34
 8014cb8:	af04      	add	r7, sp, #16
 8014cba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d106      	bne.n	8014cd8 <tcp_process+0x24>
 8014cca:	4ba5      	ldr	r3, [pc, #660]	; (8014f60 <tcp_process+0x2ac>)
 8014ccc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014cd0:	49a4      	ldr	r1, [pc, #656]	; (8014f64 <tcp_process+0x2b0>)
 8014cd2:	48a5      	ldr	r0, [pc, #660]	; (8014f68 <tcp_process+0x2b4>)
 8014cd4:	f009 ff2a 	bl	801eb2c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014cd8:	4ba4      	ldr	r3, [pc, #656]	; (8014f6c <tcp_process+0x2b8>)
 8014cda:	781b      	ldrb	r3, [r3, #0]
 8014cdc:	f003 0304 	and.w	r3, r3, #4
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d04e      	beq.n	8014d82 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	7d1b      	ldrb	r3, [r3, #20]
 8014ce8:	2b02      	cmp	r3, #2
 8014cea:	d108      	bne.n	8014cfe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014cf0:	4b9f      	ldr	r3, [pc, #636]	; (8014f70 <tcp_process+0x2bc>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d123      	bne.n	8014d40 <tcp_process+0x8c>
        acceptable = 1;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	77fb      	strb	r3, [r7, #31]
 8014cfc:	e020      	b.n	8014d40 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d02:	4b9c      	ldr	r3, [pc, #624]	; (8014f74 <tcp_process+0x2c0>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d102      	bne.n	8014d10 <tcp_process+0x5c>
        acceptable = 1;
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	77fb      	strb	r3, [r7, #31]
 8014d0e:	e017      	b.n	8014d40 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014d10:	4b98      	ldr	r3, [pc, #608]	; (8014f74 <tcp_process+0x2c0>)
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	db10      	blt.n	8014d40 <tcp_process+0x8c>
 8014d1e:	4b95      	ldr	r3, [pc, #596]	; (8014f74 <tcp_process+0x2c0>)
 8014d20:	681a      	ldr	r2, [r3, #0]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d26:	6879      	ldr	r1, [r7, #4]
 8014d28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014d2a:	440b      	add	r3, r1
 8014d2c:	1ad3      	subs	r3, r2, r3
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	dc06      	bgt.n	8014d40 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	8b5b      	ldrh	r3, [r3, #26]
 8014d36:	f043 0302 	orr.w	r3, r3, #2
 8014d3a:	b29a      	uxth	r2, r3
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014d40:	7ffb      	ldrb	r3, [r7, #31]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d01b      	beq.n	8014d7e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	7d1b      	ldrb	r3, [r3, #20]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d106      	bne.n	8014d5c <tcp_process+0xa8>
 8014d4e:	4b84      	ldr	r3, [pc, #528]	; (8014f60 <tcp_process+0x2ac>)
 8014d50:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014d54:	4988      	ldr	r1, [pc, #544]	; (8014f78 <tcp_process+0x2c4>)
 8014d56:	4884      	ldr	r0, [pc, #528]	; (8014f68 <tcp_process+0x2b4>)
 8014d58:	f009 fee8 	bl	801eb2c <iprintf>
      recv_flags |= TF_RESET;
 8014d5c:	4b87      	ldr	r3, [pc, #540]	; (8014f7c <tcp_process+0x2c8>)
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	f043 0308 	orr.w	r3, r3, #8
 8014d64:	b2da      	uxtb	r2, r3
 8014d66:	4b85      	ldr	r3, [pc, #532]	; (8014f7c <tcp_process+0x2c8>)
 8014d68:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	8b5b      	ldrh	r3, [r3, #26]
 8014d6e:	f023 0301 	bic.w	r3, r3, #1
 8014d72:	b29a      	uxth	r2, r3
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014d78:	f06f 030d 	mvn.w	r3, #13
 8014d7c:	e37a      	b.n	8015474 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	e378      	b.n	8015474 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014d82:	4b7a      	ldr	r3, [pc, #488]	; (8014f6c <tcp_process+0x2b8>)
 8014d84:	781b      	ldrb	r3, [r3, #0]
 8014d86:	f003 0302 	and.w	r3, r3, #2
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d010      	beq.n	8014db0 <tcp_process+0xfc>
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	7d1b      	ldrb	r3, [r3, #20]
 8014d92:	2b02      	cmp	r3, #2
 8014d94:	d00c      	beq.n	8014db0 <tcp_process+0xfc>
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	7d1b      	ldrb	r3, [r3, #20]
 8014d9a:	2b03      	cmp	r3, #3
 8014d9c:	d008      	beq.n	8014db0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	8b5b      	ldrh	r3, [r3, #26]
 8014da2:	f043 0302 	orr.w	r3, r3, #2
 8014da6:	b29a      	uxth	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014dac:	2300      	movs	r3, #0
 8014dae:	e361      	b.n	8015474 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	8b5b      	ldrh	r3, [r3, #26]
 8014db4:	f003 0310 	and.w	r3, r3, #16
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d103      	bne.n	8014dc4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014dbc:	4b70      	ldr	r3, [pc, #448]	; (8014f80 <tcp_process+0x2cc>)
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f001 fc2d 	bl	8016634 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	7d1b      	ldrb	r3, [r3, #20]
 8014dde:	3b02      	subs	r3, #2
 8014de0:	2b07      	cmp	r3, #7
 8014de2:	f200 8337 	bhi.w	8015454 <tcp_process+0x7a0>
 8014de6:	a201      	add	r2, pc, #4	; (adr r2, 8014dec <tcp_process+0x138>)
 8014de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dec:	08014e0d 	.word	0x08014e0d
 8014df0:	0801503d 	.word	0x0801503d
 8014df4:	080151b5 	.word	0x080151b5
 8014df8:	080151df 	.word	0x080151df
 8014dfc:	08015303 	.word	0x08015303
 8014e00:	080151b5 	.word	0x080151b5
 8014e04:	0801538f 	.word	0x0801538f
 8014e08:	0801541f 	.word	0x0801541f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014e0c:	4b57      	ldr	r3, [pc, #348]	; (8014f6c <tcp_process+0x2b8>)
 8014e0e:	781b      	ldrb	r3, [r3, #0]
 8014e10:	f003 0310 	and.w	r3, r3, #16
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	f000 80e4 	beq.w	8014fe2 <tcp_process+0x32e>
 8014e1a:	4b54      	ldr	r3, [pc, #336]	; (8014f6c <tcp_process+0x2b8>)
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	f003 0302 	and.w	r3, r3, #2
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	f000 80dd 	beq.w	8014fe2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e2c:	1c5a      	adds	r2, r3, #1
 8014e2e:	4b50      	ldr	r3, [pc, #320]	; (8014f70 <tcp_process+0x2bc>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	429a      	cmp	r2, r3
 8014e34:	f040 80d5 	bne.w	8014fe2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014e38:	4b4e      	ldr	r3, [pc, #312]	; (8014f74 <tcp_process+0x2c0>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	1c5a      	adds	r2, r3, #1
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014e4a:	4b49      	ldr	r3, [pc, #292]	; (8014f70 <tcp_process+0x2bc>)
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014e52:	4b4c      	ldr	r3, [pc, #304]	; (8014f84 <tcp_process+0x2d0>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	89db      	ldrh	r3, [r3, #14]
 8014e58:	b29a      	uxth	r2, r3
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014e6c:	4b41      	ldr	r3, [pc, #260]	; (8014f74 <tcp_process+0x2c0>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	1e5a      	subs	r2, r3, #1
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2204      	movs	r2, #4
 8014e7a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	3304      	adds	r3, #4
 8014e84:	4618      	mov	r0, r3
 8014e86:	f007 fad1 	bl	801c42c <ip4_route>
 8014e8a:	4601      	mov	r1, r0
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	3304      	adds	r3, #4
 8014e90:	461a      	mov	r2, r3
 8014e92:	4620      	mov	r0, r4
 8014e94:	f7ff f88e 	bl	8013fb4 <tcp_eff_send_mss_netif>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ea4:	009a      	lsls	r2, r3, #2
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014eaa:	005b      	lsls	r3, r3, #1
 8014eac:	f241 111c 	movw	r1, #4380	; 0x111c
 8014eb0:	428b      	cmp	r3, r1
 8014eb2:	bf38      	it	cc
 8014eb4:	460b      	movcc	r3, r1
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d204      	bcs.n	8014ec4 <tcp_process+0x210>
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ebe:	009b      	lsls	r3, r3, #2
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	e00d      	b.n	8014ee0 <tcp_process+0x22c>
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ec8:	005b      	lsls	r3, r3, #1
 8014eca:	f241 121c 	movw	r2, #4380	; 0x111c
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	d904      	bls.n	8014edc <tcp_process+0x228>
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	b29b      	uxth	r3, r3
 8014eda:	e001      	b.n	8014ee0 <tcp_process+0x22c>
 8014edc:	f241 131c 	movw	r3, #4380	; 0x111c
 8014ee0:	687a      	ldr	r2, [r7, #4]
 8014ee2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d106      	bne.n	8014efe <tcp_process+0x24a>
 8014ef0:	4b1b      	ldr	r3, [pc, #108]	; (8014f60 <tcp_process+0x2ac>)
 8014ef2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014ef6:	4924      	ldr	r1, [pc, #144]	; (8014f88 <tcp_process+0x2d4>)
 8014ef8:	481b      	ldr	r0, [pc, #108]	; (8014f68 <tcp_process+0x2b4>)
 8014efa:	f009 fe17 	bl	801eb2c <iprintf>
        --pcb->snd_queuelen;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f04:	3b01      	subs	r3, #1
 8014f06:	b29a      	uxth	r2, r3
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f12:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8014f14:	697b      	ldr	r3, [r7, #20]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d111      	bne.n	8014f3e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f1e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d106      	bne.n	8014f34 <tcp_process+0x280>
 8014f26:	4b0e      	ldr	r3, [pc, #56]	; (8014f60 <tcp_process+0x2ac>)
 8014f28:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014f2c:	4917      	ldr	r1, [pc, #92]	; (8014f8c <tcp_process+0x2d8>)
 8014f2e:	480e      	ldr	r0, [pc, #56]	; (8014f68 <tcp_process+0x2b4>)
 8014f30:	f009 fdfc 	bl	801eb2c <iprintf>
          pcb->unsent = rseg->next;
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	681a      	ldr	r2, [r3, #0]
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8014f3c:	e003      	b.n	8014f46 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	681a      	ldr	r2, [r3, #0]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014f46:	6978      	ldr	r0, [r7, #20]
 8014f48:	f7fe fc6f 	bl	801382a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d11d      	bne.n	8014f90 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f5a:	861a      	strh	r2, [r3, #48]	; 0x30
 8014f5c:	e01f      	b.n	8014f9e <tcp_process+0x2ea>
 8014f5e:	bf00      	nop
 8014f60:	08024904 	.word	0x08024904
 8014f64:	08024b3c 	.word	0x08024b3c
 8014f68:	08024950 	.word	0x08024950
 8014f6c:	2001438c 	.word	0x2001438c
 8014f70:	20014384 	.word	0x20014384
 8014f74:	20014380 	.word	0x20014380
 8014f78:	08024b58 	.word	0x08024b58
 8014f7c:	2001438d 	.word	0x2001438d
 8014f80:	2001b0cc 	.word	0x2001b0cc
 8014f84:	20014370 	.word	0x20014370
 8014f88:	08024b78 	.word	0x08024b78
 8014f8c:	08024b90 	.word	0x08024b90
        } else {
          pcb->rtime = 0;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2200      	movs	r2, #0
 8014f94:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2200      	movs	r2, #0
 8014f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d00a      	beq.n	8014fbe <tcp_process+0x30a>
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014fae:	687a      	ldr	r2, [r7, #4]
 8014fb0:	6910      	ldr	r0, [r2, #16]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	6879      	ldr	r1, [r7, #4]
 8014fb6:	4798      	blx	r3
 8014fb8:	4603      	mov	r3, r0
 8014fba:	77bb      	strb	r3, [r7, #30]
 8014fbc:	e001      	b.n	8014fc2 <tcp_process+0x30e>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8014fc2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014fc6:	f113 0f0d 	cmn.w	r3, #13
 8014fca:	d102      	bne.n	8014fd2 <tcp_process+0x31e>
          return ERR_ABRT;
 8014fcc:	f06f 030c 	mvn.w	r3, #12
 8014fd0:	e250      	b.n	8015474 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	8b5b      	ldrh	r3, [r3, #26]
 8014fd6:	f043 0302 	orr.w	r3, r3, #2
 8014fda:	b29a      	uxth	r2, r3
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014fe0:	e23a      	b.n	8015458 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014fe2:	4b9d      	ldr	r3, [pc, #628]	; (8015258 <tcp_process+0x5a4>)
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	f003 0310 	and.w	r3, r3, #16
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	f000 8234 	beq.w	8015458 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ff0:	4b9a      	ldr	r3, [pc, #616]	; (801525c <tcp_process+0x5a8>)
 8014ff2:	6819      	ldr	r1, [r3, #0]
 8014ff4:	4b9a      	ldr	r3, [pc, #616]	; (8015260 <tcp_process+0x5ac>)
 8014ff6:	881b      	ldrh	r3, [r3, #0]
 8014ff8:	461a      	mov	r2, r3
 8014ffa:	4b9a      	ldr	r3, [pc, #616]	; (8015264 <tcp_process+0x5b0>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015000:	4b99      	ldr	r3, [pc, #612]	; (8015268 <tcp_process+0x5b4>)
 8015002:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015004:	885b      	ldrh	r3, [r3, #2]
 8015006:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015008:	4a97      	ldr	r2, [pc, #604]	; (8015268 <tcp_process+0x5b4>)
 801500a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801500c:	8812      	ldrh	r2, [r2, #0]
 801500e:	b292      	uxth	r2, r2
 8015010:	9202      	str	r2, [sp, #8]
 8015012:	9301      	str	r3, [sp, #4]
 8015014:	4b95      	ldr	r3, [pc, #596]	; (801526c <tcp_process+0x5b8>)
 8015016:	9300      	str	r3, [sp, #0]
 8015018:	4b95      	ldr	r3, [pc, #596]	; (8015270 <tcp_process+0x5bc>)
 801501a:	4602      	mov	r2, r0
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f003 f947 	bl	80182b0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015028:	2b05      	cmp	r3, #5
 801502a:	f200 8215 	bhi.w	8015458 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2200      	movs	r2, #0
 8015032:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f002 ff11 	bl	8017e5c <tcp_rexmit_rto>
      break;
 801503a:	e20d      	b.n	8015458 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801503c:	4b86      	ldr	r3, [pc, #536]	; (8015258 <tcp_process+0x5a4>)
 801503e:	781b      	ldrb	r3, [r3, #0]
 8015040:	f003 0310 	and.w	r3, r3, #16
 8015044:	2b00      	cmp	r3, #0
 8015046:	f000 80a1 	beq.w	801518c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801504a:	4b84      	ldr	r3, [pc, #528]	; (801525c <tcp_process+0x5a8>)
 801504c:	681a      	ldr	r2, [r3, #0]
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	3b01      	subs	r3, #1
 8015056:	2b00      	cmp	r3, #0
 8015058:	db7e      	blt.n	8015158 <tcp_process+0x4a4>
 801505a:	4b80      	ldr	r3, [pc, #512]	; (801525c <tcp_process+0x5a8>)
 801505c:	681a      	ldr	r2, [r3, #0]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015062:	1ad3      	subs	r3, r2, r3
 8015064:	2b00      	cmp	r3, #0
 8015066:	dc77      	bgt.n	8015158 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2204      	movs	r2, #4
 801506c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015072:	2b00      	cmp	r3, #0
 8015074:	d102      	bne.n	801507c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015076:	23fa      	movs	r3, #250	; 0xfa
 8015078:	77bb      	strb	r3, [r7, #30]
 801507a:	e01d      	b.n	80150b8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015080:	699b      	ldr	r3, [r3, #24]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d106      	bne.n	8015094 <tcp_process+0x3e0>
 8015086:	4b7b      	ldr	r3, [pc, #492]	; (8015274 <tcp_process+0x5c0>)
 8015088:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801508c:	497a      	ldr	r1, [pc, #488]	; (8015278 <tcp_process+0x5c4>)
 801508e:	487b      	ldr	r0, [pc, #492]	; (801527c <tcp_process+0x5c8>)
 8015090:	f009 fd4c 	bl	801eb2c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015098:	699b      	ldr	r3, [r3, #24]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d00a      	beq.n	80150b4 <tcp_process+0x400>
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80150a2:	699b      	ldr	r3, [r3, #24]
 80150a4:	687a      	ldr	r2, [r7, #4]
 80150a6:	6910      	ldr	r0, [r2, #16]
 80150a8:	2200      	movs	r2, #0
 80150aa:	6879      	ldr	r1, [r7, #4]
 80150ac:	4798      	blx	r3
 80150ae:	4603      	mov	r3, r0
 80150b0:	77bb      	strb	r3, [r7, #30]
 80150b2:	e001      	b.n	80150b8 <tcp_process+0x404>
 80150b4:	23f0      	movs	r3, #240	; 0xf0
 80150b6:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 80150b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d00a      	beq.n	80150d6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80150c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80150c4:	f113 0f0d 	cmn.w	r3, #13
 80150c8:	d002      	beq.n	80150d0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7fd fc02 	bl	80128d4 <tcp_abort>
            }
            return ERR_ABRT;
 80150d0:	f06f 030c 	mvn.w	r3, #12
 80150d4:	e1ce      	b.n	8015474 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f000 fae0 	bl	801569c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80150dc:	4b68      	ldr	r3, [pc, #416]	; (8015280 <tcp_process+0x5cc>)
 80150de:	881b      	ldrh	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d005      	beq.n	80150f0 <tcp_process+0x43c>
            recv_acked--;
 80150e4:	4b66      	ldr	r3, [pc, #408]	; (8015280 <tcp_process+0x5cc>)
 80150e6:	881b      	ldrh	r3, [r3, #0]
 80150e8:	3b01      	subs	r3, #1
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	4b64      	ldr	r3, [pc, #400]	; (8015280 <tcp_process+0x5cc>)
 80150ee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150f4:	009a      	lsls	r2, r3, #2
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150fa:	005b      	lsls	r3, r3, #1
 80150fc:	f241 111c 	movw	r1, #4380	; 0x111c
 8015100:	428b      	cmp	r3, r1
 8015102:	bf38      	it	cc
 8015104:	460b      	movcc	r3, r1
 8015106:	429a      	cmp	r2, r3
 8015108:	d204      	bcs.n	8015114 <tcp_process+0x460>
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801510e:	009b      	lsls	r3, r3, #2
 8015110:	b29b      	uxth	r3, r3
 8015112:	e00d      	b.n	8015130 <tcp_process+0x47c>
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015118:	005b      	lsls	r3, r3, #1
 801511a:	f241 121c 	movw	r2, #4380	; 0x111c
 801511e:	4293      	cmp	r3, r2
 8015120:	d904      	bls.n	801512c <tcp_process+0x478>
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015126:	005b      	lsls	r3, r3, #1
 8015128:	b29b      	uxth	r3, r3
 801512a:	e001      	b.n	8015130 <tcp_process+0x47c>
 801512c:	f241 131c 	movw	r3, #4380	; 0x111c
 8015130:	687a      	ldr	r2, [r7, #4]
 8015132:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015136:	4b53      	ldr	r3, [pc, #332]	; (8015284 <tcp_process+0x5d0>)
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	f003 0320 	and.w	r3, r3, #32
 801513e:	2b00      	cmp	r3, #0
 8015140:	d037      	beq.n	80151b2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	8b5b      	ldrh	r3, [r3, #26]
 8015146:	f043 0302 	orr.w	r3, r3, #2
 801514a:	b29a      	uxth	r2, r3
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2207      	movs	r2, #7
 8015154:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015156:	e02c      	b.n	80151b2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015158:	4b40      	ldr	r3, [pc, #256]	; (801525c <tcp_process+0x5a8>)
 801515a:	6819      	ldr	r1, [r3, #0]
 801515c:	4b40      	ldr	r3, [pc, #256]	; (8015260 <tcp_process+0x5ac>)
 801515e:	881b      	ldrh	r3, [r3, #0]
 8015160:	461a      	mov	r2, r3
 8015162:	4b40      	ldr	r3, [pc, #256]	; (8015264 <tcp_process+0x5b0>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015168:	4b3f      	ldr	r3, [pc, #252]	; (8015268 <tcp_process+0x5b4>)
 801516a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801516c:	885b      	ldrh	r3, [r3, #2]
 801516e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015170:	4a3d      	ldr	r2, [pc, #244]	; (8015268 <tcp_process+0x5b4>)
 8015172:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015174:	8812      	ldrh	r2, [r2, #0]
 8015176:	b292      	uxth	r2, r2
 8015178:	9202      	str	r2, [sp, #8]
 801517a:	9301      	str	r3, [sp, #4]
 801517c:	4b3b      	ldr	r3, [pc, #236]	; (801526c <tcp_process+0x5b8>)
 801517e:	9300      	str	r3, [sp, #0]
 8015180:	4b3b      	ldr	r3, [pc, #236]	; (8015270 <tcp_process+0x5bc>)
 8015182:	4602      	mov	r2, r0
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f003 f893 	bl	80182b0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801518a:	e167      	b.n	801545c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801518c:	4b32      	ldr	r3, [pc, #200]	; (8015258 <tcp_process+0x5a4>)
 801518e:	781b      	ldrb	r3, [r3, #0]
 8015190:	f003 0302 	and.w	r3, r3, #2
 8015194:	2b00      	cmp	r3, #0
 8015196:	f000 8161 	beq.w	801545c <tcp_process+0x7a8>
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801519e:	1e5a      	subs	r2, r3, #1
 80151a0:	4b30      	ldr	r3, [pc, #192]	; (8015264 <tcp_process+0x5b0>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	f040 8159 	bne.w	801545c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f002 fe78 	bl	8017ea0 <tcp_rexmit>
      break;
 80151b0:	e154      	b.n	801545c <tcp_process+0x7a8>
 80151b2:	e153      	b.n	801545c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f000 fa71 	bl	801569c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80151ba:	4b32      	ldr	r3, [pc, #200]	; (8015284 <tcp_process+0x5d0>)
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	f003 0320 	and.w	r3, r3, #32
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f000 814c 	beq.w	8015460 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	8b5b      	ldrh	r3, [r3, #26]
 80151cc:	f043 0302 	orr.w	r3, r3, #2
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2207      	movs	r2, #7
 80151da:	751a      	strb	r2, [r3, #20]
      }
      break;
 80151dc:	e140      	b.n	8015460 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f000 fa5c 	bl	801569c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80151e4:	4b27      	ldr	r3, [pc, #156]	; (8015284 <tcp_process+0x5d0>)
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	f003 0320 	and.w	r3, r3, #32
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d071      	beq.n	80152d4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80151f0:	4b19      	ldr	r3, [pc, #100]	; (8015258 <tcp_process+0x5a4>)
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	f003 0310 	and.w	r3, r3, #16
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d060      	beq.n	80152be <tcp_process+0x60a>
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015200:	4b16      	ldr	r3, [pc, #88]	; (801525c <tcp_process+0x5a8>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	429a      	cmp	r2, r3
 8015206:	d15a      	bne.n	80152be <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801520c:	2b00      	cmp	r3, #0
 801520e:	d156      	bne.n	80152be <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	8b5b      	ldrh	r3, [r3, #26]
 8015214:	f043 0302 	orr.w	r3, r3, #2
 8015218:	b29a      	uxth	r2, r3
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f7fe fdbe 	bl	8013da0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015224:	4b18      	ldr	r3, [pc, #96]	; (8015288 <tcp_process+0x5d4>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	429a      	cmp	r2, r3
 801522c:	d105      	bne.n	801523a <tcp_process+0x586>
 801522e:	4b16      	ldr	r3, [pc, #88]	; (8015288 <tcp_process+0x5d4>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	68db      	ldr	r3, [r3, #12]
 8015234:	4a14      	ldr	r2, [pc, #80]	; (8015288 <tcp_process+0x5d4>)
 8015236:	6013      	str	r3, [r2, #0]
 8015238:	e02e      	b.n	8015298 <tcp_process+0x5e4>
 801523a:	4b13      	ldr	r3, [pc, #76]	; (8015288 <tcp_process+0x5d4>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	613b      	str	r3, [r7, #16]
 8015240:	e027      	b.n	8015292 <tcp_process+0x5de>
 8015242:	693b      	ldr	r3, [r7, #16]
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	429a      	cmp	r2, r3
 801524a:	d11f      	bne.n	801528c <tcp_process+0x5d8>
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	68da      	ldr	r2, [r3, #12]
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	60da      	str	r2, [r3, #12]
 8015254:	e020      	b.n	8015298 <tcp_process+0x5e4>
 8015256:	bf00      	nop
 8015258:	2001438c 	.word	0x2001438c
 801525c:	20014384 	.word	0x20014384
 8015260:	2001438a 	.word	0x2001438a
 8015264:	20014380 	.word	0x20014380
 8015268:	20014370 	.word	0x20014370
 801526c:	200176e4 	.word	0x200176e4
 8015270:	200176e8 	.word	0x200176e8
 8015274:	08024904 	.word	0x08024904
 8015278:	08024ba4 	.word	0x08024ba4
 801527c:	08024950 	.word	0x08024950
 8015280:	20014388 	.word	0x20014388
 8015284:	2001438d 	.word	0x2001438d
 8015288:	2001b0c8 	.word	0x2001b0c8
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	68db      	ldr	r3, [r3, #12]
 8015290:	613b      	str	r3, [r7, #16]
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d1d4      	bne.n	8015242 <tcp_process+0x58e>
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2200      	movs	r2, #0
 801529c:	60da      	str	r2, [r3, #12]
 801529e:	4b77      	ldr	r3, [pc, #476]	; (801547c <tcp_process+0x7c8>)
 80152a0:	2201      	movs	r2, #1
 80152a2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	220a      	movs	r2, #10
 80152a8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80152aa:	4b75      	ldr	r3, [pc, #468]	; (8015480 <tcp_process+0x7cc>)
 80152ac:	681a      	ldr	r2, [r3, #0]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	60da      	str	r2, [r3, #12]
 80152b2:	4a73      	ldr	r2, [pc, #460]	; (8015480 <tcp_process+0x7cc>)
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6013      	str	r3, [r2, #0]
 80152b8:	f003 f9bc 	bl	8018634 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80152bc:	e0d2      	b.n	8015464 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	8b5b      	ldrh	r3, [r3, #26]
 80152c2:	f043 0302 	orr.w	r3, r3, #2
 80152c6:	b29a      	uxth	r2, r3
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2208      	movs	r2, #8
 80152d0:	751a      	strb	r2, [r3, #20]
      break;
 80152d2:	e0c7      	b.n	8015464 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80152d4:	4b6b      	ldr	r3, [pc, #428]	; (8015484 <tcp_process+0x7d0>)
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	f003 0310 	and.w	r3, r3, #16
 80152dc:	2b00      	cmp	r3, #0
 80152de:	f000 80c1 	beq.w	8015464 <tcp_process+0x7b0>
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152e6:	4b68      	ldr	r3, [pc, #416]	; (8015488 <tcp_process+0x7d4>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	f040 80ba 	bne.w	8015464 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f040 80b5 	bne.w	8015464 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	2206      	movs	r2, #6
 80152fe:	751a      	strb	r2, [r3, #20]
      break;
 8015300:	e0b0      	b.n	8015464 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f000 f9ca 	bl	801569c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015308:	4b60      	ldr	r3, [pc, #384]	; (801548c <tcp_process+0x7d8>)
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	f003 0320 	and.w	r3, r3, #32
 8015310:	2b00      	cmp	r3, #0
 8015312:	f000 80a9 	beq.w	8015468 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	8b5b      	ldrh	r3, [r3, #26]
 801531a:	f043 0302 	orr.w	r3, r3, #2
 801531e:	b29a      	uxth	r2, r3
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	f7fe fd3b 	bl	8013da0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801532a:	4b59      	ldr	r3, [pc, #356]	; (8015490 <tcp_process+0x7dc>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	687a      	ldr	r2, [r7, #4]
 8015330:	429a      	cmp	r2, r3
 8015332:	d105      	bne.n	8015340 <tcp_process+0x68c>
 8015334:	4b56      	ldr	r3, [pc, #344]	; (8015490 <tcp_process+0x7dc>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	68db      	ldr	r3, [r3, #12]
 801533a:	4a55      	ldr	r2, [pc, #340]	; (8015490 <tcp_process+0x7dc>)
 801533c:	6013      	str	r3, [r2, #0]
 801533e:	e013      	b.n	8015368 <tcp_process+0x6b4>
 8015340:	4b53      	ldr	r3, [pc, #332]	; (8015490 <tcp_process+0x7dc>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	60fb      	str	r3, [r7, #12]
 8015346:	e00c      	b.n	8015362 <tcp_process+0x6ae>
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	68db      	ldr	r3, [r3, #12]
 801534c:	687a      	ldr	r2, [r7, #4]
 801534e:	429a      	cmp	r2, r3
 8015350:	d104      	bne.n	801535c <tcp_process+0x6a8>
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	68da      	ldr	r2, [r3, #12]
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	60da      	str	r2, [r3, #12]
 801535a:	e005      	b.n	8015368 <tcp_process+0x6b4>
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	68db      	ldr	r3, [r3, #12]
 8015360:	60fb      	str	r3, [r7, #12]
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d1ef      	bne.n	8015348 <tcp_process+0x694>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2200      	movs	r2, #0
 801536c:	60da      	str	r2, [r3, #12]
 801536e:	4b43      	ldr	r3, [pc, #268]	; (801547c <tcp_process+0x7c8>)
 8015370:	2201      	movs	r2, #1
 8015372:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	220a      	movs	r2, #10
 8015378:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801537a:	4b41      	ldr	r3, [pc, #260]	; (8015480 <tcp_process+0x7cc>)
 801537c:	681a      	ldr	r2, [r3, #0]
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	60da      	str	r2, [r3, #12]
 8015382:	4a3f      	ldr	r2, [pc, #252]	; (8015480 <tcp_process+0x7cc>)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	6013      	str	r3, [r2, #0]
 8015388:	f003 f954 	bl	8018634 <tcp_timer_needed>
      }
      break;
 801538c:	e06c      	b.n	8015468 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f000 f984 	bl	801569c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015394:	4b3b      	ldr	r3, [pc, #236]	; (8015484 <tcp_process+0x7d0>)
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	f003 0310 	and.w	r3, r3, #16
 801539c:	2b00      	cmp	r3, #0
 801539e:	d065      	beq.n	801546c <tcp_process+0x7b8>
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80153a4:	4b38      	ldr	r3, [pc, #224]	; (8015488 <tcp_process+0x7d4>)
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	429a      	cmp	r2, r3
 80153aa:	d15f      	bne.n	801546c <tcp_process+0x7b8>
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d15b      	bne.n	801546c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f7fe fcf3 	bl	8013da0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80153ba:	4b35      	ldr	r3, [pc, #212]	; (8015490 <tcp_process+0x7dc>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d105      	bne.n	80153d0 <tcp_process+0x71c>
 80153c4:	4b32      	ldr	r3, [pc, #200]	; (8015490 <tcp_process+0x7dc>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	4a31      	ldr	r2, [pc, #196]	; (8015490 <tcp_process+0x7dc>)
 80153cc:	6013      	str	r3, [r2, #0]
 80153ce:	e013      	b.n	80153f8 <tcp_process+0x744>
 80153d0:	4b2f      	ldr	r3, [pc, #188]	; (8015490 <tcp_process+0x7dc>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	61bb      	str	r3, [r7, #24]
 80153d6:	e00c      	b.n	80153f2 <tcp_process+0x73e>
 80153d8:	69bb      	ldr	r3, [r7, #24]
 80153da:	68db      	ldr	r3, [r3, #12]
 80153dc:	687a      	ldr	r2, [r7, #4]
 80153de:	429a      	cmp	r2, r3
 80153e0:	d104      	bne.n	80153ec <tcp_process+0x738>
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	68da      	ldr	r2, [r3, #12]
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	60da      	str	r2, [r3, #12]
 80153ea:	e005      	b.n	80153f8 <tcp_process+0x744>
 80153ec:	69bb      	ldr	r3, [r7, #24]
 80153ee:	68db      	ldr	r3, [r3, #12]
 80153f0:	61bb      	str	r3, [r7, #24]
 80153f2:	69bb      	ldr	r3, [r7, #24]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d1ef      	bne.n	80153d8 <tcp_process+0x724>
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2200      	movs	r2, #0
 80153fc:	60da      	str	r2, [r3, #12]
 80153fe:	4b1f      	ldr	r3, [pc, #124]	; (801547c <tcp_process+0x7c8>)
 8015400:	2201      	movs	r2, #1
 8015402:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	220a      	movs	r2, #10
 8015408:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801540a:	4b1d      	ldr	r3, [pc, #116]	; (8015480 <tcp_process+0x7cc>)
 801540c:	681a      	ldr	r2, [r3, #0]
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	60da      	str	r2, [r3, #12]
 8015412:	4a1b      	ldr	r2, [pc, #108]	; (8015480 <tcp_process+0x7cc>)
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6013      	str	r3, [r2, #0]
 8015418:	f003 f90c 	bl	8018634 <tcp_timer_needed>
      }
      break;
 801541c:	e026      	b.n	801546c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f000 f93c 	bl	801569c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015424:	4b17      	ldr	r3, [pc, #92]	; (8015484 <tcp_process+0x7d0>)
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	f003 0310 	and.w	r3, r3, #16
 801542c:	2b00      	cmp	r3, #0
 801542e:	d01f      	beq.n	8015470 <tcp_process+0x7bc>
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015434:	4b14      	ldr	r3, [pc, #80]	; (8015488 <tcp_process+0x7d4>)
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	429a      	cmp	r2, r3
 801543a:	d119      	bne.n	8015470 <tcp_process+0x7bc>
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015440:	2b00      	cmp	r3, #0
 8015442:	d115      	bne.n	8015470 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015444:	4b11      	ldr	r3, [pc, #68]	; (801548c <tcp_process+0x7d8>)
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	f043 0310 	orr.w	r3, r3, #16
 801544c:	b2da      	uxtb	r2, r3
 801544e:	4b0f      	ldr	r3, [pc, #60]	; (801548c <tcp_process+0x7d8>)
 8015450:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015452:	e00d      	b.n	8015470 <tcp_process+0x7bc>
    default:
      break;
 8015454:	bf00      	nop
 8015456:	e00c      	b.n	8015472 <tcp_process+0x7be>
      break;
 8015458:	bf00      	nop
 801545a:	e00a      	b.n	8015472 <tcp_process+0x7be>
      break;
 801545c:	bf00      	nop
 801545e:	e008      	b.n	8015472 <tcp_process+0x7be>
      break;
 8015460:	bf00      	nop
 8015462:	e006      	b.n	8015472 <tcp_process+0x7be>
      break;
 8015464:	bf00      	nop
 8015466:	e004      	b.n	8015472 <tcp_process+0x7be>
      break;
 8015468:	bf00      	nop
 801546a:	e002      	b.n	8015472 <tcp_process+0x7be>
      break;
 801546c:	bf00      	nop
 801546e:	e000      	b.n	8015472 <tcp_process+0x7be>
      break;
 8015470:	bf00      	nop
  }
  return ERR_OK;
 8015472:	2300      	movs	r3, #0
}
 8015474:	4618      	mov	r0, r3
 8015476:	3724      	adds	r7, #36	; 0x24
 8015478:	46bd      	mov	sp, r7
 801547a:	bd90      	pop	{r4, r7, pc}
 801547c:	2001b0c4 	.word	0x2001b0c4
 8015480:	2001b0d8 	.word	0x2001b0d8
 8015484:	2001438c 	.word	0x2001438c
 8015488:	20014384 	.word	0x20014384
 801548c:	2001438d 	.word	0x2001438d
 8015490:	2001b0c8 	.word	0x2001b0c8

08015494 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015494:	b590      	push	{r4, r7, lr}
 8015496:	b085      	sub	sp, #20
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
 801549c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d106      	bne.n	80154b2 <tcp_oos_insert_segment+0x1e>
 80154a4:	4b3b      	ldr	r3, [pc, #236]	; (8015594 <tcp_oos_insert_segment+0x100>)
 80154a6:	f240 421f 	movw	r2, #1055	; 0x41f
 80154aa:	493b      	ldr	r1, [pc, #236]	; (8015598 <tcp_oos_insert_segment+0x104>)
 80154ac:	483b      	ldr	r0, [pc, #236]	; (801559c <tcp_oos_insert_segment+0x108>)
 80154ae:	f009 fb3d 	bl	801eb2c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	691b      	ldr	r3, [r3, #16]
 80154b6:	899b      	ldrh	r3, [r3, #12]
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7f9 fece 	bl	800f25c <lwip_htons>
 80154c0:	4603      	mov	r3, r0
 80154c2:	b2db      	uxtb	r3, r3
 80154c4:	f003 0301 	and.w	r3, r3, #1
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d028      	beq.n	801551e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80154cc:	6838      	ldr	r0, [r7, #0]
 80154ce:	f7fe f997 	bl	8013800 <tcp_segs_free>
    next = NULL;
 80154d2:	2300      	movs	r3, #0
 80154d4:	603b      	str	r3, [r7, #0]
 80154d6:	e056      	b.n	8015586 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	691b      	ldr	r3, [r3, #16]
 80154dc:	899b      	ldrh	r3, [r3, #12]
 80154de:	b29b      	uxth	r3, r3
 80154e0:	4618      	mov	r0, r3
 80154e2:	f7f9 febb 	bl	800f25c <lwip_htons>
 80154e6:	4603      	mov	r3, r0
 80154e8:	b2db      	uxtb	r3, r3
 80154ea:	f003 0301 	and.w	r3, r3, #1
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d00d      	beq.n	801550e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	691b      	ldr	r3, [r3, #16]
 80154f6:	899b      	ldrh	r3, [r3, #12]
 80154f8:	b29c      	uxth	r4, r3
 80154fa:	2001      	movs	r0, #1
 80154fc:	f7f9 feae 	bl	800f25c <lwip_htons>
 8015500:	4603      	mov	r3, r0
 8015502:	461a      	mov	r2, r3
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	691b      	ldr	r3, [r3, #16]
 8015508:	4322      	orrs	r2, r4
 801550a:	b292      	uxth	r2, r2
 801550c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015518:	68f8      	ldr	r0, [r7, #12]
 801551a:	f7fe f986 	bl	801382a <tcp_seg_free>
    while (next &&
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d00e      	beq.n	8015542 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	891b      	ldrh	r3, [r3, #8]
 8015528:	461a      	mov	r2, r3
 801552a:	4b1d      	ldr	r3, [pc, #116]	; (80155a0 <tcp_oos_insert_segment+0x10c>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	441a      	add	r2, r3
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	691b      	ldr	r3, [r3, #16]
 8015534:	685b      	ldr	r3, [r3, #4]
 8015536:	6839      	ldr	r1, [r7, #0]
 8015538:	8909      	ldrh	r1, [r1, #8]
 801553a:	440b      	add	r3, r1
 801553c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801553e:	2b00      	cmp	r3, #0
 8015540:	daca      	bge.n	80154d8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d01e      	beq.n	8015586 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	891b      	ldrh	r3, [r3, #8]
 801554c:	461a      	mov	r2, r3
 801554e:	4b14      	ldr	r3, [pc, #80]	; (80155a0 <tcp_oos_insert_segment+0x10c>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	441a      	add	r2, r3
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	691b      	ldr	r3, [r3, #16]
 8015558:	685b      	ldr	r3, [r3, #4]
 801555a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801555c:	2b00      	cmp	r3, #0
 801555e:	dd12      	ble.n	8015586 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	691b      	ldr	r3, [r3, #16]
 8015564:	685b      	ldr	r3, [r3, #4]
 8015566:	b29a      	uxth	r2, r3
 8015568:	4b0d      	ldr	r3, [pc, #52]	; (80155a0 <tcp_oos_insert_segment+0x10c>)
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	b29b      	uxth	r3, r3
 801556e:	1ad3      	subs	r3, r2, r3
 8015570:	b29a      	uxth	r2, r3
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	685a      	ldr	r2, [r3, #4]
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	891b      	ldrh	r3, [r3, #8]
 801557e:	4619      	mov	r1, r3
 8015580:	4610      	mov	r0, r2
 8015582:	f7fc f873 	bl	801166c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	683a      	ldr	r2, [r7, #0]
 801558a:	601a      	str	r2, [r3, #0]
}
 801558c:	bf00      	nop
 801558e:	3714      	adds	r7, #20
 8015590:	46bd      	mov	sp, r7
 8015592:	bd90      	pop	{r4, r7, pc}
 8015594:	08024904 	.word	0x08024904
 8015598:	08024bc4 	.word	0x08024bc4
 801559c:	08024950 	.word	0x08024950
 80155a0:	20014380 	.word	0x20014380

080155a4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80155a4:	b5b0      	push	{r4, r5, r7, lr}
 80155a6:	b086      	sub	sp, #24
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	60f8      	str	r0, [r7, #12]
 80155ac:	60b9      	str	r1, [r7, #8]
 80155ae:	607a      	str	r2, [r7, #4]
 80155b0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80155b2:	e03e      	b.n	8015632 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	685b      	ldr	r3, [r3, #4]
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7fc fa98 	bl	8011af8 <pbuf_clen>
 80155c8:	4603      	mov	r3, r0
 80155ca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80155d2:	8a7a      	ldrh	r2, [r7, #18]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d906      	bls.n	80155e6 <tcp_free_acked_segments+0x42>
 80155d8:	4b2a      	ldr	r3, [pc, #168]	; (8015684 <tcp_free_acked_segments+0xe0>)
 80155da:	f240 4257 	movw	r2, #1111	; 0x457
 80155de:	492a      	ldr	r1, [pc, #168]	; (8015688 <tcp_free_acked_segments+0xe4>)
 80155e0:	482a      	ldr	r0, [pc, #168]	; (801568c <tcp_free_acked_segments+0xe8>)
 80155e2:	f009 faa3 	bl	801eb2c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80155ec:	8a7b      	ldrh	r3, [r7, #18]
 80155ee:	1ad3      	subs	r3, r2, r3
 80155f0:	b29a      	uxth	r2, r3
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80155f8:	697b      	ldr	r3, [r7, #20]
 80155fa:	891a      	ldrh	r2, [r3, #8]
 80155fc:	4b24      	ldr	r3, [pc, #144]	; (8015690 <tcp_free_acked_segments+0xec>)
 80155fe:	881b      	ldrh	r3, [r3, #0]
 8015600:	4413      	add	r3, r2
 8015602:	b29a      	uxth	r2, r3
 8015604:	4b22      	ldr	r3, [pc, #136]	; (8015690 <tcp_free_acked_segments+0xec>)
 8015606:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015608:	6978      	ldr	r0, [r7, #20]
 801560a:	f7fe f90e 	bl	801382a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015614:	2b00      	cmp	r3, #0
 8015616:	d00c      	beq.n	8015632 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d109      	bne.n	8015632 <tcp_free_acked_segments+0x8e>
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d106      	bne.n	8015632 <tcp_free_acked_segments+0x8e>
 8015624:	4b17      	ldr	r3, [pc, #92]	; (8015684 <tcp_free_acked_segments+0xe0>)
 8015626:	f240 4261 	movw	r2, #1121	; 0x461
 801562a:	491a      	ldr	r1, [pc, #104]	; (8015694 <tcp_free_acked_segments+0xf0>)
 801562c:	4817      	ldr	r0, [pc, #92]	; (801568c <tcp_free_acked_segments+0xe8>)
 801562e:	f009 fa7d 	bl	801eb2c <iprintf>
  while (seg_list != NULL &&
 8015632:	68bb      	ldr	r3, [r7, #8]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d020      	beq.n	801567a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	691b      	ldr	r3, [r3, #16]
 801563c:	685b      	ldr	r3, [r3, #4]
 801563e:	4618      	mov	r0, r3
 8015640:	f7f9 fe21 	bl	800f286 <lwip_htonl>
 8015644:	4604      	mov	r4, r0
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	891b      	ldrh	r3, [r3, #8]
 801564a:	461d      	mov	r5, r3
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	691b      	ldr	r3, [r3, #16]
 8015650:	899b      	ldrh	r3, [r3, #12]
 8015652:	b29b      	uxth	r3, r3
 8015654:	4618      	mov	r0, r3
 8015656:	f7f9 fe01 	bl	800f25c <lwip_htons>
 801565a:	4603      	mov	r3, r0
 801565c:	b2db      	uxtb	r3, r3
 801565e:	f003 0303 	and.w	r3, r3, #3
 8015662:	2b00      	cmp	r3, #0
 8015664:	d001      	beq.n	801566a <tcp_free_acked_segments+0xc6>
 8015666:	2301      	movs	r3, #1
 8015668:	e000      	b.n	801566c <tcp_free_acked_segments+0xc8>
 801566a:	2300      	movs	r3, #0
 801566c:	442b      	add	r3, r5
 801566e:	18e2      	adds	r2, r4, r3
 8015670:	4b09      	ldr	r3, [pc, #36]	; (8015698 <tcp_free_acked_segments+0xf4>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015676:	2b00      	cmp	r3, #0
 8015678:	dd9c      	ble.n	80155b4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801567a:	68bb      	ldr	r3, [r7, #8]
}
 801567c:	4618      	mov	r0, r3
 801567e:	3718      	adds	r7, #24
 8015680:	46bd      	mov	sp, r7
 8015682:	bdb0      	pop	{r4, r5, r7, pc}
 8015684:	08024904 	.word	0x08024904
 8015688:	08024bec 	.word	0x08024bec
 801568c:	08024950 	.word	0x08024950
 8015690:	20014388 	.word	0x20014388
 8015694:	08024c14 	.word	0x08024c14
 8015698:	20014384 	.word	0x20014384

0801569c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801569c:	b5b0      	push	{r4, r5, r7, lr}
 801569e:	b094      	sub	sp, #80	; 0x50
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80156a4:	2300      	movs	r3, #0
 80156a6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d106      	bne.n	80156bc <tcp_receive+0x20>
 80156ae:	4ba6      	ldr	r3, [pc, #664]	; (8015948 <tcp_receive+0x2ac>)
 80156b0:	f240 427b 	movw	r2, #1147	; 0x47b
 80156b4:	49a5      	ldr	r1, [pc, #660]	; (801594c <tcp_receive+0x2b0>)
 80156b6:	48a6      	ldr	r0, [pc, #664]	; (8015950 <tcp_receive+0x2b4>)
 80156b8:	f009 fa38 	bl	801eb2c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	7d1b      	ldrb	r3, [r3, #20]
 80156c0:	2b03      	cmp	r3, #3
 80156c2:	d806      	bhi.n	80156d2 <tcp_receive+0x36>
 80156c4:	4ba0      	ldr	r3, [pc, #640]	; (8015948 <tcp_receive+0x2ac>)
 80156c6:	f240 427c 	movw	r2, #1148	; 0x47c
 80156ca:	49a2      	ldr	r1, [pc, #648]	; (8015954 <tcp_receive+0x2b8>)
 80156cc:	48a0      	ldr	r0, [pc, #640]	; (8015950 <tcp_receive+0x2b4>)
 80156ce:	f009 fa2d 	bl	801eb2c <iprintf>

  if (flags & TCP_ACK) {
 80156d2:	4ba1      	ldr	r3, [pc, #644]	; (8015958 <tcp_receive+0x2bc>)
 80156d4:	781b      	ldrb	r3, [r3, #0]
 80156d6:	f003 0310 	and.w	r3, r3, #16
 80156da:	2b00      	cmp	r3, #0
 80156dc:	f000 8263 	beq.w	8015ba6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80156e6:	461a      	mov	r2, r3
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156ec:	4413      	add	r3, r2
 80156ee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80156f4:	4b99      	ldr	r3, [pc, #612]	; (801595c <tcp_receive+0x2c0>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	1ad3      	subs	r3, r2, r3
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	db1b      	blt.n	8015736 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015702:	4b96      	ldr	r3, [pc, #600]	; (801595c <tcp_receive+0x2c0>)
 8015704:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015706:	429a      	cmp	r2, r3
 8015708:	d106      	bne.n	8015718 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801570e:	4b94      	ldr	r3, [pc, #592]	; (8015960 <tcp_receive+0x2c4>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	1ad3      	subs	r3, r2, r3
 8015714:	2b00      	cmp	r3, #0
 8015716:	db0e      	blt.n	8015736 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801571c:	4b90      	ldr	r3, [pc, #576]	; (8015960 <tcp_receive+0x2c4>)
 801571e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015720:	429a      	cmp	r2, r3
 8015722:	d125      	bne.n	8015770 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015724:	4b8f      	ldr	r3, [pc, #572]	; (8015964 <tcp_receive+0x2c8>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	89db      	ldrh	r3, [r3, #14]
 801572a:	b29a      	uxth	r2, r3
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015732:	429a      	cmp	r2, r3
 8015734:	d91c      	bls.n	8015770 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015736:	4b8b      	ldr	r3, [pc, #556]	; (8015964 <tcp_receive+0x2c8>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	89db      	ldrh	r3, [r3, #14]
 801573c:	b29a      	uxth	r2, r3
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015750:	429a      	cmp	r2, r3
 8015752:	d205      	bcs.n	8015760 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015760:	4b7e      	ldr	r3, [pc, #504]	; (801595c <tcp_receive+0x2c0>)
 8015762:	681a      	ldr	r2, [r3, #0]
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8015768:	4b7d      	ldr	r3, [pc, #500]	; (8015960 <tcp_receive+0x2c4>)
 801576a:	681a      	ldr	r2, [r3, #0]
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015770:	4b7b      	ldr	r3, [pc, #492]	; (8015960 <tcp_receive+0x2c4>)
 8015772:	681a      	ldr	r2, [r3, #0]
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015778:	1ad3      	subs	r3, r2, r3
 801577a:	2b00      	cmp	r3, #0
 801577c:	dc58      	bgt.n	8015830 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801577e:	4b7a      	ldr	r3, [pc, #488]	; (8015968 <tcp_receive+0x2cc>)
 8015780:	881b      	ldrh	r3, [r3, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d14b      	bne.n	801581e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801578a:	687a      	ldr	r2, [r7, #4]
 801578c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015790:	4413      	add	r3, r2
 8015792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015794:	429a      	cmp	r2, r3
 8015796:	d142      	bne.n	801581e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801579e:	2b00      	cmp	r3, #0
 80157a0:	db3d      	blt.n	801581e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80157a6:	4b6e      	ldr	r3, [pc, #440]	; (8015960 <tcp_receive+0x2c4>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	429a      	cmp	r2, r3
 80157ac:	d137      	bne.n	801581e <tcp_receive+0x182>
              found_dupack = 1;
 80157ae:	2301      	movs	r3, #1
 80157b0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80157b8:	2bff      	cmp	r3, #255	; 0xff
 80157ba:	d007      	beq.n	80157cc <tcp_receive+0x130>
                ++pcb->dupacks;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80157c2:	3301      	adds	r3, #1
 80157c4:	b2da      	uxtb	r2, r3
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80157d2:	2b03      	cmp	r3, #3
 80157d4:	d91b      	bls.n	801580e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80157e0:	4413      	add	r3, r2
 80157e2:	b29a      	uxth	r2, r3
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d30a      	bcc.n	8015804 <tcp_receive+0x168>
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80157f8:	4413      	add	r3, r2
 80157fa:	b29a      	uxth	r2, r3
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015802:	e004      	b.n	801580e <tcp_receive+0x172>
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801580a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015814:	2b02      	cmp	r3, #2
 8015816:	d902      	bls.n	801581e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f002 fbad 	bl	8017f78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801581e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015820:	2b00      	cmp	r3, #0
 8015822:	f040 8160 	bne.w	8015ae6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2200      	movs	r2, #0
 801582a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801582e:	e15a      	b.n	8015ae6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015830:	4b4b      	ldr	r3, [pc, #300]	; (8015960 <tcp_receive+0x2c4>)
 8015832:	681a      	ldr	r2, [r3, #0]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015838:	1ad3      	subs	r3, r2, r3
 801583a:	3b01      	subs	r3, #1
 801583c:	2b00      	cmp	r3, #0
 801583e:	f2c0 814d 	blt.w	8015adc <tcp_receive+0x440>
 8015842:	4b47      	ldr	r3, [pc, #284]	; (8015960 <tcp_receive+0x2c4>)
 8015844:	681a      	ldr	r2, [r3, #0]
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801584a:	1ad3      	subs	r3, r2, r3
 801584c:	2b00      	cmp	r3, #0
 801584e:	f300 8145 	bgt.w	8015adc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	8b5b      	ldrh	r3, [r3, #26]
 8015856:	f003 0304 	and.w	r3, r3, #4
 801585a:	2b00      	cmp	r3, #0
 801585c:	d010      	beq.n	8015880 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	8b5b      	ldrh	r3, [r3, #26]
 8015862:	f023 0304 	bic.w	r3, r3, #4
 8015866:	b29a      	uxth	r2, r3
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2200      	movs	r2, #0
 801587c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2200      	movs	r2, #0
 8015884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801588e:	10db      	asrs	r3, r3, #3
 8015890:	b21b      	sxth	r3, r3
 8015892:	b29a      	uxth	r2, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801589a:	b29b      	uxth	r3, r3
 801589c:	4413      	add	r3, r2
 801589e:	b29b      	uxth	r3, r3
 80158a0:	b21a      	sxth	r2, r3
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80158a8:	4b2d      	ldr	r3, [pc, #180]	; (8015960 <tcp_receive+0x2c4>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	b29a      	uxth	r2, r3
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	1ad3      	subs	r3, r2, r3
 80158b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2200      	movs	r2, #0
 80158bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80158c0:	4b27      	ldr	r3, [pc, #156]	; (8015960 <tcp_receive+0x2c4>)
 80158c2:	681a      	ldr	r2, [r3, #0]
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	7d1b      	ldrb	r3, [r3, #20]
 80158cc:	2b03      	cmp	r3, #3
 80158ce:	f240 8096 	bls.w	80159fe <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80158de:	429a      	cmp	r2, r3
 80158e0:	d244      	bcs.n	801596c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	8b5b      	ldrh	r3, [r3, #26]
 80158e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d001      	beq.n	80158f2 <tcp_receive+0x256>
 80158ee:	2301      	movs	r3, #1
 80158f0:	e000      	b.n	80158f4 <tcp_receive+0x258>
 80158f2:	2302      	movs	r3, #2
 80158f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80158f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80158fc:	b29a      	uxth	r2, r3
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015902:	fb12 f303 	smulbb	r3, r2, r3
 8015906:	b29b      	uxth	r3, r3
 8015908:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801590a:	4293      	cmp	r3, r2
 801590c:	bf28      	it	cs
 801590e:	4613      	movcs	r3, r2
 8015910:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015918:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801591a:	4413      	add	r3, r2
 801591c:	b29a      	uxth	r2, r3
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015924:	429a      	cmp	r2, r3
 8015926:	d309      	bcc.n	801593c <tcp_receive+0x2a0>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801592e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015930:	4413      	add	r3, r2
 8015932:	b29a      	uxth	r2, r3
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801593a:	e060      	b.n	80159fe <tcp_receive+0x362>
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015942:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015946:	e05a      	b.n	80159fe <tcp_receive+0x362>
 8015948:	08024904 	.word	0x08024904
 801594c:	08024c34 	.word	0x08024c34
 8015950:	08024950 	.word	0x08024950
 8015954:	08024c50 	.word	0x08024c50
 8015958:	2001438c 	.word	0x2001438c
 801595c:	20014380 	.word	0x20014380
 8015960:	20014384 	.word	0x20014384
 8015964:	20014370 	.word	0x20014370
 8015968:	2001438a 	.word	0x2001438a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015972:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015974:	4413      	add	r3, r2
 8015976:	b29a      	uxth	r2, r3
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801597e:	429a      	cmp	r2, r3
 8015980:	d309      	bcc.n	8015996 <tcp_receive+0x2fa>
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015988:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801598a:	4413      	add	r3, r2
 801598c:	b29a      	uxth	r2, r3
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015994:	e004      	b.n	80159a0 <tcp_receive+0x304>
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801599c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d326      	bcc.n	80159fe <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80159bc:	1ad3      	subs	r3, r2, r3
 80159be:	b29a      	uxth	r2, r3
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159d0:	4413      	add	r3, r2
 80159d2:	b29a      	uxth	r2, r3
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80159da:	429a      	cmp	r2, r3
 80159dc:	d30a      	bcc.n	80159f4 <tcp_receive+0x358>
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159e8:	4413      	add	r3, r2
 80159ea:	b29a      	uxth	r2, r3
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80159f2:	e004      	b.n	80159fe <tcp_receive+0x362>
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a06:	4a98      	ldr	r2, [pc, #608]	; (8015c68 <tcp_receive+0x5cc>)
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f7ff fdcb 	bl	80155a4 <tcp_free_acked_segments>
 8015a0e:	4602      	mov	r2, r0
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a1c:	4a93      	ldr	r2, [pc, #588]	; (8015c6c <tcp_receive+0x5d0>)
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f7ff fdc0 	bl	80155a4 <tcp_free_acked_segments>
 8015a24:	4602      	mov	r2, r0
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d104      	bne.n	8015a3c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a38:	861a      	strh	r2, [r3, #48]	; 0x30
 8015a3a:	e002      	b.n	8015a42 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2200      	movs	r2, #0
 8015a40:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2200      	movs	r2, #0
 8015a46:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d103      	bne.n	8015a58 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2200      	movs	r2, #0
 8015a54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015a5e:	4b84      	ldr	r3, [pc, #528]	; (8015c70 <tcp_receive+0x5d4>)
 8015a60:	881b      	ldrh	r3, [r3, #0]
 8015a62:	4413      	add	r3, r2
 8015a64:	b29a      	uxth	r2, r3
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	8b5b      	ldrh	r3, [r3, #26]
 8015a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d035      	beq.n	8015ae4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d118      	bne.n	8015ab2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d00c      	beq.n	8015aa2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a90:	691b      	ldr	r3, [r3, #16]
 8015a92:	685b      	ldr	r3, [r3, #4]
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7f9 fbf6 	bl	800f286 <lwip_htonl>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	dc20      	bgt.n	8015ae4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	8b5b      	ldrh	r3, [r3, #26]
 8015aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015aaa:	b29a      	uxth	r2, r3
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015ab0:	e018      	b.n	8015ae4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015aba:	691b      	ldr	r3, [r3, #16]
 8015abc:	685b      	ldr	r3, [r3, #4]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f7f9 fbe1 	bl	800f286 <lwip_htonl>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	1ae3      	subs	r3, r4, r3
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	dc0b      	bgt.n	8015ae4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	8b5b      	ldrh	r3, [r3, #26]
 8015ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015ad4:	b29a      	uxth	r2, r3
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015ada:	e003      	b.n	8015ae4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f002 fc39 	bl	8018354 <tcp_send_empty_ack>
 8015ae2:	e000      	b.n	8015ae6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015ae4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d05b      	beq.n	8015ba6 <tcp_receive+0x50a>
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015af2:	4b60      	ldr	r3, [pc, #384]	; (8015c74 <tcp_receive+0x5d8>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	1ad3      	subs	r3, r2, r3
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	da54      	bge.n	8015ba6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015afc:	4b5e      	ldr	r3, [pc, #376]	; (8015c78 <tcp_receive+0x5dc>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	b29a      	uxth	r2, r3
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	1ad3      	subs	r3, r2, r3
 8015b0a:	b29b      	uxth	r3, r3
 8015b0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015b10:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015b1a:	10db      	asrs	r3, r3, #3
 8015b1c:	b21b      	sxth	r3, r3
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	1ad3      	subs	r3, r2, r3
 8015b22:	b29b      	uxth	r3, r3
 8015b24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015b2e:	b29a      	uxth	r2, r3
 8015b30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015b34:	4413      	add	r3, r2
 8015b36:	b29b      	uxth	r3, r3
 8015b38:	b21a      	sxth	r2, r3
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015b3e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	da05      	bge.n	8015b52 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8015b46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015b4a:	425b      	negs	r3, r3
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015b52:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015b5c:	109b      	asrs	r3, r3, #2
 8015b5e:	b21b      	sxth	r3, r3
 8015b60:	b29b      	uxth	r3, r3
 8015b62:	1ad3      	subs	r3, r2, r3
 8015b64:	b29b      	uxth	r3, r3
 8015b66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015b70:	b29a      	uxth	r2, r3
 8015b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015b76:	4413      	add	r3, r2
 8015b78:	b29b      	uxth	r3, r3
 8015b7a:	b21a      	sxth	r2, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015b86:	10db      	asrs	r3, r3, #3
 8015b88:	b21b      	sxth	r3, r3
 8015b8a:	b29a      	uxth	r2, r3
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	4413      	add	r3, r2
 8015b96:	b29b      	uxth	r3, r3
 8015b98:	b21a      	sxth	r2, r3
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015ba6:	4b35      	ldr	r3, [pc, #212]	; (8015c7c <tcp_receive+0x5e0>)
 8015ba8:	881b      	ldrh	r3, [r3, #0]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	f000 84e1 	beq.w	8016572 <tcp_receive+0xed6>
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	7d1b      	ldrb	r3, [r3, #20]
 8015bb4:	2b06      	cmp	r3, #6
 8015bb6:	f200 84dc 	bhi.w	8016572 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bbe:	4b30      	ldr	r3, [pc, #192]	; (8015c80 <tcp_receive+0x5e4>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	1ad3      	subs	r3, r2, r3
 8015bc4:	3b01      	subs	r3, #1
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	f2c0 808e 	blt.w	8015ce8 <tcp_receive+0x64c>
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bd0:	4b2a      	ldr	r3, [pc, #168]	; (8015c7c <tcp_receive+0x5e0>)
 8015bd2:	881b      	ldrh	r3, [r3, #0]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	4b2a      	ldr	r3, [pc, #168]	; (8015c80 <tcp_receive+0x5e4>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	440b      	add	r3, r1
 8015bdc:	1ad3      	subs	r3, r2, r3
 8015bde:	3301      	adds	r3, #1
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	f300 8081 	bgt.w	8015ce8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015be6:	4b27      	ldr	r3, [pc, #156]	; (8015c84 <tcp_receive+0x5e8>)
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bf0:	4b23      	ldr	r3, [pc, #140]	; (8015c80 <tcp_receive+0x5e4>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	1ad3      	subs	r3, r2, r3
 8015bf6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015bf8:	4b22      	ldr	r3, [pc, #136]	; (8015c84 <tcp_receive+0x5e8>)
 8015bfa:	685b      	ldr	r3, [r3, #4]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d106      	bne.n	8015c0e <tcp_receive+0x572>
 8015c00:	4b21      	ldr	r3, [pc, #132]	; (8015c88 <tcp_receive+0x5ec>)
 8015c02:	f240 5294 	movw	r2, #1428	; 0x594
 8015c06:	4921      	ldr	r1, [pc, #132]	; (8015c8c <tcp_receive+0x5f0>)
 8015c08:	4821      	ldr	r0, [pc, #132]	; (8015c90 <tcp_receive+0x5f4>)
 8015c0a:	f008 ff8f 	bl	801eb2c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015c14:	4293      	cmp	r3, r2
 8015c16:	d906      	bls.n	8015c26 <tcp_receive+0x58a>
 8015c18:	4b1b      	ldr	r3, [pc, #108]	; (8015c88 <tcp_receive+0x5ec>)
 8015c1a:	f240 5295 	movw	r2, #1429	; 0x595
 8015c1e:	491d      	ldr	r1, [pc, #116]	; (8015c94 <tcp_receive+0x5f8>)
 8015c20:	481b      	ldr	r0, [pc, #108]	; (8015c90 <tcp_receive+0x5f4>)
 8015c22:	f008 ff83 	bl	801eb2c <iprintf>
      off = (u16_t)off32;
 8015c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015c2c:	4b15      	ldr	r3, [pc, #84]	; (8015c84 <tcp_receive+0x5e8>)
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	891b      	ldrh	r3, [r3, #8]
 8015c32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d906      	bls.n	8015c48 <tcp_receive+0x5ac>
 8015c3a:	4b13      	ldr	r3, [pc, #76]	; (8015c88 <tcp_receive+0x5ec>)
 8015c3c:	f240 5297 	movw	r2, #1431	; 0x597
 8015c40:	4915      	ldr	r1, [pc, #84]	; (8015c98 <tcp_receive+0x5fc>)
 8015c42:	4813      	ldr	r0, [pc, #76]	; (8015c90 <tcp_receive+0x5f4>)
 8015c44:	f008 ff72 	bl	801eb2c <iprintf>
      inseg.len -= off;
 8015c48:	4b0e      	ldr	r3, [pc, #56]	; (8015c84 <tcp_receive+0x5e8>)
 8015c4a:	891a      	ldrh	r2, [r3, #8]
 8015c4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015c50:	1ad3      	subs	r3, r2, r3
 8015c52:	b29a      	uxth	r2, r3
 8015c54:	4b0b      	ldr	r3, [pc, #44]	; (8015c84 <tcp_receive+0x5e8>)
 8015c56:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015c58:	4b0a      	ldr	r3, [pc, #40]	; (8015c84 <tcp_receive+0x5e8>)
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	891a      	ldrh	r2, [r3, #8]
 8015c5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015c62:	1ad3      	subs	r3, r2, r3
 8015c64:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015c66:	e029      	b.n	8015cbc <tcp_receive+0x620>
 8015c68:	08024c6c 	.word	0x08024c6c
 8015c6c:	08024c74 	.word	0x08024c74
 8015c70:	20014388 	.word	0x20014388
 8015c74:	20014384 	.word	0x20014384
 8015c78:	2001b0cc 	.word	0x2001b0cc
 8015c7c:	2001438a 	.word	0x2001438a
 8015c80:	20014380 	.word	0x20014380
 8015c84:	2001435c 	.word	0x2001435c
 8015c88:	08024904 	.word	0x08024904
 8015c8c:	08024c7c 	.word	0x08024c7c
 8015c90:	08024950 	.word	0x08024950
 8015c94:	08024c8c 	.word	0x08024c8c
 8015c98:	08024c9c 	.word	0x08024c9c
        off -= p->len;
 8015c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c9e:	895b      	ldrh	r3, [r3, #10]
 8015ca0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015ca4:	1ad3      	subs	r3, r2, r3
 8015ca6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015cae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cbe:	895b      	ldrh	r3, [r3, #10]
 8015cc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d8e9      	bhi.n	8015c9c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015cc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015ccc:	4619      	mov	r1, r3
 8015cce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015cd0:	f7fb fdcc 	bl	801186c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cd8:	4a91      	ldr	r2, [pc, #580]	; (8015f20 <tcp_receive+0x884>)
 8015cda:	6013      	str	r3, [r2, #0]
 8015cdc:	4b91      	ldr	r3, [pc, #580]	; (8015f24 <tcp_receive+0x888>)
 8015cde:	691b      	ldr	r3, [r3, #16]
 8015ce0:	4a8f      	ldr	r2, [pc, #572]	; (8015f20 <tcp_receive+0x884>)
 8015ce2:	6812      	ldr	r2, [r2, #0]
 8015ce4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015ce6:	e00d      	b.n	8015d04 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015ce8:	4b8d      	ldr	r3, [pc, #564]	; (8015f20 <tcp_receive+0x884>)
 8015cea:	681a      	ldr	r2, [r3, #0]
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cf0:	1ad3      	subs	r3, r2, r3
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	da06      	bge.n	8015d04 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	8b5b      	ldrh	r3, [r3, #26]
 8015cfa:	f043 0302 	orr.w	r3, r3, #2
 8015cfe:	b29a      	uxth	r2, r3
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015d04:	4b86      	ldr	r3, [pc, #536]	; (8015f20 <tcp_receive+0x884>)
 8015d06:	681a      	ldr	r2, [r3, #0]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d0c:	1ad3      	subs	r3, r2, r3
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	f2c0 842a 	blt.w	8016568 <tcp_receive+0xecc>
 8015d14:	4b82      	ldr	r3, [pc, #520]	; (8015f20 <tcp_receive+0x884>)
 8015d16:	681a      	ldr	r2, [r3, #0]
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d1c:	6879      	ldr	r1, [r7, #4]
 8015d1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015d20:	440b      	add	r3, r1
 8015d22:	1ad3      	subs	r3, r2, r3
 8015d24:	3301      	adds	r3, #1
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	f300 841e 	bgt.w	8016568 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d30:	4b7b      	ldr	r3, [pc, #492]	; (8015f20 <tcp_receive+0x884>)
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	429a      	cmp	r2, r3
 8015d36:	f040 829a 	bne.w	801626e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015d3a:	4b7a      	ldr	r3, [pc, #488]	; (8015f24 <tcp_receive+0x888>)
 8015d3c:	891c      	ldrh	r4, [r3, #8]
 8015d3e:	4b79      	ldr	r3, [pc, #484]	; (8015f24 <tcp_receive+0x888>)
 8015d40:	691b      	ldr	r3, [r3, #16]
 8015d42:	899b      	ldrh	r3, [r3, #12]
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	4618      	mov	r0, r3
 8015d48:	f7f9 fa88 	bl	800f25c <lwip_htons>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	f003 0303 	and.w	r3, r3, #3
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d001      	beq.n	8015d5c <tcp_receive+0x6c0>
 8015d58:	2301      	movs	r3, #1
 8015d5a:	e000      	b.n	8015d5e <tcp_receive+0x6c2>
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	4423      	add	r3, r4
 8015d60:	b29a      	uxth	r2, r3
 8015d62:	4b71      	ldr	r3, [pc, #452]	; (8015f28 <tcp_receive+0x88c>)
 8015d64:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015d6a:	4b6f      	ldr	r3, [pc, #444]	; (8015f28 <tcp_receive+0x88c>)
 8015d6c:	881b      	ldrh	r3, [r3, #0]
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d275      	bcs.n	8015e5e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015d72:	4b6c      	ldr	r3, [pc, #432]	; (8015f24 <tcp_receive+0x888>)
 8015d74:	691b      	ldr	r3, [r3, #16]
 8015d76:	899b      	ldrh	r3, [r3, #12]
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f7f9 fa6e 	bl	800f25c <lwip_htons>
 8015d80:	4603      	mov	r3, r0
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	f003 0301 	and.w	r3, r3, #1
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d01f      	beq.n	8015dcc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015d8c:	4b65      	ldr	r3, [pc, #404]	; (8015f24 <tcp_receive+0x888>)
 8015d8e:	691b      	ldr	r3, [r3, #16]
 8015d90:	899b      	ldrh	r3, [r3, #12]
 8015d92:	b29b      	uxth	r3, r3
 8015d94:	b21b      	sxth	r3, r3
 8015d96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015d9a:	b21c      	sxth	r4, r3
 8015d9c:	4b61      	ldr	r3, [pc, #388]	; (8015f24 <tcp_receive+0x888>)
 8015d9e:	691b      	ldr	r3, [r3, #16]
 8015da0:	899b      	ldrh	r3, [r3, #12]
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7f9 fa59 	bl	800f25c <lwip_htons>
 8015daa:	4603      	mov	r3, r0
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015db4:	b29b      	uxth	r3, r3
 8015db6:	4618      	mov	r0, r3
 8015db8:	f7f9 fa50 	bl	800f25c <lwip_htons>
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	b21b      	sxth	r3, r3
 8015dc0:	4323      	orrs	r3, r4
 8015dc2:	b21a      	sxth	r2, r3
 8015dc4:	4b57      	ldr	r3, [pc, #348]	; (8015f24 <tcp_receive+0x888>)
 8015dc6:	691b      	ldr	r3, [r3, #16]
 8015dc8:	b292      	uxth	r2, r2
 8015dca:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015dd0:	4b54      	ldr	r3, [pc, #336]	; (8015f24 <tcp_receive+0x888>)
 8015dd2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015dd4:	4b53      	ldr	r3, [pc, #332]	; (8015f24 <tcp_receive+0x888>)
 8015dd6:	691b      	ldr	r3, [r3, #16]
 8015dd8:	899b      	ldrh	r3, [r3, #12]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7f9 fa3d 	bl	800f25c <lwip_htons>
 8015de2:	4603      	mov	r3, r0
 8015de4:	b2db      	uxtb	r3, r3
 8015de6:	f003 0302 	and.w	r3, r3, #2
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d005      	beq.n	8015dfa <tcp_receive+0x75e>
            inseg.len -= 1;
 8015dee:	4b4d      	ldr	r3, [pc, #308]	; (8015f24 <tcp_receive+0x888>)
 8015df0:	891b      	ldrh	r3, [r3, #8]
 8015df2:	3b01      	subs	r3, #1
 8015df4:	b29a      	uxth	r2, r3
 8015df6:	4b4b      	ldr	r3, [pc, #300]	; (8015f24 <tcp_receive+0x888>)
 8015df8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015dfa:	4b4a      	ldr	r3, [pc, #296]	; (8015f24 <tcp_receive+0x888>)
 8015dfc:	685b      	ldr	r3, [r3, #4]
 8015dfe:	4a49      	ldr	r2, [pc, #292]	; (8015f24 <tcp_receive+0x888>)
 8015e00:	8912      	ldrh	r2, [r2, #8]
 8015e02:	4611      	mov	r1, r2
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7fb fc31 	bl	801166c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015e0a:	4b46      	ldr	r3, [pc, #280]	; (8015f24 <tcp_receive+0x888>)
 8015e0c:	891c      	ldrh	r4, [r3, #8]
 8015e0e:	4b45      	ldr	r3, [pc, #276]	; (8015f24 <tcp_receive+0x888>)
 8015e10:	691b      	ldr	r3, [r3, #16]
 8015e12:	899b      	ldrh	r3, [r3, #12]
 8015e14:	b29b      	uxth	r3, r3
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7f9 fa20 	bl	800f25c <lwip_htons>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	b2db      	uxtb	r3, r3
 8015e20:	f003 0303 	and.w	r3, r3, #3
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d001      	beq.n	8015e2c <tcp_receive+0x790>
 8015e28:	2301      	movs	r3, #1
 8015e2a:	e000      	b.n	8015e2e <tcp_receive+0x792>
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	4423      	add	r3, r4
 8015e30:	b29a      	uxth	r2, r3
 8015e32:	4b3d      	ldr	r3, [pc, #244]	; (8015f28 <tcp_receive+0x88c>)
 8015e34:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015e36:	4b3c      	ldr	r3, [pc, #240]	; (8015f28 <tcp_receive+0x88c>)
 8015e38:	881b      	ldrh	r3, [r3, #0]
 8015e3a:	461a      	mov	r2, r3
 8015e3c:	4b38      	ldr	r3, [pc, #224]	; (8015f20 <tcp_receive+0x884>)
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	441a      	add	r2, r3
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e46:	6879      	ldr	r1, [r7, #4]
 8015e48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015e4a:	440b      	add	r3, r1
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d006      	beq.n	8015e5e <tcp_receive+0x7c2>
 8015e50:	4b36      	ldr	r3, [pc, #216]	; (8015f2c <tcp_receive+0x890>)
 8015e52:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015e56:	4936      	ldr	r1, [pc, #216]	; (8015f30 <tcp_receive+0x894>)
 8015e58:	4836      	ldr	r0, [pc, #216]	; (8015f34 <tcp_receive+0x898>)
 8015e5a:	f008 fe67 	bl	801eb2c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	f000 80e7 	beq.w	8016036 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015e68:	4b2e      	ldr	r3, [pc, #184]	; (8015f24 <tcp_receive+0x888>)
 8015e6a:	691b      	ldr	r3, [r3, #16]
 8015e6c:	899b      	ldrh	r3, [r3, #12]
 8015e6e:	b29b      	uxth	r3, r3
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7f9 f9f3 	bl	800f25c <lwip_htons>
 8015e76:	4603      	mov	r3, r0
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	f003 0301 	and.w	r3, r3, #1
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d010      	beq.n	8015ea4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015e82:	e00a      	b.n	8015e9a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e88:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e8e:	681a      	ldr	r2, [r3, #0]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015e94:	68f8      	ldr	r0, [r7, #12]
 8015e96:	f7fd fcc8 	bl	801382a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d1f0      	bne.n	8015e84 <tcp_receive+0x7e8>
 8015ea2:	e0c8      	b.n	8016036 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015eaa:	e052      	b.n	8015f52 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eae:	691b      	ldr	r3, [r3, #16]
 8015eb0:	899b      	ldrh	r3, [r3, #12]
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7f9 f9d1 	bl	800f25c <lwip_htons>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	b2db      	uxtb	r3, r3
 8015ebe:	f003 0301 	and.w	r3, r3, #1
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d03d      	beq.n	8015f42 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015ec6:	4b17      	ldr	r3, [pc, #92]	; (8015f24 <tcp_receive+0x888>)
 8015ec8:	691b      	ldr	r3, [r3, #16]
 8015eca:	899b      	ldrh	r3, [r3, #12]
 8015ecc:	b29b      	uxth	r3, r3
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f7f9 f9c4 	bl	800f25c <lwip_htons>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	b2db      	uxtb	r3, r3
 8015ed8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d130      	bne.n	8015f42 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015ee0:	4b10      	ldr	r3, [pc, #64]	; (8015f24 <tcp_receive+0x888>)
 8015ee2:	691b      	ldr	r3, [r3, #16]
 8015ee4:	899b      	ldrh	r3, [r3, #12]
 8015ee6:	b29c      	uxth	r4, r3
 8015ee8:	2001      	movs	r0, #1
 8015eea:	f7f9 f9b7 	bl	800f25c <lwip_htons>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	4b0c      	ldr	r3, [pc, #48]	; (8015f24 <tcp_receive+0x888>)
 8015ef4:	691b      	ldr	r3, [r3, #16]
 8015ef6:	4322      	orrs	r2, r4
 8015ef8:	b292      	uxth	r2, r2
 8015efa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015efc:	4b09      	ldr	r3, [pc, #36]	; (8015f24 <tcp_receive+0x888>)
 8015efe:	891c      	ldrh	r4, [r3, #8]
 8015f00:	4b08      	ldr	r3, [pc, #32]	; (8015f24 <tcp_receive+0x888>)
 8015f02:	691b      	ldr	r3, [r3, #16]
 8015f04:	899b      	ldrh	r3, [r3, #12]
 8015f06:	b29b      	uxth	r3, r3
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7f9 f9a7 	bl	800f25c <lwip_htons>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	b2db      	uxtb	r3, r3
 8015f12:	f003 0303 	and.w	r3, r3, #3
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d00e      	beq.n	8015f38 <tcp_receive+0x89c>
 8015f1a:	2301      	movs	r3, #1
 8015f1c:	e00d      	b.n	8015f3a <tcp_receive+0x89e>
 8015f1e:	bf00      	nop
 8015f20:	20014380 	.word	0x20014380
 8015f24:	2001435c 	.word	0x2001435c
 8015f28:	2001438a 	.word	0x2001438a
 8015f2c:	08024904 	.word	0x08024904
 8015f30:	08024cac 	.word	0x08024cac
 8015f34:	08024950 	.word	0x08024950
 8015f38:	2300      	movs	r3, #0
 8015f3a:	4423      	add	r3, r4
 8015f3c:	b29a      	uxth	r2, r3
 8015f3e:	4b98      	ldr	r3, [pc, #608]	; (80161a0 <tcp_receive+0xb04>)
 8015f40:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f44:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015f4c:	6938      	ldr	r0, [r7, #16]
 8015f4e:	f7fd fc6c 	bl	801382a <tcp_seg_free>
            while (next &&
 8015f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d00e      	beq.n	8015f76 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015f58:	4b91      	ldr	r3, [pc, #580]	; (80161a0 <tcp_receive+0xb04>)
 8015f5a:	881b      	ldrh	r3, [r3, #0]
 8015f5c:	461a      	mov	r2, r3
 8015f5e:	4b91      	ldr	r3, [pc, #580]	; (80161a4 <tcp_receive+0xb08>)
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	441a      	add	r2, r3
 8015f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f66:	691b      	ldr	r3, [r3, #16]
 8015f68:	685b      	ldr	r3, [r3, #4]
 8015f6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015f6c:	8909      	ldrh	r1, [r1, #8]
 8015f6e:	440b      	add	r3, r1
 8015f70:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	da9a      	bge.n	8015eac <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d059      	beq.n	8016030 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015f7c:	4b88      	ldr	r3, [pc, #544]	; (80161a0 <tcp_receive+0xb04>)
 8015f7e:	881b      	ldrh	r3, [r3, #0]
 8015f80:	461a      	mov	r2, r3
 8015f82:	4b88      	ldr	r3, [pc, #544]	; (80161a4 <tcp_receive+0xb08>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	441a      	add	r2, r3
 8015f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f8a:	691b      	ldr	r3, [r3, #16]
 8015f8c:	685b      	ldr	r3, [r3, #4]
 8015f8e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	dd4d      	ble.n	8016030 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f96:	691b      	ldr	r3, [r3, #16]
 8015f98:	685b      	ldr	r3, [r3, #4]
 8015f9a:	b29a      	uxth	r2, r3
 8015f9c:	4b81      	ldr	r3, [pc, #516]	; (80161a4 <tcp_receive+0xb08>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	b29b      	uxth	r3, r3
 8015fa2:	1ad3      	subs	r3, r2, r3
 8015fa4:	b29a      	uxth	r2, r3
 8015fa6:	4b80      	ldr	r3, [pc, #512]	; (80161a8 <tcp_receive+0xb0c>)
 8015fa8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015faa:	4b7f      	ldr	r3, [pc, #508]	; (80161a8 <tcp_receive+0xb0c>)
 8015fac:	691b      	ldr	r3, [r3, #16]
 8015fae:	899b      	ldrh	r3, [r3, #12]
 8015fb0:	b29b      	uxth	r3, r3
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f7f9 f952 	bl	800f25c <lwip_htons>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	b2db      	uxtb	r3, r3
 8015fbc:	f003 0302 	and.w	r3, r3, #2
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d005      	beq.n	8015fd0 <tcp_receive+0x934>
                inseg.len -= 1;
 8015fc4:	4b78      	ldr	r3, [pc, #480]	; (80161a8 <tcp_receive+0xb0c>)
 8015fc6:	891b      	ldrh	r3, [r3, #8]
 8015fc8:	3b01      	subs	r3, #1
 8015fca:	b29a      	uxth	r2, r3
 8015fcc:	4b76      	ldr	r3, [pc, #472]	; (80161a8 <tcp_receive+0xb0c>)
 8015fce:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015fd0:	4b75      	ldr	r3, [pc, #468]	; (80161a8 <tcp_receive+0xb0c>)
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	4a74      	ldr	r2, [pc, #464]	; (80161a8 <tcp_receive+0xb0c>)
 8015fd6:	8912      	ldrh	r2, [r2, #8]
 8015fd8:	4611      	mov	r1, r2
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f7fb fb46 	bl	801166c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015fe0:	4b71      	ldr	r3, [pc, #452]	; (80161a8 <tcp_receive+0xb0c>)
 8015fe2:	891c      	ldrh	r4, [r3, #8]
 8015fe4:	4b70      	ldr	r3, [pc, #448]	; (80161a8 <tcp_receive+0xb0c>)
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	899b      	ldrh	r3, [r3, #12]
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7f9 f935 	bl	800f25c <lwip_htons>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	f003 0303 	and.w	r3, r3, #3
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d001      	beq.n	8016002 <tcp_receive+0x966>
 8015ffe:	2301      	movs	r3, #1
 8016000:	e000      	b.n	8016004 <tcp_receive+0x968>
 8016002:	2300      	movs	r3, #0
 8016004:	4423      	add	r3, r4
 8016006:	b29a      	uxth	r2, r3
 8016008:	4b65      	ldr	r3, [pc, #404]	; (80161a0 <tcp_receive+0xb04>)
 801600a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801600c:	4b64      	ldr	r3, [pc, #400]	; (80161a0 <tcp_receive+0xb04>)
 801600e:	881b      	ldrh	r3, [r3, #0]
 8016010:	461a      	mov	r2, r3
 8016012:	4b64      	ldr	r3, [pc, #400]	; (80161a4 <tcp_receive+0xb08>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	441a      	add	r2, r3
 8016018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801601a:	691b      	ldr	r3, [r3, #16]
 801601c:	685b      	ldr	r3, [r3, #4]
 801601e:	429a      	cmp	r2, r3
 8016020:	d006      	beq.n	8016030 <tcp_receive+0x994>
 8016022:	4b62      	ldr	r3, [pc, #392]	; (80161ac <tcp_receive+0xb10>)
 8016024:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016028:	4961      	ldr	r1, [pc, #388]	; (80161b0 <tcp_receive+0xb14>)
 801602a:	4862      	ldr	r0, [pc, #392]	; (80161b4 <tcp_receive+0xb18>)
 801602c:	f008 fd7e 	bl	801eb2c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016034:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016036:	4b5a      	ldr	r3, [pc, #360]	; (80161a0 <tcp_receive+0xb04>)
 8016038:	881b      	ldrh	r3, [r3, #0]
 801603a:	461a      	mov	r2, r3
 801603c:	4b59      	ldr	r3, [pc, #356]	; (80161a4 <tcp_receive+0xb08>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	441a      	add	r2, r3
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801604a:	4b55      	ldr	r3, [pc, #340]	; (80161a0 <tcp_receive+0xb04>)
 801604c:	881b      	ldrh	r3, [r3, #0]
 801604e:	429a      	cmp	r2, r3
 8016050:	d206      	bcs.n	8016060 <tcp_receive+0x9c4>
 8016052:	4b56      	ldr	r3, [pc, #344]	; (80161ac <tcp_receive+0xb10>)
 8016054:	f240 6207 	movw	r2, #1543	; 0x607
 8016058:	4957      	ldr	r1, [pc, #348]	; (80161b8 <tcp_receive+0xb1c>)
 801605a:	4856      	ldr	r0, [pc, #344]	; (80161b4 <tcp_receive+0xb18>)
 801605c:	f008 fd66 	bl	801eb2c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016064:	4b4e      	ldr	r3, [pc, #312]	; (80161a0 <tcp_receive+0xb04>)
 8016066:	881b      	ldrh	r3, [r3, #0]
 8016068:	1ad3      	subs	r3, r2, r3
 801606a:	b29a      	uxth	r2, r3
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f7fc fd9d 	bl	8012bb0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016076:	4b4c      	ldr	r3, [pc, #304]	; (80161a8 <tcp_receive+0xb0c>)
 8016078:	685b      	ldr	r3, [r3, #4]
 801607a:	891b      	ldrh	r3, [r3, #8]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d006      	beq.n	801608e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016080:	4b49      	ldr	r3, [pc, #292]	; (80161a8 <tcp_receive+0xb0c>)
 8016082:	685b      	ldr	r3, [r3, #4]
 8016084:	4a4d      	ldr	r2, [pc, #308]	; (80161bc <tcp_receive+0xb20>)
 8016086:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016088:	4b47      	ldr	r3, [pc, #284]	; (80161a8 <tcp_receive+0xb0c>)
 801608a:	2200      	movs	r2, #0
 801608c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801608e:	4b46      	ldr	r3, [pc, #280]	; (80161a8 <tcp_receive+0xb0c>)
 8016090:	691b      	ldr	r3, [r3, #16]
 8016092:	899b      	ldrh	r3, [r3, #12]
 8016094:	b29b      	uxth	r3, r3
 8016096:	4618      	mov	r0, r3
 8016098:	f7f9 f8e0 	bl	800f25c <lwip_htons>
 801609c:	4603      	mov	r3, r0
 801609e:	b2db      	uxtb	r3, r3
 80160a0:	f003 0301 	and.w	r3, r3, #1
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	f000 80b8 	beq.w	801621a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80160aa:	4b45      	ldr	r3, [pc, #276]	; (80161c0 <tcp_receive+0xb24>)
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	f043 0320 	orr.w	r3, r3, #32
 80160b2:	b2da      	uxtb	r2, r3
 80160b4:	4b42      	ldr	r3, [pc, #264]	; (80161c0 <tcp_receive+0xb24>)
 80160b6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80160b8:	e0af      	b.n	801621a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80160be:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80160c4:	691b      	ldr	r3, [r3, #16]
 80160c6:	685b      	ldr	r3, [r3, #4]
 80160c8:	4a36      	ldr	r2, [pc, #216]	; (80161a4 <tcp_receive+0xb08>)
 80160ca:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	891b      	ldrh	r3, [r3, #8]
 80160d0:	461c      	mov	r4, r3
 80160d2:	68bb      	ldr	r3, [r7, #8]
 80160d4:	691b      	ldr	r3, [r3, #16]
 80160d6:	899b      	ldrh	r3, [r3, #12]
 80160d8:	b29b      	uxth	r3, r3
 80160da:	4618      	mov	r0, r3
 80160dc:	f7f9 f8be 	bl	800f25c <lwip_htons>
 80160e0:	4603      	mov	r3, r0
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	f003 0303 	and.w	r3, r3, #3
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d001      	beq.n	80160f0 <tcp_receive+0xa54>
 80160ec:	2301      	movs	r3, #1
 80160ee:	e000      	b.n	80160f2 <tcp_receive+0xa56>
 80160f0:	2300      	movs	r3, #0
 80160f2:	191a      	adds	r2, r3, r4
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160f8:	441a      	add	r2, r3
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016102:	461c      	mov	r4, r3
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	891b      	ldrh	r3, [r3, #8]
 8016108:	461d      	mov	r5, r3
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	691b      	ldr	r3, [r3, #16]
 801610e:	899b      	ldrh	r3, [r3, #12]
 8016110:	b29b      	uxth	r3, r3
 8016112:	4618      	mov	r0, r3
 8016114:	f7f9 f8a2 	bl	800f25c <lwip_htons>
 8016118:	4603      	mov	r3, r0
 801611a:	b2db      	uxtb	r3, r3
 801611c:	f003 0303 	and.w	r3, r3, #3
 8016120:	2b00      	cmp	r3, #0
 8016122:	d001      	beq.n	8016128 <tcp_receive+0xa8c>
 8016124:	2301      	movs	r3, #1
 8016126:	e000      	b.n	801612a <tcp_receive+0xa8e>
 8016128:	2300      	movs	r3, #0
 801612a:	442b      	add	r3, r5
 801612c:	429c      	cmp	r4, r3
 801612e:	d206      	bcs.n	801613e <tcp_receive+0xaa2>
 8016130:	4b1e      	ldr	r3, [pc, #120]	; (80161ac <tcp_receive+0xb10>)
 8016132:	f240 622b 	movw	r2, #1579	; 0x62b
 8016136:	4923      	ldr	r1, [pc, #140]	; (80161c4 <tcp_receive+0xb28>)
 8016138:	481e      	ldr	r0, [pc, #120]	; (80161b4 <tcp_receive+0xb18>)
 801613a:	f008 fcf7 	bl	801eb2c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801613e:	68bb      	ldr	r3, [r7, #8]
 8016140:	891b      	ldrh	r3, [r3, #8]
 8016142:	461c      	mov	r4, r3
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	691b      	ldr	r3, [r3, #16]
 8016148:	899b      	ldrh	r3, [r3, #12]
 801614a:	b29b      	uxth	r3, r3
 801614c:	4618      	mov	r0, r3
 801614e:	f7f9 f885 	bl	800f25c <lwip_htons>
 8016152:	4603      	mov	r3, r0
 8016154:	b2db      	uxtb	r3, r3
 8016156:	f003 0303 	and.w	r3, r3, #3
 801615a:	2b00      	cmp	r3, #0
 801615c:	d001      	beq.n	8016162 <tcp_receive+0xac6>
 801615e:	2301      	movs	r3, #1
 8016160:	e000      	b.n	8016164 <tcp_receive+0xac8>
 8016162:	2300      	movs	r3, #0
 8016164:	1919      	adds	r1, r3, r4
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801616a:	b28b      	uxth	r3, r1
 801616c:	1ad3      	subs	r3, r2, r3
 801616e:	b29a      	uxth	r2, r3
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f7fc fd1b 	bl	8012bb0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	685b      	ldr	r3, [r3, #4]
 801617e:	891b      	ldrh	r3, [r3, #8]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d028      	beq.n	80161d6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016184:	4b0d      	ldr	r3, [pc, #52]	; (80161bc <tcp_receive+0xb20>)
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d01d      	beq.n	80161c8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801618c:	4b0b      	ldr	r3, [pc, #44]	; (80161bc <tcp_receive+0xb20>)
 801618e:	681a      	ldr	r2, [r3, #0]
 8016190:	68bb      	ldr	r3, [r7, #8]
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	4619      	mov	r1, r3
 8016196:	4610      	mov	r0, r2
 8016198:	f7fb fcee 	bl	8011b78 <pbuf_cat>
 801619c:	e018      	b.n	80161d0 <tcp_receive+0xb34>
 801619e:	bf00      	nop
 80161a0:	2001438a 	.word	0x2001438a
 80161a4:	20014380 	.word	0x20014380
 80161a8:	2001435c 	.word	0x2001435c
 80161ac:	08024904 	.word	0x08024904
 80161b0:	08024ce4 	.word	0x08024ce4
 80161b4:	08024950 	.word	0x08024950
 80161b8:	08024d20 	.word	0x08024d20
 80161bc:	20014390 	.word	0x20014390
 80161c0:	2001438d 	.word	0x2001438d
 80161c4:	08024d40 	.word	0x08024d40
            } else {
              recv_data = cseg->p;
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	685b      	ldr	r3, [r3, #4]
 80161cc:	4a70      	ldr	r2, [pc, #448]	; (8016390 <tcp_receive+0xcf4>)
 80161ce:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80161d0:	68bb      	ldr	r3, [r7, #8]
 80161d2:	2200      	movs	r2, #0
 80161d4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	691b      	ldr	r3, [r3, #16]
 80161da:	899b      	ldrh	r3, [r3, #12]
 80161dc:	b29b      	uxth	r3, r3
 80161de:	4618      	mov	r0, r3
 80161e0:	f7f9 f83c 	bl	800f25c <lwip_htons>
 80161e4:	4603      	mov	r3, r0
 80161e6:	b2db      	uxtb	r3, r3
 80161e8:	f003 0301 	and.w	r3, r3, #1
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d00d      	beq.n	801620c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80161f0:	4b68      	ldr	r3, [pc, #416]	; (8016394 <tcp_receive+0xcf8>)
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	f043 0320 	orr.w	r3, r3, #32
 80161f8:	b2da      	uxtb	r2, r3
 80161fa:	4b66      	ldr	r3, [pc, #408]	; (8016394 <tcp_receive+0xcf8>)
 80161fc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	7d1b      	ldrb	r3, [r3, #20]
 8016202:	2b04      	cmp	r3, #4
 8016204:	d102      	bne.n	801620c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	2207      	movs	r2, #7
 801620a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	681a      	ldr	r2, [r3, #0]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016214:	68b8      	ldr	r0, [r7, #8]
 8016216:	f7fd fb08 	bl	801382a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801621e:	2b00      	cmp	r3, #0
 8016220:	d008      	beq.n	8016234 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016226:	691b      	ldr	r3, [r3, #16]
 8016228:	685a      	ldr	r2, [r3, #4]
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801622e:	429a      	cmp	r2, r3
 8016230:	f43f af43 	beq.w	80160ba <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	8b5b      	ldrh	r3, [r3, #26]
 8016238:	f003 0301 	and.w	r3, r3, #1
 801623c:	2b00      	cmp	r3, #0
 801623e:	d00e      	beq.n	801625e <tcp_receive+0xbc2>
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	8b5b      	ldrh	r3, [r3, #26]
 8016244:	f023 0301 	bic.w	r3, r3, #1
 8016248:	b29a      	uxth	r2, r3
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	835a      	strh	r2, [r3, #26]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	8b5b      	ldrh	r3, [r3, #26]
 8016252:	f043 0302 	orr.w	r3, r3, #2
 8016256:	b29a      	uxth	r2, r3
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801625c:	e188      	b.n	8016570 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	8b5b      	ldrh	r3, [r3, #26]
 8016262:	f043 0301 	orr.w	r3, r3, #1
 8016266:	b29a      	uxth	r2, r3
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801626c:	e180      	b.n	8016570 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016272:	2b00      	cmp	r3, #0
 8016274:	d106      	bne.n	8016284 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016276:	4848      	ldr	r0, [pc, #288]	; (8016398 <tcp_receive+0xcfc>)
 8016278:	f7fd faf0 	bl	801385c <tcp_seg_copy>
 801627c:	4602      	mov	r2, r0
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	675a      	str	r2, [r3, #116]	; 0x74
 8016282:	e16d      	b.n	8016560 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016284:	2300      	movs	r3, #0
 8016286:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801628c:	63bb      	str	r3, [r7, #56]	; 0x38
 801628e:	e157      	b.n	8016540 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8016290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016292:	691b      	ldr	r3, [r3, #16]
 8016294:	685a      	ldr	r2, [r3, #4]
 8016296:	4b41      	ldr	r3, [pc, #260]	; (801639c <tcp_receive+0xd00>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	429a      	cmp	r2, r3
 801629c:	d11d      	bne.n	80162da <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801629e:	4b3e      	ldr	r3, [pc, #248]	; (8016398 <tcp_receive+0xcfc>)
 80162a0:	891a      	ldrh	r2, [r3, #8]
 80162a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162a4:	891b      	ldrh	r3, [r3, #8]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	f240 814f 	bls.w	801654a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80162ac:	483a      	ldr	r0, [pc, #232]	; (8016398 <tcp_receive+0xcfc>)
 80162ae:	f7fd fad5 	bl	801385c <tcp_seg_copy>
 80162b2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80162b4:	697b      	ldr	r3, [r7, #20]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	f000 8149 	beq.w	801654e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80162bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d003      	beq.n	80162ca <tcp_receive+0xc2e>
                    prev->next = cseg;
 80162c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162c4:	697a      	ldr	r2, [r7, #20]
 80162c6:	601a      	str	r2, [r3, #0]
 80162c8:	e002      	b.n	80162d0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	697a      	ldr	r2, [r7, #20]
 80162ce:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80162d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80162d2:	6978      	ldr	r0, [r7, #20]
 80162d4:	f7ff f8de 	bl	8015494 <tcp_oos_insert_segment>
                }
                break;
 80162d8:	e139      	b.n	801654e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80162da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d117      	bne.n	8016310 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80162e0:	4b2e      	ldr	r3, [pc, #184]	; (801639c <tcp_receive+0xd00>)
 80162e2:	681a      	ldr	r2, [r3, #0]
 80162e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162e6:	691b      	ldr	r3, [r3, #16]
 80162e8:	685b      	ldr	r3, [r3, #4]
 80162ea:	1ad3      	subs	r3, r2, r3
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	da57      	bge.n	80163a0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80162f0:	4829      	ldr	r0, [pc, #164]	; (8016398 <tcp_receive+0xcfc>)
 80162f2:	f7fd fab3 	bl	801385c <tcp_seg_copy>
 80162f6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80162f8:	69bb      	ldr	r3, [r7, #24]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	f000 8129 	beq.w	8016552 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	69ba      	ldr	r2, [r7, #24]
 8016304:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016308:	69b8      	ldr	r0, [r7, #24]
 801630a:	f7ff f8c3 	bl	8015494 <tcp_oos_insert_segment>
                  }
                  break;
 801630e:	e120      	b.n	8016552 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016310:	4b22      	ldr	r3, [pc, #136]	; (801639c <tcp_receive+0xd00>)
 8016312:	681a      	ldr	r2, [r3, #0]
 8016314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016316:	691b      	ldr	r3, [r3, #16]
 8016318:	685b      	ldr	r3, [r3, #4]
 801631a:	1ad3      	subs	r3, r2, r3
 801631c:	3b01      	subs	r3, #1
 801631e:	2b00      	cmp	r3, #0
 8016320:	db3e      	blt.n	80163a0 <tcp_receive+0xd04>
 8016322:	4b1e      	ldr	r3, [pc, #120]	; (801639c <tcp_receive+0xd00>)
 8016324:	681a      	ldr	r2, [r3, #0]
 8016326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016328:	691b      	ldr	r3, [r3, #16]
 801632a:	685b      	ldr	r3, [r3, #4]
 801632c:	1ad3      	subs	r3, r2, r3
 801632e:	3301      	adds	r3, #1
 8016330:	2b00      	cmp	r3, #0
 8016332:	dc35      	bgt.n	80163a0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016334:	4818      	ldr	r0, [pc, #96]	; (8016398 <tcp_receive+0xcfc>)
 8016336:	f7fd fa91 	bl	801385c <tcp_seg_copy>
 801633a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801633c:	69fb      	ldr	r3, [r7, #28]
 801633e:	2b00      	cmp	r3, #0
 8016340:	f000 8109 	beq.w	8016556 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016346:	691b      	ldr	r3, [r3, #16]
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801634c:	8912      	ldrh	r2, [r2, #8]
 801634e:	441a      	add	r2, r3
 8016350:	4b12      	ldr	r3, [pc, #72]	; (801639c <tcp_receive+0xd00>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	1ad3      	subs	r3, r2, r3
 8016356:	2b00      	cmp	r3, #0
 8016358:	dd12      	ble.n	8016380 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801635a:	4b10      	ldr	r3, [pc, #64]	; (801639c <tcp_receive+0xd00>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	b29a      	uxth	r2, r3
 8016360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016362:	691b      	ldr	r3, [r3, #16]
 8016364:	685b      	ldr	r3, [r3, #4]
 8016366:	b29b      	uxth	r3, r3
 8016368:	1ad3      	subs	r3, r2, r3
 801636a:	b29a      	uxth	r2, r3
 801636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801636e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016372:	685a      	ldr	r2, [r3, #4]
 8016374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016376:	891b      	ldrh	r3, [r3, #8]
 8016378:	4619      	mov	r1, r3
 801637a:	4610      	mov	r0, r2
 801637c:	f7fb f976 	bl	801166c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016382:	69fa      	ldr	r2, [r7, #28]
 8016384:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016386:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016388:	69f8      	ldr	r0, [r7, #28]
 801638a:	f7ff f883 	bl	8015494 <tcp_oos_insert_segment>
                  }
                  break;
 801638e:	e0e2      	b.n	8016556 <tcp_receive+0xeba>
 8016390:	20014390 	.word	0x20014390
 8016394:	2001438d 	.word	0x2001438d
 8016398:	2001435c 	.word	0x2001435c
 801639c:	20014380 	.word	0x20014380
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80163a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163a2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80163a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	f040 80c6 	bne.w	801653a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80163ae:	4b80      	ldr	r3, [pc, #512]	; (80165b0 <tcp_receive+0xf14>)
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b4:	691b      	ldr	r3, [r3, #16]
 80163b6:	685b      	ldr	r3, [r3, #4]
 80163b8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	f340 80bd 	ble.w	801653a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80163c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163c2:	691b      	ldr	r3, [r3, #16]
 80163c4:	899b      	ldrh	r3, [r3, #12]
 80163c6:	b29b      	uxth	r3, r3
 80163c8:	4618      	mov	r0, r3
 80163ca:	f7f8 ff47 	bl	800f25c <lwip_htons>
 80163ce:	4603      	mov	r3, r0
 80163d0:	b2db      	uxtb	r3, r3
 80163d2:	f003 0301 	and.w	r3, r3, #1
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	f040 80bf 	bne.w	801655a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80163dc:	4875      	ldr	r0, [pc, #468]	; (80165b4 <tcp_receive+0xf18>)
 80163de:	f7fd fa3d 	bl	801385c <tcp_seg_copy>
 80163e2:	4602      	mov	r2, r0
 80163e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80163e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	f000 80b6 	beq.w	801655e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80163f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f4:	691b      	ldr	r3, [r3, #16]
 80163f6:	685b      	ldr	r3, [r3, #4]
 80163f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163fa:	8912      	ldrh	r2, [r2, #8]
 80163fc:	441a      	add	r2, r3
 80163fe:	4b6c      	ldr	r3, [pc, #432]	; (80165b0 <tcp_receive+0xf14>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	1ad3      	subs	r3, r2, r3
 8016404:	2b00      	cmp	r3, #0
 8016406:	dd12      	ble.n	801642e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016408:	4b69      	ldr	r3, [pc, #420]	; (80165b0 <tcp_receive+0xf14>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	b29a      	uxth	r2, r3
 801640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016410:	691b      	ldr	r3, [r3, #16]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	b29b      	uxth	r3, r3
 8016416:	1ad3      	subs	r3, r2, r3
 8016418:	b29a      	uxth	r2, r3
 801641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801641c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016420:	685a      	ldr	r2, [r3, #4]
 8016422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016424:	891b      	ldrh	r3, [r3, #8]
 8016426:	4619      	mov	r1, r3
 8016428:	4610      	mov	r0, r2
 801642a:	f7fb f91f 	bl	801166c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801642e:	4b62      	ldr	r3, [pc, #392]	; (80165b8 <tcp_receive+0xf1c>)
 8016430:	881b      	ldrh	r3, [r3, #0]
 8016432:	461a      	mov	r2, r3
 8016434:	4b5e      	ldr	r3, [pc, #376]	; (80165b0 <tcp_receive+0xf14>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	441a      	add	r2, r3
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801643e:	6879      	ldr	r1, [r7, #4]
 8016440:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016442:	440b      	add	r3, r1
 8016444:	1ad3      	subs	r3, r2, r3
 8016446:	2b00      	cmp	r3, #0
 8016448:	f340 8089 	ble.w	801655e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	691b      	ldr	r3, [r3, #16]
 8016452:	899b      	ldrh	r3, [r3, #12]
 8016454:	b29b      	uxth	r3, r3
 8016456:	4618      	mov	r0, r3
 8016458:	f7f8 ff00 	bl	800f25c <lwip_htons>
 801645c:	4603      	mov	r3, r0
 801645e:	b2db      	uxtb	r3, r3
 8016460:	f003 0301 	and.w	r3, r3, #1
 8016464:	2b00      	cmp	r3, #0
 8016466:	d022      	beq.n	80164ae <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	691b      	ldr	r3, [r3, #16]
 801646e:	899b      	ldrh	r3, [r3, #12]
 8016470:	b29b      	uxth	r3, r3
 8016472:	b21b      	sxth	r3, r3
 8016474:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016478:	b21c      	sxth	r4, r3
 801647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	691b      	ldr	r3, [r3, #16]
 8016480:	899b      	ldrh	r3, [r3, #12]
 8016482:	b29b      	uxth	r3, r3
 8016484:	4618      	mov	r0, r3
 8016486:	f7f8 fee9 	bl	800f25c <lwip_htons>
 801648a:	4603      	mov	r3, r0
 801648c:	b2db      	uxtb	r3, r3
 801648e:	b29b      	uxth	r3, r3
 8016490:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016494:	b29b      	uxth	r3, r3
 8016496:	4618      	mov	r0, r3
 8016498:	f7f8 fee0 	bl	800f25c <lwip_htons>
 801649c:	4603      	mov	r3, r0
 801649e:	b21b      	sxth	r3, r3
 80164a0:	4323      	orrs	r3, r4
 80164a2:	b21a      	sxth	r2, r3
 80164a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	691b      	ldr	r3, [r3, #16]
 80164aa:	b292      	uxth	r2, r2
 80164ac:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164b2:	b29a      	uxth	r2, r3
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164b8:	4413      	add	r3, r2
 80164ba:	b299      	uxth	r1, r3
 80164bc:	4b3c      	ldr	r3, [pc, #240]	; (80165b0 <tcp_receive+0xf14>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	b29a      	uxth	r2, r3
 80164c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	1a8a      	subs	r2, r1, r2
 80164c8:	b292      	uxth	r2, r2
 80164ca:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80164cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	685a      	ldr	r2, [r3, #4]
 80164d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	891b      	ldrh	r3, [r3, #8]
 80164d8:	4619      	mov	r1, r3
 80164da:	4610      	mov	r0, r2
 80164dc:	f7fb f8c6 	bl	801166c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80164e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	891c      	ldrh	r4, [r3, #8]
 80164e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	691b      	ldr	r3, [r3, #16]
 80164ec:	899b      	ldrh	r3, [r3, #12]
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	4618      	mov	r0, r3
 80164f2:	f7f8 feb3 	bl	800f25c <lwip_htons>
 80164f6:	4603      	mov	r3, r0
 80164f8:	b2db      	uxtb	r3, r3
 80164fa:	f003 0303 	and.w	r3, r3, #3
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d001      	beq.n	8016506 <tcp_receive+0xe6a>
 8016502:	2301      	movs	r3, #1
 8016504:	e000      	b.n	8016508 <tcp_receive+0xe6c>
 8016506:	2300      	movs	r3, #0
 8016508:	4423      	add	r3, r4
 801650a:	b29a      	uxth	r2, r3
 801650c:	4b2a      	ldr	r3, [pc, #168]	; (80165b8 <tcp_receive+0xf1c>)
 801650e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016510:	4b29      	ldr	r3, [pc, #164]	; (80165b8 <tcp_receive+0xf1c>)
 8016512:	881b      	ldrh	r3, [r3, #0]
 8016514:	461a      	mov	r2, r3
 8016516:	4b26      	ldr	r3, [pc, #152]	; (80165b0 <tcp_receive+0xf14>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	441a      	add	r2, r3
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016520:	6879      	ldr	r1, [r7, #4]
 8016522:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016524:	440b      	add	r3, r1
 8016526:	429a      	cmp	r2, r3
 8016528:	d019      	beq.n	801655e <tcp_receive+0xec2>
 801652a:	4b24      	ldr	r3, [pc, #144]	; (80165bc <tcp_receive+0xf20>)
 801652c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8016530:	4923      	ldr	r1, [pc, #140]	; (80165c0 <tcp_receive+0xf24>)
 8016532:	4824      	ldr	r0, [pc, #144]	; (80165c4 <tcp_receive+0xf28>)
 8016534:	f008 fafa 	bl	801eb2c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016538:	e011      	b.n	801655e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016542:	2b00      	cmp	r3, #0
 8016544:	f47f aea4 	bne.w	8016290 <tcp_receive+0xbf4>
 8016548:	e00a      	b.n	8016560 <tcp_receive+0xec4>
                break;
 801654a:	bf00      	nop
 801654c:	e008      	b.n	8016560 <tcp_receive+0xec4>
                break;
 801654e:	bf00      	nop
 8016550:	e006      	b.n	8016560 <tcp_receive+0xec4>
                  break;
 8016552:	bf00      	nop
 8016554:	e004      	b.n	8016560 <tcp_receive+0xec4>
                  break;
 8016556:	bf00      	nop
 8016558:	e002      	b.n	8016560 <tcp_receive+0xec4>
                  break;
 801655a:	bf00      	nop
 801655c:	e000      	b.n	8016560 <tcp_receive+0xec4>
                break;
 801655e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f001 fef7 	bl	8018354 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016566:	e003      	b.n	8016570 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f001 fef3 	bl	8018354 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801656e:	e01a      	b.n	80165a6 <tcp_receive+0xf0a>
 8016570:	e019      	b.n	80165a6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016572:	4b0f      	ldr	r3, [pc, #60]	; (80165b0 <tcp_receive+0xf14>)
 8016574:	681a      	ldr	r2, [r3, #0]
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801657a:	1ad3      	subs	r3, r2, r3
 801657c:	2b00      	cmp	r3, #0
 801657e:	db0a      	blt.n	8016596 <tcp_receive+0xefa>
 8016580:	4b0b      	ldr	r3, [pc, #44]	; (80165b0 <tcp_receive+0xf14>)
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016588:	6879      	ldr	r1, [r7, #4]
 801658a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801658c:	440b      	add	r3, r1
 801658e:	1ad3      	subs	r3, r2, r3
 8016590:	3301      	adds	r3, #1
 8016592:	2b00      	cmp	r3, #0
 8016594:	dd07      	ble.n	80165a6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	8b5b      	ldrh	r3, [r3, #26]
 801659a:	f043 0302 	orr.w	r3, r3, #2
 801659e:	b29a      	uxth	r2, r3
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80165a4:	e7ff      	b.n	80165a6 <tcp_receive+0xf0a>
 80165a6:	bf00      	nop
 80165a8:	3750      	adds	r7, #80	; 0x50
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bdb0      	pop	{r4, r5, r7, pc}
 80165ae:	bf00      	nop
 80165b0:	20014380 	.word	0x20014380
 80165b4:	2001435c 	.word	0x2001435c
 80165b8:	2001438a 	.word	0x2001438a
 80165bc:	08024904 	.word	0x08024904
 80165c0:	08024cac 	.word	0x08024cac
 80165c4:	08024950 	.word	0x08024950

080165c8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80165c8:	b480      	push	{r7}
 80165ca:	b083      	sub	sp, #12
 80165cc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80165ce:	4b15      	ldr	r3, [pc, #84]	; (8016624 <tcp_get_next_optbyte+0x5c>)
 80165d0:	881b      	ldrh	r3, [r3, #0]
 80165d2:	1c5a      	adds	r2, r3, #1
 80165d4:	b291      	uxth	r1, r2
 80165d6:	4a13      	ldr	r2, [pc, #76]	; (8016624 <tcp_get_next_optbyte+0x5c>)
 80165d8:	8011      	strh	r1, [r2, #0]
 80165da:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80165dc:	4b12      	ldr	r3, [pc, #72]	; (8016628 <tcp_get_next_optbyte+0x60>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d004      	beq.n	80165ee <tcp_get_next_optbyte+0x26>
 80165e4:	4b11      	ldr	r3, [pc, #68]	; (801662c <tcp_get_next_optbyte+0x64>)
 80165e6:	881b      	ldrh	r3, [r3, #0]
 80165e8:	88fa      	ldrh	r2, [r7, #6]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d208      	bcs.n	8016600 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80165ee:	4b10      	ldr	r3, [pc, #64]	; (8016630 <tcp_get_next_optbyte+0x68>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	3314      	adds	r3, #20
 80165f4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80165f6:	88fb      	ldrh	r3, [r7, #6]
 80165f8:	683a      	ldr	r2, [r7, #0]
 80165fa:	4413      	add	r3, r2
 80165fc:	781b      	ldrb	r3, [r3, #0]
 80165fe:	e00b      	b.n	8016618 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016600:	88fb      	ldrh	r3, [r7, #6]
 8016602:	b2da      	uxtb	r2, r3
 8016604:	4b09      	ldr	r3, [pc, #36]	; (801662c <tcp_get_next_optbyte+0x64>)
 8016606:	881b      	ldrh	r3, [r3, #0]
 8016608:	b2db      	uxtb	r3, r3
 801660a:	1ad3      	subs	r3, r2, r3
 801660c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801660e:	4b06      	ldr	r3, [pc, #24]	; (8016628 <tcp_get_next_optbyte+0x60>)
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	797b      	ldrb	r3, [r7, #5]
 8016614:	4413      	add	r3, r2
 8016616:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016618:	4618      	mov	r0, r3
 801661a:	370c      	adds	r7, #12
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr
 8016624:	2001437c 	.word	0x2001437c
 8016628:	20014378 	.word	0x20014378
 801662c:	20014376 	.word	0x20014376
 8016630:	20014370 	.word	0x20014370

08016634 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b084      	sub	sp, #16
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d106      	bne.n	8016650 <tcp_parseopt+0x1c>
 8016642:	4b32      	ldr	r3, [pc, #200]	; (801670c <tcp_parseopt+0xd8>)
 8016644:	f240 727d 	movw	r2, #1917	; 0x77d
 8016648:	4931      	ldr	r1, [pc, #196]	; (8016710 <tcp_parseopt+0xdc>)
 801664a:	4832      	ldr	r0, [pc, #200]	; (8016714 <tcp_parseopt+0xe0>)
 801664c:	f008 fa6e 	bl	801eb2c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016650:	4b31      	ldr	r3, [pc, #196]	; (8016718 <tcp_parseopt+0xe4>)
 8016652:	881b      	ldrh	r3, [r3, #0]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d055      	beq.n	8016704 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016658:	4b30      	ldr	r3, [pc, #192]	; (801671c <tcp_parseopt+0xe8>)
 801665a:	2200      	movs	r2, #0
 801665c:	801a      	strh	r2, [r3, #0]
 801665e:	e045      	b.n	80166ec <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8016660:	f7ff ffb2 	bl	80165c8 <tcp_get_next_optbyte>
 8016664:	4603      	mov	r3, r0
 8016666:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016668:	7bfb      	ldrb	r3, [r7, #15]
 801666a:	2b02      	cmp	r3, #2
 801666c:	d006      	beq.n	801667c <tcp_parseopt+0x48>
 801666e:	2b02      	cmp	r3, #2
 8016670:	dc2b      	bgt.n	80166ca <tcp_parseopt+0x96>
 8016672:	2b00      	cmp	r3, #0
 8016674:	d041      	beq.n	80166fa <tcp_parseopt+0xc6>
 8016676:	2b01      	cmp	r3, #1
 8016678:	d127      	bne.n	80166ca <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801667a:	e037      	b.n	80166ec <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801667c:	f7ff ffa4 	bl	80165c8 <tcp_get_next_optbyte>
 8016680:	4603      	mov	r3, r0
 8016682:	2b04      	cmp	r3, #4
 8016684:	d13b      	bne.n	80166fe <tcp_parseopt+0xca>
 8016686:	4b25      	ldr	r3, [pc, #148]	; (801671c <tcp_parseopt+0xe8>)
 8016688:	881b      	ldrh	r3, [r3, #0]
 801668a:	3301      	adds	r3, #1
 801668c:	4a22      	ldr	r2, [pc, #136]	; (8016718 <tcp_parseopt+0xe4>)
 801668e:	8812      	ldrh	r2, [r2, #0]
 8016690:	4293      	cmp	r3, r2
 8016692:	da34      	bge.n	80166fe <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016694:	f7ff ff98 	bl	80165c8 <tcp_get_next_optbyte>
 8016698:	4603      	mov	r3, r0
 801669a:	b29b      	uxth	r3, r3
 801669c:	021b      	lsls	r3, r3, #8
 801669e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80166a0:	f7ff ff92 	bl	80165c8 <tcp_get_next_optbyte>
 80166a4:	4603      	mov	r3, r0
 80166a6:	b29a      	uxth	r2, r3
 80166a8:	89bb      	ldrh	r3, [r7, #12]
 80166aa:	4313      	orrs	r3, r2
 80166ac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80166ae:	89bb      	ldrh	r3, [r7, #12]
 80166b0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80166b4:	d804      	bhi.n	80166c0 <tcp_parseopt+0x8c>
 80166b6:	89bb      	ldrh	r3, [r7, #12]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d001      	beq.n	80166c0 <tcp_parseopt+0x8c>
 80166bc:	89ba      	ldrh	r2, [r7, #12]
 80166be:	e001      	b.n	80166c4 <tcp_parseopt+0x90>
 80166c0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80166c8:	e010      	b.n	80166ec <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80166ca:	f7ff ff7d 	bl	80165c8 <tcp_get_next_optbyte>
 80166ce:	4603      	mov	r3, r0
 80166d0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80166d2:	7afb      	ldrb	r3, [r7, #11]
 80166d4:	2b01      	cmp	r3, #1
 80166d6:	d914      	bls.n	8016702 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80166d8:	7afb      	ldrb	r3, [r7, #11]
 80166da:	b29a      	uxth	r2, r3
 80166dc:	4b0f      	ldr	r3, [pc, #60]	; (801671c <tcp_parseopt+0xe8>)
 80166de:	881b      	ldrh	r3, [r3, #0]
 80166e0:	4413      	add	r3, r2
 80166e2:	b29b      	uxth	r3, r3
 80166e4:	3b02      	subs	r3, #2
 80166e6:	b29a      	uxth	r2, r3
 80166e8:	4b0c      	ldr	r3, [pc, #48]	; (801671c <tcp_parseopt+0xe8>)
 80166ea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80166ec:	4b0b      	ldr	r3, [pc, #44]	; (801671c <tcp_parseopt+0xe8>)
 80166ee:	881a      	ldrh	r2, [r3, #0]
 80166f0:	4b09      	ldr	r3, [pc, #36]	; (8016718 <tcp_parseopt+0xe4>)
 80166f2:	881b      	ldrh	r3, [r3, #0]
 80166f4:	429a      	cmp	r2, r3
 80166f6:	d3b3      	bcc.n	8016660 <tcp_parseopt+0x2c>
 80166f8:	e004      	b.n	8016704 <tcp_parseopt+0xd0>
          return;
 80166fa:	bf00      	nop
 80166fc:	e002      	b.n	8016704 <tcp_parseopt+0xd0>
            return;
 80166fe:	bf00      	nop
 8016700:	e000      	b.n	8016704 <tcp_parseopt+0xd0>
            return;
 8016702:	bf00      	nop
      }
    }
  }
}
 8016704:	3710      	adds	r7, #16
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}
 801670a:	bf00      	nop
 801670c:	08024904 	.word	0x08024904
 8016710:	08024d68 	.word	0x08024d68
 8016714:	08024950 	.word	0x08024950
 8016718:	20014374 	.word	0x20014374
 801671c:	2001437c 	.word	0x2001437c

08016720 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016720:	b480      	push	{r7}
 8016722:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016724:	4b05      	ldr	r3, [pc, #20]	; (801673c <tcp_trigger_input_pcb_close+0x1c>)
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	f043 0310 	orr.w	r3, r3, #16
 801672c:	b2da      	uxtb	r2, r3
 801672e:	4b03      	ldr	r3, [pc, #12]	; (801673c <tcp_trigger_input_pcb_close+0x1c>)
 8016730:	701a      	strb	r2, [r3, #0]
}
 8016732:	bf00      	nop
 8016734:	46bd      	mov	sp, r7
 8016736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673a:	4770      	bx	lr
 801673c:	2001438d 	.word	0x2001438d

08016740 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
 8016746:	60f8      	str	r0, [r7, #12]
 8016748:	60b9      	str	r1, [r7, #8]
 801674a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d00a      	beq.n	8016768 <tcp_route+0x28>
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	7a1b      	ldrb	r3, [r3, #8]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d006      	beq.n	8016768 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	7a1b      	ldrb	r3, [r3, #8]
 801675e:	4618      	mov	r0, r3
 8016760:	f7fa fd7c 	bl	801125c <netif_get_by_index>
 8016764:	4603      	mov	r3, r0
 8016766:	e003      	b.n	8016770 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f005 fe5f 	bl	801c42c <ip4_route>
 801676e:	4603      	mov	r3, r0
  }
}
 8016770:	4618      	mov	r0, r3
 8016772:	3710      	adds	r7, #16
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016778:	b590      	push	{r4, r7, lr}
 801677a:	b087      	sub	sp, #28
 801677c:	af00      	add	r7, sp, #0
 801677e:	60f8      	str	r0, [r7, #12]
 8016780:	60b9      	str	r1, [r7, #8]
 8016782:	603b      	str	r3, [r7, #0]
 8016784:	4613      	mov	r3, r2
 8016786:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d105      	bne.n	801679a <tcp_create_segment+0x22>
 801678e:	4b45      	ldr	r3, [pc, #276]	; (80168a4 <tcp_create_segment+0x12c>)
 8016790:	22a3      	movs	r2, #163	; 0xa3
 8016792:	4945      	ldr	r1, [pc, #276]	; (80168a8 <tcp_create_segment+0x130>)
 8016794:	4845      	ldr	r0, [pc, #276]	; (80168ac <tcp_create_segment+0x134>)
 8016796:	f008 f9c9 	bl	801eb2c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d105      	bne.n	80167ac <tcp_create_segment+0x34>
 80167a0:	4b40      	ldr	r3, [pc, #256]	; (80168a4 <tcp_create_segment+0x12c>)
 80167a2:	22a4      	movs	r2, #164	; 0xa4
 80167a4:	4942      	ldr	r1, [pc, #264]	; (80168b0 <tcp_create_segment+0x138>)
 80167a6:	4841      	ldr	r0, [pc, #260]	; (80168ac <tcp_create_segment+0x134>)
 80167a8:	f008 f9c0 	bl	801eb2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80167ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80167b0:	009b      	lsls	r3, r3, #2
 80167b2:	b2db      	uxtb	r3, r3
 80167b4:	f003 0304 	and.w	r3, r3, #4
 80167b8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80167ba:	2003      	movs	r0, #3
 80167bc:	f7fa f9da 	bl	8010b74 <memp_malloc>
 80167c0:	6138      	str	r0, [r7, #16]
 80167c2:	693b      	ldr	r3, [r7, #16]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d104      	bne.n	80167d2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80167c8:	68b8      	ldr	r0, [r7, #8]
 80167ca:	f7fb f907 	bl	80119dc <pbuf_free>
    return NULL;
 80167ce:	2300      	movs	r3, #0
 80167d0:	e064      	b.n	801689c <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 80167d2:	693b      	ldr	r3, [r7, #16]
 80167d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80167d8:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80167da:	693b      	ldr	r3, [r7, #16]
 80167dc:	2200      	movs	r2, #0
 80167de:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	68ba      	ldr	r2, [r7, #8]
 80167e4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	891a      	ldrh	r2, [r3, #8]
 80167ea:	7dfb      	ldrb	r3, [r7, #23]
 80167ec:	b29b      	uxth	r3, r3
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d205      	bcs.n	80167fe <tcp_create_segment+0x86>
 80167f2:	4b2c      	ldr	r3, [pc, #176]	; (80168a4 <tcp_create_segment+0x12c>)
 80167f4:	22b0      	movs	r2, #176	; 0xb0
 80167f6:	492f      	ldr	r1, [pc, #188]	; (80168b4 <tcp_create_segment+0x13c>)
 80167f8:	482c      	ldr	r0, [pc, #176]	; (80168ac <tcp_create_segment+0x134>)
 80167fa:	f008 f997 	bl	801eb2c <iprintf>
  seg->len = p->tot_len - optlen;
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	891a      	ldrh	r2, [r3, #8]
 8016802:	7dfb      	ldrb	r3, [r7, #23]
 8016804:	b29b      	uxth	r3, r3
 8016806:	1ad3      	subs	r3, r2, r3
 8016808:	b29a      	uxth	r2, r3
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	2200      	movs	r2, #0
 8016812:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016814:	2114      	movs	r1, #20
 8016816:	68b8      	ldr	r0, [r7, #8]
 8016818:	f7fb f818 	bl	801184c <pbuf_add_header>
 801681c:	4603      	mov	r3, r0
 801681e:	2b00      	cmp	r3, #0
 8016820:	d004      	beq.n	801682c <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016822:	6938      	ldr	r0, [r7, #16]
 8016824:	f7fd f801 	bl	801382a <tcp_seg_free>
    return NULL;
 8016828:	2300      	movs	r3, #0
 801682a:	e037      	b.n	801689c <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	685b      	ldr	r3, [r3, #4]
 8016830:	685a      	ldr	r2, [r3, #4]
 8016832:	693b      	ldr	r3, [r7, #16]
 8016834:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	8ada      	ldrh	r2, [r3, #22]
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	691c      	ldr	r4, [r3, #16]
 801683e:	4610      	mov	r0, r2
 8016840:	f7f8 fd0c 	bl	800f25c <lwip_htons>
 8016844:	4603      	mov	r3, r0
 8016846:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	8b1a      	ldrh	r2, [r3, #24]
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	691c      	ldr	r4, [r3, #16]
 8016850:	4610      	mov	r0, r2
 8016852:	f7f8 fd03 	bl	800f25c <lwip_htons>
 8016856:	4603      	mov	r3, r0
 8016858:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	691c      	ldr	r4, [r3, #16]
 801685e:	6838      	ldr	r0, [r7, #0]
 8016860:	f7f8 fd11 	bl	800f286 <lwip_htonl>
 8016864:	4603      	mov	r3, r0
 8016866:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016868:	7dfb      	ldrb	r3, [r7, #23]
 801686a:	089b      	lsrs	r3, r3, #2
 801686c:	b2db      	uxtb	r3, r3
 801686e:	b29b      	uxth	r3, r3
 8016870:	3305      	adds	r3, #5
 8016872:	b29b      	uxth	r3, r3
 8016874:	031b      	lsls	r3, r3, #12
 8016876:	b29a      	uxth	r2, r3
 8016878:	79fb      	ldrb	r3, [r7, #7]
 801687a:	b29b      	uxth	r3, r3
 801687c:	4313      	orrs	r3, r2
 801687e:	b29a      	uxth	r2, r3
 8016880:	693b      	ldr	r3, [r7, #16]
 8016882:	691c      	ldr	r4, [r3, #16]
 8016884:	4610      	mov	r0, r2
 8016886:	f7f8 fce9 	bl	800f25c <lwip_htons>
 801688a:	4603      	mov	r3, r0
 801688c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801688e:	693b      	ldr	r3, [r7, #16]
 8016890:	691b      	ldr	r3, [r3, #16]
 8016892:	2200      	movs	r2, #0
 8016894:	749a      	strb	r2, [r3, #18]
 8016896:	2200      	movs	r2, #0
 8016898:	74da      	strb	r2, [r3, #19]
  return seg;
 801689a:	693b      	ldr	r3, [r7, #16]
}
 801689c:	4618      	mov	r0, r3
 801689e:	371c      	adds	r7, #28
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd90      	pop	{r4, r7, pc}
 80168a4:	08024d84 	.word	0x08024d84
 80168a8:	08024db8 	.word	0x08024db8
 80168ac:	08024dd8 	.word	0x08024dd8
 80168b0:	08024e00 	.word	0x08024e00
 80168b4:	08024e24 	.word	0x08024e24

080168b8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b086      	sub	sp, #24
 80168bc:	af00      	add	r7, sp, #0
 80168be:	607b      	str	r3, [r7, #4]
 80168c0:	4603      	mov	r3, r0
 80168c2:	73fb      	strb	r3, [r7, #15]
 80168c4:	460b      	mov	r3, r1
 80168c6:	81bb      	strh	r3, [r7, #12]
 80168c8:	4613      	mov	r3, r2
 80168ca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80168cc:	89bb      	ldrh	r3, [r7, #12]
 80168ce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d105      	bne.n	80168e2 <tcp_pbuf_prealloc+0x2a>
 80168d6:	4b30      	ldr	r3, [pc, #192]	; (8016998 <tcp_pbuf_prealloc+0xe0>)
 80168d8:	22e8      	movs	r2, #232	; 0xe8
 80168da:	4930      	ldr	r1, [pc, #192]	; (801699c <tcp_pbuf_prealloc+0xe4>)
 80168dc:	4830      	ldr	r0, [pc, #192]	; (80169a0 <tcp_pbuf_prealloc+0xe8>)
 80168de:	f008 f925 	bl	801eb2c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80168e2:	6a3b      	ldr	r3, [r7, #32]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d105      	bne.n	80168f4 <tcp_pbuf_prealloc+0x3c>
 80168e8:	4b2b      	ldr	r3, [pc, #172]	; (8016998 <tcp_pbuf_prealloc+0xe0>)
 80168ea:	22e9      	movs	r2, #233	; 0xe9
 80168ec:	492d      	ldr	r1, [pc, #180]	; (80169a4 <tcp_pbuf_prealloc+0xec>)
 80168ee:	482c      	ldr	r0, [pc, #176]	; (80169a0 <tcp_pbuf_prealloc+0xe8>)
 80168f0:	f008 f91c 	bl	801eb2c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80168f4:	89ba      	ldrh	r2, [r7, #12]
 80168f6:	897b      	ldrh	r3, [r7, #10]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d221      	bcs.n	8016940 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80168fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016900:	f003 0302 	and.w	r3, r3, #2
 8016904:	2b00      	cmp	r3, #0
 8016906:	d111      	bne.n	801692c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016908:	6a3b      	ldr	r3, [r7, #32]
 801690a:	8b5b      	ldrh	r3, [r3, #26]
 801690c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016910:	2b00      	cmp	r3, #0
 8016912:	d115      	bne.n	8016940 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016914:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016918:	2b00      	cmp	r3, #0
 801691a:	d007      	beq.n	801692c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801691c:	6a3b      	ldr	r3, [r7, #32]
 801691e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016920:	2b00      	cmp	r3, #0
 8016922:	d103      	bne.n	801692c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016924:	6a3b      	ldr	r3, [r7, #32]
 8016926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8016928:	2b00      	cmp	r3, #0
 801692a:	d009      	beq.n	8016940 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801692c:	89bb      	ldrh	r3, [r7, #12]
 801692e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8016932:	f023 0203 	bic.w	r2, r3, #3
 8016936:	897b      	ldrh	r3, [r7, #10]
 8016938:	4293      	cmp	r3, r2
 801693a:	bf28      	it	cs
 801693c:	4613      	movcs	r3, r2
 801693e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016940:	8af9      	ldrh	r1, [r7, #22]
 8016942:	7bfb      	ldrb	r3, [r7, #15]
 8016944:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016948:	4618      	mov	r0, r3
 801694a:	f7fa fd31 	bl	80113b0 <pbuf_alloc>
 801694e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016950:	693b      	ldr	r3, [r7, #16]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d101      	bne.n	801695a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8016956:	2300      	movs	r3, #0
 8016958:	e019      	b.n	801698e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801695a:	693b      	ldr	r3, [r7, #16]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d006      	beq.n	8016970 <tcp_pbuf_prealloc+0xb8>
 8016962:	4b0d      	ldr	r3, [pc, #52]	; (8016998 <tcp_pbuf_prealloc+0xe0>)
 8016964:	f240 120b 	movw	r2, #267	; 0x10b
 8016968:	490f      	ldr	r1, [pc, #60]	; (80169a8 <tcp_pbuf_prealloc+0xf0>)
 801696a:	480d      	ldr	r0, [pc, #52]	; (80169a0 <tcp_pbuf_prealloc+0xe8>)
 801696c:	f008 f8de 	bl	801eb2c <iprintf>
  *oversize = p->len - length;
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	895a      	ldrh	r2, [r3, #10]
 8016974:	89bb      	ldrh	r3, [r7, #12]
 8016976:	1ad3      	subs	r3, r2, r3
 8016978:	b29a      	uxth	r2, r3
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801697e:	693b      	ldr	r3, [r7, #16]
 8016980:	89ba      	ldrh	r2, [r7, #12]
 8016982:	811a      	strh	r2, [r3, #8]
 8016984:	693b      	ldr	r3, [r7, #16]
 8016986:	891a      	ldrh	r2, [r3, #8]
 8016988:	693b      	ldr	r3, [r7, #16]
 801698a:	815a      	strh	r2, [r3, #10]
  return p;
 801698c:	693b      	ldr	r3, [r7, #16]
}
 801698e:	4618      	mov	r0, r3
 8016990:	3718      	adds	r7, #24
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
 8016996:	bf00      	nop
 8016998:	08024d84 	.word	0x08024d84
 801699c:	08024e3c 	.word	0x08024e3c
 80169a0:	08024dd8 	.word	0x08024dd8
 80169a4:	08024e60 	.word	0x08024e60
 80169a8:	08024e80 	.word	0x08024e80

080169ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b082      	sub	sp, #8
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
 80169b4:	460b      	mov	r3, r1
 80169b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d106      	bne.n	80169cc <tcp_write_checks+0x20>
 80169be:	4b33      	ldr	r3, [pc, #204]	; (8016a8c <tcp_write_checks+0xe0>)
 80169c0:	f240 1233 	movw	r2, #307	; 0x133
 80169c4:	4932      	ldr	r1, [pc, #200]	; (8016a90 <tcp_write_checks+0xe4>)
 80169c6:	4833      	ldr	r0, [pc, #204]	; (8016a94 <tcp_write_checks+0xe8>)
 80169c8:	f008 f8b0 	bl	801eb2c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	7d1b      	ldrb	r3, [r3, #20]
 80169d0:	2b04      	cmp	r3, #4
 80169d2:	d00e      	beq.n	80169f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80169d8:	2b07      	cmp	r3, #7
 80169da:	d00a      	beq.n	80169f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80169e0:	2b02      	cmp	r3, #2
 80169e2:	d006      	beq.n	80169f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80169e8:	2b03      	cmp	r3, #3
 80169ea:	d002      	beq.n	80169f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80169ec:	f06f 030a 	mvn.w	r3, #10
 80169f0:	e048      	b.n	8016a84 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80169f2:	887b      	ldrh	r3, [r7, #2]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d101      	bne.n	80169fc <tcp_write_checks+0x50>
    return ERR_OK;
 80169f8:	2300      	movs	r3, #0
 80169fa:	e043      	b.n	8016a84 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016a02:	887a      	ldrh	r2, [r7, #2]
 8016a04:	429a      	cmp	r2, r3
 8016a06:	d909      	bls.n	8016a1c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	8b5b      	ldrh	r3, [r3, #26]
 8016a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016a16:	f04f 33ff 	mov.w	r3, #4294967295
 8016a1a:	e033      	b.n	8016a84 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a22:	2b08      	cmp	r3, #8
 8016a24:	d909      	bls.n	8016a3a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	8b5b      	ldrh	r3, [r3, #26]
 8016a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a2e:	b29a      	uxth	r2, r3
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016a34:	f04f 33ff 	mov.w	r3, #4294967295
 8016a38:	e024      	b.n	8016a84 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d00f      	beq.n	8016a64 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d11a      	bne.n	8016a82 <tcp_write_checks+0xd6>
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d116      	bne.n	8016a82 <tcp_write_checks+0xd6>
 8016a54:	4b0d      	ldr	r3, [pc, #52]	; (8016a8c <tcp_write_checks+0xe0>)
 8016a56:	f240 1255 	movw	r2, #341	; 0x155
 8016a5a:	490f      	ldr	r1, [pc, #60]	; (8016a98 <tcp_write_checks+0xec>)
 8016a5c:	480d      	ldr	r0, [pc, #52]	; (8016a94 <tcp_write_checks+0xe8>)
 8016a5e:	f008 f865 	bl	801eb2c <iprintf>
 8016a62:	e00e      	b.n	8016a82 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d103      	bne.n	8016a74 <tcp_write_checks+0xc8>
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d006      	beq.n	8016a82 <tcp_write_checks+0xd6>
 8016a74:	4b05      	ldr	r3, [pc, #20]	; (8016a8c <tcp_write_checks+0xe0>)
 8016a76:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8016a7a:	4908      	ldr	r1, [pc, #32]	; (8016a9c <tcp_write_checks+0xf0>)
 8016a7c:	4805      	ldr	r0, [pc, #20]	; (8016a94 <tcp_write_checks+0xe8>)
 8016a7e:	f008 f855 	bl	801eb2c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016a82:	2300      	movs	r3, #0
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	3708      	adds	r7, #8
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}
 8016a8c:	08024d84 	.word	0x08024d84
 8016a90:	08024e94 	.word	0x08024e94
 8016a94:	08024dd8 	.word	0x08024dd8
 8016a98:	08024eb4 	.word	0x08024eb4
 8016a9c:	08024ef0 	.word	0x08024ef0

08016aa0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016aa0:	b590      	push	{r4, r7, lr}
 8016aa2:	b09d      	sub	sp, #116	; 0x74
 8016aa4:	af04      	add	r7, sp, #16
 8016aa6:	60f8      	str	r0, [r7, #12]
 8016aa8:	60b9      	str	r1, [r7, #8]
 8016aaa:	4611      	mov	r1, r2
 8016aac:	461a      	mov	r2, r3
 8016aae:	460b      	mov	r3, r1
 8016ab0:	80fb      	strh	r3, [r7, #6]
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8016aba:	2300      	movs	r3, #0
 8016abc:	643b      	str	r3, [r7, #64]	; 0x40
 8016abe:	2300      	movs	r3, #0
 8016ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8016aca:	2300      	movs	r3, #0
 8016acc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8016ada:	2300      	movs	r3, #0
 8016adc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d109      	bne.n	8016b06 <tcp_write+0x66>
 8016af2:	4bad      	ldr	r3, [pc, #692]	; (8016da8 <tcp_write+0x308>)
 8016af4:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8016af8:	49ac      	ldr	r1, [pc, #688]	; (8016dac <tcp_write+0x30c>)
 8016afa:	48ad      	ldr	r0, [pc, #692]	; (8016db0 <tcp_write+0x310>)
 8016afc:	f008 f816 	bl	801eb2c <iprintf>
 8016b00:	f06f 030f 	mvn.w	r3, #15
 8016b04:	e37d      	b.n	8017202 <tcp_write+0x762>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016b0c:	085b      	lsrs	r3, r3, #1
 8016b0e:	b29a      	uxth	r2, r3
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b14:	4293      	cmp	r3, r2
 8016b16:	bf28      	it	cs
 8016b18:	4613      	movcs	r3, r2
 8016b1a:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8016b1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d102      	bne.n	8016b28 <tcp_write+0x88>
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b26:	e000      	b.n	8016b2a <tcp_write+0x8a>
 8016b28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016b2a:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d109      	bne.n	8016b46 <tcp_write+0xa6>
 8016b32:	4b9d      	ldr	r3, [pc, #628]	; (8016da8 <tcp_write+0x308>)
 8016b34:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016b38:	499e      	ldr	r1, [pc, #632]	; (8016db4 <tcp_write+0x314>)
 8016b3a:	489d      	ldr	r0, [pc, #628]	; (8016db0 <tcp_write+0x310>)
 8016b3c:	f007 fff6 	bl	801eb2c <iprintf>
 8016b40:	f06f 030f 	mvn.w	r3, #15
 8016b44:	e35d      	b.n	8017202 <tcp_write+0x762>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016b46:	88fb      	ldrh	r3, [r7, #6]
 8016b48:	4619      	mov	r1, r3
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f7ff ff2e 	bl	80169ac <tcp_write_checks>
 8016b50:	4603      	mov	r3, r0
 8016b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8016b56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d002      	beq.n	8016b64 <tcp_write+0xc4>
    return err;
 8016b5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016b62:	e34e      	b.n	8017202 <tcp_write+0x762>
  }
  queuelen = pcb->snd_queuelen;
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016b6e:	2300      	movs	r3, #0
 8016b70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	f000 8127 	beq.w	8016dcc <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b82:	643b      	str	r3, [r7, #64]	; 0x40
 8016b84:	e002      	b.n	8016b8c <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8016b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d1f8      	bne.n	8016b86 <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b96:	7b1b      	ldrb	r3, [r3, #12]
 8016b98:	009b      	lsls	r3, r3, #2
 8016b9a:	b29b      	uxth	r3, r3
 8016b9c:	f003 0304 	and.w	r3, r3, #4
 8016ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016ba2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ba6:	891b      	ldrh	r3, [r3, #8]
 8016ba8:	4619      	mov	r1, r3
 8016baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bac:	440b      	add	r3, r1
 8016bae:	429a      	cmp	r2, r3
 8016bb0:	da06      	bge.n	8016bc0 <tcp_write+0x120>
 8016bb2:	4b7d      	ldr	r3, [pc, #500]	; (8016da8 <tcp_write+0x308>)
 8016bb4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016bb8:	497f      	ldr	r1, [pc, #508]	; (8016db8 <tcp_write+0x318>)
 8016bba:	487d      	ldr	r0, [pc, #500]	; (8016db0 <tcp_write+0x310>)
 8016bbc:	f007 ffb6 	bl	801eb2c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bc2:	891a      	ldrh	r2, [r3, #8]
 8016bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bc6:	4413      	add	r3, r2
 8016bc8:	b29b      	uxth	r3, r3
 8016bca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016bcc:	1ad3      	subs	r3, r2, r3
 8016bce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8016bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bda:	895b      	ldrh	r3, [r3, #10]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d006      	beq.n	8016bee <tcp_write+0x14e>
 8016be0:	4b71      	ldr	r3, [pc, #452]	; (8016da8 <tcp_write+0x308>)
 8016be2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8016be6:	4975      	ldr	r1, [pc, #468]	; (8016dbc <tcp_write+0x31c>)
 8016be8:	4871      	ldr	r0, [pc, #452]	; (8016db0 <tcp_write+0x310>)
 8016bea:	f007 ff9f 	bl	801eb2c <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016bf4:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8016bf6:	8afb      	ldrh	r3, [r7, #22]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d02e      	beq.n	8016c5a <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016bfc:	8afb      	ldrh	r3, [r7, #22]
 8016bfe:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d206      	bcs.n	8016c14 <tcp_write+0x174>
 8016c06:	4b68      	ldr	r3, [pc, #416]	; (8016da8 <tcp_write+0x308>)
 8016c08:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016c0c:	496c      	ldr	r1, [pc, #432]	; (8016dc0 <tcp_write+0x320>)
 8016c0e:	4868      	ldr	r0, [pc, #416]	; (8016db0 <tcp_write+0x310>)
 8016c10:	f007 ff8c 	bl	801eb2c <iprintf>
      seg = last_unsent;
 8016c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c16:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016c18:	8afb      	ldrh	r3, [r7, #22]
 8016c1a:	88fa      	ldrh	r2, [r7, #6]
 8016c1c:	4293      	cmp	r3, r2
 8016c1e:	bf28      	it	cs
 8016c20:	4613      	movcs	r3, r2
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016c28:	4293      	cmp	r3, r2
 8016c2a:	bf28      	it	cs
 8016c2c:	4613      	movcs	r3, r2
 8016c2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 8016c32:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016c36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016c3a:	4413      	add	r3, r2
 8016c3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 8016c40:	8afa      	ldrh	r2, [r7, #22]
 8016c42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016c46:	1ad3      	subs	r3, r2, r3
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8016c4c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016c50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016c54:	1ad3      	subs	r3, r2, r3
 8016c56:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016c5a:	8afb      	ldrh	r3, [r7, #22]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d00b      	beq.n	8016c78 <tcp_write+0x1d8>
 8016c60:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016c64:	88fb      	ldrh	r3, [r7, #6]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d006      	beq.n	8016c78 <tcp_write+0x1d8>
 8016c6a:	4b4f      	ldr	r3, [pc, #316]	; (8016da8 <tcp_write+0x308>)
 8016c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c70:	4954      	ldr	r1, [pc, #336]	; (8016dc4 <tcp_write+0x324>)
 8016c72:	484f      	ldr	r0, [pc, #316]	; (8016db0 <tcp_write+0x310>)
 8016c74:	f007 ff5a 	bl	801eb2c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016c78:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016c7c:	88fb      	ldrh	r3, [r7, #6]
 8016c7e:	429a      	cmp	r2, r3
 8016c80:	f080 8172 	bcs.w	8016f68 <tcp_write+0x4c8>
 8016c84:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	f000 816d 	beq.w	8016f68 <tcp_write+0x4c8>
 8016c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c90:	891b      	ldrh	r3, [r3, #8]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	f000 8168 	beq.w	8016f68 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016c98:	88fa      	ldrh	r2, [r7, #6]
 8016c9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016c9e:	1ad2      	subs	r2, r2, r3
 8016ca0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8016ca4:	4293      	cmp	r3, r2
 8016ca6:	bfa8      	it	ge
 8016ca8:	4613      	movge	r3, r2
 8016caa:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 8016cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016cae:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016cb0:	797b      	ldrb	r3, [r7, #5]
 8016cb2:	f003 0301 	and.w	r3, r3, #1
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d02b      	beq.n	8016d12 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016cba:	f107 0016 	add.w	r0, r7, #22
 8016cbe:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016cc2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8016cc4:	2301      	movs	r3, #1
 8016cc6:	9302      	str	r3, [sp, #8]
 8016cc8:	797b      	ldrb	r3, [r7, #5]
 8016cca:	9301      	str	r3, [sp, #4]
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	9300      	str	r3, [sp, #0]
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	2000      	movs	r0, #0
 8016cd4:	f7ff fdf0 	bl	80168b8 <tcp_pbuf_prealloc>
 8016cd8:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	f000 825e 	beq.w	801719e <tcp_write+0x6fe>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8016ce2:	8afb      	ldrh	r3, [r7, #22]
 8016ce4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cea:	6858      	ldr	r0, [r3, #4]
 8016cec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016cf0:	68ba      	ldr	r2, [r7, #8]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016cf6:	4619      	mov	r1, r3
 8016cf8:	f007 f9d4 	bl	801e0a4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016cfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016cfe:	f7fa fefb 	bl	8011af8 <pbuf_clen>
 8016d02:	4603      	mov	r3, r0
 8016d04:	461a      	mov	r2, r3
 8016d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016d0a:	4413      	add	r3, r2
 8016d0c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016d10:	e042      	b.n	8016d98 <tcp_write+0x2f8>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8016d18:	e002      	b.n	8016d20 <tcp_write+0x280>
 8016d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d1f8      	bne.n	8016d1a <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d2a:	7b1b      	ldrb	r3, [r3, #12]
 8016d2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d116      	bne.n	8016d62 <tcp_write+0x2c2>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d36:	685b      	ldr	r3, [r3, #4]
 8016d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d3a:	8952      	ldrh	r2, [r2, #10]
 8016d3c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016d3e:	68ba      	ldr	r2, [r7, #8]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d10e      	bne.n	8016d62 <tcp_write+0x2c2>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016d44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d006      	beq.n	8016d5a <tcp_write+0x2ba>
 8016d4c:	4b16      	ldr	r3, [pc, #88]	; (8016da8 <tcp_write+0x308>)
 8016d4e:	f240 2231 	movw	r2, #561	; 0x231
 8016d52:	491d      	ldr	r1, [pc, #116]	; (8016dc8 <tcp_write+0x328>)
 8016d54:	4816      	ldr	r0, [pc, #88]	; (8016db0 <tcp_write+0x310>)
 8016d56:	f007 fee9 	bl	801eb2c <iprintf>
          extendlen = seglen;
 8016d5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d5c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8016d60:	e01a      	b.n	8016d98 <tcp_write+0x2f8>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016d62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d64:	2201      	movs	r2, #1
 8016d66:	4619      	mov	r1, r3
 8016d68:	2000      	movs	r0, #0
 8016d6a:	f7fa fb21 	bl	80113b0 <pbuf_alloc>
 8016d6e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	f000 8215 	beq.w	80171a2 <tcp_write+0x702>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016d78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016d7c:	68ba      	ldr	r2, [r7, #8]
 8016d7e:	441a      	add	r2, r3
 8016d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d82:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016d84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d86:	f7fa feb7 	bl	8011af8 <pbuf_clen>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016d92:	4413      	add	r3, r2
 8016d94:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016d98:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016d9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d9e:	4413      	add	r3, r2
 8016da0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8016da4:	e0e0      	b.n	8016f68 <tcp_write+0x4c8>
 8016da6:	bf00      	nop
 8016da8:	08024d84 	.word	0x08024d84
 8016dac:	08024f24 	.word	0x08024f24
 8016db0:	08024dd8 	.word	0x08024dd8
 8016db4:	08024f3c 	.word	0x08024f3c
 8016db8:	08024f70 	.word	0x08024f70
 8016dbc:	08024f88 	.word	0x08024f88
 8016dc0:	08024fb8 	.word	0x08024fb8
 8016dc4:	08024fd8 	.word	0x08024fd8
 8016dc8:	08024ff8 	.word	0x08024ff8
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	f000 80c8 	beq.w	8016f68 <tcp_write+0x4c8>
 8016dd8:	4ba3      	ldr	r3, [pc, #652]	; (8017068 <tcp_write+0x5c8>)
 8016dda:	f240 224a 	movw	r2, #586	; 0x24a
 8016dde:	49a3      	ldr	r1, [pc, #652]	; (801706c <tcp_write+0x5cc>)
 8016de0:	48a3      	ldr	r0, [pc, #652]	; (8017070 <tcp_write+0x5d0>)
 8016de2:	f007 fea3 	bl	801eb2c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016de6:	e0bf      	b.n	8016f68 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 8016de8:	88fa      	ldrh	r2, [r7, #6]
 8016dea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016dee:	1ad3      	subs	r3, r2, r3
 8016df0:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8016df2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016df6:	b29b      	uxth	r3, r3
 8016df8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016dfa:	1ad3      	subs	r3, r2, r3
 8016dfc:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016dfe:	8bfa      	ldrh	r2, [r7, #30]
 8016e00:	8c3b      	ldrh	r3, [r7, #32]
 8016e02:	4293      	cmp	r3, r2
 8016e04:	bf28      	it	cs
 8016e06:	4613      	movcs	r3, r2
 8016e08:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016e0a:	797b      	ldrb	r3, [r7, #5]
 8016e0c:	f003 0301 	and.w	r3, r3, #1
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d036      	beq.n	8016e82 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016e14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e18:	b29a      	uxth	r2, r3
 8016e1a:	8bbb      	ldrh	r3, [r7, #28]
 8016e1c:	4413      	add	r3, r2
 8016e1e:	b299      	uxth	r1, r3
 8016e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	bf0c      	ite	eq
 8016e26:	2301      	moveq	r3, #1
 8016e28:	2300      	movne	r3, #0
 8016e2a:	b2db      	uxtb	r3, r3
 8016e2c:	f107 0016 	add.w	r0, r7, #22
 8016e30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016e32:	9302      	str	r3, [sp, #8]
 8016e34:	797b      	ldrb	r3, [r7, #5]
 8016e36:	9301      	str	r3, [sp, #4]
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	9300      	str	r3, [sp, #0]
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	2036      	movs	r0, #54	; 0x36
 8016e40:	f7ff fd3a 	bl	80168b8 <tcp_pbuf_prealloc>
 8016e44:	6378      	str	r0, [r7, #52]	; 0x34
 8016e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	f000 81ac 	beq.w	80171a6 <tcp_write+0x706>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e50:	895b      	ldrh	r3, [r3, #10]
 8016e52:	8bba      	ldrh	r2, [r7, #28]
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d906      	bls.n	8016e66 <tcp_write+0x3c6>
 8016e58:	4b83      	ldr	r3, [pc, #524]	; (8017068 <tcp_write+0x5c8>)
 8016e5a:	f240 2266 	movw	r2, #614	; 0x266
 8016e5e:	4985      	ldr	r1, [pc, #532]	; (8017074 <tcp_write+0x5d4>)
 8016e60:	4883      	ldr	r0, [pc, #524]	; (8017070 <tcp_write+0x5d0>)
 8016e62:	f007 fe63 	bl	801eb2c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e68:	685a      	ldr	r2, [r3, #4]
 8016e6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016e6e:	18d0      	adds	r0, r2, r3
 8016e70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016e74:	68ba      	ldr	r2, [r7, #8]
 8016e76:	4413      	add	r3, r2
 8016e78:	8bba      	ldrh	r2, [r7, #28]
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	f007 f912 	bl	801e0a4 <memcpy>
 8016e80:	e02f      	b.n	8016ee2 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016e82:	8afb      	ldrh	r3, [r7, #22]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d006      	beq.n	8016e96 <tcp_write+0x3f6>
 8016e88:	4b77      	ldr	r3, [pc, #476]	; (8017068 <tcp_write+0x5c8>)
 8016e8a:	f240 2271 	movw	r2, #625	; 0x271
 8016e8e:	497a      	ldr	r1, [pc, #488]	; (8017078 <tcp_write+0x5d8>)
 8016e90:	4877      	ldr	r0, [pc, #476]	; (8017070 <tcp_write+0x5d0>)
 8016e92:	f007 fe4b 	bl	801eb2c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016e96:	8bbb      	ldrh	r3, [r7, #28]
 8016e98:	2201      	movs	r2, #1
 8016e9a:	4619      	mov	r1, r3
 8016e9c:	2036      	movs	r0, #54	; 0x36
 8016e9e:	f7fa fa87 	bl	80113b0 <pbuf_alloc>
 8016ea2:	61b8      	str	r0, [r7, #24]
 8016ea4:	69bb      	ldr	r3, [r7, #24]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	f000 817f 	beq.w	80171aa <tcp_write+0x70a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016eac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016eb0:	68ba      	ldr	r2, [r7, #8]
 8016eb2:	441a      	add	r2, r3
 8016eb4:	69bb      	ldr	r3, [r7, #24]
 8016eb6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ebc:	b29b      	uxth	r3, r3
 8016ebe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ec2:	4619      	mov	r1, r3
 8016ec4:	2036      	movs	r0, #54	; 0x36
 8016ec6:	f7fa fa73 	bl	80113b0 <pbuf_alloc>
 8016eca:	6378      	str	r0, [r7, #52]	; 0x34
 8016ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d103      	bne.n	8016eda <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016ed2:	69b8      	ldr	r0, [r7, #24]
 8016ed4:	f7fa fd82 	bl	80119dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016ed8:	e16a      	b.n	80171b0 <tcp_write+0x710>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016eda:	69b9      	ldr	r1, [r7, #24]
 8016edc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016ede:	f7fa fe4b 	bl	8011b78 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016ee2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016ee4:	f7fa fe08 	bl	8011af8 <pbuf_clen>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	461a      	mov	r2, r3
 8016eec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016ef0:	4413      	add	r3, r2
 8016ef2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016ef6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8016efa:	2b09      	cmp	r3, #9
 8016efc:	d903      	bls.n	8016f06 <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016efe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016f00:	f7fa fd6c 	bl	80119dc <pbuf_free>
      goto memerr;
 8016f04:	e154      	b.n	80171b0 <tcp_write+0x710>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016f0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8016f0e:	441a      	add	r2, r3
 8016f10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016f14:	9300      	str	r3, [sp, #0]
 8016f16:	4613      	mov	r3, r2
 8016f18:	2200      	movs	r2, #0
 8016f1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016f1c:	68f8      	ldr	r0, [r7, #12]
 8016f1e:	f7ff fc2b 	bl	8016778 <tcp_create_segment>
 8016f22:	6578      	str	r0, [r7, #84]	; 0x54
 8016f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	f000 8141 	beq.w	80171ae <tcp_write+0x70e>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8016f2c:	8afa      	ldrh	r2, [r7, #22]
 8016f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f30:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d102      	bne.n	8016f3e <tcp_write+0x49e>
      queue = seg;
 8016f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016f3c:	e00c      	b.n	8016f58 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d106      	bne.n	8016f52 <tcp_write+0x4b2>
 8016f44:	4b48      	ldr	r3, [pc, #288]	; (8017068 <tcp_write+0x5c8>)
 8016f46:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016f4a:	494c      	ldr	r1, [pc, #304]	; (801707c <tcp_write+0x5dc>)
 8016f4c:	4848      	ldr	r0, [pc, #288]	; (8017070 <tcp_write+0x5d0>)
 8016f4e:	f007 fded 	bl	801eb2c <iprintf>
      prev_seg->next = seg;
 8016f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016f56:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f5a:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016f5c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016f60:	8bbb      	ldrh	r3, [r7, #28]
 8016f62:	4413      	add	r3, r2
 8016f64:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 8016f68:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8016f6c:	88fb      	ldrh	r3, [r7, #6]
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	f4ff af3a 	bcc.w	8016de8 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8016f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d00b      	beq.n	8016f92 <tcp_write+0x4f2>
 8016f7a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d007      	beq.n	8016f92 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8016f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f84:	895a      	ldrh	r2, [r3, #10]
 8016f86:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8016f8a:	4413      	add	r3, r2
 8016f8c:	b29a      	uxth	r2, r3
 8016f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f90:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016f92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d045      	beq.n	8017026 <tcp_write+0x586>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f9c:	685b      	ldr	r3, [r3, #4]
 8016f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8016fa0:	e021      	b.n	8016fe6 <tcp_write+0x546>
      p->tot_len += oversize_used;
 8016fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa4:	891a      	ldrh	r2, [r3, #8]
 8016fa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016faa:	4413      	add	r3, r2
 8016fac:	b29a      	uxth	r2, r3
 8016fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d112      	bne.n	8016fe0 <tcp_write+0x540>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fbc:	685b      	ldr	r3, [r3, #4]
 8016fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fc0:	8952      	ldrh	r2, [r2, #10]
 8016fc2:	4413      	add	r3, r2
 8016fc4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016fc8:	68b9      	ldr	r1, [r7, #8]
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f007 f86a 	bl	801e0a4 <memcpy>
        p->len += oversize_used;
 8016fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd2:	895a      	ldrh	r2, [r3, #10]
 8016fd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016fd8:	4413      	add	r3, r2
 8016fda:	b29a      	uxth	r2, r3
 8016fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fde:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8016fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d1da      	bne.n	8016fa2 <tcp_write+0x502>
      }
    }
    last_unsent->len += oversize_used;
 8016fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fee:	891a      	ldrh	r2, [r3, #8]
 8016ff0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ff4:	4413      	add	r3, r2
 8016ff6:	b29a      	uxth	r2, r3
 8016ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ffa:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8016ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ffe:	895b      	ldrh	r3, [r3, #10]
 8017000:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017004:	429a      	cmp	r2, r3
 8017006:	d906      	bls.n	8017016 <tcp_write+0x576>
 8017008:	4b17      	ldr	r3, [pc, #92]	; (8017068 <tcp_write+0x5c8>)
 801700a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801700e:	491c      	ldr	r1, [pc, #112]	; (8017080 <tcp_write+0x5e0>)
 8017010:	4817      	ldr	r0, [pc, #92]	; (8017070 <tcp_write+0x5d0>)
 8017012:	f007 fd8b 	bl	801eb2c <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8017016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017018:	895a      	ldrh	r2, [r3, #10]
 801701a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801701e:	1ad3      	subs	r3, r2, r3
 8017020:	b29a      	uxth	r2, r3
 8017022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017024:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017026:	8afa      	ldrh	r2, [r7, #22]
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801702e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017030:	2b00      	cmp	r3, #0
 8017032:	d029      	beq.n	8017088 <tcp_write+0x5e8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017036:	2b00      	cmp	r3, #0
 8017038:	d106      	bne.n	8017048 <tcp_write+0x5a8>
 801703a:	4b0b      	ldr	r3, [pc, #44]	; (8017068 <tcp_write+0x5c8>)
 801703c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017040:	4910      	ldr	r1, [pc, #64]	; (8017084 <tcp_write+0x5e4>)
 8017042:	480b      	ldr	r0, [pc, #44]	; (8017070 <tcp_write+0x5d0>)
 8017044:	f007 fd72 	bl	801eb2c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801704a:	685b      	ldr	r3, [r3, #4]
 801704c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801704e:	4618      	mov	r0, r3
 8017050:	f7fa fd92 	bl	8011b78 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017056:	891a      	ldrh	r2, [r3, #8]
 8017058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801705a:	891b      	ldrh	r3, [r3, #8]
 801705c:	4413      	add	r3, r2
 801705e:	b29a      	uxth	r2, r3
 8017060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017062:	811a      	strh	r2, [r3, #8]
 8017064:	e04d      	b.n	8017102 <tcp_write+0x662>
 8017066:	bf00      	nop
 8017068:	08024d84 	.word	0x08024d84
 801706c:	08025024 	.word	0x08025024
 8017070:	08024dd8 	.word	0x08024dd8
 8017074:	08025054 	.word	0x08025054
 8017078:	08025094 	.word	0x08025094
 801707c:	080250a4 	.word	0x080250a4
 8017080:	080250b8 	.word	0x080250b8
 8017084:	080250e4 	.word	0x080250e4
  } else if (extendlen > 0) {
 8017088:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801708c:	2b00      	cmp	r3, #0
 801708e:	d038      	beq.n	8017102 <tcp_write+0x662>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017092:	2b00      	cmp	r3, #0
 8017094:	d003      	beq.n	801709e <tcp_write+0x5fe>
 8017096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017098:	685b      	ldr	r3, [r3, #4]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d106      	bne.n	80170ac <tcp_write+0x60c>
 801709e:	4b5b      	ldr	r3, [pc, #364]	; (801720c <tcp_write+0x76c>)
 80170a0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80170a4:	495a      	ldr	r1, [pc, #360]	; (8017210 <tcp_write+0x770>)
 80170a6:	485b      	ldr	r0, [pc, #364]	; (8017214 <tcp_write+0x774>)
 80170a8:	f007 fd40 	bl	801eb2c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80170ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80170b2:	e00a      	b.n	80170ca <tcp_write+0x62a>
      p->tot_len += extendlen;
 80170b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b6:	891a      	ldrh	r2, [r3, #8]
 80170b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80170bc:	4413      	add	r3, r2
 80170be:	b29a      	uxth	r2, r3
 80170c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80170c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80170ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d1f0      	bne.n	80170b4 <tcp_write+0x614>
    }
    p->tot_len += extendlen;
 80170d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d4:	891a      	ldrh	r2, [r3, #8]
 80170d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80170da:	4413      	add	r3, r2
 80170dc:	b29a      	uxth	r2, r3
 80170de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80170e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e4:	895a      	ldrh	r2, [r3, #10]
 80170e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80170ea:	4413      	add	r3, r2
 80170ec:	b29a      	uxth	r2, r3
 80170ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80170f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170f4:	891a      	ldrh	r2, [r3, #8]
 80170f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80170fa:	4413      	add	r3, r2
 80170fc:	b29a      	uxth	r2, r3
 80170fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017100:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017104:	2b00      	cmp	r3, #0
 8017106:	d103      	bne.n	8017110 <tcp_write+0x670>
    pcb->unsent = queue;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801710c:	66da      	str	r2, [r3, #108]	; 0x6c
 801710e:	e002      	b.n	8017116 <tcp_write+0x676>
  } else {
    last_unsent->next = queue;
 8017110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017114:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801711a:	88fb      	ldrh	r3, [r7, #6]
 801711c:	441a      	add	r2, r3
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017128:	88fb      	ldrh	r3, [r7, #6]
 801712a:	1ad3      	subs	r3, r2, r3
 801712c:	b29a      	uxth	r2, r3
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 801713a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017144:	2b00      	cmp	r3, #0
 8017146:	d00e      	beq.n	8017166 <tcp_write+0x6c6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801714c:	2b00      	cmp	r3, #0
 801714e:	d10a      	bne.n	8017166 <tcp_write+0x6c6>
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017154:	2b00      	cmp	r3, #0
 8017156:	d106      	bne.n	8017166 <tcp_write+0x6c6>
 8017158:	4b2c      	ldr	r3, [pc, #176]	; (801720c <tcp_write+0x76c>)
 801715a:	f240 3212 	movw	r2, #786	; 0x312
 801715e:	492e      	ldr	r1, [pc, #184]	; (8017218 <tcp_write+0x778>)
 8017160:	482c      	ldr	r0, [pc, #176]	; (8017214 <tcp_write+0x774>)
 8017162:	f007 fce3 	bl	801eb2c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017168:	2b00      	cmp	r3, #0
 801716a:	d016      	beq.n	801719a <tcp_write+0x6fa>
 801716c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801716e:	691b      	ldr	r3, [r3, #16]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d012      	beq.n	801719a <tcp_write+0x6fa>
 8017174:	797b      	ldrb	r3, [r7, #5]
 8017176:	f003 0302 	and.w	r3, r3, #2
 801717a:	2b00      	cmp	r3, #0
 801717c:	d10d      	bne.n	801719a <tcp_write+0x6fa>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801717e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017180:	691b      	ldr	r3, [r3, #16]
 8017182:	899b      	ldrh	r3, [r3, #12]
 8017184:	b29c      	uxth	r4, r3
 8017186:	2008      	movs	r0, #8
 8017188:	f7f8 f868 	bl	800f25c <lwip_htons>
 801718c:	4603      	mov	r3, r0
 801718e:	461a      	mov	r2, r3
 8017190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017192:	691b      	ldr	r3, [r3, #16]
 8017194:	4322      	orrs	r2, r4
 8017196:	b292      	uxth	r2, r2
 8017198:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801719a:	2300      	movs	r3, #0
 801719c:	e031      	b.n	8017202 <tcp_write+0x762>
          goto memerr;
 801719e:	bf00      	nop
 80171a0:	e006      	b.n	80171b0 <tcp_write+0x710>
            goto memerr;
 80171a2:	bf00      	nop
 80171a4:	e004      	b.n	80171b0 <tcp_write+0x710>
        goto memerr;
 80171a6:	bf00      	nop
 80171a8:	e002      	b.n	80171b0 <tcp_write+0x710>
        goto memerr;
 80171aa:	bf00      	nop
 80171ac:	e000      	b.n	80171b0 <tcp_write+0x710>
      goto memerr;
 80171ae:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	8b5b      	ldrh	r3, [r3, #26]
 80171b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171b8:	b29a      	uxth	r2, r3
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80171be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d002      	beq.n	80171ca <tcp_write+0x72a>
    pbuf_free(concat_p);
 80171c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80171c6:	f7fa fc09 	bl	80119dc <pbuf_free>
  }
  if (queue != NULL) {
 80171ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d002      	beq.n	80171d6 <tcp_write+0x736>
    tcp_segs_free(queue);
 80171d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80171d2:	f7fc fb15 	bl	8013800 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d00e      	beq.n	80171fe <tcp_write+0x75e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d10a      	bne.n	80171fe <tcp_write+0x75e>
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d106      	bne.n	80171fe <tcp_write+0x75e>
 80171f0:	4b06      	ldr	r3, [pc, #24]	; (801720c <tcp_write+0x76c>)
 80171f2:	f240 3227 	movw	r2, #807	; 0x327
 80171f6:	4908      	ldr	r1, [pc, #32]	; (8017218 <tcp_write+0x778>)
 80171f8:	4806      	ldr	r0, [pc, #24]	; (8017214 <tcp_write+0x774>)
 80171fa:	f007 fc97 	bl	801eb2c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80171fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017202:	4618      	mov	r0, r3
 8017204:	3764      	adds	r7, #100	; 0x64
 8017206:	46bd      	mov	sp, r7
 8017208:	bd90      	pop	{r4, r7, pc}
 801720a:	bf00      	nop
 801720c:	08024d84 	.word	0x08024d84
 8017210:	0802511c 	.word	0x0802511c
 8017214:	08024dd8 	.word	0x08024dd8
 8017218:	08025154 	.word	0x08025154

0801721c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801721c:	b590      	push	{r4, r7, lr}
 801721e:	b08b      	sub	sp, #44	; 0x2c
 8017220:	af02      	add	r7, sp, #8
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	460b      	mov	r3, r1
 8017226:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017228:	2300      	movs	r3, #0
 801722a:	61bb      	str	r3, [r7, #24]
 801722c:	2300      	movs	r3, #0
 801722e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017230:	2300      	movs	r3, #0
 8017232:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d106      	bne.n	8017248 <tcp_split_unsent_seg+0x2c>
 801723a:	4b97      	ldr	r3, [pc, #604]	; (8017498 <tcp_split_unsent_seg+0x27c>)
 801723c:	f240 324b 	movw	r2, #843	; 0x34b
 8017240:	4996      	ldr	r1, [pc, #600]	; (801749c <tcp_split_unsent_seg+0x280>)
 8017242:	4897      	ldr	r0, [pc, #604]	; (80174a0 <tcp_split_unsent_seg+0x284>)
 8017244:	f007 fc72 	bl	801eb2c <iprintf>

  useg = pcb->unsent;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801724c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d102      	bne.n	801725a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017254:	f04f 33ff 	mov.w	r3, #4294967295
 8017258:	e119      	b.n	801748e <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 801725a:	887b      	ldrh	r3, [r7, #2]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d109      	bne.n	8017274 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017260:	4b8d      	ldr	r3, [pc, #564]	; (8017498 <tcp_split_unsent_seg+0x27c>)
 8017262:	f240 3253 	movw	r2, #851	; 0x353
 8017266:	498f      	ldr	r1, [pc, #572]	; (80174a4 <tcp_split_unsent_seg+0x288>)
 8017268:	488d      	ldr	r0, [pc, #564]	; (80174a0 <tcp_split_unsent_seg+0x284>)
 801726a:	f007 fc5f 	bl	801eb2c <iprintf>
    return ERR_VAL;
 801726e:	f06f 0305 	mvn.w	r3, #5
 8017272:	e10c      	b.n	801748e <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8017274:	697b      	ldr	r3, [r7, #20]
 8017276:	891b      	ldrh	r3, [r3, #8]
 8017278:	887a      	ldrh	r2, [r7, #2]
 801727a:	429a      	cmp	r2, r3
 801727c:	d301      	bcc.n	8017282 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801727e:	2300      	movs	r3, #0
 8017280:	e105      	b.n	801748e <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017286:	887a      	ldrh	r2, [r7, #2]
 8017288:	429a      	cmp	r2, r3
 801728a:	d906      	bls.n	801729a <tcp_split_unsent_seg+0x7e>
 801728c:	4b82      	ldr	r3, [pc, #520]	; (8017498 <tcp_split_unsent_seg+0x27c>)
 801728e:	f240 325b 	movw	r2, #859	; 0x35b
 8017292:	4985      	ldr	r1, [pc, #532]	; (80174a8 <tcp_split_unsent_seg+0x28c>)
 8017294:	4882      	ldr	r0, [pc, #520]	; (80174a0 <tcp_split_unsent_seg+0x284>)
 8017296:	f007 fc49 	bl	801eb2c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801729a:	697b      	ldr	r3, [r7, #20]
 801729c:	891b      	ldrh	r3, [r3, #8]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d106      	bne.n	80172b0 <tcp_split_unsent_seg+0x94>
 80172a2:	4b7d      	ldr	r3, [pc, #500]	; (8017498 <tcp_split_unsent_seg+0x27c>)
 80172a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80172a8:	4980      	ldr	r1, [pc, #512]	; (80174ac <tcp_split_unsent_seg+0x290>)
 80172aa:	487d      	ldr	r0, [pc, #500]	; (80174a0 <tcp_split_unsent_seg+0x284>)
 80172ac:	f007 fc3e 	bl	801eb2c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80172b0:	697b      	ldr	r3, [r7, #20]
 80172b2:	7b1b      	ldrb	r3, [r3, #12]
 80172b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80172b6:	7bfb      	ldrb	r3, [r7, #15]
 80172b8:	009b      	lsls	r3, r3, #2
 80172ba:	b2db      	uxtb	r3, r3
 80172bc:	f003 0304 	and.w	r3, r3, #4
 80172c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80172c2:	697b      	ldr	r3, [r7, #20]
 80172c4:	891a      	ldrh	r2, [r3, #8]
 80172c6:	887b      	ldrh	r3, [r7, #2]
 80172c8:	1ad3      	subs	r3, r2, r3
 80172ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80172cc:	7bbb      	ldrb	r3, [r7, #14]
 80172ce:	b29a      	uxth	r2, r3
 80172d0:	89bb      	ldrh	r3, [r7, #12]
 80172d2:	4413      	add	r3, r2
 80172d4:	b29b      	uxth	r3, r3
 80172d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80172da:	4619      	mov	r1, r3
 80172dc:	2036      	movs	r0, #54	; 0x36
 80172de:	f7fa f867 	bl	80113b0 <pbuf_alloc>
 80172e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80172e4:	693b      	ldr	r3, [r7, #16]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	f000 80ba 	beq.w	8017460 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80172ec:	697b      	ldr	r3, [r7, #20]
 80172ee:	685b      	ldr	r3, [r3, #4]
 80172f0:	891a      	ldrh	r2, [r3, #8]
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	891b      	ldrh	r3, [r3, #8]
 80172f6:	1ad3      	subs	r3, r2, r3
 80172f8:	b29a      	uxth	r2, r3
 80172fa:	887b      	ldrh	r3, [r7, #2]
 80172fc:	4413      	add	r3, r2
 80172fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017300:	697b      	ldr	r3, [r7, #20]
 8017302:	6858      	ldr	r0, [r3, #4]
 8017304:	693b      	ldr	r3, [r7, #16]
 8017306:	685a      	ldr	r2, [r3, #4]
 8017308:	7bbb      	ldrb	r3, [r7, #14]
 801730a:	18d1      	adds	r1, r2, r3
 801730c:	897b      	ldrh	r3, [r7, #10]
 801730e:	89ba      	ldrh	r2, [r7, #12]
 8017310:	f7fa fd6a 	bl	8011de8 <pbuf_copy_partial>
 8017314:	4603      	mov	r3, r0
 8017316:	461a      	mov	r2, r3
 8017318:	89bb      	ldrh	r3, [r7, #12]
 801731a:	4293      	cmp	r3, r2
 801731c:	f040 80a2 	bne.w	8017464 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017320:	697b      	ldr	r3, [r7, #20]
 8017322:	691b      	ldr	r3, [r3, #16]
 8017324:	899b      	ldrh	r3, [r3, #12]
 8017326:	b29b      	uxth	r3, r3
 8017328:	4618      	mov	r0, r3
 801732a:	f7f7 ff97 	bl	800f25c <lwip_htons>
 801732e:	4603      	mov	r3, r0
 8017330:	b2db      	uxtb	r3, r3
 8017332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017336:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017338:	2300      	movs	r3, #0
 801733a:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801733c:	7ffb      	ldrb	r3, [r7, #31]
 801733e:	f003 0308 	and.w	r3, r3, #8
 8017342:	2b00      	cmp	r3, #0
 8017344:	d007      	beq.n	8017356 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017346:	7ffb      	ldrb	r3, [r7, #31]
 8017348:	f023 0308 	bic.w	r3, r3, #8
 801734c:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801734e:	7fbb      	ldrb	r3, [r7, #30]
 8017350:	f043 0308 	orr.w	r3, r3, #8
 8017354:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8017356:	7ffb      	ldrb	r3, [r7, #31]
 8017358:	f003 0301 	and.w	r3, r3, #1
 801735c:	2b00      	cmp	r3, #0
 801735e:	d007      	beq.n	8017370 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017360:	7ffb      	ldrb	r3, [r7, #31]
 8017362:	f023 0301 	bic.w	r3, r3, #1
 8017366:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8017368:	7fbb      	ldrb	r3, [r7, #30]
 801736a:	f043 0301 	orr.w	r3, r3, #1
 801736e:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017370:	697b      	ldr	r3, [r7, #20]
 8017372:	691b      	ldr	r3, [r3, #16]
 8017374:	685b      	ldr	r3, [r3, #4]
 8017376:	4618      	mov	r0, r3
 8017378:	f7f7 ff85 	bl	800f286 <lwip_htonl>
 801737c:	4602      	mov	r2, r0
 801737e:	887b      	ldrh	r3, [r7, #2]
 8017380:	18d1      	adds	r1, r2, r3
 8017382:	7fba      	ldrb	r2, [r7, #30]
 8017384:	7bfb      	ldrb	r3, [r7, #15]
 8017386:	9300      	str	r3, [sp, #0]
 8017388:	460b      	mov	r3, r1
 801738a:	6939      	ldr	r1, [r7, #16]
 801738c:	6878      	ldr	r0, [r7, #4]
 801738e:	f7ff f9f3 	bl	8016778 <tcp_create_segment>
 8017392:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8017394:	69bb      	ldr	r3, [r7, #24]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d066      	beq.n	8017468 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801739a:	697b      	ldr	r3, [r7, #20]
 801739c:	685b      	ldr	r3, [r3, #4]
 801739e:	4618      	mov	r0, r3
 80173a0:	f7fa fbaa 	bl	8011af8 <pbuf_clen>
 80173a4:	4603      	mov	r3, r0
 80173a6:	461a      	mov	r2, r3
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80173ae:	1a9b      	subs	r3, r3, r2
 80173b0:	b29a      	uxth	r2, r3
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80173b8:	697b      	ldr	r3, [r7, #20]
 80173ba:	6858      	ldr	r0, [r3, #4]
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	685b      	ldr	r3, [r3, #4]
 80173c0:	891a      	ldrh	r2, [r3, #8]
 80173c2:	89bb      	ldrh	r3, [r7, #12]
 80173c4:	1ad3      	subs	r3, r2, r3
 80173c6:	b29b      	uxth	r3, r3
 80173c8:	4619      	mov	r1, r3
 80173ca:	f7fa f94f 	bl	801166c <pbuf_realloc>
  useg->len -= remainder;
 80173ce:	697b      	ldr	r3, [r7, #20]
 80173d0:	891a      	ldrh	r2, [r3, #8]
 80173d2:	89bb      	ldrh	r3, [r7, #12]
 80173d4:	1ad3      	subs	r3, r2, r3
 80173d6:	b29a      	uxth	r2, r3
 80173d8:	697b      	ldr	r3, [r7, #20]
 80173da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	691b      	ldr	r3, [r3, #16]
 80173e0:	899b      	ldrh	r3, [r3, #12]
 80173e2:	b29c      	uxth	r4, r3
 80173e4:	7ffb      	ldrb	r3, [r7, #31]
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	4618      	mov	r0, r3
 80173ea:	f7f7 ff37 	bl	800f25c <lwip_htons>
 80173ee:	4603      	mov	r3, r0
 80173f0:	461a      	mov	r2, r3
 80173f2:	697b      	ldr	r3, [r7, #20]
 80173f4:	691b      	ldr	r3, [r3, #16]
 80173f6:	4322      	orrs	r2, r4
 80173f8:	b292      	uxth	r2, r2
 80173fa:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 80173fc:	697b      	ldr	r3, [r7, #20]
 80173fe:	2200      	movs	r2, #0
 8017400:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	685b      	ldr	r3, [r3, #4]
 8017406:	4618      	mov	r0, r3
 8017408:	f7fa fb76 	bl	8011af8 <pbuf_clen>
 801740c:	4603      	mov	r3, r0
 801740e:	461a      	mov	r2, r3
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017416:	4413      	add	r3, r2
 8017418:	b29a      	uxth	r2, r3
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017420:	69bb      	ldr	r3, [r7, #24]
 8017422:	685b      	ldr	r3, [r3, #4]
 8017424:	4618      	mov	r0, r3
 8017426:	f7fa fb67 	bl	8011af8 <pbuf_clen>
 801742a:	4603      	mov	r3, r0
 801742c:	461a      	mov	r2, r3
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017434:	4413      	add	r3, r2
 8017436:	b29a      	uxth	r2, r3
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801743e:	697b      	ldr	r3, [r7, #20]
 8017440:	681a      	ldr	r2, [r3, #0]
 8017442:	69bb      	ldr	r3, [r7, #24]
 8017444:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017446:	697b      	ldr	r3, [r7, #20]
 8017448:	69ba      	ldr	r2, [r7, #24]
 801744a:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801744c:	69bb      	ldr	r3, [r7, #24]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d103      	bne.n	801745c <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	2200      	movs	r2, #0
 8017458:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801745c:	2300      	movs	r3, #0
 801745e:	e016      	b.n	801748e <tcp_split_unsent_seg+0x272>
    goto memerr;
 8017460:	bf00      	nop
 8017462:	e002      	b.n	801746a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8017464:	bf00      	nop
 8017466:	e000      	b.n	801746a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8017468:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801746a:	69bb      	ldr	r3, [r7, #24]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d006      	beq.n	801747e <tcp_split_unsent_seg+0x262>
 8017470:	4b09      	ldr	r3, [pc, #36]	; (8017498 <tcp_split_unsent_seg+0x27c>)
 8017472:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017476:	490e      	ldr	r1, [pc, #56]	; (80174b0 <tcp_split_unsent_seg+0x294>)
 8017478:	4809      	ldr	r0, [pc, #36]	; (80174a0 <tcp_split_unsent_seg+0x284>)
 801747a:	f007 fb57 	bl	801eb2c <iprintf>
  if (p != NULL) {
 801747e:	693b      	ldr	r3, [r7, #16]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d002      	beq.n	801748a <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8017484:	6938      	ldr	r0, [r7, #16]
 8017486:	f7fa faa9 	bl	80119dc <pbuf_free>
  }

  return ERR_MEM;
 801748a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801748e:	4618      	mov	r0, r3
 8017490:	3724      	adds	r7, #36	; 0x24
 8017492:	46bd      	mov	sp, r7
 8017494:	bd90      	pop	{r4, r7, pc}
 8017496:	bf00      	nop
 8017498:	08024d84 	.word	0x08024d84
 801749c:	08025174 	.word	0x08025174
 80174a0:	08024dd8 	.word	0x08024dd8
 80174a4:	08025198 	.word	0x08025198
 80174a8:	080251bc 	.word	0x080251bc
 80174ac:	080251cc 	.word	0x080251cc
 80174b0:	080251dc 	.word	0x080251dc

080174b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80174b4:	b590      	push	{r4, r7, lr}
 80174b6:	b085      	sub	sp, #20
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d106      	bne.n	80174d0 <tcp_send_fin+0x1c>
 80174c2:	4b21      	ldr	r3, [pc, #132]	; (8017548 <tcp_send_fin+0x94>)
 80174c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80174c8:	4920      	ldr	r1, [pc, #128]	; (801754c <tcp_send_fin+0x98>)
 80174ca:	4821      	ldr	r0, [pc, #132]	; (8017550 <tcp_send_fin+0x9c>)
 80174cc:	f007 fb2e 	bl	801eb2c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d02e      	beq.n	8017536 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174dc:	60fb      	str	r3, [r7, #12]
 80174de:	e002      	b.n	80174e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d1f8      	bne.n	80174e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	691b      	ldr	r3, [r3, #16]
 80174f2:	899b      	ldrh	r3, [r3, #12]
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7f7 feb0 	bl	800f25c <lwip_htons>
 80174fc:	4603      	mov	r3, r0
 80174fe:	b2db      	uxtb	r3, r3
 8017500:	f003 0307 	and.w	r3, r3, #7
 8017504:	2b00      	cmp	r3, #0
 8017506:	d116      	bne.n	8017536 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	691b      	ldr	r3, [r3, #16]
 801750c:	899b      	ldrh	r3, [r3, #12]
 801750e:	b29c      	uxth	r4, r3
 8017510:	2001      	movs	r0, #1
 8017512:	f7f7 fea3 	bl	800f25c <lwip_htons>
 8017516:	4603      	mov	r3, r0
 8017518:	461a      	mov	r2, r3
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	691b      	ldr	r3, [r3, #16]
 801751e:	4322      	orrs	r2, r4
 8017520:	b292      	uxth	r2, r2
 8017522:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	8b5b      	ldrh	r3, [r3, #26]
 8017528:	f043 0320 	orr.w	r3, r3, #32
 801752c:	b29a      	uxth	r2, r3
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017532:	2300      	movs	r3, #0
 8017534:	e004      	b.n	8017540 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017536:	2101      	movs	r1, #1
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f000 f80b 	bl	8017554 <tcp_enqueue_flags>
 801753e:	4603      	mov	r3, r0
}
 8017540:	4618      	mov	r0, r3
 8017542:	3714      	adds	r7, #20
 8017544:	46bd      	mov	sp, r7
 8017546:	bd90      	pop	{r4, r7, pc}
 8017548:	08024d84 	.word	0x08024d84
 801754c:	080251e8 	.word	0x080251e8
 8017550:	08024dd8 	.word	0x08024dd8

08017554 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b088      	sub	sp, #32
 8017558:	af02      	add	r7, sp, #8
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	460b      	mov	r3, r1
 801755e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017560:	2300      	movs	r3, #0
 8017562:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8017564:	2300      	movs	r3, #0
 8017566:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017568:	78fb      	ldrb	r3, [r7, #3]
 801756a:	f003 0303 	and.w	r3, r3, #3
 801756e:	2b00      	cmp	r3, #0
 8017570:	d106      	bne.n	8017580 <tcp_enqueue_flags+0x2c>
 8017572:	4b67      	ldr	r3, [pc, #412]	; (8017710 <tcp_enqueue_flags+0x1bc>)
 8017574:	f240 4211 	movw	r2, #1041	; 0x411
 8017578:	4966      	ldr	r1, [pc, #408]	; (8017714 <tcp_enqueue_flags+0x1c0>)
 801757a:	4867      	ldr	r0, [pc, #412]	; (8017718 <tcp_enqueue_flags+0x1c4>)
 801757c:	f007 fad6 	bl	801eb2c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d106      	bne.n	8017594 <tcp_enqueue_flags+0x40>
 8017586:	4b62      	ldr	r3, [pc, #392]	; (8017710 <tcp_enqueue_flags+0x1bc>)
 8017588:	f240 4213 	movw	r2, #1043	; 0x413
 801758c:	4963      	ldr	r1, [pc, #396]	; (801771c <tcp_enqueue_flags+0x1c8>)
 801758e:	4862      	ldr	r0, [pc, #392]	; (8017718 <tcp_enqueue_flags+0x1c4>)
 8017590:	f007 facc 	bl	801eb2c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8017594:	78fb      	ldrb	r3, [r7, #3]
 8017596:	f003 0302 	and.w	r3, r3, #2
 801759a:	2b00      	cmp	r3, #0
 801759c:	d001      	beq.n	80175a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801759e:	2301      	movs	r3, #1
 80175a0:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80175a2:	7dfb      	ldrb	r3, [r7, #23]
 80175a4:	009b      	lsls	r3, r3, #2
 80175a6:	b2db      	uxtb	r3, r3
 80175a8:	f003 0304 	and.w	r3, r3, #4
 80175ac:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80175ae:	7dbb      	ldrb	r3, [r7, #22]
 80175b0:	b29b      	uxth	r3, r3
 80175b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175b6:	4619      	mov	r1, r3
 80175b8:	2036      	movs	r0, #54	; 0x36
 80175ba:	f7f9 fef9 	bl	80113b0 <pbuf_alloc>
 80175be:	60f8      	str	r0, [r7, #12]
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d109      	bne.n	80175da <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	8b5b      	ldrh	r3, [r3, #26]
 80175ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175ce:	b29a      	uxth	r2, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80175d4:	f04f 33ff 	mov.w	r3, #4294967295
 80175d8:	e095      	b.n	8017706 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	895a      	ldrh	r2, [r3, #10]
 80175de:	7dbb      	ldrb	r3, [r7, #22]
 80175e0:	b29b      	uxth	r3, r3
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d206      	bcs.n	80175f4 <tcp_enqueue_flags+0xa0>
 80175e6:	4b4a      	ldr	r3, [pc, #296]	; (8017710 <tcp_enqueue_flags+0x1bc>)
 80175e8:	f240 4239 	movw	r2, #1081	; 0x439
 80175ec:	494c      	ldr	r1, [pc, #304]	; (8017720 <tcp_enqueue_flags+0x1cc>)
 80175ee:	484a      	ldr	r0, [pc, #296]	; (8017718 <tcp_enqueue_flags+0x1c4>)
 80175f0:	f007 fa9c 	bl	801eb2c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80175f8:	78fa      	ldrb	r2, [r7, #3]
 80175fa:	7dfb      	ldrb	r3, [r7, #23]
 80175fc:	9300      	str	r3, [sp, #0]
 80175fe:	460b      	mov	r3, r1
 8017600:	68f9      	ldr	r1, [r7, #12]
 8017602:	6878      	ldr	r0, [r7, #4]
 8017604:	f7ff f8b8 	bl	8016778 <tcp_create_segment>
 8017608:	60b8      	str	r0, [r7, #8]
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d109      	bne.n	8017624 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	8b5b      	ldrh	r3, [r3, #26]
 8017614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017618:	b29a      	uxth	r2, r3
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801761e:	f04f 33ff 	mov.w	r3, #4294967295
 8017622:	e070      	b.n	8017706 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017624:	68bb      	ldr	r3, [r7, #8]
 8017626:	691b      	ldr	r3, [r3, #16]
 8017628:	f003 0303 	and.w	r3, r3, #3
 801762c:	2b00      	cmp	r3, #0
 801762e:	d006      	beq.n	801763e <tcp_enqueue_flags+0xea>
 8017630:	4b37      	ldr	r3, [pc, #220]	; (8017710 <tcp_enqueue_flags+0x1bc>)
 8017632:	f240 4242 	movw	r2, #1090	; 0x442
 8017636:	493b      	ldr	r1, [pc, #236]	; (8017724 <tcp_enqueue_flags+0x1d0>)
 8017638:	4837      	ldr	r0, [pc, #220]	; (8017718 <tcp_enqueue_flags+0x1c4>)
 801763a:	f007 fa77 	bl	801eb2c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801763e:	68bb      	ldr	r3, [r7, #8]
 8017640:	891b      	ldrh	r3, [r3, #8]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d006      	beq.n	8017654 <tcp_enqueue_flags+0x100>
 8017646:	4b32      	ldr	r3, [pc, #200]	; (8017710 <tcp_enqueue_flags+0x1bc>)
 8017648:	f240 4243 	movw	r2, #1091	; 0x443
 801764c:	4936      	ldr	r1, [pc, #216]	; (8017728 <tcp_enqueue_flags+0x1d4>)
 801764e:	4832      	ldr	r0, [pc, #200]	; (8017718 <tcp_enqueue_flags+0x1c4>)
 8017650:	f007 fa6c 	bl	801eb2c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017658:	2b00      	cmp	r3, #0
 801765a:	d103      	bne.n	8017664 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	68ba      	ldr	r2, [r7, #8]
 8017660:	66da      	str	r2, [r3, #108]	; 0x6c
 8017662:	e00d      	b.n	8017680 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017668:	613b      	str	r3, [r7, #16]
 801766a:	e002      	b.n	8017672 <tcp_enqueue_flags+0x11e>
 801766c:	693b      	ldr	r3, [r7, #16]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	613b      	str	r3, [r7, #16]
 8017672:	693b      	ldr	r3, [r7, #16]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d1f8      	bne.n	801766c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	68ba      	ldr	r2, [r7, #8]
 801767e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2200      	movs	r2, #0
 8017684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017688:	78fb      	ldrb	r3, [r7, #3]
 801768a:	f003 0302 	and.w	r3, r3, #2
 801768e:	2b00      	cmp	r3, #0
 8017690:	d104      	bne.n	801769c <tcp_enqueue_flags+0x148>
 8017692:	78fb      	ldrb	r3, [r7, #3]
 8017694:	f003 0301 	and.w	r3, r3, #1
 8017698:	2b00      	cmp	r3, #0
 801769a:	d004      	beq.n	80176a6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176a0:	1c5a      	adds	r2, r3, #1
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80176a6:	78fb      	ldrb	r3, [r7, #3]
 80176a8:	f003 0301 	and.w	r3, r3, #1
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d006      	beq.n	80176be <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	8b5b      	ldrh	r3, [r3, #26]
 80176b4:	f043 0320 	orr.w	r3, r3, #32
 80176b8:	b29a      	uxth	r2, r3
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	685b      	ldr	r3, [r3, #4]
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7fa fa18 	bl	8011af8 <pbuf_clen>
 80176c8:	4603      	mov	r3, r0
 80176ca:	461a      	mov	r2, r3
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80176d2:	4413      	add	r3, r2
 80176d4:	b29a      	uxth	r2, r3
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d00e      	beq.n	8017704 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d10a      	bne.n	8017704 <tcp_enqueue_flags+0x1b0>
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d106      	bne.n	8017704 <tcp_enqueue_flags+0x1b0>
 80176f6:	4b06      	ldr	r3, [pc, #24]	; (8017710 <tcp_enqueue_flags+0x1bc>)
 80176f8:	f240 4265 	movw	r2, #1125	; 0x465
 80176fc:	490b      	ldr	r1, [pc, #44]	; (801772c <tcp_enqueue_flags+0x1d8>)
 80176fe:	4806      	ldr	r0, [pc, #24]	; (8017718 <tcp_enqueue_flags+0x1c4>)
 8017700:	f007 fa14 	bl	801eb2c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017704:	2300      	movs	r3, #0
}
 8017706:	4618      	mov	r0, r3
 8017708:	3718      	adds	r7, #24
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}
 801770e:	bf00      	nop
 8017710:	08024d84 	.word	0x08024d84
 8017714:	08025204 	.word	0x08025204
 8017718:	08024dd8 	.word	0x08024dd8
 801771c:	0802525c 	.word	0x0802525c
 8017720:	0802527c 	.word	0x0802527c
 8017724:	080252b8 	.word	0x080252b8
 8017728:	080252d0 	.word	0x080252d0
 801772c:	080252fc 	.word	0x080252fc

08017730 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017730:	b5b0      	push	{r4, r5, r7, lr}
 8017732:	b08a      	sub	sp, #40	; 0x28
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d106      	bne.n	801774c <tcp_output+0x1c>
 801773e:	4b9f      	ldr	r3, [pc, #636]	; (80179bc <tcp_output+0x28c>)
 8017740:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017744:	499e      	ldr	r1, [pc, #632]	; (80179c0 <tcp_output+0x290>)
 8017746:	489f      	ldr	r0, [pc, #636]	; (80179c4 <tcp_output+0x294>)
 8017748:	f007 f9f0 	bl	801eb2c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	7d1b      	ldrb	r3, [r3, #20]
 8017750:	2b01      	cmp	r3, #1
 8017752:	d106      	bne.n	8017762 <tcp_output+0x32>
 8017754:	4b99      	ldr	r3, [pc, #612]	; (80179bc <tcp_output+0x28c>)
 8017756:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801775a:	499b      	ldr	r1, [pc, #620]	; (80179c8 <tcp_output+0x298>)
 801775c:	4899      	ldr	r0, [pc, #612]	; (80179c4 <tcp_output+0x294>)
 801775e:	f007 f9e5 	bl	801eb2c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017762:	4b9a      	ldr	r3, [pc, #616]	; (80179cc <tcp_output+0x29c>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	687a      	ldr	r2, [r7, #4]
 8017768:	429a      	cmp	r2, r3
 801776a:	d101      	bne.n	8017770 <tcp_output+0x40>
    return ERR_OK;
 801776c:	2300      	movs	r3, #0
 801776e:	e1d0      	b.n	8017b12 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801777c:	4293      	cmp	r3, r2
 801777e:	bf28      	it	cs
 8017780:	4613      	movcs	r3, r2
 8017782:	b29b      	uxth	r3, r3
 8017784:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801778a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801778e:	2b00      	cmp	r3, #0
 8017790:	d10b      	bne.n	80177aa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	8b5b      	ldrh	r3, [r3, #26]
 8017796:	f003 0302 	and.w	r3, r3, #2
 801779a:	2b00      	cmp	r3, #0
 801779c:	f000 81ac 	beq.w	8017af8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80177a0:	6878      	ldr	r0, [r7, #4]
 80177a2:	f000 fdd7 	bl	8018354 <tcp_send_empty_ack>
 80177a6:	4603      	mov	r3, r0
 80177a8:	e1b3      	b.n	8017b12 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80177aa:	6879      	ldr	r1, [r7, #4]
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	3304      	adds	r3, #4
 80177b0:	461a      	mov	r2, r3
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f7fe ffc4 	bl	8016740 <tcp_route>
 80177b8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80177ba:	697b      	ldr	r3, [r7, #20]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d102      	bne.n	80177c6 <tcp_output+0x96>
    return ERR_RTE;
 80177c0:	f06f 0303 	mvn.w	r3, #3
 80177c4:	e1a5      	b.n	8017b12 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d003      	beq.n	80177d4 <tcp_output+0xa4>
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d111      	bne.n	80177f8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80177d4:	697b      	ldr	r3, [r7, #20]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d002      	beq.n	80177e0 <tcp_output+0xb0>
 80177da:	697b      	ldr	r3, [r7, #20]
 80177dc:	3304      	adds	r3, #4
 80177de:	e000      	b.n	80177e2 <tcp_output+0xb2>
 80177e0:	2300      	movs	r3, #0
 80177e2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80177e4:	693b      	ldr	r3, [r7, #16]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d102      	bne.n	80177f0 <tcp_output+0xc0>
      return ERR_RTE;
 80177ea:	f06f 0303 	mvn.w	r3, #3
 80177ee:	e190      	b.n	8017b12 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80177f0:	693b      	ldr	r3, [r7, #16]
 80177f2:	681a      	ldr	r2, [r3, #0]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80177f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fa:	691b      	ldr	r3, [r3, #16]
 80177fc:	685b      	ldr	r3, [r3, #4]
 80177fe:	4618      	mov	r0, r3
 8017800:	f7f7 fd41 	bl	800f286 <lwip_htonl>
 8017804:	4602      	mov	r2, r0
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801780a:	1ad3      	subs	r3, r2, r3
 801780c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801780e:	8912      	ldrh	r2, [r2, #8]
 8017810:	4413      	add	r3, r2
 8017812:	69ba      	ldr	r2, [r7, #24]
 8017814:	429a      	cmp	r2, r3
 8017816:	d227      	bcs.n	8017868 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801781e:	461a      	mov	r2, r3
 8017820:	69bb      	ldr	r3, [r7, #24]
 8017822:	4293      	cmp	r3, r2
 8017824:	d114      	bne.n	8017850 <tcp_output+0x120>
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801782a:	2b00      	cmp	r3, #0
 801782c:	d110      	bne.n	8017850 <tcp_output+0x120>
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017834:	2b00      	cmp	r3, #0
 8017836:	d10b      	bne.n	8017850 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	2200      	movs	r2, #0
 801783c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	2201      	movs	r2, #1
 8017844:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	2200      	movs	r2, #0
 801784c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	8b5b      	ldrh	r3, [r3, #26]
 8017854:	f003 0302 	and.w	r3, r3, #2
 8017858:	2b00      	cmp	r3, #0
 801785a:	f000 814f 	beq.w	8017afc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f000 fd78 	bl	8018354 <tcp_send_empty_ack>
 8017864:	4603      	mov	r3, r0
 8017866:	e154      	b.n	8017b12 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	2200      	movs	r2, #0
 801786c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017874:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017876:	6a3b      	ldr	r3, [r7, #32]
 8017878:	2b00      	cmp	r3, #0
 801787a:	f000 811e 	beq.w	8017aba <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 801787e:	e002      	b.n	8017886 <tcp_output+0x156>
 8017880:	6a3b      	ldr	r3, [r7, #32]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	623b      	str	r3, [r7, #32]
 8017886:	6a3b      	ldr	r3, [r7, #32]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d1f8      	bne.n	8017880 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801788e:	e114      	b.n	8017aba <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017892:	691b      	ldr	r3, [r3, #16]
 8017894:	899b      	ldrh	r3, [r3, #12]
 8017896:	b29b      	uxth	r3, r3
 8017898:	4618      	mov	r0, r3
 801789a:	f7f7 fcdf 	bl	800f25c <lwip_htons>
 801789e:	4603      	mov	r3, r0
 80178a0:	b2db      	uxtb	r3, r3
 80178a2:	f003 0304 	and.w	r3, r3, #4
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d006      	beq.n	80178b8 <tcp_output+0x188>
 80178aa:	4b44      	ldr	r3, [pc, #272]	; (80179bc <tcp_output+0x28c>)
 80178ac:	f240 5236 	movw	r2, #1334	; 0x536
 80178b0:	4947      	ldr	r1, [pc, #284]	; (80179d0 <tcp_output+0x2a0>)
 80178b2:	4844      	ldr	r0, [pc, #272]	; (80179c4 <tcp_output+0x294>)
 80178b4:	f007 f93a 	bl	801eb2c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d01f      	beq.n	8017900 <tcp_output+0x1d0>
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	8b5b      	ldrh	r3, [r3, #26]
 80178c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d119      	bne.n	8017900 <tcp_output+0x1d0>
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d00b      	beq.n	80178ec <tcp_output+0x1bc>
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d110      	bne.n	8017900 <tcp_output+0x1d0>
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178e2:	891a      	ldrh	r2, [r3, #8]
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80178e8:	429a      	cmp	r2, r3
 80178ea:	d209      	bcs.n	8017900 <tcp_output+0x1d0>
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d004      	beq.n	8017900 <tcp_output+0x1d0>
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80178fc:	2b08      	cmp	r3, #8
 80178fe:	d901      	bls.n	8017904 <tcp_output+0x1d4>
 8017900:	2301      	movs	r3, #1
 8017902:	e000      	b.n	8017906 <tcp_output+0x1d6>
 8017904:	2300      	movs	r3, #0
 8017906:	2b00      	cmp	r3, #0
 8017908:	d106      	bne.n	8017918 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	8b5b      	ldrh	r3, [r3, #26]
 801790e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017912:	2b00      	cmp	r3, #0
 8017914:	f000 80e6 	beq.w	8017ae4 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	7d1b      	ldrb	r3, [r3, #20]
 801791c:	2b02      	cmp	r3, #2
 801791e:	d00d      	beq.n	801793c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017922:	691b      	ldr	r3, [r3, #16]
 8017924:	899b      	ldrh	r3, [r3, #12]
 8017926:	b29c      	uxth	r4, r3
 8017928:	2010      	movs	r0, #16
 801792a:	f7f7 fc97 	bl	800f25c <lwip_htons>
 801792e:	4603      	mov	r3, r0
 8017930:	461a      	mov	r2, r3
 8017932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017934:	691b      	ldr	r3, [r3, #16]
 8017936:	4322      	orrs	r2, r4
 8017938:	b292      	uxth	r2, r2
 801793a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801793c:	697a      	ldr	r2, [r7, #20]
 801793e:	6879      	ldr	r1, [r7, #4]
 8017940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017942:	f000 f90b 	bl	8017b5c <tcp_output_segment>
 8017946:	4603      	mov	r3, r0
 8017948:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801794a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801794e:	2b00      	cmp	r3, #0
 8017950:	d009      	beq.n	8017966 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	8b5b      	ldrh	r3, [r3, #26]
 8017956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801795a:	b29a      	uxth	r2, r3
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	835a      	strh	r2, [r3, #26]
      return err;
 8017960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017964:	e0d5      	b.n	8017b12 <tcp_output+0x3e2>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8017966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017968:	2200      	movs	r2, #0
 801796a:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796e:	681a      	ldr	r2, [r3, #0]
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	7d1b      	ldrb	r3, [r3, #20]
 8017978:	2b02      	cmp	r3, #2
 801797a:	d006      	beq.n	801798a <tcp_output+0x25a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	8b5b      	ldrh	r3, [r3, #26]
 8017980:	f023 0303 	bic.w	r3, r3, #3
 8017984:	b29a      	uxth	r2, r3
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801798c:	691b      	ldr	r3, [r3, #16]
 801798e:	685b      	ldr	r3, [r3, #4]
 8017990:	4618      	mov	r0, r3
 8017992:	f7f7 fc78 	bl	800f286 <lwip_htonl>
 8017996:	4604      	mov	r4, r0
 8017998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799a:	891b      	ldrh	r3, [r3, #8]
 801799c:	461d      	mov	r5, r3
 801799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179a0:	691b      	ldr	r3, [r3, #16]
 80179a2:	899b      	ldrh	r3, [r3, #12]
 80179a4:	b29b      	uxth	r3, r3
 80179a6:	4618      	mov	r0, r3
 80179a8:	f7f7 fc58 	bl	800f25c <lwip_htons>
 80179ac:	4603      	mov	r3, r0
 80179ae:	b2db      	uxtb	r3, r3
 80179b0:	f003 0303 	and.w	r3, r3, #3
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d00d      	beq.n	80179d4 <tcp_output+0x2a4>
 80179b8:	2301      	movs	r3, #1
 80179ba:	e00c      	b.n	80179d6 <tcp_output+0x2a6>
 80179bc:	08024d84 	.word	0x08024d84
 80179c0:	08025324 	.word	0x08025324
 80179c4:	08024dd8 	.word	0x08024dd8
 80179c8:	0802533c 	.word	0x0802533c
 80179cc:	2001b0dc 	.word	0x2001b0dc
 80179d0:	08025364 	.word	0x08025364
 80179d4:	2300      	movs	r3, #0
 80179d6:	442b      	add	r3, r5
 80179d8:	4423      	add	r3, r4
 80179da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	1ad3      	subs	r3, r2, r3
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	da02      	bge.n	80179ee <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	68ba      	ldr	r2, [r7, #8]
 80179ec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80179ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179f0:	891b      	ldrh	r3, [r3, #8]
 80179f2:	461c      	mov	r4, r3
 80179f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179f6:	691b      	ldr	r3, [r3, #16]
 80179f8:	899b      	ldrh	r3, [r3, #12]
 80179fa:	b29b      	uxth	r3, r3
 80179fc:	4618      	mov	r0, r3
 80179fe:	f7f7 fc2d 	bl	800f25c <lwip_htons>
 8017a02:	4603      	mov	r3, r0
 8017a04:	b2db      	uxtb	r3, r3
 8017a06:	f003 0303 	and.w	r3, r3, #3
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d001      	beq.n	8017a12 <tcp_output+0x2e2>
 8017a0e:	2301      	movs	r3, #1
 8017a10:	e000      	b.n	8017a14 <tcp_output+0x2e4>
 8017a12:	2300      	movs	r3, #0
 8017a14:	4423      	add	r3, r4
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d049      	beq.n	8017aae <tcp_output+0x37e>
      seg->next = NULL;
 8017a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d105      	bne.n	8017a34 <tcp_output+0x304>
        pcb->unacked = seg;
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a2c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a30:	623b      	str	r3, [r7, #32]
 8017a32:	e03f      	b.n	8017ab4 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a36:	691b      	ldr	r3, [r3, #16]
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f7f7 fc23 	bl	800f286 <lwip_htonl>
 8017a40:	4604      	mov	r4, r0
 8017a42:	6a3b      	ldr	r3, [r7, #32]
 8017a44:	691b      	ldr	r3, [r3, #16]
 8017a46:	685b      	ldr	r3, [r3, #4]
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7f7 fc1c 	bl	800f286 <lwip_htonl>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	1ae3      	subs	r3, r4, r3
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	da24      	bge.n	8017aa0 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	3370      	adds	r3, #112	; 0x70
 8017a5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017a5c:	e002      	b.n	8017a64 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8017a5e:	69fb      	ldr	r3, [r7, #28]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017a64:	69fb      	ldr	r3, [r7, #28]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d011      	beq.n	8017a90 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017a6c:	69fb      	ldr	r3, [r7, #28]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	691b      	ldr	r3, [r3, #16]
 8017a72:	685b      	ldr	r3, [r3, #4]
 8017a74:	4618      	mov	r0, r3
 8017a76:	f7f7 fc06 	bl	800f286 <lwip_htonl>
 8017a7a:	4604      	mov	r4, r0
 8017a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7e:	691b      	ldr	r3, [r3, #16]
 8017a80:	685b      	ldr	r3, [r3, #4]
 8017a82:	4618      	mov	r0, r3
 8017a84:	f7f7 fbff 	bl	800f286 <lwip_htonl>
 8017a88:	4603      	mov	r3, r0
 8017a8a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	dbe6      	blt.n	8017a5e <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 8017a90:	69fb      	ldr	r3, [r7, #28]
 8017a92:	681a      	ldr	r2, [r3, #0]
 8017a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a96:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8017a98:	69fb      	ldr	r3, [r7, #28]
 8017a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a9c:	601a      	str	r2, [r3, #0]
 8017a9e:	e009      	b.n	8017ab4 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017aa0:	6a3b      	ldr	r3, [r7, #32]
 8017aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017aa4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8017aa6:	6a3b      	ldr	r3, [r7, #32]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	623b      	str	r3, [r7, #32]
 8017aac:	e002      	b.n	8017ab4 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8017aae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ab0:	f7fb febb 	bl	801382a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ab8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8017aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d012      	beq.n	8017ae6 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac2:	691b      	ldr	r3, [r3, #16]
 8017ac4:	685b      	ldr	r3, [r3, #4]
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f7f7 fbdd 	bl	800f286 <lwip_htonl>
 8017acc:	4602      	mov	r2, r0
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ad2:	1ad3      	subs	r3, r2, r3
 8017ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ad6:	8912      	ldrh	r2, [r2, #8]
 8017ad8:	4413      	add	r3, r2
  while (seg != NULL &&
 8017ada:	69ba      	ldr	r2, [r7, #24]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	f4bf aed7 	bcs.w	8017890 <tcp_output+0x160>
 8017ae2:	e000      	b.n	8017ae6 <tcp_output+0x3b6>
      break;
 8017ae4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d108      	bne.n	8017b00 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	2200      	movs	r2, #0
 8017af2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8017af6:	e004      	b.n	8017b02 <tcp_output+0x3d2>
    goto output_done;
 8017af8:	bf00      	nop
 8017afa:	e002      	b.n	8017b02 <tcp_output+0x3d2>
    goto output_done;
 8017afc:	bf00      	nop
 8017afe:	e000      	b.n	8017b02 <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017b00:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	8b5b      	ldrh	r3, [r3, #26]
 8017b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017b0a:	b29a      	uxth	r2, r3
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017b10:	2300      	movs	r3, #0
}
 8017b12:	4618      	mov	r0, r3
 8017b14:	3728      	adds	r7, #40	; 0x28
 8017b16:	46bd      	mov	sp, r7
 8017b18:	bdb0      	pop	{r4, r5, r7, pc}
 8017b1a:	bf00      	nop

08017b1c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b082      	sub	sp, #8
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d106      	bne.n	8017b38 <tcp_output_segment_busy+0x1c>
 8017b2a:	4b09      	ldr	r3, [pc, #36]	; (8017b50 <tcp_output_segment_busy+0x34>)
 8017b2c:	f240 529a 	movw	r2, #1434	; 0x59a
 8017b30:	4908      	ldr	r1, [pc, #32]	; (8017b54 <tcp_output_segment_busy+0x38>)
 8017b32:	4809      	ldr	r0, [pc, #36]	; (8017b58 <tcp_output_segment_busy+0x3c>)
 8017b34:	f006 fffa 	bl	801eb2c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	7b9b      	ldrb	r3, [r3, #14]
 8017b3e:	2b01      	cmp	r3, #1
 8017b40:	d001      	beq.n	8017b46 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017b42:	2301      	movs	r3, #1
 8017b44:	e000      	b.n	8017b48 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017b46:	2300      	movs	r3, #0
}
 8017b48:	4618      	mov	r0, r3
 8017b4a:	3708      	adds	r7, #8
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}
 8017b50:	08024d84 	.word	0x08024d84
 8017b54:	0802537c 	.word	0x0802537c
 8017b58:	08024dd8 	.word	0x08024dd8

08017b5c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017b5c:	b5b0      	push	{r4, r5, r7, lr}
 8017b5e:	b08c      	sub	sp, #48	; 0x30
 8017b60:	af04      	add	r7, sp, #16
 8017b62:	60f8      	str	r0, [r7, #12]
 8017b64:	60b9      	str	r1, [r7, #8]
 8017b66:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d106      	bne.n	8017b7c <tcp_output_segment+0x20>
 8017b6e:	4b63      	ldr	r3, [pc, #396]	; (8017cfc <tcp_output_segment+0x1a0>)
 8017b70:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017b74:	4962      	ldr	r1, [pc, #392]	; (8017d00 <tcp_output_segment+0x1a4>)
 8017b76:	4863      	ldr	r0, [pc, #396]	; (8017d04 <tcp_output_segment+0x1a8>)
 8017b78:	f006 ffd8 	bl	801eb2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017b7c:	68bb      	ldr	r3, [r7, #8]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d106      	bne.n	8017b90 <tcp_output_segment+0x34>
 8017b82:	4b5e      	ldr	r3, [pc, #376]	; (8017cfc <tcp_output_segment+0x1a0>)
 8017b84:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017b88:	495f      	ldr	r1, [pc, #380]	; (8017d08 <tcp_output_segment+0x1ac>)
 8017b8a:	485e      	ldr	r0, [pc, #376]	; (8017d04 <tcp_output_segment+0x1a8>)
 8017b8c:	f006 ffce 	bl	801eb2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d106      	bne.n	8017ba4 <tcp_output_segment+0x48>
 8017b96:	4b59      	ldr	r3, [pc, #356]	; (8017cfc <tcp_output_segment+0x1a0>)
 8017b98:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8017b9c:	495b      	ldr	r1, [pc, #364]	; (8017d0c <tcp_output_segment+0x1b0>)
 8017b9e:	4859      	ldr	r0, [pc, #356]	; (8017d04 <tcp_output_segment+0x1a8>)
 8017ba0:	f006 ffc4 	bl	801eb2c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017ba4:	68f8      	ldr	r0, [r7, #12]
 8017ba6:	f7ff ffb9 	bl	8017b1c <tcp_output_segment_busy>
 8017baa:	4603      	mov	r3, r0
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d001      	beq.n	8017bb4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	e09f      	b.n	8017cf4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017bb4:	68bb      	ldr	r3, [r7, #8]
 8017bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	691c      	ldr	r4, [r3, #16]
 8017bbc:	4610      	mov	r0, r2
 8017bbe:	f7f7 fb62 	bl	800f286 <lwip_htonl>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017bc6:	68bb      	ldr	r3, [r7, #8]
 8017bc8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	691c      	ldr	r4, [r3, #16]
 8017bce:	4610      	mov	r0, r2
 8017bd0:	f7f7 fb44 	bl	800f25c <lwip_htons>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bdc:	68ba      	ldr	r2, [r7, #8]
 8017bde:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017be0:	441a      	add	r2, r3
 8017be2:	68bb      	ldr	r3, [r7, #8]
 8017be4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	691b      	ldr	r3, [r3, #16]
 8017bea:	3314      	adds	r3, #20
 8017bec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	7b1b      	ldrb	r3, [r3, #12]
 8017bf2:	f003 0301 	and.w	r3, r3, #1
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d015      	beq.n	8017c26 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017bfa:	68bb      	ldr	r3, [r7, #8]
 8017bfc:	3304      	adds	r3, #4
 8017bfe:	461a      	mov	r2, r3
 8017c00:	6879      	ldr	r1, [r7, #4]
 8017c02:	f44f 7006 	mov.w	r0, #536	; 0x218
 8017c06:	f7fc f9d5 	bl	8013fb4 <tcp_eff_send_mss_netif>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017c0e:	8b7b      	ldrh	r3, [r7, #26]
 8017c10:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7f7 fb36 	bl	800f286 <lwip_htonl>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	69fb      	ldr	r3, [r7, #28]
 8017c1e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017c20:	69fb      	ldr	r3, [r7, #28]
 8017c22:	3304      	adds	r3, #4
 8017c24:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017c26:	68bb      	ldr	r3, [r7, #8]
 8017c28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	da02      	bge.n	8017c36 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	2200      	movs	r2, #0
 8017c34:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017c36:	68bb      	ldr	r3, [r7, #8]
 8017c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d10c      	bne.n	8017c58 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017c3e:	4b34      	ldr	r3, [pc, #208]	; (8017d10 <tcp_output_segment+0x1b4>)
 8017c40:	681a      	ldr	r2, [r3, #0]
 8017c42:	68bb      	ldr	r3, [r7, #8]
 8017c44:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	691b      	ldr	r3, [r3, #16]
 8017c4a:	685b      	ldr	r3, [r3, #4]
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	f7f7 fb1a 	bl	800f286 <lwip_htonl>
 8017c52:	4602      	mov	r2, r0
 8017c54:	68bb      	ldr	r3, [r7, #8]
 8017c56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	691a      	ldr	r2, [r3, #16]
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	685b      	ldr	r3, [r3, #4]
 8017c60:	685b      	ldr	r3, [r3, #4]
 8017c62:	1ad3      	subs	r3, r2, r3
 8017c64:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	685b      	ldr	r3, [r3, #4]
 8017c6a:	8959      	ldrh	r1, [r3, #10]
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	8b3a      	ldrh	r2, [r7, #24]
 8017c72:	1a8a      	subs	r2, r1, r2
 8017c74:	b292      	uxth	r2, r2
 8017c76:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	685b      	ldr	r3, [r3, #4]
 8017c7c:	8919      	ldrh	r1, [r3, #8]
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	685b      	ldr	r3, [r3, #4]
 8017c82:	8b3a      	ldrh	r2, [r7, #24]
 8017c84:	1a8a      	subs	r2, r1, r2
 8017c86:	b292      	uxth	r2, r2
 8017c88:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	685b      	ldr	r3, [r3, #4]
 8017c8e:	68fa      	ldr	r2, [r7, #12]
 8017c90:	6912      	ldr	r2, [r2, #16]
 8017c92:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	691b      	ldr	r3, [r3, #16]
 8017c98:	2200      	movs	r2, #0
 8017c9a:	741a      	strb	r2, [r3, #16]
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	691b      	ldr	r3, [r3, #16]
 8017ca4:	f103 0214 	add.w	r2, r3, #20
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	7b1b      	ldrb	r3, [r3, #12]
 8017cac:	009b      	lsls	r3, r3, #2
 8017cae:	f003 0304 	and.w	r3, r3, #4
 8017cb2:	4413      	add	r3, r2
 8017cb4:	69fa      	ldr	r2, [r7, #28]
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d006      	beq.n	8017cc8 <tcp_output_segment+0x16c>
 8017cba:	4b10      	ldr	r3, [pc, #64]	; (8017cfc <tcp_output_segment+0x1a0>)
 8017cbc:	f240 621c 	movw	r2, #1564	; 0x61c
 8017cc0:	4914      	ldr	r1, [pc, #80]	; (8017d14 <tcp_output_segment+0x1b8>)
 8017cc2:	4810      	ldr	r0, [pc, #64]	; (8017d04 <tcp_output_segment+0x1a8>)
 8017cc4:	f006 ff32 	bl	801eb2c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	6858      	ldr	r0, [r3, #4]
 8017ccc:	68b9      	ldr	r1, [r7, #8]
 8017cce:	68bb      	ldr	r3, [r7, #8]
 8017cd0:	1d1c      	adds	r4, r3, #4
 8017cd2:	68bb      	ldr	r3, [r7, #8]
 8017cd4:	7add      	ldrb	r5, [r3, #11]
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	7a9b      	ldrb	r3, [r3, #10]
 8017cda:	687a      	ldr	r2, [r7, #4]
 8017cdc:	9202      	str	r2, [sp, #8]
 8017cde:	2206      	movs	r2, #6
 8017ce0:	9201      	str	r2, [sp, #4]
 8017ce2:	9300      	str	r3, [sp, #0]
 8017ce4:	462b      	mov	r3, r5
 8017ce6:	4622      	mov	r2, r4
 8017ce8:	f004 fd7c 	bl	801c7e4 <ip4_output_if>
 8017cec:	4603      	mov	r3, r0
 8017cee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017cf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	3720      	adds	r7, #32
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8017cfc:	08024d84 	.word	0x08024d84
 8017d00:	080253a4 	.word	0x080253a4
 8017d04:	08024dd8 	.word	0x08024dd8
 8017d08:	080253c4 	.word	0x080253c4
 8017d0c:	080253e4 	.word	0x080253e4
 8017d10:	2001b0cc 	.word	0x2001b0cc
 8017d14:	08025408 	.word	0x08025408

08017d18 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017d18:	b5b0      	push	{r4, r5, r7, lr}
 8017d1a:	b084      	sub	sp, #16
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d106      	bne.n	8017d34 <tcp_rexmit_rto_prepare+0x1c>
 8017d26:	4b36      	ldr	r3, [pc, #216]	; (8017e00 <tcp_rexmit_rto_prepare+0xe8>)
 8017d28:	f240 6263 	movw	r2, #1635	; 0x663
 8017d2c:	4935      	ldr	r1, [pc, #212]	; (8017e04 <tcp_rexmit_rto_prepare+0xec>)
 8017d2e:	4836      	ldr	r0, [pc, #216]	; (8017e08 <tcp_rexmit_rto_prepare+0xf0>)
 8017d30:	f006 fefc 	bl	801eb2c <iprintf>

  if (pcb->unacked == NULL) {
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d102      	bne.n	8017d42 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017d3c:	f06f 0305 	mvn.w	r3, #5
 8017d40:	e059      	b.n	8017df6 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d46:	60fb      	str	r3, [r7, #12]
 8017d48:	e00b      	b.n	8017d62 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017d4a:	68f8      	ldr	r0, [r7, #12]
 8017d4c:	f7ff fee6 	bl	8017b1c <tcp_output_segment_busy>
 8017d50:	4603      	mov	r3, r0
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d002      	beq.n	8017d5c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017d56:	f06f 0305 	mvn.w	r3, #5
 8017d5a:	e04c      	b.n	8017df6 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	60fb      	str	r3, [r7, #12]
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d1ef      	bne.n	8017d4a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017d6a:	68f8      	ldr	r0, [r7, #12]
 8017d6c:	f7ff fed6 	bl	8017b1c <tcp_output_segment_busy>
 8017d70:	4603      	mov	r3, r0
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d002      	beq.n	8017d7c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017d76:	f06f 0305 	mvn.w	r3, #5
 8017d7a:	e03c      	b.n	8017df6 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d104      	bne.n	8017d96 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	895a      	ldrh	r2, [r3, #10]
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	2200      	movs	r2, #0
 8017da2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	8b5b      	ldrh	r3, [r3, #26]
 8017da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017dac:	b29a      	uxth	r2, r3
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	691b      	ldr	r3, [r3, #16]
 8017db6:	685b      	ldr	r3, [r3, #4]
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7f7 fa64 	bl	800f286 <lwip_htonl>
 8017dbe:	4604      	mov	r4, r0
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	891b      	ldrh	r3, [r3, #8]
 8017dc4:	461d      	mov	r5, r3
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	691b      	ldr	r3, [r3, #16]
 8017dca:	899b      	ldrh	r3, [r3, #12]
 8017dcc:	b29b      	uxth	r3, r3
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f7f7 fa44 	bl	800f25c <lwip_htons>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	b2db      	uxtb	r3, r3
 8017dd8:	f003 0303 	and.w	r3, r3, #3
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d001      	beq.n	8017de4 <tcp_rexmit_rto_prepare+0xcc>
 8017de0:	2301      	movs	r3, #1
 8017de2:	e000      	b.n	8017de6 <tcp_rexmit_rto_prepare+0xce>
 8017de4:	2300      	movs	r3, #0
 8017de6:	442b      	add	r3, r5
 8017de8:	18e2      	adds	r2, r4, r3
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	2200      	movs	r2, #0
 8017df2:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017df4:	2300      	movs	r3, #0
}
 8017df6:	4618      	mov	r0, r3
 8017df8:	3710      	adds	r7, #16
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8017dfe:	bf00      	nop
 8017e00:	08024d84 	.word	0x08024d84
 8017e04:	0802541c 	.word	0x0802541c
 8017e08:	08024dd8 	.word	0x08024dd8

08017e0c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d106      	bne.n	8017e28 <tcp_rexmit_rto_commit+0x1c>
 8017e1a:	4b0d      	ldr	r3, [pc, #52]	; (8017e50 <tcp_rexmit_rto_commit+0x44>)
 8017e1c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017e20:	490c      	ldr	r1, [pc, #48]	; (8017e54 <tcp_rexmit_rto_commit+0x48>)
 8017e22:	480d      	ldr	r0, [pc, #52]	; (8017e58 <tcp_rexmit_rto_commit+0x4c>)
 8017e24:	f006 fe82 	bl	801eb2c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017e2e:	2bff      	cmp	r3, #255	; 0xff
 8017e30:	d007      	beq.n	8017e42 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017e38:	3301      	adds	r3, #1
 8017e3a:	b2da      	uxtb	r2, r3
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017e42:	6878      	ldr	r0, [r7, #4]
 8017e44:	f7ff fc74 	bl	8017730 <tcp_output>
}
 8017e48:	bf00      	nop
 8017e4a:	3708      	adds	r7, #8
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	bd80      	pop	{r7, pc}
 8017e50:	08024d84 	.word	0x08024d84
 8017e54:	08025440 	.word	0x08025440
 8017e58:	08024dd8 	.word	0x08024dd8

08017e5c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b082      	sub	sp, #8
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d106      	bne.n	8017e78 <tcp_rexmit_rto+0x1c>
 8017e6a:	4b0a      	ldr	r3, [pc, #40]	; (8017e94 <tcp_rexmit_rto+0x38>)
 8017e6c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017e70:	4909      	ldr	r1, [pc, #36]	; (8017e98 <tcp_rexmit_rto+0x3c>)
 8017e72:	480a      	ldr	r0, [pc, #40]	; (8017e9c <tcp_rexmit_rto+0x40>)
 8017e74:	f006 fe5a 	bl	801eb2c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017e78:	6878      	ldr	r0, [r7, #4]
 8017e7a:	f7ff ff4d 	bl	8017d18 <tcp_rexmit_rto_prepare>
 8017e7e:	4603      	mov	r3, r0
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d102      	bne.n	8017e8a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017e84:	6878      	ldr	r0, [r7, #4]
 8017e86:	f7ff ffc1 	bl	8017e0c <tcp_rexmit_rto_commit>
  }
}
 8017e8a:	bf00      	nop
 8017e8c:	3708      	adds	r7, #8
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	bd80      	pop	{r7, pc}
 8017e92:	bf00      	nop
 8017e94:	08024d84 	.word	0x08024d84
 8017e98:	08025464 	.word	0x08025464
 8017e9c:	08024dd8 	.word	0x08024dd8

08017ea0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017ea0:	b590      	push	{r4, r7, lr}
 8017ea2:	b085      	sub	sp, #20
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d106      	bne.n	8017ebc <tcp_rexmit+0x1c>
 8017eae:	4b2f      	ldr	r3, [pc, #188]	; (8017f6c <tcp_rexmit+0xcc>)
 8017eb0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017eb4:	492e      	ldr	r1, [pc, #184]	; (8017f70 <tcp_rexmit+0xd0>)
 8017eb6:	482f      	ldr	r0, [pc, #188]	; (8017f74 <tcp_rexmit+0xd4>)
 8017eb8:	f006 fe38 	bl	801eb2c <iprintf>

  if (pcb->unacked == NULL) {
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d102      	bne.n	8017eca <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017ec4:	f06f 0305 	mvn.w	r3, #5
 8017ec8:	e04c      	b.n	8017f64 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ece:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017ed0:	68b8      	ldr	r0, [r7, #8]
 8017ed2:	f7ff fe23 	bl	8017b1c <tcp_output_segment_busy>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d002      	beq.n	8017ee2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017edc:	f06f 0305 	mvn.w	r3, #5
 8017ee0:	e040      	b.n	8017f64 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017ee2:	68bb      	ldr	r3, [r7, #8]
 8017ee4:	681a      	ldr	r2, [r3, #0]
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	336c      	adds	r3, #108	; 0x6c
 8017eee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017ef0:	e002      	b.n	8017ef8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d011      	beq.n	8017f24 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	691b      	ldr	r3, [r3, #16]
 8017f06:	685b      	ldr	r3, [r3, #4]
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f7f7 f9bc 	bl	800f286 <lwip_htonl>
 8017f0e:	4604      	mov	r4, r0
 8017f10:	68bb      	ldr	r3, [r7, #8]
 8017f12:	691b      	ldr	r3, [r3, #16]
 8017f14:	685b      	ldr	r3, [r3, #4]
 8017f16:	4618      	mov	r0, r3
 8017f18:	f7f7 f9b5 	bl	800f286 <lwip_htonl>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	dbe6      	blt.n	8017ef2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	681a      	ldr	r2, [r3, #0]
 8017f28:	68bb      	ldr	r3, [r7, #8]
 8017f2a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	68ba      	ldr	r2, [r7, #8]
 8017f30:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017f32:	68bb      	ldr	r3, [r7, #8]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d103      	bne.n	8017f42 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017f48:	2bff      	cmp	r3, #255	; 0xff
 8017f4a:	d007      	beq.n	8017f5c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017f52:	3301      	adds	r3, #1
 8017f54:	b2da      	uxtb	r2, r3
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	2200      	movs	r2, #0
 8017f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017f62:	2300      	movs	r3, #0
}
 8017f64:	4618      	mov	r0, r3
 8017f66:	3714      	adds	r7, #20
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd90      	pop	{r4, r7, pc}
 8017f6c:	08024d84 	.word	0x08024d84
 8017f70:	08025480 	.word	0x08025480
 8017f74:	08024dd8 	.word	0x08024dd8

08017f78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b082      	sub	sp, #8
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d106      	bne.n	8017f94 <tcp_rexmit_fast+0x1c>
 8017f86:	4b2a      	ldr	r3, [pc, #168]	; (8018030 <tcp_rexmit_fast+0xb8>)
 8017f88:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017f8c:	4929      	ldr	r1, [pc, #164]	; (8018034 <tcp_rexmit_fast+0xbc>)
 8017f8e:	482a      	ldr	r0, [pc, #168]	; (8018038 <tcp_rexmit_fast+0xc0>)
 8017f90:	f006 fdcc 	bl	801eb2c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d044      	beq.n	8018026 <tcp_rexmit_fast+0xae>
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	8b5b      	ldrh	r3, [r3, #26]
 8017fa0:	f003 0304 	and.w	r3, r3, #4
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d13e      	bne.n	8018026 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017fa8:	6878      	ldr	r0, [r7, #4]
 8017faa:	f7ff ff79 	bl	8017ea0 <tcp_rexmit>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d138      	bne.n	8018026 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017fc0:	4293      	cmp	r3, r2
 8017fc2:	bf28      	it	cs
 8017fc4:	4613      	movcs	r3, r2
 8017fc6:	b29b      	uxth	r3, r3
 8017fc8:	0fda      	lsrs	r2, r3, #31
 8017fca:	4413      	add	r3, r2
 8017fcc:	105b      	asrs	r3, r3, #1
 8017fce:	b29a      	uxth	r2, r3
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017fdc:	461a      	mov	r2, r3
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017fe2:	005b      	lsls	r3, r3, #1
 8017fe4:	429a      	cmp	r2, r3
 8017fe6:	d206      	bcs.n	8017ff6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017fec:	005b      	lsls	r3, r3, #1
 8017fee:	b29a      	uxth	r2, r3
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018000:	4619      	mov	r1, r3
 8018002:	0049      	lsls	r1, r1, #1
 8018004:	440b      	add	r3, r1
 8018006:	b29b      	uxth	r3, r3
 8018008:	4413      	add	r3, r2
 801800a:	b29a      	uxth	r2, r3
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	8b5b      	ldrh	r3, [r3, #26]
 8018016:	f043 0304 	orr.w	r3, r3, #4
 801801a:	b29a      	uxth	r2, r3
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	2200      	movs	r2, #0
 8018024:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018026:	bf00      	nop
 8018028:	3708      	adds	r7, #8
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}
 801802e:	bf00      	nop
 8018030:	08024d84 	.word	0x08024d84
 8018034:	08025498 	.word	0x08025498
 8018038:	08024dd8 	.word	0x08024dd8

0801803c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b086      	sub	sp, #24
 8018040:	af00      	add	r7, sp, #0
 8018042:	60f8      	str	r0, [r7, #12]
 8018044:	607b      	str	r3, [r7, #4]
 8018046:	460b      	mov	r3, r1
 8018048:	817b      	strh	r3, [r7, #10]
 801804a:	4613      	mov	r3, r2
 801804c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801804e:	897a      	ldrh	r2, [r7, #10]
 8018050:	893b      	ldrh	r3, [r7, #8]
 8018052:	4413      	add	r3, r2
 8018054:	b29b      	uxth	r3, r3
 8018056:	3314      	adds	r3, #20
 8018058:	b29b      	uxth	r3, r3
 801805a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801805e:	4619      	mov	r1, r3
 8018060:	2022      	movs	r0, #34	; 0x22
 8018062:	f7f9 f9a5 	bl	80113b0 <pbuf_alloc>
 8018066:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018068:	697b      	ldr	r3, [r7, #20]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d04d      	beq.n	801810a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801806e:	897b      	ldrh	r3, [r7, #10]
 8018070:	3313      	adds	r3, #19
 8018072:	697a      	ldr	r2, [r7, #20]
 8018074:	8952      	ldrh	r2, [r2, #10]
 8018076:	4293      	cmp	r3, r2
 8018078:	db06      	blt.n	8018088 <tcp_output_alloc_header_common+0x4c>
 801807a:	4b26      	ldr	r3, [pc, #152]	; (8018114 <tcp_output_alloc_header_common+0xd8>)
 801807c:	f240 7223 	movw	r2, #1827	; 0x723
 8018080:	4925      	ldr	r1, [pc, #148]	; (8018118 <tcp_output_alloc_header_common+0xdc>)
 8018082:	4826      	ldr	r0, [pc, #152]	; (801811c <tcp_output_alloc_header_common+0xe0>)
 8018084:	f006 fd52 	bl	801eb2c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	685b      	ldr	r3, [r3, #4]
 801808c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801808e:	8c3b      	ldrh	r3, [r7, #32]
 8018090:	4618      	mov	r0, r3
 8018092:	f7f7 f8e3 	bl	800f25c <lwip_htons>
 8018096:	4603      	mov	r3, r0
 8018098:	461a      	mov	r2, r3
 801809a:	693b      	ldr	r3, [r7, #16]
 801809c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801809e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80180a0:	4618      	mov	r0, r3
 80180a2:	f7f7 f8db 	bl	800f25c <lwip_htons>
 80180a6:	4603      	mov	r3, r0
 80180a8:	461a      	mov	r2, r3
 80180aa:	693b      	ldr	r3, [r7, #16]
 80180ac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80180ae:	693b      	ldr	r3, [r7, #16]
 80180b0:	687a      	ldr	r2, [r7, #4]
 80180b2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80180b4:	68f8      	ldr	r0, [r7, #12]
 80180b6:	f7f7 f8e6 	bl	800f286 <lwip_htonl>
 80180ba:	4602      	mov	r2, r0
 80180bc:	693b      	ldr	r3, [r7, #16]
 80180be:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80180c0:	897b      	ldrh	r3, [r7, #10]
 80180c2:	089b      	lsrs	r3, r3, #2
 80180c4:	b29b      	uxth	r3, r3
 80180c6:	3305      	adds	r3, #5
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	031b      	lsls	r3, r3, #12
 80180cc:	b29a      	uxth	r2, r3
 80180ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	4313      	orrs	r3, r2
 80180d6:	b29b      	uxth	r3, r3
 80180d8:	4618      	mov	r0, r3
 80180da:	f7f7 f8bf 	bl	800f25c <lwip_htons>
 80180de:	4603      	mov	r3, r0
 80180e0:	461a      	mov	r2, r3
 80180e2:	693b      	ldr	r3, [r7, #16]
 80180e4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80180e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80180e8:	4618      	mov	r0, r3
 80180ea:	f7f7 f8b7 	bl	800f25c <lwip_htons>
 80180ee:	4603      	mov	r3, r0
 80180f0:	461a      	mov	r2, r3
 80180f2:	693b      	ldr	r3, [r7, #16]
 80180f4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80180f6:	693b      	ldr	r3, [r7, #16]
 80180f8:	2200      	movs	r2, #0
 80180fa:	741a      	strb	r2, [r3, #16]
 80180fc:	2200      	movs	r2, #0
 80180fe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	2200      	movs	r2, #0
 8018104:	749a      	strb	r2, [r3, #18]
 8018106:	2200      	movs	r2, #0
 8018108:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801810a:	697b      	ldr	r3, [r7, #20]
}
 801810c:	4618      	mov	r0, r3
 801810e:	3718      	adds	r7, #24
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}
 8018114:	08024d84 	.word	0x08024d84
 8018118:	080254b8 	.word	0x080254b8
 801811c:	08024dd8 	.word	0x08024dd8

08018120 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018120:	b5b0      	push	{r4, r5, r7, lr}
 8018122:	b08a      	sub	sp, #40	; 0x28
 8018124:	af04      	add	r7, sp, #16
 8018126:	60f8      	str	r0, [r7, #12]
 8018128:	607b      	str	r3, [r7, #4]
 801812a:	460b      	mov	r3, r1
 801812c:	817b      	strh	r3, [r7, #10]
 801812e:	4613      	mov	r3, r2
 8018130:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d106      	bne.n	8018146 <tcp_output_alloc_header+0x26>
 8018138:	4b15      	ldr	r3, [pc, #84]	; (8018190 <tcp_output_alloc_header+0x70>)
 801813a:	f240 7242 	movw	r2, #1858	; 0x742
 801813e:	4915      	ldr	r1, [pc, #84]	; (8018194 <tcp_output_alloc_header+0x74>)
 8018140:	4815      	ldr	r0, [pc, #84]	; (8018198 <tcp_output_alloc_header+0x78>)
 8018142:	f006 fcf3 	bl	801eb2c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	8adb      	ldrh	r3, [r3, #22]
 801814e:	68fa      	ldr	r2, [r7, #12]
 8018150:	8b12      	ldrh	r2, [r2, #24]
 8018152:	68f9      	ldr	r1, [r7, #12]
 8018154:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018156:	893d      	ldrh	r5, [r7, #8]
 8018158:	897c      	ldrh	r4, [r7, #10]
 801815a:	9103      	str	r1, [sp, #12]
 801815c:	2110      	movs	r1, #16
 801815e:	9102      	str	r1, [sp, #8]
 8018160:	9201      	str	r2, [sp, #4]
 8018162:	9300      	str	r3, [sp, #0]
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	462a      	mov	r2, r5
 8018168:	4621      	mov	r1, r4
 801816a:	f7ff ff67 	bl	801803c <tcp_output_alloc_header_common>
 801816e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018170:	697b      	ldr	r3, [r7, #20]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d006      	beq.n	8018184 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801817a:	68fa      	ldr	r2, [r7, #12]
 801817c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801817e:	441a      	add	r2, r3
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018184:	697b      	ldr	r3, [r7, #20]
}
 8018186:	4618      	mov	r0, r3
 8018188:	3718      	adds	r7, #24
 801818a:	46bd      	mov	sp, r7
 801818c:	bdb0      	pop	{r4, r5, r7, pc}
 801818e:	bf00      	nop
 8018190:	08024d84 	.word	0x08024d84
 8018194:	080254e8 	.word	0x080254e8
 8018198:	08024dd8 	.word	0x08024dd8

0801819c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b088      	sub	sp, #32
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	60f8      	str	r0, [r7, #12]
 80181a4:	60b9      	str	r1, [r7, #8]
 80181a6:	4611      	mov	r1, r2
 80181a8:	461a      	mov	r2, r3
 80181aa:	460b      	mov	r3, r1
 80181ac:	71fb      	strb	r3, [r7, #7]
 80181ae:	4613      	mov	r3, r2
 80181b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80181b2:	2300      	movs	r3, #0
 80181b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80181b6:	68bb      	ldr	r3, [r7, #8]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d106      	bne.n	80181ca <tcp_output_fill_options+0x2e>
 80181bc:	4b13      	ldr	r3, [pc, #76]	; (801820c <tcp_output_fill_options+0x70>)
 80181be:	f240 7256 	movw	r2, #1878	; 0x756
 80181c2:	4913      	ldr	r1, [pc, #76]	; (8018210 <tcp_output_fill_options+0x74>)
 80181c4:	4813      	ldr	r0, [pc, #76]	; (8018214 <tcp_output_fill_options+0x78>)
 80181c6:	f006 fcb1 	bl	801eb2c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	685b      	ldr	r3, [r3, #4]
 80181ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80181d0:	69bb      	ldr	r3, [r7, #24]
 80181d2:	3314      	adds	r3, #20
 80181d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	f103 0214 	add.w	r2, r3, #20
 80181dc:	8bfb      	ldrh	r3, [r7, #30]
 80181de:	009b      	lsls	r3, r3, #2
 80181e0:	4619      	mov	r1, r3
 80181e2:	79fb      	ldrb	r3, [r7, #7]
 80181e4:	009b      	lsls	r3, r3, #2
 80181e6:	f003 0304 	and.w	r3, r3, #4
 80181ea:	440b      	add	r3, r1
 80181ec:	4413      	add	r3, r2
 80181ee:	697a      	ldr	r2, [r7, #20]
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d006      	beq.n	8018202 <tcp_output_fill_options+0x66>
 80181f4:	4b05      	ldr	r3, [pc, #20]	; (801820c <tcp_output_fill_options+0x70>)
 80181f6:	f240 7275 	movw	r2, #1909	; 0x775
 80181fa:	4907      	ldr	r1, [pc, #28]	; (8018218 <tcp_output_fill_options+0x7c>)
 80181fc:	4805      	ldr	r0, [pc, #20]	; (8018214 <tcp_output_fill_options+0x78>)
 80181fe:	f006 fc95 	bl	801eb2c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018202:	bf00      	nop
 8018204:	3720      	adds	r7, #32
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}
 801820a:	bf00      	nop
 801820c:	08024d84 	.word	0x08024d84
 8018210:	08025510 	.word	0x08025510
 8018214:	08024dd8 	.word	0x08024dd8
 8018218:	08025408 	.word	0x08025408

0801821c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b08a      	sub	sp, #40	; 0x28
 8018220:	af04      	add	r7, sp, #16
 8018222:	60f8      	str	r0, [r7, #12]
 8018224:	60b9      	str	r1, [r7, #8]
 8018226:	607a      	str	r2, [r7, #4]
 8018228:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801822a:	68bb      	ldr	r3, [r7, #8]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d106      	bne.n	801823e <tcp_output_control_segment+0x22>
 8018230:	4b1c      	ldr	r3, [pc, #112]	; (80182a4 <tcp_output_control_segment+0x88>)
 8018232:	f240 7287 	movw	r2, #1927	; 0x787
 8018236:	491c      	ldr	r1, [pc, #112]	; (80182a8 <tcp_output_control_segment+0x8c>)
 8018238:	481c      	ldr	r0, [pc, #112]	; (80182ac <tcp_output_control_segment+0x90>)
 801823a:	f006 fc77 	bl	801eb2c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801823e:	683a      	ldr	r2, [r7, #0]
 8018240:	6879      	ldr	r1, [r7, #4]
 8018242:	68f8      	ldr	r0, [r7, #12]
 8018244:	f7fe fa7c 	bl	8016740 <tcp_route>
 8018248:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801824a:	693b      	ldr	r3, [r7, #16]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d102      	bne.n	8018256 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018250:	23fc      	movs	r3, #252	; 0xfc
 8018252:	75fb      	strb	r3, [r7, #23]
 8018254:	e01c      	b.n	8018290 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d006      	beq.n	801826a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	7adb      	ldrb	r3, [r3, #11]
 8018260:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	7a9b      	ldrb	r3, [r3, #10]
 8018266:	757b      	strb	r3, [r7, #21]
 8018268:	e003      	b.n	8018272 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801826a:	23ff      	movs	r3, #255	; 0xff
 801826c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801826e:	2300      	movs	r3, #0
 8018270:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018272:	7dba      	ldrb	r2, [r7, #22]
 8018274:	693b      	ldr	r3, [r7, #16]
 8018276:	9302      	str	r3, [sp, #8]
 8018278:	2306      	movs	r3, #6
 801827a:	9301      	str	r3, [sp, #4]
 801827c:	7d7b      	ldrb	r3, [r7, #21]
 801827e:	9300      	str	r3, [sp, #0]
 8018280:	4613      	mov	r3, r2
 8018282:	683a      	ldr	r2, [r7, #0]
 8018284:	6879      	ldr	r1, [r7, #4]
 8018286:	68b8      	ldr	r0, [r7, #8]
 8018288:	f004 faac 	bl	801c7e4 <ip4_output_if>
 801828c:	4603      	mov	r3, r0
 801828e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018290:	68b8      	ldr	r0, [r7, #8]
 8018292:	f7f9 fba3 	bl	80119dc <pbuf_free>
  return err;
 8018296:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801829a:	4618      	mov	r0, r3
 801829c:	3718      	adds	r7, #24
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}
 80182a2:	bf00      	nop
 80182a4:	08024d84 	.word	0x08024d84
 80182a8:	08025538 	.word	0x08025538
 80182ac:	08024dd8 	.word	0x08024dd8

080182b0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80182b0:	b590      	push	{r4, r7, lr}
 80182b2:	b08b      	sub	sp, #44	; 0x2c
 80182b4:	af04      	add	r7, sp, #16
 80182b6:	60f8      	str	r0, [r7, #12]
 80182b8:	60b9      	str	r1, [r7, #8]
 80182ba:	607a      	str	r2, [r7, #4]
 80182bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80182be:	683b      	ldr	r3, [r7, #0]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d106      	bne.n	80182d2 <tcp_rst+0x22>
 80182c4:	4b1f      	ldr	r3, [pc, #124]	; (8018344 <tcp_rst+0x94>)
 80182c6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80182ca:	491f      	ldr	r1, [pc, #124]	; (8018348 <tcp_rst+0x98>)
 80182cc:	481f      	ldr	r0, [pc, #124]	; (801834c <tcp_rst+0x9c>)
 80182ce:	f006 fc2d 	bl	801eb2c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80182d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d106      	bne.n	80182e6 <tcp_rst+0x36>
 80182d8:	4b1a      	ldr	r3, [pc, #104]	; (8018344 <tcp_rst+0x94>)
 80182da:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80182de:	491c      	ldr	r1, [pc, #112]	; (8018350 <tcp_rst+0xa0>)
 80182e0:	481a      	ldr	r0, [pc, #104]	; (801834c <tcp_rst+0x9c>)
 80182e2:	f006 fc23 	bl	801eb2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80182e6:	2300      	movs	r3, #0
 80182e8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80182ea:	f246 0308 	movw	r3, #24584	; 0x6008
 80182ee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80182f0:	7dfb      	ldrb	r3, [r7, #23]
 80182f2:	b29c      	uxth	r4, r3
 80182f4:	68b8      	ldr	r0, [r7, #8]
 80182f6:	f7f6 ffc6 	bl	800f286 <lwip_htonl>
 80182fa:	4602      	mov	r2, r0
 80182fc:	8abb      	ldrh	r3, [r7, #20]
 80182fe:	9303      	str	r3, [sp, #12]
 8018300:	2314      	movs	r3, #20
 8018302:	9302      	str	r3, [sp, #8]
 8018304:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018306:	9301      	str	r3, [sp, #4]
 8018308:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801830a:	9300      	str	r3, [sp, #0]
 801830c:	4613      	mov	r3, r2
 801830e:	2200      	movs	r2, #0
 8018310:	4621      	mov	r1, r4
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7ff fe92 	bl	801803c <tcp_output_alloc_header_common>
 8018318:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801831a:	693b      	ldr	r3, [r7, #16]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d00c      	beq.n	801833a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018320:	7dfb      	ldrb	r3, [r7, #23]
 8018322:	2200      	movs	r2, #0
 8018324:	6939      	ldr	r1, [r7, #16]
 8018326:	68f8      	ldr	r0, [r7, #12]
 8018328:	f7ff ff38 	bl	801819c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801832e:	683a      	ldr	r2, [r7, #0]
 8018330:	6939      	ldr	r1, [r7, #16]
 8018332:	68f8      	ldr	r0, [r7, #12]
 8018334:	f7ff ff72 	bl	801821c <tcp_output_control_segment>
 8018338:	e000      	b.n	801833c <tcp_rst+0x8c>
    return;
 801833a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801833c:	371c      	adds	r7, #28
 801833e:	46bd      	mov	sp, r7
 8018340:	bd90      	pop	{r4, r7, pc}
 8018342:	bf00      	nop
 8018344:	08024d84 	.word	0x08024d84
 8018348:	08025564 	.word	0x08025564
 801834c:	08024dd8 	.word	0x08024dd8
 8018350:	08025580 	.word	0x08025580

08018354 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018354:	b590      	push	{r4, r7, lr}
 8018356:	b087      	sub	sp, #28
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801835c:	2300      	movs	r3, #0
 801835e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018360:	2300      	movs	r3, #0
 8018362:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d106      	bne.n	8018378 <tcp_send_empty_ack+0x24>
 801836a:	4b28      	ldr	r3, [pc, #160]	; (801840c <tcp_send_empty_ack+0xb8>)
 801836c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018370:	4927      	ldr	r1, [pc, #156]	; (8018410 <tcp_send_empty_ack+0xbc>)
 8018372:	4828      	ldr	r0, [pc, #160]	; (8018414 <tcp_send_empty_ack+0xc0>)
 8018374:	f006 fbda 	bl	801eb2c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018378:	7dfb      	ldrb	r3, [r7, #23]
 801837a:	009b      	lsls	r3, r3, #2
 801837c:	b2db      	uxtb	r3, r3
 801837e:	f003 0304 	and.w	r3, r3, #4
 8018382:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018384:	7d7b      	ldrb	r3, [r7, #21]
 8018386:	b29c      	uxth	r4, r3
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801838c:	4618      	mov	r0, r3
 801838e:	f7f6 ff7a 	bl	800f286 <lwip_htonl>
 8018392:	4603      	mov	r3, r0
 8018394:	2200      	movs	r2, #0
 8018396:	4621      	mov	r1, r4
 8018398:	6878      	ldr	r0, [r7, #4]
 801839a:	f7ff fec1 	bl	8018120 <tcp_output_alloc_header>
 801839e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80183a0:	693b      	ldr	r3, [r7, #16]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d109      	bne.n	80183ba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	8b5b      	ldrh	r3, [r3, #26]
 80183aa:	f043 0303 	orr.w	r3, r3, #3
 80183ae:	b29a      	uxth	r2, r3
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80183b4:	f06f 0301 	mvn.w	r3, #1
 80183b8:	e023      	b.n	8018402 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80183ba:	7dbb      	ldrb	r3, [r7, #22]
 80183bc:	7dfa      	ldrb	r2, [r7, #23]
 80183be:	6939      	ldr	r1, [r7, #16]
 80183c0:	6878      	ldr	r0, [r7, #4]
 80183c2:	f7ff feeb 	bl	801819c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	3304      	adds	r3, #4
 80183cc:	6939      	ldr	r1, [r7, #16]
 80183ce:	6878      	ldr	r0, [r7, #4]
 80183d0:	f7ff ff24 	bl	801821c <tcp_output_control_segment>
 80183d4:	4603      	mov	r3, r0
 80183d6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80183d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d007      	beq.n	80183f0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	8b5b      	ldrh	r3, [r3, #26]
 80183e4:	f043 0303 	orr.w	r3, r3, #3
 80183e8:	b29a      	uxth	r2, r3
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	835a      	strh	r2, [r3, #26]
 80183ee:	e006      	b.n	80183fe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	8b5b      	ldrh	r3, [r3, #26]
 80183f4:	f023 0303 	bic.w	r3, r3, #3
 80183f8:	b29a      	uxth	r2, r3
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80183fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018402:	4618      	mov	r0, r3
 8018404:	371c      	adds	r7, #28
 8018406:	46bd      	mov	sp, r7
 8018408:	bd90      	pop	{r4, r7, pc}
 801840a:	bf00      	nop
 801840c:	08024d84 	.word	0x08024d84
 8018410:	0802559c 	.word	0x0802559c
 8018414:	08024dd8 	.word	0x08024dd8

08018418 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018418:	b590      	push	{r4, r7, lr}
 801841a:	b085      	sub	sp, #20
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018420:	2300      	movs	r3, #0
 8018422:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d106      	bne.n	8018438 <tcp_keepalive+0x20>
 801842a:	4b18      	ldr	r3, [pc, #96]	; (801848c <tcp_keepalive+0x74>)
 801842c:	f640 0224 	movw	r2, #2084	; 0x824
 8018430:	4917      	ldr	r1, [pc, #92]	; (8018490 <tcp_keepalive+0x78>)
 8018432:	4818      	ldr	r0, [pc, #96]	; (8018494 <tcp_keepalive+0x7c>)
 8018434:	f006 fb7a 	bl	801eb2c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018438:	7abb      	ldrb	r3, [r7, #10]
 801843a:	b29c      	uxth	r4, r3
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018440:	3b01      	subs	r3, #1
 8018442:	4618      	mov	r0, r3
 8018444:	f7f6 ff1f 	bl	800f286 <lwip_htonl>
 8018448:	4603      	mov	r3, r0
 801844a:	2200      	movs	r2, #0
 801844c:	4621      	mov	r1, r4
 801844e:	6878      	ldr	r0, [r7, #4]
 8018450:	f7ff fe66 	bl	8018120 <tcp_output_alloc_header>
 8018454:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d102      	bne.n	8018462 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801845c:	f04f 33ff 	mov.w	r3, #4294967295
 8018460:	e010      	b.n	8018484 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018462:	7abb      	ldrb	r3, [r7, #10]
 8018464:	2200      	movs	r2, #0
 8018466:	68f9      	ldr	r1, [r7, #12]
 8018468:	6878      	ldr	r0, [r7, #4]
 801846a:	f7ff fe97 	bl	801819c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801846e:	687a      	ldr	r2, [r7, #4]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	3304      	adds	r3, #4
 8018474:	68f9      	ldr	r1, [r7, #12]
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f7ff fed0 	bl	801821c <tcp_output_control_segment>
 801847c:	4603      	mov	r3, r0
 801847e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018480:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018484:	4618      	mov	r0, r3
 8018486:	3714      	adds	r7, #20
 8018488:	46bd      	mov	sp, r7
 801848a:	bd90      	pop	{r4, r7, pc}
 801848c:	08024d84 	.word	0x08024d84
 8018490:	080255bc 	.word	0x080255bc
 8018494:	08024dd8 	.word	0x08024dd8

08018498 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018498:	b590      	push	{r4, r7, lr}
 801849a:	b08b      	sub	sp, #44	; 0x2c
 801849c:	af00      	add	r7, sp, #0
 801849e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80184a0:	2300      	movs	r3, #0
 80184a2:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d106      	bne.n	80184b8 <tcp_zero_window_probe+0x20>
 80184aa:	4b4d      	ldr	r3, [pc, #308]	; (80185e0 <tcp_zero_window_probe+0x148>)
 80184ac:	f640 024f 	movw	r2, #2127	; 0x84f
 80184b0:	494c      	ldr	r1, [pc, #304]	; (80185e4 <tcp_zero_window_probe+0x14c>)
 80184b2:	484d      	ldr	r0, [pc, #308]	; (80185e8 <tcp_zero_window_probe+0x150>)
 80184b4:	f006 fb3a 	bl	801eb2c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 80184be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d101      	bne.n	80184c8 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80184c4:	2300      	movs	r3, #0
 80184c6:	e087      	b.n	80185d8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80184ce:	2bff      	cmp	r3, #255	; 0xff
 80184d0:	d007      	beq.n	80184e2 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80184d8:	3301      	adds	r3, #1
 80184da:	b2da      	uxtb	r2, r3
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80184e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184e4:	691b      	ldr	r3, [r3, #16]
 80184e6:	899b      	ldrh	r3, [r3, #12]
 80184e8:	b29b      	uxth	r3, r3
 80184ea:	4618      	mov	r0, r3
 80184ec:	f7f6 feb6 	bl	800f25c <lwip_htons>
 80184f0:	4603      	mov	r3, r0
 80184f2:	b2db      	uxtb	r3, r3
 80184f4:	f003 0301 	and.w	r3, r3, #1
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d005      	beq.n	8018508 <tcp_zero_window_probe+0x70>
 80184fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184fe:	891b      	ldrh	r3, [r3, #8]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d101      	bne.n	8018508 <tcp_zero_window_probe+0x70>
 8018504:	2301      	movs	r3, #1
 8018506:	e000      	b.n	801850a <tcp_zero_window_probe+0x72>
 8018508:	2300      	movs	r3, #0
 801850a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801850e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018512:	2b00      	cmp	r3, #0
 8018514:	bf0c      	ite	eq
 8018516:	2301      	moveq	r3, #1
 8018518:	2300      	movne	r3, #0
 801851a:	b2db      	uxtb	r3, r3
 801851c:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801851e:	7cfb      	ldrb	r3, [r7, #19]
 8018520:	b299      	uxth	r1, r3
 8018522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018524:	691b      	ldr	r3, [r3, #16]
 8018526:	685b      	ldr	r3, [r3, #4]
 8018528:	8c3a      	ldrh	r2, [r7, #32]
 801852a:	6878      	ldr	r0, [r7, #4]
 801852c:	f7ff fdf8 	bl	8018120 <tcp_output_alloc_header>
 8018530:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8018532:	69fb      	ldr	r3, [r7, #28]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d102      	bne.n	801853e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018538:	f04f 33ff 	mov.w	r3, #4294967295
 801853c:	e04c      	b.n	80185d8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801853e:	69fb      	ldr	r3, [r7, #28]
 8018540:	685b      	ldr	r3, [r3, #4]
 8018542:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8018544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018548:	2b00      	cmp	r3, #0
 801854a:	d011      	beq.n	8018570 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801854c:	69bb      	ldr	r3, [r7, #24]
 801854e:	899b      	ldrh	r3, [r3, #12]
 8018550:	b29b      	uxth	r3, r3
 8018552:	b21b      	sxth	r3, r3
 8018554:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018558:	b21c      	sxth	r4, r3
 801855a:	2011      	movs	r0, #17
 801855c:	f7f6 fe7e 	bl	800f25c <lwip_htons>
 8018560:	4603      	mov	r3, r0
 8018562:	b21b      	sxth	r3, r3
 8018564:	4323      	orrs	r3, r4
 8018566:	b21b      	sxth	r3, r3
 8018568:	b29a      	uxth	r2, r3
 801856a:	69bb      	ldr	r3, [r7, #24]
 801856c:	819a      	strh	r2, [r3, #12]
 801856e:	e010      	b.n	8018592 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018570:	69fb      	ldr	r3, [r7, #28]
 8018572:	685b      	ldr	r3, [r3, #4]
 8018574:	3314      	adds	r3, #20
 8018576:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801857a:	6858      	ldr	r0, [r3, #4]
 801857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801857e:	685b      	ldr	r3, [r3, #4]
 8018580:	891a      	ldrh	r2, [r3, #8]
 8018582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018584:	891b      	ldrh	r3, [r3, #8]
 8018586:	1ad3      	subs	r3, r2, r3
 8018588:	b29b      	uxth	r3, r3
 801858a:	2201      	movs	r2, #1
 801858c:	6979      	ldr	r1, [r7, #20]
 801858e:	f7f9 fc2b 	bl	8011de8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018594:	691b      	ldr	r3, [r3, #16]
 8018596:	685b      	ldr	r3, [r3, #4]
 8018598:	4618      	mov	r0, r3
 801859a:	f7f6 fe74 	bl	800f286 <lwip_htonl>
 801859e:	4603      	mov	r3, r0
 80185a0:	3301      	adds	r3, #1
 80185a2:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	1ad3      	subs	r3, r2, r3
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	da02      	bge.n	80185b6 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	68fa      	ldr	r2, [r7, #12]
 80185b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80185b6:	7cfb      	ldrb	r3, [r7, #19]
 80185b8:	2200      	movs	r2, #0
 80185ba:	69f9      	ldr	r1, [r7, #28]
 80185bc:	6878      	ldr	r0, [r7, #4]
 80185be:	f7ff fded 	bl	801819c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80185c2:	687a      	ldr	r2, [r7, #4]
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	3304      	adds	r3, #4
 80185c8:	69f9      	ldr	r1, [r7, #28]
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	f7ff fe26 	bl	801821c <tcp_output_control_segment>
 80185d0:	4603      	mov	r3, r0
 80185d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80185d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80185d8:	4618      	mov	r0, r3
 80185da:	372c      	adds	r7, #44	; 0x2c
 80185dc:	46bd      	mov	sp, r7
 80185de:	bd90      	pop	{r4, r7, pc}
 80185e0:	08024d84 	.word	0x08024d84
 80185e4:	080255d8 	.word	0x080255d8
 80185e8:	08024dd8 	.word	0x08024dd8

080185ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b082      	sub	sp, #8
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80185f4:	f7f9 fe62 	bl	80122bc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80185f8:	4b0a      	ldr	r3, [pc, #40]	; (8018624 <tcpip_tcp_timer+0x38>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d103      	bne.n	8018608 <tcpip_tcp_timer+0x1c>
 8018600:	4b09      	ldr	r3, [pc, #36]	; (8018628 <tcpip_tcp_timer+0x3c>)
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d005      	beq.n	8018614 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018608:	2200      	movs	r2, #0
 801860a:	4908      	ldr	r1, [pc, #32]	; (801862c <tcpip_tcp_timer+0x40>)
 801860c:	20fa      	movs	r0, #250	; 0xfa
 801860e:	f000 f8f3 	bl	80187f8 <sys_timeout>
 8018612:	e003      	b.n	801861c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018614:	4b06      	ldr	r3, [pc, #24]	; (8018630 <tcpip_tcp_timer+0x44>)
 8018616:	2200      	movs	r2, #0
 8018618:	601a      	str	r2, [r3, #0]
  }
}
 801861a:	bf00      	nop
 801861c:	bf00      	nop
 801861e:	3708      	adds	r7, #8
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}
 8018624:	2001b0c8 	.word	0x2001b0c8
 8018628:	2001b0d8 	.word	0x2001b0d8
 801862c:	080185ed 	.word	0x080185ed
 8018630:	2001439c 	.word	0x2001439c

08018634 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018638:	4b0a      	ldr	r3, [pc, #40]	; (8018664 <tcp_timer_needed+0x30>)
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d10f      	bne.n	8018660 <tcp_timer_needed+0x2c>
 8018640:	4b09      	ldr	r3, [pc, #36]	; (8018668 <tcp_timer_needed+0x34>)
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d103      	bne.n	8018650 <tcp_timer_needed+0x1c>
 8018648:	4b08      	ldr	r3, [pc, #32]	; (801866c <tcp_timer_needed+0x38>)
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d007      	beq.n	8018660 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018650:	4b04      	ldr	r3, [pc, #16]	; (8018664 <tcp_timer_needed+0x30>)
 8018652:	2201      	movs	r2, #1
 8018654:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018656:	2200      	movs	r2, #0
 8018658:	4905      	ldr	r1, [pc, #20]	; (8018670 <tcp_timer_needed+0x3c>)
 801865a:	20fa      	movs	r0, #250	; 0xfa
 801865c:	f000 f8cc 	bl	80187f8 <sys_timeout>
  }
}
 8018660:	bf00      	nop
 8018662:	bd80      	pop	{r7, pc}
 8018664:	2001439c 	.word	0x2001439c
 8018668:	2001b0c8 	.word	0x2001b0c8
 801866c:	2001b0d8 	.word	0x2001b0d8
 8018670:	080185ed 	.word	0x080185ed

08018674 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b086      	sub	sp, #24
 8018678:	af00      	add	r7, sp, #0
 801867a:	60f8      	str	r0, [r7, #12]
 801867c:	60b9      	str	r1, [r7, #8]
 801867e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018680:	200a      	movs	r0, #10
 8018682:	f7f8 fa77 	bl	8010b74 <memp_malloc>
 8018686:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018688:	693b      	ldr	r3, [r7, #16]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d109      	bne.n	80186a2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801868e:	693b      	ldr	r3, [r7, #16]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d151      	bne.n	8018738 <sys_timeout_abs+0xc4>
 8018694:	4b2a      	ldr	r3, [pc, #168]	; (8018740 <sys_timeout_abs+0xcc>)
 8018696:	22be      	movs	r2, #190	; 0xbe
 8018698:	492a      	ldr	r1, [pc, #168]	; (8018744 <sys_timeout_abs+0xd0>)
 801869a:	482b      	ldr	r0, [pc, #172]	; (8018748 <sys_timeout_abs+0xd4>)
 801869c:	f006 fa46 	bl	801eb2c <iprintf>
    return;
 80186a0:	e04a      	b.n	8018738 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80186a2:	693b      	ldr	r3, [r7, #16]
 80186a4:	2200      	movs	r2, #0
 80186a6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80186a8:	693b      	ldr	r3, [r7, #16]
 80186aa:	68ba      	ldr	r2, [r7, #8]
 80186ac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80186ae:	693b      	ldr	r3, [r7, #16]
 80186b0:	687a      	ldr	r2, [r7, #4]
 80186b2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80186b4:	693b      	ldr	r3, [r7, #16]
 80186b6:	68fa      	ldr	r2, [r7, #12]
 80186b8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80186ba:	4b24      	ldr	r3, [pc, #144]	; (801874c <sys_timeout_abs+0xd8>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d103      	bne.n	80186ca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80186c2:	4a22      	ldr	r2, [pc, #136]	; (801874c <sys_timeout_abs+0xd8>)
 80186c4:	693b      	ldr	r3, [r7, #16]
 80186c6:	6013      	str	r3, [r2, #0]
    return;
 80186c8:	e037      	b.n	801873a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80186ca:	693b      	ldr	r3, [r7, #16]
 80186cc:	685a      	ldr	r2, [r3, #4]
 80186ce:	4b1f      	ldr	r3, [pc, #124]	; (801874c <sys_timeout_abs+0xd8>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	685b      	ldr	r3, [r3, #4]
 80186d4:	1ad3      	subs	r3, r2, r3
 80186d6:	0fdb      	lsrs	r3, r3, #31
 80186d8:	f003 0301 	and.w	r3, r3, #1
 80186dc:	b2db      	uxtb	r3, r3
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d007      	beq.n	80186f2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80186e2:	4b1a      	ldr	r3, [pc, #104]	; (801874c <sys_timeout_abs+0xd8>)
 80186e4:	681a      	ldr	r2, [r3, #0]
 80186e6:	693b      	ldr	r3, [r7, #16]
 80186e8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80186ea:	4a18      	ldr	r2, [pc, #96]	; (801874c <sys_timeout_abs+0xd8>)
 80186ec:	693b      	ldr	r3, [r7, #16]
 80186ee:	6013      	str	r3, [r2, #0]
 80186f0:	e023      	b.n	801873a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80186f2:	4b16      	ldr	r3, [pc, #88]	; (801874c <sys_timeout_abs+0xd8>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	617b      	str	r3, [r7, #20]
 80186f8:	e01a      	b.n	8018730 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80186fa:	697b      	ldr	r3, [r7, #20]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d00b      	beq.n	801871a <sys_timeout_abs+0xa6>
 8018702:	693b      	ldr	r3, [r7, #16]
 8018704:	685a      	ldr	r2, [r3, #4]
 8018706:	697b      	ldr	r3, [r7, #20]
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	685b      	ldr	r3, [r3, #4]
 801870c:	1ad3      	subs	r3, r2, r3
 801870e:	0fdb      	lsrs	r3, r3, #31
 8018710:	f003 0301 	and.w	r3, r3, #1
 8018714:	b2db      	uxtb	r3, r3
 8018716:	2b00      	cmp	r3, #0
 8018718:	d007      	beq.n	801872a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801871a:	697b      	ldr	r3, [r7, #20]
 801871c:	681a      	ldr	r2, [r3, #0]
 801871e:	693b      	ldr	r3, [r7, #16]
 8018720:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018722:	697b      	ldr	r3, [r7, #20]
 8018724:	693a      	ldr	r2, [r7, #16]
 8018726:	601a      	str	r2, [r3, #0]
        break;
 8018728:	e007      	b.n	801873a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	617b      	str	r3, [r7, #20]
 8018730:	697b      	ldr	r3, [r7, #20]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d1e1      	bne.n	80186fa <sys_timeout_abs+0x86>
 8018736:	e000      	b.n	801873a <sys_timeout_abs+0xc6>
    return;
 8018738:	bf00      	nop
      }
    }
  }
}
 801873a:	3718      	adds	r7, #24
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}
 8018740:	080255fc 	.word	0x080255fc
 8018744:	08025630 	.word	0x08025630
 8018748:	08025670 	.word	0x08025670
 801874c:	20014394 	.word	0x20014394

08018750 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b086      	sub	sp, #24
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801875c:	697b      	ldr	r3, [r7, #20]
 801875e:	685b      	ldr	r3, [r3, #4]
 8018760:	4798      	blx	r3

  now = sys_now();
 8018762:	f7ee fe4f 	bl	8007404 <sys_now>
 8018766:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	681a      	ldr	r2, [r3, #0]
 801876c:	4b0f      	ldr	r3, [pc, #60]	; (80187ac <lwip_cyclic_timer+0x5c>)
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	4413      	add	r3, r2
 8018772:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018774:	68fa      	ldr	r2, [r7, #12]
 8018776:	693b      	ldr	r3, [r7, #16]
 8018778:	1ad3      	subs	r3, r2, r3
 801877a:	0fdb      	lsrs	r3, r3, #31
 801877c:	f003 0301 	and.w	r3, r3, #1
 8018780:	b2db      	uxtb	r3, r3
 8018782:	2b00      	cmp	r3, #0
 8018784:	d009      	beq.n	801879a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018786:	697b      	ldr	r3, [r7, #20]
 8018788:	681a      	ldr	r2, [r3, #0]
 801878a:	693b      	ldr	r3, [r7, #16]
 801878c:	4413      	add	r3, r2
 801878e:	687a      	ldr	r2, [r7, #4]
 8018790:	4907      	ldr	r1, [pc, #28]	; (80187b0 <lwip_cyclic_timer+0x60>)
 8018792:	4618      	mov	r0, r3
 8018794:	f7ff ff6e 	bl	8018674 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018798:	e004      	b.n	80187a4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801879a:	687a      	ldr	r2, [r7, #4]
 801879c:	4904      	ldr	r1, [pc, #16]	; (80187b0 <lwip_cyclic_timer+0x60>)
 801879e:	68f8      	ldr	r0, [r7, #12]
 80187a0:	f7ff ff68 	bl	8018674 <sys_timeout_abs>
}
 80187a4:	bf00      	nop
 80187a6:	3718      	adds	r7, #24
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd80      	pop	{r7, pc}
 80187ac:	20014398 	.word	0x20014398
 80187b0:	08018751 	.word	0x08018751

080187b4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b082      	sub	sp, #8
 80187b8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80187ba:	2301      	movs	r3, #1
 80187bc:	607b      	str	r3, [r7, #4]
 80187be:	e00e      	b.n	80187de <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80187c0:	4a0b      	ldr	r2, [pc, #44]	; (80187f0 <sys_timeouts_init+0x3c>)
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	00db      	lsls	r3, r3, #3
 80187cc:	4a08      	ldr	r2, [pc, #32]	; (80187f0 <sys_timeouts_init+0x3c>)
 80187ce:	4413      	add	r3, r2
 80187d0:	461a      	mov	r2, r3
 80187d2:	4908      	ldr	r1, [pc, #32]	; (80187f4 <sys_timeouts_init+0x40>)
 80187d4:	f000 f810 	bl	80187f8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	3301      	adds	r3, #1
 80187dc:	607b      	str	r3, [r7, #4]
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	2b05      	cmp	r3, #5
 80187e2:	d9ed      	bls.n	80187c0 <sys_timeouts_init+0xc>
  }
}
 80187e4:	bf00      	nop
 80187e6:	bf00      	nop
 80187e8:	3708      	adds	r7, #8
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	08026770 	.word	0x08026770
 80187f4:	08018751 	.word	0x08018751

080187f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b086      	sub	sp, #24
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	60f8      	str	r0, [r7, #12]
 8018800:	60b9      	str	r1, [r7, #8]
 8018802:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801880a:	d306      	bcc.n	801881a <sys_timeout+0x22>
 801880c:	4b0a      	ldr	r3, [pc, #40]	; (8018838 <sys_timeout+0x40>)
 801880e:	f240 1229 	movw	r2, #297	; 0x129
 8018812:	490a      	ldr	r1, [pc, #40]	; (801883c <sys_timeout+0x44>)
 8018814:	480a      	ldr	r0, [pc, #40]	; (8018840 <sys_timeout+0x48>)
 8018816:	f006 f989 	bl	801eb2c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801881a:	f7ee fdf3 	bl	8007404 <sys_now>
 801881e:	4602      	mov	r2, r0
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	4413      	add	r3, r2
 8018824:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018826:	687a      	ldr	r2, [r7, #4]
 8018828:	68b9      	ldr	r1, [r7, #8]
 801882a:	6978      	ldr	r0, [r7, #20]
 801882c:	f7ff ff22 	bl	8018674 <sys_timeout_abs>
#endif
}
 8018830:	bf00      	nop
 8018832:	3718      	adds	r7, #24
 8018834:	46bd      	mov	sp, r7
 8018836:	bd80      	pop	{r7, pc}
 8018838:	080255fc 	.word	0x080255fc
 801883c:	08025698 	.word	0x08025698
 8018840:	08025670 	.word	0x08025670

08018844 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	b084      	sub	sp, #16
 8018848:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801884a:	f7ee fddb 	bl	8007404 <sys_now>
 801884e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018850:	4b17      	ldr	r3, [pc, #92]	; (80188b0 <sys_check_timeouts+0x6c>)
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d022      	beq.n	80188a2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801885c:	68bb      	ldr	r3, [r7, #8]
 801885e:	685b      	ldr	r3, [r3, #4]
 8018860:	68fa      	ldr	r2, [r7, #12]
 8018862:	1ad3      	subs	r3, r2, r3
 8018864:	0fdb      	lsrs	r3, r3, #31
 8018866:	f003 0301 	and.w	r3, r3, #1
 801886a:	b2db      	uxtb	r3, r3
 801886c:	2b00      	cmp	r3, #0
 801886e:	d11a      	bne.n	80188a6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018870:	68bb      	ldr	r3, [r7, #8]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	4a0e      	ldr	r2, [pc, #56]	; (80188b0 <sys_check_timeouts+0x6c>)
 8018876:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018878:	68bb      	ldr	r3, [r7, #8]
 801887a:	689b      	ldr	r3, [r3, #8]
 801887c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	68db      	ldr	r3, [r3, #12]
 8018882:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018884:	68bb      	ldr	r3, [r7, #8]
 8018886:	685b      	ldr	r3, [r3, #4]
 8018888:	4a0a      	ldr	r2, [pc, #40]	; (80188b4 <sys_check_timeouts+0x70>)
 801888a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801888c:	68b9      	ldr	r1, [r7, #8]
 801888e:	200a      	movs	r0, #10
 8018890:	f7f8 f9c2 	bl	8010c18 <memp_free>
    if (handler != NULL) {
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d0da      	beq.n	8018850 <sys_check_timeouts+0xc>
      handler(arg);
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	6838      	ldr	r0, [r7, #0]
 801889e:	4798      	blx	r3
  do {
 80188a0:	e7d6      	b.n	8018850 <sys_check_timeouts+0xc>
      return;
 80188a2:	bf00      	nop
 80188a4:	e000      	b.n	80188a8 <sys_check_timeouts+0x64>
      return;
 80188a6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80188a8:	3710      	adds	r7, #16
 80188aa:	46bd      	mov	sp, r7
 80188ac:	bd80      	pop	{r7, pc}
 80188ae:	bf00      	nop
 80188b0:	20014394 	.word	0x20014394
 80188b4:	20014398 	.word	0x20014398

080188b8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b082      	sub	sp, #8
 80188bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80188be:	4b16      	ldr	r3, [pc, #88]	; (8018918 <sys_timeouts_sleeptime+0x60>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d102      	bne.n	80188cc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80188c6:	f04f 33ff 	mov.w	r3, #4294967295
 80188ca:	e020      	b.n	801890e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80188cc:	f7ee fd9a 	bl	8007404 <sys_now>
 80188d0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80188d2:	4b11      	ldr	r3, [pc, #68]	; (8018918 <sys_timeouts_sleeptime+0x60>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	685a      	ldr	r2, [r3, #4]
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	1ad3      	subs	r3, r2, r3
 80188dc:	0fdb      	lsrs	r3, r3, #31
 80188de:	f003 0301 	and.w	r3, r3, #1
 80188e2:	b2db      	uxtb	r3, r3
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d001      	beq.n	80188ec <sys_timeouts_sleeptime+0x34>
    return 0;
 80188e8:	2300      	movs	r3, #0
 80188ea:	e010      	b.n	801890e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80188ec:	4b0a      	ldr	r3, [pc, #40]	; (8018918 <sys_timeouts_sleeptime+0x60>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	685a      	ldr	r2, [r3, #4]
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	1ad3      	subs	r3, r2, r3
 80188f6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80188f8:	683b      	ldr	r3, [r7, #0]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	da06      	bge.n	801890c <sys_timeouts_sleeptime+0x54>
 80188fe:	4b07      	ldr	r3, [pc, #28]	; (801891c <sys_timeouts_sleeptime+0x64>)
 8018900:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8018904:	4906      	ldr	r1, [pc, #24]	; (8018920 <sys_timeouts_sleeptime+0x68>)
 8018906:	4807      	ldr	r0, [pc, #28]	; (8018924 <sys_timeouts_sleeptime+0x6c>)
 8018908:	f006 f910 	bl	801eb2c <iprintf>
    return ret;
 801890c:	683b      	ldr	r3, [r7, #0]
  }
}
 801890e:	4618      	mov	r0, r3
 8018910:	3708      	adds	r7, #8
 8018912:	46bd      	mov	sp, r7
 8018914:	bd80      	pop	{r7, pc}
 8018916:	bf00      	nop
 8018918:	20014394 	.word	0x20014394
 801891c:	080255fc 	.word	0x080255fc
 8018920:	080256d0 	.word	0x080256d0
 8018924:	08025670 	.word	0x08025670

08018928 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801892c:	f006 f98c 	bl	801ec48 <rand>
 8018930:	4603      	mov	r3, r0
 8018932:	b29b      	uxth	r3, r3
 8018934:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018938:	b29b      	uxth	r3, r3
 801893a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801893e:	b29a      	uxth	r2, r3
 8018940:	4b01      	ldr	r3, [pc, #4]	; (8018948 <udp_init+0x20>)
 8018942:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018944:	bf00      	nop
 8018946:	bd80      	pop	{r7, pc}
 8018948:	2000005c 	.word	0x2000005c

0801894c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801894c:	b480      	push	{r7}
 801894e:	b083      	sub	sp, #12
 8018950:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8018952:	2300      	movs	r3, #0
 8018954:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8018956:	4b17      	ldr	r3, [pc, #92]	; (80189b4 <udp_new_port+0x68>)
 8018958:	881b      	ldrh	r3, [r3, #0]
 801895a:	1c5a      	adds	r2, r3, #1
 801895c:	b291      	uxth	r1, r2
 801895e:	4a15      	ldr	r2, [pc, #84]	; (80189b4 <udp_new_port+0x68>)
 8018960:	8011      	strh	r1, [r2, #0]
 8018962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018966:	4293      	cmp	r3, r2
 8018968:	d103      	bne.n	8018972 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801896a:	4b12      	ldr	r3, [pc, #72]	; (80189b4 <udp_new_port+0x68>)
 801896c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018970:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018972:	4b11      	ldr	r3, [pc, #68]	; (80189b8 <udp_new_port+0x6c>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	603b      	str	r3, [r7, #0]
 8018978:	e011      	b.n	801899e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	8a5a      	ldrh	r2, [r3, #18]
 801897e:	4b0d      	ldr	r3, [pc, #52]	; (80189b4 <udp_new_port+0x68>)
 8018980:	881b      	ldrh	r3, [r3, #0]
 8018982:	429a      	cmp	r2, r3
 8018984:	d108      	bne.n	8018998 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8018986:	88fb      	ldrh	r3, [r7, #6]
 8018988:	3301      	adds	r3, #1
 801898a:	80fb      	strh	r3, [r7, #6]
 801898c:	88fb      	ldrh	r3, [r7, #6]
 801898e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018992:	d3e0      	bcc.n	8018956 <udp_new_port+0xa>
        return 0;
 8018994:	2300      	movs	r3, #0
 8018996:	e007      	b.n	80189a8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	68db      	ldr	r3, [r3, #12]
 801899c:	603b      	str	r3, [r7, #0]
 801899e:	683b      	ldr	r3, [r7, #0]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d1ea      	bne.n	801897a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80189a4:	4b03      	ldr	r3, [pc, #12]	; (80189b4 <udp_new_port+0x68>)
 80189a6:	881b      	ldrh	r3, [r3, #0]
}
 80189a8:	4618      	mov	r0, r3
 80189aa:	370c      	adds	r7, #12
 80189ac:	46bd      	mov	sp, r7
 80189ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b2:	4770      	bx	lr
 80189b4:	2000005c 	.word	0x2000005c
 80189b8:	2001b0e0 	.word	0x2001b0e0

080189bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b084      	sub	sp, #16
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	60f8      	str	r0, [r7, #12]
 80189c4:	60b9      	str	r1, [r7, #8]
 80189c6:	4613      	mov	r3, r2
 80189c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d105      	bne.n	80189dc <udp_input_local_match+0x20>
 80189d0:	4b27      	ldr	r3, [pc, #156]	; (8018a70 <udp_input_local_match+0xb4>)
 80189d2:	2287      	movs	r2, #135	; 0x87
 80189d4:	4927      	ldr	r1, [pc, #156]	; (8018a74 <udp_input_local_match+0xb8>)
 80189d6:	4828      	ldr	r0, [pc, #160]	; (8018a78 <udp_input_local_match+0xbc>)
 80189d8:	f006 f8a8 	bl	801eb2c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80189dc:	68bb      	ldr	r3, [r7, #8]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d105      	bne.n	80189ee <udp_input_local_match+0x32>
 80189e2:	4b23      	ldr	r3, [pc, #140]	; (8018a70 <udp_input_local_match+0xb4>)
 80189e4:	2288      	movs	r2, #136	; 0x88
 80189e6:	4925      	ldr	r1, [pc, #148]	; (8018a7c <udp_input_local_match+0xc0>)
 80189e8:	4823      	ldr	r0, [pc, #140]	; (8018a78 <udp_input_local_match+0xbc>)
 80189ea:	f006 f89f 	bl	801eb2c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	7a1b      	ldrb	r3, [r3, #8]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d00b      	beq.n	8018a0e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	7a1a      	ldrb	r2, [r3, #8]
 80189fa:	4b21      	ldr	r3, [pc, #132]	; (8018a80 <udp_input_local_match+0xc4>)
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018a02:	3301      	adds	r3, #1
 8018a04:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018a06:	429a      	cmp	r2, r3
 8018a08:	d001      	beq.n	8018a0e <udp_input_local_match+0x52>
    return 0;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	e02b      	b.n	8018a66 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018a0e:	79fb      	ldrb	r3, [r7, #7]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d018      	beq.n	8018a46 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d013      	beq.n	8018a42 <udp_input_local_match+0x86>
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d00f      	beq.n	8018a42 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018a22:	4b17      	ldr	r3, [pc, #92]	; (8018a80 <udp_input_local_match+0xc4>)
 8018a24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a2a:	d00a      	beq.n	8018a42 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	681a      	ldr	r2, [r3, #0]
 8018a30:	4b13      	ldr	r3, [pc, #76]	; (8018a80 <udp_input_local_match+0xc4>)
 8018a32:	695b      	ldr	r3, [r3, #20]
 8018a34:	405a      	eors	r2, r3
 8018a36:	68bb      	ldr	r3, [r7, #8]
 8018a38:	3308      	adds	r3, #8
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d110      	bne.n	8018a64 <udp_input_local_match+0xa8>
          return 1;
 8018a42:	2301      	movs	r3, #1
 8018a44:	e00f      	b.n	8018a66 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d009      	beq.n	8018a60 <udp_input_local_match+0xa4>
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d005      	beq.n	8018a60 <udp_input_local_match+0xa4>
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	681a      	ldr	r2, [r3, #0]
 8018a58:	4b09      	ldr	r3, [pc, #36]	; (8018a80 <udp_input_local_match+0xc4>)
 8018a5a:	695b      	ldr	r3, [r3, #20]
 8018a5c:	429a      	cmp	r2, r3
 8018a5e:	d101      	bne.n	8018a64 <udp_input_local_match+0xa8>
        return 1;
 8018a60:	2301      	movs	r3, #1
 8018a62:	e000      	b.n	8018a66 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018a64:	2300      	movs	r3, #0
}
 8018a66:	4618      	mov	r0, r3
 8018a68:	3710      	adds	r7, #16
 8018a6a:	46bd      	mov	sp, r7
 8018a6c:	bd80      	pop	{r7, pc}
 8018a6e:	bf00      	nop
 8018a70:	080256e4 	.word	0x080256e4
 8018a74:	08025714 	.word	0x08025714
 8018a78:	08025738 	.word	0x08025738
 8018a7c:	08025760 	.word	0x08025760
 8018a80:	200176d4 	.word	0x200176d4

08018a84 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018a84:	b590      	push	{r4, r7, lr}
 8018a86:	b08d      	sub	sp, #52	; 0x34
 8018a88:	af02      	add	r7, sp, #8
 8018a8a:	6078      	str	r0, [r7, #4]
 8018a8c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8018a8e:	2300      	movs	r3, #0
 8018a90:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d105      	bne.n	8018aa4 <udp_input+0x20>
 8018a98:	4b7c      	ldr	r3, [pc, #496]	; (8018c8c <udp_input+0x208>)
 8018a9a:	22cf      	movs	r2, #207	; 0xcf
 8018a9c:	497c      	ldr	r1, [pc, #496]	; (8018c90 <udp_input+0x20c>)
 8018a9e:	487d      	ldr	r0, [pc, #500]	; (8018c94 <udp_input+0x210>)
 8018aa0:	f006 f844 	bl	801eb2c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018aa4:	683b      	ldr	r3, [r7, #0]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d105      	bne.n	8018ab6 <udp_input+0x32>
 8018aaa:	4b78      	ldr	r3, [pc, #480]	; (8018c8c <udp_input+0x208>)
 8018aac:	22d0      	movs	r2, #208	; 0xd0
 8018aae:	497a      	ldr	r1, [pc, #488]	; (8018c98 <udp_input+0x214>)
 8018ab0:	4878      	ldr	r0, [pc, #480]	; (8018c94 <udp_input+0x210>)
 8018ab2:	f006 f83b 	bl	801eb2c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	895b      	ldrh	r3, [r3, #10]
 8018aba:	2b07      	cmp	r3, #7
 8018abc:	d803      	bhi.n	8018ac6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018abe:	6878      	ldr	r0, [r7, #4]
 8018ac0:	f7f8 ff8c 	bl	80119dc <pbuf_free>
    goto end;
 8018ac4:	e0de      	b.n	8018c84 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	685b      	ldr	r3, [r3, #4]
 8018aca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018acc:	4b73      	ldr	r3, [pc, #460]	; (8018c9c <udp_input+0x218>)
 8018ace:	695b      	ldr	r3, [r3, #20]
 8018ad0:	4a72      	ldr	r2, [pc, #456]	; (8018c9c <udp_input+0x218>)
 8018ad2:	6812      	ldr	r2, [r2, #0]
 8018ad4:	4611      	mov	r1, r2
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f003 ff5c 	bl	801c994 <ip4_addr_isbroadcast_u32>
 8018adc:	4603      	mov	r3, r0
 8018ade:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018ae0:	697b      	ldr	r3, [r7, #20]
 8018ae2:	881b      	ldrh	r3, [r3, #0]
 8018ae4:	b29b      	uxth	r3, r3
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f7f6 fbb8 	bl	800f25c <lwip_htons>
 8018aec:	4603      	mov	r3, r0
 8018aee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018af0:	697b      	ldr	r3, [r7, #20]
 8018af2:	885b      	ldrh	r3, [r3, #2]
 8018af4:	b29b      	uxth	r3, r3
 8018af6:	4618      	mov	r0, r3
 8018af8:	f7f6 fbb0 	bl	800f25c <lwip_htons>
 8018afc:	4603      	mov	r3, r0
 8018afe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018b00:	2300      	movs	r3, #0
 8018b02:	623b      	str	r3, [r7, #32]
  prev = NULL;
 8018b04:	2300      	movs	r3, #0
 8018b06:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 8018b08:	2300      	movs	r3, #0
 8018b0a:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018b0c:	4b64      	ldr	r3, [pc, #400]	; (8018ca0 <udp_input+0x21c>)
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	623b      	str	r3, [r7, #32]
 8018b12:	e054      	b.n	8018bbe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018b14:	6a3b      	ldr	r3, [r7, #32]
 8018b16:	8a5b      	ldrh	r3, [r3, #18]
 8018b18:	89fa      	ldrh	r2, [r7, #14]
 8018b1a:	429a      	cmp	r2, r3
 8018b1c:	d14a      	bne.n	8018bb4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018b1e:	7cfb      	ldrb	r3, [r7, #19]
 8018b20:	461a      	mov	r2, r3
 8018b22:	6839      	ldr	r1, [r7, #0]
 8018b24:	6a38      	ldr	r0, [r7, #32]
 8018b26:	f7ff ff49 	bl	80189bc <udp_input_local_match>
 8018b2a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d041      	beq.n	8018bb4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018b30:	6a3b      	ldr	r3, [r7, #32]
 8018b32:	7c1b      	ldrb	r3, [r3, #16]
 8018b34:	f003 0304 	and.w	r3, r3, #4
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d11d      	bne.n	8018b78 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018b3c:	69bb      	ldr	r3, [r7, #24]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d102      	bne.n	8018b48 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018b42:	6a3b      	ldr	r3, [r7, #32]
 8018b44:	61bb      	str	r3, [r7, #24]
 8018b46:	e017      	b.n	8018b78 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018b48:	7cfb      	ldrb	r3, [r7, #19]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d014      	beq.n	8018b78 <udp_input+0xf4>
 8018b4e:	4b53      	ldr	r3, [pc, #332]	; (8018c9c <udp_input+0x218>)
 8018b50:	695b      	ldr	r3, [r3, #20]
 8018b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b56:	d10f      	bne.n	8018b78 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018b58:	69bb      	ldr	r3, [r7, #24]
 8018b5a:	681a      	ldr	r2, [r3, #0]
 8018b5c:	683b      	ldr	r3, [r7, #0]
 8018b5e:	3304      	adds	r3, #4
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	429a      	cmp	r2, r3
 8018b64:	d008      	beq.n	8018b78 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018b66:	6a3b      	ldr	r3, [r7, #32]
 8018b68:	681a      	ldr	r2, [r3, #0]
 8018b6a:	683b      	ldr	r3, [r7, #0]
 8018b6c:	3304      	adds	r3, #4
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	429a      	cmp	r2, r3
 8018b72:	d101      	bne.n	8018b78 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018b74:	6a3b      	ldr	r3, [r7, #32]
 8018b76:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018b78:	6a3b      	ldr	r3, [r7, #32]
 8018b7a:	8a9b      	ldrh	r3, [r3, #20]
 8018b7c:	8a3a      	ldrh	r2, [r7, #16]
 8018b7e:	429a      	cmp	r2, r3
 8018b80:	d118      	bne.n	8018bb4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018b82:	6a3b      	ldr	r3, [r7, #32]
 8018b84:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d005      	beq.n	8018b96 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018b8a:	6a3b      	ldr	r3, [r7, #32]
 8018b8c:	685a      	ldr	r2, [r3, #4]
 8018b8e:	4b43      	ldr	r3, [pc, #268]	; (8018c9c <udp_input+0x218>)
 8018b90:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018b92:	429a      	cmp	r2, r3
 8018b94:	d10e      	bne.n	8018bb4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d014      	beq.n	8018bc6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018b9c:	6a3b      	ldr	r3, [r7, #32]
 8018b9e:	68da      	ldr	r2, [r3, #12]
 8018ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ba2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018ba4:	4b3e      	ldr	r3, [pc, #248]	; (8018ca0 <udp_input+0x21c>)
 8018ba6:	681a      	ldr	r2, [r3, #0]
 8018ba8:	6a3b      	ldr	r3, [r7, #32]
 8018baa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018bac:	4a3c      	ldr	r2, [pc, #240]	; (8018ca0 <udp_input+0x21c>)
 8018bae:	6a3b      	ldr	r3, [r7, #32]
 8018bb0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018bb2:	e008      	b.n	8018bc6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018bb4:	6a3b      	ldr	r3, [r7, #32]
 8018bb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018bb8:	6a3b      	ldr	r3, [r7, #32]
 8018bba:	68db      	ldr	r3, [r3, #12]
 8018bbc:	623b      	str	r3, [r7, #32]
 8018bbe:	6a3b      	ldr	r3, [r7, #32]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d1a7      	bne.n	8018b14 <udp_input+0x90>
 8018bc4:	e000      	b.n	8018bc8 <udp_input+0x144>
        break;
 8018bc6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018bc8:	6a3b      	ldr	r3, [r7, #32]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d101      	bne.n	8018bd2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018bce:	69bb      	ldr	r3, [r7, #24]
 8018bd0:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018bd2:	6a3b      	ldr	r3, [r7, #32]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d002      	beq.n	8018bde <udp_input+0x15a>
    for_us = 1;
 8018bd8:	2301      	movs	r3, #1
 8018bda:	77fb      	strb	r3, [r7, #31]
 8018bdc:	e00a      	b.n	8018bf4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	3304      	adds	r3, #4
 8018be2:	681a      	ldr	r2, [r3, #0]
 8018be4:	4b2d      	ldr	r3, [pc, #180]	; (8018c9c <udp_input+0x218>)
 8018be6:	695b      	ldr	r3, [r3, #20]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	bf0c      	ite	eq
 8018bec:	2301      	moveq	r3, #1
 8018bee:	2300      	movne	r3, #0
 8018bf0:	b2db      	uxtb	r3, r3
 8018bf2:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018bf4:	7ffb      	ldrb	r3, [r7, #31]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d041      	beq.n	8018c7e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018bfa:	2108      	movs	r1, #8
 8018bfc:	6878      	ldr	r0, [r7, #4]
 8018bfe:	f7f8 fe35 	bl	801186c <pbuf_remove_header>
 8018c02:	4603      	mov	r3, r0
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d00a      	beq.n	8018c1e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018c08:	4b20      	ldr	r3, [pc, #128]	; (8018c8c <udp_input+0x208>)
 8018c0a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018c0e:	4925      	ldr	r1, [pc, #148]	; (8018ca4 <udp_input+0x220>)
 8018c10:	4820      	ldr	r0, [pc, #128]	; (8018c94 <udp_input+0x210>)
 8018c12:	f005 ff8b 	bl	801eb2c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018c16:	6878      	ldr	r0, [r7, #4]
 8018c18:	f7f8 fee0 	bl	80119dc <pbuf_free>
      goto end;
 8018c1c:	e032      	b.n	8018c84 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018c1e:	6a3b      	ldr	r3, [r7, #32]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d012      	beq.n	8018c4a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018c24:	6a3b      	ldr	r3, [r7, #32]
 8018c26:	699b      	ldr	r3, [r3, #24]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d00a      	beq.n	8018c42 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018c2c:	6a3b      	ldr	r3, [r7, #32]
 8018c2e:	699c      	ldr	r4, [r3, #24]
 8018c30:	6a3b      	ldr	r3, [r7, #32]
 8018c32:	69d8      	ldr	r0, [r3, #28]
 8018c34:	8a3b      	ldrh	r3, [r7, #16]
 8018c36:	9300      	str	r3, [sp, #0]
 8018c38:	4b1b      	ldr	r3, [pc, #108]	; (8018ca8 <udp_input+0x224>)
 8018c3a:	687a      	ldr	r2, [r7, #4]
 8018c3c:	6a39      	ldr	r1, [r7, #32]
 8018c3e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018c40:	e021      	b.n	8018c86 <udp_input+0x202>
        pbuf_free(p);
 8018c42:	6878      	ldr	r0, [r7, #4]
 8018c44:	f7f8 feca 	bl	80119dc <pbuf_free>
        goto end;
 8018c48:	e01c      	b.n	8018c84 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018c4a:	7cfb      	ldrb	r3, [r7, #19]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d112      	bne.n	8018c76 <udp_input+0x1f2>
 8018c50:	4b12      	ldr	r3, [pc, #72]	; (8018c9c <udp_input+0x218>)
 8018c52:	695b      	ldr	r3, [r3, #20]
 8018c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018c58:	2be0      	cmp	r3, #224	; 0xe0
 8018c5a:	d00c      	beq.n	8018c76 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018c5c:	4b0f      	ldr	r3, [pc, #60]	; (8018c9c <udp_input+0x218>)
 8018c5e:	899b      	ldrh	r3, [r3, #12]
 8018c60:	3308      	adds	r3, #8
 8018c62:	b29b      	uxth	r3, r3
 8018c64:	b21b      	sxth	r3, r3
 8018c66:	4619      	mov	r1, r3
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	f7f8 fe72 	bl	8011952 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018c6e:	2103      	movs	r1, #3
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f003 fb51 	bl	801c318 <icmp_dest_unreach>
      pbuf_free(p);
 8018c76:	6878      	ldr	r0, [r7, #4]
 8018c78:	f7f8 feb0 	bl	80119dc <pbuf_free>
  return;
 8018c7c:	e003      	b.n	8018c86 <udp_input+0x202>
    pbuf_free(p);
 8018c7e:	6878      	ldr	r0, [r7, #4]
 8018c80:	f7f8 feac 	bl	80119dc <pbuf_free>
  return;
 8018c84:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018c86:	372c      	adds	r7, #44	; 0x2c
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	bd90      	pop	{r4, r7, pc}
 8018c8c:	080256e4 	.word	0x080256e4
 8018c90:	08025788 	.word	0x08025788
 8018c94:	08025738 	.word	0x08025738
 8018c98:	080257a0 	.word	0x080257a0
 8018c9c:	200176d4 	.word	0x200176d4
 8018ca0:	2001b0e0 	.word	0x2001b0e0
 8018ca4:	080257bc 	.word	0x080257bc
 8018ca8:	200176e4 	.word	0x200176e4

08018cac <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
 8018cb4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d109      	bne.n	8018cd0 <udp_send+0x24>
 8018cbc:	4b11      	ldr	r3, [pc, #68]	; (8018d04 <udp_send+0x58>)
 8018cbe:	f240 12d5 	movw	r2, #469	; 0x1d5
 8018cc2:	4911      	ldr	r1, [pc, #68]	; (8018d08 <udp_send+0x5c>)
 8018cc4:	4811      	ldr	r0, [pc, #68]	; (8018d0c <udp_send+0x60>)
 8018cc6:	f005 ff31 	bl	801eb2c <iprintf>
 8018cca:	f06f 030f 	mvn.w	r3, #15
 8018cce:	e015      	b.n	8018cfc <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8018cd0:	683b      	ldr	r3, [r7, #0]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d109      	bne.n	8018cea <udp_send+0x3e>
 8018cd6:	4b0b      	ldr	r3, [pc, #44]	; (8018d04 <udp_send+0x58>)
 8018cd8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8018cdc:	490c      	ldr	r1, [pc, #48]	; (8018d10 <udp_send+0x64>)
 8018cde:	480b      	ldr	r0, [pc, #44]	; (8018d0c <udp_send+0x60>)
 8018ce0:	f005 ff24 	bl	801eb2c <iprintf>
 8018ce4:	f06f 030f 	mvn.w	r3, #15
 8018ce8:	e008      	b.n	8018cfc <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	1d1a      	adds	r2, r3, #4
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	8a9b      	ldrh	r3, [r3, #20]
 8018cf2:	6839      	ldr	r1, [r7, #0]
 8018cf4:	6878      	ldr	r0, [r7, #4]
 8018cf6:	f000 f80d 	bl	8018d14 <udp_sendto>
 8018cfa:	4603      	mov	r3, r0
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	3708      	adds	r7, #8
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	080256e4 	.word	0x080256e4
 8018d08:	080257d8 	.word	0x080257d8
 8018d0c:	08025738 	.word	0x08025738
 8018d10:	080257f0 	.word	0x080257f0

08018d14 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b088      	sub	sp, #32
 8018d18:	af02      	add	r7, sp, #8
 8018d1a:	60f8      	str	r0, [r7, #12]
 8018d1c:	60b9      	str	r1, [r7, #8]
 8018d1e:	607a      	str	r2, [r7, #4]
 8018d20:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d109      	bne.n	8018d3c <udp_sendto+0x28>
 8018d28:	4b23      	ldr	r3, [pc, #140]	; (8018db8 <udp_sendto+0xa4>)
 8018d2a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018d2e:	4923      	ldr	r1, [pc, #140]	; (8018dbc <udp_sendto+0xa8>)
 8018d30:	4823      	ldr	r0, [pc, #140]	; (8018dc0 <udp_sendto+0xac>)
 8018d32:	f005 fefb 	bl	801eb2c <iprintf>
 8018d36:	f06f 030f 	mvn.w	r3, #15
 8018d3a:	e038      	b.n	8018dae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d109      	bne.n	8018d56 <udp_sendto+0x42>
 8018d42:	4b1d      	ldr	r3, [pc, #116]	; (8018db8 <udp_sendto+0xa4>)
 8018d44:	f240 2219 	movw	r2, #537	; 0x219
 8018d48:	491e      	ldr	r1, [pc, #120]	; (8018dc4 <udp_sendto+0xb0>)
 8018d4a:	481d      	ldr	r0, [pc, #116]	; (8018dc0 <udp_sendto+0xac>)
 8018d4c:	f005 feee 	bl	801eb2c <iprintf>
 8018d50:	f06f 030f 	mvn.w	r3, #15
 8018d54:	e02b      	b.n	8018dae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d109      	bne.n	8018d70 <udp_sendto+0x5c>
 8018d5c:	4b16      	ldr	r3, [pc, #88]	; (8018db8 <udp_sendto+0xa4>)
 8018d5e:	f240 221a 	movw	r2, #538	; 0x21a
 8018d62:	4919      	ldr	r1, [pc, #100]	; (8018dc8 <udp_sendto+0xb4>)
 8018d64:	4816      	ldr	r0, [pc, #88]	; (8018dc0 <udp_sendto+0xac>)
 8018d66:	f005 fee1 	bl	801eb2c <iprintf>
 8018d6a:	f06f 030f 	mvn.w	r3, #15
 8018d6e:	e01e      	b.n	8018dae <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	7a1b      	ldrb	r3, [r3, #8]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d006      	beq.n	8018d86 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	7a1b      	ldrb	r3, [r3, #8]
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f7f8 fa6d 	bl	801125c <netif_get_by_index>
 8018d82:	6178      	str	r0, [r7, #20]
 8018d84:	e003      	b.n	8018d8e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018d86:	6878      	ldr	r0, [r7, #4]
 8018d88:	f003 fb50 	bl	801c42c <ip4_route>
 8018d8c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8018d8e:	697b      	ldr	r3, [r7, #20]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d102      	bne.n	8018d9a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018d94:	f06f 0303 	mvn.w	r3, #3
 8018d98:	e009      	b.n	8018dae <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8018d9a:	887a      	ldrh	r2, [r7, #2]
 8018d9c:	697b      	ldr	r3, [r7, #20]
 8018d9e:	9300      	str	r3, [sp, #0]
 8018da0:	4613      	mov	r3, r2
 8018da2:	687a      	ldr	r2, [r7, #4]
 8018da4:	68b9      	ldr	r1, [r7, #8]
 8018da6:	68f8      	ldr	r0, [r7, #12]
 8018da8:	f000 f810 	bl	8018dcc <udp_sendto_if>
 8018dac:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	3718      	adds	r7, #24
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
 8018db6:	bf00      	nop
 8018db8:	080256e4 	.word	0x080256e4
 8018dbc:	08025808 	.word	0x08025808
 8018dc0:	08025738 	.word	0x08025738
 8018dc4:	08025820 	.word	0x08025820
 8018dc8:	0802583c 	.word	0x0802583c

08018dcc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b088      	sub	sp, #32
 8018dd0:	af02      	add	r7, sp, #8
 8018dd2:	60f8      	str	r0, [r7, #12]
 8018dd4:	60b9      	str	r1, [r7, #8]
 8018dd6:	607a      	str	r2, [r7, #4]
 8018dd8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d109      	bne.n	8018df4 <udp_sendto_if+0x28>
 8018de0:	4b2e      	ldr	r3, [pc, #184]	; (8018e9c <udp_sendto_if+0xd0>)
 8018de2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018de6:	492e      	ldr	r1, [pc, #184]	; (8018ea0 <udp_sendto_if+0xd4>)
 8018de8:	482e      	ldr	r0, [pc, #184]	; (8018ea4 <udp_sendto_if+0xd8>)
 8018dea:	f005 fe9f 	bl	801eb2c <iprintf>
 8018dee:	f06f 030f 	mvn.w	r3, #15
 8018df2:	e04f      	b.n	8018e94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018df4:	68bb      	ldr	r3, [r7, #8]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d109      	bne.n	8018e0e <udp_sendto_if+0x42>
 8018dfa:	4b28      	ldr	r3, [pc, #160]	; (8018e9c <udp_sendto_if+0xd0>)
 8018dfc:	f240 2281 	movw	r2, #641	; 0x281
 8018e00:	4929      	ldr	r1, [pc, #164]	; (8018ea8 <udp_sendto_if+0xdc>)
 8018e02:	4828      	ldr	r0, [pc, #160]	; (8018ea4 <udp_sendto_if+0xd8>)
 8018e04:	f005 fe92 	bl	801eb2c <iprintf>
 8018e08:	f06f 030f 	mvn.w	r3, #15
 8018e0c:	e042      	b.n	8018e94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d109      	bne.n	8018e28 <udp_sendto_if+0x5c>
 8018e14:	4b21      	ldr	r3, [pc, #132]	; (8018e9c <udp_sendto_if+0xd0>)
 8018e16:	f240 2282 	movw	r2, #642	; 0x282
 8018e1a:	4924      	ldr	r1, [pc, #144]	; (8018eac <udp_sendto_if+0xe0>)
 8018e1c:	4821      	ldr	r0, [pc, #132]	; (8018ea4 <udp_sendto_if+0xd8>)
 8018e1e:	f005 fe85 	bl	801eb2c <iprintf>
 8018e22:	f06f 030f 	mvn.w	r3, #15
 8018e26:	e035      	b.n	8018e94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018e28:	6a3b      	ldr	r3, [r7, #32]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d109      	bne.n	8018e42 <udp_sendto_if+0x76>
 8018e2e:	4b1b      	ldr	r3, [pc, #108]	; (8018e9c <udp_sendto_if+0xd0>)
 8018e30:	f240 2283 	movw	r2, #643	; 0x283
 8018e34:	491e      	ldr	r1, [pc, #120]	; (8018eb0 <udp_sendto_if+0xe4>)
 8018e36:	481b      	ldr	r0, [pc, #108]	; (8018ea4 <udp_sendto_if+0xd8>)
 8018e38:	f005 fe78 	bl	801eb2c <iprintf>
 8018e3c:	f06f 030f 	mvn.w	r3, #15
 8018e40:	e028      	b.n	8018e94 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d009      	beq.n	8018e5c <udp_sendto_if+0x90>
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d005      	beq.n	8018e5c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018e58:	2be0      	cmp	r3, #224	; 0xe0
 8018e5a:	d103      	bne.n	8018e64 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018e5c:	6a3b      	ldr	r3, [r7, #32]
 8018e5e:	3304      	adds	r3, #4
 8018e60:	617b      	str	r3, [r7, #20]
 8018e62:	e00b      	b.n	8018e7c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	681a      	ldr	r2, [r3, #0]
 8018e68:	6a3b      	ldr	r3, [r7, #32]
 8018e6a:	3304      	adds	r3, #4
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	429a      	cmp	r2, r3
 8018e70:	d002      	beq.n	8018e78 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018e72:	f06f 0303 	mvn.w	r3, #3
 8018e76:	e00d      	b.n	8018e94 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018e7c:	887a      	ldrh	r2, [r7, #2]
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	9301      	str	r3, [sp, #4]
 8018e82:	6a3b      	ldr	r3, [r7, #32]
 8018e84:	9300      	str	r3, [sp, #0]
 8018e86:	4613      	mov	r3, r2
 8018e88:	687a      	ldr	r2, [r7, #4]
 8018e8a:	68b9      	ldr	r1, [r7, #8]
 8018e8c:	68f8      	ldr	r0, [r7, #12]
 8018e8e:	f000 f811 	bl	8018eb4 <udp_sendto_if_src>
 8018e92:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018e94:	4618      	mov	r0, r3
 8018e96:	3718      	adds	r7, #24
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd80      	pop	{r7, pc}
 8018e9c:	080256e4 	.word	0x080256e4
 8018ea0:	08025858 	.word	0x08025858
 8018ea4:	08025738 	.word	0x08025738
 8018ea8:	08025874 	.word	0x08025874
 8018eac:	08025890 	.word	0x08025890
 8018eb0:	080258b0 	.word	0x080258b0

08018eb4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018eb4:	b580      	push	{r7, lr}
 8018eb6:	b08c      	sub	sp, #48	; 0x30
 8018eb8:	af04      	add	r7, sp, #16
 8018eba:	60f8      	str	r0, [r7, #12]
 8018ebc:	60b9      	str	r1, [r7, #8]
 8018ebe:	607a      	str	r2, [r7, #4]
 8018ec0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d109      	bne.n	8018edc <udp_sendto_if_src+0x28>
 8018ec8:	4b65      	ldr	r3, [pc, #404]	; (8019060 <udp_sendto_if_src+0x1ac>)
 8018eca:	f240 22d1 	movw	r2, #721	; 0x2d1
 8018ece:	4965      	ldr	r1, [pc, #404]	; (8019064 <udp_sendto_if_src+0x1b0>)
 8018ed0:	4865      	ldr	r0, [pc, #404]	; (8019068 <udp_sendto_if_src+0x1b4>)
 8018ed2:	f005 fe2b 	bl	801eb2c <iprintf>
 8018ed6:	f06f 030f 	mvn.w	r3, #15
 8018eda:	e0bc      	b.n	8019056 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018edc:	68bb      	ldr	r3, [r7, #8]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d109      	bne.n	8018ef6 <udp_sendto_if_src+0x42>
 8018ee2:	4b5f      	ldr	r3, [pc, #380]	; (8019060 <udp_sendto_if_src+0x1ac>)
 8018ee4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018ee8:	4960      	ldr	r1, [pc, #384]	; (801906c <udp_sendto_if_src+0x1b8>)
 8018eea:	485f      	ldr	r0, [pc, #380]	; (8019068 <udp_sendto_if_src+0x1b4>)
 8018eec:	f005 fe1e 	bl	801eb2c <iprintf>
 8018ef0:	f06f 030f 	mvn.w	r3, #15
 8018ef4:	e0af      	b.n	8019056 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d109      	bne.n	8018f10 <udp_sendto_if_src+0x5c>
 8018efc:	4b58      	ldr	r3, [pc, #352]	; (8019060 <udp_sendto_if_src+0x1ac>)
 8018efe:	f240 22d3 	movw	r2, #723	; 0x2d3
 8018f02:	495b      	ldr	r1, [pc, #364]	; (8019070 <udp_sendto_if_src+0x1bc>)
 8018f04:	4858      	ldr	r0, [pc, #352]	; (8019068 <udp_sendto_if_src+0x1b4>)
 8018f06:	f005 fe11 	bl	801eb2c <iprintf>
 8018f0a:	f06f 030f 	mvn.w	r3, #15
 8018f0e:	e0a2      	b.n	8019056 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8018f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d109      	bne.n	8018f2a <udp_sendto_if_src+0x76>
 8018f16:	4b52      	ldr	r3, [pc, #328]	; (8019060 <udp_sendto_if_src+0x1ac>)
 8018f18:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8018f1c:	4955      	ldr	r1, [pc, #340]	; (8019074 <udp_sendto_if_src+0x1c0>)
 8018f1e:	4852      	ldr	r0, [pc, #328]	; (8019068 <udp_sendto_if_src+0x1b4>)
 8018f20:	f005 fe04 	bl	801eb2c <iprintf>
 8018f24:	f06f 030f 	mvn.w	r3, #15
 8018f28:	e095      	b.n	8019056 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8018f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d109      	bne.n	8018f44 <udp_sendto_if_src+0x90>
 8018f30:	4b4b      	ldr	r3, [pc, #300]	; (8019060 <udp_sendto_if_src+0x1ac>)
 8018f32:	f240 22d5 	movw	r2, #725	; 0x2d5
 8018f36:	4950      	ldr	r1, [pc, #320]	; (8019078 <udp_sendto_if_src+0x1c4>)
 8018f38:	484b      	ldr	r0, [pc, #300]	; (8019068 <udp_sendto_if_src+0x1b4>)
 8018f3a:	f005 fdf7 	bl	801eb2c <iprintf>
 8018f3e:	f06f 030f 	mvn.w	r3, #15
 8018f42:	e088      	b.n	8019056 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	8a5b      	ldrh	r3, [r3, #18]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d10f      	bne.n	8018f6c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018f4c:	68f9      	ldr	r1, [r7, #12]
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	8a5b      	ldrh	r3, [r3, #18]
 8018f52:	461a      	mov	r2, r3
 8018f54:	68f8      	ldr	r0, [r7, #12]
 8018f56:	f000 f893 	bl	8019080 <udp_bind>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8018f5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d002      	beq.n	8018f6c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018f66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018f6a:	e074      	b.n	8019056 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018f6c:	68bb      	ldr	r3, [r7, #8]
 8018f6e:	891b      	ldrh	r3, [r3, #8]
 8018f70:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018f74:	4293      	cmp	r3, r2
 8018f76:	d902      	bls.n	8018f7e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018f78:	f04f 33ff 	mov.w	r3, #4294967295
 8018f7c:	e06b      	b.n	8019056 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8018f7e:	2108      	movs	r1, #8
 8018f80:	68b8      	ldr	r0, [r7, #8]
 8018f82:	f7f8 fc63 	bl	801184c <pbuf_add_header>
 8018f86:	4603      	mov	r3, r0
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d015      	beq.n	8018fb8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018f8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f90:	2108      	movs	r1, #8
 8018f92:	2022      	movs	r0, #34	; 0x22
 8018f94:	f7f8 fa0c 	bl	80113b0 <pbuf_alloc>
 8018f98:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8018f9a:	69fb      	ldr	r3, [r7, #28]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d102      	bne.n	8018fa6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8018fa4:	e057      	b.n	8019056 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8018fa6:	68bb      	ldr	r3, [r7, #8]
 8018fa8:	891b      	ldrh	r3, [r3, #8]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d006      	beq.n	8018fbc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8018fae:	68b9      	ldr	r1, [r7, #8]
 8018fb0:	69f8      	ldr	r0, [r7, #28]
 8018fb2:	f7f8 fe37 	bl	8011c24 <pbuf_chain>
 8018fb6:	e001      	b.n	8018fbc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018fbc:	69fb      	ldr	r3, [r7, #28]
 8018fbe:	895b      	ldrh	r3, [r3, #10]
 8018fc0:	2b07      	cmp	r3, #7
 8018fc2:	d806      	bhi.n	8018fd2 <udp_sendto_if_src+0x11e>
 8018fc4:	4b26      	ldr	r3, [pc, #152]	; (8019060 <udp_sendto_if_src+0x1ac>)
 8018fc6:	f240 320d 	movw	r2, #781	; 0x30d
 8018fca:	492c      	ldr	r1, [pc, #176]	; (801907c <udp_sendto_if_src+0x1c8>)
 8018fcc:	4826      	ldr	r0, [pc, #152]	; (8019068 <udp_sendto_if_src+0x1b4>)
 8018fce:	f005 fdad 	bl	801eb2c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018fd2:	69fb      	ldr	r3, [r7, #28]
 8018fd4:	685b      	ldr	r3, [r3, #4]
 8018fd6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	8a5b      	ldrh	r3, [r3, #18]
 8018fdc:	4618      	mov	r0, r3
 8018fde:	f7f6 f93d 	bl	800f25c <lwip_htons>
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	461a      	mov	r2, r3
 8018fe6:	697b      	ldr	r3, [r7, #20]
 8018fe8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018fea:	887b      	ldrh	r3, [r7, #2]
 8018fec:	4618      	mov	r0, r3
 8018fee:	f7f6 f935 	bl	800f25c <lwip_htons>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	461a      	mov	r2, r3
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018ffa:	697b      	ldr	r3, [r7, #20]
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	719a      	strb	r2, [r3, #6]
 8019000:	2200      	movs	r2, #0
 8019002:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019004:	69fb      	ldr	r3, [r7, #28]
 8019006:	891b      	ldrh	r3, [r3, #8]
 8019008:	4618      	mov	r0, r3
 801900a:	f7f6 f927 	bl	800f25c <lwip_htons>
 801900e:	4603      	mov	r3, r0
 8019010:	461a      	mov	r2, r3
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019016:	2311      	movs	r3, #17
 8019018:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	7adb      	ldrb	r3, [r3, #11]
 801901e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	7a9b      	ldrb	r3, [r3, #10]
 8019024:	7cb9      	ldrb	r1, [r7, #18]
 8019026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019028:	9202      	str	r2, [sp, #8]
 801902a:	7cfa      	ldrb	r2, [r7, #19]
 801902c:	9201      	str	r2, [sp, #4]
 801902e:	9300      	str	r3, [sp, #0]
 8019030:	460b      	mov	r3, r1
 8019032:	687a      	ldr	r2, [r7, #4]
 8019034:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019036:	69f8      	ldr	r0, [r7, #28]
 8019038:	f003 fbfe 	bl	801c838 <ip4_output_if_src>
 801903c:	4603      	mov	r3, r0
 801903e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019040:	69fa      	ldr	r2, [r7, #28]
 8019042:	68bb      	ldr	r3, [r7, #8]
 8019044:	429a      	cmp	r2, r3
 8019046:	d004      	beq.n	8019052 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019048:	69f8      	ldr	r0, [r7, #28]
 801904a:	f7f8 fcc7 	bl	80119dc <pbuf_free>
    q = NULL;
 801904e:	2300      	movs	r3, #0
 8019050:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019052:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019056:	4618      	mov	r0, r3
 8019058:	3720      	adds	r7, #32
 801905a:	46bd      	mov	sp, r7
 801905c:	bd80      	pop	{r7, pc}
 801905e:	bf00      	nop
 8019060:	080256e4 	.word	0x080256e4
 8019064:	080258d0 	.word	0x080258d0
 8019068:	08025738 	.word	0x08025738
 801906c:	080258f0 	.word	0x080258f0
 8019070:	08025910 	.word	0x08025910
 8019074:	08025934 	.word	0x08025934
 8019078:	08025958 	.word	0x08025958
 801907c:	0802597c 	.word	0x0802597c

08019080 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b086      	sub	sp, #24
 8019084:	af00      	add	r7, sp, #0
 8019086:	60f8      	str	r0, [r7, #12]
 8019088:	60b9      	str	r1, [r7, #8]
 801908a:	4613      	mov	r3, r2
 801908c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801908e:	68bb      	ldr	r3, [r7, #8]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d101      	bne.n	8019098 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019094:	4b39      	ldr	r3, [pc, #228]	; (801917c <udp_bind+0xfc>)
 8019096:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	2b00      	cmp	r3, #0
 801909c:	d109      	bne.n	80190b2 <udp_bind+0x32>
 801909e:	4b38      	ldr	r3, [pc, #224]	; (8019180 <udp_bind+0x100>)
 80190a0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80190a4:	4937      	ldr	r1, [pc, #220]	; (8019184 <udp_bind+0x104>)
 80190a6:	4838      	ldr	r0, [pc, #224]	; (8019188 <udp_bind+0x108>)
 80190a8:	f005 fd40 	bl	801eb2c <iprintf>
 80190ac:	f06f 030f 	mvn.w	r3, #15
 80190b0:	e060      	b.n	8019174 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80190b2:	2300      	movs	r3, #0
 80190b4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80190b6:	4b35      	ldr	r3, [pc, #212]	; (801918c <udp_bind+0x10c>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	617b      	str	r3, [r7, #20]
 80190bc:	e009      	b.n	80190d2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80190be:	68fa      	ldr	r2, [r7, #12]
 80190c0:	697b      	ldr	r3, [r7, #20]
 80190c2:	429a      	cmp	r2, r3
 80190c4:	d102      	bne.n	80190cc <udp_bind+0x4c>
      rebind = 1;
 80190c6:	2301      	movs	r3, #1
 80190c8:	74fb      	strb	r3, [r7, #19]
      break;
 80190ca:	e005      	b.n	80190d8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80190cc:	697b      	ldr	r3, [r7, #20]
 80190ce:	68db      	ldr	r3, [r3, #12]
 80190d0:	617b      	str	r3, [r7, #20]
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d1f2      	bne.n	80190be <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80190d8:	88fb      	ldrh	r3, [r7, #6]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d109      	bne.n	80190f2 <udp_bind+0x72>
    port = udp_new_port();
 80190de:	f7ff fc35 	bl	801894c <udp_new_port>
 80190e2:	4603      	mov	r3, r0
 80190e4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80190e6:	88fb      	ldrh	r3, [r7, #6]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d12c      	bne.n	8019146 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80190ec:	f06f 0307 	mvn.w	r3, #7
 80190f0:	e040      	b.n	8019174 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80190f2:	4b26      	ldr	r3, [pc, #152]	; (801918c <udp_bind+0x10c>)
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	617b      	str	r3, [r7, #20]
 80190f8:	e022      	b.n	8019140 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80190fa:	68fa      	ldr	r2, [r7, #12]
 80190fc:	697b      	ldr	r3, [r7, #20]
 80190fe:	429a      	cmp	r2, r3
 8019100:	d01b      	beq.n	801913a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019102:	697b      	ldr	r3, [r7, #20]
 8019104:	8a5b      	ldrh	r3, [r3, #18]
 8019106:	88fa      	ldrh	r2, [r7, #6]
 8019108:	429a      	cmp	r2, r3
 801910a:	d116      	bne.n	801913a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	681a      	ldr	r2, [r3, #0]
 8019110:	68bb      	ldr	r3, [r7, #8]
 8019112:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019114:	429a      	cmp	r2, r3
 8019116:	d00d      	beq.n	8019134 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019118:	68bb      	ldr	r3, [r7, #8]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d00a      	beq.n	8019134 <udp_bind+0xb4>
 801911e:	68bb      	ldr	r3, [r7, #8]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d006      	beq.n	8019134 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019126:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019128:	2b00      	cmp	r3, #0
 801912a:	d003      	beq.n	8019134 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801912c:	697b      	ldr	r3, [r7, #20]
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d102      	bne.n	801913a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019134:	f06f 0307 	mvn.w	r3, #7
 8019138:	e01c      	b.n	8019174 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801913a:	697b      	ldr	r3, [r7, #20]
 801913c:	68db      	ldr	r3, [r3, #12]
 801913e:	617b      	str	r3, [r7, #20]
 8019140:	697b      	ldr	r3, [r7, #20]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d1d9      	bne.n	80190fa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019146:	68bb      	ldr	r3, [r7, #8]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d002      	beq.n	8019152 <udp_bind+0xd2>
 801914c:	68bb      	ldr	r3, [r7, #8]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	e000      	b.n	8019154 <udp_bind+0xd4>
 8019152:	2300      	movs	r3, #0
 8019154:	68fa      	ldr	r2, [r7, #12]
 8019156:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	88fa      	ldrh	r2, [r7, #6]
 801915c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801915e:	7cfb      	ldrb	r3, [r7, #19]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d106      	bne.n	8019172 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019164:	4b09      	ldr	r3, [pc, #36]	; (801918c <udp_bind+0x10c>)
 8019166:	681a      	ldr	r2, [r3, #0]
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801916c:	4a07      	ldr	r2, [pc, #28]	; (801918c <udp_bind+0x10c>)
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019172:	2300      	movs	r3, #0
}
 8019174:	4618      	mov	r0, r3
 8019176:	3718      	adds	r7, #24
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}
 801917c:	080267a0 	.word	0x080267a0
 8019180:	080256e4 	.word	0x080256e4
 8019184:	080259ac 	.word	0x080259ac
 8019188:	08025738 	.word	0x08025738
 801918c:	2001b0e0 	.word	0x2001b0e0

08019190 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b086      	sub	sp, #24
 8019194:	af00      	add	r7, sp, #0
 8019196:	60f8      	str	r0, [r7, #12]
 8019198:	60b9      	str	r1, [r7, #8]
 801919a:	4613      	mov	r3, r2
 801919c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d109      	bne.n	80191b8 <udp_connect+0x28>
 80191a4:	4b2c      	ldr	r3, [pc, #176]	; (8019258 <udp_connect+0xc8>)
 80191a6:	f240 4235 	movw	r2, #1077	; 0x435
 80191aa:	492c      	ldr	r1, [pc, #176]	; (801925c <udp_connect+0xcc>)
 80191ac:	482c      	ldr	r0, [pc, #176]	; (8019260 <udp_connect+0xd0>)
 80191ae:	f005 fcbd 	bl	801eb2c <iprintf>
 80191b2:	f06f 030f 	mvn.w	r3, #15
 80191b6:	e04b      	b.n	8019250 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80191b8:	68bb      	ldr	r3, [r7, #8]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d109      	bne.n	80191d2 <udp_connect+0x42>
 80191be:	4b26      	ldr	r3, [pc, #152]	; (8019258 <udp_connect+0xc8>)
 80191c0:	f240 4236 	movw	r2, #1078	; 0x436
 80191c4:	4927      	ldr	r1, [pc, #156]	; (8019264 <udp_connect+0xd4>)
 80191c6:	4826      	ldr	r0, [pc, #152]	; (8019260 <udp_connect+0xd0>)
 80191c8:	f005 fcb0 	bl	801eb2c <iprintf>
 80191cc:	f06f 030f 	mvn.w	r3, #15
 80191d0:	e03e      	b.n	8019250 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	8a5b      	ldrh	r3, [r3, #18]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d10f      	bne.n	80191fa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80191da:	68f9      	ldr	r1, [r7, #12]
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	8a5b      	ldrh	r3, [r3, #18]
 80191e0:	461a      	mov	r2, r3
 80191e2:	68f8      	ldr	r0, [r7, #12]
 80191e4:	f7ff ff4c 	bl	8019080 <udp_bind>
 80191e8:	4603      	mov	r3, r0
 80191ea:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 80191ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d002      	beq.n	80191fa <udp_connect+0x6a>
      return err;
 80191f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80191f8:	e02a      	b.n	8019250 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80191fa:	68bb      	ldr	r3, [r7, #8]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d002      	beq.n	8019206 <udp_connect+0x76>
 8019200:	68bb      	ldr	r3, [r7, #8]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	e000      	b.n	8019208 <udp_connect+0x78>
 8019206:	2300      	movs	r3, #0
 8019208:	68fa      	ldr	r2, [r7, #12]
 801920a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	88fa      	ldrh	r2, [r7, #6]
 8019210:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	7c1b      	ldrb	r3, [r3, #16]
 8019216:	f043 0304 	orr.w	r3, r3, #4
 801921a:	b2da      	uxtb	r2, r3
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019220:	4b11      	ldr	r3, [pc, #68]	; (8019268 <udp_connect+0xd8>)
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	613b      	str	r3, [r7, #16]
 8019226:	e008      	b.n	801923a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8019228:	68fa      	ldr	r2, [r7, #12]
 801922a:	693b      	ldr	r3, [r7, #16]
 801922c:	429a      	cmp	r2, r3
 801922e:	d101      	bne.n	8019234 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8019230:	2300      	movs	r3, #0
 8019232:	e00d      	b.n	8019250 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019234:	693b      	ldr	r3, [r7, #16]
 8019236:	68db      	ldr	r3, [r3, #12]
 8019238:	613b      	str	r3, [r7, #16]
 801923a:	693b      	ldr	r3, [r7, #16]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d1f3      	bne.n	8019228 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8019240:	4b09      	ldr	r3, [pc, #36]	; (8019268 <udp_connect+0xd8>)
 8019242:	681a      	ldr	r2, [r3, #0]
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8019248:	4a07      	ldr	r2, [pc, #28]	; (8019268 <udp_connect+0xd8>)
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801924e:	2300      	movs	r3, #0
}
 8019250:	4618      	mov	r0, r3
 8019252:	3718      	adds	r7, #24
 8019254:	46bd      	mov	sp, r7
 8019256:	bd80      	pop	{r7, pc}
 8019258:	080256e4 	.word	0x080256e4
 801925c:	080259c4 	.word	0x080259c4
 8019260:	08025738 	.word	0x08025738
 8019264:	080259e0 	.word	0x080259e0
 8019268:	2001b0e0 	.word	0x2001b0e0

0801926c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b082      	sub	sp, #8
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d107      	bne.n	801928a <udp_disconnect+0x1e>
 801927a:	4b0d      	ldr	r3, [pc, #52]	; (80192b0 <udp_disconnect+0x44>)
 801927c:	f240 426a 	movw	r2, #1130	; 0x46a
 8019280:	490c      	ldr	r1, [pc, #48]	; (80192b4 <udp_disconnect+0x48>)
 8019282:	480d      	ldr	r0, [pc, #52]	; (80192b8 <udp_disconnect+0x4c>)
 8019284:	f005 fc52 	bl	801eb2c <iprintf>
 8019288:	e00f      	b.n	80192aa <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	2200      	movs	r2, #0
 801928e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	2200      	movs	r2, #0
 8019294:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	2200      	movs	r2, #0
 801929a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	7c1b      	ldrb	r3, [r3, #16]
 80192a0:	f023 0304 	bic.w	r3, r3, #4
 80192a4:	b2da      	uxtb	r2, r3
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	741a      	strb	r2, [r3, #16]
}
 80192aa:	3708      	adds	r7, #8
 80192ac:	46bd      	mov	sp, r7
 80192ae:	bd80      	pop	{r7, pc}
 80192b0:	080256e4 	.word	0x080256e4
 80192b4:	080259fc 	.word	0x080259fc
 80192b8:	08025738 	.word	0x08025738

080192bc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b084      	sub	sp, #16
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	60f8      	str	r0, [r7, #12]
 80192c4:	60b9      	str	r1, [r7, #8]
 80192c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d107      	bne.n	80192de <udp_recv+0x22>
 80192ce:	4b08      	ldr	r3, [pc, #32]	; (80192f0 <udp_recv+0x34>)
 80192d0:	f240 428a 	movw	r2, #1162	; 0x48a
 80192d4:	4907      	ldr	r1, [pc, #28]	; (80192f4 <udp_recv+0x38>)
 80192d6:	4808      	ldr	r0, [pc, #32]	; (80192f8 <udp_recv+0x3c>)
 80192d8:	f005 fc28 	bl	801eb2c <iprintf>
 80192dc:	e005      	b.n	80192ea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	68ba      	ldr	r2, [r7, #8]
 80192e2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	687a      	ldr	r2, [r7, #4]
 80192e8:	61da      	str	r2, [r3, #28]
}
 80192ea:	3710      	adds	r7, #16
 80192ec:	46bd      	mov	sp, r7
 80192ee:	bd80      	pop	{r7, pc}
 80192f0:	080256e4 	.word	0x080256e4
 80192f4:	08025a18 	.word	0x08025a18
 80192f8:	08025738 	.word	0x08025738

080192fc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b084      	sub	sp, #16
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d107      	bne.n	801931a <udp_remove+0x1e>
 801930a:	4b19      	ldr	r3, [pc, #100]	; (8019370 <udp_remove+0x74>)
 801930c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019310:	4918      	ldr	r1, [pc, #96]	; (8019374 <udp_remove+0x78>)
 8019312:	4819      	ldr	r0, [pc, #100]	; (8019378 <udp_remove+0x7c>)
 8019314:	f005 fc0a 	bl	801eb2c <iprintf>
 8019318:	e026      	b.n	8019368 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801931a:	4b18      	ldr	r3, [pc, #96]	; (801937c <udp_remove+0x80>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	687a      	ldr	r2, [r7, #4]
 8019320:	429a      	cmp	r2, r3
 8019322:	d105      	bne.n	8019330 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019324:	4b15      	ldr	r3, [pc, #84]	; (801937c <udp_remove+0x80>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	68db      	ldr	r3, [r3, #12]
 801932a:	4a14      	ldr	r2, [pc, #80]	; (801937c <udp_remove+0x80>)
 801932c:	6013      	str	r3, [r2, #0]
 801932e:	e017      	b.n	8019360 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019330:	4b12      	ldr	r3, [pc, #72]	; (801937c <udp_remove+0x80>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	60fb      	str	r3, [r7, #12]
 8019336:	e010      	b.n	801935a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	68db      	ldr	r3, [r3, #12]
 801933c:	2b00      	cmp	r3, #0
 801933e:	d009      	beq.n	8019354 <udp_remove+0x58>
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	68db      	ldr	r3, [r3, #12]
 8019344:	687a      	ldr	r2, [r7, #4]
 8019346:	429a      	cmp	r2, r3
 8019348:	d104      	bne.n	8019354 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	68da      	ldr	r2, [r3, #12]
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	60da      	str	r2, [r3, #12]
        break;
 8019352:	e005      	b.n	8019360 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	68db      	ldr	r3, [r3, #12]
 8019358:	60fb      	str	r3, [r7, #12]
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d1eb      	bne.n	8019338 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019360:	6879      	ldr	r1, [r7, #4]
 8019362:	2000      	movs	r0, #0
 8019364:	f7f7 fc58 	bl	8010c18 <memp_free>
}
 8019368:	3710      	adds	r7, #16
 801936a:	46bd      	mov	sp, r7
 801936c:	bd80      	pop	{r7, pc}
 801936e:	bf00      	nop
 8019370:	080256e4 	.word	0x080256e4
 8019374:	08025a30 	.word	0x08025a30
 8019378:	08025738 	.word	0x08025738
 801937c:	2001b0e0 	.word	0x2001b0e0

08019380 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b082      	sub	sp, #8
 8019384:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019386:	2000      	movs	r0, #0
 8019388:	f7f7 fbf4 	bl	8010b74 <memp_malloc>
 801938c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	2b00      	cmp	r3, #0
 8019392:	d007      	beq.n	80193a4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019394:	2220      	movs	r2, #32
 8019396:	2100      	movs	r1, #0
 8019398:	6878      	ldr	r0, [r7, #4]
 801939a:	f004 feab 	bl	801e0f4 <memset>
    pcb->ttl = UDP_TTL;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	22ff      	movs	r2, #255	; 0xff
 80193a2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80193a4:	687b      	ldr	r3, [r7, #4]
}
 80193a6:	4618      	mov	r0, r3
 80193a8:	3708      	adds	r7, #8
 80193aa:	46bd      	mov	sp, r7
 80193ac:	bd80      	pop	{r7, pc}

080193ae <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80193ae:	b580      	push	{r7, lr}
 80193b0:	b084      	sub	sp, #16
 80193b2:	af00      	add	r7, sp, #0
 80193b4:	4603      	mov	r3, r0
 80193b6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80193b8:	f7ff ffe2 	bl	8019380 <udp_new>
 80193bc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80193be:	68fb      	ldr	r3, [r7, #12]
}
 80193c0:	4618      	mov	r0, r3
 80193c2:	3710      	adds	r7, #16
 80193c4:	46bd      	mov	sp, r7
 80193c6:	bd80      	pop	{r7, pc}

080193c8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80193c8:	b480      	push	{r7}
 80193ca:	b085      	sub	sp, #20
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	6078      	str	r0, [r7, #4]
 80193d0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d01e      	beq.n	8019416 <udp_netif_ip_addr_changed+0x4e>
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d01a      	beq.n	8019416 <udp_netif_ip_addr_changed+0x4e>
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d017      	beq.n	8019416 <udp_netif_ip_addr_changed+0x4e>
 80193e6:	683b      	ldr	r3, [r7, #0]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d013      	beq.n	8019416 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80193ee:	4b0d      	ldr	r3, [pc, #52]	; (8019424 <udp_netif_ip_addr_changed+0x5c>)
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	60fb      	str	r3, [r7, #12]
 80193f4:	e00c      	b.n	8019410 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	681a      	ldr	r2, [r3, #0]
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	429a      	cmp	r2, r3
 8019400:	d103      	bne.n	801940a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019402:	683b      	ldr	r3, [r7, #0]
 8019404:	681a      	ldr	r2, [r3, #0]
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	68db      	ldr	r3, [r3, #12]
 801940e:	60fb      	str	r3, [r7, #12]
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d1ef      	bne.n	80193f6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019416:	bf00      	nop
 8019418:	3714      	adds	r7, #20
 801941a:	46bd      	mov	sp, r7
 801941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019420:	4770      	bx	lr
 8019422:	bf00      	nop
 8019424:	2001b0e0 	.word	0x2001b0e0

08019428 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801942c:	4b20      	ldr	r3, [pc, #128]	; (80194b0 <dhcp_inc_pcb_refcount+0x88>)
 801942e:	781b      	ldrb	r3, [r3, #0]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d133      	bne.n	801949c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8019434:	4b1f      	ldr	r3, [pc, #124]	; (80194b4 <dhcp_inc_pcb_refcount+0x8c>)
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d005      	beq.n	8019448 <dhcp_inc_pcb_refcount+0x20>
 801943c:	4b1e      	ldr	r3, [pc, #120]	; (80194b8 <dhcp_inc_pcb_refcount+0x90>)
 801943e:	22e5      	movs	r2, #229	; 0xe5
 8019440:	491e      	ldr	r1, [pc, #120]	; (80194bc <dhcp_inc_pcb_refcount+0x94>)
 8019442:	481f      	ldr	r0, [pc, #124]	; (80194c0 <dhcp_inc_pcb_refcount+0x98>)
 8019444:	f005 fb72 	bl	801eb2c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8019448:	f7ff ff9a 	bl	8019380 <udp_new>
 801944c:	4603      	mov	r3, r0
 801944e:	4a19      	ldr	r2, [pc, #100]	; (80194b4 <dhcp_inc_pcb_refcount+0x8c>)
 8019450:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8019452:	4b18      	ldr	r3, [pc, #96]	; (80194b4 <dhcp_inc_pcb_refcount+0x8c>)
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d102      	bne.n	8019460 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801945a:	f04f 33ff 	mov.w	r3, #4294967295
 801945e:	e024      	b.n	80194aa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8019460:	4b14      	ldr	r3, [pc, #80]	; (80194b4 <dhcp_inc_pcb_refcount+0x8c>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	7a5a      	ldrb	r2, [r3, #9]
 8019466:	4b13      	ldr	r3, [pc, #76]	; (80194b4 <dhcp_inc_pcb_refcount+0x8c>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	f042 0220 	orr.w	r2, r2, #32
 801946e:	b2d2      	uxtb	r2, r2
 8019470:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8019472:	4b10      	ldr	r3, [pc, #64]	; (80194b4 <dhcp_inc_pcb_refcount+0x8c>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	2244      	movs	r2, #68	; 0x44
 8019478:	4912      	ldr	r1, [pc, #72]	; (80194c4 <dhcp_inc_pcb_refcount+0x9c>)
 801947a:	4618      	mov	r0, r3
 801947c:	f7ff fe00 	bl	8019080 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8019480:	4b0c      	ldr	r3, [pc, #48]	; (80194b4 <dhcp_inc_pcb_refcount+0x8c>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2243      	movs	r2, #67	; 0x43
 8019486:	490f      	ldr	r1, [pc, #60]	; (80194c4 <dhcp_inc_pcb_refcount+0x9c>)
 8019488:	4618      	mov	r0, r3
 801948a:	f7ff fe81 	bl	8019190 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801948e:	4b09      	ldr	r3, [pc, #36]	; (80194b4 <dhcp_inc_pcb_refcount+0x8c>)
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	2200      	movs	r2, #0
 8019494:	490c      	ldr	r1, [pc, #48]	; (80194c8 <dhcp_inc_pcb_refcount+0xa0>)
 8019496:	4618      	mov	r0, r3
 8019498:	f7ff ff10 	bl	80192bc <udp_recv>
  }

  dhcp_pcb_refcount++;
 801949c:	4b04      	ldr	r3, [pc, #16]	; (80194b0 <dhcp_inc_pcb_refcount+0x88>)
 801949e:	781b      	ldrb	r3, [r3, #0]
 80194a0:	3301      	adds	r3, #1
 80194a2:	b2da      	uxtb	r2, r3
 80194a4:	4b02      	ldr	r3, [pc, #8]	; (80194b0 <dhcp_inc_pcb_refcount+0x88>)
 80194a6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80194a8:	2300      	movs	r3, #0
}
 80194aa:	4618      	mov	r0, r3
 80194ac:	bd80      	pop	{r7, pc}
 80194ae:	bf00      	nop
 80194b0:	200143a4 	.word	0x200143a4
 80194b4:	200143a0 	.word	0x200143a0
 80194b8:	08025a48 	.word	0x08025a48
 80194bc:	08025a80 	.word	0x08025a80
 80194c0:	08025aa8 	.word	0x08025aa8
 80194c4:	080267a0 	.word	0x080267a0
 80194c8:	0801ae21 	.word	0x0801ae21

080194cc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80194d0:	4b0e      	ldr	r3, [pc, #56]	; (801950c <dhcp_dec_pcb_refcount+0x40>)
 80194d2:	781b      	ldrb	r3, [r3, #0]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d105      	bne.n	80194e4 <dhcp_dec_pcb_refcount+0x18>
 80194d8:	4b0d      	ldr	r3, [pc, #52]	; (8019510 <dhcp_dec_pcb_refcount+0x44>)
 80194da:	22ff      	movs	r2, #255	; 0xff
 80194dc:	490d      	ldr	r1, [pc, #52]	; (8019514 <dhcp_dec_pcb_refcount+0x48>)
 80194de:	480e      	ldr	r0, [pc, #56]	; (8019518 <dhcp_dec_pcb_refcount+0x4c>)
 80194e0:	f005 fb24 	bl	801eb2c <iprintf>
  dhcp_pcb_refcount--;
 80194e4:	4b09      	ldr	r3, [pc, #36]	; (801950c <dhcp_dec_pcb_refcount+0x40>)
 80194e6:	781b      	ldrb	r3, [r3, #0]
 80194e8:	3b01      	subs	r3, #1
 80194ea:	b2da      	uxtb	r2, r3
 80194ec:	4b07      	ldr	r3, [pc, #28]	; (801950c <dhcp_dec_pcb_refcount+0x40>)
 80194ee:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80194f0:	4b06      	ldr	r3, [pc, #24]	; (801950c <dhcp_dec_pcb_refcount+0x40>)
 80194f2:	781b      	ldrb	r3, [r3, #0]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d107      	bne.n	8019508 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80194f8:	4b08      	ldr	r3, [pc, #32]	; (801951c <dhcp_dec_pcb_refcount+0x50>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	4618      	mov	r0, r3
 80194fe:	f7ff fefd 	bl	80192fc <udp_remove>
    dhcp_pcb = NULL;
 8019502:	4b06      	ldr	r3, [pc, #24]	; (801951c <dhcp_dec_pcb_refcount+0x50>)
 8019504:	2200      	movs	r2, #0
 8019506:	601a      	str	r2, [r3, #0]
  }
}
 8019508:	bf00      	nop
 801950a:	bd80      	pop	{r7, pc}
 801950c:	200143a4 	.word	0x200143a4
 8019510:	08025a48 	.word	0x08025a48
 8019514:	08025ad0 	.word	0x08025ad0
 8019518:	08025aa8 	.word	0x08025aa8
 801951c:	200143a0 	.word	0x200143a0

08019520 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8019520:	b580      	push	{r7, lr}
 8019522:	b084      	sub	sp, #16
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801952c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801952e:	210c      	movs	r1, #12
 8019530:	68f8      	ldr	r0, [r7, #12]
 8019532:	f001 f875 	bl	801a620 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019536:	4b06      	ldr	r3, [pc, #24]	; (8019550 <dhcp_handle_nak+0x30>)
 8019538:	4a05      	ldr	r2, [pc, #20]	; (8019550 <dhcp_handle_nak+0x30>)
 801953a:	4905      	ldr	r1, [pc, #20]	; (8019550 <dhcp_handle_nak+0x30>)
 801953c:	6878      	ldr	r0, [r7, #4]
 801953e:	f7f7 fd0d 	bl	8010f5c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8019542:	6878      	ldr	r0, [r7, #4]
 8019544:	f000 fc68 	bl	8019e18 <dhcp_discover>
}
 8019548:	bf00      	nop
 801954a:	3710      	adds	r7, #16
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}
 8019550:	080267a0 	.word	0x080267a0

08019554 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b084      	sub	sp, #16
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019560:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8019562:	2108      	movs	r1, #8
 8019564:	68f8      	ldr	r0, [r7, #12]
 8019566:	f001 f85b 	bl	801a620 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	331c      	adds	r3, #28
 801956e:	2200      	movs	r2, #0
 8019570:	4619      	mov	r1, r3
 8019572:	6878      	ldr	r0, [r7, #4]
 8019574:	f002 fbc8 	bl	801bd08 <etharp_query>
 8019578:	4603      	mov	r3, r0
 801957a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	799b      	ldrb	r3, [r3, #6]
 8019580:	2bff      	cmp	r3, #255	; 0xff
 8019582:	d005      	beq.n	8019590 <dhcp_check+0x3c>
    dhcp->tries++;
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	799b      	ldrb	r3, [r3, #6]
 8019588:	3301      	adds	r3, #1
 801958a:	b2da      	uxtb	r2, r3
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8019590:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8019594:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019596:	893b      	ldrh	r3, [r7, #8]
 8019598:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801959c:	4a06      	ldr	r2, [pc, #24]	; (80195b8 <dhcp_check+0x64>)
 801959e:	fb82 1203 	smull	r1, r2, r2, r3
 80195a2:	1152      	asrs	r2, r2, #5
 80195a4:	17db      	asrs	r3, r3, #31
 80195a6:	1ad3      	subs	r3, r2, r3
 80195a8:	b29a      	uxth	r2, r3
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80195ae:	bf00      	nop
 80195b0:	3710      	adds	r7, #16
 80195b2:	46bd      	mov	sp, r7
 80195b4:	bd80      	pop	{r7, pc}
 80195b6:	bf00      	nop
 80195b8:	10624dd3 	.word	0x10624dd3

080195bc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b084      	sub	sp, #16
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
 80195c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80195cc:	4b0c      	ldr	r3, [pc, #48]	; (8019600 <dhcp_handle_offer+0x44>)
 80195ce:	789b      	ldrb	r3, [r3, #2]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d011      	beq.n	80195f8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	2200      	movs	r2, #0
 80195d8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80195da:	4b0a      	ldr	r3, [pc, #40]	; (8019604 <dhcp_handle_offer+0x48>)
 80195dc:	689b      	ldr	r3, [r3, #8]
 80195de:	4618      	mov	r0, r3
 80195e0:	f7f5 fe51 	bl	800f286 <lwip_htonl>
 80195e4:	4602      	mov	r2, r0
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80195ea:	683b      	ldr	r3, [r7, #0]
 80195ec:	691a      	ldr	r2, [r3, #16]
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80195f2:	6878      	ldr	r0, [r7, #4]
 80195f4:	f000 f808 	bl	8019608 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80195f8:	bf00      	nop
 80195fa:	3710      	adds	r7, #16
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}
 8019600:	2001b0e4 	.word	0x2001b0e4
 8019604:	2001b0f0 	.word	0x2001b0f0

08019608 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8019608:	b5b0      	push	{r4, r5, r7, lr}
 801960a:	b08a      	sub	sp, #40	; 0x28
 801960c:	af02      	add	r7, sp, #8
 801960e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d109      	bne.n	801962a <dhcp_select+0x22>
 8019616:	4b71      	ldr	r3, [pc, #452]	; (80197dc <dhcp_select+0x1d4>)
 8019618:	f240 1277 	movw	r2, #375	; 0x177
 801961c:	4970      	ldr	r1, [pc, #448]	; (80197e0 <dhcp_select+0x1d8>)
 801961e:	4871      	ldr	r0, [pc, #452]	; (80197e4 <dhcp_select+0x1dc>)
 8019620:	f005 fa84 	bl	801eb2c <iprintf>
 8019624:	f06f 030f 	mvn.w	r3, #15
 8019628:	e0d3      	b.n	80197d2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801962e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019630:	69bb      	ldr	r3, [r7, #24]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d109      	bne.n	801964a <dhcp_select+0x42>
 8019636:	4b69      	ldr	r3, [pc, #420]	; (80197dc <dhcp_select+0x1d4>)
 8019638:	f240 1279 	movw	r2, #377	; 0x179
 801963c:	496a      	ldr	r1, [pc, #424]	; (80197e8 <dhcp_select+0x1e0>)
 801963e:	4869      	ldr	r0, [pc, #420]	; (80197e4 <dhcp_select+0x1dc>)
 8019640:	f005 fa74 	bl	801eb2c <iprintf>
 8019644:	f06f 0305 	mvn.w	r3, #5
 8019648:	e0c3      	b.n	80197d2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801964a:	2101      	movs	r1, #1
 801964c:	69b8      	ldr	r0, [r7, #24]
 801964e:	f000 ffe7 	bl	801a620 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019652:	f107 030c 	add.w	r3, r7, #12
 8019656:	2203      	movs	r2, #3
 8019658:	69b9      	ldr	r1, [r7, #24]
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f001 fcaa 	bl	801afb4 <dhcp_create_msg>
 8019660:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019662:	697b      	ldr	r3, [r7, #20]
 8019664:	2b00      	cmp	r3, #0
 8019666:	f000 8085 	beq.w	8019774 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801966a:	697b      	ldr	r3, [r7, #20]
 801966c:	685b      	ldr	r3, [r3, #4]
 801966e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019670:	89b8      	ldrh	r0, [r7, #12]
 8019672:	693b      	ldr	r3, [r7, #16]
 8019674:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019678:	2302      	movs	r3, #2
 801967a:	2239      	movs	r2, #57	; 0x39
 801967c:	f000 ffea 	bl	801a654 <dhcp_option>
 8019680:	4603      	mov	r3, r0
 8019682:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019684:	89b8      	ldrh	r0, [r7, #12]
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019690:	461a      	mov	r2, r3
 8019692:	f001 f839 	bl	801a708 <dhcp_option_short>
 8019696:	4603      	mov	r3, r0
 8019698:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801969a:	89b8      	ldrh	r0, [r7, #12]
 801969c:	693b      	ldr	r3, [r7, #16]
 801969e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80196a2:	2304      	movs	r3, #4
 80196a4:	2232      	movs	r2, #50	; 0x32
 80196a6:	f000 ffd5 	bl	801a654 <dhcp_option>
 80196aa:	4603      	mov	r3, r0
 80196ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80196ae:	89bc      	ldrh	r4, [r7, #12]
 80196b0:	693b      	ldr	r3, [r7, #16]
 80196b2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80196b6:	69bb      	ldr	r3, [r7, #24]
 80196b8:	69db      	ldr	r3, [r3, #28]
 80196ba:	4618      	mov	r0, r3
 80196bc:	f7f5 fde3 	bl	800f286 <lwip_htonl>
 80196c0:	4603      	mov	r3, r0
 80196c2:	461a      	mov	r2, r3
 80196c4:	4629      	mov	r1, r5
 80196c6:	4620      	mov	r0, r4
 80196c8:	f001 f850 	bl	801a76c <dhcp_option_long>
 80196cc:	4603      	mov	r3, r0
 80196ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80196d0:	89b8      	ldrh	r0, [r7, #12]
 80196d2:	693b      	ldr	r3, [r7, #16]
 80196d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80196d8:	2304      	movs	r3, #4
 80196da:	2236      	movs	r2, #54	; 0x36
 80196dc:	f000 ffba 	bl	801a654 <dhcp_option>
 80196e0:	4603      	mov	r3, r0
 80196e2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80196e4:	89bc      	ldrh	r4, [r7, #12]
 80196e6:	693b      	ldr	r3, [r7, #16]
 80196e8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80196ec:	69bb      	ldr	r3, [r7, #24]
 80196ee:	699b      	ldr	r3, [r3, #24]
 80196f0:	4618      	mov	r0, r3
 80196f2:	f7f5 fdc8 	bl	800f286 <lwip_htonl>
 80196f6:	4603      	mov	r3, r0
 80196f8:	461a      	mov	r2, r3
 80196fa:	4629      	mov	r1, r5
 80196fc:	4620      	mov	r0, r4
 80196fe:	f001 f835 	bl	801a76c <dhcp_option_long>
 8019702:	4603      	mov	r3, r0
 8019704:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019706:	89b8      	ldrh	r0, [r7, #12]
 8019708:	693b      	ldr	r3, [r7, #16]
 801970a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801970e:	2304      	movs	r3, #4
 8019710:	2237      	movs	r2, #55	; 0x37
 8019712:	f000 ff9f 	bl	801a654 <dhcp_option>
 8019716:	4603      	mov	r3, r0
 8019718:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801971a:	2300      	movs	r3, #0
 801971c:	77fb      	strb	r3, [r7, #31]
 801971e:	e00e      	b.n	801973e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019720:	89b8      	ldrh	r0, [r7, #12]
 8019722:	693b      	ldr	r3, [r7, #16]
 8019724:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019728:	7ffb      	ldrb	r3, [r7, #31]
 801972a:	4a30      	ldr	r2, [pc, #192]	; (80197ec <dhcp_select+0x1e4>)
 801972c:	5cd3      	ldrb	r3, [r2, r3]
 801972e:	461a      	mov	r2, r3
 8019730:	f000 ffc4 	bl	801a6bc <dhcp_option_byte>
 8019734:	4603      	mov	r3, r0
 8019736:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019738:	7ffb      	ldrb	r3, [r7, #31]
 801973a:	3301      	adds	r3, #1
 801973c:	77fb      	strb	r3, [r7, #31]
 801973e:	7ffb      	ldrb	r3, [r7, #31]
 8019740:	2b03      	cmp	r3, #3
 8019742:	d9ed      	bls.n	8019720 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019744:	89b8      	ldrh	r0, [r7, #12]
 8019746:	693b      	ldr	r3, [r7, #16]
 8019748:	33f0      	adds	r3, #240	; 0xf0
 801974a:	697a      	ldr	r2, [r7, #20]
 801974c:	4619      	mov	r1, r3
 801974e:	f001 fd07 	bl	801b160 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019752:	4b27      	ldr	r3, [pc, #156]	; (80197f0 <dhcp_select+0x1e8>)
 8019754:	6818      	ldr	r0, [r3, #0]
 8019756:	4b27      	ldr	r3, [pc, #156]	; (80197f4 <dhcp_select+0x1ec>)
 8019758:	9301      	str	r3, [sp, #4]
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	9300      	str	r3, [sp, #0]
 801975e:	2343      	movs	r3, #67	; 0x43
 8019760:	4a25      	ldr	r2, [pc, #148]	; (80197f8 <dhcp_select+0x1f0>)
 8019762:	6979      	ldr	r1, [r7, #20]
 8019764:	f7ff fba6 	bl	8018eb4 <udp_sendto_if_src>
 8019768:	4603      	mov	r3, r0
 801976a:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 801976c:	6978      	ldr	r0, [r7, #20]
 801976e:	f7f8 f935 	bl	80119dc <pbuf_free>
 8019772:	e001      	b.n	8019778 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019774:	23ff      	movs	r3, #255	; 0xff
 8019776:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8019778:	69bb      	ldr	r3, [r7, #24]
 801977a:	799b      	ldrb	r3, [r3, #6]
 801977c:	2bff      	cmp	r3, #255	; 0xff
 801977e:	d005      	beq.n	801978c <dhcp_select+0x184>
    dhcp->tries++;
 8019780:	69bb      	ldr	r3, [r7, #24]
 8019782:	799b      	ldrb	r3, [r3, #6]
 8019784:	3301      	adds	r3, #1
 8019786:	b2da      	uxtb	r2, r3
 8019788:	69bb      	ldr	r3, [r7, #24]
 801978a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801978c:	69bb      	ldr	r3, [r7, #24]
 801978e:	799b      	ldrb	r3, [r3, #6]
 8019790:	2b05      	cmp	r3, #5
 8019792:	d80d      	bhi.n	80197b0 <dhcp_select+0x1a8>
 8019794:	69bb      	ldr	r3, [r7, #24]
 8019796:	799b      	ldrb	r3, [r3, #6]
 8019798:	461a      	mov	r2, r3
 801979a:	2301      	movs	r3, #1
 801979c:	4093      	lsls	r3, r2
 801979e:	b29b      	uxth	r3, r3
 80197a0:	461a      	mov	r2, r3
 80197a2:	0152      	lsls	r2, r2, #5
 80197a4:	1ad2      	subs	r2, r2, r3
 80197a6:	0092      	lsls	r2, r2, #2
 80197a8:	4413      	add	r3, r2
 80197aa:	00db      	lsls	r3, r3, #3
 80197ac:	b29b      	uxth	r3, r3
 80197ae:	e001      	b.n	80197b4 <dhcp_select+0x1ac>
 80197b0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80197b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80197b6:	89fb      	ldrh	r3, [r7, #14]
 80197b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80197bc:	4a0f      	ldr	r2, [pc, #60]	; (80197fc <dhcp_select+0x1f4>)
 80197be:	fb82 1203 	smull	r1, r2, r2, r3
 80197c2:	1152      	asrs	r2, r2, #5
 80197c4:	17db      	asrs	r3, r3, #31
 80197c6:	1ad3      	subs	r3, r2, r3
 80197c8:	b29a      	uxth	r2, r3
 80197ca:	69bb      	ldr	r3, [r7, #24]
 80197cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80197ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80197d2:	4618      	mov	r0, r3
 80197d4:	3720      	adds	r7, #32
 80197d6:	46bd      	mov	sp, r7
 80197d8:	bdb0      	pop	{r4, r5, r7, pc}
 80197da:	bf00      	nop
 80197dc:	08025a48 	.word	0x08025a48
 80197e0:	08025af4 	.word	0x08025af4
 80197e4:	08025aa8 	.word	0x08025aa8
 80197e8:	08025b10 	.word	0x08025b10
 80197ec:	20000060 	.word	0x20000060
 80197f0:	200143a0 	.word	0x200143a0
 80197f4:	080267a0 	.word	0x080267a0
 80197f8:	080267a4 	.word	0x080267a4
 80197fc:	10624dd3 	.word	0x10624dd3

08019800 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b082      	sub	sp, #8
 8019804:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8019806:	4b27      	ldr	r3, [pc, #156]	; (80198a4 <dhcp_coarse_tmr+0xa4>)
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	607b      	str	r3, [r7, #4]
 801980c:	e042      	b.n	8019894 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019812:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8019814:	683b      	ldr	r3, [r7, #0]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d039      	beq.n	801988e <dhcp_coarse_tmr+0x8e>
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	795b      	ldrb	r3, [r3, #5]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d035      	beq.n	801988e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	8a9b      	ldrh	r3, [r3, #20]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d012      	beq.n	8019850 <dhcp_coarse_tmr+0x50>
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	8a5b      	ldrh	r3, [r3, #18]
 801982e:	3301      	adds	r3, #1
 8019830:	b29a      	uxth	r2, r3
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	825a      	strh	r2, [r3, #18]
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	8a5a      	ldrh	r2, [r3, #18]
 801983a:	683b      	ldr	r3, [r7, #0]
 801983c:	8a9b      	ldrh	r3, [r3, #20]
 801983e:	429a      	cmp	r2, r3
 8019840:	d106      	bne.n	8019850 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8019842:	6878      	ldr	r0, [r7, #4]
 8019844:	f000 fe52 	bl	801a4ec <dhcp_release_and_stop>
        dhcp_start(netif);
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	f000 f989 	bl	8019b60 <dhcp_start>
 801984e:	e01e      	b.n	801988e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8019850:	683b      	ldr	r3, [r7, #0]
 8019852:	8a1b      	ldrh	r3, [r3, #16]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d00b      	beq.n	8019870 <dhcp_coarse_tmr+0x70>
 8019858:	683b      	ldr	r3, [r7, #0]
 801985a:	8a1b      	ldrh	r3, [r3, #16]
 801985c:	1e5a      	subs	r2, r3, #1
 801985e:	b291      	uxth	r1, r2
 8019860:	683a      	ldr	r2, [r7, #0]
 8019862:	8211      	strh	r1, [r2, #16]
 8019864:	2b01      	cmp	r3, #1
 8019866:	d103      	bne.n	8019870 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8019868:	6878      	ldr	r0, [r7, #4]
 801986a:	f000 f8c6 	bl	80199fa <dhcp_t2_timeout>
 801986e:	e00e      	b.n	801988e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8019870:	683b      	ldr	r3, [r7, #0]
 8019872:	89db      	ldrh	r3, [r3, #14]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d00a      	beq.n	801988e <dhcp_coarse_tmr+0x8e>
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	89db      	ldrh	r3, [r3, #14]
 801987c:	1e5a      	subs	r2, r3, #1
 801987e:	b291      	uxth	r1, r2
 8019880:	683a      	ldr	r2, [r7, #0]
 8019882:	81d1      	strh	r1, [r2, #14]
 8019884:	2b01      	cmp	r3, #1
 8019886:	d102      	bne.n	801988e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8019888:	6878      	ldr	r0, [r7, #4]
 801988a:	f000 f888 	bl	801999e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	607b      	str	r3, [r7, #4]
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d1b9      	bne.n	801980e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801989a:	bf00      	nop
 801989c:	bf00      	nop
 801989e:	3708      	adds	r7, #8
 80198a0:	46bd      	mov	sp, r7
 80198a2:	bd80      	pop	{r7, pc}
 80198a4:	2001b0b8 	.word	0x2001b0b8

080198a8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b082      	sub	sp, #8
 80198ac:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80198ae:	4b16      	ldr	r3, [pc, #88]	; (8019908 <dhcp_fine_tmr+0x60>)
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	607b      	str	r3, [r7, #4]
 80198b4:	e020      	b.n	80198f8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ba:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80198bc:	683b      	ldr	r3, [r7, #0]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d017      	beq.n	80198f2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80198c2:	683b      	ldr	r3, [r7, #0]
 80198c4:	891b      	ldrh	r3, [r3, #8]
 80198c6:	2b01      	cmp	r3, #1
 80198c8:	d906      	bls.n	80198d8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80198ca:	683b      	ldr	r3, [r7, #0]
 80198cc:	891b      	ldrh	r3, [r3, #8]
 80198ce:	3b01      	subs	r3, #1
 80198d0:	b29a      	uxth	r2, r3
 80198d2:	683b      	ldr	r3, [r7, #0]
 80198d4:	811a      	strh	r2, [r3, #8]
 80198d6:	e00c      	b.n	80198f2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80198d8:	683b      	ldr	r3, [r7, #0]
 80198da:	891b      	ldrh	r3, [r3, #8]
 80198dc:	2b01      	cmp	r3, #1
 80198de:	d108      	bne.n	80198f2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80198e0:	683b      	ldr	r3, [r7, #0]
 80198e2:	891b      	ldrh	r3, [r3, #8]
 80198e4:	3b01      	subs	r3, #1
 80198e6:	b29a      	uxth	r2, r3
 80198e8:	683b      	ldr	r3, [r7, #0]
 80198ea:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80198ec:	6878      	ldr	r0, [r7, #4]
 80198ee:	f000 f80d 	bl	801990c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	607b      	str	r3, [r7, #4]
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d1db      	bne.n	80198b6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80198fe:	bf00      	nop
 8019900:	bf00      	nop
 8019902:	3708      	adds	r7, #8
 8019904:	46bd      	mov	sp, r7
 8019906:	bd80      	pop	{r7, pc}
 8019908:	2001b0b8 	.word	0x2001b0b8

0801990c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b084      	sub	sp, #16
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019918:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	795b      	ldrb	r3, [r3, #5]
 801991e:	2b0c      	cmp	r3, #12
 8019920:	d003      	beq.n	801992a <dhcp_timeout+0x1e>
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	795b      	ldrb	r3, [r3, #5]
 8019926:	2b06      	cmp	r3, #6
 8019928:	d103      	bne.n	8019932 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f000 fa74 	bl	8019e18 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8019930:	e031      	b.n	8019996 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	795b      	ldrb	r3, [r3, #5]
 8019936:	2b01      	cmp	r3, #1
 8019938:	d10e      	bne.n	8019958 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	799b      	ldrb	r3, [r3, #6]
 801993e:	2b05      	cmp	r3, #5
 8019940:	d803      	bhi.n	801994a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8019942:	6878      	ldr	r0, [r7, #4]
 8019944:	f7ff fe60 	bl	8019608 <dhcp_select>
}
 8019948:	e025      	b.n	8019996 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801994a:	6878      	ldr	r0, [r7, #4]
 801994c:	f000 fdce 	bl	801a4ec <dhcp_release_and_stop>
      dhcp_start(netif);
 8019950:	6878      	ldr	r0, [r7, #4]
 8019952:	f000 f905 	bl	8019b60 <dhcp_start>
}
 8019956:	e01e      	b.n	8019996 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	795b      	ldrb	r3, [r3, #5]
 801995c:	2b08      	cmp	r3, #8
 801995e:	d10b      	bne.n	8019978 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	799b      	ldrb	r3, [r3, #6]
 8019964:	2b01      	cmp	r3, #1
 8019966:	d803      	bhi.n	8019970 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8019968:	6878      	ldr	r0, [r7, #4]
 801996a:	f7ff fdf3 	bl	8019554 <dhcp_check>
}
 801996e:	e012      	b.n	8019996 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8019970:	6878      	ldr	r0, [r7, #4]
 8019972:	f000 faf3 	bl	8019f5c <dhcp_bind>
}
 8019976:	e00e      	b.n	8019996 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	795b      	ldrb	r3, [r3, #5]
 801997c:	2b03      	cmp	r3, #3
 801997e:	d10a      	bne.n	8019996 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	799b      	ldrb	r3, [r3, #6]
 8019984:	2b01      	cmp	r3, #1
 8019986:	d803      	bhi.n	8019990 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8019988:	6878      	ldr	r0, [r7, #4]
 801998a:	f000 fcf9 	bl	801a380 <dhcp_reboot>
}
 801998e:	e002      	b.n	8019996 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8019990:	6878      	ldr	r0, [r7, #4]
 8019992:	f000 fa41 	bl	8019e18 <dhcp_discover>
}
 8019996:	bf00      	nop
 8019998:	3710      	adds	r7, #16
 801999a:	46bd      	mov	sp, r7
 801999c:	bd80      	pop	{r7, pc}

0801999e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801999e:	b580      	push	{r7, lr}
 80199a0:	b084      	sub	sp, #16
 80199a2:	af00      	add	r7, sp, #0
 80199a4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	795b      	ldrb	r3, [r3, #5]
 80199b0:	2b01      	cmp	r3, #1
 80199b2:	d007      	beq.n	80199c4 <dhcp_t1_timeout+0x26>
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	795b      	ldrb	r3, [r3, #5]
 80199b8:	2b0a      	cmp	r3, #10
 80199ba:	d003      	beq.n	80199c4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80199c0:	2b05      	cmp	r3, #5
 80199c2:	d116      	bne.n	80199f2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80199c4:	6878      	ldr	r0, [r7, #4]
 80199c6:	f000 fba3 	bl	801a110 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	899b      	ldrh	r3, [r3, #12]
 80199ce:	461a      	mov	r2, r3
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	8a5b      	ldrh	r3, [r3, #18]
 80199d4:	1ad3      	subs	r3, r2, r3
 80199d6:	2b01      	cmp	r3, #1
 80199d8:	dd0b      	ble.n	80199f2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	899b      	ldrh	r3, [r3, #12]
 80199de:	461a      	mov	r2, r3
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	8a5b      	ldrh	r3, [r3, #18]
 80199e4:	1ad3      	subs	r3, r2, r3
 80199e6:	0fda      	lsrs	r2, r3, #31
 80199e8:	4413      	add	r3, r2
 80199ea:	105b      	asrs	r3, r3, #1
 80199ec:	b29a      	uxth	r2, r3
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80199f2:	bf00      	nop
 80199f4:	3710      	adds	r7, #16
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bd80      	pop	{r7, pc}

080199fa <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80199fa:	b580      	push	{r7, lr}
 80199fc:	b084      	sub	sp, #16
 80199fe:	af00      	add	r7, sp, #0
 8019a00:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a06:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	795b      	ldrb	r3, [r3, #5]
 8019a0c:	2b01      	cmp	r3, #1
 8019a0e:	d00b      	beq.n	8019a28 <dhcp_t2_timeout+0x2e>
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	795b      	ldrb	r3, [r3, #5]
 8019a14:	2b0a      	cmp	r3, #10
 8019a16:	d007      	beq.n	8019a28 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019a1c:	2b05      	cmp	r3, #5
 8019a1e:	d003      	beq.n	8019a28 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	795b      	ldrb	r3, [r3, #5]
 8019a24:	2b04      	cmp	r3, #4
 8019a26:	d116      	bne.n	8019a56 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8019a28:	6878      	ldr	r0, [r7, #4]
 8019a2a:	f000 fc0d 	bl	801a248 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	8a9b      	ldrh	r3, [r3, #20]
 8019a32:	461a      	mov	r2, r3
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	8a5b      	ldrh	r3, [r3, #18]
 8019a38:	1ad3      	subs	r3, r2, r3
 8019a3a:	2b01      	cmp	r3, #1
 8019a3c:	dd0b      	ble.n	8019a56 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	8a9b      	ldrh	r3, [r3, #20]
 8019a42:	461a      	mov	r2, r3
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	8a5b      	ldrh	r3, [r3, #18]
 8019a48:	1ad3      	subs	r3, r2, r3
 8019a4a:	0fda      	lsrs	r2, r3, #31
 8019a4c:	4413      	add	r3, r2
 8019a4e:	105b      	asrs	r3, r3, #1
 8019a50:	b29a      	uxth	r2, r3
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8019a56:	bf00      	nop
 8019a58:	3710      	adds	r7, #16
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}
	...

08019a60 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b086      	sub	sp, #24
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
 8019a68:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a6e:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019a70:	693b      	ldr	r3, [r7, #16]
 8019a72:	2200      	movs	r2, #0
 8019a74:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019a76:	693b      	ldr	r3, [r7, #16]
 8019a78:	2200      	movs	r2, #0
 8019a7a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8019a7c:	4b36      	ldr	r3, [pc, #216]	; (8019b58 <dhcp_handle_ack+0xf8>)
 8019a7e:	78db      	ldrb	r3, [r3, #3]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d003      	beq.n	8019a8c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8019a84:	4b35      	ldr	r3, [pc, #212]	; (8019b5c <dhcp_handle_ack+0xfc>)
 8019a86:	68da      	ldr	r2, [r3, #12]
 8019a88:	693b      	ldr	r3, [r7, #16]
 8019a8a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8019a8c:	4b32      	ldr	r3, [pc, #200]	; (8019b58 <dhcp_handle_ack+0xf8>)
 8019a8e:	791b      	ldrb	r3, [r3, #4]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d004      	beq.n	8019a9e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8019a94:	4b31      	ldr	r3, [pc, #196]	; (8019b5c <dhcp_handle_ack+0xfc>)
 8019a96:	691a      	ldr	r2, [r3, #16]
 8019a98:	693b      	ldr	r3, [r7, #16]
 8019a9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8019a9c:	e004      	b.n	8019aa8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8019a9e:	693b      	ldr	r3, [r7, #16]
 8019aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019aa2:	085a      	lsrs	r2, r3, #1
 8019aa4:	693b      	ldr	r3, [r7, #16]
 8019aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8019aa8:	4b2b      	ldr	r3, [pc, #172]	; (8019b58 <dhcp_handle_ack+0xf8>)
 8019aaa:	795b      	ldrb	r3, [r3, #5]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d004      	beq.n	8019aba <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8019ab0:	4b2a      	ldr	r3, [pc, #168]	; (8019b5c <dhcp_handle_ack+0xfc>)
 8019ab2:	695a      	ldr	r2, [r3, #20]
 8019ab4:	693b      	ldr	r3, [r7, #16]
 8019ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8019ab8:	e007      	b.n	8019aca <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8019aba:	693b      	ldr	r3, [r7, #16]
 8019abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019abe:	4613      	mov	r3, r2
 8019ac0:	00db      	lsls	r3, r3, #3
 8019ac2:	1a9b      	subs	r3, r3, r2
 8019ac4:	08da      	lsrs	r2, r3, #3
 8019ac6:	693b      	ldr	r3, [r7, #16]
 8019ac8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019aca:	683b      	ldr	r3, [r7, #0]
 8019acc:	691a      	ldr	r2, [r3, #16]
 8019ace:	693b      	ldr	r3, [r7, #16]
 8019ad0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8019ad2:	4b21      	ldr	r3, [pc, #132]	; (8019b58 <dhcp_handle_ack+0xf8>)
 8019ad4:	799b      	ldrb	r3, [r3, #6]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d00b      	beq.n	8019af2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8019ada:	4b20      	ldr	r3, [pc, #128]	; (8019b5c <dhcp_handle_ack+0xfc>)
 8019adc:	699b      	ldr	r3, [r3, #24]
 8019ade:	4618      	mov	r0, r3
 8019ae0:	f7f5 fbd1 	bl	800f286 <lwip_htonl>
 8019ae4:	4602      	mov	r2, r0
 8019ae6:	693b      	ldr	r3, [r7, #16]
 8019ae8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8019aea:	693b      	ldr	r3, [r7, #16]
 8019aec:	2201      	movs	r2, #1
 8019aee:	71da      	strb	r2, [r3, #7]
 8019af0:	e002      	b.n	8019af8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8019af2:	693b      	ldr	r3, [r7, #16]
 8019af4:	2200      	movs	r2, #0
 8019af6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8019af8:	4b17      	ldr	r3, [pc, #92]	; (8019b58 <dhcp_handle_ack+0xf8>)
 8019afa:	79db      	ldrb	r3, [r3, #7]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d007      	beq.n	8019b10 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8019b00:	4b16      	ldr	r3, [pc, #88]	; (8019b5c <dhcp_handle_ack+0xfc>)
 8019b02:	69db      	ldr	r3, [r3, #28]
 8019b04:	4618      	mov	r0, r3
 8019b06:	f7f5 fbbe 	bl	800f286 <lwip_htonl>
 8019b0a:	4602      	mov	r2, r0
 8019b0c:	693b      	ldr	r3, [r7, #16]
 8019b0e:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019b10:	2300      	movs	r3, #0
 8019b12:	75fb      	strb	r3, [r7, #23]
 8019b14:	e013      	b.n	8019b3e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8019b16:	7dfb      	ldrb	r3, [r7, #23]
 8019b18:	3308      	adds	r3, #8
 8019b1a:	4a10      	ldr	r2, [pc, #64]	; (8019b5c <dhcp_handle_ack+0xfc>)
 8019b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7f5 fbb0 	bl	800f286 <lwip_htonl>
 8019b26:	4603      	mov	r3, r0
 8019b28:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8019b2a:	f107 020c 	add.w	r2, r7, #12
 8019b2e:	7dfb      	ldrb	r3, [r7, #23]
 8019b30:	4611      	mov	r1, r2
 8019b32:	4618      	mov	r0, r3
 8019b34:	f7f5 fc02 	bl	800f33c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019b38:	7dfb      	ldrb	r3, [r7, #23]
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	75fb      	strb	r3, [r7, #23]
 8019b3e:	7dfb      	ldrb	r3, [r7, #23]
 8019b40:	2b01      	cmp	r3, #1
 8019b42:	d805      	bhi.n	8019b50 <dhcp_handle_ack+0xf0>
 8019b44:	7dfb      	ldrb	r3, [r7, #23]
 8019b46:	3308      	adds	r3, #8
 8019b48:	4a03      	ldr	r2, [pc, #12]	; (8019b58 <dhcp_handle_ack+0xf8>)
 8019b4a:	5cd3      	ldrb	r3, [r2, r3]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d1e2      	bne.n	8019b16 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8019b50:	bf00      	nop
 8019b52:	3718      	adds	r7, #24
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}
 8019b58:	2001b0e4 	.word	0x2001b0e4
 8019b5c:	2001b0f0 	.word	0x2001b0f0

08019b60 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b084      	sub	sp, #16
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d109      	bne.n	8019b82 <dhcp_start+0x22>
 8019b6e:	4b37      	ldr	r3, [pc, #220]	; (8019c4c <dhcp_start+0xec>)
 8019b70:	f240 22e7 	movw	r2, #743	; 0x2e7
 8019b74:	4936      	ldr	r1, [pc, #216]	; (8019c50 <dhcp_start+0xf0>)
 8019b76:	4837      	ldr	r0, [pc, #220]	; (8019c54 <dhcp_start+0xf4>)
 8019b78:	f004 ffd8 	bl	801eb2c <iprintf>
 8019b7c:	f06f 030f 	mvn.w	r3, #15
 8019b80:	e060      	b.n	8019c44 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019b88:	f003 0301 	and.w	r3, r3, #1
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d109      	bne.n	8019ba4 <dhcp_start+0x44>
 8019b90:	4b2e      	ldr	r3, [pc, #184]	; (8019c4c <dhcp_start+0xec>)
 8019b92:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8019b96:	4930      	ldr	r1, [pc, #192]	; (8019c58 <dhcp_start+0xf8>)
 8019b98:	482e      	ldr	r0, [pc, #184]	; (8019c54 <dhcp_start+0xf4>)
 8019b9a:	f004 ffc7 	bl	801eb2c <iprintf>
 8019b9e:	f06f 030f 	mvn.w	r3, #15
 8019ba2:	e04f      	b.n	8019c44 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ba8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019bae:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8019bb2:	d202      	bcs.n	8019bba <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8019bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8019bb8:	e044      	b.n	8019c44 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d10d      	bne.n	8019bdc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8019bc0:	2034      	movs	r0, #52	; 0x34
 8019bc2:	f7f6 fe55 	bl	8010870 <mem_malloc>
 8019bc6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d102      	bne.n	8019bd4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8019bce:	f04f 33ff 	mov.w	r3, #4294967295
 8019bd2:	e037      	b.n	8019c44 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	68fa      	ldr	r2, [r7, #12]
 8019bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8019bda:	e005      	b.n	8019be8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	791b      	ldrb	r3, [r3, #4]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d001      	beq.n	8019be8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019be4:	f7ff fc72 	bl	80194cc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8019be8:	2234      	movs	r2, #52	; 0x34
 8019bea:	2100      	movs	r1, #0
 8019bec:	68f8      	ldr	r0, [r7, #12]
 8019bee:	f004 fa81 	bl	801e0f4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8019bf2:	f7ff fc19 	bl	8019428 <dhcp_inc_pcb_refcount>
 8019bf6:	4603      	mov	r3, r0
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d002      	beq.n	8019c02 <dhcp_start+0xa2>
    return ERR_MEM;
 8019bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8019c00:	e020      	b.n	8019c44 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	2201      	movs	r2, #1
 8019c06:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019c0e:	f003 0304 	and.w	r3, r3, #4
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d105      	bne.n	8019c22 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8019c16:	2102      	movs	r1, #2
 8019c18:	68f8      	ldr	r0, [r7, #12]
 8019c1a:	f000 fd01 	bl	801a620 <dhcp_set_state>
    return ERR_OK;
 8019c1e:	2300      	movs	r3, #0
 8019c20:	e010      	b.n	8019c44 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8019c22:	6878      	ldr	r0, [r7, #4]
 8019c24:	f000 f8f8 	bl	8019e18 <dhcp_discover>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8019c2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d005      	beq.n	8019c40 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8019c34:	6878      	ldr	r0, [r7, #4]
 8019c36:	f000 fc59 	bl	801a4ec <dhcp_release_and_stop>
    return ERR_MEM;
 8019c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c3e:	e001      	b.n	8019c44 <dhcp_start+0xe4>
  }
  return result;
 8019c40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019c44:	4618      	mov	r0, r3
 8019c46:	3710      	adds	r7, #16
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	bd80      	pop	{r7, pc}
 8019c4c:	08025a48 	.word	0x08025a48
 8019c50:	08025b2c 	.word	0x08025b2c
 8019c54:	08025aa8 	.word	0x08025aa8
 8019c58:	08025b70 	.word	0x08025b70

08019c5c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8019c5c:	b580      	push	{r7, lr}
 8019c5e:	b084      	sub	sp, #16
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c68:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d025      	beq.n	8019cbc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	795b      	ldrb	r3, [r3, #5]
 8019c74:	2b0a      	cmp	r3, #10
 8019c76:	d008      	beq.n	8019c8a <dhcp_network_changed+0x2e>
 8019c78:	2b0a      	cmp	r3, #10
 8019c7a:	dc0d      	bgt.n	8019c98 <dhcp_network_changed+0x3c>
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d01f      	beq.n	8019cc0 <dhcp_network_changed+0x64>
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	db09      	blt.n	8019c98 <dhcp_network_changed+0x3c>
 8019c84:	3b03      	subs	r3, #3
 8019c86:	2b02      	cmp	r3, #2
 8019c88:	d806      	bhi.n	8019c98 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8019c90:	6878      	ldr	r0, [r7, #4]
 8019c92:	f000 fb75 	bl	801a380 <dhcp_reboot>
      break;
 8019c96:	e014      	b.n	8019cc2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	795b      	ldrb	r3, [r3, #5]
 8019c9c:	2b0c      	cmp	r3, #12
 8019c9e:	d906      	bls.n	8019cae <dhcp_network_changed+0x52>
 8019ca0:	4b09      	ldr	r3, [pc, #36]	; (8019cc8 <dhcp_network_changed+0x6c>)
 8019ca2:	f240 326d 	movw	r2, #877	; 0x36d
 8019ca6:	4909      	ldr	r1, [pc, #36]	; (8019ccc <dhcp_network_changed+0x70>)
 8019ca8:	4809      	ldr	r0, [pc, #36]	; (8019cd0 <dhcp_network_changed+0x74>)
 8019caa:	f004 ff3f 	bl	801eb2c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8019cb4:	6878      	ldr	r0, [r7, #4]
 8019cb6:	f000 f8af 	bl	8019e18 <dhcp_discover>
      break;
 8019cba:	e002      	b.n	8019cc2 <dhcp_network_changed+0x66>
    return;
 8019cbc:	bf00      	nop
 8019cbe:	e000      	b.n	8019cc2 <dhcp_network_changed+0x66>
      break;
 8019cc0:	bf00      	nop
  }
}
 8019cc2:	3710      	adds	r7, #16
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	bd80      	pop	{r7, pc}
 8019cc8:	08025a48 	.word	0x08025a48
 8019ccc:	08025b94 	.word	0x08025b94
 8019cd0:	08025aa8 	.word	0x08025aa8

08019cd4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b084      	sub	sp, #16
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
 8019cdc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d107      	bne.n	8019cf4 <dhcp_arp_reply+0x20>
 8019ce4:	4b0e      	ldr	r3, [pc, #56]	; (8019d20 <dhcp_arp_reply+0x4c>)
 8019ce6:	f240 328b 	movw	r2, #907	; 0x38b
 8019cea:	490e      	ldr	r1, [pc, #56]	; (8019d24 <dhcp_arp_reply+0x50>)
 8019cec:	480e      	ldr	r0, [pc, #56]	; (8019d28 <dhcp_arp_reply+0x54>)
 8019cee:	f004 ff1d 	bl	801eb2c <iprintf>
 8019cf2:	e012      	b.n	8019d1a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cf8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d00c      	beq.n	8019d1a <dhcp_arp_reply+0x46>
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	795b      	ldrb	r3, [r3, #5]
 8019d04:	2b08      	cmp	r3, #8
 8019d06:	d108      	bne.n	8019d1a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8019d08:	683b      	ldr	r3, [r7, #0]
 8019d0a:	681a      	ldr	r2, [r3, #0]
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	69db      	ldr	r3, [r3, #28]
 8019d10:	429a      	cmp	r2, r3
 8019d12:	d102      	bne.n	8019d1a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8019d14:	6878      	ldr	r0, [r7, #4]
 8019d16:	f000 f809 	bl	8019d2c <dhcp_decline>
    }
  }
}
 8019d1a:	3710      	adds	r7, #16
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}
 8019d20:	08025a48 	.word	0x08025a48
 8019d24:	08025b2c 	.word	0x08025b2c
 8019d28:	08025aa8 	.word	0x08025aa8

08019d2c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8019d2c:	b5b0      	push	{r4, r5, r7, lr}
 8019d2e:	b08a      	sub	sp, #40	; 0x28
 8019d30:	af02      	add	r7, sp, #8
 8019d32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d38:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019d3a:	210c      	movs	r1, #12
 8019d3c:	69b8      	ldr	r0, [r7, #24]
 8019d3e:	f000 fc6f 	bl	801a620 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8019d42:	f107 030c 	add.w	r3, r7, #12
 8019d46:	2204      	movs	r2, #4
 8019d48:	69b9      	ldr	r1, [r7, #24]
 8019d4a:	6878      	ldr	r0, [r7, #4]
 8019d4c:	f001 f932 	bl	801afb4 <dhcp_create_msg>
 8019d50:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019d52:	697b      	ldr	r3, [r7, #20]
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d035      	beq.n	8019dc4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019d58:	697b      	ldr	r3, [r7, #20]
 8019d5a:	685b      	ldr	r3, [r3, #4]
 8019d5c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019d5e:	89b8      	ldrh	r0, [r7, #12]
 8019d60:	693b      	ldr	r3, [r7, #16]
 8019d62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019d66:	2304      	movs	r3, #4
 8019d68:	2232      	movs	r2, #50	; 0x32
 8019d6a:	f000 fc73 	bl	801a654 <dhcp_option>
 8019d6e:	4603      	mov	r3, r0
 8019d70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019d72:	89bc      	ldrh	r4, [r7, #12]
 8019d74:	693b      	ldr	r3, [r7, #16]
 8019d76:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019d7a:	69bb      	ldr	r3, [r7, #24]
 8019d7c:	69db      	ldr	r3, [r3, #28]
 8019d7e:	4618      	mov	r0, r3
 8019d80:	f7f5 fa81 	bl	800f286 <lwip_htonl>
 8019d84:	4603      	mov	r3, r0
 8019d86:	461a      	mov	r2, r3
 8019d88:	4629      	mov	r1, r5
 8019d8a:	4620      	mov	r0, r4
 8019d8c:	f000 fcee 	bl	801a76c <dhcp_option_long>
 8019d90:	4603      	mov	r3, r0
 8019d92:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019d94:	89b8      	ldrh	r0, [r7, #12]
 8019d96:	693b      	ldr	r3, [r7, #16]
 8019d98:	33f0      	adds	r3, #240	; 0xf0
 8019d9a:	697a      	ldr	r2, [r7, #20]
 8019d9c:	4619      	mov	r1, r3
 8019d9e:	f001 f9df 	bl	801b160 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019da2:	4b19      	ldr	r3, [pc, #100]	; (8019e08 <dhcp_decline+0xdc>)
 8019da4:	6818      	ldr	r0, [r3, #0]
 8019da6:	4b19      	ldr	r3, [pc, #100]	; (8019e0c <dhcp_decline+0xe0>)
 8019da8:	9301      	str	r3, [sp, #4]
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	9300      	str	r3, [sp, #0]
 8019dae:	2343      	movs	r3, #67	; 0x43
 8019db0:	4a17      	ldr	r2, [pc, #92]	; (8019e10 <dhcp_decline+0xe4>)
 8019db2:	6979      	ldr	r1, [r7, #20]
 8019db4:	f7ff f87e 	bl	8018eb4 <udp_sendto_if_src>
 8019db8:	4603      	mov	r3, r0
 8019dba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019dbc:	6978      	ldr	r0, [r7, #20]
 8019dbe:	f7f7 fe0d 	bl	80119dc <pbuf_free>
 8019dc2:	e001      	b.n	8019dc8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019dc4:	23ff      	movs	r3, #255	; 0xff
 8019dc6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019dc8:	69bb      	ldr	r3, [r7, #24]
 8019dca:	799b      	ldrb	r3, [r3, #6]
 8019dcc:	2bff      	cmp	r3, #255	; 0xff
 8019dce:	d005      	beq.n	8019ddc <dhcp_decline+0xb0>
    dhcp->tries++;
 8019dd0:	69bb      	ldr	r3, [r7, #24]
 8019dd2:	799b      	ldrb	r3, [r3, #6]
 8019dd4:	3301      	adds	r3, #1
 8019dd6:	b2da      	uxtb	r2, r3
 8019dd8:	69bb      	ldr	r3, [r7, #24]
 8019dda:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8019ddc:	f242 7310 	movw	r3, #10000	; 0x2710
 8019de0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019de2:	89fb      	ldrh	r3, [r7, #14]
 8019de4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019de8:	4a0a      	ldr	r2, [pc, #40]	; (8019e14 <dhcp_decline+0xe8>)
 8019dea:	fb82 1203 	smull	r1, r2, r2, r3
 8019dee:	1152      	asrs	r2, r2, #5
 8019df0:	17db      	asrs	r3, r3, #31
 8019df2:	1ad3      	subs	r3, r2, r3
 8019df4:	b29a      	uxth	r2, r3
 8019df6:	69bb      	ldr	r3, [r7, #24]
 8019df8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019dfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019dfe:	4618      	mov	r0, r3
 8019e00:	3720      	adds	r7, #32
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bdb0      	pop	{r4, r5, r7, pc}
 8019e06:	bf00      	nop
 8019e08:	200143a0 	.word	0x200143a0
 8019e0c:	080267a0 	.word	0x080267a0
 8019e10:	080267a4 	.word	0x080267a4
 8019e14:	10624dd3 	.word	0x10624dd3

08019e18 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8019e18:	b580      	push	{r7, lr}
 8019e1a:	b08a      	sub	sp, #40	; 0x28
 8019e1c:	af02      	add	r7, sp, #8
 8019e1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e24:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8019e26:	2300      	movs	r3, #0
 8019e28:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019e2a:	69bb      	ldr	r3, [r7, #24]
 8019e2c:	2200      	movs	r2, #0
 8019e2e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8019e30:	2106      	movs	r1, #6
 8019e32:	69b8      	ldr	r0, [r7, #24]
 8019e34:	f000 fbf4 	bl	801a620 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8019e38:	f107 0308 	add.w	r3, r7, #8
 8019e3c:	2201      	movs	r2, #1
 8019e3e:	69b9      	ldr	r1, [r7, #24]
 8019e40:	6878      	ldr	r0, [r7, #4]
 8019e42:	f001 f8b7 	bl	801afb4 <dhcp_create_msg>
 8019e46:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8019e48:	693b      	ldr	r3, [r7, #16]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d04b      	beq.n	8019ee6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019e4e:	693b      	ldr	r3, [r7, #16]
 8019e50:	685b      	ldr	r3, [r3, #4]
 8019e52:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019e54:	8938      	ldrh	r0, [r7, #8]
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019e5c:	2302      	movs	r3, #2
 8019e5e:	2239      	movs	r2, #57	; 0x39
 8019e60:	f000 fbf8 	bl	801a654 <dhcp_option>
 8019e64:	4603      	mov	r3, r0
 8019e66:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019e68:	8938      	ldrh	r0, [r7, #8]
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019e74:	461a      	mov	r2, r3
 8019e76:	f000 fc47 	bl	801a708 <dhcp_option_short>
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019e7e:	8938      	ldrh	r0, [r7, #8]
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019e86:	2304      	movs	r3, #4
 8019e88:	2237      	movs	r2, #55	; 0x37
 8019e8a:	f000 fbe3 	bl	801a654 <dhcp_option>
 8019e8e:	4603      	mov	r3, r0
 8019e90:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019e92:	2300      	movs	r3, #0
 8019e94:	77fb      	strb	r3, [r7, #31]
 8019e96:	e00e      	b.n	8019eb6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019e98:	8938      	ldrh	r0, [r7, #8]
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019ea0:	7ffb      	ldrb	r3, [r7, #31]
 8019ea2:	4a29      	ldr	r2, [pc, #164]	; (8019f48 <dhcp_discover+0x130>)
 8019ea4:	5cd3      	ldrb	r3, [r2, r3]
 8019ea6:	461a      	mov	r2, r3
 8019ea8:	f000 fc08 	bl	801a6bc <dhcp_option_byte>
 8019eac:	4603      	mov	r3, r0
 8019eae:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019eb0:	7ffb      	ldrb	r3, [r7, #31]
 8019eb2:	3301      	adds	r3, #1
 8019eb4:	77fb      	strb	r3, [r7, #31]
 8019eb6:	7ffb      	ldrb	r3, [r7, #31]
 8019eb8:	2b03      	cmp	r3, #3
 8019eba:	d9ed      	bls.n	8019e98 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019ebc:	8938      	ldrh	r0, [r7, #8]
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	33f0      	adds	r3, #240	; 0xf0
 8019ec2:	693a      	ldr	r2, [r7, #16]
 8019ec4:	4619      	mov	r1, r3
 8019ec6:	f001 f94b 	bl	801b160 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019eca:	4b20      	ldr	r3, [pc, #128]	; (8019f4c <dhcp_discover+0x134>)
 8019ecc:	6818      	ldr	r0, [r3, #0]
 8019ece:	4b20      	ldr	r3, [pc, #128]	; (8019f50 <dhcp_discover+0x138>)
 8019ed0:	9301      	str	r3, [sp, #4]
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	9300      	str	r3, [sp, #0]
 8019ed6:	2343      	movs	r3, #67	; 0x43
 8019ed8:	4a1e      	ldr	r2, [pc, #120]	; (8019f54 <dhcp_discover+0x13c>)
 8019eda:	6939      	ldr	r1, [r7, #16]
 8019edc:	f7fe ffea 	bl	8018eb4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8019ee0:	6938      	ldr	r0, [r7, #16]
 8019ee2:	f7f7 fd7b 	bl	80119dc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8019ee6:	69bb      	ldr	r3, [r7, #24]
 8019ee8:	799b      	ldrb	r3, [r3, #6]
 8019eea:	2bff      	cmp	r3, #255	; 0xff
 8019eec:	d005      	beq.n	8019efa <dhcp_discover+0xe2>
    dhcp->tries++;
 8019eee:	69bb      	ldr	r3, [r7, #24]
 8019ef0:	799b      	ldrb	r3, [r3, #6]
 8019ef2:	3301      	adds	r3, #1
 8019ef4:	b2da      	uxtb	r2, r3
 8019ef6:	69bb      	ldr	r3, [r7, #24]
 8019ef8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019efa:	69bb      	ldr	r3, [r7, #24]
 8019efc:	799b      	ldrb	r3, [r3, #6]
 8019efe:	2b05      	cmp	r3, #5
 8019f00:	d80d      	bhi.n	8019f1e <dhcp_discover+0x106>
 8019f02:	69bb      	ldr	r3, [r7, #24]
 8019f04:	799b      	ldrb	r3, [r3, #6]
 8019f06:	461a      	mov	r2, r3
 8019f08:	2301      	movs	r3, #1
 8019f0a:	4093      	lsls	r3, r2
 8019f0c:	b29b      	uxth	r3, r3
 8019f0e:	461a      	mov	r2, r3
 8019f10:	0152      	lsls	r2, r2, #5
 8019f12:	1ad2      	subs	r2, r2, r3
 8019f14:	0092      	lsls	r2, r2, #2
 8019f16:	4413      	add	r3, r2
 8019f18:	00db      	lsls	r3, r3, #3
 8019f1a:	b29b      	uxth	r3, r3
 8019f1c:	e001      	b.n	8019f22 <dhcp_discover+0x10a>
 8019f1e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8019f22:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019f24:	897b      	ldrh	r3, [r7, #10]
 8019f26:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019f2a:	4a0b      	ldr	r2, [pc, #44]	; (8019f58 <dhcp_discover+0x140>)
 8019f2c:	fb82 1203 	smull	r1, r2, r2, r3
 8019f30:	1152      	asrs	r2, r2, #5
 8019f32:	17db      	asrs	r3, r3, #31
 8019f34:	1ad3      	subs	r3, r2, r3
 8019f36:	b29a      	uxth	r2, r3
 8019f38:	69bb      	ldr	r3, [r7, #24]
 8019f3a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019f3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f40:	4618      	mov	r0, r3
 8019f42:	3720      	adds	r7, #32
 8019f44:	46bd      	mov	sp, r7
 8019f46:	bd80      	pop	{r7, pc}
 8019f48:	20000060 	.word	0x20000060
 8019f4c:	200143a0 	.word	0x200143a0
 8019f50:	080267a0 	.word	0x080267a0
 8019f54:	080267a4 	.word	0x080267a4
 8019f58:	10624dd3 	.word	0x10624dd3

08019f5c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8019f5c:	b580      	push	{r7, lr}
 8019f5e:	b088      	sub	sp, #32
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d107      	bne.n	8019f7a <dhcp_bind+0x1e>
 8019f6a:	4b64      	ldr	r3, [pc, #400]	; (801a0fc <dhcp_bind+0x1a0>)
 8019f6c:	f240 4215 	movw	r2, #1045	; 0x415
 8019f70:	4963      	ldr	r1, [pc, #396]	; (801a100 <dhcp_bind+0x1a4>)
 8019f72:	4864      	ldr	r0, [pc, #400]	; (801a104 <dhcp_bind+0x1a8>)
 8019f74:	f004 fdda 	bl	801eb2c <iprintf>
 8019f78:	e0bc      	b.n	801a0f4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f7e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8019f80:	69fb      	ldr	r3, [r7, #28]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d107      	bne.n	8019f96 <dhcp_bind+0x3a>
 8019f86:	4b5d      	ldr	r3, [pc, #372]	; (801a0fc <dhcp_bind+0x1a0>)
 8019f88:	f240 4217 	movw	r2, #1047	; 0x417
 8019f8c:	495e      	ldr	r1, [pc, #376]	; (801a108 <dhcp_bind+0x1ac>)
 8019f8e:	485d      	ldr	r0, [pc, #372]	; (801a104 <dhcp_bind+0x1a8>)
 8019f90:	f004 fdcc 	bl	801eb2c <iprintf>
 8019f94:	e0ae      	b.n	801a0f4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8019f96:	69fb      	ldr	r3, [r7, #28]
 8019f98:	2200      	movs	r2, #0
 8019f9a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8019f9c:	69fb      	ldr	r3, [r7, #28]
 8019f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fa4:	d019      	beq.n	8019fda <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019fa6:	69fb      	ldr	r3, [r7, #28]
 8019fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019faa:	331e      	adds	r3, #30
 8019fac:	4a57      	ldr	r2, [pc, #348]	; (801a10c <dhcp_bind+0x1b0>)
 8019fae:	fba2 2303 	umull	r2, r3, r2, r3
 8019fb2:	095b      	lsrs	r3, r3, #5
 8019fb4:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8019fb6:	69bb      	ldr	r3, [r7, #24]
 8019fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019fbc:	d302      	bcc.n	8019fc4 <dhcp_bind+0x68>
      timeout = 0xffff;
 8019fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019fc2:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8019fc4:	69bb      	ldr	r3, [r7, #24]
 8019fc6:	b29a      	uxth	r2, r3
 8019fc8:	69fb      	ldr	r3, [r7, #28]
 8019fca:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8019fcc:	69fb      	ldr	r3, [r7, #28]
 8019fce:	8a9b      	ldrh	r3, [r3, #20]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d102      	bne.n	8019fda <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8019fd4:	69fb      	ldr	r3, [r7, #28]
 8019fd6:	2201      	movs	r2, #1
 8019fd8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019fda:	69fb      	ldr	r3, [r7, #28]
 8019fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fe2:	d01d      	beq.n	801a020 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019fe4:	69fb      	ldr	r3, [r7, #28]
 8019fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fe8:	331e      	adds	r3, #30
 8019fea:	4a48      	ldr	r2, [pc, #288]	; (801a10c <dhcp_bind+0x1b0>)
 8019fec:	fba2 2303 	umull	r2, r3, r2, r3
 8019ff0:	095b      	lsrs	r3, r3, #5
 8019ff2:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8019ff4:	69bb      	ldr	r3, [r7, #24]
 8019ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019ffa:	d302      	bcc.n	801a002 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a000:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801a002:	69bb      	ldr	r3, [r7, #24]
 801a004:	b29a      	uxth	r2, r3
 801a006:	69fb      	ldr	r3, [r7, #28]
 801a008:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801a00a:	69fb      	ldr	r3, [r7, #28]
 801a00c:	895b      	ldrh	r3, [r3, #10]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d102      	bne.n	801a018 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801a012:	69fb      	ldr	r3, [r7, #28]
 801a014:	2201      	movs	r2, #1
 801a016:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801a018:	69fb      	ldr	r3, [r7, #28]
 801a01a:	895a      	ldrh	r2, [r3, #10]
 801a01c:	69fb      	ldr	r3, [r7, #28]
 801a01e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801a020:	69fb      	ldr	r3, [r7, #28]
 801a022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a024:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a028:	d01d      	beq.n	801a066 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a02a:	69fb      	ldr	r3, [r7, #28]
 801a02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a02e:	331e      	adds	r3, #30
 801a030:	4a36      	ldr	r2, [pc, #216]	; (801a10c <dhcp_bind+0x1b0>)
 801a032:	fba2 2303 	umull	r2, r3, r2, r3
 801a036:	095b      	lsrs	r3, r3, #5
 801a038:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801a03a:	69bb      	ldr	r3, [r7, #24]
 801a03c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a040:	d302      	bcc.n	801a048 <dhcp_bind+0xec>
      timeout = 0xffff;
 801a042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a046:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801a048:	69bb      	ldr	r3, [r7, #24]
 801a04a:	b29a      	uxth	r2, r3
 801a04c:	69fb      	ldr	r3, [r7, #28]
 801a04e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801a050:	69fb      	ldr	r3, [r7, #28]
 801a052:	899b      	ldrh	r3, [r3, #12]
 801a054:	2b00      	cmp	r3, #0
 801a056:	d102      	bne.n	801a05e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801a058:	69fb      	ldr	r3, [r7, #28]
 801a05a:	2201      	movs	r2, #1
 801a05c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801a05e:	69fb      	ldr	r3, [r7, #28]
 801a060:	899a      	ldrh	r2, [r3, #12]
 801a062:	69fb      	ldr	r3, [r7, #28]
 801a064:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801a066:	69fb      	ldr	r3, [r7, #28]
 801a068:	895a      	ldrh	r2, [r3, #10]
 801a06a:	69fb      	ldr	r3, [r7, #28]
 801a06c:	899b      	ldrh	r3, [r3, #12]
 801a06e:	429a      	cmp	r2, r3
 801a070:	d306      	bcc.n	801a080 <dhcp_bind+0x124>
 801a072:	69fb      	ldr	r3, [r7, #28]
 801a074:	899b      	ldrh	r3, [r3, #12]
 801a076:	2b00      	cmp	r3, #0
 801a078:	d002      	beq.n	801a080 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801a07a:	69fb      	ldr	r3, [r7, #28]
 801a07c:	2200      	movs	r2, #0
 801a07e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801a080:	69fb      	ldr	r3, [r7, #28]
 801a082:	79db      	ldrb	r3, [r3, #7]
 801a084:	2b00      	cmp	r3, #0
 801a086:	d003      	beq.n	801a090 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801a088:	69fb      	ldr	r3, [r7, #28]
 801a08a:	6a1b      	ldr	r3, [r3, #32]
 801a08c:	613b      	str	r3, [r7, #16]
 801a08e:	e014      	b.n	801a0ba <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801a090:	69fb      	ldr	r3, [r7, #28]
 801a092:	331c      	adds	r3, #28
 801a094:	781b      	ldrb	r3, [r3, #0]
 801a096:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801a098:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	db02      	blt.n	801a0a6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801a0a0:	23ff      	movs	r3, #255	; 0xff
 801a0a2:	613b      	str	r3, [r7, #16]
 801a0a4:	e009      	b.n	801a0ba <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801a0a6:	7dfb      	ldrb	r3, [r7, #23]
 801a0a8:	2bbf      	cmp	r3, #191	; 0xbf
 801a0aa:	d903      	bls.n	801a0b4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801a0ac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a0b0:	613b      	str	r3, [r7, #16]
 801a0b2:	e002      	b.n	801a0ba <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801a0b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a0b8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801a0ba:	69fb      	ldr	r3, [r7, #28]
 801a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0be:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d108      	bne.n	801a0d8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801a0c6:	69fb      	ldr	r3, [r7, #28]
 801a0c8:	69da      	ldr	r2, [r3, #28]
 801a0ca:	693b      	ldr	r3, [r7, #16]
 801a0cc:	4013      	ands	r3, r2
 801a0ce:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a0d6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801a0d8:	210a      	movs	r1, #10
 801a0da:	69f8      	ldr	r0, [r7, #28]
 801a0dc:	f000 faa0 	bl	801a620 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801a0e0:	69fb      	ldr	r3, [r7, #28]
 801a0e2:	f103 011c 	add.w	r1, r3, #28
 801a0e6:	f107 030c 	add.w	r3, r7, #12
 801a0ea:	f107 0210 	add.w	r2, r7, #16
 801a0ee:	6878      	ldr	r0, [r7, #4]
 801a0f0:	f7f6 ff34 	bl	8010f5c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801a0f4:	3720      	adds	r7, #32
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	bd80      	pop	{r7, pc}
 801a0fa:	bf00      	nop
 801a0fc:	08025a48 	.word	0x08025a48
 801a100:	08025ba8 	.word	0x08025ba8
 801a104:	08025aa8 	.word	0x08025aa8
 801a108:	08025bc4 	.word	0x08025bc4
 801a10c:	88888889 	.word	0x88888889

0801a110 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b08a      	sub	sp, #40	; 0x28
 801a114:	af02      	add	r7, sp, #8
 801a116:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a11c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801a11e:	2105      	movs	r1, #5
 801a120:	69b8      	ldr	r0, [r7, #24]
 801a122:	f000 fa7d 	bl	801a620 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a126:	f107 030c 	add.w	r3, r7, #12
 801a12a:	2203      	movs	r2, #3
 801a12c:	69b9      	ldr	r1, [r7, #24]
 801a12e:	6878      	ldr	r0, [r7, #4]
 801a130:	f000 ff40 	bl	801afb4 <dhcp_create_msg>
 801a134:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a136:	697b      	ldr	r3, [r7, #20]
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d04e      	beq.n	801a1da <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a13c:	697b      	ldr	r3, [r7, #20]
 801a13e:	685b      	ldr	r3, [r3, #4]
 801a140:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a142:	89b8      	ldrh	r0, [r7, #12]
 801a144:	693b      	ldr	r3, [r7, #16]
 801a146:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a14a:	2302      	movs	r3, #2
 801a14c:	2239      	movs	r2, #57	; 0x39
 801a14e:	f000 fa81 	bl	801a654 <dhcp_option>
 801a152:	4603      	mov	r3, r0
 801a154:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a156:	89b8      	ldrh	r0, [r7, #12]
 801a158:	693b      	ldr	r3, [r7, #16]
 801a15a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a162:	461a      	mov	r2, r3
 801a164:	f000 fad0 	bl	801a708 <dhcp_option_short>
 801a168:	4603      	mov	r3, r0
 801a16a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a16c:	89b8      	ldrh	r0, [r7, #12]
 801a16e:	693b      	ldr	r3, [r7, #16]
 801a170:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a174:	2304      	movs	r3, #4
 801a176:	2237      	movs	r2, #55	; 0x37
 801a178:	f000 fa6c 	bl	801a654 <dhcp_option>
 801a17c:	4603      	mov	r3, r0
 801a17e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a180:	2300      	movs	r3, #0
 801a182:	77bb      	strb	r3, [r7, #30]
 801a184:	e00e      	b.n	801a1a4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a186:	89b8      	ldrh	r0, [r7, #12]
 801a188:	693b      	ldr	r3, [r7, #16]
 801a18a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a18e:	7fbb      	ldrb	r3, [r7, #30]
 801a190:	4a2a      	ldr	r2, [pc, #168]	; (801a23c <dhcp_renew+0x12c>)
 801a192:	5cd3      	ldrb	r3, [r2, r3]
 801a194:	461a      	mov	r2, r3
 801a196:	f000 fa91 	bl	801a6bc <dhcp_option_byte>
 801a19a:	4603      	mov	r3, r0
 801a19c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a19e:	7fbb      	ldrb	r3, [r7, #30]
 801a1a0:	3301      	adds	r3, #1
 801a1a2:	77bb      	strb	r3, [r7, #30]
 801a1a4:	7fbb      	ldrb	r3, [r7, #30]
 801a1a6:	2b03      	cmp	r3, #3
 801a1a8:	d9ed      	bls.n	801a186 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a1aa:	89b8      	ldrh	r0, [r7, #12]
 801a1ac:	693b      	ldr	r3, [r7, #16]
 801a1ae:	33f0      	adds	r3, #240	; 0xf0
 801a1b0:	697a      	ldr	r2, [r7, #20]
 801a1b2:	4619      	mov	r1, r3
 801a1b4:	f000 ffd4 	bl	801b160 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a1b8:	4b21      	ldr	r3, [pc, #132]	; (801a240 <dhcp_renew+0x130>)
 801a1ba:	6818      	ldr	r0, [r3, #0]
 801a1bc:	69bb      	ldr	r3, [r7, #24]
 801a1be:	f103 0218 	add.w	r2, r3, #24
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	9300      	str	r3, [sp, #0]
 801a1c6:	2343      	movs	r3, #67	; 0x43
 801a1c8:	6979      	ldr	r1, [r7, #20]
 801a1ca:	f7fe fdff 	bl	8018dcc <udp_sendto_if>
 801a1ce:	4603      	mov	r3, r0
 801a1d0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a1d2:	6978      	ldr	r0, [r7, #20]
 801a1d4:	f7f7 fc02 	bl	80119dc <pbuf_free>
 801a1d8:	e001      	b.n	801a1de <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a1da:	23ff      	movs	r3, #255	; 0xff
 801a1dc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a1de:	69bb      	ldr	r3, [r7, #24]
 801a1e0:	799b      	ldrb	r3, [r3, #6]
 801a1e2:	2bff      	cmp	r3, #255	; 0xff
 801a1e4:	d005      	beq.n	801a1f2 <dhcp_renew+0xe2>
    dhcp->tries++;
 801a1e6:	69bb      	ldr	r3, [r7, #24]
 801a1e8:	799b      	ldrb	r3, [r3, #6]
 801a1ea:	3301      	adds	r3, #1
 801a1ec:	b2da      	uxtb	r2, r3
 801a1ee:	69bb      	ldr	r3, [r7, #24]
 801a1f0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801a1f2:	69bb      	ldr	r3, [r7, #24]
 801a1f4:	799b      	ldrb	r3, [r3, #6]
 801a1f6:	2b09      	cmp	r3, #9
 801a1f8:	d80a      	bhi.n	801a210 <dhcp_renew+0x100>
 801a1fa:	69bb      	ldr	r3, [r7, #24]
 801a1fc:	799b      	ldrb	r3, [r3, #6]
 801a1fe:	b29b      	uxth	r3, r3
 801a200:	461a      	mov	r2, r3
 801a202:	0152      	lsls	r2, r2, #5
 801a204:	1ad2      	subs	r2, r2, r3
 801a206:	0092      	lsls	r2, r2, #2
 801a208:	4413      	add	r3, r2
 801a20a:	011b      	lsls	r3, r3, #4
 801a20c:	b29b      	uxth	r3, r3
 801a20e:	e001      	b.n	801a214 <dhcp_renew+0x104>
 801a210:	f644 6320 	movw	r3, #20000	; 0x4e20
 801a214:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a216:	89fb      	ldrh	r3, [r7, #14]
 801a218:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a21c:	4a09      	ldr	r2, [pc, #36]	; (801a244 <dhcp_renew+0x134>)
 801a21e:	fb82 1203 	smull	r1, r2, r2, r3
 801a222:	1152      	asrs	r2, r2, #5
 801a224:	17db      	asrs	r3, r3, #31
 801a226:	1ad3      	subs	r3, r2, r3
 801a228:	b29a      	uxth	r2, r3
 801a22a:	69bb      	ldr	r3, [r7, #24]
 801a22c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a22e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a232:	4618      	mov	r0, r3
 801a234:	3720      	adds	r7, #32
 801a236:	46bd      	mov	sp, r7
 801a238:	bd80      	pop	{r7, pc}
 801a23a:	bf00      	nop
 801a23c:	20000060 	.word	0x20000060
 801a240:	200143a0 	.word	0x200143a0
 801a244:	10624dd3 	.word	0x10624dd3

0801a248 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801a248:	b580      	push	{r7, lr}
 801a24a:	b08a      	sub	sp, #40	; 0x28
 801a24c:	af02      	add	r7, sp, #8
 801a24e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a254:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801a256:	2104      	movs	r1, #4
 801a258:	69b8      	ldr	r0, [r7, #24]
 801a25a:	f000 f9e1 	bl	801a620 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a25e:	f107 030c 	add.w	r3, r7, #12
 801a262:	2203      	movs	r2, #3
 801a264:	69b9      	ldr	r1, [r7, #24]
 801a266:	6878      	ldr	r0, [r7, #4]
 801a268:	f000 fea4 	bl	801afb4 <dhcp_create_msg>
 801a26c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a26e:	697b      	ldr	r3, [r7, #20]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d04c      	beq.n	801a30e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a274:	697b      	ldr	r3, [r7, #20]
 801a276:	685b      	ldr	r3, [r3, #4]
 801a278:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a27a:	89b8      	ldrh	r0, [r7, #12]
 801a27c:	693b      	ldr	r3, [r7, #16]
 801a27e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a282:	2302      	movs	r3, #2
 801a284:	2239      	movs	r2, #57	; 0x39
 801a286:	f000 f9e5 	bl	801a654 <dhcp_option>
 801a28a:	4603      	mov	r3, r0
 801a28c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a28e:	89b8      	ldrh	r0, [r7, #12]
 801a290:	693b      	ldr	r3, [r7, #16]
 801a292:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a29a:	461a      	mov	r2, r3
 801a29c:	f000 fa34 	bl	801a708 <dhcp_option_short>
 801a2a0:	4603      	mov	r3, r0
 801a2a2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a2a4:	89b8      	ldrh	r0, [r7, #12]
 801a2a6:	693b      	ldr	r3, [r7, #16]
 801a2a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a2ac:	2304      	movs	r3, #4
 801a2ae:	2237      	movs	r2, #55	; 0x37
 801a2b0:	f000 f9d0 	bl	801a654 <dhcp_option>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	77bb      	strb	r3, [r7, #30]
 801a2bc:	e00e      	b.n	801a2dc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a2be:	89b8      	ldrh	r0, [r7, #12]
 801a2c0:	693b      	ldr	r3, [r7, #16]
 801a2c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a2c6:	7fbb      	ldrb	r3, [r7, #30]
 801a2c8:	4a29      	ldr	r2, [pc, #164]	; (801a370 <dhcp_rebind+0x128>)
 801a2ca:	5cd3      	ldrb	r3, [r2, r3]
 801a2cc:	461a      	mov	r2, r3
 801a2ce:	f000 f9f5 	bl	801a6bc <dhcp_option_byte>
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a2d6:	7fbb      	ldrb	r3, [r7, #30]
 801a2d8:	3301      	adds	r3, #1
 801a2da:	77bb      	strb	r3, [r7, #30]
 801a2dc:	7fbb      	ldrb	r3, [r7, #30]
 801a2de:	2b03      	cmp	r3, #3
 801a2e0:	d9ed      	bls.n	801a2be <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a2e2:	89b8      	ldrh	r0, [r7, #12]
 801a2e4:	693b      	ldr	r3, [r7, #16]
 801a2e6:	33f0      	adds	r3, #240	; 0xf0
 801a2e8:	697a      	ldr	r2, [r7, #20]
 801a2ea:	4619      	mov	r1, r3
 801a2ec:	f000 ff38 	bl	801b160 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a2f0:	4b20      	ldr	r3, [pc, #128]	; (801a374 <dhcp_rebind+0x12c>)
 801a2f2:	6818      	ldr	r0, [r3, #0]
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	9300      	str	r3, [sp, #0]
 801a2f8:	2343      	movs	r3, #67	; 0x43
 801a2fa:	4a1f      	ldr	r2, [pc, #124]	; (801a378 <dhcp_rebind+0x130>)
 801a2fc:	6979      	ldr	r1, [r7, #20]
 801a2fe:	f7fe fd65 	bl	8018dcc <udp_sendto_if>
 801a302:	4603      	mov	r3, r0
 801a304:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a306:	6978      	ldr	r0, [r7, #20]
 801a308:	f7f7 fb68 	bl	80119dc <pbuf_free>
 801a30c:	e001      	b.n	801a312 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a30e:	23ff      	movs	r3, #255	; 0xff
 801a310:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a312:	69bb      	ldr	r3, [r7, #24]
 801a314:	799b      	ldrb	r3, [r3, #6]
 801a316:	2bff      	cmp	r3, #255	; 0xff
 801a318:	d005      	beq.n	801a326 <dhcp_rebind+0xde>
    dhcp->tries++;
 801a31a:	69bb      	ldr	r3, [r7, #24]
 801a31c:	799b      	ldrb	r3, [r3, #6]
 801a31e:	3301      	adds	r3, #1
 801a320:	b2da      	uxtb	r2, r3
 801a322:	69bb      	ldr	r3, [r7, #24]
 801a324:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801a326:	69bb      	ldr	r3, [r7, #24]
 801a328:	799b      	ldrb	r3, [r3, #6]
 801a32a:	2b09      	cmp	r3, #9
 801a32c:	d80a      	bhi.n	801a344 <dhcp_rebind+0xfc>
 801a32e:	69bb      	ldr	r3, [r7, #24]
 801a330:	799b      	ldrb	r3, [r3, #6]
 801a332:	b29b      	uxth	r3, r3
 801a334:	461a      	mov	r2, r3
 801a336:	0152      	lsls	r2, r2, #5
 801a338:	1ad2      	subs	r2, r2, r3
 801a33a:	0092      	lsls	r2, r2, #2
 801a33c:	4413      	add	r3, r2
 801a33e:	00db      	lsls	r3, r3, #3
 801a340:	b29b      	uxth	r3, r3
 801a342:	e001      	b.n	801a348 <dhcp_rebind+0x100>
 801a344:	f242 7310 	movw	r3, #10000	; 0x2710
 801a348:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a34a:	89fb      	ldrh	r3, [r7, #14]
 801a34c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a350:	4a0a      	ldr	r2, [pc, #40]	; (801a37c <dhcp_rebind+0x134>)
 801a352:	fb82 1203 	smull	r1, r2, r2, r3
 801a356:	1152      	asrs	r2, r2, #5
 801a358:	17db      	asrs	r3, r3, #31
 801a35a:	1ad3      	subs	r3, r2, r3
 801a35c:	b29a      	uxth	r2, r3
 801a35e:	69bb      	ldr	r3, [r7, #24]
 801a360:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a362:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a366:	4618      	mov	r0, r3
 801a368:	3720      	adds	r7, #32
 801a36a:	46bd      	mov	sp, r7
 801a36c:	bd80      	pop	{r7, pc}
 801a36e:	bf00      	nop
 801a370:	20000060 	.word	0x20000060
 801a374:	200143a0 	.word	0x200143a0
 801a378:	080267a4 	.word	0x080267a4
 801a37c:	10624dd3 	.word	0x10624dd3

0801a380 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801a380:	b5b0      	push	{r4, r5, r7, lr}
 801a382:	b08a      	sub	sp, #40	; 0x28
 801a384:	af02      	add	r7, sp, #8
 801a386:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a38c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801a38e:	2103      	movs	r1, #3
 801a390:	69b8      	ldr	r0, [r7, #24]
 801a392:	f000 f945 	bl	801a620 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a396:	f107 030c 	add.w	r3, r7, #12
 801a39a:	2203      	movs	r2, #3
 801a39c:	69b9      	ldr	r1, [r7, #24]
 801a39e:	6878      	ldr	r0, [r7, #4]
 801a3a0:	f000 fe08 	bl	801afb4 <dhcp_create_msg>
 801a3a4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a3a6:	697b      	ldr	r3, [r7, #20]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d066      	beq.n	801a47a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a3ac:	697b      	ldr	r3, [r7, #20]
 801a3ae:	685b      	ldr	r3, [r3, #4]
 801a3b0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a3b2:	89b8      	ldrh	r0, [r7, #12]
 801a3b4:	693b      	ldr	r3, [r7, #16]
 801a3b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a3ba:	2302      	movs	r3, #2
 801a3bc:	2239      	movs	r2, #57	; 0x39
 801a3be:	f000 f949 	bl	801a654 <dhcp_option>
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801a3c6:	89b8      	ldrh	r0, [r7, #12]
 801a3c8:	693b      	ldr	r3, [r7, #16]
 801a3ca:	33f0      	adds	r3, #240	; 0xf0
 801a3cc:	f44f 7210 	mov.w	r2, #576	; 0x240
 801a3d0:	4619      	mov	r1, r3
 801a3d2:	f000 f999 	bl	801a708 <dhcp_option_short>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a3da:	89b8      	ldrh	r0, [r7, #12]
 801a3dc:	693b      	ldr	r3, [r7, #16]
 801a3de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a3e2:	2304      	movs	r3, #4
 801a3e4:	2232      	movs	r2, #50	; 0x32
 801a3e6:	f000 f935 	bl	801a654 <dhcp_option>
 801a3ea:	4603      	mov	r3, r0
 801a3ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a3ee:	89bc      	ldrh	r4, [r7, #12]
 801a3f0:	693b      	ldr	r3, [r7, #16]
 801a3f2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a3f6:	69bb      	ldr	r3, [r7, #24]
 801a3f8:	69db      	ldr	r3, [r3, #28]
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	f7f4 ff43 	bl	800f286 <lwip_htonl>
 801a400:	4603      	mov	r3, r0
 801a402:	461a      	mov	r2, r3
 801a404:	4629      	mov	r1, r5
 801a406:	4620      	mov	r0, r4
 801a408:	f000 f9b0 	bl	801a76c <dhcp_option_long>
 801a40c:	4603      	mov	r3, r0
 801a40e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a410:	89b8      	ldrh	r0, [r7, #12]
 801a412:	693b      	ldr	r3, [r7, #16]
 801a414:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a418:	2304      	movs	r3, #4
 801a41a:	2237      	movs	r2, #55	; 0x37
 801a41c:	f000 f91a 	bl	801a654 <dhcp_option>
 801a420:	4603      	mov	r3, r0
 801a422:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a424:	2300      	movs	r3, #0
 801a426:	77bb      	strb	r3, [r7, #30]
 801a428:	e00e      	b.n	801a448 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a42a:	89b8      	ldrh	r0, [r7, #12]
 801a42c:	693b      	ldr	r3, [r7, #16]
 801a42e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a432:	7fbb      	ldrb	r3, [r7, #30]
 801a434:	4a29      	ldr	r2, [pc, #164]	; (801a4dc <dhcp_reboot+0x15c>)
 801a436:	5cd3      	ldrb	r3, [r2, r3]
 801a438:	461a      	mov	r2, r3
 801a43a:	f000 f93f 	bl	801a6bc <dhcp_option_byte>
 801a43e:	4603      	mov	r3, r0
 801a440:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a442:	7fbb      	ldrb	r3, [r7, #30]
 801a444:	3301      	adds	r3, #1
 801a446:	77bb      	strb	r3, [r7, #30]
 801a448:	7fbb      	ldrb	r3, [r7, #30]
 801a44a:	2b03      	cmp	r3, #3
 801a44c:	d9ed      	bls.n	801a42a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a44e:	89b8      	ldrh	r0, [r7, #12]
 801a450:	693b      	ldr	r3, [r7, #16]
 801a452:	33f0      	adds	r3, #240	; 0xf0
 801a454:	697a      	ldr	r2, [r7, #20]
 801a456:	4619      	mov	r1, r3
 801a458:	f000 fe82 	bl	801b160 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a45c:	4b20      	ldr	r3, [pc, #128]	; (801a4e0 <dhcp_reboot+0x160>)
 801a45e:	6818      	ldr	r0, [r3, #0]
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	9300      	str	r3, [sp, #0]
 801a464:	2343      	movs	r3, #67	; 0x43
 801a466:	4a1f      	ldr	r2, [pc, #124]	; (801a4e4 <dhcp_reboot+0x164>)
 801a468:	6979      	ldr	r1, [r7, #20]
 801a46a:	f7fe fcaf 	bl	8018dcc <udp_sendto_if>
 801a46e:	4603      	mov	r3, r0
 801a470:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a472:	6978      	ldr	r0, [r7, #20]
 801a474:	f7f7 fab2 	bl	80119dc <pbuf_free>
 801a478:	e001      	b.n	801a47e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a47a:	23ff      	movs	r3, #255	; 0xff
 801a47c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a47e:	69bb      	ldr	r3, [r7, #24]
 801a480:	799b      	ldrb	r3, [r3, #6]
 801a482:	2bff      	cmp	r3, #255	; 0xff
 801a484:	d005      	beq.n	801a492 <dhcp_reboot+0x112>
    dhcp->tries++;
 801a486:	69bb      	ldr	r3, [r7, #24]
 801a488:	799b      	ldrb	r3, [r3, #6]
 801a48a:	3301      	adds	r3, #1
 801a48c:	b2da      	uxtb	r2, r3
 801a48e:	69bb      	ldr	r3, [r7, #24]
 801a490:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801a492:	69bb      	ldr	r3, [r7, #24]
 801a494:	799b      	ldrb	r3, [r3, #6]
 801a496:	2b09      	cmp	r3, #9
 801a498:	d80a      	bhi.n	801a4b0 <dhcp_reboot+0x130>
 801a49a:	69bb      	ldr	r3, [r7, #24]
 801a49c:	799b      	ldrb	r3, [r3, #6]
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	461a      	mov	r2, r3
 801a4a2:	0152      	lsls	r2, r2, #5
 801a4a4:	1ad2      	subs	r2, r2, r3
 801a4a6:	0092      	lsls	r2, r2, #2
 801a4a8:	4413      	add	r3, r2
 801a4aa:	00db      	lsls	r3, r3, #3
 801a4ac:	b29b      	uxth	r3, r3
 801a4ae:	e001      	b.n	801a4b4 <dhcp_reboot+0x134>
 801a4b0:	f242 7310 	movw	r3, #10000	; 0x2710
 801a4b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a4b6:	89fb      	ldrh	r3, [r7, #14]
 801a4b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a4bc:	4a0a      	ldr	r2, [pc, #40]	; (801a4e8 <dhcp_reboot+0x168>)
 801a4be:	fb82 1203 	smull	r1, r2, r2, r3
 801a4c2:	1152      	asrs	r2, r2, #5
 801a4c4:	17db      	asrs	r3, r3, #31
 801a4c6:	1ad3      	subs	r3, r2, r3
 801a4c8:	b29a      	uxth	r2, r3
 801a4ca:	69bb      	ldr	r3, [r7, #24]
 801a4cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a4ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	3720      	adds	r7, #32
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	bdb0      	pop	{r4, r5, r7, pc}
 801a4da:	bf00      	nop
 801a4dc:	20000060 	.word	0x20000060
 801a4e0:	200143a0 	.word	0x200143a0
 801a4e4:	080267a4 	.word	0x080267a4
 801a4e8:	10624dd3 	.word	0x10624dd3

0801a4ec <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801a4ec:	b5b0      	push	{r4, r5, r7, lr}
 801a4ee:	b08a      	sub	sp, #40	; 0x28
 801a4f0:	af02      	add	r7, sp, #8
 801a4f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801a4fa:	69fb      	ldr	r3, [r7, #28]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	f000 8084 	beq.w	801a60a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801a502:	69fb      	ldr	r3, [r7, #28]
 801a504:	795b      	ldrb	r3, [r3, #5]
 801a506:	2b00      	cmp	r3, #0
 801a508:	f000 8081 	beq.w	801a60e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801a50c:	69fb      	ldr	r3, [r7, #28]
 801a50e:	699b      	ldr	r3, [r3, #24]
 801a510:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801a512:	69fb      	ldr	r3, [r7, #28]
 801a514:	2200      	movs	r2, #0
 801a516:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801a518:	69fb      	ldr	r3, [r7, #28]
 801a51a:	2200      	movs	r2, #0
 801a51c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a51e:	69fb      	ldr	r3, [r7, #28]
 801a520:	2200      	movs	r2, #0
 801a522:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a524:	69fb      	ldr	r3, [r7, #28]
 801a526:	2200      	movs	r2, #0
 801a528:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801a52a:	69fb      	ldr	r3, [r7, #28]
 801a52c:	2200      	movs	r2, #0
 801a52e:	631a      	str	r2, [r3, #48]	; 0x30
 801a530:	69fb      	ldr	r3, [r7, #28]
 801a532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a534:	69fb      	ldr	r3, [r7, #28]
 801a536:	62da      	str	r2, [r3, #44]	; 0x2c
 801a538:	69fb      	ldr	r3, [r7, #28]
 801a53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a53c:	69fb      	ldr	r3, [r7, #28]
 801a53e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801a540:	69fb      	ldr	r3, [r7, #28]
 801a542:	2200      	movs	r2, #0
 801a544:	829a      	strh	r2, [r3, #20]
 801a546:	69fb      	ldr	r3, [r7, #28]
 801a548:	8a9a      	ldrh	r2, [r3, #20]
 801a54a:	69fb      	ldr	r3, [r7, #28]
 801a54c:	825a      	strh	r2, [r3, #18]
 801a54e:	69fb      	ldr	r3, [r7, #28]
 801a550:	8a5a      	ldrh	r2, [r3, #18]
 801a552:	69fb      	ldr	r3, [r7, #28]
 801a554:	821a      	strh	r2, [r3, #16]
 801a556:	69fb      	ldr	r3, [r7, #28]
 801a558:	8a1a      	ldrh	r2, [r3, #16]
 801a55a:	69fb      	ldr	r3, [r7, #28]
 801a55c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801a55e:	6878      	ldr	r0, [r7, #4]
 801a560:	f000 fe2c 	bl	801b1bc <dhcp_supplied_address>
 801a564:	4603      	mov	r3, r0
 801a566:	2b00      	cmp	r3, #0
 801a568:	d03b      	beq.n	801a5e2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801a56a:	f107 030e 	add.w	r3, r7, #14
 801a56e:	2207      	movs	r2, #7
 801a570:	69f9      	ldr	r1, [r7, #28]
 801a572:	6878      	ldr	r0, [r7, #4]
 801a574:	f000 fd1e 	bl	801afb4 <dhcp_create_msg>
 801a578:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801a57a:	69bb      	ldr	r3, [r7, #24]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d030      	beq.n	801a5e2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a580:	69bb      	ldr	r3, [r7, #24]
 801a582:	685b      	ldr	r3, [r3, #4]
 801a584:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801a586:	89f8      	ldrh	r0, [r7, #14]
 801a588:	697b      	ldr	r3, [r7, #20]
 801a58a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a58e:	2304      	movs	r3, #4
 801a590:	2236      	movs	r2, #54	; 0x36
 801a592:	f000 f85f 	bl	801a654 <dhcp_option>
 801a596:	4603      	mov	r3, r0
 801a598:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801a59a:	89fc      	ldrh	r4, [r7, #14]
 801a59c:	697b      	ldr	r3, [r7, #20]
 801a59e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a5a2:	693b      	ldr	r3, [r7, #16]
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f7f4 fe6e 	bl	800f286 <lwip_htonl>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	461a      	mov	r2, r3
 801a5ae:	4629      	mov	r1, r5
 801a5b0:	4620      	mov	r0, r4
 801a5b2:	f000 f8db 	bl	801a76c <dhcp_option_long>
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a5ba:	89f8      	ldrh	r0, [r7, #14]
 801a5bc:	697b      	ldr	r3, [r7, #20]
 801a5be:	33f0      	adds	r3, #240	; 0xf0
 801a5c0:	69ba      	ldr	r2, [r7, #24]
 801a5c2:	4619      	mov	r1, r3
 801a5c4:	f000 fdcc 	bl	801b160 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a5c8:	4b13      	ldr	r3, [pc, #76]	; (801a618 <dhcp_release_and_stop+0x12c>)
 801a5ca:	6818      	ldr	r0, [r3, #0]
 801a5cc:	f107 0210 	add.w	r2, r7, #16
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	9300      	str	r3, [sp, #0]
 801a5d4:	2343      	movs	r3, #67	; 0x43
 801a5d6:	69b9      	ldr	r1, [r7, #24]
 801a5d8:	f7fe fbf8 	bl	8018dcc <udp_sendto_if>
      pbuf_free(p_out);
 801a5dc:	69b8      	ldr	r0, [r7, #24]
 801a5de:	f7f7 f9fd 	bl	80119dc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a5e2:	4b0e      	ldr	r3, [pc, #56]	; (801a61c <dhcp_release_and_stop+0x130>)
 801a5e4:	4a0d      	ldr	r2, [pc, #52]	; (801a61c <dhcp_release_and_stop+0x130>)
 801a5e6:	490d      	ldr	r1, [pc, #52]	; (801a61c <dhcp_release_and_stop+0x130>)
 801a5e8:	6878      	ldr	r0, [r7, #4]
 801a5ea:	f7f6 fcb7 	bl	8010f5c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801a5ee:	2100      	movs	r1, #0
 801a5f0:	69f8      	ldr	r0, [r7, #28]
 801a5f2:	f000 f815 	bl	801a620 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801a5f6:	69fb      	ldr	r3, [r7, #28]
 801a5f8:	791b      	ldrb	r3, [r3, #4]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d008      	beq.n	801a610 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a5fe:	f7fe ff65 	bl	80194cc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801a602:	69fb      	ldr	r3, [r7, #28]
 801a604:	2200      	movs	r2, #0
 801a606:	711a      	strb	r2, [r3, #4]
 801a608:	e002      	b.n	801a610 <dhcp_release_and_stop+0x124>
    return;
 801a60a:	bf00      	nop
 801a60c:	e000      	b.n	801a610 <dhcp_release_and_stop+0x124>
    return;
 801a60e:	bf00      	nop
  }
}
 801a610:	3720      	adds	r7, #32
 801a612:	46bd      	mov	sp, r7
 801a614:	bdb0      	pop	{r4, r5, r7, pc}
 801a616:	bf00      	nop
 801a618:	200143a0 	.word	0x200143a0
 801a61c:	080267a0 	.word	0x080267a0

0801a620 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801a620:	b480      	push	{r7}
 801a622:	b083      	sub	sp, #12
 801a624:	af00      	add	r7, sp, #0
 801a626:	6078      	str	r0, [r7, #4]
 801a628:	460b      	mov	r3, r1
 801a62a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	795b      	ldrb	r3, [r3, #5]
 801a630:	78fa      	ldrb	r2, [r7, #3]
 801a632:	429a      	cmp	r2, r3
 801a634:	d008      	beq.n	801a648 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	78fa      	ldrb	r2, [r7, #3]
 801a63a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2200      	movs	r2, #0
 801a640:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	2200      	movs	r2, #0
 801a646:	811a      	strh	r2, [r3, #8]
  }
}
 801a648:	bf00      	nop
 801a64a:	370c      	adds	r7, #12
 801a64c:	46bd      	mov	sp, r7
 801a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a652:	4770      	bx	lr

0801a654 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801a654:	b580      	push	{r7, lr}
 801a656:	b082      	sub	sp, #8
 801a658:	af00      	add	r7, sp, #0
 801a65a:	6039      	str	r1, [r7, #0]
 801a65c:	4611      	mov	r1, r2
 801a65e:	461a      	mov	r2, r3
 801a660:	4603      	mov	r3, r0
 801a662:	80fb      	strh	r3, [r7, #6]
 801a664:	460b      	mov	r3, r1
 801a666:	717b      	strb	r3, [r7, #5]
 801a668:	4613      	mov	r3, r2
 801a66a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801a66c:	88fa      	ldrh	r2, [r7, #6]
 801a66e:	793b      	ldrb	r3, [r7, #4]
 801a670:	4413      	add	r3, r2
 801a672:	3302      	adds	r3, #2
 801a674:	2b44      	cmp	r3, #68	; 0x44
 801a676:	d906      	bls.n	801a686 <dhcp_option+0x32>
 801a678:	4b0d      	ldr	r3, [pc, #52]	; (801a6b0 <dhcp_option+0x5c>)
 801a67a:	f240 529a 	movw	r2, #1434	; 0x59a
 801a67e:	490d      	ldr	r1, [pc, #52]	; (801a6b4 <dhcp_option+0x60>)
 801a680:	480d      	ldr	r0, [pc, #52]	; (801a6b8 <dhcp_option+0x64>)
 801a682:	f004 fa53 	bl	801eb2c <iprintf>
  options[options_out_len++] = option_type;
 801a686:	88fb      	ldrh	r3, [r7, #6]
 801a688:	1c5a      	adds	r2, r3, #1
 801a68a:	80fa      	strh	r2, [r7, #6]
 801a68c:	461a      	mov	r2, r3
 801a68e:	683b      	ldr	r3, [r7, #0]
 801a690:	4413      	add	r3, r2
 801a692:	797a      	ldrb	r2, [r7, #5]
 801a694:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801a696:	88fb      	ldrh	r3, [r7, #6]
 801a698:	1c5a      	adds	r2, r3, #1
 801a69a:	80fa      	strh	r2, [r7, #6]
 801a69c:	461a      	mov	r2, r3
 801a69e:	683b      	ldr	r3, [r7, #0]
 801a6a0:	4413      	add	r3, r2
 801a6a2:	793a      	ldrb	r2, [r7, #4]
 801a6a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a6a6:	88fb      	ldrh	r3, [r7, #6]
}
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	3708      	adds	r7, #8
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd80      	pop	{r7, pc}
 801a6b0:	08025a48 	.word	0x08025a48
 801a6b4:	08025bdc 	.word	0x08025bdc
 801a6b8:	08025aa8 	.word	0x08025aa8

0801a6bc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b082      	sub	sp, #8
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	6039      	str	r1, [r7, #0]
 801a6c6:	80fb      	strh	r3, [r7, #6]
 801a6c8:	4613      	mov	r3, r2
 801a6ca:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801a6cc:	88fb      	ldrh	r3, [r7, #6]
 801a6ce:	2b43      	cmp	r3, #67	; 0x43
 801a6d0:	d906      	bls.n	801a6e0 <dhcp_option_byte+0x24>
 801a6d2:	4b0a      	ldr	r3, [pc, #40]	; (801a6fc <dhcp_option_byte+0x40>)
 801a6d4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801a6d8:	4909      	ldr	r1, [pc, #36]	; (801a700 <dhcp_option_byte+0x44>)
 801a6da:	480a      	ldr	r0, [pc, #40]	; (801a704 <dhcp_option_byte+0x48>)
 801a6dc:	f004 fa26 	bl	801eb2c <iprintf>
  options[options_out_len++] = value;
 801a6e0:	88fb      	ldrh	r3, [r7, #6]
 801a6e2:	1c5a      	adds	r2, r3, #1
 801a6e4:	80fa      	strh	r2, [r7, #6]
 801a6e6:	461a      	mov	r2, r3
 801a6e8:	683b      	ldr	r3, [r7, #0]
 801a6ea:	4413      	add	r3, r2
 801a6ec:	797a      	ldrb	r2, [r7, #5]
 801a6ee:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a6f0:	88fb      	ldrh	r3, [r7, #6]
}
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	3708      	adds	r7, #8
 801a6f6:	46bd      	mov	sp, r7
 801a6f8:	bd80      	pop	{r7, pc}
 801a6fa:	bf00      	nop
 801a6fc:	08025a48 	.word	0x08025a48
 801a700:	08025c20 	.word	0x08025c20
 801a704:	08025aa8 	.word	0x08025aa8

0801a708 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b082      	sub	sp, #8
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	4603      	mov	r3, r0
 801a710:	6039      	str	r1, [r7, #0]
 801a712:	80fb      	strh	r3, [r7, #6]
 801a714:	4613      	mov	r3, r2
 801a716:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801a718:	88fb      	ldrh	r3, [r7, #6]
 801a71a:	3302      	adds	r3, #2
 801a71c:	2b44      	cmp	r3, #68	; 0x44
 801a71e:	d906      	bls.n	801a72e <dhcp_option_short+0x26>
 801a720:	4b0f      	ldr	r3, [pc, #60]	; (801a760 <dhcp_option_short+0x58>)
 801a722:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801a726:	490f      	ldr	r1, [pc, #60]	; (801a764 <dhcp_option_short+0x5c>)
 801a728:	480f      	ldr	r0, [pc, #60]	; (801a768 <dhcp_option_short+0x60>)
 801a72a:	f004 f9ff 	bl	801eb2c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801a72e:	88bb      	ldrh	r3, [r7, #4]
 801a730:	0a1b      	lsrs	r3, r3, #8
 801a732:	b29a      	uxth	r2, r3
 801a734:	88fb      	ldrh	r3, [r7, #6]
 801a736:	1c59      	adds	r1, r3, #1
 801a738:	80f9      	strh	r1, [r7, #6]
 801a73a:	4619      	mov	r1, r3
 801a73c:	683b      	ldr	r3, [r7, #0]
 801a73e:	440b      	add	r3, r1
 801a740:	b2d2      	uxtb	r2, r2
 801a742:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801a744:	88fb      	ldrh	r3, [r7, #6]
 801a746:	1c5a      	adds	r2, r3, #1
 801a748:	80fa      	strh	r2, [r7, #6]
 801a74a:	461a      	mov	r2, r3
 801a74c:	683b      	ldr	r3, [r7, #0]
 801a74e:	4413      	add	r3, r2
 801a750:	88ba      	ldrh	r2, [r7, #4]
 801a752:	b2d2      	uxtb	r2, r2
 801a754:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a756:	88fb      	ldrh	r3, [r7, #6]
}
 801a758:	4618      	mov	r0, r3
 801a75a:	3708      	adds	r7, #8
 801a75c:	46bd      	mov	sp, r7
 801a75e:	bd80      	pop	{r7, pc}
 801a760:	08025a48 	.word	0x08025a48
 801a764:	08025c58 	.word	0x08025c58
 801a768:	08025aa8 	.word	0x08025aa8

0801a76c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b084      	sub	sp, #16
 801a770:	af00      	add	r7, sp, #0
 801a772:	4603      	mov	r3, r0
 801a774:	60b9      	str	r1, [r7, #8]
 801a776:	607a      	str	r2, [r7, #4]
 801a778:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801a77a:	89fb      	ldrh	r3, [r7, #14]
 801a77c:	3304      	adds	r3, #4
 801a77e:	2b44      	cmp	r3, #68	; 0x44
 801a780:	d906      	bls.n	801a790 <dhcp_option_long+0x24>
 801a782:	4b19      	ldr	r3, [pc, #100]	; (801a7e8 <dhcp_option_long+0x7c>)
 801a784:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801a788:	4918      	ldr	r1, [pc, #96]	; (801a7ec <dhcp_option_long+0x80>)
 801a78a:	4819      	ldr	r0, [pc, #100]	; (801a7f0 <dhcp_option_long+0x84>)
 801a78c:	f004 f9ce 	bl	801eb2c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	0e1a      	lsrs	r2, r3, #24
 801a794:	89fb      	ldrh	r3, [r7, #14]
 801a796:	1c59      	adds	r1, r3, #1
 801a798:	81f9      	strh	r1, [r7, #14]
 801a79a:	4619      	mov	r1, r3
 801a79c:	68bb      	ldr	r3, [r7, #8]
 801a79e:	440b      	add	r3, r1
 801a7a0:	b2d2      	uxtb	r2, r2
 801a7a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	0c1a      	lsrs	r2, r3, #16
 801a7a8:	89fb      	ldrh	r3, [r7, #14]
 801a7aa:	1c59      	adds	r1, r3, #1
 801a7ac:	81f9      	strh	r1, [r7, #14]
 801a7ae:	4619      	mov	r1, r3
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	440b      	add	r3, r1
 801a7b4:	b2d2      	uxtb	r2, r2
 801a7b6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	0a1a      	lsrs	r2, r3, #8
 801a7bc:	89fb      	ldrh	r3, [r7, #14]
 801a7be:	1c59      	adds	r1, r3, #1
 801a7c0:	81f9      	strh	r1, [r7, #14]
 801a7c2:	4619      	mov	r1, r3
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	440b      	add	r3, r1
 801a7c8:	b2d2      	uxtb	r2, r2
 801a7ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801a7cc:	89fb      	ldrh	r3, [r7, #14]
 801a7ce:	1c5a      	adds	r2, r3, #1
 801a7d0:	81fa      	strh	r2, [r7, #14]
 801a7d2:	461a      	mov	r2, r3
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	4413      	add	r3, r2
 801a7d8:	687a      	ldr	r2, [r7, #4]
 801a7da:	b2d2      	uxtb	r2, r2
 801a7dc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a7de:	89fb      	ldrh	r3, [r7, #14]
}
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	3710      	adds	r7, #16
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	bd80      	pop	{r7, pc}
 801a7e8:	08025a48 	.word	0x08025a48
 801a7ec:	08025c94 	.word	0x08025c94
 801a7f0:	08025aa8 	.word	0x08025aa8

0801a7f4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b092      	sub	sp, #72	; 0x48
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	6078      	str	r0, [r7, #4]
 801a7fc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801a7fe:	2300      	movs	r3, #0
 801a800:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 801a802:	2300      	movs	r3, #0
 801a804:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801a806:	220a      	movs	r2, #10
 801a808:	2100      	movs	r1, #0
 801a80a:	48bd      	ldr	r0, [pc, #756]	; (801ab00 <dhcp_parse_reply+0x30c>)
 801a80c:	f003 fc72 	bl	801e0f4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	895b      	ldrh	r3, [r3, #10]
 801a814:	2b2b      	cmp	r3, #43	; 0x2b
 801a816:	d802      	bhi.n	801a81e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801a818:	f06f 0301 	mvn.w	r3, #1
 801a81c:	e2fb      	b.n	801ae16 <dhcp_parse_reply+0x622>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	685b      	ldr	r3, [r3, #4]
 801a822:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801a824:	23f0      	movs	r3, #240	; 0xf0
 801a826:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	891b      	ldrh	r3, [r3, #8]
 801a82c:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801a832:	e00c      	b.n	801a84e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801a834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a836:	895b      	ldrh	r3, [r3, #10]
 801a838:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801a83a:	1ad3      	subs	r3, r2, r3
 801a83c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801a83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a840:	895b      	ldrh	r3, [r3, #10]
 801a842:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801a844:	1ad3      	subs	r3, r2, r3
 801a846:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 801a848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801a84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a850:	2b00      	cmp	r3, #0
 801a852:	d004      	beq.n	801a85e <dhcp_parse_reply+0x6a>
 801a854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a856:	895b      	ldrh	r3, [r3, #10]
 801a858:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801a85a:	429a      	cmp	r2, r3
 801a85c:	d2ea      	bcs.n	801a834 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801a85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a860:	2b00      	cmp	r3, #0
 801a862:	d102      	bne.n	801a86a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801a864:	f06f 0301 	mvn.w	r3, #1
 801a868:	e2d5      	b.n	801ae16 <dhcp_parse_reply+0x622>
  }
  offset = options_idx;
 801a86a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a86c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 801a870:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a872:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 801a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a876:	685b      	ldr	r3, [r3, #4]
 801a878:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a87a:	e275      	b.n	801ad68 <dhcp_parse_reply+0x574>
    u8_t op = options[offset];
 801a87c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a882:	4413      	add	r3, r2
 801a884:	781b      	ldrb	r3, [r3, #0]
 801a886:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 801a888:	2300      	movs	r3, #0
 801a88a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 801a88e:	f04f 33ff 	mov.w	r3, #4294967295
 801a892:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 801a894:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a898:	3302      	adds	r3, #2
 801a89a:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 801a89c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a89e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a8a2:	429a      	cmp	r2, r3
 801a8a4:	d202      	bcs.n	801a8ac <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 801a8a6:	f06f 0301 	mvn.w	r3, #1
 801a8aa:	e2b4      	b.n	801ae16 <dhcp_parse_reply+0x622>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801a8ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a8b0:	3301      	adds	r3, #1
 801a8b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8b4:	8952      	ldrh	r2, [r2, #10]
 801a8b6:	4293      	cmp	r3, r2
 801a8b8:	da08      	bge.n	801a8cc <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 801a8ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a8be:	3301      	adds	r3, #1
 801a8c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a8c2:	4413      	add	r3, r2
 801a8c4:	781b      	ldrb	r3, [r3, #0]
 801a8c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a8ca:	e00b      	b.n	801a8e4 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801a8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d004      	beq.n	801a8de <dhcp_parse_reply+0xea>
 801a8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	685b      	ldr	r3, [r3, #4]
 801a8da:	781b      	ldrb	r3, [r3, #0]
 801a8dc:	e000      	b.n	801a8e0 <dhcp_parse_reply+0xec>
 801a8de:	2300      	movs	r3, #0
 801a8e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801a8e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a8e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 801a8ec:	7efb      	ldrb	r3, [r7, #27]
 801a8ee:	2b3b      	cmp	r3, #59	; 0x3b
 801a8f0:	f200 815a 	bhi.w	801aba8 <dhcp_parse_reply+0x3b4>
 801a8f4:	a201      	add	r2, pc, #4	; (adr r2, 801a8fc <dhcp_parse_reply+0x108>)
 801a8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a8fa:	bf00      	nop
 801a8fc:	0801a9ed 	.word	0x0801a9ed
 801a900:	0801a9fd 	.word	0x0801a9fd
 801a904:	0801aba9 	.word	0x0801aba9
 801a908:	0801aa1f 	.word	0x0801aa1f
 801a90c:	0801aba9 	.word	0x0801aba9
 801a910:	0801aba9 	.word	0x0801aba9
 801a914:	0801aa4b 	.word	0x0801aa4b
 801a918:	0801aba9 	.word	0x0801aba9
 801a91c:	0801aba9 	.word	0x0801aba9
 801a920:	0801aba9 	.word	0x0801aba9
 801a924:	0801aba9 	.word	0x0801aba9
 801a928:	0801aba9 	.word	0x0801aba9
 801a92c:	0801aba9 	.word	0x0801aba9
 801a930:	0801aba9 	.word	0x0801aba9
 801a934:	0801aba9 	.word	0x0801aba9
 801a938:	0801aba9 	.word	0x0801aba9
 801a93c:	0801aba9 	.word	0x0801aba9
 801a940:	0801aba9 	.word	0x0801aba9
 801a944:	0801aba9 	.word	0x0801aba9
 801a948:	0801aba9 	.word	0x0801aba9
 801a94c:	0801aba9 	.word	0x0801aba9
 801a950:	0801aba9 	.word	0x0801aba9
 801a954:	0801aba9 	.word	0x0801aba9
 801a958:	0801aba9 	.word	0x0801aba9
 801a95c:	0801aba9 	.word	0x0801aba9
 801a960:	0801aba9 	.word	0x0801aba9
 801a964:	0801aba9 	.word	0x0801aba9
 801a968:	0801aba9 	.word	0x0801aba9
 801a96c:	0801aba9 	.word	0x0801aba9
 801a970:	0801aba9 	.word	0x0801aba9
 801a974:	0801aba9 	.word	0x0801aba9
 801a978:	0801aba9 	.word	0x0801aba9
 801a97c:	0801aba9 	.word	0x0801aba9
 801a980:	0801aba9 	.word	0x0801aba9
 801a984:	0801aba9 	.word	0x0801aba9
 801a988:	0801aba9 	.word	0x0801aba9
 801a98c:	0801aba9 	.word	0x0801aba9
 801a990:	0801aba9 	.word	0x0801aba9
 801a994:	0801aba9 	.word	0x0801aba9
 801a998:	0801aba9 	.word	0x0801aba9
 801a99c:	0801aba9 	.word	0x0801aba9
 801a9a0:	0801aba9 	.word	0x0801aba9
 801a9a4:	0801aba9 	.word	0x0801aba9
 801a9a8:	0801aba9 	.word	0x0801aba9
 801a9ac:	0801aba9 	.word	0x0801aba9
 801a9b0:	0801aba9 	.word	0x0801aba9
 801a9b4:	0801aba9 	.word	0x0801aba9
 801a9b8:	0801aba9 	.word	0x0801aba9
 801a9bc:	0801aba9 	.word	0x0801aba9
 801a9c0:	0801aba9 	.word	0x0801aba9
 801a9c4:	0801aba9 	.word	0x0801aba9
 801a9c8:	0801aaa1 	.word	0x0801aaa1
 801a9cc:	0801aac3 	.word	0x0801aac3
 801a9d0:	0801ab21 	.word	0x0801ab21
 801a9d4:	0801ab43 	.word	0x0801ab43
 801a9d8:	0801aba9 	.word	0x0801aba9
 801a9dc:	0801aba9 	.word	0x0801aba9
 801a9e0:	0801aba9 	.word	0x0801aba9
 801a9e4:	0801ab65 	.word	0x0801ab65
 801a9e8:	0801ab87 	.word	0x0801ab87
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801a9f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801a9f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 801a9fa:	e0d9      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a9fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aa00:	2b04      	cmp	r3, #4
 801aa02:	d009      	beq.n	801aa18 <dhcp_parse_reply+0x224>
 801aa04:	4b3f      	ldr	r3, [pc, #252]	; (801ab04 <dhcp_parse_reply+0x310>)
 801aa06:	f240 622e 	movw	r2, #1582	; 0x62e
 801aa0a:	493f      	ldr	r1, [pc, #252]	; (801ab08 <dhcp_parse_reply+0x314>)
 801aa0c:	483f      	ldr	r0, [pc, #252]	; (801ab0c <dhcp_parse_reply+0x318>)
 801aa0e:	f004 f88d 	bl	801eb2c <iprintf>
 801aa12:	f06f 0305 	mvn.w	r3, #5
 801aa16:	e1fe      	b.n	801ae16 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801aa18:	2306      	movs	r3, #6
 801aa1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aa1c:	e0c8      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801aa1e:	2304      	movs	r3, #4
 801aa20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801aa24:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801aa28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801aa2c:	429a      	cmp	r2, r3
 801aa2e:	d209      	bcs.n	801aa44 <dhcp_parse_reply+0x250>
 801aa30:	4b34      	ldr	r3, [pc, #208]	; (801ab04 <dhcp_parse_reply+0x310>)
 801aa32:	f240 6233 	movw	r2, #1587	; 0x633
 801aa36:	4936      	ldr	r1, [pc, #216]	; (801ab10 <dhcp_parse_reply+0x31c>)
 801aa38:	4834      	ldr	r0, [pc, #208]	; (801ab0c <dhcp_parse_reply+0x318>)
 801aa3a:	f004 f877 	bl	801eb2c <iprintf>
 801aa3e:	f06f 0305 	mvn.w	r3, #5
 801aa42:	e1e8      	b.n	801ae16 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801aa44:	2307      	movs	r3, #7
 801aa46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aa48:	e0b2      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801aa4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aa4e:	f003 0303 	and.w	r3, r3, #3
 801aa52:	b2db      	uxtb	r3, r3
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d009      	beq.n	801aa6c <dhcp_parse_reply+0x278>
 801aa58:	4b2a      	ldr	r3, [pc, #168]	; (801ab04 <dhcp_parse_reply+0x310>)
 801aa5a:	f240 6239 	movw	r2, #1593	; 0x639
 801aa5e:	492d      	ldr	r1, [pc, #180]	; (801ab14 <dhcp_parse_reply+0x320>)
 801aa60:	482a      	ldr	r0, [pc, #168]	; (801ab0c <dhcp_parse_reply+0x318>)
 801aa62:	f004 f863 	bl	801eb2c <iprintf>
 801aa66:	f06f 0305 	mvn.w	r3, #5
 801aa6a:	e1d4      	b.n	801ae16 <dhcp_parse_reply+0x622>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801aa6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aa70:	2b08      	cmp	r3, #8
 801aa72:	bf28      	it	cs
 801aa74:	2308      	movcs	r3, #8
 801aa76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801aa7a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801aa7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801aa82:	429a      	cmp	r2, r3
 801aa84:	d209      	bcs.n	801aa9a <dhcp_parse_reply+0x2a6>
 801aa86:	4b1f      	ldr	r3, [pc, #124]	; (801ab04 <dhcp_parse_reply+0x310>)
 801aa88:	f240 623c 	movw	r2, #1596	; 0x63c
 801aa8c:	4920      	ldr	r1, [pc, #128]	; (801ab10 <dhcp_parse_reply+0x31c>)
 801aa8e:	481f      	ldr	r0, [pc, #124]	; (801ab0c <dhcp_parse_reply+0x318>)
 801aa90:	f004 f84c 	bl	801eb2c <iprintf>
 801aa94:	f06f 0305 	mvn.w	r3, #5
 801aa98:	e1bd      	b.n	801ae16 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801aa9a:	2308      	movs	r3, #8
 801aa9c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aa9e:	e087      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801aaa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aaa4:	2b04      	cmp	r3, #4
 801aaa6:	d009      	beq.n	801aabc <dhcp_parse_reply+0x2c8>
 801aaa8:	4b16      	ldr	r3, [pc, #88]	; (801ab04 <dhcp_parse_reply+0x310>)
 801aaaa:	f240 6241 	movw	r2, #1601	; 0x641
 801aaae:	4916      	ldr	r1, [pc, #88]	; (801ab08 <dhcp_parse_reply+0x314>)
 801aab0:	4816      	ldr	r0, [pc, #88]	; (801ab0c <dhcp_parse_reply+0x318>)
 801aab2:	f004 f83b 	bl	801eb2c <iprintf>
 801aab6:	f06f 0305 	mvn.w	r3, #5
 801aaba:	e1ac      	b.n	801ae16 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801aabc:	2303      	movs	r3, #3
 801aabe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aac0:	e076      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801aac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801aac6:	2b01      	cmp	r3, #1
 801aac8:	d009      	beq.n	801aade <dhcp_parse_reply+0x2ea>
 801aaca:	4b0e      	ldr	r3, [pc, #56]	; (801ab04 <dhcp_parse_reply+0x310>)
 801aacc:	f240 624f 	movw	r2, #1615	; 0x64f
 801aad0:	4911      	ldr	r1, [pc, #68]	; (801ab18 <dhcp_parse_reply+0x324>)
 801aad2:	480e      	ldr	r0, [pc, #56]	; (801ab0c <dhcp_parse_reply+0x318>)
 801aad4:	f004 f82a 	bl	801eb2c <iprintf>
 801aad8:	f06f 0305 	mvn.w	r3, #5
 801aadc:	e19b      	b.n	801ae16 <dhcp_parse_reply+0x622>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801aade:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aae0:	2bf0      	cmp	r3, #240	; 0xf0
 801aae2:	d009      	beq.n	801aaf8 <dhcp_parse_reply+0x304>
 801aae4:	4b07      	ldr	r3, [pc, #28]	; (801ab04 <dhcp_parse_reply+0x310>)
 801aae6:	f240 6251 	movw	r2, #1617	; 0x651
 801aaea:	490c      	ldr	r1, [pc, #48]	; (801ab1c <dhcp_parse_reply+0x328>)
 801aaec:	4807      	ldr	r0, [pc, #28]	; (801ab0c <dhcp_parse_reply+0x318>)
 801aaee:	f004 f81d 	bl	801eb2c <iprintf>
 801aaf2:	f06f 0305 	mvn.w	r3, #5
 801aaf6:	e18e      	b.n	801ae16 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801aaf8:	2300      	movs	r3, #0
 801aafa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aafc:	e058      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
 801aafe:	bf00      	nop
 801ab00:	2001b0e4 	.word	0x2001b0e4
 801ab04:	08025a48 	.word	0x08025a48
 801ab08:	08025cd0 	.word	0x08025cd0
 801ab0c:	08025aa8 	.word	0x08025aa8
 801ab10:	08025cdc 	.word	0x08025cdc
 801ab14:	08025cf0 	.word	0x08025cf0
 801ab18:	08025d00 	.word	0x08025d00
 801ab1c:	08025d0c 	.word	0x08025d0c
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ab20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ab24:	2b01      	cmp	r3, #1
 801ab26:	d009      	beq.n	801ab3c <dhcp_parse_reply+0x348>
 801ab28:	4bab      	ldr	r3, [pc, #684]	; (801add8 <dhcp_parse_reply+0x5e4>)
 801ab2a:	f240 6255 	movw	r2, #1621	; 0x655
 801ab2e:	49ab      	ldr	r1, [pc, #684]	; (801addc <dhcp_parse_reply+0x5e8>)
 801ab30:	48ab      	ldr	r0, [pc, #684]	; (801ade0 <dhcp_parse_reply+0x5ec>)
 801ab32:	f003 fffb 	bl	801eb2c <iprintf>
 801ab36:	f06f 0305 	mvn.w	r3, #5
 801ab3a:	e16c      	b.n	801ae16 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801ab3c:	2301      	movs	r3, #1
 801ab3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ab40:	e036      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ab42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ab46:	2b04      	cmp	r3, #4
 801ab48:	d009      	beq.n	801ab5e <dhcp_parse_reply+0x36a>
 801ab4a:	4ba3      	ldr	r3, [pc, #652]	; (801add8 <dhcp_parse_reply+0x5e4>)
 801ab4c:	f240 6259 	movw	r2, #1625	; 0x659
 801ab50:	49a4      	ldr	r1, [pc, #656]	; (801ade4 <dhcp_parse_reply+0x5f0>)
 801ab52:	48a3      	ldr	r0, [pc, #652]	; (801ade0 <dhcp_parse_reply+0x5ec>)
 801ab54:	f003 ffea 	bl	801eb2c <iprintf>
 801ab58:	f06f 0305 	mvn.w	r3, #5
 801ab5c:	e15b      	b.n	801ae16 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801ab5e:	2302      	movs	r3, #2
 801ab60:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ab62:	e025      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ab64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ab68:	2b04      	cmp	r3, #4
 801ab6a:	d009      	beq.n	801ab80 <dhcp_parse_reply+0x38c>
 801ab6c:	4b9a      	ldr	r3, [pc, #616]	; (801add8 <dhcp_parse_reply+0x5e4>)
 801ab6e:	f240 625d 	movw	r2, #1629	; 0x65d
 801ab72:	499c      	ldr	r1, [pc, #624]	; (801ade4 <dhcp_parse_reply+0x5f0>)
 801ab74:	489a      	ldr	r0, [pc, #616]	; (801ade0 <dhcp_parse_reply+0x5ec>)
 801ab76:	f003 ffd9 	bl	801eb2c <iprintf>
 801ab7a:	f06f 0305 	mvn.w	r3, #5
 801ab7e:	e14a      	b.n	801ae16 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_T1;
 801ab80:	2304      	movs	r3, #4
 801ab82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ab84:	e014      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ab86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ab8a:	2b04      	cmp	r3, #4
 801ab8c:	d009      	beq.n	801aba2 <dhcp_parse_reply+0x3ae>
 801ab8e:	4b92      	ldr	r3, [pc, #584]	; (801add8 <dhcp_parse_reply+0x5e4>)
 801ab90:	f240 6261 	movw	r2, #1633	; 0x661
 801ab94:	4993      	ldr	r1, [pc, #588]	; (801ade4 <dhcp_parse_reply+0x5f0>)
 801ab96:	4892      	ldr	r0, [pc, #584]	; (801ade0 <dhcp_parse_reply+0x5ec>)
 801ab98:	f003 ffc8 	bl	801eb2c <iprintf>
 801ab9c:	f06f 0305 	mvn.w	r3, #5
 801aba0:	e139      	b.n	801ae16 <dhcp_parse_reply+0x622>
        decode_idx = DHCP_OPTION_IDX_T2;
 801aba2:	2305      	movs	r3, #5
 801aba4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801aba6:	e003      	b.n	801abb0 <dhcp_parse_reply+0x3bc>
      default:
        decode_len = 0;
 801aba8:	2300      	movs	r3, #0
 801abaa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801abae:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801abb0:	7efb      	ldrb	r3, [r7, #27]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d105      	bne.n	801abc2 <dhcp_parse_reply+0x3ce>
      offset++;
 801abb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801abba:	3301      	adds	r3, #1
 801abbc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801abc0:	e0a4      	b.n	801ad0c <dhcp_parse_reply+0x518>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801abc2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801abc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801abca:	4413      	add	r3, r2
 801abcc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801abd0:	4293      	cmp	r3, r2
 801abd2:	dd02      	ble.n	801abda <dhcp_parse_reply+0x3e6>
        /* overflow */
        return ERR_BUF;
 801abd4:	f06f 0301 	mvn.w	r3, #1
 801abd8:	e11d      	b.n	801ae16 <dhcp_parse_reply+0x622>
      }
      offset = (u16_t)(offset + len + 2);
 801abda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801abde:	b29a      	uxth	r2, r3
 801abe0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801abe4:	4413      	add	r3, r2
 801abe6:	b29b      	uxth	r3, r3
 801abe8:	3302      	adds	r3, #2
 801abea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 801abee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	f000 808a 	beq.w	801ad0c <dhcp_parse_reply+0x518>
        u32_t value = 0;
 801abf8:	2300      	movs	r3, #0
 801abfa:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	db02      	blt.n	801ac08 <dhcp_parse_reply+0x414>
 801ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac04:	2b09      	cmp	r3, #9
 801ac06:	dd06      	ble.n	801ac16 <dhcp_parse_reply+0x422>
 801ac08:	4b73      	ldr	r3, [pc, #460]	; (801add8 <dhcp_parse_reply+0x5e4>)
 801ac0a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801ac0e:	4976      	ldr	r1, [pc, #472]	; (801ade8 <dhcp_parse_reply+0x5f4>)
 801ac10:	4873      	ldr	r0, [pc, #460]	; (801ade0 <dhcp_parse_reply+0x5ec>)
 801ac12:	f003 ff8b 	bl	801eb2c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801ac16:	4a75      	ldr	r2, [pc, #468]	; (801adec <dhcp_parse_reply+0x5f8>)
 801ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac1a:	4413      	add	r3, r2
 801ac1c:	781b      	ldrb	r3, [r3, #0]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d174      	bne.n	801ad0c <dhcp_parse_reply+0x518>
          copy_len = LWIP_MIN(decode_len, 4);
 801ac22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ac26:	2b04      	cmp	r3, #4
 801ac28:	bf28      	it	cs
 801ac2a:	2304      	movcs	r3, #4
 801ac2c:	b2db      	uxtb	r3, r3
 801ac2e:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801ac30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ac32:	8b3a      	ldrh	r2, [r7, #24]
 801ac34:	f107 010c 	add.w	r1, r7, #12
 801ac38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ac3a:	f7f7 f8d5 	bl	8011de8 <pbuf_copy_partial>
 801ac3e:	4603      	mov	r3, r0
 801ac40:	461a      	mov	r2, r3
 801ac42:	8b3b      	ldrh	r3, [r7, #24]
 801ac44:	4293      	cmp	r3, r2
 801ac46:	d002      	beq.n	801ac4e <dhcp_parse_reply+0x45a>
            return ERR_BUF;
 801ac48:	f06f 0301 	mvn.w	r3, #1
 801ac4c:	e0e3      	b.n	801ae16 <dhcp_parse_reply+0x622>
          }
          if (decode_len > 4) {
 801ac4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ac52:	2b04      	cmp	r3, #4
 801ac54:	d933      	bls.n	801acbe <dhcp_parse_reply+0x4ca>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801ac56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ac5a:	f003 0303 	and.w	r3, r3, #3
 801ac5e:	b2db      	uxtb	r3, r3
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d009      	beq.n	801ac78 <dhcp_parse_reply+0x484>
 801ac64:	4b5c      	ldr	r3, [pc, #368]	; (801add8 <dhcp_parse_reply+0x5e4>)
 801ac66:	f240 6281 	movw	r2, #1665	; 0x681
 801ac6a:	4961      	ldr	r1, [pc, #388]	; (801adf0 <dhcp_parse_reply+0x5fc>)
 801ac6c:	485c      	ldr	r0, [pc, #368]	; (801ade0 <dhcp_parse_reply+0x5ec>)
 801ac6e:	f003 ff5d 	bl	801eb2c <iprintf>
 801ac72:	f06f 0305 	mvn.w	r3, #5
 801ac76:	e0ce      	b.n	801ae16 <dhcp_parse_reply+0x622>
            dhcp_got_option(dhcp, decode_idx);
 801ac78:	4a5c      	ldr	r2, [pc, #368]	; (801adec <dhcp_parse_reply+0x5f8>)
 801ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac7c:	4413      	add	r3, r2
 801ac7e:	2201      	movs	r2, #1
 801ac80:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	4618      	mov	r0, r3
 801ac86:	f7f4 fafe 	bl	800f286 <lwip_htonl>
 801ac8a:	4602      	mov	r2, r0
 801ac8c:	4959      	ldr	r1, [pc, #356]	; (801adf4 <dhcp_parse_reply+0x600>)
 801ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801ac94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ac98:	3b04      	subs	r3, #4
 801ac9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 801ac9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801aca0:	3304      	adds	r3, #4
 801aca2:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801aca4:	8afa      	ldrh	r2, [r7, #22]
 801aca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801aca8:	429a      	cmp	r2, r3
 801acaa:	d202      	bcs.n	801acb2 <dhcp_parse_reply+0x4be>
              /* overflow */
              return ERR_BUF;
 801acac:	f06f 0301 	mvn.w	r3, #1
 801acb0:	e0b1      	b.n	801ae16 <dhcp_parse_reply+0x622>
            }
            val_offset = next_val_offset;
 801acb2:	8afb      	ldrh	r3, [r7, #22]
 801acb4:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 801acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb8:	3301      	adds	r3, #1
 801acba:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 801acbc:	e79e      	b.n	801abfc <dhcp_parse_reply+0x408>
          } else if (decode_len == 4) {
 801acbe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801acc2:	2b04      	cmp	r3, #4
 801acc4:	d106      	bne.n	801acd4 <dhcp_parse_reply+0x4e0>
            value = lwip_ntohl(value);
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	4618      	mov	r0, r3
 801acca:	f7f4 fadc 	bl	800f286 <lwip_htonl>
 801acce:	4603      	mov	r3, r0
 801acd0:	60fb      	str	r3, [r7, #12]
 801acd2:	e011      	b.n	801acf8 <dhcp_parse_reply+0x504>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801acd4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801acd8:	2b01      	cmp	r3, #1
 801acda:	d009      	beq.n	801acf0 <dhcp_parse_reply+0x4fc>
 801acdc:	4b3e      	ldr	r3, [pc, #248]	; (801add8 <dhcp_parse_reply+0x5e4>)
 801acde:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801ace2:	4945      	ldr	r1, [pc, #276]	; (801adf8 <dhcp_parse_reply+0x604>)
 801ace4:	483e      	ldr	r0, [pc, #248]	; (801ade0 <dhcp_parse_reply+0x5ec>)
 801ace6:	f003 ff21 	bl	801eb2c <iprintf>
 801acea:	f06f 0305 	mvn.w	r3, #5
 801acee:	e092      	b.n	801ae16 <dhcp_parse_reply+0x622>
            value = ((u8_t *)&value)[0];
 801acf0:	f107 030c 	add.w	r3, r7, #12
 801acf4:	781b      	ldrb	r3, [r3, #0]
 801acf6:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 801acf8:	4a3c      	ldr	r2, [pc, #240]	; (801adec <dhcp_parse_reply+0x5f8>)
 801acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acfc:	4413      	add	r3, r2
 801acfe:	2201      	movs	r2, #1
 801ad00:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801ad02:	68fa      	ldr	r2, [r7, #12]
 801ad04:	493b      	ldr	r1, [pc, #236]	; (801adf4 <dhcp_parse_reply+0x600>)
 801ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad0e:	895b      	ldrh	r3, [r3, #10]
 801ad10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ad14:	429a      	cmp	r2, r3
 801ad16:	d327      	bcc.n	801ad68 <dhcp_parse_reply+0x574>
      offset = (u16_t)(offset - q->len);
 801ad18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad1a:	895b      	ldrh	r3, [r3, #10]
 801ad1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ad20:	1ad3      	subs	r3, r2, r3
 801ad22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 801ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad28:	895b      	ldrh	r3, [r3, #10]
 801ad2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ad2c:	1ad3      	subs	r3, r2, r3
 801ad2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 801ad30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ad34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ad36:	429a      	cmp	r2, r3
 801ad38:	d213      	bcs.n	801ad62 <dhcp_parse_reply+0x56e>
        q = q->next;
 801ad3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801ad40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d109      	bne.n	801ad5a <dhcp_parse_reply+0x566>
 801ad46:	4b24      	ldr	r3, [pc, #144]	; (801add8 <dhcp_parse_reply+0x5e4>)
 801ad48:	f240 629d 	movw	r2, #1693	; 0x69d
 801ad4c:	492b      	ldr	r1, [pc, #172]	; (801adfc <dhcp_parse_reply+0x608>)
 801ad4e:	4824      	ldr	r0, [pc, #144]	; (801ade0 <dhcp_parse_reply+0x5ec>)
 801ad50:	f003 feec 	bl	801eb2c <iprintf>
 801ad54:	f06f 0305 	mvn.w	r3, #5
 801ad58:	e05d      	b.n	801ae16 <dhcp_parse_reply+0x622>
        options = (u8_t *)q->payload;
 801ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad5c:	685b      	ldr	r3, [r3, #4]
 801ad5e:	643b      	str	r3, [r7, #64]	; 0x40
 801ad60:	e002      	b.n	801ad68 <dhcp_parse_reply+0x574>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801ad62:	f06f 0301 	mvn.w	r3, #1
 801ad66:	e056      	b.n	801ae16 <dhcp_parse_reply+0x622>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ad68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d00c      	beq.n	801ad88 <dhcp_parse_reply+0x594>
 801ad6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ad72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ad74:	429a      	cmp	r2, r3
 801ad76:	d207      	bcs.n	801ad88 <dhcp_parse_reply+0x594>
 801ad78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ad7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ad7e:	4413      	add	r3, r2
 801ad80:	781b      	ldrb	r3, [r3, #0]
 801ad82:	2bff      	cmp	r3, #255	; 0xff
 801ad84:	f47f ad7a 	bne.w	801a87c <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801ad88:	4b18      	ldr	r3, [pc, #96]	; (801adec <dhcp_parse_reply+0x5f8>)
 801ad8a:	781b      	ldrb	r3, [r3, #0]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d018      	beq.n	801adc2 <dhcp_parse_reply+0x5ce>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ad90:	4b18      	ldr	r3, [pc, #96]	; (801adf4 <dhcp_parse_reply+0x600>)
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801ad96:	4b15      	ldr	r3, [pc, #84]	; (801adec <dhcp_parse_reply+0x5f8>)
 801ad98:	2200      	movs	r2, #0
 801ad9a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801ad9c:	693b      	ldr	r3, [r7, #16]
 801ad9e:	2b01      	cmp	r3, #1
 801ada0:	d102      	bne.n	801ada8 <dhcp_parse_reply+0x5b4>
      parse_file_as_options = 1;
 801ada2:	2301      	movs	r3, #1
 801ada4:	633b      	str	r3, [r7, #48]	; 0x30
 801ada6:	e00c      	b.n	801adc2 <dhcp_parse_reply+0x5ce>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801ada8:	693b      	ldr	r3, [r7, #16]
 801adaa:	2b02      	cmp	r3, #2
 801adac:	d102      	bne.n	801adb4 <dhcp_parse_reply+0x5c0>
      parse_sname_as_options = 1;
 801adae:	2301      	movs	r3, #1
 801adb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801adb2:	e006      	b.n	801adc2 <dhcp_parse_reply+0x5ce>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801adb4:	693b      	ldr	r3, [r7, #16]
 801adb6:	2b03      	cmp	r3, #3
 801adb8:	d103      	bne.n	801adc2 <dhcp_parse_reply+0x5ce>
      parse_sname_as_options = 1;
 801adba:	2301      	movs	r3, #1
 801adbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 801adbe:	2301      	movs	r3, #1
 801adc0:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d01b      	beq.n	801ae00 <dhcp_parse_reply+0x60c>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801adc8:	2300      	movs	r3, #0
 801adca:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 801adcc:	236c      	movs	r3, #108	; 0x6c
 801adce:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801add0:	23ec      	movs	r3, #236	; 0xec
 801add2:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801add4:	e52b      	b.n	801a82e <dhcp_parse_reply+0x3a>
 801add6:	bf00      	nop
 801add8:	08025a48 	.word	0x08025a48
 801addc:	08025d00 	.word	0x08025d00
 801ade0:	08025aa8 	.word	0x08025aa8
 801ade4:	08025cd0 	.word	0x08025cd0
 801ade8:	08025d24 	.word	0x08025d24
 801adec:	2001b0e4 	.word	0x2001b0e4
 801adf0:	08025d38 	.word	0x08025d38
 801adf4:	2001b0f0 	.word	0x2001b0f0
 801adf8:	08025d50 	.word	0x08025d50
 801adfc:	08025d64 	.word	0x08025d64
  } else if (parse_sname_as_options) {
 801ae00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d006      	beq.n	801ae14 <dhcp_parse_reply+0x620>
    parse_sname_as_options = 0;
 801ae06:	2300      	movs	r3, #0
 801ae08:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 801ae0a:	232c      	movs	r3, #44	; 0x2c
 801ae0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801ae0e:	236c      	movs	r3, #108	; 0x6c
 801ae10:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 801ae12:	e50c      	b.n	801a82e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801ae14:	2300      	movs	r3, #0
}
 801ae16:	4618      	mov	r0, r3
 801ae18:	3748      	adds	r7, #72	; 0x48
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	bd80      	pop	{r7, pc}
 801ae1e:	bf00      	nop

0801ae20 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b08a      	sub	sp, #40	; 0x28
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	60f8      	str	r0, [r7, #12]
 801ae28:	60b9      	str	r1, [r7, #8]
 801ae2a:	607a      	str	r2, [r7, #4]
 801ae2c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801ae2e:	4b5e      	ldr	r3, [pc, #376]	; (801afa8 <dhcp_recv+0x188>)
 801ae30:	685b      	ldr	r3, [r3, #4]
 801ae32:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ae34:	69fb      	ldr	r3, [r7, #28]
 801ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae38:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	685b      	ldr	r3, [r3, #4]
 801ae3e:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801ae40:	69bb      	ldr	r3, [r7, #24]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	f000 809a 	beq.w	801af7c <dhcp_recv+0x15c>
 801ae48:	69bb      	ldr	r3, [r7, #24]
 801ae4a:	791b      	ldrb	r3, [r3, #4]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	f000 8095 	beq.w	801af7c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	895b      	ldrh	r3, [r3, #10]
 801ae56:	2b2b      	cmp	r3, #43	; 0x2b
 801ae58:	f240 8092 	bls.w	801af80 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801ae5c:	697b      	ldr	r3, [r7, #20]
 801ae5e:	781b      	ldrb	r3, [r3, #0]
 801ae60:	2b02      	cmp	r3, #2
 801ae62:	f040 808f 	bne.w	801af84 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ae66:	2300      	movs	r3, #0
 801ae68:	74fb      	strb	r3, [r7, #19]
 801ae6a:	e00e      	b.n	801ae8a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801ae6c:	7cfb      	ldrb	r3, [r7, #19]
 801ae6e:	69fa      	ldr	r2, [r7, #28]
 801ae70:	4413      	add	r3, r2
 801ae72:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801ae76:	7cfb      	ldrb	r3, [r7, #19]
 801ae78:	6979      	ldr	r1, [r7, #20]
 801ae7a:	440b      	add	r3, r1
 801ae7c:	7f1b      	ldrb	r3, [r3, #28]
 801ae7e:	429a      	cmp	r2, r3
 801ae80:	f040 8082 	bne.w	801af88 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ae84:	7cfb      	ldrb	r3, [r7, #19]
 801ae86:	3301      	adds	r3, #1
 801ae88:	74fb      	strb	r3, [r7, #19]
 801ae8a:	69fb      	ldr	r3, [r7, #28]
 801ae8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ae90:	7cfa      	ldrb	r2, [r7, #19]
 801ae92:	429a      	cmp	r2, r3
 801ae94:	d202      	bcs.n	801ae9c <dhcp_recv+0x7c>
 801ae96:	7cfb      	ldrb	r3, [r7, #19]
 801ae98:	2b05      	cmp	r3, #5
 801ae9a:	d9e7      	bls.n	801ae6c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801ae9c:	697b      	ldr	r3, [r7, #20]
 801ae9e:	685b      	ldr	r3, [r3, #4]
 801aea0:	4618      	mov	r0, r3
 801aea2:	f7f4 f9f0 	bl	800f286 <lwip_htonl>
 801aea6:	4602      	mov	r2, r0
 801aea8:	69bb      	ldr	r3, [r7, #24]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	429a      	cmp	r2, r3
 801aeae:	d16d      	bne.n	801af8c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801aeb0:	69b9      	ldr	r1, [r7, #24]
 801aeb2:	6878      	ldr	r0, [r7, #4]
 801aeb4:	f7ff fc9e 	bl	801a7f4 <dhcp_parse_reply>
 801aeb8:	4603      	mov	r3, r0
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d168      	bne.n	801af90 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801aebe:	4b3b      	ldr	r3, [pc, #236]	; (801afac <dhcp_recv+0x18c>)
 801aec0:	785b      	ldrb	r3, [r3, #1]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d066      	beq.n	801af94 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	685b      	ldr	r3, [r3, #4]
 801aeca:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801aecc:	4b38      	ldr	r3, [pc, #224]	; (801afb0 <dhcp_recv+0x190>)
 801aece:	685b      	ldr	r3, [r3, #4]
 801aed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801aed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801aed8:	2b05      	cmp	r3, #5
 801aeda:	d12a      	bne.n	801af32 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801aedc:	69bb      	ldr	r3, [r7, #24]
 801aede:	795b      	ldrb	r3, [r3, #5]
 801aee0:	2b01      	cmp	r3, #1
 801aee2:	d112      	bne.n	801af0a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 801aee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aee6:	69f8      	ldr	r0, [r7, #28]
 801aee8:	f7fe fdba 	bl	8019a60 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801aeec:	69fb      	ldr	r3, [r7, #28]
 801aeee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801aef2:	f003 0308 	and.w	r3, r3, #8
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d003      	beq.n	801af02 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801aefa:	69f8      	ldr	r0, [r7, #28]
 801aefc:	f7fe fb2a 	bl	8019554 <dhcp_check>
 801af00:	e04b      	b.n	801af9a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801af02:	69f8      	ldr	r0, [r7, #28]
 801af04:	f7ff f82a 	bl	8019f5c <dhcp_bind>
 801af08:	e047      	b.n	801af9a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801af0a:	69bb      	ldr	r3, [r7, #24]
 801af0c:	795b      	ldrb	r3, [r3, #5]
 801af0e:	2b03      	cmp	r3, #3
 801af10:	d007      	beq.n	801af22 <dhcp_recv+0x102>
 801af12:	69bb      	ldr	r3, [r7, #24]
 801af14:	795b      	ldrb	r3, [r3, #5]
 801af16:	2b04      	cmp	r3, #4
 801af18:	d003      	beq.n	801af22 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801af1a:	69bb      	ldr	r3, [r7, #24]
 801af1c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801af1e:	2b05      	cmp	r3, #5
 801af20:	d13b      	bne.n	801af9a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 801af22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801af24:	69f8      	ldr	r0, [r7, #28]
 801af26:	f7fe fd9b 	bl	8019a60 <dhcp_handle_ack>
      dhcp_bind(netif);
 801af2a:	69f8      	ldr	r0, [r7, #28]
 801af2c:	f7ff f816 	bl	8019f5c <dhcp_bind>
 801af30:	e033      	b.n	801af9a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801af32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801af36:	2b06      	cmp	r3, #6
 801af38:	d113      	bne.n	801af62 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801af3a:	69bb      	ldr	r3, [r7, #24]
 801af3c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801af3e:	2b03      	cmp	r3, #3
 801af40:	d00b      	beq.n	801af5a <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801af42:	69bb      	ldr	r3, [r7, #24]
 801af44:	795b      	ldrb	r3, [r3, #5]
 801af46:	2b01      	cmp	r3, #1
 801af48:	d007      	beq.n	801af5a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801af4a:	69bb      	ldr	r3, [r7, #24]
 801af4c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801af4e:	2b04      	cmp	r3, #4
 801af50:	d003      	beq.n	801af5a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801af52:	69bb      	ldr	r3, [r7, #24]
 801af54:	795b      	ldrb	r3, [r3, #5]
 801af56:	2b05      	cmp	r3, #5
 801af58:	d103      	bne.n	801af62 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801af5a:	69f8      	ldr	r0, [r7, #28]
 801af5c:	f7fe fae0 	bl	8019520 <dhcp_handle_nak>
 801af60:	e01b      	b.n	801af9a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801af62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801af66:	2b02      	cmp	r3, #2
 801af68:	d116      	bne.n	801af98 <dhcp_recv+0x178>
 801af6a:	69bb      	ldr	r3, [r7, #24]
 801af6c:	795b      	ldrb	r3, [r3, #5]
 801af6e:	2b06      	cmp	r3, #6
 801af70:	d112      	bne.n	801af98 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801af72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801af74:	69f8      	ldr	r0, [r7, #28]
 801af76:	f7fe fb21 	bl	80195bc <dhcp_handle_offer>
 801af7a:	e00e      	b.n	801af9a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801af7c:	bf00      	nop
 801af7e:	e00c      	b.n	801af9a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801af80:	bf00      	nop
 801af82:	e00a      	b.n	801af9a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801af84:	bf00      	nop
 801af86:	e008      	b.n	801af9a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 801af88:	bf00      	nop
 801af8a:	e006      	b.n	801af9a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801af8c:	bf00      	nop
 801af8e:	e004      	b.n	801af9a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801af90:	bf00      	nop
 801af92:	e002      	b.n	801af9a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801af94:	bf00      	nop
 801af96:	e000      	b.n	801af9a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 801af98:	bf00      	nop
  pbuf_free(p);
 801af9a:	6878      	ldr	r0, [r7, #4]
 801af9c:	f7f6 fd1e 	bl	80119dc <pbuf_free>
}
 801afa0:	bf00      	nop
 801afa2:	3728      	adds	r7, #40	; 0x28
 801afa4:	46bd      	mov	sp, r7
 801afa6:	bd80      	pop	{r7, pc}
 801afa8:	200176d4 	.word	0x200176d4
 801afac:	2001b0e4 	.word	0x2001b0e4
 801afb0:	2001b0f0 	.word	0x2001b0f0

0801afb4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b088      	sub	sp, #32
 801afb8:	af00      	add	r7, sp, #0
 801afba:	60f8      	str	r0, [r7, #12]
 801afbc:	60b9      	str	r1, [r7, #8]
 801afbe:	603b      	str	r3, [r7, #0]
 801afc0:	4613      	mov	r3, r2
 801afc2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d108      	bne.n	801afdc <dhcp_create_msg+0x28>
 801afca:	4b5f      	ldr	r3, [pc, #380]	; (801b148 <dhcp_create_msg+0x194>)
 801afcc:	f240 7269 	movw	r2, #1897	; 0x769
 801afd0:	495e      	ldr	r1, [pc, #376]	; (801b14c <dhcp_create_msg+0x198>)
 801afd2:	485f      	ldr	r0, [pc, #380]	; (801b150 <dhcp_create_msg+0x19c>)
 801afd4:	f003 fdaa 	bl	801eb2c <iprintf>
 801afd8:	2300      	movs	r3, #0
 801afda:	e0b1      	b.n	801b140 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801afdc:	68bb      	ldr	r3, [r7, #8]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d108      	bne.n	801aff4 <dhcp_create_msg+0x40>
 801afe2:	4b59      	ldr	r3, [pc, #356]	; (801b148 <dhcp_create_msg+0x194>)
 801afe4:	f240 726a 	movw	r2, #1898	; 0x76a
 801afe8:	495a      	ldr	r1, [pc, #360]	; (801b154 <dhcp_create_msg+0x1a0>)
 801afea:	4859      	ldr	r0, [pc, #356]	; (801b150 <dhcp_create_msg+0x19c>)
 801afec:	f003 fd9e 	bl	801eb2c <iprintf>
 801aff0:	2300      	movs	r3, #0
 801aff2:	e0a5      	b.n	801b140 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801aff4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aff8:	f44f 719a 	mov.w	r1, #308	; 0x134
 801affc:	2036      	movs	r0, #54	; 0x36
 801affe:	f7f6 f9d7 	bl	80113b0 <pbuf_alloc>
 801b002:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801b004:	69bb      	ldr	r3, [r7, #24]
 801b006:	2b00      	cmp	r3, #0
 801b008:	d101      	bne.n	801b00e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801b00a:	2300      	movs	r3, #0
 801b00c:	e098      	b.n	801b140 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801b00e:	69bb      	ldr	r3, [r7, #24]
 801b010:	895b      	ldrh	r3, [r3, #10]
 801b012:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801b016:	d206      	bcs.n	801b026 <dhcp_create_msg+0x72>
 801b018:	4b4b      	ldr	r3, [pc, #300]	; (801b148 <dhcp_create_msg+0x194>)
 801b01a:	f240 7271 	movw	r2, #1905	; 0x771
 801b01e:	494e      	ldr	r1, [pc, #312]	; (801b158 <dhcp_create_msg+0x1a4>)
 801b020:	484b      	ldr	r0, [pc, #300]	; (801b150 <dhcp_create_msg+0x19c>)
 801b022:	f003 fd83 	bl	801eb2c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801b026:	79fb      	ldrb	r3, [r7, #7]
 801b028:	2b03      	cmp	r3, #3
 801b02a:	d103      	bne.n	801b034 <dhcp_create_msg+0x80>
 801b02c:	68bb      	ldr	r3, [r7, #8]
 801b02e:	795b      	ldrb	r3, [r3, #5]
 801b030:	2b03      	cmp	r3, #3
 801b032:	d10d      	bne.n	801b050 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801b034:	68bb      	ldr	r3, [r7, #8]
 801b036:	799b      	ldrb	r3, [r3, #6]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d105      	bne.n	801b048 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801b03c:	f003 fe04 	bl	801ec48 <rand>
 801b040:	4603      	mov	r3, r0
 801b042:	461a      	mov	r2, r3
 801b044:	4b45      	ldr	r3, [pc, #276]	; (801b15c <dhcp_create_msg+0x1a8>)
 801b046:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801b048:	4b44      	ldr	r3, [pc, #272]	; (801b15c <dhcp_create_msg+0x1a8>)
 801b04a:	681a      	ldr	r2, [r3, #0]
 801b04c:	68bb      	ldr	r3, [r7, #8]
 801b04e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801b050:	69bb      	ldr	r3, [r7, #24]
 801b052:	685b      	ldr	r3, [r3, #4]
 801b054:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801b056:	f44f 729a 	mov.w	r2, #308	; 0x134
 801b05a:	2100      	movs	r1, #0
 801b05c:	6978      	ldr	r0, [r7, #20]
 801b05e:	f003 f849 	bl	801e0f4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801b062:	697b      	ldr	r3, [r7, #20]
 801b064:	2201      	movs	r2, #1
 801b066:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801b068:	697b      	ldr	r3, [r7, #20]
 801b06a:	2201      	movs	r2, #1
 801b06c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801b074:	697b      	ldr	r3, [r7, #20]
 801b076:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801b078:	68bb      	ldr	r3, [r7, #8]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	4618      	mov	r0, r3
 801b07e:	f7f4 f902 	bl	800f286 <lwip_htonl>
 801b082:	4602      	mov	r2, r0
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801b088:	79fb      	ldrb	r3, [r7, #7]
 801b08a:	2b08      	cmp	r3, #8
 801b08c:	d010      	beq.n	801b0b0 <dhcp_create_msg+0xfc>
 801b08e:	79fb      	ldrb	r3, [r7, #7]
 801b090:	2b04      	cmp	r3, #4
 801b092:	d00d      	beq.n	801b0b0 <dhcp_create_msg+0xfc>
 801b094:	79fb      	ldrb	r3, [r7, #7]
 801b096:	2b07      	cmp	r3, #7
 801b098:	d00a      	beq.n	801b0b0 <dhcp_create_msg+0xfc>
 801b09a:	79fb      	ldrb	r3, [r7, #7]
 801b09c:	2b03      	cmp	r3, #3
 801b09e:	d10c      	bne.n	801b0ba <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b0a0:	68bb      	ldr	r3, [r7, #8]
 801b0a2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801b0a4:	2b05      	cmp	r3, #5
 801b0a6:	d003      	beq.n	801b0b0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b0a8:	68bb      	ldr	r3, [r7, #8]
 801b0aa:	795b      	ldrb	r3, [r3, #5]
 801b0ac:	2b04      	cmp	r3, #4
 801b0ae:	d104      	bne.n	801b0ba <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	3304      	adds	r3, #4
 801b0b4:	681a      	ldr	r2, [r3, #0]
 801b0b6:	697b      	ldr	r3, [r7, #20]
 801b0b8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	83fb      	strh	r3, [r7, #30]
 801b0be:	e00c      	b.n	801b0da <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801b0c0:	8bfa      	ldrh	r2, [r7, #30]
 801b0c2:	8bfb      	ldrh	r3, [r7, #30]
 801b0c4:	68f9      	ldr	r1, [r7, #12]
 801b0c6:	440a      	add	r2, r1
 801b0c8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801b0cc:	697a      	ldr	r2, [r7, #20]
 801b0ce:	4413      	add	r3, r2
 801b0d0:	460a      	mov	r2, r1
 801b0d2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b0d4:	8bfb      	ldrh	r3, [r7, #30]
 801b0d6:	3301      	adds	r3, #1
 801b0d8:	83fb      	strh	r3, [r7, #30]
 801b0da:	8bfb      	ldrh	r3, [r7, #30]
 801b0dc:	2b05      	cmp	r3, #5
 801b0de:	d9ef      	bls.n	801b0c0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801b0e0:	697b      	ldr	r3, [r7, #20]
 801b0e2:	2200      	movs	r2, #0
 801b0e4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b0e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801b0ec:	2200      	movs	r2, #0
 801b0ee:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801b0f2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801b0f6:	2200      	movs	r2, #0
 801b0f8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801b0fc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801b100:	2200      	movs	r2, #0
 801b102:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b106:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801b10a:	697b      	ldr	r3, [r7, #20]
 801b10c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b110:	2301      	movs	r3, #1
 801b112:	2235      	movs	r2, #53	; 0x35
 801b114:	2000      	movs	r0, #0
 801b116:	f7ff fa9d 	bl	801a654 <dhcp_option>
 801b11a:	4603      	mov	r3, r0
 801b11c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801b11e:	697b      	ldr	r3, [r7, #20]
 801b120:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b124:	79fa      	ldrb	r2, [r7, #7]
 801b126:	8a7b      	ldrh	r3, [r7, #18]
 801b128:	4618      	mov	r0, r3
 801b12a:	f7ff fac7 	bl	801a6bc <dhcp_option_byte>
 801b12e:	4603      	mov	r3, r0
 801b130:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801b132:	683b      	ldr	r3, [r7, #0]
 801b134:	2b00      	cmp	r3, #0
 801b136:	d002      	beq.n	801b13e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801b138:	683b      	ldr	r3, [r7, #0]
 801b13a:	8a7a      	ldrh	r2, [r7, #18]
 801b13c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801b13e:	69bb      	ldr	r3, [r7, #24]
}
 801b140:	4618      	mov	r0, r3
 801b142:	3720      	adds	r7, #32
 801b144:	46bd      	mov	sp, r7
 801b146:	bd80      	pop	{r7, pc}
 801b148:	08025a48 	.word	0x08025a48
 801b14c:	08025d78 	.word	0x08025d78
 801b150:	08025aa8 	.word	0x08025aa8
 801b154:	08025d98 	.word	0x08025d98
 801b158:	08025db8 	.word	0x08025db8
 801b15c:	200143a8 	.word	0x200143a8

0801b160 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801b160:	b580      	push	{r7, lr}
 801b162:	b084      	sub	sp, #16
 801b164:	af00      	add	r7, sp, #0
 801b166:	4603      	mov	r3, r0
 801b168:	60b9      	str	r1, [r7, #8]
 801b16a:	607a      	str	r2, [r7, #4]
 801b16c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801b16e:	89fb      	ldrh	r3, [r7, #14]
 801b170:	1c5a      	adds	r2, r3, #1
 801b172:	81fa      	strh	r2, [r7, #14]
 801b174:	461a      	mov	r2, r3
 801b176:	68bb      	ldr	r3, [r7, #8]
 801b178:	4413      	add	r3, r2
 801b17a:	22ff      	movs	r2, #255	; 0xff
 801b17c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b17e:	e007      	b.n	801b190 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801b180:	89fb      	ldrh	r3, [r7, #14]
 801b182:	1c5a      	adds	r2, r3, #1
 801b184:	81fa      	strh	r2, [r7, #14]
 801b186:	461a      	mov	r2, r3
 801b188:	68bb      	ldr	r3, [r7, #8]
 801b18a:	4413      	add	r3, r2
 801b18c:	2200      	movs	r2, #0
 801b18e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b190:	89fb      	ldrh	r3, [r7, #14]
 801b192:	2b43      	cmp	r3, #67	; 0x43
 801b194:	d904      	bls.n	801b1a0 <dhcp_option_trailer+0x40>
 801b196:	89fb      	ldrh	r3, [r7, #14]
 801b198:	f003 0303 	and.w	r3, r3, #3
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d002      	beq.n	801b1a6 <dhcp_option_trailer+0x46>
 801b1a0:	89fb      	ldrh	r3, [r7, #14]
 801b1a2:	2b43      	cmp	r3, #67	; 0x43
 801b1a4:	d9ec      	bls.n	801b180 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801b1a6:	89fb      	ldrh	r3, [r7, #14]
 801b1a8:	33f0      	adds	r3, #240	; 0xf0
 801b1aa:	b29b      	uxth	r3, r3
 801b1ac:	4619      	mov	r1, r3
 801b1ae:	6878      	ldr	r0, [r7, #4]
 801b1b0:	f7f6 fa5c 	bl	801166c <pbuf_realloc>
}
 801b1b4:	bf00      	nop
 801b1b6:	3710      	adds	r7, #16
 801b1b8:	46bd      	mov	sp, r7
 801b1ba:	bd80      	pop	{r7, pc}

0801b1bc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801b1bc:	b480      	push	{r7}
 801b1be:	b085      	sub	sp, #20
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d017      	beq.n	801b1fa <dhcp_supplied_address+0x3e>
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d013      	beq.n	801b1fa <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b1d6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b1d8:	68fb      	ldr	r3, [r7, #12]
 801b1da:	795b      	ldrb	r3, [r3, #5]
 801b1dc:	2b0a      	cmp	r3, #10
 801b1de:	d007      	beq.n	801b1f0 <dhcp_supplied_address+0x34>
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	795b      	ldrb	r3, [r3, #5]
 801b1e4:	2b05      	cmp	r3, #5
 801b1e6:	d003      	beq.n	801b1f0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801b1e8:	68fb      	ldr	r3, [r7, #12]
 801b1ea:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b1ec:	2b04      	cmp	r3, #4
 801b1ee:	d101      	bne.n	801b1f4 <dhcp_supplied_address+0x38>
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	e000      	b.n	801b1f6 <dhcp_supplied_address+0x3a>
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	b2db      	uxtb	r3, r3
 801b1f8:	e000      	b.n	801b1fc <dhcp_supplied_address+0x40>
  }
  return 0;
 801b1fa:	2300      	movs	r3, #0
}
 801b1fc:	4618      	mov	r0, r3
 801b1fe:	3714      	adds	r7, #20
 801b200:	46bd      	mov	sp, r7
 801b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b206:	4770      	bx	lr

0801b208 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b208:	b580      	push	{r7, lr}
 801b20a:	b082      	sub	sp, #8
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b210:	492b      	ldr	r1, [pc, #172]	; (801b2c0 <etharp_free_entry+0xb8>)
 801b212:	687a      	ldr	r2, [r7, #4]
 801b214:	4613      	mov	r3, r2
 801b216:	005b      	lsls	r3, r3, #1
 801b218:	4413      	add	r3, r2
 801b21a:	00db      	lsls	r3, r3, #3
 801b21c:	440b      	add	r3, r1
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	2b00      	cmp	r3, #0
 801b222:	d013      	beq.n	801b24c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b224:	4926      	ldr	r1, [pc, #152]	; (801b2c0 <etharp_free_entry+0xb8>)
 801b226:	687a      	ldr	r2, [r7, #4]
 801b228:	4613      	mov	r3, r2
 801b22a:	005b      	lsls	r3, r3, #1
 801b22c:	4413      	add	r3, r2
 801b22e:	00db      	lsls	r3, r3, #3
 801b230:	440b      	add	r3, r1
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	4618      	mov	r0, r3
 801b236:	f7f6 fbd1 	bl	80119dc <pbuf_free>
    arp_table[i].q = NULL;
 801b23a:	4921      	ldr	r1, [pc, #132]	; (801b2c0 <etharp_free_entry+0xb8>)
 801b23c:	687a      	ldr	r2, [r7, #4]
 801b23e:	4613      	mov	r3, r2
 801b240:	005b      	lsls	r3, r3, #1
 801b242:	4413      	add	r3, r2
 801b244:	00db      	lsls	r3, r3, #3
 801b246:	440b      	add	r3, r1
 801b248:	2200      	movs	r2, #0
 801b24a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b24c:	491c      	ldr	r1, [pc, #112]	; (801b2c0 <etharp_free_entry+0xb8>)
 801b24e:	687a      	ldr	r2, [r7, #4]
 801b250:	4613      	mov	r3, r2
 801b252:	005b      	lsls	r3, r3, #1
 801b254:	4413      	add	r3, r2
 801b256:	00db      	lsls	r3, r3, #3
 801b258:	440b      	add	r3, r1
 801b25a:	3314      	adds	r3, #20
 801b25c:	2200      	movs	r2, #0
 801b25e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801b260:	4917      	ldr	r1, [pc, #92]	; (801b2c0 <etharp_free_entry+0xb8>)
 801b262:	687a      	ldr	r2, [r7, #4]
 801b264:	4613      	mov	r3, r2
 801b266:	005b      	lsls	r3, r3, #1
 801b268:	4413      	add	r3, r2
 801b26a:	00db      	lsls	r3, r3, #3
 801b26c:	440b      	add	r3, r1
 801b26e:	3312      	adds	r3, #18
 801b270:	2200      	movs	r2, #0
 801b272:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801b274:	4912      	ldr	r1, [pc, #72]	; (801b2c0 <etharp_free_entry+0xb8>)
 801b276:	687a      	ldr	r2, [r7, #4]
 801b278:	4613      	mov	r3, r2
 801b27a:	005b      	lsls	r3, r3, #1
 801b27c:	4413      	add	r3, r2
 801b27e:	00db      	lsls	r3, r3, #3
 801b280:	440b      	add	r3, r1
 801b282:	3308      	adds	r3, #8
 801b284:	2200      	movs	r2, #0
 801b286:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801b288:	490d      	ldr	r1, [pc, #52]	; (801b2c0 <etharp_free_entry+0xb8>)
 801b28a:	687a      	ldr	r2, [r7, #4]
 801b28c:	4613      	mov	r3, r2
 801b28e:	005b      	lsls	r3, r3, #1
 801b290:	4413      	add	r3, r2
 801b292:	00db      	lsls	r3, r3, #3
 801b294:	440b      	add	r3, r1
 801b296:	3304      	adds	r3, #4
 801b298:	2200      	movs	r2, #0
 801b29a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801b29c:	4908      	ldr	r1, [pc, #32]	; (801b2c0 <etharp_free_entry+0xb8>)
 801b29e:	687a      	ldr	r2, [r7, #4]
 801b2a0:	4613      	mov	r3, r2
 801b2a2:	005b      	lsls	r3, r3, #1
 801b2a4:	4413      	add	r3, r2
 801b2a6:	00db      	lsls	r3, r3, #3
 801b2a8:	440b      	add	r3, r1
 801b2aa:	3308      	adds	r3, #8
 801b2ac:	4a05      	ldr	r2, [pc, #20]	; (801b2c4 <etharp_free_entry+0xbc>)
 801b2ae:	3304      	adds	r3, #4
 801b2b0:	6810      	ldr	r0, [r2, #0]
 801b2b2:	6018      	str	r0, [r3, #0]
 801b2b4:	8892      	ldrh	r2, [r2, #4]
 801b2b6:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801b2b8:	bf00      	nop
 801b2ba:	3708      	adds	r7, #8
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	bd80      	pop	{r7, pc}
 801b2c0:	200143ac 	.word	0x200143ac
 801b2c4:	080267b0 	.word	0x080267b0

0801b2c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b082      	sub	sp, #8
 801b2cc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	607b      	str	r3, [r7, #4]
 801b2d2:	e096      	b.n	801b402 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b2d4:	494f      	ldr	r1, [pc, #316]	; (801b414 <etharp_tmr+0x14c>)
 801b2d6:	687a      	ldr	r2, [r7, #4]
 801b2d8:	4613      	mov	r3, r2
 801b2da:	005b      	lsls	r3, r3, #1
 801b2dc:	4413      	add	r3, r2
 801b2de:	00db      	lsls	r3, r3, #3
 801b2e0:	440b      	add	r3, r1
 801b2e2:	3314      	adds	r3, #20
 801b2e4:	781b      	ldrb	r3, [r3, #0]
 801b2e6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b2e8:	78fb      	ldrb	r3, [r7, #3]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	f000 8086 	beq.w	801b3fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b2f0:	4948      	ldr	r1, [pc, #288]	; (801b414 <etharp_tmr+0x14c>)
 801b2f2:	687a      	ldr	r2, [r7, #4]
 801b2f4:	4613      	mov	r3, r2
 801b2f6:	005b      	lsls	r3, r3, #1
 801b2f8:	4413      	add	r3, r2
 801b2fa:	00db      	lsls	r3, r3, #3
 801b2fc:	440b      	add	r3, r1
 801b2fe:	3312      	adds	r3, #18
 801b300:	881b      	ldrh	r3, [r3, #0]
 801b302:	3301      	adds	r3, #1
 801b304:	b298      	uxth	r0, r3
 801b306:	4943      	ldr	r1, [pc, #268]	; (801b414 <etharp_tmr+0x14c>)
 801b308:	687a      	ldr	r2, [r7, #4]
 801b30a:	4613      	mov	r3, r2
 801b30c:	005b      	lsls	r3, r3, #1
 801b30e:	4413      	add	r3, r2
 801b310:	00db      	lsls	r3, r3, #3
 801b312:	440b      	add	r3, r1
 801b314:	3312      	adds	r3, #18
 801b316:	4602      	mov	r2, r0
 801b318:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b31a:	493e      	ldr	r1, [pc, #248]	; (801b414 <etharp_tmr+0x14c>)
 801b31c:	687a      	ldr	r2, [r7, #4]
 801b31e:	4613      	mov	r3, r2
 801b320:	005b      	lsls	r3, r3, #1
 801b322:	4413      	add	r3, r2
 801b324:	00db      	lsls	r3, r3, #3
 801b326:	440b      	add	r3, r1
 801b328:	3312      	adds	r3, #18
 801b32a:	881b      	ldrh	r3, [r3, #0]
 801b32c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b330:	d215      	bcs.n	801b35e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b332:	4938      	ldr	r1, [pc, #224]	; (801b414 <etharp_tmr+0x14c>)
 801b334:	687a      	ldr	r2, [r7, #4]
 801b336:	4613      	mov	r3, r2
 801b338:	005b      	lsls	r3, r3, #1
 801b33a:	4413      	add	r3, r2
 801b33c:	00db      	lsls	r3, r3, #3
 801b33e:	440b      	add	r3, r1
 801b340:	3314      	adds	r3, #20
 801b342:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b344:	2b01      	cmp	r3, #1
 801b346:	d10e      	bne.n	801b366 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b348:	4932      	ldr	r1, [pc, #200]	; (801b414 <etharp_tmr+0x14c>)
 801b34a:	687a      	ldr	r2, [r7, #4]
 801b34c:	4613      	mov	r3, r2
 801b34e:	005b      	lsls	r3, r3, #1
 801b350:	4413      	add	r3, r2
 801b352:	00db      	lsls	r3, r3, #3
 801b354:	440b      	add	r3, r1
 801b356:	3312      	adds	r3, #18
 801b358:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b35a:	2b04      	cmp	r3, #4
 801b35c:	d903      	bls.n	801b366 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b35e:	6878      	ldr	r0, [r7, #4]
 801b360:	f7ff ff52 	bl	801b208 <etharp_free_entry>
 801b364:	e04a      	b.n	801b3fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b366:	492b      	ldr	r1, [pc, #172]	; (801b414 <etharp_tmr+0x14c>)
 801b368:	687a      	ldr	r2, [r7, #4]
 801b36a:	4613      	mov	r3, r2
 801b36c:	005b      	lsls	r3, r3, #1
 801b36e:	4413      	add	r3, r2
 801b370:	00db      	lsls	r3, r3, #3
 801b372:	440b      	add	r3, r1
 801b374:	3314      	adds	r3, #20
 801b376:	781b      	ldrb	r3, [r3, #0]
 801b378:	2b03      	cmp	r3, #3
 801b37a:	d10a      	bne.n	801b392 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b37c:	4925      	ldr	r1, [pc, #148]	; (801b414 <etharp_tmr+0x14c>)
 801b37e:	687a      	ldr	r2, [r7, #4]
 801b380:	4613      	mov	r3, r2
 801b382:	005b      	lsls	r3, r3, #1
 801b384:	4413      	add	r3, r2
 801b386:	00db      	lsls	r3, r3, #3
 801b388:	440b      	add	r3, r1
 801b38a:	3314      	adds	r3, #20
 801b38c:	2204      	movs	r2, #4
 801b38e:	701a      	strb	r2, [r3, #0]
 801b390:	e034      	b.n	801b3fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b392:	4920      	ldr	r1, [pc, #128]	; (801b414 <etharp_tmr+0x14c>)
 801b394:	687a      	ldr	r2, [r7, #4]
 801b396:	4613      	mov	r3, r2
 801b398:	005b      	lsls	r3, r3, #1
 801b39a:	4413      	add	r3, r2
 801b39c:	00db      	lsls	r3, r3, #3
 801b39e:	440b      	add	r3, r1
 801b3a0:	3314      	adds	r3, #20
 801b3a2:	781b      	ldrb	r3, [r3, #0]
 801b3a4:	2b04      	cmp	r3, #4
 801b3a6:	d10a      	bne.n	801b3be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b3a8:	491a      	ldr	r1, [pc, #104]	; (801b414 <etharp_tmr+0x14c>)
 801b3aa:	687a      	ldr	r2, [r7, #4]
 801b3ac:	4613      	mov	r3, r2
 801b3ae:	005b      	lsls	r3, r3, #1
 801b3b0:	4413      	add	r3, r2
 801b3b2:	00db      	lsls	r3, r3, #3
 801b3b4:	440b      	add	r3, r1
 801b3b6:	3314      	adds	r3, #20
 801b3b8:	2202      	movs	r2, #2
 801b3ba:	701a      	strb	r2, [r3, #0]
 801b3bc:	e01e      	b.n	801b3fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b3be:	4915      	ldr	r1, [pc, #84]	; (801b414 <etharp_tmr+0x14c>)
 801b3c0:	687a      	ldr	r2, [r7, #4]
 801b3c2:	4613      	mov	r3, r2
 801b3c4:	005b      	lsls	r3, r3, #1
 801b3c6:	4413      	add	r3, r2
 801b3c8:	00db      	lsls	r3, r3, #3
 801b3ca:	440b      	add	r3, r1
 801b3cc:	3314      	adds	r3, #20
 801b3ce:	781b      	ldrb	r3, [r3, #0]
 801b3d0:	2b01      	cmp	r3, #1
 801b3d2:	d113      	bne.n	801b3fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b3d4:	490f      	ldr	r1, [pc, #60]	; (801b414 <etharp_tmr+0x14c>)
 801b3d6:	687a      	ldr	r2, [r7, #4]
 801b3d8:	4613      	mov	r3, r2
 801b3da:	005b      	lsls	r3, r3, #1
 801b3dc:	4413      	add	r3, r2
 801b3de:	00db      	lsls	r3, r3, #3
 801b3e0:	440b      	add	r3, r1
 801b3e2:	3308      	adds	r3, #8
 801b3e4:	6818      	ldr	r0, [r3, #0]
 801b3e6:	687a      	ldr	r2, [r7, #4]
 801b3e8:	4613      	mov	r3, r2
 801b3ea:	005b      	lsls	r3, r3, #1
 801b3ec:	4413      	add	r3, r2
 801b3ee:	00db      	lsls	r3, r3, #3
 801b3f0:	4a08      	ldr	r2, [pc, #32]	; (801b414 <etharp_tmr+0x14c>)
 801b3f2:	4413      	add	r3, r2
 801b3f4:	3304      	adds	r3, #4
 801b3f6:	4619      	mov	r1, r3
 801b3f8:	f000 fe72 	bl	801c0e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	3301      	adds	r3, #1
 801b400:	607b      	str	r3, [r7, #4]
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	2b09      	cmp	r3, #9
 801b406:	f77f af65 	ble.w	801b2d4 <etharp_tmr+0xc>
      }
    }
  }
}
 801b40a:	bf00      	nop
 801b40c:	bf00      	nop
 801b40e:	3708      	adds	r7, #8
 801b410:	46bd      	mov	sp, r7
 801b412:	bd80      	pop	{r7, pc}
 801b414:	200143ac 	.word	0x200143ac

0801b418 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b08a      	sub	sp, #40	; 0x28
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	60f8      	str	r0, [r7, #12]
 801b420:	460b      	mov	r3, r1
 801b422:	607a      	str	r2, [r7, #4]
 801b424:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b426:	230a      	movs	r3, #10
 801b428:	843b      	strh	r3, [r7, #32]
 801b42a:	230a      	movs	r3, #10
 801b42c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801b42e:	230a      	movs	r3, #10
 801b430:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 801b432:	2300      	movs	r3, #0
 801b434:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b436:	230a      	movs	r3, #10
 801b438:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b43a:	2300      	movs	r3, #0
 801b43c:	83bb      	strh	r3, [r7, #28]
 801b43e:	2300      	movs	r3, #0
 801b440:	837b      	strh	r3, [r7, #26]
 801b442:	2300      	movs	r3, #0
 801b444:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b446:	2300      	movs	r3, #0
 801b448:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b44a:	e0ae      	b.n	801b5aa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b44c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b450:	49a6      	ldr	r1, [pc, #664]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b452:	4613      	mov	r3, r2
 801b454:	005b      	lsls	r3, r3, #1
 801b456:	4413      	add	r3, r2
 801b458:	00db      	lsls	r3, r3, #3
 801b45a:	440b      	add	r3, r1
 801b45c:	3314      	adds	r3, #20
 801b45e:	781b      	ldrb	r3, [r3, #0]
 801b460:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b462:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b466:	2b0a      	cmp	r3, #10
 801b468:	d105      	bne.n	801b476 <etharp_find_entry+0x5e>
 801b46a:	7dfb      	ldrb	r3, [r7, #23]
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d102      	bne.n	801b476 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b472:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b474:	e095      	b.n	801b5a2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b476:	7dfb      	ldrb	r3, [r7, #23]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	f000 8092 	beq.w	801b5a2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b47e:	7dfb      	ldrb	r3, [r7, #23]
 801b480:	2b01      	cmp	r3, #1
 801b482:	d009      	beq.n	801b498 <etharp_find_entry+0x80>
 801b484:	7dfb      	ldrb	r3, [r7, #23]
 801b486:	2b01      	cmp	r3, #1
 801b488:	d806      	bhi.n	801b498 <etharp_find_entry+0x80>
 801b48a:	4b99      	ldr	r3, [pc, #612]	; (801b6f0 <etharp_find_entry+0x2d8>)
 801b48c:	f240 1223 	movw	r2, #291	; 0x123
 801b490:	4998      	ldr	r1, [pc, #608]	; (801b6f4 <etharp_find_entry+0x2dc>)
 801b492:	4899      	ldr	r0, [pc, #612]	; (801b6f8 <etharp_find_entry+0x2e0>)
 801b494:	f003 fb4a 	bl	801eb2c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d020      	beq.n	801b4e0 <etharp_find_entry+0xc8>
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	6819      	ldr	r1, [r3, #0]
 801b4a2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b4a6:	4891      	ldr	r0, [pc, #580]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b4a8:	4613      	mov	r3, r2
 801b4aa:	005b      	lsls	r3, r3, #1
 801b4ac:	4413      	add	r3, r2
 801b4ae:	00db      	lsls	r3, r3, #3
 801b4b0:	4403      	add	r3, r0
 801b4b2:	3304      	adds	r3, #4
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	4299      	cmp	r1, r3
 801b4b8:	d112      	bne.n	801b4e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d00c      	beq.n	801b4da <etharp_find_entry+0xc2>
 801b4c0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b4c4:	4989      	ldr	r1, [pc, #548]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b4c6:	4613      	mov	r3, r2
 801b4c8:	005b      	lsls	r3, r3, #1
 801b4ca:	4413      	add	r3, r2
 801b4cc:	00db      	lsls	r3, r3, #3
 801b4ce:	440b      	add	r3, r1
 801b4d0:	3308      	adds	r3, #8
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	687a      	ldr	r2, [r7, #4]
 801b4d6:	429a      	cmp	r2, r3
 801b4d8:	d102      	bne.n	801b4e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b4da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b4de:	e100      	b.n	801b6e2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b4e0:	7dfb      	ldrb	r3, [r7, #23]
 801b4e2:	2b01      	cmp	r3, #1
 801b4e4:	d140      	bne.n	801b568 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b4e6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b4ea:	4980      	ldr	r1, [pc, #512]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b4ec:	4613      	mov	r3, r2
 801b4ee:	005b      	lsls	r3, r3, #1
 801b4f0:	4413      	add	r3, r2
 801b4f2:	00db      	lsls	r3, r3, #3
 801b4f4:	440b      	add	r3, r1
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d01a      	beq.n	801b532 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b4fc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b500:	497a      	ldr	r1, [pc, #488]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b502:	4613      	mov	r3, r2
 801b504:	005b      	lsls	r3, r3, #1
 801b506:	4413      	add	r3, r2
 801b508:	00db      	lsls	r3, r3, #3
 801b50a:	440b      	add	r3, r1
 801b50c:	3312      	adds	r3, #18
 801b50e:	881b      	ldrh	r3, [r3, #0]
 801b510:	8bba      	ldrh	r2, [r7, #28]
 801b512:	429a      	cmp	r2, r3
 801b514:	d845      	bhi.n	801b5a2 <etharp_find_entry+0x18a>
            old_queue = i;
 801b516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b518:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801b51a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b51e:	4973      	ldr	r1, [pc, #460]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b520:	4613      	mov	r3, r2
 801b522:	005b      	lsls	r3, r3, #1
 801b524:	4413      	add	r3, r2
 801b526:	00db      	lsls	r3, r3, #3
 801b528:	440b      	add	r3, r1
 801b52a:	3312      	adds	r3, #18
 801b52c:	881b      	ldrh	r3, [r3, #0]
 801b52e:	83bb      	strh	r3, [r7, #28]
 801b530:	e037      	b.n	801b5a2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b532:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b536:	496d      	ldr	r1, [pc, #436]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b538:	4613      	mov	r3, r2
 801b53a:	005b      	lsls	r3, r3, #1
 801b53c:	4413      	add	r3, r2
 801b53e:	00db      	lsls	r3, r3, #3
 801b540:	440b      	add	r3, r1
 801b542:	3312      	adds	r3, #18
 801b544:	881b      	ldrh	r3, [r3, #0]
 801b546:	8b7a      	ldrh	r2, [r7, #26]
 801b548:	429a      	cmp	r2, r3
 801b54a:	d82a      	bhi.n	801b5a2 <etharp_find_entry+0x18a>
            old_pending = i;
 801b54c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b54e:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801b550:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b554:	4965      	ldr	r1, [pc, #404]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b556:	4613      	mov	r3, r2
 801b558:	005b      	lsls	r3, r3, #1
 801b55a:	4413      	add	r3, r2
 801b55c:	00db      	lsls	r3, r3, #3
 801b55e:	440b      	add	r3, r1
 801b560:	3312      	adds	r3, #18
 801b562:	881b      	ldrh	r3, [r3, #0]
 801b564:	837b      	strh	r3, [r7, #26]
 801b566:	e01c      	b.n	801b5a2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b568:	7dfb      	ldrb	r3, [r7, #23]
 801b56a:	2b01      	cmp	r3, #1
 801b56c:	d919      	bls.n	801b5a2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b56e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b572:	495e      	ldr	r1, [pc, #376]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b574:	4613      	mov	r3, r2
 801b576:	005b      	lsls	r3, r3, #1
 801b578:	4413      	add	r3, r2
 801b57a:	00db      	lsls	r3, r3, #3
 801b57c:	440b      	add	r3, r1
 801b57e:	3312      	adds	r3, #18
 801b580:	881b      	ldrh	r3, [r3, #0]
 801b582:	8b3a      	ldrh	r2, [r7, #24]
 801b584:	429a      	cmp	r2, r3
 801b586:	d80c      	bhi.n	801b5a2 <etharp_find_entry+0x18a>
            old_stable = i;
 801b588:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b58a:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 801b58c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b590:	4956      	ldr	r1, [pc, #344]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b592:	4613      	mov	r3, r2
 801b594:	005b      	lsls	r3, r3, #1
 801b596:	4413      	add	r3, r2
 801b598:	00db      	lsls	r3, r3, #3
 801b59a:	440b      	add	r3, r1
 801b59c:	3312      	adds	r3, #18
 801b59e:	881b      	ldrh	r3, [r3, #0]
 801b5a0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b5a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b5a4:	3301      	adds	r3, #1
 801b5a6:	b29b      	uxth	r3, r3
 801b5a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b5aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b5ae:	2b09      	cmp	r3, #9
 801b5b0:	f77f af4c 	ble.w	801b44c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b5b4:	7afb      	ldrb	r3, [r7, #11]
 801b5b6:	f003 0302 	and.w	r3, r3, #2
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d108      	bne.n	801b5d0 <etharp_find_entry+0x1b8>
 801b5be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b5c2:	2b0a      	cmp	r3, #10
 801b5c4:	d107      	bne.n	801b5d6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b5c6:	7afb      	ldrb	r3, [r7, #11]
 801b5c8:	f003 0301 	and.w	r3, r3, #1
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d102      	bne.n	801b5d6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b5d0:	f04f 33ff 	mov.w	r3, #4294967295
 801b5d4:	e085      	b.n	801b6e2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b5d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b5da:	2b09      	cmp	r3, #9
 801b5dc:	dc02      	bgt.n	801b5e4 <etharp_find_entry+0x1cc>
    i = empty;
 801b5de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b5e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b5e2:	e039      	b.n	801b658 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b5e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b5e8:	2b09      	cmp	r3, #9
 801b5ea:	dc14      	bgt.n	801b616 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801b5ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b5ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b5f0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b5f4:	493d      	ldr	r1, [pc, #244]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b5f6:	4613      	mov	r3, r2
 801b5f8:	005b      	lsls	r3, r3, #1
 801b5fa:	4413      	add	r3, r2
 801b5fc:	00db      	lsls	r3, r3, #3
 801b5fe:	440b      	add	r3, r1
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d018      	beq.n	801b638 <etharp_find_entry+0x220>
 801b606:	4b3a      	ldr	r3, [pc, #232]	; (801b6f0 <etharp_find_entry+0x2d8>)
 801b608:	f240 126d 	movw	r2, #365	; 0x16d
 801b60c:	493b      	ldr	r1, [pc, #236]	; (801b6fc <etharp_find_entry+0x2e4>)
 801b60e:	483a      	ldr	r0, [pc, #232]	; (801b6f8 <etharp_find_entry+0x2e0>)
 801b610:	f003 fa8c 	bl	801eb2c <iprintf>
 801b614:	e010      	b.n	801b638 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b61a:	2b09      	cmp	r3, #9
 801b61c:	dc02      	bgt.n	801b624 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801b61e:	8c3b      	ldrh	r3, [r7, #32]
 801b620:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b622:	e009      	b.n	801b638 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b624:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b628:	2b09      	cmp	r3, #9
 801b62a:	dc02      	bgt.n	801b632 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b62c:	8bfb      	ldrh	r3, [r7, #30]
 801b62e:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b630:	e002      	b.n	801b638 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b632:	f04f 33ff 	mov.w	r3, #4294967295
 801b636:	e054      	b.n	801b6e2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b638:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b63c:	2b09      	cmp	r3, #9
 801b63e:	dd06      	ble.n	801b64e <etharp_find_entry+0x236>
 801b640:	4b2b      	ldr	r3, [pc, #172]	; (801b6f0 <etharp_find_entry+0x2d8>)
 801b642:	f240 127f 	movw	r2, #383	; 0x17f
 801b646:	492e      	ldr	r1, [pc, #184]	; (801b700 <etharp_find_entry+0x2e8>)
 801b648:	482b      	ldr	r0, [pc, #172]	; (801b6f8 <etharp_find_entry+0x2e0>)
 801b64a:	f003 fa6f 	bl	801eb2c <iprintf>
    etharp_free_entry(i);
 801b64e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b652:	4618      	mov	r0, r3
 801b654:	f7ff fdd8 	bl	801b208 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b658:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b65c:	2b09      	cmp	r3, #9
 801b65e:	dd06      	ble.n	801b66e <etharp_find_entry+0x256>
 801b660:	4b23      	ldr	r3, [pc, #140]	; (801b6f0 <etharp_find_entry+0x2d8>)
 801b662:	f240 1283 	movw	r2, #387	; 0x183
 801b666:	4926      	ldr	r1, [pc, #152]	; (801b700 <etharp_find_entry+0x2e8>)
 801b668:	4823      	ldr	r0, [pc, #140]	; (801b6f8 <etharp_find_entry+0x2e0>)
 801b66a:	f003 fa5f 	bl	801eb2c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b66e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b672:	491e      	ldr	r1, [pc, #120]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b674:	4613      	mov	r3, r2
 801b676:	005b      	lsls	r3, r3, #1
 801b678:	4413      	add	r3, r2
 801b67a:	00db      	lsls	r3, r3, #3
 801b67c:	440b      	add	r3, r1
 801b67e:	3314      	adds	r3, #20
 801b680:	781b      	ldrb	r3, [r3, #0]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d006      	beq.n	801b694 <etharp_find_entry+0x27c>
 801b686:	4b1a      	ldr	r3, [pc, #104]	; (801b6f0 <etharp_find_entry+0x2d8>)
 801b688:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801b68c:	491d      	ldr	r1, [pc, #116]	; (801b704 <etharp_find_entry+0x2ec>)
 801b68e:	481a      	ldr	r0, [pc, #104]	; (801b6f8 <etharp_find_entry+0x2e0>)
 801b690:	f003 fa4c 	bl	801eb2c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	2b00      	cmp	r3, #0
 801b698:	d00b      	beq.n	801b6b2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b69a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	6819      	ldr	r1, [r3, #0]
 801b6a2:	4812      	ldr	r0, [pc, #72]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b6a4:	4613      	mov	r3, r2
 801b6a6:	005b      	lsls	r3, r3, #1
 801b6a8:	4413      	add	r3, r2
 801b6aa:	00db      	lsls	r3, r3, #3
 801b6ac:	4403      	add	r3, r0
 801b6ae:	3304      	adds	r3, #4
 801b6b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b6b2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b6b6:	490d      	ldr	r1, [pc, #52]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b6b8:	4613      	mov	r3, r2
 801b6ba:	005b      	lsls	r3, r3, #1
 801b6bc:	4413      	add	r3, r2
 801b6be:	00db      	lsls	r3, r3, #3
 801b6c0:	440b      	add	r3, r1
 801b6c2:	3312      	adds	r3, #18
 801b6c4:	2200      	movs	r2, #0
 801b6c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b6c8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801b6cc:	4907      	ldr	r1, [pc, #28]	; (801b6ec <etharp_find_entry+0x2d4>)
 801b6ce:	4613      	mov	r3, r2
 801b6d0:	005b      	lsls	r3, r3, #1
 801b6d2:	4413      	add	r3, r2
 801b6d4:	00db      	lsls	r3, r3, #3
 801b6d6:	440b      	add	r3, r1
 801b6d8:	3308      	adds	r3, #8
 801b6da:	687a      	ldr	r2, [r7, #4]
 801b6dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b6de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	3728      	adds	r7, #40	; 0x28
 801b6e6:	46bd      	mov	sp, r7
 801b6e8:	bd80      	pop	{r7, pc}
 801b6ea:	bf00      	nop
 801b6ec:	200143ac 	.word	0x200143ac
 801b6f0:	08025df8 	.word	0x08025df8
 801b6f4:	08025e30 	.word	0x08025e30
 801b6f8:	08025e70 	.word	0x08025e70
 801b6fc:	08025e98 	.word	0x08025e98
 801b700:	08025eb0 	.word	0x08025eb0
 801b704:	08025ec4 	.word	0x08025ec4

0801b708 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b708:	b580      	push	{r7, lr}
 801b70a:	b088      	sub	sp, #32
 801b70c:	af02      	add	r7, sp, #8
 801b70e:	60f8      	str	r0, [r7, #12]
 801b710:	60b9      	str	r1, [r7, #8]
 801b712:	607a      	str	r2, [r7, #4]
 801b714:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b71c:	2b06      	cmp	r3, #6
 801b71e:	d006      	beq.n	801b72e <etharp_update_arp_entry+0x26>
 801b720:	4b48      	ldr	r3, [pc, #288]	; (801b844 <etharp_update_arp_entry+0x13c>)
 801b722:	f240 12a9 	movw	r2, #425	; 0x1a9
 801b726:	4948      	ldr	r1, [pc, #288]	; (801b848 <etharp_update_arp_entry+0x140>)
 801b728:	4848      	ldr	r0, [pc, #288]	; (801b84c <etharp_update_arp_entry+0x144>)
 801b72a:	f003 f9ff 	bl	801eb2c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b72e:	68bb      	ldr	r3, [r7, #8]
 801b730:	2b00      	cmp	r3, #0
 801b732:	d012      	beq.n	801b75a <etharp_update_arp_entry+0x52>
 801b734:	68bb      	ldr	r3, [r7, #8]
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d00e      	beq.n	801b75a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b73c:	68bb      	ldr	r3, [r7, #8]
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	68f9      	ldr	r1, [r7, #12]
 801b742:	4618      	mov	r0, r3
 801b744:	f001 f926 	bl	801c994 <ip4_addr_isbroadcast_u32>
 801b748:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d105      	bne.n	801b75a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b74e:	68bb      	ldr	r3, [r7, #8]
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b756:	2be0      	cmp	r3, #224	; 0xe0
 801b758:	d102      	bne.n	801b760 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b75a:	f06f 030f 	mvn.w	r3, #15
 801b75e:	e06c      	b.n	801b83a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b760:	78fb      	ldrb	r3, [r7, #3]
 801b762:	68fa      	ldr	r2, [r7, #12]
 801b764:	4619      	mov	r1, r3
 801b766:	68b8      	ldr	r0, [r7, #8]
 801b768:	f7ff fe56 	bl	801b418 <etharp_find_entry>
 801b76c:	4603      	mov	r3, r0
 801b76e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b770:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b774:	2b00      	cmp	r3, #0
 801b776:	da02      	bge.n	801b77e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b778:	8afb      	ldrh	r3, [r7, #22]
 801b77a:	b25b      	sxtb	r3, r3
 801b77c:	e05d      	b.n	801b83a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b77e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b782:	4933      	ldr	r1, [pc, #204]	; (801b850 <etharp_update_arp_entry+0x148>)
 801b784:	4613      	mov	r3, r2
 801b786:	005b      	lsls	r3, r3, #1
 801b788:	4413      	add	r3, r2
 801b78a:	00db      	lsls	r3, r3, #3
 801b78c:	440b      	add	r3, r1
 801b78e:	3314      	adds	r3, #20
 801b790:	2202      	movs	r2, #2
 801b792:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b794:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b798:	492d      	ldr	r1, [pc, #180]	; (801b850 <etharp_update_arp_entry+0x148>)
 801b79a:	4613      	mov	r3, r2
 801b79c:	005b      	lsls	r3, r3, #1
 801b79e:	4413      	add	r3, r2
 801b7a0:	00db      	lsls	r3, r3, #3
 801b7a2:	440b      	add	r3, r1
 801b7a4:	3308      	adds	r3, #8
 801b7a6:	68fa      	ldr	r2, [r7, #12]
 801b7a8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b7aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b7ae:	4613      	mov	r3, r2
 801b7b0:	005b      	lsls	r3, r3, #1
 801b7b2:	4413      	add	r3, r2
 801b7b4:	00db      	lsls	r3, r3, #3
 801b7b6:	3308      	adds	r3, #8
 801b7b8:	4a25      	ldr	r2, [pc, #148]	; (801b850 <etharp_update_arp_entry+0x148>)
 801b7ba:	4413      	add	r3, r2
 801b7bc:	3304      	adds	r3, #4
 801b7be:	2206      	movs	r2, #6
 801b7c0:	6879      	ldr	r1, [r7, #4]
 801b7c2:	4618      	mov	r0, r3
 801b7c4:	f002 fc6e 	bl	801e0a4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b7c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b7cc:	4920      	ldr	r1, [pc, #128]	; (801b850 <etharp_update_arp_entry+0x148>)
 801b7ce:	4613      	mov	r3, r2
 801b7d0:	005b      	lsls	r3, r3, #1
 801b7d2:	4413      	add	r3, r2
 801b7d4:	00db      	lsls	r3, r3, #3
 801b7d6:	440b      	add	r3, r1
 801b7d8:	3312      	adds	r3, #18
 801b7da:	2200      	movs	r2, #0
 801b7dc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b7de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b7e2:	491b      	ldr	r1, [pc, #108]	; (801b850 <etharp_update_arp_entry+0x148>)
 801b7e4:	4613      	mov	r3, r2
 801b7e6:	005b      	lsls	r3, r3, #1
 801b7e8:	4413      	add	r3, r2
 801b7ea:	00db      	lsls	r3, r3, #3
 801b7ec:	440b      	add	r3, r1
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d021      	beq.n	801b838 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b7f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b7f8:	4915      	ldr	r1, [pc, #84]	; (801b850 <etharp_update_arp_entry+0x148>)
 801b7fa:	4613      	mov	r3, r2
 801b7fc:	005b      	lsls	r3, r3, #1
 801b7fe:	4413      	add	r3, r2
 801b800:	00db      	lsls	r3, r3, #3
 801b802:	440b      	add	r3, r1
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b808:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b80c:	4910      	ldr	r1, [pc, #64]	; (801b850 <etharp_update_arp_entry+0x148>)
 801b80e:	4613      	mov	r3, r2
 801b810:	005b      	lsls	r3, r3, #1
 801b812:	4413      	add	r3, r2
 801b814:	00db      	lsls	r3, r3, #3
 801b816:	440b      	add	r3, r1
 801b818:	2200      	movs	r2, #0
 801b81a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801b822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b826:	9300      	str	r3, [sp, #0]
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	6939      	ldr	r1, [r7, #16]
 801b82c:	68f8      	ldr	r0, [r7, #12]
 801b82e:	f002 f8e3 	bl	801d9f8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b832:	6938      	ldr	r0, [r7, #16]
 801b834:	f7f6 f8d2 	bl	80119dc <pbuf_free>
  }
  return ERR_OK;
 801b838:	2300      	movs	r3, #0
}
 801b83a:	4618      	mov	r0, r3
 801b83c:	3718      	adds	r7, #24
 801b83e:	46bd      	mov	sp, r7
 801b840:	bd80      	pop	{r7, pc}
 801b842:	bf00      	nop
 801b844:	08025df8 	.word	0x08025df8
 801b848:	08025ef0 	.word	0x08025ef0
 801b84c:	08025e70 	.word	0x08025e70
 801b850:	200143ac 	.word	0x200143ac

0801b854 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b854:	b580      	push	{r7, lr}
 801b856:	b084      	sub	sp, #16
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b85c:	2300      	movs	r3, #0
 801b85e:	60fb      	str	r3, [r7, #12]
 801b860:	e01e      	b.n	801b8a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b862:	4913      	ldr	r1, [pc, #76]	; (801b8b0 <etharp_cleanup_netif+0x5c>)
 801b864:	68fa      	ldr	r2, [r7, #12]
 801b866:	4613      	mov	r3, r2
 801b868:	005b      	lsls	r3, r3, #1
 801b86a:	4413      	add	r3, r2
 801b86c:	00db      	lsls	r3, r3, #3
 801b86e:	440b      	add	r3, r1
 801b870:	3314      	adds	r3, #20
 801b872:	781b      	ldrb	r3, [r3, #0]
 801b874:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b876:	7afb      	ldrb	r3, [r7, #11]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d00e      	beq.n	801b89a <etharp_cleanup_netif+0x46>
 801b87c:	490c      	ldr	r1, [pc, #48]	; (801b8b0 <etharp_cleanup_netif+0x5c>)
 801b87e:	68fa      	ldr	r2, [r7, #12]
 801b880:	4613      	mov	r3, r2
 801b882:	005b      	lsls	r3, r3, #1
 801b884:	4413      	add	r3, r2
 801b886:	00db      	lsls	r3, r3, #3
 801b888:	440b      	add	r3, r1
 801b88a:	3308      	adds	r3, #8
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	687a      	ldr	r2, [r7, #4]
 801b890:	429a      	cmp	r2, r3
 801b892:	d102      	bne.n	801b89a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b894:	68f8      	ldr	r0, [r7, #12]
 801b896:	f7ff fcb7 	bl	801b208 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	3301      	adds	r3, #1
 801b89e:	60fb      	str	r3, [r7, #12]
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	2b09      	cmp	r3, #9
 801b8a4:	dddd      	ble.n	801b862 <etharp_cleanup_netif+0xe>
    }
  }
}
 801b8a6:	bf00      	nop
 801b8a8:	bf00      	nop
 801b8aa:	3710      	adds	r7, #16
 801b8ac:	46bd      	mov	sp, r7
 801b8ae:	bd80      	pop	{r7, pc}
 801b8b0:	200143ac 	.word	0x200143ac

0801b8b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b8b4:	b5b0      	push	{r4, r5, r7, lr}
 801b8b6:	b08a      	sub	sp, #40	; 0x28
 801b8b8:	af04      	add	r7, sp, #16
 801b8ba:	6078      	str	r0, [r7, #4]
 801b8bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b8be:	683b      	ldr	r3, [r7, #0]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d107      	bne.n	801b8d4 <etharp_input+0x20>
 801b8c4:	4b3f      	ldr	r3, [pc, #252]	; (801b9c4 <etharp_input+0x110>)
 801b8c6:	f240 228a 	movw	r2, #650	; 0x28a
 801b8ca:	493f      	ldr	r1, [pc, #252]	; (801b9c8 <etharp_input+0x114>)
 801b8cc:	483f      	ldr	r0, [pc, #252]	; (801b9cc <etharp_input+0x118>)
 801b8ce:	f003 f92d 	bl	801eb2c <iprintf>
 801b8d2:	e074      	b.n	801b9be <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	685b      	ldr	r3, [r3, #4]
 801b8d8:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b8da:	697b      	ldr	r3, [r7, #20]
 801b8dc:	881b      	ldrh	r3, [r3, #0]
 801b8de:	b29b      	uxth	r3, r3
 801b8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b8e4:	d10c      	bne.n	801b900 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b8e6:	697b      	ldr	r3, [r7, #20]
 801b8e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b8ea:	2b06      	cmp	r3, #6
 801b8ec:	d108      	bne.n	801b900 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b8ee:	697b      	ldr	r3, [r7, #20]
 801b8f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b8f2:	2b04      	cmp	r3, #4
 801b8f4:	d104      	bne.n	801b900 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b8f6:	697b      	ldr	r3, [r7, #20]
 801b8f8:	885b      	ldrh	r3, [r3, #2]
 801b8fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b8fc:	2b08      	cmp	r3, #8
 801b8fe:	d003      	beq.n	801b908 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b900:	6878      	ldr	r0, [r7, #4]
 801b902:	f7f6 f86b 	bl	80119dc <pbuf_free>
    return;
 801b906:	e05a      	b.n	801b9be <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b908:	697b      	ldr	r3, [r7, #20]
 801b90a:	330e      	adds	r3, #14
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b910:	697b      	ldr	r3, [r7, #20]
 801b912:	3318      	adds	r3, #24
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b918:	683b      	ldr	r3, [r7, #0]
 801b91a:	3304      	adds	r3, #4
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d102      	bne.n	801b928 <etharp_input+0x74>
    for_us = 0;
 801b922:	2300      	movs	r3, #0
 801b924:	74fb      	strb	r3, [r7, #19]
 801b926:	e009      	b.n	801b93c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b928:	68ba      	ldr	r2, [r7, #8]
 801b92a:	683b      	ldr	r3, [r7, #0]
 801b92c:	3304      	adds	r3, #4
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	429a      	cmp	r2, r3
 801b932:	bf0c      	ite	eq
 801b934:	2301      	moveq	r3, #1
 801b936:	2300      	movne	r3, #0
 801b938:	b2db      	uxtb	r3, r3
 801b93a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b93c:	697b      	ldr	r3, [r7, #20]
 801b93e:	f103 0208 	add.w	r2, r3, #8
 801b942:	7cfb      	ldrb	r3, [r7, #19]
 801b944:	2b00      	cmp	r3, #0
 801b946:	d001      	beq.n	801b94c <etharp_input+0x98>
 801b948:	2301      	movs	r3, #1
 801b94a:	e000      	b.n	801b94e <etharp_input+0x9a>
 801b94c:	2302      	movs	r3, #2
 801b94e:	f107 010c 	add.w	r1, r7, #12
 801b952:	6838      	ldr	r0, [r7, #0]
 801b954:	f7ff fed8 	bl	801b708 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b958:	697b      	ldr	r3, [r7, #20]
 801b95a:	88db      	ldrh	r3, [r3, #6]
 801b95c:	b29b      	uxth	r3, r3
 801b95e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b962:	d003      	beq.n	801b96c <etharp_input+0xb8>
 801b964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b968:	d01e      	beq.n	801b9a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b96a:	e025      	b.n	801b9b8 <etharp_input+0x104>
      if (for_us) {
 801b96c:	7cfb      	ldrb	r3, [r7, #19]
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d021      	beq.n	801b9b6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b972:	683b      	ldr	r3, [r7, #0]
 801b974:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801b978:	697b      	ldr	r3, [r7, #20]
 801b97a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b97e:	683b      	ldr	r3, [r7, #0]
 801b980:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801b984:	683b      	ldr	r3, [r7, #0]
 801b986:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b988:	697a      	ldr	r2, [r7, #20]
 801b98a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b98c:	2102      	movs	r1, #2
 801b98e:	9103      	str	r1, [sp, #12]
 801b990:	f107 010c 	add.w	r1, r7, #12
 801b994:	9102      	str	r1, [sp, #8]
 801b996:	9201      	str	r2, [sp, #4]
 801b998:	9300      	str	r3, [sp, #0]
 801b99a:	462b      	mov	r3, r5
 801b99c:	4622      	mov	r2, r4
 801b99e:	4601      	mov	r1, r0
 801b9a0:	6838      	ldr	r0, [r7, #0]
 801b9a2:	f000 faef 	bl	801bf84 <etharp_raw>
      break;
 801b9a6:	e006      	b.n	801b9b6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801b9a8:	f107 030c 	add.w	r3, r7, #12
 801b9ac:	4619      	mov	r1, r3
 801b9ae:	6838      	ldr	r0, [r7, #0]
 801b9b0:	f7fe f990 	bl	8019cd4 <dhcp_arp_reply>
      break;
 801b9b4:	e000      	b.n	801b9b8 <etharp_input+0x104>
      break;
 801b9b6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b9b8:	6878      	ldr	r0, [r7, #4]
 801b9ba:	f7f6 f80f 	bl	80119dc <pbuf_free>
}
 801b9be:	3718      	adds	r7, #24
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	bdb0      	pop	{r4, r5, r7, pc}
 801b9c4:	08025df8 	.word	0x08025df8
 801b9c8:	08025f48 	.word	0x08025f48
 801b9cc:	08025e70 	.word	0x08025e70

0801b9d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b086      	sub	sp, #24
 801b9d4:	af02      	add	r7, sp, #8
 801b9d6:	60f8      	str	r0, [r7, #12]
 801b9d8:	60b9      	str	r1, [r7, #8]
 801b9da:	4613      	mov	r3, r2
 801b9dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b9de:	79fa      	ldrb	r2, [r7, #7]
 801b9e0:	4944      	ldr	r1, [pc, #272]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801b9e2:	4613      	mov	r3, r2
 801b9e4:	005b      	lsls	r3, r3, #1
 801b9e6:	4413      	add	r3, r2
 801b9e8:	00db      	lsls	r3, r3, #3
 801b9ea:	440b      	add	r3, r1
 801b9ec:	3314      	adds	r3, #20
 801b9ee:	781b      	ldrb	r3, [r3, #0]
 801b9f0:	2b01      	cmp	r3, #1
 801b9f2:	d806      	bhi.n	801ba02 <etharp_output_to_arp_index+0x32>
 801b9f4:	4b40      	ldr	r3, [pc, #256]	; (801baf8 <etharp_output_to_arp_index+0x128>)
 801b9f6:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b9fa:	4940      	ldr	r1, [pc, #256]	; (801bafc <etharp_output_to_arp_index+0x12c>)
 801b9fc:	4840      	ldr	r0, [pc, #256]	; (801bb00 <etharp_output_to_arp_index+0x130>)
 801b9fe:	f003 f895 	bl	801eb2c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ba02:	79fa      	ldrb	r2, [r7, #7]
 801ba04:	493b      	ldr	r1, [pc, #236]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801ba06:	4613      	mov	r3, r2
 801ba08:	005b      	lsls	r3, r3, #1
 801ba0a:	4413      	add	r3, r2
 801ba0c:	00db      	lsls	r3, r3, #3
 801ba0e:	440b      	add	r3, r1
 801ba10:	3314      	adds	r3, #20
 801ba12:	781b      	ldrb	r3, [r3, #0]
 801ba14:	2b02      	cmp	r3, #2
 801ba16:	d153      	bne.n	801bac0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801ba18:	79fa      	ldrb	r2, [r7, #7]
 801ba1a:	4936      	ldr	r1, [pc, #216]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801ba1c:	4613      	mov	r3, r2
 801ba1e:	005b      	lsls	r3, r3, #1
 801ba20:	4413      	add	r3, r2
 801ba22:	00db      	lsls	r3, r3, #3
 801ba24:	440b      	add	r3, r1
 801ba26:	3312      	adds	r3, #18
 801ba28:	881b      	ldrh	r3, [r3, #0]
 801ba2a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801ba2e:	d919      	bls.n	801ba64 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ba30:	79fa      	ldrb	r2, [r7, #7]
 801ba32:	4613      	mov	r3, r2
 801ba34:	005b      	lsls	r3, r3, #1
 801ba36:	4413      	add	r3, r2
 801ba38:	00db      	lsls	r3, r3, #3
 801ba3a:	4a2e      	ldr	r2, [pc, #184]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801ba3c:	4413      	add	r3, r2
 801ba3e:	3304      	adds	r3, #4
 801ba40:	4619      	mov	r1, r3
 801ba42:	68f8      	ldr	r0, [r7, #12]
 801ba44:	f000 fb4c 	bl	801c0e0 <etharp_request>
 801ba48:	4603      	mov	r3, r0
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d138      	bne.n	801bac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ba4e:	79fa      	ldrb	r2, [r7, #7]
 801ba50:	4928      	ldr	r1, [pc, #160]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801ba52:	4613      	mov	r3, r2
 801ba54:	005b      	lsls	r3, r3, #1
 801ba56:	4413      	add	r3, r2
 801ba58:	00db      	lsls	r3, r3, #3
 801ba5a:	440b      	add	r3, r1
 801ba5c:	3314      	adds	r3, #20
 801ba5e:	2203      	movs	r2, #3
 801ba60:	701a      	strb	r2, [r3, #0]
 801ba62:	e02d      	b.n	801bac0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801ba64:	79fa      	ldrb	r2, [r7, #7]
 801ba66:	4923      	ldr	r1, [pc, #140]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801ba68:	4613      	mov	r3, r2
 801ba6a:	005b      	lsls	r3, r3, #1
 801ba6c:	4413      	add	r3, r2
 801ba6e:	00db      	lsls	r3, r3, #3
 801ba70:	440b      	add	r3, r1
 801ba72:	3312      	adds	r3, #18
 801ba74:	881b      	ldrh	r3, [r3, #0]
 801ba76:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801ba7a:	d321      	bcc.n	801bac0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801ba7c:	79fa      	ldrb	r2, [r7, #7]
 801ba7e:	4613      	mov	r3, r2
 801ba80:	005b      	lsls	r3, r3, #1
 801ba82:	4413      	add	r3, r2
 801ba84:	00db      	lsls	r3, r3, #3
 801ba86:	4a1b      	ldr	r2, [pc, #108]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801ba88:	4413      	add	r3, r2
 801ba8a:	1d19      	adds	r1, r3, #4
 801ba8c:	79fa      	ldrb	r2, [r7, #7]
 801ba8e:	4613      	mov	r3, r2
 801ba90:	005b      	lsls	r3, r3, #1
 801ba92:	4413      	add	r3, r2
 801ba94:	00db      	lsls	r3, r3, #3
 801ba96:	3308      	adds	r3, #8
 801ba98:	4a16      	ldr	r2, [pc, #88]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801ba9a:	4413      	add	r3, r2
 801ba9c:	3304      	adds	r3, #4
 801ba9e:	461a      	mov	r2, r3
 801baa0:	68f8      	ldr	r0, [r7, #12]
 801baa2:	f000 fafb 	bl	801c09c <etharp_request_dst>
 801baa6:	4603      	mov	r3, r0
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d109      	bne.n	801bac0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801baac:	79fa      	ldrb	r2, [r7, #7]
 801baae:	4911      	ldr	r1, [pc, #68]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801bab0:	4613      	mov	r3, r2
 801bab2:	005b      	lsls	r3, r3, #1
 801bab4:	4413      	add	r3, r2
 801bab6:	00db      	lsls	r3, r3, #3
 801bab8:	440b      	add	r3, r1
 801baba:	3314      	adds	r3, #20
 801babc:	2203      	movs	r2, #3
 801babe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801bac6:	79fa      	ldrb	r2, [r7, #7]
 801bac8:	4613      	mov	r3, r2
 801baca:	005b      	lsls	r3, r3, #1
 801bacc:	4413      	add	r3, r2
 801bace:	00db      	lsls	r3, r3, #3
 801bad0:	3308      	adds	r3, #8
 801bad2:	4a08      	ldr	r2, [pc, #32]	; (801baf4 <etharp_output_to_arp_index+0x124>)
 801bad4:	4413      	add	r3, r2
 801bad6:	3304      	adds	r3, #4
 801bad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801badc:	9200      	str	r2, [sp, #0]
 801bade:	460a      	mov	r2, r1
 801bae0:	68b9      	ldr	r1, [r7, #8]
 801bae2:	68f8      	ldr	r0, [r7, #12]
 801bae4:	f001 ff88 	bl	801d9f8 <ethernet_output>
 801bae8:	4603      	mov	r3, r0
}
 801baea:	4618      	mov	r0, r3
 801baec:	3710      	adds	r7, #16
 801baee:	46bd      	mov	sp, r7
 801baf0:	bd80      	pop	{r7, pc}
 801baf2:	bf00      	nop
 801baf4:	200143ac 	.word	0x200143ac
 801baf8:	08025df8 	.word	0x08025df8
 801bafc:	08025f68 	.word	0x08025f68
 801bb00:	08025e70 	.word	0x08025e70

0801bb04 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b08a      	sub	sp, #40	; 0x28
 801bb08:	af02      	add	r7, sp, #8
 801bb0a:	60f8      	str	r0, [r7, #12]
 801bb0c:	60b9      	str	r1, [r7, #8]
 801bb0e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bb14:	68fb      	ldr	r3, [r7, #12]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d106      	bne.n	801bb28 <etharp_output+0x24>
 801bb1a:	4b73      	ldr	r3, [pc, #460]	; (801bce8 <etharp_output+0x1e4>)
 801bb1c:	f240 321e 	movw	r2, #798	; 0x31e
 801bb20:	4972      	ldr	r1, [pc, #456]	; (801bcec <etharp_output+0x1e8>)
 801bb22:	4873      	ldr	r0, [pc, #460]	; (801bcf0 <etharp_output+0x1ec>)
 801bb24:	f003 f802 	bl	801eb2c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801bb28:	68bb      	ldr	r3, [r7, #8]
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d106      	bne.n	801bb3c <etharp_output+0x38>
 801bb2e:	4b6e      	ldr	r3, [pc, #440]	; (801bce8 <etharp_output+0x1e4>)
 801bb30:	f240 321f 	movw	r2, #799	; 0x31f
 801bb34:	496f      	ldr	r1, [pc, #444]	; (801bcf4 <etharp_output+0x1f0>)
 801bb36:	486e      	ldr	r0, [pc, #440]	; (801bcf0 <etharp_output+0x1ec>)
 801bb38:	f002 fff8 	bl	801eb2c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d106      	bne.n	801bb50 <etharp_output+0x4c>
 801bb42:	4b69      	ldr	r3, [pc, #420]	; (801bce8 <etharp_output+0x1e4>)
 801bb44:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bb48:	496b      	ldr	r1, [pc, #428]	; (801bcf8 <etharp_output+0x1f4>)
 801bb4a:	4869      	ldr	r0, [pc, #420]	; (801bcf0 <etharp_output+0x1ec>)
 801bb4c:	f002 ffee 	bl	801eb2c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	68f9      	ldr	r1, [r7, #12]
 801bb56:	4618      	mov	r0, r3
 801bb58:	f000 ff1c 	bl	801c994 <ip4_addr_isbroadcast_u32>
 801bb5c:	4603      	mov	r3, r0
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d002      	beq.n	801bb68 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801bb62:	4b66      	ldr	r3, [pc, #408]	; (801bcfc <etharp_output+0x1f8>)
 801bb64:	61fb      	str	r3, [r7, #28]
 801bb66:	e0af      	b.n	801bcc8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bb70:	2be0      	cmp	r3, #224	; 0xe0
 801bb72:	d118      	bne.n	801bba6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801bb74:	2301      	movs	r3, #1
 801bb76:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801bb78:	2300      	movs	r3, #0
 801bb7a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801bb7c:	235e      	movs	r3, #94	; 0x5e
 801bb7e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	3301      	adds	r3, #1
 801bb84:	781b      	ldrb	r3, [r3, #0]
 801bb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bb8a:	b2db      	uxtb	r3, r3
 801bb8c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	3302      	adds	r3, #2
 801bb92:	781b      	ldrb	r3, [r3, #0]
 801bb94:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	3303      	adds	r3, #3
 801bb9a:	781b      	ldrb	r3, [r3, #0]
 801bb9c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801bb9e:	f107 0310 	add.w	r3, r7, #16
 801bba2:	61fb      	str	r3, [r7, #28]
 801bba4:	e090      	b.n	801bcc8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	681a      	ldr	r2, [r3, #0]
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	3304      	adds	r3, #4
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	405a      	eors	r2, r3
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	3308      	adds	r3, #8
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	4013      	ands	r3, r2
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d012      	beq.n	801bbe4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bbc4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801bbc8:	4293      	cmp	r3, r2
 801bbca:	d00b      	beq.n	801bbe4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801bbcc:	68fb      	ldr	r3, [r7, #12]
 801bbce:	330c      	adds	r3, #12
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	d003      	beq.n	801bbde <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801bbd6:	68fb      	ldr	r3, [r7, #12]
 801bbd8:	330c      	adds	r3, #12
 801bbda:	61bb      	str	r3, [r7, #24]
 801bbdc:	e002      	b.n	801bbe4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801bbde:	f06f 0303 	mvn.w	r3, #3
 801bbe2:	e07d      	b.n	801bce0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bbe4:	4b46      	ldr	r3, [pc, #280]	; (801bd00 <etharp_output+0x1fc>)
 801bbe6:	781b      	ldrb	r3, [r3, #0]
 801bbe8:	4619      	mov	r1, r3
 801bbea:	4a46      	ldr	r2, [pc, #280]	; (801bd04 <etharp_output+0x200>)
 801bbec:	460b      	mov	r3, r1
 801bbee:	005b      	lsls	r3, r3, #1
 801bbf0:	440b      	add	r3, r1
 801bbf2:	00db      	lsls	r3, r3, #3
 801bbf4:	4413      	add	r3, r2
 801bbf6:	3314      	adds	r3, #20
 801bbf8:	781b      	ldrb	r3, [r3, #0]
 801bbfa:	2b01      	cmp	r3, #1
 801bbfc:	d925      	bls.n	801bc4a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bbfe:	4b40      	ldr	r3, [pc, #256]	; (801bd00 <etharp_output+0x1fc>)
 801bc00:	781b      	ldrb	r3, [r3, #0]
 801bc02:	4619      	mov	r1, r3
 801bc04:	4a3f      	ldr	r2, [pc, #252]	; (801bd04 <etharp_output+0x200>)
 801bc06:	460b      	mov	r3, r1
 801bc08:	005b      	lsls	r3, r3, #1
 801bc0a:	440b      	add	r3, r1
 801bc0c:	00db      	lsls	r3, r3, #3
 801bc0e:	4413      	add	r3, r2
 801bc10:	3308      	adds	r3, #8
 801bc12:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bc14:	68fa      	ldr	r2, [r7, #12]
 801bc16:	429a      	cmp	r2, r3
 801bc18:	d117      	bne.n	801bc4a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801bc1a:	69bb      	ldr	r3, [r7, #24]
 801bc1c:	681a      	ldr	r2, [r3, #0]
 801bc1e:	4b38      	ldr	r3, [pc, #224]	; (801bd00 <etharp_output+0x1fc>)
 801bc20:	781b      	ldrb	r3, [r3, #0]
 801bc22:	4618      	mov	r0, r3
 801bc24:	4937      	ldr	r1, [pc, #220]	; (801bd04 <etharp_output+0x200>)
 801bc26:	4603      	mov	r3, r0
 801bc28:	005b      	lsls	r3, r3, #1
 801bc2a:	4403      	add	r3, r0
 801bc2c:	00db      	lsls	r3, r3, #3
 801bc2e:	440b      	add	r3, r1
 801bc30:	3304      	adds	r3, #4
 801bc32:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bc34:	429a      	cmp	r2, r3
 801bc36:	d108      	bne.n	801bc4a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801bc38:	4b31      	ldr	r3, [pc, #196]	; (801bd00 <etharp_output+0x1fc>)
 801bc3a:	781b      	ldrb	r3, [r3, #0]
 801bc3c:	461a      	mov	r2, r3
 801bc3e:	68b9      	ldr	r1, [r7, #8]
 801bc40:	68f8      	ldr	r0, [r7, #12]
 801bc42:	f7ff fec5 	bl	801b9d0 <etharp_output_to_arp_index>
 801bc46:	4603      	mov	r3, r0
 801bc48:	e04a      	b.n	801bce0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	75fb      	strb	r3, [r7, #23]
 801bc4e:	e031      	b.n	801bcb4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bc50:	7dfa      	ldrb	r2, [r7, #23]
 801bc52:	492c      	ldr	r1, [pc, #176]	; (801bd04 <etharp_output+0x200>)
 801bc54:	4613      	mov	r3, r2
 801bc56:	005b      	lsls	r3, r3, #1
 801bc58:	4413      	add	r3, r2
 801bc5a:	00db      	lsls	r3, r3, #3
 801bc5c:	440b      	add	r3, r1
 801bc5e:	3314      	adds	r3, #20
 801bc60:	781b      	ldrb	r3, [r3, #0]
 801bc62:	2b01      	cmp	r3, #1
 801bc64:	d923      	bls.n	801bcae <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801bc66:	7dfa      	ldrb	r2, [r7, #23]
 801bc68:	4926      	ldr	r1, [pc, #152]	; (801bd04 <etharp_output+0x200>)
 801bc6a:	4613      	mov	r3, r2
 801bc6c:	005b      	lsls	r3, r3, #1
 801bc6e:	4413      	add	r3, r2
 801bc70:	00db      	lsls	r3, r3, #3
 801bc72:	440b      	add	r3, r1
 801bc74:	3308      	adds	r3, #8
 801bc76:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bc78:	68fa      	ldr	r2, [r7, #12]
 801bc7a:	429a      	cmp	r2, r3
 801bc7c:	d117      	bne.n	801bcae <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801bc7e:	69bb      	ldr	r3, [r7, #24]
 801bc80:	6819      	ldr	r1, [r3, #0]
 801bc82:	7dfa      	ldrb	r2, [r7, #23]
 801bc84:	481f      	ldr	r0, [pc, #124]	; (801bd04 <etharp_output+0x200>)
 801bc86:	4613      	mov	r3, r2
 801bc88:	005b      	lsls	r3, r3, #1
 801bc8a:	4413      	add	r3, r2
 801bc8c:	00db      	lsls	r3, r3, #3
 801bc8e:	4403      	add	r3, r0
 801bc90:	3304      	adds	r3, #4
 801bc92:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801bc94:	4299      	cmp	r1, r3
 801bc96:	d10a      	bne.n	801bcae <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801bc98:	4a19      	ldr	r2, [pc, #100]	; (801bd00 <etharp_output+0x1fc>)
 801bc9a:	7dfb      	ldrb	r3, [r7, #23]
 801bc9c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801bc9e:	7dfb      	ldrb	r3, [r7, #23]
 801bca0:	461a      	mov	r2, r3
 801bca2:	68b9      	ldr	r1, [r7, #8]
 801bca4:	68f8      	ldr	r0, [r7, #12]
 801bca6:	f7ff fe93 	bl	801b9d0 <etharp_output_to_arp_index>
 801bcaa:	4603      	mov	r3, r0
 801bcac:	e018      	b.n	801bce0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bcae:	7dfb      	ldrb	r3, [r7, #23]
 801bcb0:	3301      	adds	r3, #1
 801bcb2:	75fb      	strb	r3, [r7, #23]
 801bcb4:	7dfb      	ldrb	r3, [r7, #23]
 801bcb6:	2b09      	cmp	r3, #9
 801bcb8:	d9ca      	bls.n	801bc50 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801bcba:	68ba      	ldr	r2, [r7, #8]
 801bcbc:	69b9      	ldr	r1, [r7, #24]
 801bcbe:	68f8      	ldr	r0, [r7, #12]
 801bcc0:	f000 f822 	bl	801bd08 <etharp_query>
 801bcc4:	4603      	mov	r3, r0
 801bcc6:	e00b      	b.n	801bce0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801bcce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bcd2:	9300      	str	r3, [sp, #0]
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	68b9      	ldr	r1, [r7, #8]
 801bcd8:	68f8      	ldr	r0, [r7, #12]
 801bcda:	f001 fe8d 	bl	801d9f8 <ethernet_output>
 801bcde:	4603      	mov	r3, r0
}
 801bce0:	4618      	mov	r0, r3
 801bce2:	3720      	adds	r7, #32
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd80      	pop	{r7, pc}
 801bce8:	08025df8 	.word	0x08025df8
 801bcec:	08025f48 	.word	0x08025f48
 801bcf0:	08025e70 	.word	0x08025e70
 801bcf4:	08025f98 	.word	0x08025f98
 801bcf8:	08025f38 	.word	0x08025f38
 801bcfc:	080267a8 	.word	0x080267a8
 801bd00:	2001449c 	.word	0x2001449c
 801bd04:	200143ac 	.word	0x200143ac

0801bd08 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b08c      	sub	sp, #48	; 0x30
 801bd0c:	af02      	add	r7, sp, #8
 801bd0e:	60f8      	str	r0, [r7, #12]
 801bd10:	60b9      	str	r1, [r7, #8]
 801bd12:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	332a      	adds	r3, #42	; 0x2a
 801bd18:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801bd1a:	23ff      	movs	r3, #255	; 0xff
 801bd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801bd20:	2300      	movs	r3, #0
 801bd22:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bd24:	68bb      	ldr	r3, [r7, #8]
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	68f9      	ldr	r1, [r7, #12]
 801bd2a:	4618      	mov	r0, r3
 801bd2c:	f000 fe32 	bl	801c994 <ip4_addr_isbroadcast_u32>
 801bd30:	4603      	mov	r3, r0
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d10c      	bne.n	801bd50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bd36:	68bb      	ldr	r3, [r7, #8]
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bd3e:	2be0      	cmp	r3, #224	; 0xe0
 801bd40:	d006      	beq.n	801bd50 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bd42:	68bb      	ldr	r3, [r7, #8]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d003      	beq.n	801bd50 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d102      	bne.n	801bd56 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bd50:	f06f 030f 	mvn.w	r3, #15
 801bd54:	e101      	b.n	801bf5a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801bd56:	68fa      	ldr	r2, [r7, #12]
 801bd58:	2101      	movs	r1, #1
 801bd5a:	68b8      	ldr	r0, [r7, #8]
 801bd5c:	f7ff fb5c 	bl	801b418 <etharp_find_entry>
 801bd60:	4603      	mov	r3, r0
 801bd62:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801bd64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	da02      	bge.n	801bd72 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801bd6c:	8a7b      	ldrh	r3, [r7, #18]
 801bd6e:	b25b      	sxtb	r3, r3
 801bd70:	e0f3      	b.n	801bf5a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801bd72:	8a7b      	ldrh	r3, [r7, #18]
 801bd74:	2b7e      	cmp	r3, #126	; 0x7e
 801bd76:	d906      	bls.n	801bd86 <etharp_query+0x7e>
 801bd78:	4b7a      	ldr	r3, [pc, #488]	; (801bf64 <etharp_query+0x25c>)
 801bd7a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801bd7e:	497a      	ldr	r1, [pc, #488]	; (801bf68 <etharp_query+0x260>)
 801bd80:	487a      	ldr	r0, [pc, #488]	; (801bf6c <etharp_query+0x264>)
 801bd82:	f002 fed3 	bl	801eb2c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801bd86:	8a7b      	ldrh	r3, [r7, #18]
 801bd88:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801bd8a:	7c7a      	ldrb	r2, [r7, #17]
 801bd8c:	4978      	ldr	r1, [pc, #480]	; (801bf70 <etharp_query+0x268>)
 801bd8e:	4613      	mov	r3, r2
 801bd90:	005b      	lsls	r3, r3, #1
 801bd92:	4413      	add	r3, r2
 801bd94:	00db      	lsls	r3, r3, #3
 801bd96:	440b      	add	r3, r1
 801bd98:	3314      	adds	r3, #20
 801bd9a:	781b      	ldrb	r3, [r3, #0]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d115      	bne.n	801bdcc <etharp_query+0xc4>
    is_new_entry = 1;
 801bda0:	2301      	movs	r3, #1
 801bda2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801bda4:	7c7a      	ldrb	r2, [r7, #17]
 801bda6:	4972      	ldr	r1, [pc, #456]	; (801bf70 <etharp_query+0x268>)
 801bda8:	4613      	mov	r3, r2
 801bdaa:	005b      	lsls	r3, r3, #1
 801bdac:	4413      	add	r3, r2
 801bdae:	00db      	lsls	r3, r3, #3
 801bdb0:	440b      	add	r3, r1
 801bdb2:	3314      	adds	r3, #20
 801bdb4:	2201      	movs	r2, #1
 801bdb6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801bdb8:	7c7a      	ldrb	r2, [r7, #17]
 801bdba:	496d      	ldr	r1, [pc, #436]	; (801bf70 <etharp_query+0x268>)
 801bdbc:	4613      	mov	r3, r2
 801bdbe:	005b      	lsls	r3, r3, #1
 801bdc0:	4413      	add	r3, r2
 801bdc2:	00db      	lsls	r3, r3, #3
 801bdc4:	440b      	add	r3, r1
 801bdc6:	3308      	adds	r3, #8
 801bdc8:	68fa      	ldr	r2, [r7, #12]
 801bdca:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801bdcc:	7c7a      	ldrb	r2, [r7, #17]
 801bdce:	4968      	ldr	r1, [pc, #416]	; (801bf70 <etharp_query+0x268>)
 801bdd0:	4613      	mov	r3, r2
 801bdd2:	005b      	lsls	r3, r3, #1
 801bdd4:	4413      	add	r3, r2
 801bdd6:	00db      	lsls	r3, r3, #3
 801bdd8:	440b      	add	r3, r1
 801bdda:	3314      	adds	r3, #20
 801bddc:	781b      	ldrb	r3, [r3, #0]
 801bdde:	2b01      	cmp	r3, #1
 801bde0:	d011      	beq.n	801be06 <etharp_query+0xfe>
 801bde2:	7c7a      	ldrb	r2, [r7, #17]
 801bde4:	4962      	ldr	r1, [pc, #392]	; (801bf70 <etharp_query+0x268>)
 801bde6:	4613      	mov	r3, r2
 801bde8:	005b      	lsls	r3, r3, #1
 801bdea:	4413      	add	r3, r2
 801bdec:	00db      	lsls	r3, r3, #3
 801bdee:	440b      	add	r3, r1
 801bdf0:	3314      	adds	r3, #20
 801bdf2:	781b      	ldrb	r3, [r3, #0]
 801bdf4:	2b01      	cmp	r3, #1
 801bdf6:	d806      	bhi.n	801be06 <etharp_query+0xfe>
 801bdf8:	4b5a      	ldr	r3, [pc, #360]	; (801bf64 <etharp_query+0x25c>)
 801bdfa:	f240 32cd 	movw	r2, #973	; 0x3cd
 801bdfe:	495d      	ldr	r1, [pc, #372]	; (801bf74 <etharp_query+0x26c>)
 801be00:	485a      	ldr	r0, [pc, #360]	; (801bf6c <etharp_query+0x264>)
 801be02:	f002 fe93 	bl	801eb2c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801be06:	6a3b      	ldr	r3, [r7, #32]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d102      	bne.n	801be12 <etharp_query+0x10a>
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d10c      	bne.n	801be2c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801be12:	68b9      	ldr	r1, [r7, #8]
 801be14:	68f8      	ldr	r0, [r7, #12]
 801be16:	f000 f963 	bl	801c0e0 <etharp_request>
 801be1a:	4603      	mov	r3, r0
 801be1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	2b00      	cmp	r3, #0
 801be24:	d102      	bne.n	801be2c <etharp_query+0x124>
      return result;
 801be26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801be2a:	e096      	b.n	801bf5a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d106      	bne.n	801be40 <etharp_query+0x138>
 801be32:	4b4c      	ldr	r3, [pc, #304]	; (801bf64 <etharp_query+0x25c>)
 801be34:	f240 32e1 	movw	r2, #993	; 0x3e1
 801be38:	494f      	ldr	r1, [pc, #316]	; (801bf78 <etharp_query+0x270>)
 801be3a:	484c      	ldr	r0, [pc, #304]	; (801bf6c <etharp_query+0x264>)
 801be3c:	f002 fe76 	bl	801eb2c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801be40:	7c7a      	ldrb	r2, [r7, #17]
 801be42:	494b      	ldr	r1, [pc, #300]	; (801bf70 <etharp_query+0x268>)
 801be44:	4613      	mov	r3, r2
 801be46:	005b      	lsls	r3, r3, #1
 801be48:	4413      	add	r3, r2
 801be4a:	00db      	lsls	r3, r3, #3
 801be4c:	440b      	add	r3, r1
 801be4e:	3314      	adds	r3, #20
 801be50:	781b      	ldrb	r3, [r3, #0]
 801be52:	2b01      	cmp	r3, #1
 801be54:	d917      	bls.n	801be86 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801be56:	4a49      	ldr	r2, [pc, #292]	; (801bf7c <etharp_query+0x274>)
 801be58:	7c7b      	ldrb	r3, [r7, #17]
 801be5a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801be5c:	7c7a      	ldrb	r2, [r7, #17]
 801be5e:	4613      	mov	r3, r2
 801be60:	005b      	lsls	r3, r3, #1
 801be62:	4413      	add	r3, r2
 801be64:	00db      	lsls	r3, r3, #3
 801be66:	3308      	adds	r3, #8
 801be68:	4a41      	ldr	r2, [pc, #260]	; (801bf70 <etharp_query+0x268>)
 801be6a:	4413      	add	r3, r2
 801be6c:	3304      	adds	r3, #4
 801be6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801be72:	9200      	str	r2, [sp, #0]
 801be74:	697a      	ldr	r2, [r7, #20]
 801be76:	6879      	ldr	r1, [r7, #4]
 801be78:	68f8      	ldr	r0, [r7, #12]
 801be7a:	f001 fdbd 	bl	801d9f8 <ethernet_output>
 801be7e:	4603      	mov	r3, r0
 801be80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801be84:	e067      	b.n	801bf56 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801be86:	7c7a      	ldrb	r2, [r7, #17]
 801be88:	4939      	ldr	r1, [pc, #228]	; (801bf70 <etharp_query+0x268>)
 801be8a:	4613      	mov	r3, r2
 801be8c:	005b      	lsls	r3, r3, #1
 801be8e:	4413      	add	r3, r2
 801be90:	00db      	lsls	r3, r3, #3
 801be92:	440b      	add	r3, r1
 801be94:	3314      	adds	r3, #20
 801be96:	781b      	ldrb	r3, [r3, #0]
 801be98:	2b01      	cmp	r3, #1
 801be9a:	d15c      	bne.n	801bf56 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801be9c:	2300      	movs	r3, #0
 801be9e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bea4:	e01c      	b.n	801bee0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801bea6:	69fb      	ldr	r3, [r7, #28]
 801bea8:	895a      	ldrh	r2, [r3, #10]
 801beaa:	69fb      	ldr	r3, [r7, #28]
 801beac:	891b      	ldrh	r3, [r3, #8]
 801beae:	429a      	cmp	r2, r3
 801beb0:	d10a      	bne.n	801bec8 <etharp_query+0x1c0>
 801beb2:	69fb      	ldr	r3, [r7, #28]
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d006      	beq.n	801bec8 <etharp_query+0x1c0>
 801beba:	4b2a      	ldr	r3, [pc, #168]	; (801bf64 <etharp_query+0x25c>)
 801bebc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801bec0:	492f      	ldr	r1, [pc, #188]	; (801bf80 <etharp_query+0x278>)
 801bec2:	482a      	ldr	r0, [pc, #168]	; (801bf6c <etharp_query+0x264>)
 801bec4:	f002 fe32 	bl	801eb2c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801bec8:	69fb      	ldr	r3, [r7, #28]
 801beca:	7b1b      	ldrb	r3, [r3, #12]
 801becc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d002      	beq.n	801beda <etharp_query+0x1d2>
        copy_needed = 1;
 801bed4:	2301      	movs	r3, #1
 801bed6:	61bb      	str	r3, [r7, #24]
        break;
 801bed8:	e005      	b.n	801bee6 <etharp_query+0x1de>
      }
      p = p->next;
 801beda:	69fb      	ldr	r3, [r7, #28]
 801bedc:	681b      	ldr	r3, [r3, #0]
 801bede:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bee0:	69fb      	ldr	r3, [r7, #28]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d1df      	bne.n	801bea6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801bee6:	69bb      	ldr	r3, [r7, #24]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d007      	beq.n	801befc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801beec:	687a      	ldr	r2, [r7, #4]
 801beee:	f44f 7120 	mov.w	r1, #640	; 0x280
 801bef2:	200e      	movs	r0, #14
 801bef4:	f7f6 f922 	bl	801213c <pbuf_clone>
 801bef8:	61f8      	str	r0, [r7, #28]
 801befa:	e004      	b.n	801bf06 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801bf00:	69f8      	ldr	r0, [r7, #28]
 801bf02:	f7f5 fe11 	bl	8011b28 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801bf06:	69fb      	ldr	r3, [r7, #28]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d021      	beq.n	801bf50 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801bf0c:	7c7a      	ldrb	r2, [r7, #17]
 801bf0e:	4918      	ldr	r1, [pc, #96]	; (801bf70 <etharp_query+0x268>)
 801bf10:	4613      	mov	r3, r2
 801bf12:	005b      	lsls	r3, r3, #1
 801bf14:	4413      	add	r3, r2
 801bf16:	00db      	lsls	r3, r3, #3
 801bf18:	440b      	add	r3, r1
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	2b00      	cmp	r3, #0
 801bf1e:	d00a      	beq.n	801bf36 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801bf20:	7c7a      	ldrb	r2, [r7, #17]
 801bf22:	4913      	ldr	r1, [pc, #76]	; (801bf70 <etharp_query+0x268>)
 801bf24:	4613      	mov	r3, r2
 801bf26:	005b      	lsls	r3, r3, #1
 801bf28:	4413      	add	r3, r2
 801bf2a:	00db      	lsls	r3, r3, #3
 801bf2c:	440b      	add	r3, r1
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	4618      	mov	r0, r3
 801bf32:	f7f5 fd53 	bl	80119dc <pbuf_free>
      }
      arp_table[i].q = p;
 801bf36:	7c7a      	ldrb	r2, [r7, #17]
 801bf38:	490d      	ldr	r1, [pc, #52]	; (801bf70 <etharp_query+0x268>)
 801bf3a:	4613      	mov	r3, r2
 801bf3c:	005b      	lsls	r3, r3, #1
 801bf3e:	4413      	add	r3, r2
 801bf40:	00db      	lsls	r3, r3, #3
 801bf42:	440b      	add	r3, r1
 801bf44:	69fa      	ldr	r2, [r7, #28]
 801bf46:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801bf48:	2300      	movs	r3, #0
 801bf4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bf4e:	e002      	b.n	801bf56 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801bf50:	23ff      	movs	r3, #255	; 0xff
 801bf52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801bf56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	3728      	adds	r7, #40	; 0x28
 801bf5e:	46bd      	mov	sp, r7
 801bf60:	bd80      	pop	{r7, pc}
 801bf62:	bf00      	nop
 801bf64:	08025df8 	.word	0x08025df8
 801bf68:	08025fa4 	.word	0x08025fa4
 801bf6c:	08025e70 	.word	0x08025e70
 801bf70:	200143ac 	.word	0x200143ac
 801bf74:	08025fb4 	.word	0x08025fb4
 801bf78:	08025f98 	.word	0x08025f98
 801bf7c:	2001449c 	.word	0x2001449c
 801bf80:	08025fdc 	.word	0x08025fdc

0801bf84 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801bf84:	b580      	push	{r7, lr}
 801bf86:	b08a      	sub	sp, #40	; 0x28
 801bf88:	af02      	add	r7, sp, #8
 801bf8a:	60f8      	str	r0, [r7, #12]
 801bf8c:	60b9      	str	r1, [r7, #8]
 801bf8e:	607a      	str	r2, [r7, #4]
 801bf90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801bf92:	2300      	movs	r3, #0
 801bf94:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bf96:	68fb      	ldr	r3, [r7, #12]
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d106      	bne.n	801bfaa <etharp_raw+0x26>
 801bf9c:	4b3a      	ldr	r3, [pc, #232]	; (801c088 <etharp_raw+0x104>)
 801bf9e:	f240 4257 	movw	r2, #1111	; 0x457
 801bfa2:	493a      	ldr	r1, [pc, #232]	; (801c08c <etharp_raw+0x108>)
 801bfa4:	483a      	ldr	r0, [pc, #232]	; (801c090 <etharp_raw+0x10c>)
 801bfa6:	f002 fdc1 	bl	801eb2c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801bfaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bfae:	211c      	movs	r1, #28
 801bfb0:	200e      	movs	r0, #14
 801bfb2:	f7f5 f9fd 	bl	80113b0 <pbuf_alloc>
 801bfb6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801bfb8:	69bb      	ldr	r3, [r7, #24]
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d102      	bne.n	801bfc4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801bfbe:	f04f 33ff 	mov.w	r3, #4294967295
 801bfc2:	e05d      	b.n	801c080 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801bfc4:	69bb      	ldr	r3, [r7, #24]
 801bfc6:	895b      	ldrh	r3, [r3, #10]
 801bfc8:	2b1b      	cmp	r3, #27
 801bfca:	d806      	bhi.n	801bfda <etharp_raw+0x56>
 801bfcc:	4b2e      	ldr	r3, [pc, #184]	; (801c088 <etharp_raw+0x104>)
 801bfce:	f240 4262 	movw	r2, #1122	; 0x462
 801bfd2:	4930      	ldr	r1, [pc, #192]	; (801c094 <etharp_raw+0x110>)
 801bfd4:	482e      	ldr	r0, [pc, #184]	; (801c090 <etharp_raw+0x10c>)
 801bfd6:	f002 fda9 	bl	801eb2c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801bfda:	69bb      	ldr	r3, [r7, #24]
 801bfdc:	685b      	ldr	r3, [r3, #4]
 801bfde:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801bfe0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bfe2:	4618      	mov	r0, r3
 801bfe4:	f7f3 f93a 	bl	800f25c <lwip_htons>
 801bfe8:	4603      	mov	r3, r0
 801bfea:	461a      	mov	r2, r3
 801bfec:	697b      	ldr	r3, [r7, #20]
 801bfee:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bff6:	2b06      	cmp	r3, #6
 801bff8:	d006      	beq.n	801c008 <etharp_raw+0x84>
 801bffa:	4b23      	ldr	r3, [pc, #140]	; (801c088 <etharp_raw+0x104>)
 801bffc:	f240 4269 	movw	r2, #1129	; 0x469
 801c000:	4925      	ldr	r1, [pc, #148]	; (801c098 <etharp_raw+0x114>)
 801c002:	4823      	ldr	r0, [pc, #140]	; (801c090 <etharp_raw+0x10c>)
 801c004:	f002 fd92 	bl	801eb2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c008:	697b      	ldr	r3, [r7, #20]
 801c00a:	3308      	adds	r3, #8
 801c00c:	2206      	movs	r2, #6
 801c00e:	6839      	ldr	r1, [r7, #0]
 801c010:	4618      	mov	r0, r3
 801c012:	f002 f847 	bl	801e0a4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c016:	697b      	ldr	r3, [r7, #20]
 801c018:	3312      	adds	r3, #18
 801c01a:	2206      	movs	r2, #6
 801c01c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c01e:	4618      	mov	r0, r3
 801c020:	f002 f840 	bl	801e0a4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c024:	697b      	ldr	r3, [r7, #20]
 801c026:	330e      	adds	r3, #14
 801c028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c02a:	6812      	ldr	r2, [r2, #0]
 801c02c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c02e:	697b      	ldr	r3, [r7, #20]
 801c030:	3318      	adds	r3, #24
 801c032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c034:	6812      	ldr	r2, [r2, #0]
 801c036:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c038:	697b      	ldr	r3, [r7, #20]
 801c03a:	2200      	movs	r2, #0
 801c03c:	701a      	strb	r2, [r3, #0]
 801c03e:	2200      	movs	r2, #0
 801c040:	f042 0201 	orr.w	r2, r2, #1
 801c044:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c046:	697b      	ldr	r3, [r7, #20]
 801c048:	2200      	movs	r2, #0
 801c04a:	f042 0208 	orr.w	r2, r2, #8
 801c04e:	709a      	strb	r2, [r3, #2]
 801c050:	2200      	movs	r2, #0
 801c052:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c054:	697b      	ldr	r3, [r7, #20]
 801c056:	2206      	movs	r2, #6
 801c058:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c05a:	697b      	ldr	r3, [r7, #20]
 801c05c:	2204      	movs	r2, #4
 801c05e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c060:	f640 0306 	movw	r3, #2054	; 0x806
 801c064:	9300      	str	r3, [sp, #0]
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	68ba      	ldr	r2, [r7, #8]
 801c06a:	69b9      	ldr	r1, [r7, #24]
 801c06c:	68f8      	ldr	r0, [r7, #12]
 801c06e:	f001 fcc3 	bl	801d9f8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c072:	69b8      	ldr	r0, [r7, #24]
 801c074:	f7f5 fcb2 	bl	80119dc <pbuf_free>
  p = NULL;
 801c078:	2300      	movs	r3, #0
 801c07a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c07c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c080:	4618      	mov	r0, r3
 801c082:	3720      	adds	r7, #32
 801c084:	46bd      	mov	sp, r7
 801c086:	bd80      	pop	{r7, pc}
 801c088:	08025df8 	.word	0x08025df8
 801c08c:	08025f48 	.word	0x08025f48
 801c090:	08025e70 	.word	0x08025e70
 801c094:	08025ff8 	.word	0x08025ff8
 801c098:	0802602c 	.word	0x0802602c

0801c09c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b088      	sub	sp, #32
 801c0a0:	af04      	add	r7, sp, #16
 801c0a2:	60f8      	str	r0, [r7, #12]
 801c0a4:	60b9      	str	r1, [r7, #8]
 801c0a6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c0a8:	68fb      	ldr	r3, [r7, #12]
 801c0aa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c0b4:	68fb      	ldr	r3, [r7, #12]
 801c0b6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c0b8:	2201      	movs	r2, #1
 801c0ba:	9203      	str	r2, [sp, #12]
 801c0bc:	68ba      	ldr	r2, [r7, #8]
 801c0be:	9202      	str	r2, [sp, #8]
 801c0c0:	4a06      	ldr	r2, [pc, #24]	; (801c0dc <etharp_request_dst+0x40>)
 801c0c2:	9201      	str	r2, [sp, #4]
 801c0c4:	9300      	str	r3, [sp, #0]
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	687a      	ldr	r2, [r7, #4]
 801c0ca:	68f8      	ldr	r0, [r7, #12]
 801c0cc:	f7ff ff5a 	bl	801bf84 <etharp_raw>
 801c0d0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c0d2:	4618      	mov	r0, r3
 801c0d4:	3710      	adds	r7, #16
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	bd80      	pop	{r7, pc}
 801c0da:	bf00      	nop
 801c0dc:	080267b0 	.word	0x080267b0

0801c0e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c0e0:	b580      	push	{r7, lr}
 801c0e2:	b082      	sub	sp, #8
 801c0e4:	af00      	add	r7, sp, #0
 801c0e6:	6078      	str	r0, [r7, #4]
 801c0e8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c0ea:	4a05      	ldr	r2, [pc, #20]	; (801c100 <etharp_request+0x20>)
 801c0ec:	6839      	ldr	r1, [r7, #0]
 801c0ee:	6878      	ldr	r0, [r7, #4]
 801c0f0:	f7ff ffd4 	bl	801c09c <etharp_request_dst>
 801c0f4:	4603      	mov	r3, r0
}
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	3708      	adds	r7, #8
 801c0fa:	46bd      	mov	sp, r7
 801c0fc:	bd80      	pop	{r7, pc}
 801c0fe:	bf00      	nop
 801c100:	080267a8 	.word	0x080267a8

0801c104 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c104:	b580      	push	{r7, lr}
 801c106:	b08e      	sub	sp, #56	; 0x38
 801c108:	af04      	add	r7, sp, #16
 801c10a:	6078      	str	r0, [r7, #4]
 801c10c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c10e:	4b7c      	ldr	r3, [pc, #496]	; (801c300 <icmp_input+0x1fc>)
 801c110:	689b      	ldr	r3, [r3, #8]
 801c112:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c116:	781b      	ldrb	r3, [r3, #0]
 801c118:	f003 030f 	and.w	r3, r3, #15
 801c11c:	b2db      	uxtb	r3, r3
 801c11e:	009b      	lsls	r3, r3, #2
 801c120:	b2db      	uxtb	r3, r3
 801c122:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c126:	2b13      	cmp	r3, #19
 801c128:	f240 80d2 	bls.w	801c2d0 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	895b      	ldrh	r3, [r3, #10]
 801c130:	2b03      	cmp	r3, #3
 801c132:	f240 80cf 	bls.w	801c2d4 <icmp_input+0x1d0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	685b      	ldr	r3, [r3, #4]
 801c13a:	781b      	ldrb	r3, [r3, #0]
 801c13c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	685b      	ldr	r3, [r3, #4]
 801c144:	785b      	ldrb	r3, [r3, #1]
 801c146:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c14a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c14e:	2b00      	cmp	r3, #0
 801c150:	f000 80b7 	beq.w	801c2c2 <icmp_input+0x1be>
 801c154:	2b08      	cmp	r3, #8
 801c156:	f040 80b7 	bne.w	801c2c8 <icmp_input+0x1c4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c15a:	4b6a      	ldr	r3, [pc, #424]	; (801c304 <icmp_input+0x200>)
 801c15c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c15e:	4b68      	ldr	r3, [pc, #416]	; (801c300 <icmp_input+0x1fc>)
 801c160:	695b      	ldr	r3, [r3, #20]
 801c162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c166:	2be0      	cmp	r3, #224	; 0xe0
 801c168:	f000 80bb 	beq.w	801c2e2 <icmp_input+0x1de>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c16c:	4b64      	ldr	r3, [pc, #400]	; (801c300 <icmp_input+0x1fc>)
 801c16e:	695b      	ldr	r3, [r3, #20]
 801c170:	4a63      	ldr	r2, [pc, #396]	; (801c300 <icmp_input+0x1fc>)
 801c172:	6812      	ldr	r2, [r2, #0]
 801c174:	4611      	mov	r1, r2
 801c176:	4618      	mov	r0, r3
 801c178:	f000 fc0c 	bl	801c994 <ip4_addr_isbroadcast_u32>
 801c17c:	4603      	mov	r3, r0
 801c17e:	2b00      	cmp	r3, #0
 801c180:	f040 80b1 	bne.w	801c2e6 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	891b      	ldrh	r3, [r3, #8]
 801c188:	2b07      	cmp	r3, #7
 801c18a:	f240 80a5 	bls.w	801c2d8 <icmp_input+0x1d4>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c18e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c190:	330e      	adds	r3, #14
 801c192:	4619      	mov	r1, r3
 801c194:	6878      	ldr	r0, [r7, #4]
 801c196:	f7f5 fb59 	bl	801184c <pbuf_add_header>
 801c19a:	4603      	mov	r3, r0
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d04b      	beq.n	801c238 <icmp_input+0x134>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	891a      	ldrh	r2, [r3, #8]
 801c1a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c1a6:	4413      	add	r3, r2
 801c1a8:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	891b      	ldrh	r3, [r3, #8]
 801c1ae:	8b7a      	ldrh	r2, [r7, #26]
 801c1b0:	429a      	cmp	r2, r3
 801c1b2:	f0c0 809a 	bcc.w	801c2ea <icmp_input+0x1e6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c1b6:	8b7b      	ldrh	r3, [r7, #26]
 801c1b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c1bc:	4619      	mov	r1, r3
 801c1be:	200e      	movs	r0, #14
 801c1c0:	f7f5 f8f6 	bl	80113b0 <pbuf_alloc>
 801c1c4:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c1c6:	697b      	ldr	r3, [r7, #20]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	f000 8090 	beq.w	801c2ee <icmp_input+0x1ea>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c1ce:	697b      	ldr	r3, [r7, #20]
 801c1d0:	895b      	ldrh	r3, [r3, #10]
 801c1d2:	461a      	mov	r2, r3
 801c1d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c1d6:	3308      	adds	r3, #8
 801c1d8:	429a      	cmp	r2, r3
 801c1da:	d203      	bcs.n	801c1e4 <icmp_input+0xe0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c1dc:	6978      	ldr	r0, [r7, #20]
 801c1de:	f7f5 fbfd 	bl	80119dc <pbuf_free>
          goto icmperr;
 801c1e2:	e085      	b.n	801c2f0 <icmp_input+0x1ec>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c1e4:	697b      	ldr	r3, [r7, #20]
 801c1e6:	685b      	ldr	r3, [r3, #4]
 801c1e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c1ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	f001 ff59 	bl	801e0a4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c1f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c1f4:	4619      	mov	r1, r3
 801c1f6:	6978      	ldr	r0, [r7, #20]
 801c1f8:	f7f5 fb38 	bl	801186c <pbuf_remove_header>
 801c1fc:	4603      	mov	r3, r0
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d009      	beq.n	801c216 <icmp_input+0x112>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c202:	4b41      	ldr	r3, [pc, #260]	; (801c308 <icmp_input+0x204>)
 801c204:	22b6      	movs	r2, #182	; 0xb6
 801c206:	4941      	ldr	r1, [pc, #260]	; (801c30c <icmp_input+0x208>)
 801c208:	4841      	ldr	r0, [pc, #260]	; (801c310 <icmp_input+0x20c>)
 801c20a:	f002 fc8f 	bl	801eb2c <iprintf>
          pbuf_free(r);
 801c20e:	6978      	ldr	r0, [r7, #20]
 801c210:	f7f5 fbe4 	bl	80119dc <pbuf_free>
          goto icmperr;
 801c214:	e06c      	b.n	801c2f0 <icmp_input+0x1ec>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c216:	6879      	ldr	r1, [r7, #4]
 801c218:	6978      	ldr	r0, [r7, #20]
 801c21a:	f7f5 fd13 	bl	8011c44 <pbuf_copy>
 801c21e:	4603      	mov	r3, r0
 801c220:	2b00      	cmp	r3, #0
 801c222:	d003      	beq.n	801c22c <icmp_input+0x128>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c224:	6978      	ldr	r0, [r7, #20]
 801c226:	f7f5 fbd9 	bl	80119dc <pbuf_free>
          goto icmperr;
 801c22a:	e061      	b.n	801c2f0 <icmp_input+0x1ec>
        }
        /* free the original p */
        pbuf_free(p);
 801c22c:	6878      	ldr	r0, [r7, #4]
 801c22e:	f7f5 fbd5 	bl	80119dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c232:	697b      	ldr	r3, [r7, #20]
 801c234:	607b      	str	r3, [r7, #4]
 801c236:	e00f      	b.n	801c258 <icmp_input+0x154>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c23a:	330e      	adds	r3, #14
 801c23c:	4619      	mov	r1, r3
 801c23e:	6878      	ldr	r0, [r7, #4]
 801c240:	f7f5 fb14 	bl	801186c <pbuf_remove_header>
 801c244:	4603      	mov	r3, r0
 801c246:	2b00      	cmp	r3, #0
 801c248:	d006      	beq.n	801c258 <icmp_input+0x154>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c24a:	4b2f      	ldr	r3, [pc, #188]	; (801c308 <icmp_input+0x204>)
 801c24c:	22c7      	movs	r2, #199	; 0xc7
 801c24e:	4931      	ldr	r1, [pc, #196]	; (801c314 <icmp_input+0x210>)
 801c250:	482f      	ldr	r0, [pc, #188]	; (801c310 <icmp_input+0x20c>)
 801c252:	f002 fc6b 	bl	801eb2c <iprintf>
          goto icmperr;
 801c256:	e04b      	b.n	801c2f0 <icmp_input+0x1ec>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	685b      	ldr	r3, [r3, #4]
 801c25c:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c25e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c260:	4619      	mov	r1, r3
 801c262:	6878      	ldr	r0, [r7, #4]
 801c264:	f7f5 faf2 	bl	801184c <pbuf_add_header>
 801c268:	4603      	mov	r3, r0
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d12b      	bne.n	801c2c6 <icmp_input+0x1c2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	685b      	ldr	r3, [r3, #4]
 801c272:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c274:	69fb      	ldr	r3, [r7, #28]
 801c276:	681a      	ldr	r2, [r3, #0]
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c27c:	4b20      	ldr	r3, [pc, #128]	; (801c300 <icmp_input+0x1fc>)
 801c27e:	691a      	ldr	r2, [r3, #16]
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c284:	693b      	ldr	r3, [r7, #16]
 801c286:	2200      	movs	r2, #0
 801c288:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c28a:	693b      	ldr	r3, [r7, #16]
 801c28c:	2200      	movs	r2, #0
 801c28e:	709a      	strb	r2, [r3, #2]
 801c290:	2200      	movs	r2, #0
 801c292:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	22ff      	movs	r2, #255	; 0xff
 801c298:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	2200      	movs	r2, #0
 801c29e:	729a      	strb	r2, [r3, #10]
 801c2a0:	2200      	movs	r2, #0
 801c2a2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c2a4:	683b      	ldr	r3, [r7, #0]
 801c2a6:	9302      	str	r3, [sp, #8]
 801c2a8:	2301      	movs	r3, #1
 801c2aa:	9301      	str	r3, [sp, #4]
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	9300      	str	r3, [sp, #0]
 801c2b0:	23ff      	movs	r3, #255	; 0xff
 801c2b2:	2200      	movs	r2, #0
 801c2b4:	69f9      	ldr	r1, [r7, #28]
 801c2b6:	6878      	ldr	r0, [r7, #4]
 801c2b8:	f000 fa94 	bl	801c7e4 <ip4_output_if>
 801c2bc:	4603      	mov	r3, r0
 801c2be:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c2c0:	e001      	b.n	801c2c6 <icmp_input+0x1c2>
      break;
 801c2c2:	bf00      	nop
 801c2c4:	e000      	b.n	801c2c8 <icmp_input+0x1c4>
      break;
 801c2c6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c2c8:	6878      	ldr	r0, [r7, #4]
 801c2ca:	f7f5 fb87 	bl	80119dc <pbuf_free>
  return;
 801c2ce:	e013      	b.n	801c2f8 <icmp_input+0x1f4>
    goto lenerr;
 801c2d0:	bf00      	nop
 801c2d2:	e002      	b.n	801c2da <icmp_input+0x1d6>
    goto lenerr;
 801c2d4:	bf00      	nop
 801c2d6:	e000      	b.n	801c2da <icmp_input+0x1d6>
        goto lenerr;
 801c2d8:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c2da:	6878      	ldr	r0, [r7, #4]
 801c2dc:	f7f5 fb7e 	bl	80119dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c2e0:	e00a      	b.n	801c2f8 <icmp_input+0x1f4>
        goto icmperr;
 801c2e2:	bf00      	nop
 801c2e4:	e004      	b.n	801c2f0 <icmp_input+0x1ec>
        goto icmperr;
 801c2e6:	bf00      	nop
 801c2e8:	e002      	b.n	801c2f0 <icmp_input+0x1ec>
          goto icmperr;
 801c2ea:	bf00      	nop
 801c2ec:	e000      	b.n	801c2f0 <icmp_input+0x1ec>
          goto icmperr;
 801c2ee:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c2f0:	6878      	ldr	r0, [r7, #4]
 801c2f2:	f7f5 fb73 	bl	80119dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c2f6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c2f8:	3728      	adds	r7, #40	; 0x28
 801c2fa:	46bd      	mov	sp, r7
 801c2fc:	bd80      	pop	{r7, pc}
 801c2fe:	bf00      	nop
 801c300:	200176d4 	.word	0x200176d4
 801c304:	200176e8 	.word	0x200176e8
 801c308:	08026070 	.word	0x08026070
 801c30c:	080260a8 	.word	0x080260a8
 801c310:	080260e0 	.word	0x080260e0
 801c314:	08026108 	.word	0x08026108

0801c318 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	b082      	sub	sp, #8
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	6078      	str	r0, [r7, #4]
 801c320:	460b      	mov	r3, r1
 801c322:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c324:	78fb      	ldrb	r3, [r7, #3]
 801c326:	461a      	mov	r2, r3
 801c328:	2103      	movs	r1, #3
 801c32a:	6878      	ldr	r0, [r7, #4]
 801c32c:	f000 f814 	bl	801c358 <icmp_send_response>
}
 801c330:	bf00      	nop
 801c332:	3708      	adds	r7, #8
 801c334:	46bd      	mov	sp, r7
 801c336:	bd80      	pop	{r7, pc}

0801c338 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b082      	sub	sp, #8
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	6078      	str	r0, [r7, #4]
 801c340:	460b      	mov	r3, r1
 801c342:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c344:	78fb      	ldrb	r3, [r7, #3]
 801c346:	461a      	mov	r2, r3
 801c348:	210b      	movs	r1, #11
 801c34a:	6878      	ldr	r0, [r7, #4]
 801c34c:	f000 f804 	bl	801c358 <icmp_send_response>
}
 801c350:	bf00      	nop
 801c352:	3708      	adds	r7, #8
 801c354:	46bd      	mov	sp, r7
 801c356:	bd80      	pop	{r7, pc}

0801c358 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c358:	b580      	push	{r7, lr}
 801c35a:	b08c      	sub	sp, #48	; 0x30
 801c35c:	af04      	add	r7, sp, #16
 801c35e:	6078      	str	r0, [r7, #4]
 801c360:	460b      	mov	r3, r1
 801c362:	70fb      	strb	r3, [r7, #3]
 801c364:	4613      	mov	r3, r2
 801c366:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c368:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c36c:	2124      	movs	r1, #36	; 0x24
 801c36e:	2022      	movs	r0, #34	; 0x22
 801c370:	f7f5 f81e 	bl	80113b0 <pbuf_alloc>
 801c374:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801c376:	69bb      	ldr	r3, [r7, #24]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d04c      	beq.n	801c416 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c37c:	69bb      	ldr	r3, [r7, #24]
 801c37e:	895b      	ldrh	r3, [r3, #10]
 801c380:	2b23      	cmp	r3, #35	; 0x23
 801c382:	d806      	bhi.n	801c392 <icmp_send_response+0x3a>
 801c384:	4b26      	ldr	r3, [pc, #152]	; (801c420 <icmp_send_response+0xc8>)
 801c386:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c38a:	4926      	ldr	r1, [pc, #152]	; (801c424 <icmp_send_response+0xcc>)
 801c38c:	4826      	ldr	r0, [pc, #152]	; (801c428 <icmp_send_response+0xd0>)
 801c38e:	f002 fbcd 	bl	801eb2c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	685b      	ldr	r3, [r3, #4]
 801c396:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c398:	69bb      	ldr	r3, [r7, #24]
 801c39a:	685b      	ldr	r3, [r3, #4]
 801c39c:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 801c39e:	693b      	ldr	r3, [r7, #16]
 801c3a0:	78fa      	ldrb	r2, [r7, #3]
 801c3a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c3a4:	693b      	ldr	r3, [r7, #16]
 801c3a6:	78ba      	ldrb	r2, [r7, #2]
 801c3a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c3aa:	693b      	ldr	r3, [r7, #16]
 801c3ac:	2200      	movs	r2, #0
 801c3ae:	711a      	strb	r2, [r3, #4]
 801c3b0:	2200      	movs	r2, #0
 801c3b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c3b4:	693b      	ldr	r3, [r7, #16]
 801c3b6:	2200      	movs	r2, #0
 801c3b8:	719a      	strb	r2, [r3, #6]
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c3be:	69bb      	ldr	r3, [r7, #24]
 801c3c0:	685b      	ldr	r3, [r3, #4]
 801c3c2:	f103 0008 	add.w	r0, r3, #8
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	685b      	ldr	r3, [r3, #4]
 801c3ca:	221c      	movs	r2, #28
 801c3cc:	4619      	mov	r1, r3
 801c3ce:	f001 fe69 	bl	801e0a4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c3d2:	697b      	ldr	r3, [r7, #20]
 801c3d4:	68db      	ldr	r3, [r3, #12]
 801c3d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c3d8:	f107 030c 	add.w	r3, r7, #12
 801c3dc:	4618      	mov	r0, r3
 801c3de:	f000 f825 	bl	801c42c <ip4_route>
 801c3e2:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 801c3e4:	69fb      	ldr	r3, [r7, #28]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d011      	beq.n	801c40e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c3ea:	693b      	ldr	r3, [r7, #16]
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	709a      	strb	r2, [r3, #2]
 801c3f0:	2200      	movs	r2, #0
 801c3f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c3f4:	f107 020c 	add.w	r2, r7, #12
 801c3f8:	69fb      	ldr	r3, [r7, #28]
 801c3fa:	9302      	str	r3, [sp, #8]
 801c3fc:	2301      	movs	r3, #1
 801c3fe:	9301      	str	r3, [sp, #4]
 801c400:	2300      	movs	r3, #0
 801c402:	9300      	str	r3, [sp, #0]
 801c404:	23ff      	movs	r3, #255	; 0xff
 801c406:	2100      	movs	r1, #0
 801c408:	69b8      	ldr	r0, [r7, #24]
 801c40a:	f000 f9eb 	bl	801c7e4 <ip4_output_if>
  }
  pbuf_free(q);
 801c40e:	69b8      	ldr	r0, [r7, #24]
 801c410:	f7f5 fae4 	bl	80119dc <pbuf_free>
 801c414:	e000      	b.n	801c418 <icmp_send_response+0xc0>
    return;
 801c416:	bf00      	nop
}
 801c418:	3720      	adds	r7, #32
 801c41a:	46bd      	mov	sp, r7
 801c41c:	bd80      	pop	{r7, pc}
 801c41e:	bf00      	nop
 801c420:	08026070 	.word	0x08026070
 801c424:	0802613c 	.word	0x0802613c
 801c428:	080260e0 	.word	0x080260e0

0801c42c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c42c:	b480      	push	{r7}
 801c42e:	b085      	sub	sp, #20
 801c430:	af00      	add	r7, sp, #0
 801c432:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c434:	4b33      	ldr	r3, [pc, #204]	; (801c504 <ip4_route+0xd8>)
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	60fb      	str	r3, [r7, #12]
 801c43a:	e036      	b.n	801c4aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c442:	f003 0301 	and.w	r3, r3, #1
 801c446:	b2db      	uxtb	r3, r3
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d02b      	beq.n	801c4a4 <ip4_route+0x78>
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c452:	089b      	lsrs	r3, r3, #2
 801c454:	f003 0301 	and.w	r3, r3, #1
 801c458:	b2db      	uxtb	r3, r3
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d022      	beq.n	801c4a4 <ip4_route+0x78>
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	3304      	adds	r3, #4
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d01d      	beq.n	801c4a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	681a      	ldr	r2, [r3, #0]
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	3304      	adds	r3, #4
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	405a      	eors	r2, r3
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	3308      	adds	r3, #8
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	4013      	ands	r3, r2
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d101      	bne.n	801c484 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	e038      	b.n	801c4f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c48a:	f003 0302 	and.w	r3, r3, #2
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d108      	bne.n	801c4a4 <ip4_route+0x78>
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	681a      	ldr	r2, [r3, #0]
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	330c      	adds	r3, #12
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	429a      	cmp	r2, r3
 801c49e:	d101      	bne.n	801c4a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	e028      	b.n	801c4f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	60fb      	str	r3, [r7, #12]
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d1c5      	bne.n	801c43c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c4b0:	4b15      	ldr	r3, [pc, #84]	; (801c508 <ip4_route+0xdc>)
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d01a      	beq.n	801c4ee <ip4_route+0xc2>
 801c4b8:	4b13      	ldr	r3, [pc, #76]	; (801c508 <ip4_route+0xdc>)
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c4c0:	f003 0301 	and.w	r3, r3, #1
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d012      	beq.n	801c4ee <ip4_route+0xc2>
 801c4c8:	4b0f      	ldr	r3, [pc, #60]	; (801c508 <ip4_route+0xdc>)
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c4d0:	f003 0304 	and.w	r3, r3, #4
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d00a      	beq.n	801c4ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c4d8:	4b0b      	ldr	r3, [pc, #44]	; (801c508 <ip4_route+0xdc>)
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	3304      	adds	r3, #4
 801c4de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d004      	beq.n	801c4ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	b2db      	uxtb	r3, r3
 801c4ea:	2b7f      	cmp	r3, #127	; 0x7f
 801c4ec:	d101      	bne.n	801c4f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c4ee:	2300      	movs	r3, #0
 801c4f0:	e001      	b.n	801c4f6 <ip4_route+0xca>
  }

  return netif_default;
 801c4f2:	4b05      	ldr	r3, [pc, #20]	; (801c508 <ip4_route+0xdc>)
 801c4f4:	681b      	ldr	r3, [r3, #0]
}
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	3714      	adds	r7, #20
 801c4fa:	46bd      	mov	sp, r7
 801c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c500:	4770      	bx	lr
 801c502:	bf00      	nop
 801c504:	2001b0b8 	.word	0x2001b0b8
 801c508:	2001b0bc 	.word	0x2001b0bc

0801c50c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c50c:	b580      	push	{r7, lr}
 801c50e:	b082      	sub	sp, #8
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c51a:	f003 0301 	and.w	r3, r3, #1
 801c51e:	b2db      	uxtb	r3, r3
 801c520:	2b00      	cmp	r3, #0
 801c522:	d016      	beq.n	801c552 <ip4_input_accept+0x46>
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	3304      	adds	r3, #4
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d011      	beq.n	801c552 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c52e:	4b0b      	ldr	r3, [pc, #44]	; (801c55c <ip4_input_accept+0x50>)
 801c530:	695a      	ldr	r2, [r3, #20]
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	3304      	adds	r3, #4
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	429a      	cmp	r2, r3
 801c53a:	d008      	beq.n	801c54e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c53c:	4b07      	ldr	r3, [pc, #28]	; (801c55c <ip4_input_accept+0x50>)
 801c53e:	695b      	ldr	r3, [r3, #20]
 801c540:	6879      	ldr	r1, [r7, #4]
 801c542:	4618      	mov	r0, r3
 801c544:	f000 fa26 	bl	801c994 <ip4_addr_isbroadcast_u32>
 801c548:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d001      	beq.n	801c552 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c54e:	2301      	movs	r3, #1
 801c550:	e000      	b.n	801c554 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c552:	2300      	movs	r3, #0
}
 801c554:	4618      	mov	r0, r3
 801c556:	3708      	adds	r7, #8
 801c558:	46bd      	mov	sp, r7
 801c55a:	bd80      	pop	{r7, pc}
 801c55c:	200176d4 	.word	0x200176d4

0801c560 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c560:	b580      	push	{r7, lr}
 801c562:	b088      	sub	sp, #32
 801c564:	af00      	add	r7, sp, #0
 801c566:	6078      	str	r0, [r7, #4]
 801c568:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801c56a:	2301      	movs	r3, #1
 801c56c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	685b      	ldr	r3, [r3, #4]
 801c572:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801c574:	693b      	ldr	r3, [r7, #16]
 801c576:	781b      	ldrb	r3, [r3, #0]
 801c578:	091b      	lsrs	r3, r3, #4
 801c57a:	b2db      	uxtb	r3, r3
 801c57c:	2b04      	cmp	r3, #4
 801c57e:	d004      	beq.n	801c58a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c580:	6878      	ldr	r0, [r7, #4]
 801c582:	f7f5 fa2b 	bl	80119dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c586:	2300      	movs	r3, #0
 801c588:	e123      	b.n	801c7d2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c58a:	693b      	ldr	r3, [r7, #16]
 801c58c:	781b      	ldrb	r3, [r3, #0]
 801c58e:	f003 030f 	and.w	r3, r3, #15
 801c592:	b2db      	uxtb	r3, r3
 801c594:	009b      	lsls	r3, r3, #2
 801c596:	b2db      	uxtb	r3, r3
 801c598:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c59a:	693b      	ldr	r3, [r7, #16]
 801c59c:	885b      	ldrh	r3, [r3, #2]
 801c59e:	b29b      	uxth	r3, r3
 801c5a0:	4618      	mov	r0, r3
 801c5a2:	f7f2 fe5b 	bl	800f25c <lwip_htons>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	891b      	ldrh	r3, [r3, #8]
 801c5ae:	89ba      	ldrh	r2, [r7, #12]
 801c5b0:	429a      	cmp	r2, r3
 801c5b2:	d204      	bcs.n	801c5be <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801c5b4:	89bb      	ldrh	r3, [r7, #12]
 801c5b6:	4619      	mov	r1, r3
 801c5b8:	6878      	ldr	r0, [r7, #4]
 801c5ba:	f7f5 f857 	bl	801166c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	895b      	ldrh	r3, [r3, #10]
 801c5c2:	89fa      	ldrh	r2, [r7, #14]
 801c5c4:	429a      	cmp	r2, r3
 801c5c6:	d807      	bhi.n	801c5d8 <ip4_input+0x78>
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	891b      	ldrh	r3, [r3, #8]
 801c5cc:	89ba      	ldrh	r2, [r7, #12]
 801c5ce:	429a      	cmp	r2, r3
 801c5d0:	d802      	bhi.n	801c5d8 <ip4_input+0x78>
 801c5d2:	89fb      	ldrh	r3, [r7, #14]
 801c5d4:	2b13      	cmp	r3, #19
 801c5d6:	d804      	bhi.n	801c5e2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c5d8:	6878      	ldr	r0, [r7, #4]
 801c5da:	f7f5 f9ff 	bl	80119dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c5de:	2300      	movs	r3, #0
 801c5e0:	e0f7      	b.n	801c7d2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c5e2:	693b      	ldr	r3, [r7, #16]
 801c5e4:	691b      	ldr	r3, [r3, #16]
 801c5e6:	4a7d      	ldr	r2, [pc, #500]	; (801c7dc <ip4_input+0x27c>)
 801c5e8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c5ea:	693b      	ldr	r3, [r7, #16]
 801c5ec:	68db      	ldr	r3, [r3, #12]
 801c5ee:	4a7b      	ldr	r2, [pc, #492]	; (801c7dc <ip4_input+0x27c>)
 801c5f0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c5f2:	4b7a      	ldr	r3, [pc, #488]	; (801c7dc <ip4_input+0x27c>)
 801c5f4:	695b      	ldr	r3, [r3, #20]
 801c5f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c5fa:	2be0      	cmp	r3, #224	; 0xe0
 801c5fc:	d112      	bne.n	801c624 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c5fe:	683b      	ldr	r3, [r7, #0]
 801c600:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c604:	f003 0301 	and.w	r3, r3, #1
 801c608:	b2db      	uxtb	r3, r3
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d007      	beq.n	801c61e <ip4_input+0xbe>
 801c60e:	683b      	ldr	r3, [r7, #0]
 801c610:	3304      	adds	r3, #4
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d002      	beq.n	801c61e <ip4_input+0xbe>
      netif = inp;
 801c618:	683b      	ldr	r3, [r7, #0]
 801c61a:	61fb      	str	r3, [r7, #28]
 801c61c:	e02a      	b.n	801c674 <ip4_input+0x114>
    } else {
      netif = NULL;
 801c61e:	2300      	movs	r3, #0
 801c620:	61fb      	str	r3, [r7, #28]
 801c622:	e027      	b.n	801c674 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c624:	6838      	ldr	r0, [r7, #0]
 801c626:	f7ff ff71 	bl	801c50c <ip4_input_accept>
 801c62a:	4603      	mov	r3, r0
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d002      	beq.n	801c636 <ip4_input+0xd6>
      netif = inp;
 801c630:	683b      	ldr	r3, [r7, #0]
 801c632:	61fb      	str	r3, [r7, #28]
 801c634:	e01e      	b.n	801c674 <ip4_input+0x114>
    } else {
      netif = NULL;
 801c636:	2300      	movs	r3, #0
 801c638:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c63a:	4b68      	ldr	r3, [pc, #416]	; (801c7dc <ip4_input+0x27c>)
 801c63c:	695b      	ldr	r3, [r3, #20]
 801c63e:	b2db      	uxtb	r3, r3
 801c640:	2b7f      	cmp	r3, #127	; 0x7f
 801c642:	d017      	beq.n	801c674 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c644:	4b66      	ldr	r3, [pc, #408]	; (801c7e0 <ip4_input+0x280>)
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	61fb      	str	r3, [r7, #28]
 801c64a:	e00e      	b.n	801c66a <ip4_input+0x10a>
          if (netif == inp) {
 801c64c:	69fa      	ldr	r2, [r7, #28]
 801c64e:	683b      	ldr	r3, [r7, #0]
 801c650:	429a      	cmp	r2, r3
 801c652:	d006      	beq.n	801c662 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c654:	69f8      	ldr	r0, [r7, #28]
 801c656:	f7ff ff59 	bl	801c50c <ip4_input_accept>
 801c65a:	4603      	mov	r3, r0
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d108      	bne.n	801c672 <ip4_input+0x112>
 801c660:	e000      	b.n	801c664 <ip4_input+0x104>
            continue;
 801c662:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c664:	69fb      	ldr	r3, [r7, #28]
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	61fb      	str	r3, [r7, #28]
 801c66a:	69fb      	ldr	r3, [r7, #28]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d1ed      	bne.n	801c64c <ip4_input+0xec>
 801c670:	e000      	b.n	801c674 <ip4_input+0x114>
            break;
 801c672:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801c674:	69fb      	ldr	r3, [r7, #28]
 801c676:	2b00      	cmp	r3, #0
 801c678:	d111      	bne.n	801c69e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801c67a:	693b      	ldr	r3, [r7, #16]
 801c67c:	7a5b      	ldrb	r3, [r3, #9]
 801c67e:	2b11      	cmp	r3, #17
 801c680:	d10d      	bne.n	801c69e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801c682:	89fb      	ldrh	r3, [r7, #14]
 801c684:	693a      	ldr	r2, [r7, #16]
 801c686:	4413      	add	r3, r2
 801c688:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801c68a:	69bb      	ldr	r3, [r7, #24]
 801c68c:	885b      	ldrh	r3, [r3, #2]
 801c68e:	b29b      	uxth	r3, r3
 801c690:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801c694:	d103      	bne.n	801c69e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801c696:	683b      	ldr	r3, [r7, #0]
 801c698:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 801c69a:	2300      	movs	r3, #0
 801c69c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801c69e:	697b      	ldr	r3, [r7, #20]
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d017      	beq.n	801c6d4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801c6a4:	4b4d      	ldr	r3, [pc, #308]	; (801c7dc <ip4_input+0x27c>)
 801c6a6:	691b      	ldr	r3, [r3, #16]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d013      	beq.n	801c6d4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c6ac:	4b4b      	ldr	r3, [pc, #300]	; (801c7dc <ip4_input+0x27c>)
 801c6ae:	691b      	ldr	r3, [r3, #16]
 801c6b0:	6839      	ldr	r1, [r7, #0]
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f000 f96e 	bl	801c994 <ip4_addr_isbroadcast_u32>
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d105      	bne.n	801c6ca <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c6be:	4b47      	ldr	r3, [pc, #284]	; (801c7dc <ip4_input+0x27c>)
 801c6c0:	691b      	ldr	r3, [r3, #16]
 801c6c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c6c6:	2be0      	cmp	r3, #224	; 0xe0
 801c6c8:	d104      	bne.n	801c6d4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c6ca:	6878      	ldr	r0, [r7, #4]
 801c6cc:	f7f5 f986 	bl	80119dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	e07e      	b.n	801c7d2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c6d4:	69fb      	ldr	r3, [r7, #28]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d104      	bne.n	801c6e4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c6da:	6878      	ldr	r0, [r7, #4]
 801c6dc:	f7f5 f97e 	bl	80119dc <pbuf_free>
    return ERR_OK;
 801c6e0:	2300      	movs	r3, #0
 801c6e2:	e076      	b.n	801c7d2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c6e4:	693b      	ldr	r3, [r7, #16]
 801c6e6:	88db      	ldrh	r3, [r3, #6]
 801c6e8:	b29b      	uxth	r3, r3
 801c6ea:	461a      	mov	r2, r3
 801c6ec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801c6f0:	4013      	ands	r3, r2
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d00b      	beq.n	801c70e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c6f6:	6878      	ldr	r0, [r7, #4]
 801c6f8:	f000 fdbc 	bl	801d274 <ip4_reass>
 801c6fc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	2b00      	cmp	r3, #0
 801c702:	d101      	bne.n	801c708 <ip4_input+0x1a8>
      return ERR_OK;
 801c704:	2300      	movs	r3, #0
 801c706:	e064      	b.n	801c7d2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	685b      	ldr	r3, [r3, #4]
 801c70c:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c70e:	4a33      	ldr	r2, [pc, #204]	; (801c7dc <ip4_input+0x27c>)
 801c710:	69fb      	ldr	r3, [r7, #28]
 801c712:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c714:	4a31      	ldr	r2, [pc, #196]	; (801c7dc <ip4_input+0x27c>)
 801c716:	683b      	ldr	r3, [r7, #0]
 801c718:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c71a:	4a30      	ldr	r2, [pc, #192]	; (801c7dc <ip4_input+0x27c>)
 801c71c:	693b      	ldr	r3, [r7, #16]
 801c71e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c720:	693b      	ldr	r3, [r7, #16]
 801c722:	781b      	ldrb	r3, [r3, #0]
 801c724:	f003 030f 	and.w	r3, r3, #15
 801c728:	b2db      	uxtb	r3, r3
 801c72a:	009b      	lsls	r3, r3, #2
 801c72c:	b2db      	uxtb	r3, r3
 801c72e:	b29a      	uxth	r2, r3
 801c730:	4b2a      	ldr	r3, [pc, #168]	; (801c7dc <ip4_input+0x27c>)
 801c732:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c734:	89fb      	ldrh	r3, [r7, #14]
 801c736:	4619      	mov	r1, r3
 801c738:	6878      	ldr	r0, [r7, #4]
 801c73a:	f7f5 f897 	bl	801186c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c73e:	693b      	ldr	r3, [r7, #16]
 801c740:	7a5b      	ldrb	r3, [r3, #9]
 801c742:	2b11      	cmp	r3, #17
 801c744:	d006      	beq.n	801c754 <ip4_input+0x1f4>
 801c746:	2b11      	cmp	r3, #17
 801c748:	dc13      	bgt.n	801c772 <ip4_input+0x212>
 801c74a:	2b01      	cmp	r3, #1
 801c74c:	d00c      	beq.n	801c768 <ip4_input+0x208>
 801c74e:	2b06      	cmp	r3, #6
 801c750:	d005      	beq.n	801c75e <ip4_input+0x1fe>
 801c752:	e00e      	b.n	801c772 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c754:	6839      	ldr	r1, [r7, #0]
 801c756:	6878      	ldr	r0, [r7, #4]
 801c758:	f7fc f994 	bl	8018a84 <udp_input>
        break;
 801c75c:	e026      	b.n	801c7ac <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c75e:	6839      	ldr	r1, [r7, #0]
 801c760:	6878      	ldr	r0, [r7, #4]
 801c762:	f7f7 fce5 	bl	8014130 <tcp_input>
        break;
 801c766:	e021      	b.n	801c7ac <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c768:	6839      	ldr	r1, [r7, #0]
 801c76a:	6878      	ldr	r0, [r7, #4]
 801c76c:	f7ff fcca 	bl	801c104 <icmp_input>
        break;
 801c770:	e01c      	b.n	801c7ac <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c772:	4b1a      	ldr	r3, [pc, #104]	; (801c7dc <ip4_input+0x27c>)
 801c774:	695b      	ldr	r3, [r3, #20]
 801c776:	69f9      	ldr	r1, [r7, #28]
 801c778:	4618      	mov	r0, r3
 801c77a:	f000 f90b 	bl	801c994 <ip4_addr_isbroadcast_u32>
 801c77e:	4603      	mov	r3, r0
 801c780:	2b00      	cmp	r3, #0
 801c782:	d10f      	bne.n	801c7a4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c784:	4b15      	ldr	r3, [pc, #84]	; (801c7dc <ip4_input+0x27c>)
 801c786:	695b      	ldr	r3, [r3, #20]
 801c788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c78c:	2be0      	cmp	r3, #224	; 0xe0
 801c78e:	d009      	beq.n	801c7a4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c794:	4619      	mov	r1, r3
 801c796:	6878      	ldr	r0, [r7, #4]
 801c798:	f7f5 f8db 	bl	8011952 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c79c:	2102      	movs	r1, #2
 801c79e:	6878      	ldr	r0, [r7, #4]
 801c7a0:	f7ff fdba 	bl	801c318 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c7a4:	6878      	ldr	r0, [r7, #4]
 801c7a6:	f7f5 f919 	bl	80119dc <pbuf_free>
        break;
 801c7aa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c7ac:	4b0b      	ldr	r3, [pc, #44]	; (801c7dc <ip4_input+0x27c>)
 801c7ae:	2200      	movs	r2, #0
 801c7b0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c7b2:	4b0a      	ldr	r3, [pc, #40]	; (801c7dc <ip4_input+0x27c>)
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c7b8:	4b08      	ldr	r3, [pc, #32]	; (801c7dc <ip4_input+0x27c>)
 801c7ba:	2200      	movs	r2, #0
 801c7bc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c7be:	4b07      	ldr	r3, [pc, #28]	; (801c7dc <ip4_input+0x27c>)
 801c7c0:	2200      	movs	r2, #0
 801c7c2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c7c4:	4b05      	ldr	r3, [pc, #20]	; (801c7dc <ip4_input+0x27c>)
 801c7c6:	2200      	movs	r2, #0
 801c7c8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c7ca:	4b04      	ldr	r3, [pc, #16]	; (801c7dc <ip4_input+0x27c>)
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c7d0:	2300      	movs	r3, #0
}
 801c7d2:	4618      	mov	r0, r3
 801c7d4:	3720      	adds	r7, #32
 801c7d6:	46bd      	mov	sp, r7
 801c7d8:	bd80      	pop	{r7, pc}
 801c7da:	bf00      	nop
 801c7dc:	200176d4 	.word	0x200176d4
 801c7e0:	2001b0b8 	.word	0x2001b0b8

0801c7e4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c7e4:	b580      	push	{r7, lr}
 801c7e6:	b08a      	sub	sp, #40	; 0x28
 801c7e8:	af04      	add	r7, sp, #16
 801c7ea:	60f8      	str	r0, [r7, #12]
 801c7ec:	60b9      	str	r1, [r7, #8]
 801c7ee:	607a      	str	r2, [r7, #4]
 801c7f0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c7f2:	68bb      	ldr	r3, [r7, #8]
 801c7f4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d009      	beq.n	801c810 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c7fc:	68bb      	ldr	r3, [r7, #8]
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d003      	beq.n	801c80a <ip4_output_if+0x26>
 801c802:	68bb      	ldr	r3, [r7, #8]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	2b00      	cmp	r3, #0
 801c808:	d102      	bne.n	801c810 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c80c:	3304      	adds	r3, #4
 801c80e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c810:	78fa      	ldrb	r2, [r7, #3]
 801c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c814:	9302      	str	r3, [sp, #8]
 801c816:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c81a:	9301      	str	r3, [sp, #4]
 801c81c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c820:	9300      	str	r3, [sp, #0]
 801c822:	4613      	mov	r3, r2
 801c824:	687a      	ldr	r2, [r7, #4]
 801c826:	6979      	ldr	r1, [r7, #20]
 801c828:	68f8      	ldr	r0, [r7, #12]
 801c82a:	f000 f805 	bl	801c838 <ip4_output_if_src>
 801c82e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c830:	4618      	mov	r0, r3
 801c832:	3718      	adds	r7, #24
 801c834:	46bd      	mov	sp, r7
 801c836:	bd80      	pop	{r7, pc}

0801c838 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c838:	b580      	push	{r7, lr}
 801c83a:	b088      	sub	sp, #32
 801c83c:	af00      	add	r7, sp, #0
 801c83e:	60f8      	str	r0, [r7, #12]
 801c840:	60b9      	str	r1, [r7, #8]
 801c842:	607a      	str	r2, [r7, #4]
 801c844:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	7b9b      	ldrb	r3, [r3, #14]
 801c84a:	2b01      	cmp	r3, #1
 801c84c:	d006      	beq.n	801c85c <ip4_output_if_src+0x24>
 801c84e:	4b4b      	ldr	r3, [pc, #300]	; (801c97c <ip4_output_if_src+0x144>)
 801c850:	f44f 7255 	mov.w	r2, #852	; 0x354
 801c854:	494a      	ldr	r1, [pc, #296]	; (801c980 <ip4_output_if_src+0x148>)
 801c856:	484b      	ldr	r0, [pc, #300]	; (801c984 <ip4_output_if_src+0x14c>)
 801c858:	f002 f968 	bl	801eb2c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d060      	beq.n	801c924 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c862:	2314      	movs	r3, #20
 801c864:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c866:	2114      	movs	r1, #20
 801c868:	68f8      	ldr	r0, [r7, #12]
 801c86a:	f7f4 ffef 	bl	801184c <pbuf_add_header>
 801c86e:	4603      	mov	r3, r0
 801c870:	2b00      	cmp	r3, #0
 801c872:	d002      	beq.n	801c87a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c874:	f06f 0301 	mvn.w	r3, #1
 801c878:	e07c      	b.n	801c974 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	685b      	ldr	r3, [r3, #4]
 801c87e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	895b      	ldrh	r3, [r3, #10]
 801c884:	2b13      	cmp	r3, #19
 801c886:	d806      	bhi.n	801c896 <ip4_output_if_src+0x5e>
 801c888:	4b3c      	ldr	r3, [pc, #240]	; (801c97c <ip4_output_if_src+0x144>)
 801c88a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801c88e:	493e      	ldr	r1, [pc, #248]	; (801c988 <ip4_output_if_src+0x150>)
 801c890:	483c      	ldr	r0, [pc, #240]	; (801c984 <ip4_output_if_src+0x14c>)
 801c892:	f002 f94b 	bl	801eb2c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c896:	69fb      	ldr	r3, [r7, #28]
 801c898:	78fa      	ldrb	r2, [r7, #3]
 801c89a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c89c:	69fb      	ldr	r3, [r7, #28]
 801c89e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c8a2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	681a      	ldr	r2, [r3, #0]
 801c8a8:	69fb      	ldr	r3, [r7, #28]
 801c8aa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c8ac:	8b7b      	ldrh	r3, [r7, #26]
 801c8ae:	089b      	lsrs	r3, r3, #2
 801c8b0:	b29b      	uxth	r3, r3
 801c8b2:	b2db      	uxtb	r3, r3
 801c8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c8b8:	b2da      	uxtb	r2, r3
 801c8ba:	69fb      	ldr	r3, [r7, #28]
 801c8bc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c8be:	69fb      	ldr	r3, [r7, #28]
 801c8c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801c8c4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c8c6:	68fb      	ldr	r3, [r7, #12]
 801c8c8:	891b      	ldrh	r3, [r3, #8]
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	f7f2 fcc6 	bl	800f25c <lwip_htons>
 801c8d0:	4603      	mov	r3, r0
 801c8d2:	461a      	mov	r2, r3
 801c8d4:	69fb      	ldr	r3, [r7, #28]
 801c8d6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c8d8:	69fb      	ldr	r3, [r7, #28]
 801c8da:	2200      	movs	r2, #0
 801c8dc:	719a      	strb	r2, [r3, #6]
 801c8de:	2200      	movs	r2, #0
 801c8e0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c8e2:	4b2a      	ldr	r3, [pc, #168]	; (801c98c <ip4_output_if_src+0x154>)
 801c8e4:	881b      	ldrh	r3, [r3, #0]
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	f7f2 fcb8 	bl	800f25c <lwip_htons>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	461a      	mov	r2, r3
 801c8f0:	69fb      	ldr	r3, [r7, #28]
 801c8f2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c8f4:	4b25      	ldr	r3, [pc, #148]	; (801c98c <ip4_output_if_src+0x154>)
 801c8f6:	881b      	ldrh	r3, [r3, #0]
 801c8f8:	3301      	adds	r3, #1
 801c8fa:	b29a      	uxth	r2, r3
 801c8fc:	4b23      	ldr	r3, [pc, #140]	; (801c98c <ip4_output_if_src+0x154>)
 801c8fe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c900:	68bb      	ldr	r3, [r7, #8]
 801c902:	2b00      	cmp	r3, #0
 801c904:	d104      	bne.n	801c910 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c906:	4b22      	ldr	r3, [pc, #136]	; (801c990 <ip4_output_if_src+0x158>)
 801c908:	681a      	ldr	r2, [r3, #0]
 801c90a:	69fb      	ldr	r3, [r7, #28]
 801c90c:	60da      	str	r2, [r3, #12]
 801c90e:	e003      	b.n	801c918 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c910:	68bb      	ldr	r3, [r7, #8]
 801c912:	681a      	ldr	r2, [r3, #0]
 801c914:	69fb      	ldr	r3, [r7, #28]
 801c916:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c918:	69fb      	ldr	r3, [r7, #28]
 801c91a:	2200      	movs	r2, #0
 801c91c:	729a      	strb	r2, [r3, #10]
 801c91e:	2200      	movs	r2, #0
 801c920:	72da      	strb	r2, [r3, #11]
 801c922:	e00f      	b.n	801c944 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	895b      	ldrh	r3, [r3, #10]
 801c928:	2b13      	cmp	r3, #19
 801c92a:	d802      	bhi.n	801c932 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c92c:	f06f 0301 	mvn.w	r3, #1
 801c930:	e020      	b.n	801c974 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	685b      	ldr	r3, [r3, #4]
 801c936:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c938:	69fb      	ldr	r3, [r7, #28]
 801c93a:	691b      	ldr	r3, [r3, #16]
 801c93c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c93e:	f107 0314 	add.w	r3, r7, #20
 801c942:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d00c      	beq.n	801c966 <ip4_output_if_src+0x12e>
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	891a      	ldrh	r2, [r3, #8]
 801c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c954:	429a      	cmp	r2, r3
 801c956:	d906      	bls.n	801c966 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c958:	687a      	ldr	r2, [r7, #4]
 801c95a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c95c:	68f8      	ldr	r0, [r7, #12]
 801c95e:	f000 fe77 	bl	801d650 <ip4_frag>
 801c962:	4603      	mov	r3, r0
 801c964:	e006      	b.n	801c974 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c968:	695b      	ldr	r3, [r3, #20]
 801c96a:	687a      	ldr	r2, [r7, #4]
 801c96c:	68f9      	ldr	r1, [r7, #12]
 801c96e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c970:	4798      	blx	r3
 801c972:	4603      	mov	r3, r0
}
 801c974:	4618      	mov	r0, r3
 801c976:	3720      	adds	r7, #32
 801c978:	46bd      	mov	sp, r7
 801c97a:	bd80      	pop	{r7, pc}
 801c97c:	08026168 	.word	0x08026168
 801c980:	0802619c 	.word	0x0802619c
 801c984:	080261a8 	.word	0x080261a8
 801c988:	080261d0 	.word	0x080261d0
 801c98c:	2001449e 	.word	0x2001449e
 801c990:	080267a0 	.word	0x080267a0

0801c994 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c994:	b480      	push	{r7}
 801c996:	b085      	sub	sp, #20
 801c998:	af00      	add	r7, sp, #0
 801c99a:	6078      	str	r0, [r7, #4]
 801c99c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9a8:	d002      	beq.n	801c9b0 <ip4_addr_isbroadcast_u32+0x1c>
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d101      	bne.n	801c9b4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c9b0:	2301      	movs	r3, #1
 801c9b2:	e02a      	b.n	801ca0a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c9b4:	683b      	ldr	r3, [r7, #0]
 801c9b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c9ba:	f003 0302 	and.w	r3, r3, #2
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d101      	bne.n	801c9c6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c9c2:	2300      	movs	r3, #0
 801c9c4:	e021      	b.n	801ca0a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c9c6:	683b      	ldr	r3, [r7, #0]
 801c9c8:	3304      	adds	r3, #4
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	687a      	ldr	r2, [r7, #4]
 801c9ce:	429a      	cmp	r2, r3
 801c9d0:	d101      	bne.n	801c9d6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	e019      	b.n	801ca0a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c9d6:	68fa      	ldr	r2, [r7, #12]
 801c9d8:	683b      	ldr	r3, [r7, #0]
 801c9da:	3304      	adds	r3, #4
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	405a      	eors	r2, r3
 801c9e0:	683b      	ldr	r3, [r7, #0]
 801c9e2:	3308      	adds	r3, #8
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	4013      	ands	r3, r2
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d10d      	bne.n	801ca08 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c9ec:	683b      	ldr	r3, [r7, #0]
 801c9ee:	3308      	adds	r3, #8
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	43da      	mvns	r2, r3
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c9f8:	683b      	ldr	r3, [r7, #0]
 801c9fa:	3308      	adds	r3, #8
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ca00:	429a      	cmp	r2, r3
 801ca02:	d101      	bne.n	801ca08 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801ca04:	2301      	movs	r3, #1
 801ca06:	e000      	b.n	801ca0a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801ca08:	2300      	movs	r3, #0
  }
}
 801ca0a:	4618      	mov	r0, r3
 801ca0c:	3714      	adds	r7, #20
 801ca0e:	46bd      	mov	sp, r7
 801ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca14:	4770      	bx	lr
	...

0801ca18 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	b08a      	sub	sp, #40	; 0x28
 801ca1c:	af00      	add	r7, sp, #0
 801ca1e:	6078      	str	r0, [r7, #4]
 801ca20:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801ca22:	f107 030c 	add.w	r3, r7, #12
 801ca26:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801ca30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ca34:	3301      	adds	r3, #1
 801ca36:	4a89      	ldr	r2, [pc, #548]	; (801cc5c <ip4addr_aton+0x244>)
 801ca38:	4413      	add	r3, r2
 801ca3a:	781b      	ldrb	r3, [r3, #0]
 801ca3c:	f003 0304 	and.w	r3, r3, #4
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d101      	bne.n	801ca48 <ip4addr_aton+0x30>
      return 0;
 801ca44:	2300      	movs	r3, #0
 801ca46:	e105      	b.n	801cc54 <ip4addr_aton+0x23c>
    }
    val = 0;
 801ca48:	2300      	movs	r3, #0
 801ca4a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801ca4c:	230a      	movs	r3, #10
 801ca4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801ca52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ca56:	2b30      	cmp	r3, #48	; 0x30
 801ca58:	d11c      	bne.n	801ca94 <ip4addr_aton+0x7c>
      c = *++cp;
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	3301      	adds	r3, #1
 801ca5e:	607b      	str	r3, [r7, #4]
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	781b      	ldrb	r3, [r3, #0]
 801ca64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801ca68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ca6c:	2b78      	cmp	r3, #120	; 0x78
 801ca6e:	d003      	beq.n	801ca78 <ip4addr_aton+0x60>
 801ca70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ca74:	2b58      	cmp	r3, #88	; 0x58
 801ca76:	d10a      	bne.n	801ca8e <ip4addr_aton+0x76>
        base = 16;
 801ca78:	2310      	movs	r3, #16
 801ca7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	3301      	adds	r3, #1
 801ca82:	607b      	str	r3, [r7, #4]
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	781b      	ldrb	r3, [r3, #0]
 801ca88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801ca8c:	e002      	b.n	801ca94 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801ca8e:	2308      	movs	r3, #8
 801ca90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801ca94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ca98:	3301      	adds	r3, #1
 801ca9a:	4a70      	ldr	r2, [pc, #448]	; (801cc5c <ip4addr_aton+0x244>)
 801ca9c:	4413      	add	r3, r2
 801ca9e:	781b      	ldrb	r3, [r3, #0]
 801caa0:	f003 0304 	and.w	r3, r3, #4
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d011      	beq.n	801cacc <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801caa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801caac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801caae:	fb02 f203 	mul.w	r2, r2, r3
 801cab2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cab6:	4413      	add	r3, r2
 801cab8:	3b30      	subs	r3, #48	; 0x30
 801caba:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	3301      	adds	r3, #1
 801cac0:	607b      	str	r3, [r7, #4]
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	781b      	ldrb	r3, [r3, #0]
 801cac6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801caca:	e7e3      	b.n	801ca94 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801cacc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801cad0:	2b10      	cmp	r3, #16
 801cad2:	d127      	bne.n	801cb24 <ip4addr_aton+0x10c>
 801cad4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cad8:	3301      	adds	r3, #1
 801cada:	4a60      	ldr	r2, [pc, #384]	; (801cc5c <ip4addr_aton+0x244>)
 801cadc:	4413      	add	r3, r2
 801cade:	781b      	ldrb	r3, [r3, #0]
 801cae0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d01d      	beq.n	801cb24 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caea:	011b      	lsls	r3, r3, #4
 801caec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801caf0:	f102 010a 	add.w	r1, r2, #10
 801caf4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801caf8:	3201      	adds	r2, #1
 801cafa:	4858      	ldr	r0, [pc, #352]	; (801cc5c <ip4addr_aton+0x244>)
 801cafc:	4402      	add	r2, r0
 801cafe:	7812      	ldrb	r2, [r2, #0]
 801cb00:	f002 0203 	and.w	r2, r2, #3
 801cb04:	2a02      	cmp	r2, #2
 801cb06:	d101      	bne.n	801cb0c <ip4addr_aton+0xf4>
 801cb08:	2261      	movs	r2, #97	; 0x61
 801cb0a:	e000      	b.n	801cb0e <ip4addr_aton+0xf6>
 801cb0c:	2241      	movs	r2, #65	; 0x41
 801cb0e:	1a8a      	subs	r2, r1, r2
 801cb10:	4313      	orrs	r3, r2
 801cb12:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	3301      	adds	r3, #1
 801cb18:	607b      	str	r3, [r7, #4]
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	781b      	ldrb	r3, [r3, #0]
 801cb1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801cb22:	e7b7      	b.n	801ca94 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801cb24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cb28:	2b2e      	cmp	r3, #46	; 0x2e
 801cb2a:	d114      	bne.n	801cb56 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801cb2c:	f107 030c 	add.w	r3, r7, #12
 801cb30:	330c      	adds	r3, #12
 801cb32:	69fa      	ldr	r2, [r7, #28]
 801cb34:	429a      	cmp	r2, r3
 801cb36:	d301      	bcc.n	801cb3c <ip4addr_aton+0x124>
        return 0;
 801cb38:	2300      	movs	r3, #0
 801cb3a:	e08b      	b.n	801cc54 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801cb3c:	69fb      	ldr	r3, [r7, #28]
 801cb3e:	1d1a      	adds	r2, r3, #4
 801cb40:	61fa      	str	r2, [r7, #28]
 801cb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb44:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	3301      	adds	r3, #1
 801cb4a:	607b      	str	r3, [r7, #4]
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	781b      	ldrb	r3, [r3, #0]
 801cb50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801cb54:	e76c      	b.n	801ca30 <ip4addr_aton+0x18>
    } else {
      break;
 801cb56:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801cb58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d00b      	beq.n	801cb78 <ip4addr_aton+0x160>
 801cb60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801cb64:	3301      	adds	r3, #1
 801cb66:	4a3d      	ldr	r2, [pc, #244]	; (801cc5c <ip4addr_aton+0x244>)
 801cb68:	4413      	add	r3, r2
 801cb6a:	781b      	ldrb	r3, [r3, #0]
 801cb6c:	f003 0308 	and.w	r3, r3, #8
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d101      	bne.n	801cb78 <ip4addr_aton+0x160>
    return 0;
 801cb74:	2300      	movs	r3, #0
 801cb76:	e06d      	b.n	801cc54 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801cb78:	f107 030c 	add.w	r3, r7, #12
 801cb7c:	69fa      	ldr	r2, [r7, #28]
 801cb7e:	1ad3      	subs	r3, r2, r3
 801cb80:	109b      	asrs	r3, r3, #2
 801cb82:	3301      	adds	r3, #1
 801cb84:	2b04      	cmp	r3, #4
 801cb86:	d853      	bhi.n	801cc30 <ip4addr_aton+0x218>
 801cb88:	a201      	add	r2, pc, #4	; (adr r2, 801cb90 <ip4addr_aton+0x178>)
 801cb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb8e:	bf00      	nop
 801cb90:	0801cba5 	.word	0x0801cba5
 801cb94:	0801cc3f 	.word	0x0801cc3f
 801cb98:	0801cba9 	.word	0x0801cba9
 801cb9c:	0801cbcb 	.word	0x0801cbcb
 801cba0:	0801cbf9 	.word	0x0801cbf9

    case 0:
      return 0;       /* initial nondigit */
 801cba4:	2300      	movs	r3, #0
 801cba6:	e055      	b.n	801cc54 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cbae:	d301      	bcc.n	801cbb4 <ip4addr_aton+0x19c>
        return 0;
 801cbb0:	2300      	movs	r3, #0
 801cbb2:	e04f      	b.n	801cc54 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	2bff      	cmp	r3, #255	; 0xff
 801cbb8:	d901      	bls.n	801cbbe <ip4addr_aton+0x1a6>
        return 0;
 801cbba:	2300      	movs	r3, #0
 801cbbc:	e04a      	b.n	801cc54 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	061b      	lsls	r3, r3, #24
 801cbc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cbc4:	4313      	orrs	r3, r2
 801cbc6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801cbc8:	e03a      	b.n	801cc40 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbd0:	d301      	bcc.n	801cbd6 <ip4addr_aton+0x1be>
        return 0;
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	e03e      	b.n	801cc54 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	2bff      	cmp	r3, #255	; 0xff
 801cbda:	d802      	bhi.n	801cbe2 <ip4addr_aton+0x1ca>
 801cbdc:	693b      	ldr	r3, [r7, #16]
 801cbde:	2bff      	cmp	r3, #255	; 0xff
 801cbe0:	d901      	bls.n	801cbe6 <ip4addr_aton+0x1ce>
        return 0;
 801cbe2:	2300      	movs	r3, #0
 801cbe4:	e036      	b.n	801cc54 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	061a      	lsls	r2, r3, #24
 801cbea:	693b      	ldr	r3, [r7, #16]
 801cbec:	041b      	lsls	r3, r3, #16
 801cbee:	4313      	orrs	r3, r2
 801cbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cbf2:	4313      	orrs	r3, r2
 801cbf4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801cbf6:	e023      	b.n	801cc40 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbfa:	2bff      	cmp	r3, #255	; 0xff
 801cbfc:	d901      	bls.n	801cc02 <ip4addr_aton+0x1ea>
        return 0;
 801cbfe:	2300      	movs	r3, #0
 801cc00:	e028      	b.n	801cc54 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	2bff      	cmp	r3, #255	; 0xff
 801cc06:	d805      	bhi.n	801cc14 <ip4addr_aton+0x1fc>
 801cc08:	693b      	ldr	r3, [r7, #16]
 801cc0a:	2bff      	cmp	r3, #255	; 0xff
 801cc0c:	d802      	bhi.n	801cc14 <ip4addr_aton+0x1fc>
 801cc0e:	697b      	ldr	r3, [r7, #20]
 801cc10:	2bff      	cmp	r3, #255	; 0xff
 801cc12:	d901      	bls.n	801cc18 <ip4addr_aton+0x200>
        return 0;
 801cc14:	2300      	movs	r3, #0
 801cc16:	e01d      	b.n	801cc54 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	061a      	lsls	r2, r3, #24
 801cc1c:	693b      	ldr	r3, [r7, #16]
 801cc1e:	041b      	lsls	r3, r3, #16
 801cc20:	431a      	orrs	r2, r3
 801cc22:	697b      	ldr	r3, [r7, #20]
 801cc24:	021b      	lsls	r3, r3, #8
 801cc26:	4313      	orrs	r3, r2
 801cc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cc2a:	4313      	orrs	r3, r2
 801cc2c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801cc2e:	e007      	b.n	801cc40 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801cc30:	4b0b      	ldr	r3, [pc, #44]	; (801cc60 <ip4addr_aton+0x248>)
 801cc32:	22f9      	movs	r2, #249	; 0xf9
 801cc34:	490b      	ldr	r1, [pc, #44]	; (801cc64 <ip4addr_aton+0x24c>)
 801cc36:	480c      	ldr	r0, [pc, #48]	; (801cc68 <ip4addr_aton+0x250>)
 801cc38:	f001 ff78 	bl	801eb2c <iprintf>
      break;
 801cc3c:	e000      	b.n	801cc40 <ip4addr_aton+0x228>
      break;
 801cc3e:	bf00      	nop
  }
  if (addr) {
 801cc40:	683b      	ldr	r3, [r7, #0]
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d005      	beq.n	801cc52 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801cc46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cc48:	f7f2 fb1d 	bl	800f286 <lwip_htonl>
 801cc4c:	4602      	mov	r2, r0
 801cc4e:	683b      	ldr	r3, [r7, #0]
 801cc50:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801cc52:	2301      	movs	r3, #1
}
 801cc54:	4618      	mov	r0, r3
 801cc56:	3728      	adds	r7, #40	; 0x28
 801cc58:	46bd      	mov	sp, r7
 801cc5a:	bd80      	pop	{r7, pc}
 801cc5c:	080267bc 	.word	0x080267bc
 801cc60:	08026200 	.word	0x08026200
 801cc64:	0802623c 	.word	0x0802623c
 801cc68:	08026248 	.word	0x08026248

0801cc6c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b084      	sub	sp, #16
 801cc70:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801cc72:	2300      	movs	r3, #0
 801cc74:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801cc76:	4b12      	ldr	r3, [pc, #72]	; (801ccc0 <ip_reass_tmr+0x54>)
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801cc7c:	e018      	b.n	801ccb0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	7fdb      	ldrb	r3, [r3, #31]
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d00b      	beq.n	801cc9e <ip_reass_tmr+0x32>
      r->timer--;
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	7fdb      	ldrb	r3, [r3, #31]
 801cc8a:	3b01      	subs	r3, #1
 801cc8c:	b2da      	uxtb	r2, r3
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	60fb      	str	r3, [r7, #12]
 801cc9c:	e008      	b.n	801ccb0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cca8:	68b9      	ldr	r1, [r7, #8]
 801ccaa:	6878      	ldr	r0, [r7, #4]
 801ccac:	f000 f80a 	bl	801ccc4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d1e3      	bne.n	801cc7e <ip_reass_tmr+0x12>
    }
  }
}
 801ccb6:	bf00      	nop
 801ccb8:	bf00      	nop
 801ccba:	3710      	adds	r7, #16
 801ccbc:	46bd      	mov	sp, r7
 801ccbe:	bd80      	pop	{r7, pc}
 801ccc0:	200144a0 	.word	0x200144a0

0801ccc4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b088      	sub	sp, #32
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]
 801cccc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ccce:	2300      	movs	r3, #0
 801ccd0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ccd2:	683a      	ldr	r2, [r7, #0]
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	429a      	cmp	r2, r3
 801ccd8:	d105      	bne.n	801cce6 <ip_reass_free_complete_datagram+0x22>
 801ccda:	4b45      	ldr	r3, [pc, #276]	; (801cdf0 <ip_reass_free_complete_datagram+0x12c>)
 801ccdc:	22ab      	movs	r2, #171	; 0xab
 801ccde:	4945      	ldr	r1, [pc, #276]	; (801cdf4 <ip_reass_free_complete_datagram+0x130>)
 801cce0:	4845      	ldr	r0, [pc, #276]	; (801cdf8 <ip_reass_free_complete_datagram+0x134>)
 801cce2:	f001 ff23 	bl	801eb2c <iprintf>
  if (prev != NULL) {
 801cce6:	683b      	ldr	r3, [r7, #0]
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d00a      	beq.n	801cd02 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ccec:	683b      	ldr	r3, [r7, #0]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	687a      	ldr	r2, [r7, #4]
 801ccf2:	429a      	cmp	r2, r3
 801ccf4:	d005      	beq.n	801cd02 <ip_reass_free_complete_datagram+0x3e>
 801ccf6:	4b3e      	ldr	r3, [pc, #248]	; (801cdf0 <ip_reass_free_complete_datagram+0x12c>)
 801ccf8:	22ad      	movs	r2, #173	; 0xad
 801ccfa:	4940      	ldr	r1, [pc, #256]	; (801cdfc <ip_reass_free_complete_datagram+0x138>)
 801ccfc:	483e      	ldr	r0, [pc, #248]	; (801cdf8 <ip_reass_free_complete_datagram+0x134>)
 801ccfe:	f001 ff15 	bl	801eb2c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	685b      	ldr	r3, [r3, #4]
 801cd06:	685b      	ldr	r3, [r3, #4]
 801cd08:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801cd0a:	697b      	ldr	r3, [r7, #20]
 801cd0c:	889b      	ldrh	r3, [r3, #4]
 801cd0e:	b29b      	uxth	r3, r3
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d12a      	bne.n	801cd6a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	685b      	ldr	r3, [r3, #4]
 801cd18:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801cd1a:	697b      	ldr	r3, [r7, #20]
 801cd1c:	681a      	ldr	r2, [r3, #0]
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cd22:	69bb      	ldr	r3, [r7, #24]
 801cd24:	6858      	ldr	r0, [r3, #4]
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	3308      	adds	r3, #8
 801cd2a:	2214      	movs	r2, #20
 801cd2c:	4619      	mov	r1, r3
 801cd2e:	f001 f9b9 	bl	801e0a4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801cd32:	2101      	movs	r1, #1
 801cd34:	69b8      	ldr	r0, [r7, #24]
 801cd36:	f7ff faff 	bl	801c338 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801cd3a:	69b8      	ldr	r0, [r7, #24]
 801cd3c:	f7f4 fedc 	bl	8011af8 <pbuf_clen>
 801cd40:	4603      	mov	r3, r0
 801cd42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cd44:	8bfa      	ldrh	r2, [r7, #30]
 801cd46:	8a7b      	ldrh	r3, [r7, #18]
 801cd48:	4413      	add	r3, r2
 801cd4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cd4e:	db05      	blt.n	801cd5c <ip_reass_free_complete_datagram+0x98>
 801cd50:	4b27      	ldr	r3, [pc, #156]	; (801cdf0 <ip_reass_free_complete_datagram+0x12c>)
 801cd52:	22bc      	movs	r2, #188	; 0xbc
 801cd54:	492a      	ldr	r1, [pc, #168]	; (801ce00 <ip_reass_free_complete_datagram+0x13c>)
 801cd56:	4828      	ldr	r0, [pc, #160]	; (801cdf8 <ip_reass_free_complete_datagram+0x134>)
 801cd58:	f001 fee8 	bl	801eb2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cd5c:	8bfa      	ldrh	r2, [r7, #30]
 801cd5e:	8a7b      	ldrh	r3, [r7, #18]
 801cd60:	4413      	add	r3, r2
 801cd62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801cd64:	69b8      	ldr	r0, [r7, #24]
 801cd66:	f7f4 fe39 	bl	80119dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	685b      	ldr	r3, [r3, #4]
 801cd6e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801cd70:	e01f      	b.n	801cdb2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801cd72:	69bb      	ldr	r3, [r7, #24]
 801cd74:	685b      	ldr	r3, [r3, #4]
 801cd76:	617b      	str	r3, [r7, #20]
    pcur = p;
 801cd78:	69bb      	ldr	r3, [r7, #24]
 801cd7a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cd7c:	697b      	ldr	r3, [r7, #20]
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801cd82:	68f8      	ldr	r0, [r7, #12]
 801cd84:	f7f4 feb8 	bl	8011af8 <pbuf_clen>
 801cd88:	4603      	mov	r3, r0
 801cd8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cd8c:	8bfa      	ldrh	r2, [r7, #30]
 801cd8e:	8a7b      	ldrh	r3, [r7, #18]
 801cd90:	4413      	add	r3, r2
 801cd92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cd96:	db05      	blt.n	801cda4 <ip_reass_free_complete_datagram+0xe0>
 801cd98:	4b15      	ldr	r3, [pc, #84]	; (801cdf0 <ip_reass_free_complete_datagram+0x12c>)
 801cd9a:	22cc      	movs	r2, #204	; 0xcc
 801cd9c:	4918      	ldr	r1, [pc, #96]	; (801ce00 <ip_reass_free_complete_datagram+0x13c>)
 801cd9e:	4816      	ldr	r0, [pc, #88]	; (801cdf8 <ip_reass_free_complete_datagram+0x134>)
 801cda0:	f001 fec4 	bl	801eb2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cda4:	8bfa      	ldrh	r2, [r7, #30]
 801cda6:	8a7b      	ldrh	r3, [r7, #18]
 801cda8:	4413      	add	r3, r2
 801cdaa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801cdac:	68f8      	ldr	r0, [r7, #12]
 801cdae:	f7f4 fe15 	bl	80119dc <pbuf_free>
  while (p != NULL) {
 801cdb2:	69bb      	ldr	r3, [r7, #24]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d1dc      	bne.n	801cd72 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801cdb8:	6839      	ldr	r1, [r7, #0]
 801cdba:	6878      	ldr	r0, [r7, #4]
 801cdbc:	f000 f8c2 	bl	801cf44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801cdc0:	4b10      	ldr	r3, [pc, #64]	; (801ce04 <ip_reass_free_complete_datagram+0x140>)
 801cdc2:	881b      	ldrh	r3, [r3, #0]
 801cdc4:	8bfa      	ldrh	r2, [r7, #30]
 801cdc6:	429a      	cmp	r2, r3
 801cdc8:	d905      	bls.n	801cdd6 <ip_reass_free_complete_datagram+0x112>
 801cdca:	4b09      	ldr	r3, [pc, #36]	; (801cdf0 <ip_reass_free_complete_datagram+0x12c>)
 801cdcc:	22d2      	movs	r2, #210	; 0xd2
 801cdce:	490e      	ldr	r1, [pc, #56]	; (801ce08 <ip_reass_free_complete_datagram+0x144>)
 801cdd0:	4809      	ldr	r0, [pc, #36]	; (801cdf8 <ip_reass_free_complete_datagram+0x134>)
 801cdd2:	f001 feab 	bl	801eb2c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801cdd6:	4b0b      	ldr	r3, [pc, #44]	; (801ce04 <ip_reass_free_complete_datagram+0x140>)
 801cdd8:	881a      	ldrh	r2, [r3, #0]
 801cdda:	8bfb      	ldrh	r3, [r7, #30]
 801cddc:	1ad3      	subs	r3, r2, r3
 801cdde:	b29a      	uxth	r2, r3
 801cde0:	4b08      	ldr	r3, [pc, #32]	; (801ce04 <ip_reass_free_complete_datagram+0x140>)
 801cde2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801cde4:	8bfb      	ldrh	r3, [r7, #30]
}
 801cde6:	4618      	mov	r0, r3
 801cde8:	3720      	adds	r7, #32
 801cdea:	46bd      	mov	sp, r7
 801cdec:	bd80      	pop	{r7, pc}
 801cdee:	bf00      	nop
 801cdf0:	08026270 	.word	0x08026270
 801cdf4:	080262ac 	.word	0x080262ac
 801cdf8:	080262b8 	.word	0x080262b8
 801cdfc:	080262e0 	.word	0x080262e0
 801ce00:	080262f4 	.word	0x080262f4
 801ce04:	200144a4 	.word	0x200144a4
 801ce08:	08026314 	.word	0x08026314

0801ce0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ce0c:	b580      	push	{r7, lr}
 801ce0e:	b08a      	sub	sp, #40	; 0x28
 801ce10:	af00      	add	r7, sp, #0
 801ce12:	6078      	str	r0, [r7, #4]
 801ce14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ce16:	2300      	movs	r3, #0
 801ce18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ce1a:	2300      	movs	r3, #0
 801ce1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ce1e:	2300      	movs	r3, #0
 801ce20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ce22:	2300      	movs	r3, #0
 801ce24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ce26:	2300      	movs	r3, #0
 801ce28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ce2a:	4b28      	ldr	r3, [pc, #160]	; (801cecc <ip_reass_remove_oldest_datagram+0xc0>)
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ce30:	e030      	b.n	801ce94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ce32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce34:	695a      	ldr	r2, [r3, #20]
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	68db      	ldr	r3, [r3, #12]
 801ce3a:	429a      	cmp	r2, r3
 801ce3c:	d10c      	bne.n	801ce58 <ip_reass_remove_oldest_datagram+0x4c>
 801ce3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce40:	699a      	ldr	r2, [r3, #24]
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	691b      	ldr	r3, [r3, #16]
 801ce46:	429a      	cmp	r2, r3
 801ce48:	d106      	bne.n	801ce58 <ip_reass_remove_oldest_datagram+0x4c>
 801ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce4c:	899a      	ldrh	r2, [r3, #12]
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	889b      	ldrh	r3, [r3, #4]
 801ce52:	b29b      	uxth	r3, r3
 801ce54:	429a      	cmp	r2, r3
 801ce56:	d014      	beq.n	801ce82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ce58:	693b      	ldr	r3, [r7, #16]
 801ce5a:	3301      	adds	r3, #1
 801ce5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ce5e:	6a3b      	ldr	r3, [r7, #32]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d104      	bne.n	801ce6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ce68:	69fb      	ldr	r3, [r7, #28]
 801ce6a:	61bb      	str	r3, [r7, #24]
 801ce6c:	e009      	b.n	801ce82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce70:	7fda      	ldrb	r2, [r3, #31]
 801ce72:	6a3b      	ldr	r3, [r7, #32]
 801ce74:	7fdb      	ldrb	r3, [r3, #31]
 801ce76:	429a      	cmp	r2, r3
 801ce78:	d803      	bhi.n	801ce82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ce7e:	69fb      	ldr	r3, [r7, #28]
 801ce80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d001      	beq.n	801ce8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ce8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d1cb      	bne.n	801ce32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ce9a:	6a3b      	ldr	r3, [r7, #32]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d008      	beq.n	801ceb2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801cea0:	69b9      	ldr	r1, [r7, #24]
 801cea2:	6a38      	ldr	r0, [r7, #32]
 801cea4:	f7ff ff0e 	bl	801ccc4 <ip_reass_free_complete_datagram>
 801cea8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ceaa:	697a      	ldr	r2, [r7, #20]
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	4413      	add	r3, r2
 801ceb0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ceb2:	697a      	ldr	r2, [r7, #20]
 801ceb4:	683b      	ldr	r3, [r7, #0]
 801ceb6:	429a      	cmp	r2, r3
 801ceb8:	da02      	bge.n	801cec0 <ip_reass_remove_oldest_datagram+0xb4>
 801ceba:	693b      	ldr	r3, [r7, #16]
 801cebc:	2b01      	cmp	r3, #1
 801cebe:	dcac      	bgt.n	801ce1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801cec0:	697b      	ldr	r3, [r7, #20]
}
 801cec2:	4618      	mov	r0, r3
 801cec4:	3728      	adds	r7, #40	; 0x28
 801cec6:	46bd      	mov	sp, r7
 801cec8:	bd80      	pop	{r7, pc}
 801ceca:	bf00      	nop
 801cecc:	200144a0 	.word	0x200144a0

0801ced0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b084      	sub	sp, #16
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	6078      	str	r0, [r7, #4]
 801ced8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ceda:	2004      	movs	r0, #4
 801cedc:	f7f3 fe4a 	bl	8010b74 <memp_malloc>
 801cee0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801cee2:	68fb      	ldr	r3, [r7, #12]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d110      	bne.n	801cf0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801cee8:	6839      	ldr	r1, [r7, #0]
 801ceea:	6878      	ldr	r0, [r7, #4]
 801ceec:	f7ff ff8e 	bl	801ce0c <ip_reass_remove_oldest_datagram>
 801cef0:	4602      	mov	r2, r0
 801cef2:	683b      	ldr	r3, [r7, #0]
 801cef4:	4293      	cmp	r3, r2
 801cef6:	dc03      	bgt.n	801cf00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cef8:	2004      	movs	r0, #4
 801cefa:	f7f3 fe3b 	bl	8010b74 <memp_malloc>
 801cefe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801cf00:	68fb      	ldr	r3, [r7, #12]
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d101      	bne.n	801cf0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801cf06:	2300      	movs	r3, #0
 801cf08:	e016      	b.n	801cf38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801cf0a:	2220      	movs	r2, #32
 801cf0c:	2100      	movs	r1, #0
 801cf0e:	68f8      	ldr	r0, [r7, #12]
 801cf10:	f001 f8f0 	bl	801e0f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801cf14:	68fb      	ldr	r3, [r7, #12]
 801cf16:	220f      	movs	r2, #15
 801cf18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801cf1a:	4b09      	ldr	r3, [pc, #36]	; (801cf40 <ip_reass_enqueue_new_datagram+0x70>)
 801cf1c:	681a      	ldr	r2, [r3, #0]
 801cf1e:	68fb      	ldr	r3, [r7, #12]
 801cf20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801cf22:	4a07      	ldr	r2, [pc, #28]	; (801cf40 <ip_reass_enqueue_new_datagram+0x70>)
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	3308      	adds	r3, #8
 801cf2c:	2214      	movs	r2, #20
 801cf2e:	6879      	ldr	r1, [r7, #4]
 801cf30:	4618      	mov	r0, r3
 801cf32:	f001 f8b7 	bl	801e0a4 <memcpy>
  return ipr;
 801cf36:	68fb      	ldr	r3, [r7, #12]
}
 801cf38:	4618      	mov	r0, r3
 801cf3a:	3710      	adds	r7, #16
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	bd80      	pop	{r7, pc}
 801cf40:	200144a0 	.word	0x200144a0

0801cf44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cf44:	b580      	push	{r7, lr}
 801cf46:	b082      	sub	sp, #8
 801cf48:	af00      	add	r7, sp, #0
 801cf4a:	6078      	str	r0, [r7, #4]
 801cf4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801cf4e:	4b10      	ldr	r3, [pc, #64]	; (801cf90 <ip_reass_dequeue_datagram+0x4c>)
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	687a      	ldr	r2, [r7, #4]
 801cf54:	429a      	cmp	r2, r3
 801cf56:	d104      	bne.n	801cf62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	4a0c      	ldr	r2, [pc, #48]	; (801cf90 <ip_reass_dequeue_datagram+0x4c>)
 801cf5e:	6013      	str	r3, [r2, #0]
 801cf60:	e00d      	b.n	801cf7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801cf62:	683b      	ldr	r3, [r7, #0]
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	d106      	bne.n	801cf76 <ip_reass_dequeue_datagram+0x32>
 801cf68:	4b0a      	ldr	r3, [pc, #40]	; (801cf94 <ip_reass_dequeue_datagram+0x50>)
 801cf6a:	f240 1245 	movw	r2, #325	; 0x145
 801cf6e:	490a      	ldr	r1, [pc, #40]	; (801cf98 <ip_reass_dequeue_datagram+0x54>)
 801cf70:	480a      	ldr	r0, [pc, #40]	; (801cf9c <ip_reass_dequeue_datagram+0x58>)
 801cf72:	f001 fddb 	bl	801eb2c <iprintf>
    prev->next = ipr->next;
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	681a      	ldr	r2, [r3, #0]
 801cf7a:	683b      	ldr	r3, [r7, #0]
 801cf7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801cf7e:	6879      	ldr	r1, [r7, #4]
 801cf80:	2004      	movs	r0, #4
 801cf82:	f7f3 fe49 	bl	8010c18 <memp_free>
}
 801cf86:	bf00      	nop
 801cf88:	3708      	adds	r7, #8
 801cf8a:	46bd      	mov	sp, r7
 801cf8c:	bd80      	pop	{r7, pc}
 801cf8e:	bf00      	nop
 801cf90:	200144a0 	.word	0x200144a0
 801cf94:	08026270 	.word	0x08026270
 801cf98:	08026338 	.word	0x08026338
 801cf9c:	080262b8 	.word	0x080262b8

0801cfa0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	b08c      	sub	sp, #48	; 0x30
 801cfa4:	af00      	add	r7, sp, #0
 801cfa6:	60f8      	str	r0, [r7, #12]
 801cfa8:	60b9      	str	r1, [r7, #8]
 801cfaa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801cfac:	2300      	movs	r3, #0
 801cfae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801cfb0:	2301      	movs	r3, #1
 801cfb2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801cfb4:	68bb      	ldr	r3, [r7, #8]
 801cfb6:	685b      	ldr	r3, [r3, #4]
 801cfb8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801cfba:	69fb      	ldr	r3, [r7, #28]
 801cfbc:	885b      	ldrh	r3, [r3, #2]
 801cfbe:	b29b      	uxth	r3, r3
 801cfc0:	4618      	mov	r0, r3
 801cfc2:	f7f2 f94b 	bl	800f25c <lwip_htons>
 801cfc6:	4603      	mov	r3, r0
 801cfc8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801cfca:	69fb      	ldr	r3, [r7, #28]
 801cfcc:	781b      	ldrb	r3, [r3, #0]
 801cfce:	f003 030f 	and.w	r3, r3, #15
 801cfd2:	b2db      	uxtb	r3, r3
 801cfd4:	009b      	lsls	r3, r3, #2
 801cfd6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801cfd8:	7e7b      	ldrb	r3, [r7, #25]
 801cfda:	b29b      	uxth	r3, r3
 801cfdc:	8b7a      	ldrh	r2, [r7, #26]
 801cfde:	429a      	cmp	r2, r3
 801cfe0:	d202      	bcs.n	801cfe8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cfe2:	f04f 33ff 	mov.w	r3, #4294967295
 801cfe6:	e135      	b.n	801d254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801cfe8:	7e7b      	ldrb	r3, [r7, #25]
 801cfea:	b29b      	uxth	r3, r3
 801cfec:	8b7a      	ldrh	r2, [r7, #26]
 801cfee:	1ad3      	subs	r3, r2, r3
 801cff0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801cff2:	69fb      	ldr	r3, [r7, #28]
 801cff4:	88db      	ldrh	r3, [r3, #6]
 801cff6:	b29b      	uxth	r3, r3
 801cff8:	4618      	mov	r0, r3
 801cffa:	f7f2 f92f 	bl	800f25c <lwip_htons>
 801cffe:	4603      	mov	r3, r0
 801d000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d004:	b29b      	uxth	r3, r3
 801d006:	00db      	lsls	r3, r3, #3
 801d008:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d00a:	68bb      	ldr	r3, [r7, #8]
 801d00c:	685b      	ldr	r3, [r3, #4]
 801d00e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d012:	2200      	movs	r2, #0
 801d014:	701a      	strb	r2, [r3, #0]
 801d016:	2200      	movs	r2, #0
 801d018:	705a      	strb	r2, [r3, #1]
 801d01a:	2200      	movs	r2, #0
 801d01c:	709a      	strb	r2, [r3, #2]
 801d01e:	2200      	movs	r2, #0
 801d020:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d024:	8afa      	ldrh	r2, [r7, #22]
 801d026:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d028:	8afa      	ldrh	r2, [r7, #22]
 801d02a:	8b7b      	ldrh	r3, [r7, #26]
 801d02c:	4413      	add	r3, r2
 801d02e:	b29a      	uxth	r2, r3
 801d030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d032:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d036:	88db      	ldrh	r3, [r3, #6]
 801d038:	b29b      	uxth	r3, r3
 801d03a:	8afa      	ldrh	r2, [r7, #22]
 801d03c:	429a      	cmp	r2, r3
 801d03e:	d902      	bls.n	801d046 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d040:	f04f 33ff 	mov.w	r3, #4294967295
 801d044:	e106      	b.n	801d254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d046:	68fb      	ldr	r3, [r7, #12]
 801d048:	685b      	ldr	r3, [r3, #4]
 801d04a:	627b      	str	r3, [r7, #36]	; 0x24
 801d04c:	e068      	b.n	801d120 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d050:	685b      	ldr	r3, [r3, #4]
 801d052:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d056:	889b      	ldrh	r3, [r3, #4]
 801d058:	b29a      	uxth	r2, r3
 801d05a:	693b      	ldr	r3, [r7, #16]
 801d05c:	889b      	ldrh	r3, [r3, #4]
 801d05e:	b29b      	uxth	r3, r3
 801d060:	429a      	cmp	r2, r3
 801d062:	d235      	bcs.n	801d0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d068:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d020      	beq.n	801d0b2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d072:	889b      	ldrh	r3, [r3, #4]
 801d074:	b29a      	uxth	r2, r3
 801d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d078:	88db      	ldrh	r3, [r3, #6]
 801d07a:	b29b      	uxth	r3, r3
 801d07c:	429a      	cmp	r2, r3
 801d07e:	d307      	bcc.n	801d090 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d082:	88db      	ldrh	r3, [r3, #6]
 801d084:	b29a      	uxth	r2, r3
 801d086:	693b      	ldr	r3, [r7, #16]
 801d088:	889b      	ldrh	r3, [r3, #4]
 801d08a:	b29b      	uxth	r3, r3
 801d08c:	429a      	cmp	r2, r3
 801d08e:	d902      	bls.n	801d096 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d090:	f04f 33ff 	mov.w	r3, #4294967295
 801d094:	e0de      	b.n	801d254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d098:	68ba      	ldr	r2, [r7, #8]
 801d09a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d09e:	88db      	ldrh	r3, [r3, #6]
 801d0a0:	b29a      	uxth	r2, r3
 801d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0a4:	889b      	ldrh	r3, [r3, #4]
 801d0a6:	b29b      	uxth	r3, r3
 801d0a8:	429a      	cmp	r2, r3
 801d0aa:	d03d      	beq.n	801d128 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d0b0:	e03a      	b.n	801d128 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0b4:	88db      	ldrh	r3, [r3, #6]
 801d0b6:	b29a      	uxth	r2, r3
 801d0b8:	693b      	ldr	r3, [r7, #16]
 801d0ba:	889b      	ldrh	r3, [r3, #4]
 801d0bc:	b29b      	uxth	r3, r3
 801d0be:	429a      	cmp	r2, r3
 801d0c0:	d902      	bls.n	801d0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d0c2:	f04f 33ff 	mov.w	r3, #4294967295
 801d0c6:	e0c5      	b.n	801d254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	68ba      	ldr	r2, [r7, #8]
 801d0cc:	605a      	str	r2, [r3, #4]
      break;
 801d0ce:	e02b      	b.n	801d128 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0d2:	889b      	ldrh	r3, [r3, #4]
 801d0d4:	b29a      	uxth	r2, r3
 801d0d6:	693b      	ldr	r3, [r7, #16]
 801d0d8:	889b      	ldrh	r3, [r3, #4]
 801d0da:	b29b      	uxth	r3, r3
 801d0dc:	429a      	cmp	r2, r3
 801d0de:	d102      	bne.n	801d0e6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d0e0:	f04f 33ff 	mov.w	r3, #4294967295
 801d0e4:	e0b6      	b.n	801d254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0e8:	889b      	ldrh	r3, [r3, #4]
 801d0ea:	b29a      	uxth	r2, r3
 801d0ec:	693b      	ldr	r3, [r7, #16]
 801d0ee:	88db      	ldrh	r3, [r3, #6]
 801d0f0:	b29b      	uxth	r3, r3
 801d0f2:	429a      	cmp	r2, r3
 801d0f4:	d202      	bcs.n	801d0fc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d0f6:	f04f 33ff 	mov.w	r3, #4294967295
 801d0fa:	e0ab      	b.n	801d254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d009      	beq.n	801d116 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d104:	88db      	ldrh	r3, [r3, #6]
 801d106:	b29a      	uxth	r2, r3
 801d108:	693b      	ldr	r3, [r7, #16]
 801d10a:	889b      	ldrh	r3, [r3, #4]
 801d10c:	b29b      	uxth	r3, r3
 801d10e:	429a      	cmp	r2, r3
 801d110:	d001      	beq.n	801d116 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d112:	2300      	movs	r3, #0
 801d114:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d116:	693b      	ldr	r3, [r7, #16]
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d11c:	693b      	ldr	r3, [r7, #16]
 801d11e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d122:	2b00      	cmp	r3, #0
 801d124:	d193      	bne.n	801d04e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d126:	e000      	b.n	801d12a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d128:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d12d      	bne.n	801d18c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d132:	2b00      	cmp	r3, #0
 801d134:	d01c      	beq.n	801d170 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d138:	88db      	ldrh	r3, [r3, #6]
 801d13a:	b29a      	uxth	r2, r3
 801d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d13e:	889b      	ldrh	r3, [r3, #4]
 801d140:	b29b      	uxth	r3, r3
 801d142:	429a      	cmp	r2, r3
 801d144:	d906      	bls.n	801d154 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d146:	4b45      	ldr	r3, [pc, #276]	; (801d25c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d148:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d14c:	4944      	ldr	r1, [pc, #272]	; (801d260 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d14e:	4845      	ldr	r0, [pc, #276]	; (801d264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d150:	f001 fcec 	bl	801eb2c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d156:	68ba      	ldr	r2, [r7, #8]
 801d158:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d15c:	88db      	ldrh	r3, [r3, #6]
 801d15e:	b29a      	uxth	r2, r3
 801d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d162:	889b      	ldrh	r3, [r3, #4]
 801d164:	b29b      	uxth	r3, r3
 801d166:	429a      	cmp	r2, r3
 801d168:	d010      	beq.n	801d18c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d16a:	2300      	movs	r3, #0
 801d16c:	623b      	str	r3, [r7, #32]
 801d16e:	e00d      	b.n	801d18c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	685b      	ldr	r3, [r3, #4]
 801d174:	2b00      	cmp	r3, #0
 801d176:	d006      	beq.n	801d186 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d178:	4b38      	ldr	r3, [pc, #224]	; (801d25c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d17a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d17e:	493a      	ldr	r1, [pc, #232]	; (801d268 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d180:	4838      	ldr	r0, [pc, #224]	; (801d264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d182:	f001 fcd3 	bl	801eb2c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	68ba      	ldr	r2, [r7, #8]
 801d18a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d105      	bne.n	801d19e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d192:	68fb      	ldr	r3, [r7, #12]
 801d194:	7f9b      	ldrb	r3, [r3, #30]
 801d196:	f003 0301 	and.w	r3, r3, #1
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d059      	beq.n	801d252 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d19e:	6a3b      	ldr	r3, [r7, #32]
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d04f      	beq.n	801d244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	685b      	ldr	r3, [r3, #4]
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d006      	beq.n	801d1ba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	685b      	ldr	r3, [r3, #4]
 801d1b0:	685b      	ldr	r3, [r3, #4]
 801d1b2:	889b      	ldrh	r3, [r3, #4]
 801d1b4:	b29b      	uxth	r3, r3
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	d002      	beq.n	801d1c0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	623b      	str	r3, [r7, #32]
 801d1be:	e041      	b.n	801d244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1c2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d1ca:	e012      	b.n	801d1f2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1ce:	685b      	ldr	r3, [r3, #4]
 801d1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1d4:	88db      	ldrh	r3, [r3, #6]
 801d1d6:	b29a      	uxth	r2, r3
 801d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1da:	889b      	ldrh	r3, [r3, #4]
 801d1dc:	b29b      	uxth	r3, r3
 801d1de:	429a      	cmp	r2, r3
 801d1e0:	d002      	beq.n	801d1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d1e2:	2300      	movs	r3, #0
 801d1e4:	623b      	str	r3, [r7, #32]
            break;
 801d1e6:	e007      	b.n	801d1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1ea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d1e9      	bne.n	801d1cc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d1f8:	6a3b      	ldr	r3, [r7, #32]
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d022      	beq.n	801d244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	685b      	ldr	r3, [r3, #4]
 801d202:	2b00      	cmp	r3, #0
 801d204:	d106      	bne.n	801d214 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d206:	4b15      	ldr	r3, [pc, #84]	; (801d25c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d208:	f240 12df 	movw	r2, #479	; 0x1df
 801d20c:	4917      	ldr	r1, [pc, #92]	; (801d26c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d20e:	4815      	ldr	r0, [pc, #84]	; (801d264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d210:	f001 fc8c 	bl	801eb2c <iprintf>
          LWIP_ASSERT("sanity check",
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	685b      	ldr	r3, [r3, #4]
 801d218:	685b      	ldr	r3, [r3, #4]
 801d21a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d21c:	429a      	cmp	r2, r3
 801d21e:	d106      	bne.n	801d22e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d220:	4b0e      	ldr	r3, [pc, #56]	; (801d25c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d222:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d226:	4911      	ldr	r1, [pc, #68]	; (801d26c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d228:	480e      	ldr	r0, [pc, #56]	; (801d264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d22a:	f001 fc7f 	bl	801eb2c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	2b00      	cmp	r3, #0
 801d234:	d006      	beq.n	801d244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d236:	4b09      	ldr	r3, [pc, #36]	; (801d25c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d238:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d23c:	490c      	ldr	r1, [pc, #48]	; (801d270 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d23e:	4809      	ldr	r0, [pc, #36]	; (801d264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d240:	f001 fc74 	bl	801eb2c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d244:	6a3b      	ldr	r3, [r7, #32]
 801d246:	2b00      	cmp	r3, #0
 801d248:	bf14      	ite	ne
 801d24a:	2301      	movne	r3, #1
 801d24c:	2300      	moveq	r3, #0
 801d24e:	b2db      	uxtb	r3, r3
 801d250:	e000      	b.n	801d254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d252:	2300      	movs	r3, #0
}
 801d254:	4618      	mov	r0, r3
 801d256:	3730      	adds	r7, #48	; 0x30
 801d258:	46bd      	mov	sp, r7
 801d25a:	bd80      	pop	{r7, pc}
 801d25c:	08026270 	.word	0x08026270
 801d260:	08026354 	.word	0x08026354
 801d264:	080262b8 	.word	0x080262b8
 801d268:	08026374 	.word	0x08026374
 801d26c:	080263ac 	.word	0x080263ac
 801d270:	080263bc 	.word	0x080263bc

0801d274 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d274:	b580      	push	{r7, lr}
 801d276:	b08e      	sub	sp, #56	; 0x38
 801d278:	af00      	add	r7, sp, #0
 801d27a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	685b      	ldr	r3, [r3, #4]
 801d280:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d284:	781b      	ldrb	r3, [r3, #0]
 801d286:	f003 030f 	and.w	r3, r3, #15
 801d28a:	b2db      	uxtb	r3, r3
 801d28c:	009b      	lsls	r3, r3, #2
 801d28e:	b2db      	uxtb	r3, r3
 801d290:	2b14      	cmp	r3, #20
 801d292:	f040 8167 	bne.w	801d564 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d298:	88db      	ldrh	r3, [r3, #6]
 801d29a:	b29b      	uxth	r3, r3
 801d29c:	4618      	mov	r0, r3
 801d29e:	f7f1 ffdd 	bl	800f25c <lwip_htons>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d2a8:	b29b      	uxth	r3, r3
 801d2aa:	00db      	lsls	r3, r3, #3
 801d2ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2b0:	885b      	ldrh	r3, [r3, #2]
 801d2b2:	b29b      	uxth	r3, r3
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	f7f1 ffd1 	bl	800f25c <lwip_htons>
 801d2ba:	4603      	mov	r3, r0
 801d2bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2c0:	781b      	ldrb	r3, [r3, #0]
 801d2c2:	f003 030f 	and.w	r3, r3, #15
 801d2c6:	b2db      	uxtb	r3, r3
 801d2c8:	009b      	lsls	r3, r3, #2
 801d2ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d2ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d2d2:	b29b      	uxth	r3, r3
 801d2d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d2d6:	429a      	cmp	r2, r3
 801d2d8:	f0c0 8146 	bcc.w	801d568 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d2dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d2e0:	b29b      	uxth	r3, r3
 801d2e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d2e4:	1ad3      	subs	r3, r2, r3
 801d2e6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d2e8:	6878      	ldr	r0, [r7, #4]
 801d2ea:	f7f4 fc05 	bl	8011af8 <pbuf_clen>
 801d2ee:	4603      	mov	r3, r0
 801d2f0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d2f2:	4b9f      	ldr	r3, [pc, #636]	; (801d570 <ip4_reass+0x2fc>)
 801d2f4:	881b      	ldrh	r3, [r3, #0]
 801d2f6:	461a      	mov	r2, r3
 801d2f8:	8c3b      	ldrh	r3, [r7, #32]
 801d2fa:	4413      	add	r3, r2
 801d2fc:	2b0a      	cmp	r3, #10
 801d2fe:	dd10      	ble.n	801d322 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d300:	8c3b      	ldrh	r3, [r7, #32]
 801d302:	4619      	mov	r1, r3
 801d304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d306:	f7ff fd81 	bl	801ce0c <ip_reass_remove_oldest_datagram>
 801d30a:	4603      	mov	r3, r0
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	f000 812d 	beq.w	801d56c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d312:	4b97      	ldr	r3, [pc, #604]	; (801d570 <ip4_reass+0x2fc>)
 801d314:	881b      	ldrh	r3, [r3, #0]
 801d316:	461a      	mov	r2, r3
 801d318:	8c3b      	ldrh	r3, [r7, #32]
 801d31a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d31c:	2b0a      	cmp	r3, #10
 801d31e:	f300 8125 	bgt.w	801d56c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d322:	4b94      	ldr	r3, [pc, #592]	; (801d574 <ip4_reass+0x300>)
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	633b      	str	r3, [r7, #48]	; 0x30
 801d328:	e015      	b.n	801d356 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d32c:	695a      	ldr	r2, [r3, #20]
 801d32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d330:	68db      	ldr	r3, [r3, #12]
 801d332:	429a      	cmp	r2, r3
 801d334:	d10c      	bne.n	801d350 <ip4_reass+0xdc>
 801d336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d338:	699a      	ldr	r2, [r3, #24]
 801d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d33c:	691b      	ldr	r3, [r3, #16]
 801d33e:	429a      	cmp	r2, r3
 801d340:	d106      	bne.n	801d350 <ip4_reass+0xdc>
 801d342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d344:	899a      	ldrh	r2, [r3, #12]
 801d346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d348:	889b      	ldrh	r3, [r3, #4]
 801d34a:	b29b      	uxth	r3, r3
 801d34c:	429a      	cmp	r2, r3
 801d34e:	d006      	beq.n	801d35e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	633b      	str	r3, [r7, #48]	; 0x30
 801d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d1e6      	bne.n	801d32a <ip4_reass+0xb6>
 801d35c:	e000      	b.n	801d360 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d35e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d362:	2b00      	cmp	r3, #0
 801d364:	d109      	bne.n	801d37a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d366:	8c3b      	ldrh	r3, [r7, #32]
 801d368:	4619      	mov	r1, r3
 801d36a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d36c:	f7ff fdb0 	bl	801ced0 <ip_reass_enqueue_new_datagram>
 801d370:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d374:	2b00      	cmp	r3, #0
 801d376:	d11c      	bne.n	801d3b2 <ip4_reass+0x13e>
      goto nullreturn;
 801d378:	e109      	b.n	801d58e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d37c:	88db      	ldrh	r3, [r3, #6]
 801d37e:	b29b      	uxth	r3, r3
 801d380:	4618      	mov	r0, r3
 801d382:	f7f1 ff6b 	bl	800f25c <lwip_htons>
 801d386:	4603      	mov	r3, r0
 801d388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d110      	bne.n	801d3b2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d392:	89db      	ldrh	r3, [r3, #14]
 801d394:	4618      	mov	r0, r3
 801d396:	f7f1 ff61 	bl	800f25c <lwip_htons>
 801d39a:	4603      	mov	r3, r0
 801d39c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d006      	beq.n	801d3b2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3a6:	3308      	adds	r3, #8
 801d3a8:	2214      	movs	r2, #20
 801d3aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d3ac:	4618      	mov	r0, r3
 801d3ae:	f000 fe79 	bl	801e0a4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3b4:	88db      	ldrh	r3, [r3, #6]
 801d3b6:	b29b      	uxth	r3, r3
 801d3b8:	f003 0320 	and.w	r3, r3, #32
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	bf0c      	ite	eq
 801d3c0:	2301      	moveq	r3, #1
 801d3c2:	2300      	movne	r3, #0
 801d3c4:	b2db      	uxtb	r3, r3
 801d3c6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d3c8:	69fb      	ldr	r3, [r7, #28]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d00e      	beq.n	801d3ec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d3ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d3d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d3d2:	4413      	add	r3, r2
 801d3d4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d3d6:	8b7a      	ldrh	r2, [r7, #26]
 801d3d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d3da:	429a      	cmp	r2, r3
 801d3dc:	f0c0 80a0 	bcc.w	801d520 <ip4_reass+0x2ac>
 801d3e0:	8b7b      	ldrh	r3, [r7, #26]
 801d3e2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d3e6:	4293      	cmp	r3, r2
 801d3e8:	f200 809a 	bhi.w	801d520 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d3ec:	69fa      	ldr	r2, [r7, #28]
 801d3ee:	6879      	ldr	r1, [r7, #4]
 801d3f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d3f2:	f7ff fdd5 	bl	801cfa0 <ip_reass_chain_frag_into_datagram_and_validate>
 801d3f6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d3f8:	697b      	ldr	r3, [r7, #20]
 801d3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3fe:	f000 8091 	beq.w	801d524 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d402:	4b5b      	ldr	r3, [pc, #364]	; (801d570 <ip4_reass+0x2fc>)
 801d404:	881a      	ldrh	r2, [r3, #0]
 801d406:	8c3b      	ldrh	r3, [r7, #32]
 801d408:	4413      	add	r3, r2
 801d40a:	b29a      	uxth	r2, r3
 801d40c:	4b58      	ldr	r3, [pc, #352]	; (801d570 <ip4_reass+0x2fc>)
 801d40e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d410:	69fb      	ldr	r3, [r7, #28]
 801d412:	2b00      	cmp	r3, #0
 801d414:	d00d      	beq.n	801d432 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d416:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d41a:	4413      	add	r3, r2
 801d41c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d420:	8a7a      	ldrh	r2, [r7, #18]
 801d422:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d426:	7f9b      	ldrb	r3, [r3, #30]
 801d428:	f043 0301 	orr.w	r3, r3, #1
 801d42c:	b2da      	uxtb	r2, r3
 801d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d430:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d432:	697b      	ldr	r3, [r7, #20]
 801d434:	2b01      	cmp	r3, #1
 801d436:	d171      	bne.n	801d51c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d43a:	8b9b      	ldrh	r3, [r3, #28]
 801d43c:	3314      	adds	r3, #20
 801d43e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d442:	685b      	ldr	r3, [r3, #4]
 801d444:	685b      	ldr	r3, [r3, #4]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d44c:	685b      	ldr	r3, [r3, #4]
 801d44e:	685b      	ldr	r3, [r3, #4]
 801d450:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d454:	3308      	adds	r3, #8
 801d456:	2214      	movs	r2, #20
 801d458:	4619      	mov	r1, r3
 801d45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d45c:	f000 fe22 	bl	801e0a4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d460:	8a3b      	ldrh	r3, [r7, #16]
 801d462:	4618      	mov	r0, r3
 801d464:	f7f1 fefa 	bl	800f25c <lwip_htons>
 801d468:	4603      	mov	r3, r0
 801d46a:	461a      	mov	r2, r3
 801d46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d46e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d472:	2200      	movs	r2, #0
 801d474:	719a      	strb	r2, [r3, #6]
 801d476:	2200      	movs	r2, #0
 801d478:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d47c:	2200      	movs	r2, #0
 801d47e:	729a      	strb	r2, [r3, #10]
 801d480:	2200      	movs	r2, #0
 801d482:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d486:	685b      	ldr	r3, [r3, #4]
 801d488:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d48a:	e00d      	b.n	801d4a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d48e:	685b      	ldr	r3, [r3, #4]
 801d490:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d492:	2114      	movs	r1, #20
 801d494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d496:	f7f4 f9e9 	bl	801186c <pbuf_remove_header>
      pbuf_cat(p, r);
 801d49a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d49c:	6878      	ldr	r0, [r7, #4]
 801d49e:	f7f4 fb6b 	bl	8011b78 <pbuf_cat>
      r = iprh->next_pbuf;
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 801d4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d1ee      	bne.n	801d48c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d4ae:	4b31      	ldr	r3, [pc, #196]	; (801d574 <ip4_reass+0x300>)
 801d4b0:	681b      	ldr	r3, [r3, #0]
 801d4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d4b4:	429a      	cmp	r2, r3
 801d4b6:	d102      	bne.n	801d4be <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d4b8:	2300      	movs	r3, #0
 801d4ba:	637b      	str	r3, [r7, #52]	; 0x34
 801d4bc:	e010      	b.n	801d4e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d4be:	4b2d      	ldr	r3, [pc, #180]	; (801d574 <ip4_reass+0x300>)
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	637b      	str	r3, [r7, #52]	; 0x34
 801d4c4:	e007      	b.n	801d4d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d4cc:	429a      	cmp	r2, r3
 801d4ce:	d006      	beq.n	801d4de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	637b      	str	r3, [r7, #52]	; 0x34
 801d4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d1f4      	bne.n	801d4c6 <ip4_reass+0x252>
 801d4dc:	e000      	b.n	801d4e0 <ip4_reass+0x26c>
          break;
 801d4de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d4e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d4e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d4e4:	f7ff fd2e 	bl	801cf44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d4e8:	6878      	ldr	r0, [r7, #4]
 801d4ea:	f7f4 fb05 	bl	8011af8 <pbuf_clen>
 801d4ee:	4603      	mov	r3, r0
 801d4f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d4f2:	4b1f      	ldr	r3, [pc, #124]	; (801d570 <ip4_reass+0x2fc>)
 801d4f4:	881b      	ldrh	r3, [r3, #0]
 801d4f6:	8c3a      	ldrh	r2, [r7, #32]
 801d4f8:	429a      	cmp	r2, r3
 801d4fa:	d906      	bls.n	801d50a <ip4_reass+0x296>
 801d4fc:	4b1e      	ldr	r3, [pc, #120]	; (801d578 <ip4_reass+0x304>)
 801d4fe:	f240 229b 	movw	r2, #667	; 0x29b
 801d502:	491e      	ldr	r1, [pc, #120]	; (801d57c <ip4_reass+0x308>)
 801d504:	481e      	ldr	r0, [pc, #120]	; (801d580 <ip4_reass+0x30c>)
 801d506:	f001 fb11 	bl	801eb2c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d50a:	4b19      	ldr	r3, [pc, #100]	; (801d570 <ip4_reass+0x2fc>)
 801d50c:	881a      	ldrh	r2, [r3, #0]
 801d50e:	8c3b      	ldrh	r3, [r7, #32]
 801d510:	1ad3      	subs	r3, r2, r3
 801d512:	b29a      	uxth	r2, r3
 801d514:	4b16      	ldr	r3, [pc, #88]	; (801d570 <ip4_reass+0x2fc>)
 801d516:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	e03c      	b.n	801d596 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d51c:	2300      	movs	r3, #0
 801d51e:	e03a      	b.n	801d596 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801d520:	bf00      	nop
 801d522:	e000      	b.n	801d526 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801d524:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d106      	bne.n	801d53a <ip4_reass+0x2c6>
 801d52c:	4b12      	ldr	r3, [pc, #72]	; (801d578 <ip4_reass+0x304>)
 801d52e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d532:	4914      	ldr	r1, [pc, #80]	; (801d584 <ip4_reass+0x310>)
 801d534:	4812      	ldr	r0, [pc, #72]	; (801d580 <ip4_reass+0x30c>)
 801d536:	f001 faf9 	bl	801eb2c <iprintf>
  if (ipr->p == NULL) {
 801d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d53c:	685b      	ldr	r3, [r3, #4]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d124      	bne.n	801d58c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d542:	4b0c      	ldr	r3, [pc, #48]	; (801d574 <ip4_reass+0x300>)
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d548:	429a      	cmp	r2, r3
 801d54a:	d006      	beq.n	801d55a <ip4_reass+0x2e6>
 801d54c:	4b0a      	ldr	r3, [pc, #40]	; (801d578 <ip4_reass+0x304>)
 801d54e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d552:	490d      	ldr	r1, [pc, #52]	; (801d588 <ip4_reass+0x314>)
 801d554:	480a      	ldr	r0, [pc, #40]	; (801d580 <ip4_reass+0x30c>)
 801d556:	f001 fae9 	bl	801eb2c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d55a:	2100      	movs	r1, #0
 801d55c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d55e:	f7ff fcf1 	bl	801cf44 <ip_reass_dequeue_datagram>
 801d562:	e014      	b.n	801d58e <ip4_reass+0x31a>
    goto nullreturn;
 801d564:	bf00      	nop
 801d566:	e012      	b.n	801d58e <ip4_reass+0x31a>
    goto nullreturn;
 801d568:	bf00      	nop
 801d56a:	e010      	b.n	801d58e <ip4_reass+0x31a>
      goto nullreturn;
 801d56c:	bf00      	nop
 801d56e:	e00e      	b.n	801d58e <ip4_reass+0x31a>
 801d570:	200144a4 	.word	0x200144a4
 801d574:	200144a0 	.word	0x200144a0
 801d578:	08026270 	.word	0x08026270
 801d57c:	080263e0 	.word	0x080263e0
 801d580:	080262b8 	.word	0x080262b8
 801d584:	080263fc 	.word	0x080263fc
 801d588:	08026408 	.word	0x08026408
  }

nullreturn:
 801d58c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d58e:	6878      	ldr	r0, [r7, #4]
 801d590:	f7f4 fa24 	bl	80119dc <pbuf_free>
  return NULL;
 801d594:	2300      	movs	r3, #0
}
 801d596:	4618      	mov	r0, r3
 801d598:	3738      	adds	r7, #56	; 0x38
 801d59a:	46bd      	mov	sp, r7
 801d59c:	bd80      	pop	{r7, pc}
 801d59e:	bf00      	nop

0801d5a0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d5a4:	2005      	movs	r0, #5
 801d5a6:	f7f3 fae5 	bl	8010b74 <memp_malloc>
 801d5aa:	4603      	mov	r3, r0
}
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	bd80      	pop	{r7, pc}

0801d5b0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d5b0:	b580      	push	{r7, lr}
 801d5b2:	b082      	sub	sp, #8
 801d5b4:	af00      	add	r7, sp, #0
 801d5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d106      	bne.n	801d5cc <ip_frag_free_pbuf_custom_ref+0x1c>
 801d5be:	4b07      	ldr	r3, [pc, #28]	; (801d5dc <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d5c0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d5c4:	4906      	ldr	r1, [pc, #24]	; (801d5e0 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d5c6:	4807      	ldr	r0, [pc, #28]	; (801d5e4 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d5c8:	f001 fab0 	bl	801eb2c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d5cc:	6879      	ldr	r1, [r7, #4]
 801d5ce:	2005      	movs	r0, #5
 801d5d0:	f7f3 fb22 	bl	8010c18 <memp_free>
}
 801d5d4:	bf00      	nop
 801d5d6:	3708      	adds	r7, #8
 801d5d8:	46bd      	mov	sp, r7
 801d5da:	bd80      	pop	{r7, pc}
 801d5dc:	08026270 	.word	0x08026270
 801d5e0:	08026428 	.word	0x08026428
 801d5e4:	080262b8 	.word	0x080262b8

0801d5e8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d5e8:	b580      	push	{r7, lr}
 801d5ea:	b084      	sub	sp, #16
 801d5ec:	af00      	add	r7, sp, #0
 801d5ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d106      	bne.n	801d608 <ipfrag_free_pbuf_custom+0x20>
 801d5fa:	4b11      	ldr	r3, [pc, #68]	; (801d640 <ipfrag_free_pbuf_custom+0x58>)
 801d5fc:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d600:	4910      	ldr	r1, [pc, #64]	; (801d644 <ipfrag_free_pbuf_custom+0x5c>)
 801d602:	4811      	ldr	r0, [pc, #68]	; (801d648 <ipfrag_free_pbuf_custom+0x60>)
 801d604:	f001 fa92 	bl	801eb2c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d608:	68fa      	ldr	r2, [r7, #12]
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	429a      	cmp	r2, r3
 801d60e:	d006      	beq.n	801d61e <ipfrag_free_pbuf_custom+0x36>
 801d610:	4b0b      	ldr	r3, [pc, #44]	; (801d640 <ipfrag_free_pbuf_custom+0x58>)
 801d612:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d616:	490d      	ldr	r1, [pc, #52]	; (801d64c <ipfrag_free_pbuf_custom+0x64>)
 801d618:	480b      	ldr	r0, [pc, #44]	; (801d648 <ipfrag_free_pbuf_custom+0x60>)
 801d61a:	f001 fa87 	bl	801eb2c <iprintf>
  if (pcr->original != NULL) {
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	695b      	ldr	r3, [r3, #20]
 801d622:	2b00      	cmp	r3, #0
 801d624:	d004      	beq.n	801d630 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	695b      	ldr	r3, [r3, #20]
 801d62a:	4618      	mov	r0, r3
 801d62c:	f7f4 f9d6 	bl	80119dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d630:	68f8      	ldr	r0, [r7, #12]
 801d632:	f7ff ffbd 	bl	801d5b0 <ip_frag_free_pbuf_custom_ref>
}
 801d636:	bf00      	nop
 801d638:	3710      	adds	r7, #16
 801d63a:	46bd      	mov	sp, r7
 801d63c:	bd80      	pop	{r7, pc}
 801d63e:	bf00      	nop
 801d640:	08026270 	.word	0x08026270
 801d644:	08026434 	.word	0x08026434
 801d648:	080262b8 	.word	0x080262b8
 801d64c:	08026440 	.word	0x08026440

0801d650 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d650:	b580      	push	{r7, lr}
 801d652:	b094      	sub	sp, #80	; 0x50
 801d654:	af02      	add	r7, sp, #8
 801d656:	60f8      	str	r0, [r7, #12]
 801d658:	60b9      	str	r1, [r7, #8]
 801d65a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d65c:	2300      	movs	r3, #0
 801d65e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d662:	68bb      	ldr	r3, [r7, #8]
 801d664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d666:	3b14      	subs	r3, #20
 801d668:	2b00      	cmp	r3, #0
 801d66a:	da00      	bge.n	801d66e <ip4_frag+0x1e>
 801d66c:	3307      	adds	r3, #7
 801d66e:	10db      	asrs	r3, r3, #3
 801d670:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d672:	2314      	movs	r3, #20
 801d674:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	685b      	ldr	r3, [r3, #4]
 801d67a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d67e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d682:	781b      	ldrb	r3, [r3, #0]
 801d684:	f003 030f 	and.w	r3, r3, #15
 801d688:	b2db      	uxtb	r3, r3
 801d68a:	009b      	lsls	r3, r3, #2
 801d68c:	b2db      	uxtb	r3, r3
 801d68e:	2b14      	cmp	r3, #20
 801d690:	d002      	beq.n	801d698 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d692:	f06f 0305 	mvn.w	r3, #5
 801d696:	e110      	b.n	801d8ba <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	895b      	ldrh	r3, [r3, #10]
 801d69c:	2b13      	cmp	r3, #19
 801d69e:	d809      	bhi.n	801d6b4 <ip4_frag+0x64>
 801d6a0:	4b88      	ldr	r3, [pc, #544]	; (801d8c4 <ip4_frag+0x274>)
 801d6a2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d6a6:	4988      	ldr	r1, [pc, #544]	; (801d8c8 <ip4_frag+0x278>)
 801d6a8:	4888      	ldr	r0, [pc, #544]	; (801d8cc <ip4_frag+0x27c>)
 801d6aa:	f001 fa3f 	bl	801eb2c <iprintf>
 801d6ae:	f06f 0305 	mvn.w	r3, #5
 801d6b2:	e102      	b.n	801d8ba <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6b6:	88db      	ldrh	r3, [r3, #6]
 801d6b8:	b29b      	uxth	r3, r3
 801d6ba:	4618      	mov	r0, r3
 801d6bc:	f7f1 fdce 	bl	800f25c <lwip_htons>
 801d6c0:	4603      	mov	r3, r0
 801d6c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d6c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d6c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d6ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d6ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d6d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d6d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d6d6:	68fb      	ldr	r3, [r7, #12]
 801d6d8:	891b      	ldrh	r3, [r3, #8]
 801d6da:	3b14      	subs	r3, #20
 801d6dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d6e0:	e0e1      	b.n	801d8a6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d6e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d6e4:	00db      	lsls	r3, r3, #3
 801d6e6:	b29b      	uxth	r3, r3
 801d6e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d6ec:	4293      	cmp	r3, r2
 801d6ee:	bf28      	it	cs
 801d6f0:	4613      	movcs	r3, r2
 801d6f2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d6f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d6f8:	2114      	movs	r1, #20
 801d6fa:	200e      	movs	r0, #14
 801d6fc:	f7f3 fe58 	bl	80113b0 <pbuf_alloc>
 801d700:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d704:	2b00      	cmp	r3, #0
 801d706:	f000 80d5 	beq.w	801d8b4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d70c:	895b      	ldrh	r3, [r3, #10]
 801d70e:	2b13      	cmp	r3, #19
 801d710:	d806      	bhi.n	801d720 <ip4_frag+0xd0>
 801d712:	4b6c      	ldr	r3, [pc, #432]	; (801d8c4 <ip4_frag+0x274>)
 801d714:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d718:	496d      	ldr	r1, [pc, #436]	; (801d8d0 <ip4_frag+0x280>)
 801d71a:	486c      	ldr	r0, [pc, #432]	; (801d8cc <ip4_frag+0x27c>)
 801d71c:	f001 fa06 	bl	801eb2c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d722:	685b      	ldr	r3, [r3, #4]
 801d724:	2214      	movs	r2, #20
 801d726:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d728:	4618      	mov	r0, r3
 801d72a:	f000 fcbb 	bl	801e0a4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d730:	685b      	ldr	r3, [r3, #4]
 801d732:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d734:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d736:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d73a:	e064      	b.n	801d806 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d73c:	68fb      	ldr	r3, [r7, #12]
 801d73e:	895a      	ldrh	r2, [r3, #10]
 801d740:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d742:	1ad3      	subs	r3, r2, r3
 801d744:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	895b      	ldrh	r3, [r3, #10]
 801d74a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d74c:	429a      	cmp	r2, r3
 801d74e:	d906      	bls.n	801d75e <ip4_frag+0x10e>
 801d750:	4b5c      	ldr	r3, [pc, #368]	; (801d8c4 <ip4_frag+0x274>)
 801d752:	f240 322d 	movw	r2, #813	; 0x32d
 801d756:	495f      	ldr	r1, [pc, #380]	; (801d8d4 <ip4_frag+0x284>)
 801d758:	485c      	ldr	r0, [pc, #368]	; (801d8cc <ip4_frag+0x27c>)
 801d75a:	f001 f9e7 	bl	801eb2c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d75e:	8bfa      	ldrh	r2, [r7, #30]
 801d760:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d764:	4293      	cmp	r3, r2
 801d766:	bf28      	it	cs
 801d768:	4613      	movcs	r3, r2
 801d76a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d76e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d772:	2b00      	cmp	r3, #0
 801d774:	d105      	bne.n	801d782 <ip4_frag+0x132>
        poff = 0;
 801d776:	2300      	movs	r3, #0
 801d778:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	60fb      	str	r3, [r7, #12]
        continue;
 801d780:	e041      	b.n	801d806 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d782:	f7ff ff0d 	bl	801d5a0 <ip_frag_alloc_pbuf_custom_ref>
 801d786:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d788:	69bb      	ldr	r3, [r7, #24]
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d103      	bne.n	801d796 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d78e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d790:	f7f4 f924 	bl	80119dc <pbuf_free>
        goto memerr;
 801d794:	e08f      	b.n	801d8b6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d796:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d79c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d79e:	4413      	add	r3, r2
 801d7a0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801d7a4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801d7a8:	9201      	str	r2, [sp, #4]
 801d7aa:	9300      	str	r3, [sp, #0]
 801d7ac:	4603      	mov	r3, r0
 801d7ae:	2241      	movs	r2, #65	; 0x41
 801d7b0:	2000      	movs	r0, #0
 801d7b2:	f7f3 ff27 	bl	8011604 <pbuf_alloced_custom>
 801d7b6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d7b8:	697b      	ldr	r3, [r7, #20]
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	d106      	bne.n	801d7cc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d7be:	69b8      	ldr	r0, [r7, #24]
 801d7c0:	f7ff fef6 	bl	801d5b0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d7c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d7c6:	f7f4 f909 	bl	80119dc <pbuf_free>
        goto memerr;
 801d7ca:	e074      	b.n	801d8b6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d7cc:	68f8      	ldr	r0, [r7, #12]
 801d7ce:	f7f4 f9ab 	bl	8011b28 <pbuf_ref>
      pcr->original = p;
 801d7d2:	69bb      	ldr	r3, [r7, #24]
 801d7d4:	68fa      	ldr	r2, [r7, #12]
 801d7d6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d7d8:	69bb      	ldr	r3, [r7, #24]
 801d7da:	4a3f      	ldr	r2, [pc, #252]	; (801d8d8 <ip4_frag+0x288>)
 801d7dc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d7de:	6979      	ldr	r1, [r7, #20]
 801d7e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d7e2:	f7f4 f9c9 	bl	8011b78 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d7e6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801d7ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d7ee:	1ad3      	subs	r3, r2, r3
 801d7f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801d7f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d004      	beq.n	801d806 <ip4_frag+0x1b6>
        poff = 0;
 801d7fc:	2300      	movs	r3, #0
 801d7fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d806:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d196      	bne.n	801d73c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d80e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d810:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d814:	4413      	add	r3, r2
 801d816:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d818:	68bb      	ldr	r3, [r7, #8]
 801d81a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d81c:	f1a3 0213 	sub.w	r2, r3, #19
 801d820:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d824:	429a      	cmp	r2, r3
 801d826:	bfcc      	ite	gt
 801d828:	2301      	movgt	r3, #1
 801d82a:	2300      	movle	r3, #0
 801d82c:	b2db      	uxtb	r3, r3
 801d82e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d830:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d838:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801d83a:	6a3b      	ldr	r3, [r7, #32]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d002      	beq.n	801d846 <ip4_frag+0x1f6>
 801d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d842:	2b00      	cmp	r3, #0
 801d844:	d003      	beq.n	801d84e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d846:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d848:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d84c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d84e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d850:	4618      	mov	r0, r3
 801d852:	f7f1 fd03 	bl	800f25c <lwip_htons>
 801d856:	4603      	mov	r3, r0
 801d858:	461a      	mov	r2, r3
 801d85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d85c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d85e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d860:	3314      	adds	r3, #20
 801d862:	b29b      	uxth	r3, r3
 801d864:	4618      	mov	r0, r3
 801d866:	f7f1 fcf9 	bl	800f25c <lwip_htons>
 801d86a:	4603      	mov	r3, r0
 801d86c:	461a      	mov	r2, r3
 801d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d870:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d874:	2200      	movs	r2, #0
 801d876:	729a      	strb	r2, [r3, #10]
 801d878:	2200      	movs	r2, #0
 801d87a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d87c:	68bb      	ldr	r3, [r7, #8]
 801d87e:	695b      	ldr	r3, [r3, #20]
 801d880:	687a      	ldr	r2, [r7, #4]
 801d882:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d884:	68b8      	ldr	r0, [r7, #8]
 801d886:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d88a:	f7f4 f8a7 	bl	80119dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d88e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d892:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d894:	1ad3      	subs	r3, r2, r3
 801d896:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801d89a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d89e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d8a0:	4413      	add	r3, r2
 801d8a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801d8a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	f47f af19 	bne.w	801d6e2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d8b0:	2300      	movs	r3, #0
 801d8b2:	e002      	b.n	801d8ba <ip4_frag+0x26a>
      goto memerr;
 801d8b4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d8b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d8ba:	4618      	mov	r0, r3
 801d8bc:	3748      	adds	r7, #72	; 0x48
 801d8be:	46bd      	mov	sp, r7
 801d8c0:	bd80      	pop	{r7, pc}
 801d8c2:	bf00      	nop
 801d8c4:	08026270 	.word	0x08026270
 801d8c8:	0802644c 	.word	0x0802644c
 801d8cc:	080262b8 	.word	0x080262b8
 801d8d0:	08026468 	.word	0x08026468
 801d8d4:	08026488 	.word	0x08026488
 801d8d8:	0801d5e9 	.word	0x0801d5e9

0801d8dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d8dc:	b580      	push	{r7, lr}
 801d8de:	b086      	sub	sp, #24
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	6078      	str	r0, [r7, #4]
 801d8e4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d8e6:	230e      	movs	r3, #14
 801d8e8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	895b      	ldrh	r3, [r3, #10]
 801d8ee:	2b0e      	cmp	r3, #14
 801d8f0:	d96e      	bls.n	801d9d0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	7bdb      	ldrb	r3, [r3, #15]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d106      	bne.n	801d908 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d8fa:	683b      	ldr	r3, [r7, #0]
 801d8fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801d900:	3301      	adds	r3, #1
 801d902:	b2da      	uxtb	r2, r3
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	685b      	ldr	r3, [r3, #4]
 801d90c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d90e:	693b      	ldr	r3, [r7, #16]
 801d910:	7b1a      	ldrb	r2, [r3, #12]
 801d912:	7b5b      	ldrb	r3, [r3, #13]
 801d914:	021b      	lsls	r3, r3, #8
 801d916:	4313      	orrs	r3, r2
 801d918:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d91a:	693b      	ldr	r3, [r7, #16]
 801d91c:	781b      	ldrb	r3, [r3, #0]
 801d91e:	f003 0301 	and.w	r3, r3, #1
 801d922:	2b00      	cmp	r3, #0
 801d924:	d023      	beq.n	801d96e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d926:	693b      	ldr	r3, [r7, #16]
 801d928:	781b      	ldrb	r3, [r3, #0]
 801d92a:	2b01      	cmp	r3, #1
 801d92c:	d10f      	bne.n	801d94e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d92e:	693b      	ldr	r3, [r7, #16]
 801d930:	785b      	ldrb	r3, [r3, #1]
 801d932:	2b00      	cmp	r3, #0
 801d934:	d11b      	bne.n	801d96e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d936:	693b      	ldr	r3, [r7, #16]
 801d938:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d93a:	2b5e      	cmp	r3, #94	; 0x5e
 801d93c:	d117      	bne.n	801d96e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	7b5b      	ldrb	r3, [r3, #13]
 801d942:	f043 0310 	orr.w	r3, r3, #16
 801d946:	b2da      	uxtb	r2, r3
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	735a      	strb	r2, [r3, #13]
 801d94c:	e00f      	b.n	801d96e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d94e:	693b      	ldr	r3, [r7, #16]
 801d950:	2206      	movs	r2, #6
 801d952:	4928      	ldr	r1, [pc, #160]	; (801d9f4 <ethernet_input+0x118>)
 801d954:	4618      	mov	r0, r3
 801d956:	f000 fb97 	bl	801e088 <memcmp>
 801d95a:	4603      	mov	r3, r0
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d106      	bne.n	801d96e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	7b5b      	ldrb	r3, [r3, #13]
 801d964:	f043 0308 	orr.w	r3, r3, #8
 801d968:	b2da      	uxtb	r2, r3
 801d96a:	687b      	ldr	r3, [r7, #4]
 801d96c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d96e:	89fb      	ldrh	r3, [r7, #14]
 801d970:	2b08      	cmp	r3, #8
 801d972:	d003      	beq.n	801d97c <ethernet_input+0xa0>
 801d974:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801d978:	d014      	beq.n	801d9a4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d97a:	e032      	b.n	801d9e2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d97c:	683b      	ldr	r3, [r7, #0]
 801d97e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d982:	f003 0308 	and.w	r3, r3, #8
 801d986:	2b00      	cmp	r3, #0
 801d988:	d024      	beq.n	801d9d4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d98a:	8afb      	ldrh	r3, [r7, #22]
 801d98c:	4619      	mov	r1, r3
 801d98e:	6878      	ldr	r0, [r7, #4]
 801d990:	f7f3 ff6c 	bl	801186c <pbuf_remove_header>
 801d994:	4603      	mov	r3, r0
 801d996:	2b00      	cmp	r3, #0
 801d998:	d11e      	bne.n	801d9d8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d99a:	6839      	ldr	r1, [r7, #0]
 801d99c:	6878      	ldr	r0, [r7, #4]
 801d99e:	f7fe fddf 	bl	801c560 <ip4_input>
      break;
 801d9a2:	e013      	b.n	801d9cc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d9a4:	683b      	ldr	r3, [r7, #0]
 801d9a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d9aa:	f003 0308 	and.w	r3, r3, #8
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d014      	beq.n	801d9dc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d9b2:	8afb      	ldrh	r3, [r7, #22]
 801d9b4:	4619      	mov	r1, r3
 801d9b6:	6878      	ldr	r0, [r7, #4]
 801d9b8:	f7f3 ff58 	bl	801186c <pbuf_remove_header>
 801d9bc:	4603      	mov	r3, r0
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d10e      	bne.n	801d9e0 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d9c2:	6839      	ldr	r1, [r7, #0]
 801d9c4:	6878      	ldr	r0, [r7, #4]
 801d9c6:	f7fd ff75 	bl	801b8b4 <etharp_input>
      break;
 801d9ca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	e00c      	b.n	801d9ea <ethernet_input+0x10e>
    goto free_and_return;
 801d9d0:	bf00      	nop
 801d9d2:	e006      	b.n	801d9e2 <ethernet_input+0x106>
        goto free_and_return;
 801d9d4:	bf00      	nop
 801d9d6:	e004      	b.n	801d9e2 <ethernet_input+0x106>
        goto free_and_return;
 801d9d8:	bf00      	nop
 801d9da:	e002      	b.n	801d9e2 <ethernet_input+0x106>
        goto free_and_return;
 801d9dc:	bf00      	nop
 801d9de:	e000      	b.n	801d9e2 <ethernet_input+0x106>
        goto free_and_return;
 801d9e0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d9e2:	6878      	ldr	r0, [r7, #4]
 801d9e4:	f7f3 fffa 	bl	80119dc <pbuf_free>
  return ERR_OK;
 801d9e8:	2300      	movs	r3, #0
}
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	3718      	adds	r7, #24
 801d9ee:	46bd      	mov	sp, r7
 801d9f0:	bd80      	pop	{r7, pc}
 801d9f2:	bf00      	nop
 801d9f4:	080267a8 	.word	0x080267a8

0801d9f8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d9f8:	b580      	push	{r7, lr}
 801d9fa:	b086      	sub	sp, #24
 801d9fc:	af00      	add	r7, sp, #0
 801d9fe:	60f8      	str	r0, [r7, #12]
 801da00:	60b9      	str	r1, [r7, #8]
 801da02:	607a      	str	r2, [r7, #4]
 801da04:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801da06:	8c3b      	ldrh	r3, [r7, #32]
 801da08:	4618      	mov	r0, r3
 801da0a:	f7f1 fc27 	bl	800f25c <lwip_htons>
 801da0e:	4603      	mov	r3, r0
 801da10:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801da12:	210e      	movs	r1, #14
 801da14:	68b8      	ldr	r0, [r7, #8]
 801da16:	f7f3 ff19 	bl	801184c <pbuf_add_header>
 801da1a:	4603      	mov	r3, r0
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d125      	bne.n	801da6c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801da20:	68bb      	ldr	r3, [r7, #8]
 801da22:	685b      	ldr	r3, [r3, #4]
 801da24:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801da26:	693b      	ldr	r3, [r7, #16]
 801da28:	8afa      	ldrh	r2, [r7, #22]
 801da2a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801da2c:	693b      	ldr	r3, [r7, #16]
 801da2e:	2206      	movs	r2, #6
 801da30:	6839      	ldr	r1, [r7, #0]
 801da32:	4618      	mov	r0, r3
 801da34:	f000 fb36 	bl	801e0a4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801da38:	693b      	ldr	r3, [r7, #16]
 801da3a:	3306      	adds	r3, #6
 801da3c:	2206      	movs	r2, #6
 801da3e:	6879      	ldr	r1, [r7, #4]
 801da40:	4618      	mov	r0, r3
 801da42:	f000 fb2f 	bl	801e0a4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801da4c:	2b06      	cmp	r3, #6
 801da4e:	d006      	beq.n	801da5e <ethernet_output+0x66>
 801da50:	4b0a      	ldr	r3, [pc, #40]	; (801da7c <ethernet_output+0x84>)
 801da52:	f44f 7299 	mov.w	r2, #306	; 0x132
 801da56:	490a      	ldr	r1, [pc, #40]	; (801da80 <ethernet_output+0x88>)
 801da58:	480a      	ldr	r0, [pc, #40]	; (801da84 <ethernet_output+0x8c>)
 801da5a:	f001 f867 	bl	801eb2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801da5e:	68fb      	ldr	r3, [r7, #12]
 801da60:	699b      	ldr	r3, [r3, #24]
 801da62:	68b9      	ldr	r1, [r7, #8]
 801da64:	68f8      	ldr	r0, [r7, #12]
 801da66:	4798      	blx	r3
 801da68:	4603      	mov	r3, r0
 801da6a:	e002      	b.n	801da72 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801da6c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801da6e:	f06f 0301 	mvn.w	r3, #1
}
 801da72:	4618      	mov	r0, r3
 801da74:	3718      	adds	r7, #24
 801da76:	46bd      	mov	sp, r7
 801da78:	bd80      	pop	{r7, pc}
 801da7a:	bf00      	nop
 801da7c:	08026498 	.word	0x08026498
 801da80:	080264d0 	.word	0x080264d0
 801da84:	08026504 	.word	0x08026504

0801da88 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801da88:	b580      	push	{r7, lr}
 801da8a:	b084      	sub	sp, #16
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	6078      	str	r0, [r7, #4]
 801da90:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801da92:	683b      	ldr	r3, [r7, #0]
 801da94:	60bb      	str	r3, [r7, #8]
 801da96:	2304      	movs	r3, #4
 801da98:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801da9a:	f107 0308 	add.w	r3, r7, #8
 801da9e:	2100      	movs	r1, #0
 801daa0:	4618      	mov	r0, r3
 801daa2:	f7e9 ff9e 	bl	80079e2 <osMessageCreate>
 801daa6:	4602      	mov	r2, r0
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	681b      	ldr	r3, [r3, #0]
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d102      	bne.n	801daba <sys_mbox_new+0x32>
    return ERR_MEM;
 801dab4:	f04f 33ff 	mov.w	r3, #4294967295
 801dab8:	e000      	b.n	801dabc <sys_mbox_new+0x34>

  return ERR_OK;
 801daba:	2300      	movs	r3, #0
}
 801dabc:	4618      	mov	r0, r3
 801dabe:	3710      	adds	r7, #16
 801dac0:	46bd      	mov	sp, r7
 801dac2:	bd80      	pop	{r7, pc}

0801dac4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801dac4:	b580      	push	{r7, lr}
 801dac6:	b082      	sub	sp, #8
 801dac8:	af00      	add	r7, sp, #0
 801daca:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	4618      	mov	r0, r3
 801dad2:	f7ea f84d 	bl	8007b70 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	4618      	mov	r0, r3
 801dadc:	f7ea f85e 	bl	8007b9c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801dae0:	bf00      	nop
 801dae2:	3708      	adds	r7, #8
 801dae4:	46bd      	mov	sp, r7
 801dae6:	bd80      	pop	{r7, pc}

0801dae8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801dae8:	b580      	push	{r7, lr}
 801daea:	b084      	sub	sp, #16
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
 801daf0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	6839      	ldr	r1, [r7, #0]
 801daf8:	2200      	movs	r2, #0
 801dafa:	4618      	mov	r0, r3
 801dafc:	f7e9 ff84 	bl	8007a08 <osMessagePut>
 801db00:	4603      	mov	r3, r0
 801db02:	2b00      	cmp	r3, #0
 801db04:	d102      	bne.n	801db0c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801db06:	2300      	movs	r3, #0
 801db08:	73fb      	strb	r3, [r7, #15]
 801db0a:	e001      	b.n	801db10 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801db0c:	23ff      	movs	r3, #255	; 0xff
 801db0e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801db10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801db14:	4618      	mov	r0, r3
 801db16:	3710      	adds	r7, #16
 801db18:	46bd      	mov	sp, r7
 801db1a:	bd80      	pop	{r7, pc}

0801db1c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801db1c:	b580      	push	{r7, lr}
 801db1e:	b08c      	sub	sp, #48	; 0x30
 801db20:	af00      	add	r7, sp, #0
 801db22:	61f8      	str	r0, [r7, #28]
 801db24:	61b9      	str	r1, [r7, #24]
 801db26:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801db28:	f7e9 fd2b 	bl	8007582 <osKernelSysTick>
 801db2c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801db2e:	697b      	ldr	r3, [r7, #20]
 801db30:	2b00      	cmp	r3, #0
 801db32:	d017      	beq.n	801db64 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801db34:	69fb      	ldr	r3, [r7, #28]
 801db36:	6819      	ldr	r1, [r3, #0]
 801db38:	f107 0320 	add.w	r3, r7, #32
 801db3c:	697a      	ldr	r2, [r7, #20]
 801db3e:	4618      	mov	r0, r3
 801db40:	f7e9 ffa2 	bl	8007a88 <osMessageGet>

    if(event.status == osEventMessage)
 801db44:	6a3b      	ldr	r3, [r7, #32]
 801db46:	2b10      	cmp	r3, #16
 801db48:	d109      	bne.n	801db5e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db4c:	461a      	mov	r2, r3
 801db4e:	69bb      	ldr	r3, [r7, #24]
 801db50:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801db52:	f7e9 fd16 	bl	8007582 <osKernelSysTick>
 801db56:	4602      	mov	r2, r0
 801db58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db5a:	1ad3      	subs	r3, r2, r3
 801db5c:	e019      	b.n	801db92 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801db5e:	f04f 33ff 	mov.w	r3, #4294967295
 801db62:	e016      	b.n	801db92 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801db64:	69fb      	ldr	r3, [r7, #28]
 801db66:	6819      	ldr	r1, [r3, #0]
 801db68:	463b      	mov	r3, r7
 801db6a:	f04f 32ff 	mov.w	r2, #4294967295
 801db6e:	4618      	mov	r0, r3
 801db70:	f7e9 ff8a 	bl	8007a88 <osMessageGet>
 801db74:	f107 0320 	add.w	r3, r7, #32
 801db78:	463a      	mov	r2, r7
 801db7a:	ca07      	ldmia	r2, {r0, r1, r2}
 801db7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db82:	461a      	mov	r2, r3
 801db84:	69bb      	ldr	r3, [r7, #24]
 801db86:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801db88:	f7e9 fcfb 	bl	8007582 <osKernelSysTick>
 801db8c:	4602      	mov	r2, r0
 801db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db90:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801db92:	4618      	mov	r0, r3
 801db94:	3730      	adds	r7, #48	; 0x30
 801db96:	46bd      	mov	sp, r7
 801db98:	bd80      	pop	{r7, pc}

0801db9a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801db9a:	b580      	push	{r7, lr}
 801db9c:	b086      	sub	sp, #24
 801db9e:	af00      	add	r7, sp, #0
 801dba0:	6078      	str	r0, [r7, #4]
 801dba2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	6819      	ldr	r1, [r3, #0]
 801dba8:	f107 030c 	add.w	r3, r7, #12
 801dbac:	2200      	movs	r2, #0
 801dbae:	4618      	mov	r0, r3
 801dbb0:	f7e9 ff6a 	bl	8007a88 <osMessageGet>

  if(event.status == osEventMessage)
 801dbb4:	68fb      	ldr	r3, [r7, #12]
 801dbb6:	2b10      	cmp	r3, #16
 801dbb8:	d105      	bne.n	801dbc6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801dbba:	693b      	ldr	r3, [r7, #16]
 801dbbc:	461a      	mov	r2, r3
 801dbbe:	683b      	ldr	r3, [r7, #0]
 801dbc0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801dbc2:	2300      	movs	r3, #0
 801dbc4:	e001      	b.n	801dbca <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801dbc6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801dbca:	4618      	mov	r0, r3
 801dbcc:	3718      	adds	r7, #24
 801dbce:	46bd      	mov	sp, r7
 801dbd0:	bd80      	pop	{r7, pc}

0801dbd2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801dbd2:	b480      	push	{r7}
 801dbd4:	b083      	sub	sp, #12
 801dbd6:	af00      	add	r7, sp, #0
 801dbd8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d101      	bne.n	801dbe6 <sys_mbox_valid+0x14>
    return 0;
 801dbe2:	2300      	movs	r3, #0
 801dbe4:	e000      	b.n	801dbe8 <sys_mbox_valid+0x16>
  else
    return 1;
 801dbe6:	2301      	movs	r3, #1
}
 801dbe8:	4618      	mov	r0, r3
 801dbea:	370c      	adds	r7, #12
 801dbec:	46bd      	mov	sp, r7
 801dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbf2:	4770      	bx	lr

0801dbf4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801dbf4:	b480      	push	{r7}
 801dbf6:	b083      	sub	sp, #12
 801dbf8:	af00      	add	r7, sp, #0
 801dbfa:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	2200      	movs	r2, #0
 801dc00:	601a      	str	r2, [r3, #0]
}
 801dc02:	bf00      	nop
 801dc04:	370c      	adds	r7, #12
 801dc06:	46bd      	mov	sp, r7
 801dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc0c:	4770      	bx	lr

0801dc0e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801dc0e:	b580      	push	{r7, lr}
 801dc10:	b084      	sub	sp, #16
 801dc12:	af00      	add	r7, sp, #0
 801dc14:	6078      	str	r0, [r7, #4]
 801dc16:	460b      	mov	r3, r1
 801dc18:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801dc1e:	f107 030c 	add.w	r3, r7, #12
 801dc22:	2101      	movs	r1, #1
 801dc24:	4618      	mov	r0, r3
 801dc26:	f7e9 fe27 	bl	8007878 <osSemaphoreCreate>
 801dc2a:	4602      	mov	r2, r0
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	d102      	bne.n	801dc3e <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dc38:	f04f 33ff 	mov.w	r3, #4294967295
 801dc3c:	e009      	b.n	801dc52 <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 801dc3e:	78fb      	ldrb	r3, [r7, #3]
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	d105      	bne.n	801dc50 <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	2100      	movs	r1, #0
 801dc4a:	4618      	mov	r0, r3
 801dc4c:	f7e9 fe32 	bl	80078b4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801dc50:	2300      	movs	r3, #0
}
 801dc52:	4618      	mov	r0, r3
 801dc54:	3710      	adds	r7, #16
 801dc56:	46bd      	mov	sp, r7
 801dc58:	bd80      	pop	{r7, pc}

0801dc5a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801dc5a:	b580      	push	{r7, lr}
 801dc5c:	b084      	sub	sp, #16
 801dc5e:	af00      	add	r7, sp, #0
 801dc60:	6078      	str	r0, [r7, #4]
 801dc62:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801dc64:	f7e9 fc8d 	bl	8007582 <osKernelSysTick>
 801dc68:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801dc6a:	683b      	ldr	r3, [r7, #0]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d011      	beq.n	801dc94 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	6839      	ldr	r1, [r7, #0]
 801dc76:	4618      	mov	r0, r3
 801dc78:	f7e9 fe1c 	bl	80078b4 <osSemaphoreWait>
 801dc7c:	4603      	mov	r3, r0
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d105      	bne.n	801dc8e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801dc82:	f7e9 fc7e 	bl	8007582 <osKernelSysTick>
 801dc86:	4602      	mov	r2, r0
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	1ad3      	subs	r3, r2, r3
 801dc8c:	e012      	b.n	801dcb4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801dc8e:	f04f 33ff 	mov.w	r3, #4294967295
 801dc92:	e00f      	b.n	801dcb4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801dc94:	bf00      	nop
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	f04f 31ff 	mov.w	r1, #4294967295
 801dc9e:	4618      	mov	r0, r3
 801dca0:	f7e9 fe08 	bl	80078b4 <osSemaphoreWait>
 801dca4:	4603      	mov	r3, r0
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d1f5      	bne.n	801dc96 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801dcaa:	f7e9 fc6a 	bl	8007582 <osKernelSysTick>
 801dcae:	4602      	mov	r2, r0
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801dcb4:	4618      	mov	r0, r3
 801dcb6:	3710      	adds	r7, #16
 801dcb8:	46bd      	mov	sp, r7
 801dcba:	bd80      	pop	{r7, pc}

0801dcbc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801dcbc:	b580      	push	{r7, lr}
 801dcbe:	b082      	sub	sp, #8
 801dcc0:	af00      	add	r7, sp, #0
 801dcc2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	4618      	mov	r0, r3
 801dcca:	f7e9 fe41 	bl	8007950 <osSemaphoreRelease>
}
 801dcce:	bf00      	nop
 801dcd0:	3708      	adds	r7, #8
 801dcd2:	46bd      	mov	sp, r7
 801dcd4:	bd80      	pop	{r7, pc}

0801dcd6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801dcd6:	b580      	push	{r7, lr}
 801dcd8:	b082      	sub	sp, #8
 801dcda:	af00      	add	r7, sp, #0
 801dcdc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	4618      	mov	r0, r3
 801dce4:	f7e9 fe6a 	bl	80079bc <osSemaphoreDelete>
}
 801dce8:	bf00      	nop
 801dcea:	3708      	adds	r7, #8
 801dcec:	46bd      	mov	sp, r7
 801dcee:	bd80      	pop	{r7, pc}

0801dcf0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801dcf0:	b480      	push	{r7}
 801dcf2:	b083      	sub	sp, #12
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d101      	bne.n	801dd04 <sys_sem_valid+0x14>
    return 0;
 801dd00:	2300      	movs	r3, #0
 801dd02:	e000      	b.n	801dd06 <sys_sem_valid+0x16>
  else
    return 1;
 801dd04:	2301      	movs	r3, #1
}
 801dd06:	4618      	mov	r0, r3
 801dd08:	370c      	adds	r7, #12
 801dd0a:	46bd      	mov	sp, r7
 801dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd10:	4770      	bx	lr

0801dd12 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801dd12:	b480      	push	{r7}
 801dd14:	b083      	sub	sp, #12
 801dd16:	af00      	add	r7, sp, #0
 801dd18:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	2200      	movs	r2, #0
 801dd1e:	601a      	str	r2, [r3, #0]
}
 801dd20:	bf00      	nop
 801dd22:	370c      	adds	r7, #12
 801dd24:	46bd      	mov	sp, r7
 801dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd2a:	4770      	bx	lr

0801dd2c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801dd2c:	b580      	push	{r7, lr}
 801dd2e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801dd30:	4803      	ldr	r0, [pc, #12]	; (801dd40 <sys_init+0x14>)
 801dd32:	f7e9 fd11 	bl	8007758 <osMutexCreate>
 801dd36:	4603      	mov	r3, r0
 801dd38:	4a02      	ldr	r2, [pc, #8]	; (801dd44 <sys_init+0x18>)
 801dd3a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801dd3c:	bf00      	nop
 801dd3e:	bd80      	pop	{r7, pc}
 801dd40:	080267b8 	.word	0x080267b8
 801dd44:	2001b11c 	.word	0x2001b11c

0801dd48 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801dd48:	b580      	push	{r7, lr}
 801dd4a:	b084      	sub	sp, #16
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801dd50:	2300      	movs	r3, #0
 801dd52:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801dd54:	f107 030c 	add.w	r3, r7, #12
 801dd58:	4618      	mov	r0, r3
 801dd5a:	f7e9 fcfd 	bl	8007758 <osMutexCreate>
 801dd5e:	4602      	mov	r2, r0
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	681b      	ldr	r3, [r3, #0]
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d102      	bne.n	801dd72 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dd6c:	f04f 33ff 	mov.w	r3, #4294967295
 801dd70:	e000      	b.n	801dd74 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801dd72:	2300      	movs	r3, #0
}
 801dd74:	4618      	mov	r0, r3
 801dd76:	3710      	adds	r7, #16
 801dd78:	46bd      	mov	sp, r7
 801dd7a:	bd80      	pop	{r7, pc}

0801dd7c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801dd7c:	b580      	push	{r7, lr}
 801dd7e:	b082      	sub	sp, #8
 801dd80:	af00      	add	r7, sp, #0
 801dd82:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	f04f 31ff 	mov.w	r1, #4294967295
 801dd8c:	4618      	mov	r0, r3
 801dd8e:	f7e9 fcef 	bl	8007770 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801dd92:	bf00      	nop
 801dd94:	3708      	adds	r7, #8
 801dd96:	46bd      	mov	sp, r7
 801dd98:	bd80      	pop	{r7, pc}

0801dd9a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801dd9a:	b580      	push	{r7, lr}
 801dd9c:	b082      	sub	sp, #8
 801dd9e:	af00      	add	r7, sp, #0
 801dda0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	681b      	ldr	r3, [r3, #0]
 801dda6:	4618      	mov	r0, r3
 801dda8:	f7e9 fd30 	bl	800780c <osMutexRelease>
}
 801ddac:	bf00      	nop
 801ddae:	3708      	adds	r7, #8
 801ddb0:	46bd      	mov	sp, r7
 801ddb2:	bd80      	pop	{r7, pc}

0801ddb4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	b08a      	sub	sp, #40	; 0x28
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	60f8      	str	r0, [r7, #12]
 801ddbc:	60b9      	str	r1, [r7, #8]
 801ddbe:	607a      	str	r2, [r7, #4]
 801ddc0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	617b      	str	r3, [r7, #20]
 801ddc6:	68bb      	ldr	r3, [r7, #8]
 801ddc8:	61bb      	str	r3, [r7, #24]
 801ddca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ddcc:	b21b      	sxth	r3, r3
 801ddce:	83bb      	strh	r3, [r7, #28]
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	623b      	str	r3, [r7, #32]
 801ddd4:	683b      	ldr	r3, [r7, #0]
 801ddd6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801ddd8:	f107 0314 	add.w	r3, r7, #20
 801dddc:	6879      	ldr	r1, [r7, #4]
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7e9 fbdf 	bl	80075a2 <osThreadCreate>
 801dde4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801dde6:	4618      	mov	r0, r3
 801dde8:	3728      	adds	r7, #40	; 0x28
 801ddea:	46bd      	mov	sp, r7
 801ddec:	bd80      	pop	{r7, pc}
	...

0801ddf0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ddf0:	b580      	push	{r7, lr}
 801ddf2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801ddf4:	4b04      	ldr	r3, [pc, #16]	; (801de08 <sys_arch_protect+0x18>)
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	f04f 31ff 	mov.w	r1, #4294967295
 801ddfc:	4618      	mov	r0, r3
 801ddfe:	f7e9 fcb7 	bl	8007770 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801de02:	2301      	movs	r3, #1
}
 801de04:	4618      	mov	r0, r3
 801de06:	bd80      	pop	{r7, pc}
 801de08:	2001b11c 	.word	0x2001b11c

0801de0c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801de0c:	b580      	push	{r7, lr}
 801de0e:	b082      	sub	sp, #8
 801de10:	af00      	add	r7, sp, #0
 801de12:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801de14:	4b04      	ldr	r3, [pc, #16]	; (801de28 <sys_arch_unprotect+0x1c>)
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	4618      	mov	r0, r3
 801de1a:	f7e9 fcf7 	bl	800780c <osMutexRelease>
}
 801de1e:	bf00      	nop
 801de20:	3708      	adds	r7, #8
 801de22:	46bd      	mov	sp, r7
 801de24:	bd80      	pop	{r7, pc}
 801de26:	bf00      	nop
 801de28:	2001b11c 	.word	0x2001b11c

0801de2c <std>:
 801de2c:	2300      	movs	r3, #0
 801de2e:	b510      	push	{r4, lr}
 801de30:	4604      	mov	r4, r0
 801de32:	e9c0 3300 	strd	r3, r3, [r0]
 801de36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801de3a:	6083      	str	r3, [r0, #8]
 801de3c:	8181      	strh	r1, [r0, #12]
 801de3e:	6643      	str	r3, [r0, #100]	; 0x64
 801de40:	81c2      	strh	r2, [r0, #14]
 801de42:	6183      	str	r3, [r0, #24]
 801de44:	4619      	mov	r1, r3
 801de46:	2208      	movs	r2, #8
 801de48:	305c      	adds	r0, #92	; 0x5c
 801de4a:	f000 f953 	bl	801e0f4 <memset>
 801de4e:	4b05      	ldr	r3, [pc, #20]	; (801de64 <std+0x38>)
 801de50:	6263      	str	r3, [r4, #36]	; 0x24
 801de52:	4b05      	ldr	r3, [pc, #20]	; (801de68 <std+0x3c>)
 801de54:	62a3      	str	r3, [r4, #40]	; 0x28
 801de56:	4b05      	ldr	r3, [pc, #20]	; (801de6c <std+0x40>)
 801de58:	62e3      	str	r3, [r4, #44]	; 0x2c
 801de5a:	4b05      	ldr	r3, [pc, #20]	; (801de70 <std+0x44>)
 801de5c:	6224      	str	r4, [r4, #32]
 801de5e:	6323      	str	r3, [r4, #48]	; 0x30
 801de60:	bd10      	pop	{r4, pc}
 801de62:	bf00      	nop
 801de64:	0801eebd 	.word	0x0801eebd
 801de68:	0801eee3 	.word	0x0801eee3
 801de6c:	0801ef1b 	.word	0x0801ef1b
 801de70:	0801ef3f 	.word	0x0801ef3f

0801de74 <_cleanup_r>:
 801de74:	4901      	ldr	r1, [pc, #4]	; (801de7c <_cleanup_r+0x8>)
 801de76:	f000 b8af 	b.w	801dfd8 <_fwalk_reent>
 801de7a:	bf00      	nop
 801de7c:	080201b1 	.word	0x080201b1

0801de80 <__sfmoreglue>:
 801de80:	b570      	push	{r4, r5, r6, lr}
 801de82:	1e4a      	subs	r2, r1, #1
 801de84:	2568      	movs	r5, #104	; 0x68
 801de86:	4355      	muls	r5, r2
 801de88:	460e      	mov	r6, r1
 801de8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801de8e:	f000 f989 	bl	801e1a4 <_malloc_r>
 801de92:	4604      	mov	r4, r0
 801de94:	b140      	cbz	r0, 801dea8 <__sfmoreglue+0x28>
 801de96:	2100      	movs	r1, #0
 801de98:	e9c0 1600 	strd	r1, r6, [r0]
 801de9c:	300c      	adds	r0, #12
 801de9e:	60a0      	str	r0, [r4, #8]
 801dea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dea4:	f000 f926 	bl	801e0f4 <memset>
 801dea8:	4620      	mov	r0, r4
 801deaa:	bd70      	pop	{r4, r5, r6, pc}

0801deac <__sfp_lock_acquire>:
 801deac:	4801      	ldr	r0, [pc, #4]	; (801deb4 <__sfp_lock_acquire+0x8>)
 801deae:	f000 b8d8 	b.w	801e062 <__retarget_lock_acquire_recursive>
 801deb2:	bf00      	nop
 801deb4:	2001b128 	.word	0x2001b128

0801deb8 <__sfp_lock_release>:
 801deb8:	4801      	ldr	r0, [pc, #4]	; (801dec0 <__sfp_lock_release+0x8>)
 801deba:	f000 b8d3 	b.w	801e064 <__retarget_lock_release_recursive>
 801debe:	bf00      	nop
 801dec0:	2001b128 	.word	0x2001b128

0801dec4 <__sinit_lock_acquire>:
 801dec4:	4801      	ldr	r0, [pc, #4]	; (801decc <__sinit_lock_acquire+0x8>)
 801dec6:	f000 b8cc 	b.w	801e062 <__retarget_lock_acquire_recursive>
 801deca:	bf00      	nop
 801decc:	2001b123 	.word	0x2001b123

0801ded0 <__sinit_lock_release>:
 801ded0:	4801      	ldr	r0, [pc, #4]	; (801ded8 <__sinit_lock_release+0x8>)
 801ded2:	f000 b8c7 	b.w	801e064 <__retarget_lock_release_recursive>
 801ded6:	bf00      	nop
 801ded8:	2001b123 	.word	0x2001b123

0801dedc <__sinit>:
 801dedc:	b510      	push	{r4, lr}
 801dede:	4604      	mov	r4, r0
 801dee0:	f7ff fff0 	bl	801dec4 <__sinit_lock_acquire>
 801dee4:	69a3      	ldr	r3, [r4, #24]
 801dee6:	b11b      	cbz	r3, 801def0 <__sinit+0x14>
 801dee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801deec:	f7ff bff0 	b.w	801ded0 <__sinit_lock_release>
 801def0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801def4:	6523      	str	r3, [r4, #80]	; 0x50
 801def6:	4b13      	ldr	r3, [pc, #76]	; (801df44 <__sinit+0x68>)
 801def8:	4a13      	ldr	r2, [pc, #76]	; (801df48 <__sinit+0x6c>)
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	62a2      	str	r2, [r4, #40]	; 0x28
 801defe:	42a3      	cmp	r3, r4
 801df00:	bf04      	itt	eq
 801df02:	2301      	moveq	r3, #1
 801df04:	61a3      	streq	r3, [r4, #24]
 801df06:	4620      	mov	r0, r4
 801df08:	f000 f820 	bl	801df4c <__sfp>
 801df0c:	6060      	str	r0, [r4, #4]
 801df0e:	4620      	mov	r0, r4
 801df10:	f000 f81c 	bl	801df4c <__sfp>
 801df14:	60a0      	str	r0, [r4, #8]
 801df16:	4620      	mov	r0, r4
 801df18:	f000 f818 	bl	801df4c <__sfp>
 801df1c:	2200      	movs	r2, #0
 801df1e:	60e0      	str	r0, [r4, #12]
 801df20:	2104      	movs	r1, #4
 801df22:	6860      	ldr	r0, [r4, #4]
 801df24:	f7ff ff82 	bl	801de2c <std>
 801df28:	68a0      	ldr	r0, [r4, #8]
 801df2a:	2201      	movs	r2, #1
 801df2c:	2109      	movs	r1, #9
 801df2e:	f7ff ff7d 	bl	801de2c <std>
 801df32:	68e0      	ldr	r0, [r4, #12]
 801df34:	2202      	movs	r2, #2
 801df36:	2112      	movs	r1, #18
 801df38:	f7ff ff78 	bl	801de2c <std>
 801df3c:	2301      	movs	r3, #1
 801df3e:	61a3      	str	r3, [r4, #24]
 801df40:	e7d2      	b.n	801dee8 <__sinit+0xc>
 801df42:	bf00      	nop
 801df44:	08026920 	.word	0x08026920
 801df48:	0801de75 	.word	0x0801de75

0801df4c <__sfp>:
 801df4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df4e:	4607      	mov	r7, r0
 801df50:	f7ff ffac 	bl	801deac <__sfp_lock_acquire>
 801df54:	4b1e      	ldr	r3, [pc, #120]	; (801dfd0 <__sfp+0x84>)
 801df56:	681e      	ldr	r6, [r3, #0]
 801df58:	69b3      	ldr	r3, [r6, #24]
 801df5a:	b913      	cbnz	r3, 801df62 <__sfp+0x16>
 801df5c:	4630      	mov	r0, r6
 801df5e:	f7ff ffbd 	bl	801dedc <__sinit>
 801df62:	3648      	adds	r6, #72	; 0x48
 801df64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801df68:	3b01      	subs	r3, #1
 801df6a:	d503      	bpl.n	801df74 <__sfp+0x28>
 801df6c:	6833      	ldr	r3, [r6, #0]
 801df6e:	b30b      	cbz	r3, 801dfb4 <__sfp+0x68>
 801df70:	6836      	ldr	r6, [r6, #0]
 801df72:	e7f7      	b.n	801df64 <__sfp+0x18>
 801df74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801df78:	b9d5      	cbnz	r5, 801dfb0 <__sfp+0x64>
 801df7a:	4b16      	ldr	r3, [pc, #88]	; (801dfd4 <__sfp+0x88>)
 801df7c:	60e3      	str	r3, [r4, #12]
 801df7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801df82:	6665      	str	r5, [r4, #100]	; 0x64
 801df84:	f000 f86c 	bl	801e060 <__retarget_lock_init_recursive>
 801df88:	f7ff ff96 	bl	801deb8 <__sfp_lock_release>
 801df8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801df90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801df94:	6025      	str	r5, [r4, #0]
 801df96:	61a5      	str	r5, [r4, #24]
 801df98:	2208      	movs	r2, #8
 801df9a:	4629      	mov	r1, r5
 801df9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dfa0:	f000 f8a8 	bl	801e0f4 <memset>
 801dfa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dfa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dfac:	4620      	mov	r0, r4
 801dfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfb0:	3468      	adds	r4, #104	; 0x68
 801dfb2:	e7d9      	b.n	801df68 <__sfp+0x1c>
 801dfb4:	2104      	movs	r1, #4
 801dfb6:	4638      	mov	r0, r7
 801dfb8:	f7ff ff62 	bl	801de80 <__sfmoreglue>
 801dfbc:	4604      	mov	r4, r0
 801dfbe:	6030      	str	r0, [r6, #0]
 801dfc0:	2800      	cmp	r0, #0
 801dfc2:	d1d5      	bne.n	801df70 <__sfp+0x24>
 801dfc4:	f7ff ff78 	bl	801deb8 <__sfp_lock_release>
 801dfc8:	230c      	movs	r3, #12
 801dfca:	603b      	str	r3, [r7, #0]
 801dfcc:	e7ee      	b.n	801dfac <__sfp+0x60>
 801dfce:	bf00      	nop
 801dfd0:	08026920 	.word	0x08026920
 801dfd4:	ffff0001 	.word	0xffff0001

0801dfd8 <_fwalk_reent>:
 801dfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfdc:	4606      	mov	r6, r0
 801dfde:	4688      	mov	r8, r1
 801dfe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dfe4:	2700      	movs	r7, #0
 801dfe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dfea:	f1b9 0901 	subs.w	r9, r9, #1
 801dfee:	d505      	bpl.n	801dffc <_fwalk_reent+0x24>
 801dff0:	6824      	ldr	r4, [r4, #0]
 801dff2:	2c00      	cmp	r4, #0
 801dff4:	d1f7      	bne.n	801dfe6 <_fwalk_reent+0xe>
 801dff6:	4638      	mov	r0, r7
 801dff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dffc:	89ab      	ldrh	r3, [r5, #12]
 801dffe:	2b01      	cmp	r3, #1
 801e000:	d907      	bls.n	801e012 <_fwalk_reent+0x3a>
 801e002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e006:	3301      	adds	r3, #1
 801e008:	d003      	beq.n	801e012 <_fwalk_reent+0x3a>
 801e00a:	4629      	mov	r1, r5
 801e00c:	4630      	mov	r0, r6
 801e00e:	47c0      	blx	r8
 801e010:	4307      	orrs	r7, r0
 801e012:	3568      	adds	r5, #104	; 0x68
 801e014:	e7e9      	b.n	801dfea <_fwalk_reent+0x12>
	...

0801e018 <__libc_init_array>:
 801e018:	b570      	push	{r4, r5, r6, lr}
 801e01a:	4d0d      	ldr	r5, [pc, #52]	; (801e050 <__libc_init_array+0x38>)
 801e01c:	4c0d      	ldr	r4, [pc, #52]	; (801e054 <__libc_init_array+0x3c>)
 801e01e:	1b64      	subs	r4, r4, r5
 801e020:	10a4      	asrs	r4, r4, #2
 801e022:	2600      	movs	r6, #0
 801e024:	42a6      	cmp	r6, r4
 801e026:	d109      	bne.n	801e03c <__libc_init_array+0x24>
 801e028:	4d0b      	ldr	r5, [pc, #44]	; (801e058 <__libc_init_array+0x40>)
 801e02a:	4c0c      	ldr	r4, [pc, #48]	; (801e05c <__libc_init_array+0x44>)
 801e02c:	f003 fcb4 	bl	8021998 <_init>
 801e030:	1b64      	subs	r4, r4, r5
 801e032:	10a4      	asrs	r4, r4, #2
 801e034:	2600      	movs	r6, #0
 801e036:	42a6      	cmp	r6, r4
 801e038:	d105      	bne.n	801e046 <__libc_init_array+0x2e>
 801e03a:	bd70      	pop	{r4, r5, r6, pc}
 801e03c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e040:	4798      	blx	r3
 801e042:	3601      	adds	r6, #1
 801e044:	e7ee      	b.n	801e024 <__libc_init_array+0xc>
 801e046:	f855 3b04 	ldr.w	r3, [r5], #4
 801e04a:	4798      	blx	r3
 801e04c:	3601      	adds	r6, #1
 801e04e:	e7f2      	b.n	801e036 <__libc_init_array+0x1e>
 801e050:	08026c84 	.word	0x08026c84
 801e054:	08026c84 	.word	0x08026c84
 801e058:	08026c84 	.word	0x08026c84
 801e05c:	08026c88 	.word	0x08026c88

0801e060 <__retarget_lock_init_recursive>:
 801e060:	4770      	bx	lr

0801e062 <__retarget_lock_acquire_recursive>:
 801e062:	4770      	bx	lr

0801e064 <__retarget_lock_release_recursive>:
 801e064:	4770      	bx	lr
	...

0801e068 <malloc>:
 801e068:	4b02      	ldr	r3, [pc, #8]	; (801e074 <malloc+0xc>)
 801e06a:	4601      	mov	r1, r0
 801e06c:	6818      	ldr	r0, [r3, #0]
 801e06e:	f000 b899 	b.w	801e1a4 <_malloc_r>
 801e072:	bf00      	nop
 801e074:	20000064 	.word	0x20000064

0801e078 <free>:
 801e078:	4b02      	ldr	r3, [pc, #8]	; (801e084 <free+0xc>)
 801e07a:	4601      	mov	r1, r0
 801e07c:	6818      	ldr	r0, [r3, #0]
 801e07e:	f000 b841 	b.w	801e104 <_free_r>
 801e082:	bf00      	nop
 801e084:	20000064 	.word	0x20000064

0801e088 <memcmp>:
 801e088:	b530      	push	{r4, r5, lr}
 801e08a:	3901      	subs	r1, #1
 801e08c:	2400      	movs	r4, #0
 801e08e:	42a2      	cmp	r2, r4
 801e090:	d101      	bne.n	801e096 <memcmp+0xe>
 801e092:	2000      	movs	r0, #0
 801e094:	e005      	b.n	801e0a2 <memcmp+0x1a>
 801e096:	5d03      	ldrb	r3, [r0, r4]
 801e098:	3401      	adds	r4, #1
 801e09a:	5d0d      	ldrb	r5, [r1, r4]
 801e09c:	42ab      	cmp	r3, r5
 801e09e:	d0f6      	beq.n	801e08e <memcmp+0x6>
 801e0a0:	1b58      	subs	r0, r3, r5
 801e0a2:	bd30      	pop	{r4, r5, pc}

0801e0a4 <memcpy>:
 801e0a4:	440a      	add	r2, r1
 801e0a6:	4291      	cmp	r1, r2
 801e0a8:	f100 33ff 	add.w	r3, r0, #4294967295
 801e0ac:	d100      	bne.n	801e0b0 <memcpy+0xc>
 801e0ae:	4770      	bx	lr
 801e0b0:	b510      	push	{r4, lr}
 801e0b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e0b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e0ba:	4291      	cmp	r1, r2
 801e0bc:	d1f9      	bne.n	801e0b2 <memcpy+0xe>
 801e0be:	bd10      	pop	{r4, pc}

0801e0c0 <memmove>:
 801e0c0:	4288      	cmp	r0, r1
 801e0c2:	b510      	push	{r4, lr}
 801e0c4:	eb01 0402 	add.w	r4, r1, r2
 801e0c8:	d902      	bls.n	801e0d0 <memmove+0x10>
 801e0ca:	4284      	cmp	r4, r0
 801e0cc:	4623      	mov	r3, r4
 801e0ce:	d807      	bhi.n	801e0e0 <memmove+0x20>
 801e0d0:	1e43      	subs	r3, r0, #1
 801e0d2:	42a1      	cmp	r1, r4
 801e0d4:	d008      	beq.n	801e0e8 <memmove+0x28>
 801e0d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e0da:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e0de:	e7f8      	b.n	801e0d2 <memmove+0x12>
 801e0e0:	4402      	add	r2, r0
 801e0e2:	4601      	mov	r1, r0
 801e0e4:	428a      	cmp	r2, r1
 801e0e6:	d100      	bne.n	801e0ea <memmove+0x2a>
 801e0e8:	bd10      	pop	{r4, pc}
 801e0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e0ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e0f2:	e7f7      	b.n	801e0e4 <memmove+0x24>

0801e0f4 <memset>:
 801e0f4:	4402      	add	r2, r0
 801e0f6:	4603      	mov	r3, r0
 801e0f8:	4293      	cmp	r3, r2
 801e0fa:	d100      	bne.n	801e0fe <memset+0xa>
 801e0fc:	4770      	bx	lr
 801e0fe:	f803 1b01 	strb.w	r1, [r3], #1
 801e102:	e7f9      	b.n	801e0f8 <memset+0x4>

0801e104 <_free_r>:
 801e104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e106:	2900      	cmp	r1, #0
 801e108:	d048      	beq.n	801e19c <_free_r+0x98>
 801e10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e10e:	9001      	str	r0, [sp, #4]
 801e110:	2b00      	cmp	r3, #0
 801e112:	f1a1 0404 	sub.w	r4, r1, #4
 801e116:	bfb8      	it	lt
 801e118:	18e4      	addlt	r4, r4, r3
 801e11a:	f002 f911 	bl	8020340 <__malloc_lock>
 801e11e:	4a20      	ldr	r2, [pc, #128]	; (801e1a0 <_free_r+0x9c>)
 801e120:	9801      	ldr	r0, [sp, #4]
 801e122:	6813      	ldr	r3, [r2, #0]
 801e124:	4615      	mov	r5, r2
 801e126:	b933      	cbnz	r3, 801e136 <_free_r+0x32>
 801e128:	6063      	str	r3, [r4, #4]
 801e12a:	6014      	str	r4, [r2, #0]
 801e12c:	b003      	add	sp, #12
 801e12e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e132:	f002 b90b 	b.w	802034c <__malloc_unlock>
 801e136:	42a3      	cmp	r3, r4
 801e138:	d90b      	bls.n	801e152 <_free_r+0x4e>
 801e13a:	6821      	ldr	r1, [r4, #0]
 801e13c:	1862      	adds	r2, r4, r1
 801e13e:	4293      	cmp	r3, r2
 801e140:	bf04      	itt	eq
 801e142:	681a      	ldreq	r2, [r3, #0]
 801e144:	685b      	ldreq	r3, [r3, #4]
 801e146:	6063      	str	r3, [r4, #4]
 801e148:	bf04      	itt	eq
 801e14a:	1852      	addeq	r2, r2, r1
 801e14c:	6022      	streq	r2, [r4, #0]
 801e14e:	602c      	str	r4, [r5, #0]
 801e150:	e7ec      	b.n	801e12c <_free_r+0x28>
 801e152:	461a      	mov	r2, r3
 801e154:	685b      	ldr	r3, [r3, #4]
 801e156:	b10b      	cbz	r3, 801e15c <_free_r+0x58>
 801e158:	42a3      	cmp	r3, r4
 801e15a:	d9fa      	bls.n	801e152 <_free_r+0x4e>
 801e15c:	6811      	ldr	r1, [r2, #0]
 801e15e:	1855      	adds	r5, r2, r1
 801e160:	42a5      	cmp	r5, r4
 801e162:	d10b      	bne.n	801e17c <_free_r+0x78>
 801e164:	6824      	ldr	r4, [r4, #0]
 801e166:	4421      	add	r1, r4
 801e168:	1854      	adds	r4, r2, r1
 801e16a:	42a3      	cmp	r3, r4
 801e16c:	6011      	str	r1, [r2, #0]
 801e16e:	d1dd      	bne.n	801e12c <_free_r+0x28>
 801e170:	681c      	ldr	r4, [r3, #0]
 801e172:	685b      	ldr	r3, [r3, #4]
 801e174:	6053      	str	r3, [r2, #4]
 801e176:	4421      	add	r1, r4
 801e178:	6011      	str	r1, [r2, #0]
 801e17a:	e7d7      	b.n	801e12c <_free_r+0x28>
 801e17c:	d902      	bls.n	801e184 <_free_r+0x80>
 801e17e:	230c      	movs	r3, #12
 801e180:	6003      	str	r3, [r0, #0]
 801e182:	e7d3      	b.n	801e12c <_free_r+0x28>
 801e184:	6825      	ldr	r5, [r4, #0]
 801e186:	1961      	adds	r1, r4, r5
 801e188:	428b      	cmp	r3, r1
 801e18a:	bf04      	itt	eq
 801e18c:	6819      	ldreq	r1, [r3, #0]
 801e18e:	685b      	ldreq	r3, [r3, #4]
 801e190:	6063      	str	r3, [r4, #4]
 801e192:	bf04      	itt	eq
 801e194:	1949      	addeq	r1, r1, r5
 801e196:	6021      	streq	r1, [r4, #0]
 801e198:	6054      	str	r4, [r2, #4]
 801e19a:	e7c7      	b.n	801e12c <_free_r+0x28>
 801e19c:	b003      	add	sp, #12
 801e19e:	bd30      	pop	{r4, r5, pc}
 801e1a0:	200144a8 	.word	0x200144a8

0801e1a4 <_malloc_r>:
 801e1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1a6:	1ccd      	adds	r5, r1, #3
 801e1a8:	f025 0503 	bic.w	r5, r5, #3
 801e1ac:	3508      	adds	r5, #8
 801e1ae:	2d0c      	cmp	r5, #12
 801e1b0:	bf38      	it	cc
 801e1b2:	250c      	movcc	r5, #12
 801e1b4:	2d00      	cmp	r5, #0
 801e1b6:	4606      	mov	r6, r0
 801e1b8:	db01      	blt.n	801e1be <_malloc_r+0x1a>
 801e1ba:	42a9      	cmp	r1, r5
 801e1bc:	d903      	bls.n	801e1c6 <_malloc_r+0x22>
 801e1be:	230c      	movs	r3, #12
 801e1c0:	6033      	str	r3, [r6, #0]
 801e1c2:	2000      	movs	r0, #0
 801e1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1c6:	f002 f8bb 	bl	8020340 <__malloc_lock>
 801e1ca:	4921      	ldr	r1, [pc, #132]	; (801e250 <_malloc_r+0xac>)
 801e1cc:	680a      	ldr	r2, [r1, #0]
 801e1ce:	4614      	mov	r4, r2
 801e1d0:	b99c      	cbnz	r4, 801e1fa <_malloc_r+0x56>
 801e1d2:	4f20      	ldr	r7, [pc, #128]	; (801e254 <_malloc_r+0xb0>)
 801e1d4:	683b      	ldr	r3, [r7, #0]
 801e1d6:	b923      	cbnz	r3, 801e1e2 <_malloc_r+0x3e>
 801e1d8:	4621      	mov	r1, r4
 801e1da:	4630      	mov	r0, r6
 801e1dc:	f000 fdde 	bl	801ed9c <_sbrk_r>
 801e1e0:	6038      	str	r0, [r7, #0]
 801e1e2:	4629      	mov	r1, r5
 801e1e4:	4630      	mov	r0, r6
 801e1e6:	f000 fdd9 	bl	801ed9c <_sbrk_r>
 801e1ea:	1c43      	adds	r3, r0, #1
 801e1ec:	d123      	bne.n	801e236 <_malloc_r+0x92>
 801e1ee:	230c      	movs	r3, #12
 801e1f0:	6033      	str	r3, [r6, #0]
 801e1f2:	4630      	mov	r0, r6
 801e1f4:	f002 f8aa 	bl	802034c <__malloc_unlock>
 801e1f8:	e7e3      	b.n	801e1c2 <_malloc_r+0x1e>
 801e1fa:	6823      	ldr	r3, [r4, #0]
 801e1fc:	1b5b      	subs	r3, r3, r5
 801e1fe:	d417      	bmi.n	801e230 <_malloc_r+0x8c>
 801e200:	2b0b      	cmp	r3, #11
 801e202:	d903      	bls.n	801e20c <_malloc_r+0x68>
 801e204:	6023      	str	r3, [r4, #0]
 801e206:	441c      	add	r4, r3
 801e208:	6025      	str	r5, [r4, #0]
 801e20a:	e004      	b.n	801e216 <_malloc_r+0x72>
 801e20c:	6863      	ldr	r3, [r4, #4]
 801e20e:	42a2      	cmp	r2, r4
 801e210:	bf0c      	ite	eq
 801e212:	600b      	streq	r3, [r1, #0]
 801e214:	6053      	strne	r3, [r2, #4]
 801e216:	4630      	mov	r0, r6
 801e218:	f002 f898 	bl	802034c <__malloc_unlock>
 801e21c:	f104 000b 	add.w	r0, r4, #11
 801e220:	1d23      	adds	r3, r4, #4
 801e222:	f020 0007 	bic.w	r0, r0, #7
 801e226:	1ac2      	subs	r2, r0, r3
 801e228:	d0cc      	beq.n	801e1c4 <_malloc_r+0x20>
 801e22a:	1a1b      	subs	r3, r3, r0
 801e22c:	50a3      	str	r3, [r4, r2]
 801e22e:	e7c9      	b.n	801e1c4 <_malloc_r+0x20>
 801e230:	4622      	mov	r2, r4
 801e232:	6864      	ldr	r4, [r4, #4]
 801e234:	e7cc      	b.n	801e1d0 <_malloc_r+0x2c>
 801e236:	1cc4      	adds	r4, r0, #3
 801e238:	f024 0403 	bic.w	r4, r4, #3
 801e23c:	42a0      	cmp	r0, r4
 801e23e:	d0e3      	beq.n	801e208 <_malloc_r+0x64>
 801e240:	1a21      	subs	r1, r4, r0
 801e242:	4630      	mov	r0, r6
 801e244:	f000 fdaa 	bl	801ed9c <_sbrk_r>
 801e248:	3001      	adds	r0, #1
 801e24a:	d1dd      	bne.n	801e208 <_malloc_r+0x64>
 801e24c:	e7cf      	b.n	801e1ee <_malloc_r+0x4a>
 801e24e:	bf00      	nop
 801e250:	200144a8 	.word	0x200144a8
 801e254:	200144ac 	.word	0x200144ac

0801e258 <__cvt>:
 801e258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e25c:	ec55 4b10 	vmov	r4, r5, d0
 801e260:	2d00      	cmp	r5, #0
 801e262:	460e      	mov	r6, r1
 801e264:	4619      	mov	r1, r3
 801e266:	462b      	mov	r3, r5
 801e268:	bfbb      	ittet	lt
 801e26a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e26e:	461d      	movlt	r5, r3
 801e270:	2300      	movge	r3, #0
 801e272:	232d      	movlt	r3, #45	; 0x2d
 801e274:	700b      	strb	r3, [r1, #0]
 801e276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e278:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e27c:	4691      	mov	r9, r2
 801e27e:	f023 0820 	bic.w	r8, r3, #32
 801e282:	bfbc      	itt	lt
 801e284:	4622      	movlt	r2, r4
 801e286:	4614      	movlt	r4, r2
 801e288:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e28c:	d005      	beq.n	801e29a <__cvt+0x42>
 801e28e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e292:	d100      	bne.n	801e296 <__cvt+0x3e>
 801e294:	3601      	adds	r6, #1
 801e296:	2102      	movs	r1, #2
 801e298:	e000      	b.n	801e29c <__cvt+0x44>
 801e29a:	2103      	movs	r1, #3
 801e29c:	ab03      	add	r3, sp, #12
 801e29e:	9301      	str	r3, [sp, #4]
 801e2a0:	ab02      	add	r3, sp, #8
 801e2a2:	9300      	str	r3, [sp, #0]
 801e2a4:	ec45 4b10 	vmov	d0, r4, r5
 801e2a8:	4653      	mov	r3, sl
 801e2aa:	4632      	mov	r2, r6
 801e2ac:	f001 f908 	bl	801f4c0 <_dtoa_r>
 801e2b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e2b4:	4607      	mov	r7, r0
 801e2b6:	d102      	bne.n	801e2be <__cvt+0x66>
 801e2b8:	f019 0f01 	tst.w	r9, #1
 801e2bc:	d022      	beq.n	801e304 <__cvt+0xac>
 801e2be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e2c2:	eb07 0906 	add.w	r9, r7, r6
 801e2c6:	d110      	bne.n	801e2ea <__cvt+0x92>
 801e2c8:	783b      	ldrb	r3, [r7, #0]
 801e2ca:	2b30      	cmp	r3, #48	; 0x30
 801e2cc:	d10a      	bne.n	801e2e4 <__cvt+0x8c>
 801e2ce:	2200      	movs	r2, #0
 801e2d0:	2300      	movs	r3, #0
 801e2d2:	4620      	mov	r0, r4
 801e2d4:	4629      	mov	r1, r5
 801e2d6:	f7e2 fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 801e2da:	b918      	cbnz	r0, 801e2e4 <__cvt+0x8c>
 801e2dc:	f1c6 0601 	rsb	r6, r6, #1
 801e2e0:	f8ca 6000 	str.w	r6, [sl]
 801e2e4:	f8da 3000 	ldr.w	r3, [sl]
 801e2e8:	4499      	add	r9, r3
 801e2ea:	2200      	movs	r2, #0
 801e2ec:	2300      	movs	r3, #0
 801e2ee:	4620      	mov	r0, r4
 801e2f0:	4629      	mov	r1, r5
 801e2f2:	f7e2 fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 801e2f6:	b108      	cbz	r0, 801e2fc <__cvt+0xa4>
 801e2f8:	f8cd 900c 	str.w	r9, [sp, #12]
 801e2fc:	2230      	movs	r2, #48	; 0x30
 801e2fe:	9b03      	ldr	r3, [sp, #12]
 801e300:	454b      	cmp	r3, r9
 801e302:	d307      	bcc.n	801e314 <__cvt+0xbc>
 801e304:	9b03      	ldr	r3, [sp, #12]
 801e306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e308:	1bdb      	subs	r3, r3, r7
 801e30a:	4638      	mov	r0, r7
 801e30c:	6013      	str	r3, [r2, #0]
 801e30e:	b004      	add	sp, #16
 801e310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e314:	1c59      	adds	r1, r3, #1
 801e316:	9103      	str	r1, [sp, #12]
 801e318:	701a      	strb	r2, [r3, #0]
 801e31a:	e7f0      	b.n	801e2fe <__cvt+0xa6>

0801e31c <__exponent>:
 801e31c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e31e:	4603      	mov	r3, r0
 801e320:	2900      	cmp	r1, #0
 801e322:	bfb8      	it	lt
 801e324:	4249      	neglt	r1, r1
 801e326:	f803 2b02 	strb.w	r2, [r3], #2
 801e32a:	bfb4      	ite	lt
 801e32c:	222d      	movlt	r2, #45	; 0x2d
 801e32e:	222b      	movge	r2, #43	; 0x2b
 801e330:	2909      	cmp	r1, #9
 801e332:	7042      	strb	r2, [r0, #1]
 801e334:	dd2a      	ble.n	801e38c <__exponent+0x70>
 801e336:	f10d 0407 	add.w	r4, sp, #7
 801e33a:	46a4      	mov	ip, r4
 801e33c:	270a      	movs	r7, #10
 801e33e:	46a6      	mov	lr, r4
 801e340:	460a      	mov	r2, r1
 801e342:	fb91 f6f7 	sdiv	r6, r1, r7
 801e346:	fb07 1516 	mls	r5, r7, r6, r1
 801e34a:	3530      	adds	r5, #48	; 0x30
 801e34c:	2a63      	cmp	r2, #99	; 0x63
 801e34e:	f104 34ff 	add.w	r4, r4, #4294967295
 801e352:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e356:	4631      	mov	r1, r6
 801e358:	dcf1      	bgt.n	801e33e <__exponent+0x22>
 801e35a:	3130      	adds	r1, #48	; 0x30
 801e35c:	f1ae 0502 	sub.w	r5, lr, #2
 801e360:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e364:	1c44      	adds	r4, r0, #1
 801e366:	4629      	mov	r1, r5
 801e368:	4561      	cmp	r1, ip
 801e36a:	d30a      	bcc.n	801e382 <__exponent+0x66>
 801e36c:	f10d 0209 	add.w	r2, sp, #9
 801e370:	eba2 020e 	sub.w	r2, r2, lr
 801e374:	4565      	cmp	r5, ip
 801e376:	bf88      	it	hi
 801e378:	2200      	movhi	r2, #0
 801e37a:	4413      	add	r3, r2
 801e37c:	1a18      	subs	r0, r3, r0
 801e37e:	b003      	add	sp, #12
 801e380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e382:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e386:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e38a:	e7ed      	b.n	801e368 <__exponent+0x4c>
 801e38c:	2330      	movs	r3, #48	; 0x30
 801e38e:	3130      	adds	r1, #48	; 0x30
 801e390:	7083      	strb	r3, [r0, #2]
 801e392:	70c1      	strb	r1, [r0, #3]
 801e394:	1d03      	adds	r3, r0, #4
 801e396:	e7f1      	b.n	801e37c <__exponent+0x60>

0801e398 <_printf_float>:
 801e398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e39c:	ed2d 8b02 	vpush	{d8}
 801e3a0:	b08d      	sub	sp, #52	; 0x34
 801e3a2:	460c      	mov	r4, r1
 801e3a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e3a8:	4616      	mov	r6, r2
 801e3aa:	461f      	mov	r7, r3
 801e3ac:	4605      	mov	r5, r0
 801e3ae:	f001 ff4d 	bl	802024c <_localeconv_r>
 801e3b2:	f8d0 a000 	ldr.w	sl, [r0]
 801e3b6:	4650      	mov	r0, sl
 801e3b8:	f7e1 ff0a 	bl	80001d0 <strlen>
 801e3bc:	2300      	movs	r3, #0
 801e3be:	930a      	str	r3, [sp, #40]	; 0x28
 801e3c0:	6823      	ldr	r3, [r4, #0]
 801e3c2:	9305      	str	r3, [sp, #20]
 801e3c4:	f8d8 3000 	ldr.w	r3, [r8]
 801e3c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e3cc:	3307      	adds	r3, #7
 801e3ce:	f023 0307 	bic.w	r3, r3, #7
 801e3d2:	f103 0208 	add.w	r2, r3, #8
 801e3d6:	f8c8 2000 	str.w	r2, [r8]
 801e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e3e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801e3e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e3ea:	9307      	str	r3, [sp, #28]
 801e3ec:	f8cd 8018 	str.w	r8, [sp, #24]
 801e3f0:	ee08 0a10 	vmov	s16, r0
 801e3f4:	4b9f      	ldr	r3, [pc, #636]	; (801e674 <_printf_float+0x2dc>)
 801e3f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e3fa:	f04f 32ff 	mov.w	r2, #4294967295
 801e3fe:	f7e2 fb95 	bl	8000b2c <__aeabi_dcmpun>
 801e402:	bb88      	cbnz	r0, 801e468 <_printf_float+0xd0>
 801e404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e408:	4b9a      	ldr	r3, [pc, #616]	; (801e674 <_printf_float+0x2dc>)
 801e40a:	f04f 32ff 	mov.w	r2, #4294967295
 801e40e:	f7e2 fb6f 	bl	8000af0 <__aeabi_dcmple>
 801e412:	bb48      	cbnz	r0, 801e468 <_printf_float+0xd0>
 801e414:	2200      	movs	r2, #0
 801e416:	2300      	movs	r3, #0
 801e418:	4640      	mov	r0, r8
 801e41a:	4649      	mov	r1, r9
 801e41c:	f7e2 fb5e 	bl	8000adc <__aeabi_dcmplt>
 801e420:	b110      	cbz	r0, 801e428 <_printf_float+0x90>
 801e422:	232d      	movs	r3, #45	; 0x2d
 801e424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e428:	4b93      	ldr	r3, [pc, #588]	; (801e678 <_printf_float+0x2e0>)
 801e42a:	4894      	ldr	r0, [pc, #592]	; (801e67c <_printf_float+0x2e4>)
 801e42c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e430:	bf94      	ite	ls
 801e432:	4698      	movls	r8, r3
 801e434:	4680      	movhi	r8, r0
 801e436:	2303      	movs	r3, #3
 801e438:	6123      	str	r3, [r4, #16]
 801e43a:	9b05      	ldr	r3, [sp, #20]
 801e43c:	f023 0204 	bic.w	r2, r3, #4
 801e440:	6022      	str	r2, [r4, #0]
 801e442:	f04f 0900 	mov.w	r9, #0
 801e446:	9700      	str	r7, [sp, #0]
 801e448:	4633      	mov	r3, r6
 801e44a:	aa0b      	add	r2, sp, #44	; 0x2c
 801e44c:	4621      	mov	r1, r4
 801e44e:	4628      	mov	r0, r5
 801e450:	f000 f9d8 	bl	801e804 <_printf_common>
 801e454:	3001      	adds	r0, #1
 801e456:	f040 8090 	bne.w	801e57a <_printf_float+0x1e2>
 801e45a:	f04f 30ff 	mov.w	r0, #4294967295
 801e45e:	b00d      	add	sp, #52	; 0x34
 801e460:	ecbd 8b02 	vpop	{d8}
 801e464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e468:	4642      	mov	r2, r8
 801e46a:	464b      	mov	r3, r9
 801e46c:	4640      	mov	r0, r8
 801e46e:	4649      	mov	r1, r9
 801e470:	f7e2 fb5c 	bl	8000b2c <__aeabi_dcmpun>
 801e474:	b140      	cbz	r0, 801e488 <_printf_float+0xf0>
 801e476:	464b      	mov	r3, r9
 801e478:	2b00      	cmp	r3, #0
 801e47a:	bfbc      	itt	lt
 801e47c:	232d      	movlt	r3, #45	; 0x2d
 801e47e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e482:	487f      	ldr	r0, [pc, #508]	; (801e680 <_printf_float+0x2e8>)
 801e484:	4b7f      	ldr	r3, [pc, #508]	; (801e684 <_printf_float+0x2ec>)
 801e486:	e7d1      	b.n	801e42c <_printf_float+0x94>
 801e488:	6863      	ldr	r3, [r4, #4]
 801e48a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e48e:	9206      	str	r2, [sp, #24]
 801e490:	1c5a      	adds	r2, r3, #1
 801e492:	d13f      	bne.n	801e514 <_printf_float+0x17c>
 801e494:	2306      	movs	r3, #6
 801e496:	6063      	str	r3, [r4, #4]
 801e498:	9b05      	ldr	r3, [sp, #20]
 801e49a:	6861      	ldr	r1, [r4, #4]
 801e49c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e4a0:	2300      	movs	r3, #0
 801e4a2:	9303      	str	r3, [sp, #12]
 801e4a4:	ab0a      	add	r3, sp, #40	; 0x28
 801e4a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e4aa:	ab09      	add	r3, sp, #36	; 0x24
 801e4ac:	ec49 8b10 	vmov	d0, r8, r9
 801e4b0:	9300      	str	r3, [sp, #0]
 801e4b2:	6022      	str	r2, [r4, #0]
 801e4b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e4b8:	4628      	mov	r0, r5
 801e4ba:	f7ff fecd 	bl	801e258 <__cvt>
 801e4be:	9b06      	ldr	r3, [sp, #24]
 801e4c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e4c2:	2b47      	cmp	r3, #71	; 0x47
 801e4c4:	4680      	mov	r8, r0
 801e4c6:	d108      	bne.n	801e4da <_printf_float+0x142>
 801e4c8:	1cc8      	adds	r0, r1, #3
 801e4ca:	db02      	blt.n	801e4d2 <_printf_float+0x13a>
 801e4cc:	6863      	ldr	r3, [r4, #4]
 801e4ce:	4299      	cmp	r1, r3
 801e4d0:	dd41      	ble.n	801e556 <_printf_float+0x1be>
 801e4d2:	f1ab 0b02 	sub.w	fp, fp, #2
 801e4d6:	fa5f fb8b 	uxtb.w	fp, fp
 801e4da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e4de:	d820      	bhi.n	801e522 <_printf_float+0x18a>
 801e4e0:	3901      	subs	r1, #1
 801e4e2:	465a      	mov	r2, fp
 801e4e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e4e8:	9109      	str	r1, [sp, #36]	; 0x24
 801e4ea:	f7ff ff17 	bl	801e31c <__exponent>
 801e4ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e4f0:	1813      	adds	r3, r2, r0
 801e4f2:	2a01      	cmp	r2, #1
 801e4f4:	4681      	mov	r9, r0
 801e4f6:	6123      	str	r3, [r4, #16]
 801e4f8:	dc02      	bgt.n	801e500 <_printf_float+0x168>
 801e4fa:	6822      	ldr	r2, [r4, #0]
 801e4fc:	07d2      	lsls	r2, r2, #31
 801e4fe:	d501      	bpl.n	801e504 <_printf_float+0x16c>
 801e500:	3301      	adds	r3, #1
 801e502:	6123      	str	r3, [r4, #16]
 801e504:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d09c      	beq.n	801e446 <_printf_float+0xae>
 801e50c:	232d      	movs	r3, #45	; 0x2d
 801e50e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e512:	e798      	b.n	801e446 <_printf_float+0xae>
 801e514:	9a06      	ldr	r2, [sp, #24]
 801e516:	2a47      	cmp	r2, #71	; 0x47
 801e518:	d1be      	bne.n	801e498 <_printf_float+0x100>
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d1bc      	bne.n	801e498 <_printf_float+0x100>
 801e51e:	2301      	movs	r3, #1
 801e520:	e7b9      	b.n	801e496 <_printf_float+0xfe>
 801e522:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e526:	d118      	bne.n	801e55a <_printf_float+0x1c2>
 801e528:	2900      	cmp	r1, #0
 801e52a:	6863      	ldr	r3, [r4, #4]
 801e52c:	dd0b      	ble.n	801e546 <_printf_float+0x1ae>
 801e52e:	6121      	str	r1, [r4, #16]
 801e530:	b913      	cbnz	r3, 801e538 <_printf_float+0x1a0>
 801e532:	6822      	ldr	r2, [r4, #0]
 801e534:	07d0      	lsls	r0, r2, #31
 801e536:	d502      	bpl.n	801e53e <_printf_float+0x1a6>
 801e538:	3301      	adds	r3, #1
 801e53a:	440b      	add	r3, r1
 801e53c:	6123      	str	r3, [r4, #16]
 801e53e:	65a1      	str	r1, [r4, #88]	; 0x58
 801e540:	f04f 0900 	mov.w	r9, #0
 801e544:	e7de      	b.n	801e504 <_printf_float+0x16c>
 801e546:	b913      	cbnz	r3, 801e54e <_printf_float+0x1b6>
 801e548:	6822      	ldr	r2, [r4, #0]
 801e54a:	07d2      	lsls	r2, r2, #31
 801e54c:	d501      	bpl.n	801e552 <_printf_float+0x1ba>
 801e54e:	3302      	adds	r3, #2
 801e550:	e7f4      	b.n	801e53c <_printf_float+0x1a4>
 801e552:	2301      	movs	r3, #1
 801e554:	e7f2      	b.n	801e53c <_printf_float+0x1a4>
 801e556:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e55c:	4299      	cmp	r1, r3
 801e55e:	db05      	blt.n	801e56c <_printf_float+0x1d4>
 801e560:	6823      	ldr	r3, [r4, #0]
 801e562:	6121      	str	r1, [r4, #16]
 801e564:	07d8      	lsls	r0, r3, #31
 801e566:	d5ea      	bpl.n	801e53e <_printf_float+0x1a6>
 801e568:	1c4b      	adds	r3, r1, #1
 801e56a:	e7e7      	b.n	801e53c <_printf_float+0x1a4>
 801e56c:	2900      	cmp	r1, #0
 801e56e:	bfd4      	ite	le
 801e570:	f1c1 0202 	rsble	r2, r1, #2
 801e574:	2201      	movgt	r2, #1
 801e576:	4413      	add	r3, r2
 801e578:	e7e0      	b.n	801e53c <_printf_float+0x1a4>
 801e57a:	6823      	ldr	r3, [r4, #0]
 801e57c:	055a      	lsls	r2, r3, #21
 801e57e:	d407      	bmi.n	801e590 <_printf_float+0x1f8>
 801e580:	6923      	ldr	r3, [r4, #16]
 801e582:	4642      	mov	r2, r8
 801e584:	4631      	mov	r1, r6
 801e586:	4628      	mov	r0, r5
 801e588:	47b8      	blx	r7
 801e58a:	3001      	adds	r0, #1
 801e58c:	d12c      	bne.n	801e5e8 <_printf_float+0x250>
 801e58e:	e764      	b.n	801e45a <_printf_float+0xc2>
 801e590:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e594:	f240 80e0 	bls.w	801e758 <_printf_float+0x3c0>
 801e598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e59c:	2200      	movs	r2, #0
 801e59e:	2300      	movs	r3, #0
 801e5a0:	f7e2 fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 801e5a4:	2800      	cmp	r0, #0
 801e5a6:	d034      	beq.n	801e612 <_printf_float+0x27a>
 801e5a8:	4a37      	ldr	r2, [pc, #220]	; (801e688 <_printf_float+0x2f0>)
 801e5aa:	2301      	movs	r3, #1
 801e5ac:	4631      	mov	r1, r6
 801e5ae:	4628      	mov	r0, r5
 801e5b0:	47b8      	blx	r7
 801e5b2:	3001      	adds	r0, #1
 801e5b4:	f43f af51 	beq.w	801e45a <_printf_float+0xc2>
 801e5b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e5bc:	429a      	cmp	r2, r3
 801e5be:	db02      	blt.n	801e5c6 <_printf_float+0x22e>
 801e5c0:	6823      	ldr	r3, [r4, #0]
 801e5c2:	07d8      	lsls	r0, r3, #31
 801e5c4:	d510      	bpl.n	801e5e8 <_printf_float+0x250>
 801e5c6:	ee18 3a10 	vmov	r3, s16
 801e5ca:	4652      	mov	r2, sl
 801e5cc:	4631      	mov	r1, r6
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	47b8      	blx	r7
 801e5d2:	3001      	adds	r0, #1
 801e5d4:	f43f af41 	beq.w	801e45a <_printf_float+0xc2>
 801e5d8:	f04f 0800 	mov.w	r8, #0
 801e5dc:	f104 091a 	add.w	r9, r4, #26
 801e5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5e2:	3b01      	subs	r3, #1
 801e5e4:	4543      	cmp	r3, r8
 801e5e6:	dc09      	bgt.n	801e5fc <_printf_float+0x264>
 801e5e8:	6823      	ldr	r3, [r4, #0]
 801e5ea:	079b      	lsls	r3, r3, #30
 801e5ec:	f100 8105 	bmi.w	801e7fa <_printf_float+0x462>
 801e5f0:	68e0      	ldr	r0, [r4, #12]
 801e5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5f4:	4298      	cmp	r0, r3
 801e5f6:	bfb8      	it	lt
 801e5f8:	4618      	movlt	r0, r3
 801e5fa:	e730      	b.n	801e45e <_printf_float+0xc6>
 801e5fc:	2301      	movs	r3, #1
 801e5fe:	464a      	mov	r2, r9
 801e600:	4631      	mov	r1, r6
 801e602:	4628      	mov	r0, r5
 801e604:	47b8      	blx	r7
 801e606:	3001      	adds	r0, #1
 801e608:	f43f af27 	beq.w	801e45a <_printf_float+0xc2>
 801e60c:	f108 0801 	add.w	r8, r8, #1
 801e610:	e7e6      	b.n	801e5e0 <_printf_float+0x248>
 801e612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e614:	2b00      	cmp	r3, #0
 801e616:	dc39      	bgt.n	801e68c <_printf_float+0x2f4>
 801e618:	4a1b      	ldr	r2, [pc, #108]	; (801e688 <_printf_float+0x2f0>)
 801e61a:	2301      	movs	r3, #1
 801e61c:	4631      	mov	r1, r6
 801e61e:	4628      	mov	r0, r5
 801e620:	47b8      	blx	r7
 801e622:	3001      	adds	r0, #1
 801e624:	f43f af19 	beq.w	801e45a <_printf_float+0xc2>
 801e628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e62c:	4313      	orrs	r3, r2
 801e62e:	d102      	bne.n	801e636 <_printf_float+0x29e>
 801e630:	6823      	ldr	r3, [r4, #0]
 801e632:	07d9      	lsls	r1, r3, #31
 801e634:	d5d8      	bpl.n	801e5e8 <_printf_float+0x250>
 801e636:	ee18 3a10 	vmov	r3, s16
 801e63a:	4652      	mov	r2, sl
 801e63c:	4631      	mov	r1, r6
 801e63e:	4628      	mov	r0, r5
 801e640:	47b8      	blx	r7
 801e642:	3001      	adds	r0, #1
 801e644:	f43f af09 	beq.w	801e45a <_printf_float+0xc2>
 801e648:	f04f 0900 	mov.w	r9, #0
 801e64c:	f104 0a1a 	add.w	sl, r4, #26
 801e650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e652:	425b      	negs	r3, r3
 801e654:	454b      	cmp	r3, r9
 801e656:	dc01      	bgt.n	801e65c <_printf_float+0x2c4>
 801e658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e65a:	e792      	b.n	801e582 <_printf_float+0x1ea>
 801e65c:	2301      	movs	r3, #1
 801e65e:	4652      	mov	r2, sl
 801e660:	4631      	mov	r1, r6
 801e662:	4628      	mov	r0, r5
 801e664:	47b8      	blx	r7
 801e666:	3001      	adds	r0, #1
 801e668:	f43f aef7 	beq.w	801e45a <_printf_float+0xc2>
 801e66c:	f109 0901 	add.w	r9, r9, #1
 801e670:	e7ee      	b.n	801e650 <_printf_float+0x2b8>
 801e672:	bf00      	nop
 801e674:	7fefffff 	.word	0x7fefffff
 801e678:	08026924 	.word	0x08026924
 801e67c:	08026928 	.word	0x08026928
 801e680:	08026930 	.word	0x08026930
 801e684:	0802692c 	.word	0x0802692c
 801e688:	08026c59 	.word	0x08026c59
 801e68c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e68e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e690:	429a      	cmp	r2, r3
 801e692:	bfa8      	it	ge
 801e694:	461a      	movge	r2, r3
 801e696:	2a00      	cmp	r2, #0
 801e698:	4691      	mov	r9, r2
 801e69a:	dc37      	bgt.n	801e70c <_printf_float+0x374>
 801e69c:	f04f 0b00 	mov.w	fp, #0
 801e6a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e6a4:	f104 021a 	add.w	r2, r4, #26
 801e6a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e6aa:	9305      	str	r3, [sp, #20]
 801e6ac:	eba3 0309 	sub.w	r3, r3, r9
 801e6b0:	455b      	cmp	r3, fp
 801e6b2:	dc33      	bgt.n	801e71c <_printf_float+0x384>
 801e6b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e6b8:	429a      	cmp	r2, r3
 801e6ba:	db3b      	blt.n	801e734 <_printf_float+0x39c>
 801e6bc:	6823      	ldr	r3, [r4, #0]
 801e6be:	07da      	lsls	r2, r3, #31
 801e6c0:	d438      	bmi.n	801e734 <_printf_float+0x39c>
 801e6c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e6c4:	9b05      	ldr	r3, [sp, #20]
 801e6c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e6c8:	1ad3      	subs	r3, r2, r3
 801e6ca:	eba2 0901 	sub.w	r9, r2, r1
 801e6ce:	4599      	cmp	r9, r3
 801e6d0:	bfa8      	it	ge
 801e6d2:	4699      	movge	r9, r3
 801e6d4:	f1b9 0f00 	cmp.w	r9, #0
 801e6d8:	dc35      	bgt.n	801e746 <_printf_float+0x3ae>
 801e6da:	f04f 0800 	mov.w	r8, #0
 801e6de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e6e2:	f104 0a1a 	add.w	sl, r4, #26
 801e6e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e6ea:	1a9b      	subs	r3, r3, r2
 801e6ec:	eba3 0309 	sub.w	r3, r3, r9
 801e6f0:	4543      	cmp	r3, r8
 801e6f2:	f77f af79 	ble.w	801e5e8 <_printf_float+0x250>
 801e6f6:	2301      	movs	r3, #1
 801e6f8:	4652      	mov	r2, sl
 801e6fa:	4631      	mov	r1, r6
 801e6fc:	4628      	mov	r0, r5
 801e6fe:	47b8      	blx	r7
 801e700:	3001      	adds	r0, #1
 801e702:	f43f aeaa 	beq.w	801e45a <_printf_float+0xc2>
 801e706:	f108 0801 	add.w	r8, r8, #1
 801e70a:	e7ec      	b.n	801e6e6 <_printf_float+0x34e>
 801e70c:	4613      	mov	r3, r2
 801e70e:	4631      	mov	r1, r6
 801e710:	4642      	mov	r2, r8
 801e712:	4628      	mov	r0, r5
 801e714:	47b8      	blx	r7
 801e716:	3001      	adds	r0, #1
 801e718:	d1c0      	bne.n	801e69c <_printf_float+0x304>
 801e71a:	e69e      	b.n	801e45a <_printf_float+0xc2>
 801e71c:	2301      	movs	r3, #1
 801e71e:	4631      	mov	r1, r6
 801e720:	4628      	mov	r0, r5
 801e722:	9205      	str	r2, [sp, #20]
 801e724:	47b8      	blx	r7
 801e726:	3001      	adds	r0, #1
 801e728:	f43f ae97 	beq.w	801e45a <_printf_float+0xc2>
 801e72c:	9a05      	ldr	r2, [sp, #20]
 801e72e:	f10b 0b01 	add.w	fp, fp, #1
 801e732:	e7b9      	b.n	801e6a8 <_printf_float+0x310>
 801e734:	ee18 3a10 	vmov	r3, s16
 801e738:	4652      	mov	r2, sl
 801e73a:	4631      	mov	r1, r6
 801e73c:	4628      	mov	r0, r5
 801e73e:	47b8      	blx	r7
 801e740:	3001      	adds	r0, #1
 801e742:	d1be      	bne.n	801e6c2 <_printf_float+0x32a>
 801e744:	e689      	b.n	801e45a <_printf_float+0xc2>
 801e746:	9a05      	ldr	r2, [sp, #20]
 801e748:	464b      	mov	r3, r9
 801e74a:	4442      	add	r2, r8
 801e74c:	4631      	mov	r1, r6
 801e74e:	4628      	mov	r0, r5
 801e750:	47b8      	blx	r7
 801e752:	3001      	adds	r0, #1
 801e754:	d1c1      	bne.n	801e6da <_printf_float+0x342>
 801e756:	e680      	b.n	801e45a <_printf_float+0xc2>
 801e758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e75a:	2a01      	cmp	r2, #1
 801e75c:	dc01      	bgt.n	801e762 <_printf_float+0x3ca>
 801e75e:	07db      	lsls	r3, r3, #31
 801e760:	d538      	bpl.n	801e7d4 <_printf_float+0x43c>
 801e762:	2301      	movs	r3, #1
 801e764:	4642      	mov	r2, r8
 801e766:	4631      	mov	r1, r6
 801e768:	4628      	mov	r0, r5
 801e76a:	47b8      	blx	r7
 801e76c:	3001      	adds	r0, #1
 801e76e:	f43f ae74 	beq.w	801e45a <_printf_float+0xc2>
 801e772:	ee18 3a10 	vmov	r3, s16
 801e776:	4652      	mov	r2, sl
 801e778:	4631      	mov	r1, r6
 801e77a:	4628      	mov	r0, r5
 801e77c:	47b8      	blx	r7
 801e77e:	3001      	adds	r0, #1
 801e780:	f43f ae6b 	beq.w	801e45a <_printf_float+0xc2>
 801e784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e788:	2200      	movs	r2, #0
 801e78a:	2300      	movs	r3, #0
 801e78c:	f7e2 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 801e790:	b9d8      	cbnz	r0, 801e7ca <_printf_float+0x432>
 801e792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e794:	f108 0201 	add.w	r2, r8, #1
 801e798:	3b01      	subs	r3, #1
 801e79a:	4631      	mov	r1, r6
 801e79c:	4628      	mov	r0, r5
 801e79e:	47b8      	blx	r7
 801e7a0:	3001      	adds	r0, #1
 801e7a2:	d10e      	bne.n	801e7c2 <_printf_float+0x42a>
 801e7a4:	e659      	b.n	801e45a <_printf_float+0xc2>
 801e7a6:	2301      	movs	r3, #1
 801e7a8:	4652      	mov	r2, sl
 801e7aa:	4631      	mov	r1, r6
 801e7ac:	4628      	mov	r0, r5
 801e7ae:	47b8      	blx	r7
 801e7b0:	3001      	adds	r0, #1
 801e7b2:	f43f ae52 	beq.w	801e45a <_printf_float+0xc2>
 801e7b6:	f108 0801 	add.w	r8, r8, #1
 801e7ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7bc:	3b01      	subs	r3, #1
 801e7be:	4543      	cmp	r3, r8
 801e7c0:	dcf1      	bgt.n	801e7a6 <_printf_float+0x40e>
 801e7c2:	464b      	mov	r3, r9
 801e7c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e7c8:	e6dc      	b.n	801e584 <_printf_float+0x1ec>
 801e7ca:	f04f 0800 	mov.w	r8, #0
 801e7ce:	f104 0a1a 	add.w	sl, r4, #26
 801e7d2:	e7f2      	b.n	801e7ba <_printf_float+0x422>
 801e7d4:	2301      	movs	r3, #1
 801e7d6:	4642      	mov	r2, r8
 801e7d8:	e7df      	b.n	801e79a <_printf_float+0x402>
 801e7da:	2301      	movs	r3, #1
 801e7dc:	464a      	mov	r2, r9
 801e7de:	4631      	mov	r1, r6
 801e7e0:	4628      	mov	r0, r5
 801e7e2:	47b8      	blx	r7
 801e7e4:	3001      	adds	r0, #1
 801e7e6:	f43f ae38 	beq.w	801e45a <_printf_float+0xc2>
 801e7ea:	f108 0801 	add.w	r8, r8, #1
 801e7ee:	68e3      	ldr	r3, [r4, #12]
 801e7f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e7f2:	1a5b      	subs	r3, r3, r1
 801e7f4:	4543      	cmp	r3, r8
 801e7f6:	dcf0      	bgt.n	801e7da <_printf_float+0x442>
 801e7f8:	e6fa      	b.n	801e5f0 <_printf_float+0x258>
 801e7fa:	f04f 0800 	mov.w	r8, #0
 801e7fe:	f104 0919 	add.w	r9, r4, #25
 801e802:	e7f4      	b.n	801e7ee <_printf_float+0x456>

0801e804 <_printf_common>:
 801e804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e808:	4616      	mov	r6, r2
 801e80a:	4699      	mov	r9, r3
 801e80c:	688a      	ldr	r2, [r1, #8]
 801e80e:	690b      	ldr	r3, [r1, #16]
 801e810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e814:	4293      	cmp	r3, r2
 801e816:	bfb8      	it	lt
 801e818:	4613      	movlt	r3, r2
 801e81a:	6033      	str	r3, [r6, #0]
 801e81c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e820:	4607      	mov	r7, r0
 801e822:	460c      	mov	r4, r1
 801e824:	b10a      	cbz	r2, 801e82a <_printf_common+0x26>
 801e826:	3301      	adds	r3, #1
 801e828:	6033      	str	r3, [r6, #0]
 801e82a:	6823      	ldr	r3, [r4, #0]
 801e82c:	0699      	lsls	r1, r3, #26
 801e82e:	bf42      	ittt	mi
 801e830:	6833      	ldrmi	r3, [r6, #0]
 801e832:	3302      	addmi	r3, #2
 801e834:	6033      	strmi	r3, [r6, #0]
 801e836:	6825      	ldr	r5, [r4, #0]
 801e838:	f015 0506 	ands.w	r5, r5, #6
 801e83c:	d106      	bne.n	801e84c <_printf_common+0x48>
 801e83e:	f104 0a19 	add.w	sl, r4, #25
 801e842:	68e3      	ldr	r3, [r4, #12]
 801e844:	6832      	ldr	r2, [r6, #0]
 801e846:	1a9b      	subs	r3, r3, r2
 801e848:	42ab      	cmp	r3, r5
 801e84a:	dc26      	bgt.n	801e89a <_printf_common+0x96>
 801e84c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e850:	1e13      	subs	r3, r2, #0
 801e852:	6822      	ldr	r2, [r4, #0]
 801e854:	bf18      	it	ne
 801e856:	2301      	movne	r3, #1
 801e858:	0692      	lsls	r2, r2, #26
 801e85a:	d42b      	bmi.n	801e8b4 <_printf_common+0xb0>
 801e85c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e860:	4649      	mov	r1, r9
 801e862:	4638      	mov	r0, r7
 801e864:	47c0      	blx	r8
 801e866:	3001      	adds	r0, #1
 801e868:	d01e      	beq.n	801e8a8 <_printf_common+0xa4>
 801e86a:	6823      	ldr	r3, [r4, #0]
 801e86c:	68e5      	ldr	r5, [r4, #12]
 801e86e:	6832      	ldr	r2, [r6, #0]
 801e870:	f003 0306 	and.w	r3, r3, #6
 801e874:	2b04      	cmp	r3, #4
 801e876:	bf08      	it	eq
 801e878:	1aad      	subeq	r5, r5, r2
 801e87a:	68a3      	ldr	r3, [r4, #8]
 801e87c:	6922      	ldr	r2, [r4, #16]
 801e87e:	bf0c      	ite	eq
 801e880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e884:	2500      	movne	r5, #0
 801e886:	4293      	cmp	r3, r2
 801e888:	bfc4      	itt	gt
 801e88a:	1a9b      	subgt	r3, r3, r2
 801e88c:	18ed      	addgt	r5, r5, r3
 801e88e:	2600      	movs	r6, #0
 801e890:	341a      	adds	r4, #26
 801e892:	42b5      	cmp	r5, r6
 801e894:	d11a      	bne.n	801e8cc <_printf_common+0xc8>
 801e896:	2000      	movs	r0, #0
 801e898:	e008      	b.n	801e8ac <_printf_common+0xa8>
 801e89a:	2301      	movs	r3, #1
 801e89c:	4652      	mov	r2, sl
 801e89e:	4649      	mov	r1, r9
 801e8a0:	4638      	mov	r0, r7
 801e8a2:	47c0      	blx	r8
 801e8a4:	3001      	adds	r0, #1
 801e8a6:	d103      	bne.n	801e8b0 <_printf_common+0xac>
 801e8a8:	f04f 30ff 	mov.w	r0, #4294967295
 801e8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8b0:	3501      	adds	r5, #1
 801e8b2:	e7c6      	b.n	801e842 <_printf_common+0x3e>
 801e8b4:	18e1      	adds	r1, r4, r3
 801e8b6:	1c5a      	adds	r2, r3, #1
 801e8b8:	2030      	movs	r0, #48	; 0x30
 801e8ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e8be:	4422      	add	r2, r4
 801e8c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e8c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e8c8:	3302      	adds	r3, #2
 801e8ca:	e7c7      	b.n	801e85c <_printf_common+0x58>
 801e8cc:	2301      	movs	r3, #1
 801e8ce:	4622      	mov	r2, r4
 801e8d0:	4649      	mov	r1, r9
 801e8d2:	4638      	mov	r0, r7
 801e8d4:	47c0      	blx	r8
 801e8d6:	3001      	adds	r0, #1
 801e8d8:	d0e6      	beq.n	801e8a8 <_printf_common+0xa4>
 801e8da:	3601      	adds	r6, #1
 801e8dc:	e7d9      	b.n	801e892 <_printf_common+0x8e>
	...

0801e8e0 <_printf_i>:
 801e8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e8e4:	460c      	mov	r4, r1
 801e8e6:	4691      	mov	r9, r2
 801e8e8:	7e27      	ldrb	r7, [r4, #24]
 801e8ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e8ec:	2f78      	cmp	r7, #120	; 0x78
 801e8ee:	4680      	mov	r8, r0
 801e8f0:	469a      	mov	sl, r3
 801e8f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e8f6:	d807      	bhi.n	801e908 <_printf_i+0x28>
 801e8f8:	2f62      	cmp	r7, #98	; 0x62
 801e8fa:	d80a      	bhi.n	801e912 <_printf_i+0x32>
 801e8fc:	2f00      	cmp	r7, #0
 801e8fe:	f000 80d8 	beq.w	801eab2 <_printf_i+0x1d2>
 801e902:	2f58      	cmp	r7, #88	; 0x58
 801e904:	f000 80a3 	beq.w	801ea4e <_printf_i+0x16e>
 801e908:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e90c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e910:	e03a      	b.n	801e988 <_printf_i+0xa8>
 801e912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e916:	2b15      	cmp	r3, #21
 801e918:	d8f6      	bhi.n	801e908 <_printf_i+0x28>
 801e91a:	a001      	add	r0, pc, #4	; (adr r0, 801e920 <_printf_i+0x40>)
 801e91c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801e920:	0801e979 	.word	0x0801e979
 801e924:	0801e98d 	.word	0x0801e98d
 801e928:	0801e909 	.word	0x0801e909
 801e92c:	0801e909 	.word	0x0801e909
 801e930:	0801e909 	.word	0x0801e909
 801e934:	0801e909 	.word	0x0801e909
 801e938:	0801e98d 	.word	0x0801e98d
 801e93c:	0801e909 	.word	0x0801e909
 801e940:	0801e909 	.word	0x0801e909
 801e944:	0801e909 	.word	0x0801e909
 801e948:	0801e909 	.word	0x0801e909
 801e94c:	0801ea99 	.word	0x0801ea99
 801e950:	0801e9bd 	.word	0x0801e9bd
 801e954:	0801ea7b 	.word	0x0801ea7b
 801e958:	0801e909 	.word	0x0801e909
 801e95c:	0801e909 	.word	0x0801e909
 801e960:	0801eabb 	.word	0x0801eabb
 801e964:	0801e909 	.word	0x0801e909
 801e968:	0801e9bd 	.word	0x0801e9bd
 801e96c:	0801e909 	.word	0x0801e909
 801e970:	0801e909 	.word	0x0801e909
 801e974:	0801ea83 	.word	0x0801ea83
 801e978:	680b      	ldr	r3, [r1, #0]
 801e97a:	1d1a      	adds	r2, r3, #4
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	600a      	str	r2, [r1, #0]
 801e980:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e988:	2301      	movs	r3, #1
 801e98a:	e0a3      	b.n	801ead4 <_printf_i+0x1f4>
 801e98c:	6825      	ldr	r5, [r4, #0]
 801e98e:	6808      	ldr	r0, [r1, #0]
 801e990:	062e      	lsls	r6, r5, #24
 801e992:	f100 0304 	add.w	r3, r0, #4
 801e996:	d50a      	bpl.n	801e9ae <_printf_i+0xce>
 801e998:	6805      	ldr	r5, [r0, #0]
 801e99a:	600b      	str	r3, [r1, #0]
 801e99c:	2d00      	cmp	r5, #0
 801e99e:	da03      	bge.n	801e9a8 <_printf_i+0xc8>
 801e9a0:	232d      	movs	r3, #45	; 0x2d
 801e9a2:	426d      	negs	r5, r5
 801e9a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e9a8:	485e      	ldr	r0, [pc, #376]	; (801eb24 <_printf_i+0x244>)
 801e9aa:	230a      	movs	r3, #10
 801e9ac:	e019      	b.n	801e9e2 <_printf_i+0x102>
 801e9ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 801e9b2:	6805      	ldr	r5, [r0, #0]
 801e9b4:	600b      	str	r3, [r1, #0]
 801e9b6:	bf18      	it	ne
 801e9b8:	b22d      	sxthne	r5, r5
 801e9ba:	e7ef      	b.n	801e99c <_printf_i+0xbc>
 801e9bc:	680b      	ldr	r3, [r1, #0]
 801e9be:	6825      	ldr	r5, [r4, #0]
 801e9c0:	1d18      	adds	r0, r3, #4
 801e9c2:	6008      	str	r0, [r1, #0]
 801e9c4:	0628      	lsls	r0, r5, #24
 801e9c6:	d501      	bpl.n	801e9cc <_printf_i+0xec>
 801e9c8:	681d      	ldr	r5, [r3, #0]
 801e9ca:	e002      	b.n	801e9d2 <_printf_i+0xf2>
 801e9cc:	0669      	lsls	r1, r5, #25
 801e9ce:	d5fb      	bpl.n	801e9c8 <_printf_i+0xe8>
 801e9d0:	881d      	ldrh	r5, [r3, #0]
 801e9d2:	4854      	ldr	r0, [pc, #336]	; (801eb24 <_printf_i+0x244>)
 801e9d4:	2f6f      	cmp	r7, #111	; 0x6f
 801e9d6:	bf0c      	ite	eq
 801e9d8:	2308      	moveq	r3, #8
 801e9da:	230a      	movne	r3, #10
 801e9dc:	2100      	movs	r1, #0
 801e9de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e9e2:	6866      	ldr	r6, [r4, #4]
 801e9e4:	60a6      	str	r6, [r4, #8]
 801e9e6:	2e00      	cmp	r6, #0
 801e9e8:	bfa2      	ittt	ge
 801e9ea:	6821      	ldrge	r1, [r4, #0]
 801e9ec:	f021 0104 	bicge.w	r1, r1, #4
 801e9f0:	6021      	strge	r1, [r4, #0]
 801e9f2:	b90d      	cbnz	r5, 801e9f8 <_printf_i+0x118>
 801e9f4:	2e00      	cmp	r6, #0
 801e9f6:	d04d      	beq.n	801ea94 <_printf_i+0x1b4>
 801e9f8:	4616      	mov	r6, r2
 801e9fa:	fbb5 f1f3 	udiv	r1, r5, r3
 801e9fe:	fb03 5711 	mls	r7, r3, r1, r5
 801ea02:	5dc7      	ldrb	r7, [r0, r7]
 801ea04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ea08:	462f      	mov	r7, r5
 801ea0a:	42bb      	cmp	r3, r7
 801ea0c:	460d      	mov	r5, r1
 801ea0e:	d9f4      	bls.n	801e9fa <_printf_i+0x11a>
 801ea10:	2b08      	cmp	r3, #8
 801ea12:	d10b      	bne.n	801ea2c <_printf_i+0x14c>
 801ea14:	6823      	ldr	r3, [r4, #0]
 801ea16:	07df      	lsls	r7, r3, #31
 801ea18:	d508      	bpl.n	801ea2c <_printf_i+0x14c>
 801ea1a:	6923      	ldr	r3, [r4, #16]
 801ea1c:	6861      	ldr	r1, [r4, #4]
 801ea1e:	4299      	cmp	r1, r3
 801ea20:	bfde      	ittt	le
 801ea22:	2330      	movle	r3, #48	; 0x30
 801ea24:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ea28:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ea2c:	1b92      	subs	r2, r2, r6
 801ea2e:	6122      	str	r2, [r4, #16]
 801ea30:	f8cd a000 	str.w	sl, [sp]
 801ea34:	464b      	mov	r3, r9
 801ea36:	aa03      	add	r2, sp, #12
 801ea38:	4621      	mov	r1, r4
 801ea3a:	4640      	mov	r0, r8
 801ea3c:	f7ff fee2 	bl	801e804 <_printf_common>
 801ea40:	3001      	adds	r0, #1
 801ea42:	d14c      	bne.n	801eade <_printf_i+0x1fe>
 801ea44:	f04f 30ff 	mov.w	r0, #4294967295
 801ea48:	b004      	add	sp, #16
 801ea4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea4e:	4835      	ldr	r0, [pc, #212]	; (801eb24 <_printf_i+0x244>)
 801ea50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ea54:	6823      	ldr	r3, [r4, #0]
 801ea56:	680e      	ldr	r6, [r1, #0]
 801ea58:	061f      	lsls	r7, r3, #24
 801ea5a:	f856 5b04 	ldr.w	r5, [r6], #4
 801ea5e:	600e      	str	r6, [r1, #0]
 801ea60:	d514      	bpl.n	801ea8c <_printf_i+0x1ac>
 801ea62:	07d9      	lsls	r1, r3, #31
 801ea64:	bf44      	itt	mi
 801ea66:	f043 0320 	orrmi.w	r3, r3, #32
 801ea6a:	6023      	strmi	r3, [r4, #0]
 801ea6c:	b91d      	cbnz	r5, 801ea76 <_printf_i+0x196>
 801ea6e:	6823      	ldr	r3, [r4, #0]
 801ea70:	f023 0320 	bic.w	r3, r3, #32
 801ea74:	6023      	str	r3, [r4, #0]
 801ea76:	2310      	movs	r3, #16
 801ea78:	e7b0      	b.n	801e9dc <_printf_i+0xfc>
 801ea7a:	6823      	ldr	r3, [r4, #0]
 801ea7c:	f043 0320 	orr.w	r3, r3, #32
 801ea80:	6023      	str	r3, [r4, #0]
 801ea82:	2378      	movs	r3, #120	; 0x78
 801ea84:	4828      	ldr	r0, [pc, #160]	; (801eb28 <_printf_i+0x248>)
 801ea86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ea8a:	e7e3      	b.n	801ea54 <_printf_i+0x174>
 801ea8c:	065e      	lsls	r6, r3, #25
 801ea8e:	bf48      	it	mi
 801ea90:	b2ad      	uxthmi	r5, r5
 801ea92:	e7e6      	b.n	801ea62 <_printf_i+0x182>
 801ea94:	4616      	mov	r6, r2
 801ea96:	e7bb      	b.n	801ea10 <_printf_i+0x130>
 801ea98:	680b      	ldr	r3, [r1, #0]
 801ea9a:	6826      	ldr	r6, [r4, #0]
 801ea9c:	6960      	ldr	r0, [r4, #20]
 801ea9e:	1d1d      	adds	r5, r3, #4
 801eaa0:	600d      	str	r5, [r1, #0]
 801eaa2:	0635      	lsls	r5, r6, #24
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	d501      	bpl.n	801eaac <_printf_i+0x1cc>
 801eaa8:	6018      	str	r0, [r3, #0]
 801eaaa:	e002      	b.n	801eab2 <_printf_i+0x1d2>
 801eaac:	0671      	lsls	r1, r6, #25
 801eaae:	d5fb      	bpl.n	801eaa8 <_printf_i+0x1c8>
 801eab0:	8018      	strh	r0, [r3, #0]
 801eab2:	2300      	movs	r3, #0
 801eab4:	6123      	str	r3, [r4, #16]
 801eab6:	4616      	mov	r6, r2
 801eab8:	e7ba      	b.n	801ea30 <_printf_i+0x150>
 801eaba:	680b      	ldr	r3, [r1, #0]
 801eabc:	1d1a      	adds	r2, r3, #4
 801eabe:	600a      	str	r2, [r1, #0]
 801eac0:	681e      	ldr	r6, [r3, #0]
 801eac2:	6862      	ldr	r2, [r4, #4]
 801eac4:	2100      	movs	r1, #0
 801eac6:	4630      	mov	r0, r6
 801eac8:	f7e1 fb8a 	bl	80001e0 <memchr>
 801eacc:	b108      	cbz	r0, 801ead2 <_printf_i+0x1f2>
 801eace:	1b80      	subs	r0, r0, r6
 801ead0:	6060      	str	r0, [r4, #4]
 801ead2:	6863      	ldr	r3, [r4, #4]
 801ead4:	6123      	str	r3, [r4, #16]
 801ead6:	2300      	movs	r3, #0
 801ead8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eadc:	e7a8      	b.n	801ea30 <_printf_i+0x150>
 801eade:	6923      	ldr	r3, [r4, #16]
 801eae0:	4632      	mov	r2, r6
 801eae2:	4649      	mov	r1, r9
 801eae4:	4640      	mov	r0, r8
 801eae6:	47d0      	blx	sl
 801eae8:	3001      	adds	r0, #1
 801eaea:	d0ab      	beq.n	801ea44 <_printf_i+0x164>
 801eaec:	6823      	ldr	r3, [r4, #0]
 801eaee:	079b      	lsls	r3, r3, #30
 801eaf0:	d413      	bmi.n	801eb1a <_printf_i+0x23a>
 801eaf2:	68e0      	ldr	r0, [r4, #12]
 801eaf4:	9b03      	ldr	r3, [sp, #12]
 801eaf6:	4298      	cmp	r0, r3
 801eaf8:	bfb8      	it	lt
 801eafa:	4618      	movlt	r0, r3
 801eafc:	e7a4      	b.n	801ea48 <_printf_i+0x168>
 801eafe:	2301      	movs	r3, #1
 801eb00:	4632      	mov	r2, r6
 801eb02:	4649      	mov	r1, r9
 801eb04:	4640      	mov	r0, r8
 801eb06:	47d0      	blx	sl
 801eb08:	3001      	adds	r0, #1
 801eb0a:	d09b      	beq.n	801ea44 <_printf_i+0x164>
 801eb0c:	3501      	adds	r5, #1
 801eb0e:	68e3      	ldr	r3, [r4, #12]
 801eb10:	9903      	ldr	r1, [sp, #12]
 801eb12:	1a5b      	subs	r3, r3, r1
 801eb14:	42ab      	cmp	r3, r5
 801eb16:	dcf2      	bgt.n	801eafe <_printf_i+0x21e>
 801eb18:	e7eb      	b.n	801eaf2 <_printf_i+0x212>
 801eb1a:	2500      	movs	r5, #0
 801eb1c:	f104 0619 	add.w	r6, r4, #25
 801eb20:	e7f5      	b.n	801eb0e <_printf_i+0x22e>
 801eb22:	bf00      	nop
 801eb24:	08026934 	.word	0x08026934
 801eb28:	08026945 	.word	0x08026945

0801eb2c <iprintf>:
 801eb2c:	b40f      	push	{r0, r1, r2, r3}
 801eb2e:	4b0a      	ldr	r3, [pc, #40]	; (801eb58 <iprintf+0x2c>)
 801eb30:	b513      	push	{r0, r1, r4, lr}
 801eb32:	681c      	ldr	r4, [r3, #0]
 801eb34:	b124      	cbz	r4, 801eb40 <iprintf+0x14>
 801eb36:	69a3      	ldr	r3, [r4, #24]
 801eb38:	b913      	cbnz	r3, 801eb40 <iprintf+0x14>
 801eb3a:	4620      	mov	r0, r4
 801eb3c:	f7ff f9ce 	bl	801dedc <__sinit>
 801eb40:	ab05      	add	r3, sp, #20
 801eb42:	9a04      	ldr	r2, [sp, #16]
 801eb44:	68a1      	ldr	r1, [r4, #8]
 801eb46:	9301      	str	r3, [sp, #4]
 801eb48:	4620      	mov	r0, r4
 801eb4a:	f002 fae9 	bl	8021120 <_vfiprintf_r>
 801eb4e:	b002      	add	sp, #8
 801eb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb54:	b004      	add	sp, #16
 801eb56:	4770      	bx	lr
 801eb58:	20000064 	.word	0x20000064

0801eb5c <_puts_r>:
 801eb5c:	b570      	push	{r4, r5, r6, lr}
 801eb5e:	460e      	mov	r6, r1
 801eb60:	4605      	mov	r5, r0
 801eb62:	b118      	cbz	r0, 801eb6c <_puts_r+0x10>
 801eb64:	6983      	ldr	r3, [r0, #24]
 801eb66:	b90b      	cbnz	r3, 801eb6c <_puts_r+0x10>
 801eb68:	f7ff f9b8 	bl	801dedc <__sinit>
 801eb6c:	69ab      	ldr	r3, [r5, #24]
 801eb6e:	68ac      	ldr	r4, [r5, #8]
 801eb70:	b913      	cbnz	r3, 801eb78 <_puts_r+0x1c>
 801eb72:	4628      	mov	r0, r5
 801eb74:	f7ff f9b2 	bl	801dedc <__sinit>
 801eb78:	4b2c      	ldr	r3, [pc, #176]	; (801ec2c <_puts_r+0xd0>)
 801eb7a:	429c      	cmp	r4, r3
 801eb7c:	d120      	bne.n	801ebc0 <_puts_r+0x64>
 801eb7e:	686c      	ldr	r4, [r5, #4]
 801eb80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eb82:	07db      	lsls	r3, r3, #31
 801eb84:	d405      	bmi.n	801eb92 <_puts_r+0x36>
 801eb86:	89a3      	ldrh	r3, [r4, #12]
 801eb88:	0598      	lsls	r0, r3, #22
 801eb8a:	d402      	bmi.n	801eb92 <_puts_r+0x36>
 801eb8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb8e:	f7ff fa68 	bl	801e062 <__retarget_lock_acquire_recursive>
 801eb92:	89a3      	ldrh	r3, [r4, #12]
 801eb94:	0719      	lsls	r1, r3, #28
 801eb96:	d51d      	bpl.n	801ebd4 <_puts_r+0x78>
 801eb98:	6923      	ldr	r3, [r4, #16]
 801eb9a:	b1db      	cbz	r3, 801ebd4 <_puts_r+0x78>
 801eb9c:	3e01      	subs	r6, #1
 801eb9e:	68a3      	ldr	r3, [r4, #8]
 801eba0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801eba4:	3b01      	subs	r3, #1
 801eba6:	60a3      	str	r3, [r4, #8]
 801eba8:	bb39      	cbnz	r1, 801ebfa <_puts_r+0x9e>
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	da38      	bge.n	801ec20 <_puts_r+0xc4>
 801ebae:	4622      	mov	r2, r4
 801ebb0:	210a      	movs	r1, #10
 801ebb2:	4628      	mov	r0, r5
 801ebb4:	f000 faf8 	bl	801f1a8 <__swbuf_r>
 801ebb8:	3001      	adds	r0, #1
 801ebba:	d011      	beq.n	801ebe0 <_puts_r+0x84>
 801ebbc:	250a      	movs	r5, #10
 801ebbe:	e011      	b.n	801ebe4 <_puts_r+0x88>
 801ebc0:	4b1b      	ldr	r3, [pc, #108]	; (801ec30 <_puts_r+0xd4>)
 801ebc2:	429c      	cmp	r4, r3
 801ebc4:	d101      	bne.n	801ebca <_puts_r+0x6e>
 801ebc6:	68ac      	ldr	r4, [r5, #8]
 801ebc8:	e7da      	b.n	801eb80 <_puts_r+0x24>
 801ebca:	4b1a      	ldr	r3, [pc, #104]	; (801ec34 <_puts_r+0xd8>)
 801ebcc:	429c      	cmp	r4, r3
 801ebce:	bf08      	it	eq
 801ebd0:	68ec      	ldreq	r4, [r5, #12]
 801ebd2:	e7d5      	b.n	801eb80 <_puts_r+0x24>
 801ebd4:	4621      	mov	r1, r4
 801ebd6:	4628      	mov	r0, r5
 801ebd8:	f000 fb4a 	bl	801f270 <__swsetup_r>
 801ebdc:	2800      	cmp	r0, #0
 801ebde:	d0dd      	beq.n	801eb9c <_puts_r+0x40>
 801ebe0:	f04f 35ff 	mov.w	r5, #4294967295
 801ebe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ebe6:	07da      	lsls	r2, r3, #31
 801ebe8:	d405      	bmi.n	801ebf6 <_puts_r+0x9a>
 801ebea:	89a3      	ldrh	r3, [r4, #12]
 801ebec:	059b      	lsls	r3, r3, #22
 801ebee:	d402      	bmi.n	801ebf6 <_puts_r+0x9a>
 801ebf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ebf2:	f7ff fa37 	bl	801e064 <__retarget_lock_release_recursive>
 801ebf6:	4628      	mov	r0, r5
 801ebf8:	bd70      	pop	{r4, r5, r6, pc}
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	da04      	bge.n	801ec08 <_puts_r+0xac>
 801ebfe:	69a2      	ldr	r2, [r4, #24]
 801ec00:	429a      	cmp	r2, r3
 801ec02:	dc06      	bgt.n	801ec12 <_puts_r+0xb6>
 801ec04:	290a      	cmp	r1, #10
 801ec06:	d004      	beq.n	801ec12 <_puts_r+0xb6>
 801ec08:	6823      	ldr	r3, [r4, #0]
 801ec0a:	1c5a      	adds	r2, r3, #1
 801ec0c:	6022      	str	r2, [r4, #0]
 801ec0e:	7019      	strb	r1, [r3, #0]
 801ec10:	e7c5      	b.n	801eb9e <_puts_r+0x42>
 801ec12:	4622      	mov	r2, r4
 801ec14:	4628      	mov	r0, r5
 801ec16:	f000 fac7 	bl	801f1a8 <__swbuf_r>
 801ec1a:	3001      	adds	r0, #1
 801ec1c:	d1bf      	bne.n	801eb9e <_puts_r+0x42>
 801ec1e:	e7df      	b.n	801ebe0 <_puts_r+0x84>
 801ec20:	6823      	ldr	r3, [r4, #0]
 801ec22:	250a      	movs	r5, #10
 801ec24:	1c5a      	adds	r2, r3, #1
 801ec26:	6022      	str	r2, [r4, #0]
 801ec28:	701d      	strb	r5, [r3, #0]
 801ec2a:	e7db      	b.n	801ebe4 <_puts_r+0x88>
 801ec2c:	080268e0 	.word	0x080268e0
 801ec30:	08026900 	.word	0x08026900
 801ec34:	080268c0 	.word	0x080268c0

0801ec38 <puts>:
 801ec38:	4b02      	ldr	r3, [pc, #8]	; (801ec44 <puts+0xc>)
 801ec3a:	4601      	mov	r1, r0
 801ec3c:	6818      	ldr	r0, [r3, #0]
 801ec3e:	f7ff bf8d 	b.w	801eb5c <_puts_r>
 801ec42:	bf00      	nop
 801ec44:	20000064 	.word	0x20000064

0801ec48 <rand>:
 801ec48:	4b17      	ldr	r3, [pc, #92]	; (801eca8 <rand+0x60>)
 801ec4a:	b510      	push	{r4, lr}
 801ec4c:	681c      	ldr	r4, [r3, #0]
 801ec4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ec50:	b9b3      	cbnz	r3, 801ec80 <rand+0x38>
 801ec52:	2018      	movs	r0, #24
 801ec54:	f7ff fa08 	bl	801e068 <malloc>
 801ec58:	63a0      	str	r0, [r4, #56]	; 0x38
 801ec5a:	b928      	cbnz	r0, 801ec68 <rand+0x20>
 801ec5c:	4602      	mov	r2, r0
 801ec5e:	4b13      	ldr	r3, [pc, #76]	; (801ecac <rand+0x64>)
 801ec60:	4813      	ldr	r0, [pc, #76]	; (801ecb0 <rand+0x68>)
 801ec62:	214e      	movs	r1, #78	; 0x4e
 801ec64:	f000 fb72 	bl	801f34c <__assert_func>
 801ec68:	4a12      	ldr	r2, [pc, #72]	; (801ecb4 <rand+0x6c>)
 801ec6a:	4b13      	ldr	r3, [pc, #76]	; (801ecb8 <rand+0x70>)
 801ec6c:	e9c0 2300 	strd	r2, r3, [r0]
 801ec70:	4b12      	ldr	r3, [pc, #72]	; (801ecbc <rand+0x74>)
 801ec72:	6083      	str	r3, [r0, #8]
 801ec74:	230b      	movs	r3, #11
 801ec76:	8183      	strh	r3, [r0, #12]
 801ec78:	2201      	movs	r2, #1
 801ec7a:	2300      	movs	r3, #0
 801ec7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ec80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ec82:	480f      	ldr	r0, [pc, #60]	; (801ecc0 <rand+0x78>)
 801ec84:	690a      	ldr	r2, [r1, #16]
 801ec86:	694b      	ldr	r3, [r1, #20]
 801ec88:	4c0e      	ldr	r4, [pc, #56]	; (801ecc4 <rand+0x7c>)
 801ec8a:	4350      	muls	r0, r2
 801ec8c:	fb04 0003 	mla	r0, r4, r3, r0
 801ec90:	fba2 3404 	umull	r3, r4, r2, r4
 801ec94:	1c5a      	adds	r2, r3, #1
 801ec96:	4404      	add	r4, r0
 801ec98:	f144 0000 	adc.w	r0, r4, #0
 801ec9c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801eca0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801eca4:	bd10      	pop	{r4, pc}
 801eca6:	bf00      	nop
 801eca8:	20000064 	.word	0x20000064
 801ecac:	08026956 	.word	0x08026956
 801ecb0:	0802696d 	.word	0x0802696d
 801ecb4:	abcd330e 	.word	0xabcd330e
 801ecb8:	e66d1234 	.word	0xe66d1234
 801ecbc:	0005deec 	.word	0x0005deec
 801ecc0:	5851f42d 	.word	0x5851f42d
 801ecc4:	4c957f2d 	.word	0x4c957f2d

0801ecc8 <cleanup_glue>:
 801ecc8:	b538      	push	{r3, r4, r5, lr}
 801ecca:	460c      	mov	r4, r1
 801eccc:	6809      	ldr	r1, [r1, #0]
 801ecce:	4605      	mov	r5, r0
 801ecd0:	b109      	cbz	r1, 801ecd6 <cleanup_glue+0xe>
 801ecd2:	f7ff fff9 	bl	801ecc8 <cleanup_glue>
 801ecd6:	4621      	mov	r1, r4
 801ecd8:	4628      	mov	r0, r5
 801ecda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ecde:	f7ff ba11 	b.w	801e104 <_free_r>
	...

0801ece4 <_reclaim_reent>:
 801ece4:	4b2c      	ldr	r3, [pc, #176]	; (801ed98 <_reclaim_reent+0xb4>)
 801ece6:	681b      	ldr	r3, [r3, #0]
 801ece8:	4283      	cmp	r3, r0
 801ecea:	b570      	push	{r4, r5, r6, lr}
 801ecec:	4604      	mov	r4, r0
 801ecee:	d051      	beq.n	801ed94 <_reclaim_reent+0xb0>
 801ecf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ecf2:	b143      	cbz	r3, 801ed06 <_reclaim_reent+0x22>
 801ecf4:	68db      	ldr	r3, [r3, #12]
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d14a      	bne.n	801ed90 <_reclaim_reent+0xac>
 801ecfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ecfc:	6819      	ldr	r1, [r3, #0]
 801ecfe:	b111      	cbz	r1, 801ed06 <_reclaim_reent+0x22>
 801ed00:	4620      	mov	r0, r4
 801ed02:	f7ff f9ff 	bl	801e104 <_free_r>
 801ed06:	6961      	ldr	r1, [r4, #20]
 801ed08:	b111      	cbz	r1, 801ed10 <_reclaim_reent+0x2c>
 801ed0a:	4620      	mov	r0, r4
 801ed0c:	f7ff f9fa 	bl	801e104 <_free_r>
 801ed10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ed12:	b111      	cbz	r1, 801ed1a <_reclaim_reent+0x36>
 801ed14:	4620      	mov	r0, r4
 801ed16:	f7ff f9f5 	bl	801e104 <_free_r>
 801ed1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ed1c:	b111      	cbz	r1, 801ed24 <_reclaim_reent+0x40>
 801ed1e:	4620      	mov	r0, r4
 801ed20:	f7ff f9f0 	bl	801e104 <_free_r>
 801ed24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ed26:	b111      	cbz	r1, 801ed2e <_reclaim_reent+0x4a>
 801ed28:	4620      	mov	r0, r4
 801ed2a:	f7ff f9eb 	bl	801e104 <_free_r>
 801ed2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ed30:	b111      	cbz	r1, 801ed38 <_reclaim_reent+0x54>
 801ed32:	4620      	mov	r0, r4
 801ed34:	f7ff f9e6 	bl	801e104 <_free_r>
 801ed38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ed3a:	b111      	cbz	r1, 801ed42 <_reclaim_reent+0x5e>
 801ed3c:	4620      	mov	r0, r4
 801ed3e:	f7ff f9e1 	bl	801e104 <_free_r>
 801ed42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ed44:	b111      	cbz	r1, 801ed4c <_reclaim_reent+0x68>
 801ed46:	4620      	mov	r0, r4
 801ed48:	f7ff f9dc 	bl	801e104 <_free_r>
 801ed4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ed4e:	b111      	cbz	r1, 801ed56 <_reclaim_reent+0x72>
 801ed50:	4620      	mov	r0, r4
 801ed52:	f7ff f9d7 	bl	801e104 <_free_r>
 801ed56:	69a3      	ldr	r3, [r4, #24]
 801ed58:	b1e3      	cbz	r3, 801ed94 <_reclaim_reent+0xb0>
 801ed5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ed5c:	4620      	mov	r0, r4
 801ed5e:	4798      	blx	r3
 801ed60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ed62:	b1b9      	cbz	r1, 801ed94 <_reclaim_reent+0xb0>
 801ed64:	4620      	mov	r0, r4
 801ed66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ed6a:	f7ff bfad 	b.w	801ecc8 <cleanup_glue>
 801ed6e:	5949      	ldr	r1, [r1, r5]
 801ed70:	b941      	cbnz	r1, 801ed84 <_reclaim_reent+0xa0>
 801ed72:	3504      	adds	r5, #4
 801ed74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ed76:	2d80      	cmp	r5, #128	; 0x80
 801ed78:	68d9      	ldr	r1, [r3, #12]
 801ed7a:	d1f8      	bne.n	801ed6e <_reclaim_reent+0x8a>
 801ed7c:	4620      	mov	r0, r4
 801ed7e:	f7ff f9c1 	bl	801e104 <_free_r>
 801ed82:	e7ba      	b.n	801ecfa <_reclaim_reent+0x16>
 801ed84:	680e      	ldr	r6, [r1, #0]
 801ed86:	4620      	mov	r0, r4
 801ed88:	f7ff f9bc 	bl	801e104 <_free_r>
 801ed8c:	4631      	mov	r1, r6
 801ed8e:	e7ef      	b.n	801ed70 <_reclaim_reent+0x8c>
 801ed90:	2500      	movs	r5, #0
 801ed92:	e7ef      	b.n	801ed74 <_reclaim_reent+0x90>
 801ed94:	bd70      	pop	{r4, r5, r6, pc}
 801ed96:	bf00      	nop
 801ed98:	20000064 	.word	0x20000064

0801ed9c <_sbrk_r>:
 801ed9c:	b538      	push	{r3, r4, r5, lr}
 801ed9e:	4d06      	ldr	r5, [pc, #24]	; (801edb8 <_sbrk_r+0x1c>)
 801eda0:	2300      	movs	r3, #0
 801eda2:	4604      	mov	r4, r0
 801eda4:	4608      	mov	r0, r1
 801eda6:	602b      	str	r3, [r5, #0]
 801eda8:	f7e3 fb7c 	bl	80024a4 <_sbrk>
 801edac:	1c43      	adds	r3, r0, #1
 801edae:	d102      	bne.n	801edb6 <_sbrk_r+0x1a>
 801edb0:	682b      	ldr	r3, [r5, #0]
 801edb2:	b103      	cbz	r3, 801edb6 <_sbrk_r+0x1a>
 801edb4:	6023      	str	r3, [r4, #0]
 801edb6:	bd38      	pop	{r3, r4, r5, pc}
 801edb8:	2001b118 	.word	0x2001b118

0801edbc <sniprintf>:
 801edbc:	b40c      	push	{r2, r3}
 801edbe:	b530      	push	{r4, r5, lr}
 801edc0:	4b17      	ldr	r3, [pc, #92]	; (801ee20 <sniprintf+0x64>)
 801edc2:	1e0c      	subs	r4, r1, #0
 801edc4:	681d      	ldr	r5, [r3, #0]
 801edc6:	b09d      	sub	sp, #116	; 0x74
 801edc8:	da08      	bge.n	801eddc <sniprintf+0x20>
 801edca:	238b      	movs	r3, #139	; 0x8b
 801edcc:	602b      	str	r3, [r5, #0]
 801edce:	f04f 30ff 	mov.w	r0, #4294967295
 801edd2:	b01d      	add	sp, #116	; 0x74
 801edd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801edd8:	b002      	add	sp, #8
 801edda:	4770      	bx	lr
 801eddc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ede0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ede4:	bf14      	ite	ne
 801ede6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801edea:	4623      	moveq	r3, r4
 801edec:	9304      	str	r3, [sp, #16]
 801edee:	9307      	str	r3, [sp, #28]
 801edf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801edf4:	9002      	str	r0, [sp, #8]
 801edf6:	9006      	str	r0, [sp, #24]
 801edf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801edfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801edfe:	ab21      	add	r3, sp, #132	; 0x84
 801ee00:	a902      	add	r1, sp, #8
 801ee02:	4628      	mov	r0, r5
 801ee04:	9301      	str	r3, [sp, #4]
 801ee06:	f001 fe8f 	bl	8020b28 <_svfiprintf_r>
 801ee0a:	1c43      	adds	r3, r0, #1
 801ee0c:	bfbc      	itt	lt
 801ee0e:	238b      	movlt	r3, #139	; 0x8b
 801ee10:	602b      	strlt	r3, [r5, #0]
 801ee12:	2c00      	cmp	r4, #0
 801ee14:	d0dd      	beq.n	801edd2 <sniprintf+0x16>
 801ee16:	9b02      	ldr	r3, [sp, #8]
 801ee18:	2200      	movs	r2, #0
 801ee1a:	701a      	strb	r2, [r3, #0]
 801ee1c:	e7d9      	b.n	801edd2 <sniprintf+0x16>
 801ee1e:	bf00      	nop
 801ee20:	20000064 	.word	0x20000064

0801ee24 <siprintf>:
 801ee24:	b40e      	push	{r1, r2, r3}
 801ee26:	b500      	push	{lr}
 801ee28:	b09c      	sub	sp, #112	; 0x70
 801ee2a:	ab1d      	add	r3, sp, #116	; 0x74
 801ee2c:	9002      	str	r0, [sp, #8]
 801ee2e:	9006      	str	r0, [sp, #24]
 801ee30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ee34:	4809      	ldr	r0, [pc, #36]	; (801ee5c <siprintf+0x38>)
 801ee36:	9107      	str	r1, [sp, #28]
 801ee38:	9104      	str	r1, [sp, #16]
 801ee3a:	4909      	ldr	r1, [pc, #36]	; (801ee60 <siprintf+0x3c>)
 801ee3c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee40:	9105      	str	r1, [sp, #20]
 801ee42:	6800      	ldr	r0, [r0, #0]
 801ee44:	9301      	str	r3, [sp, #4]
 801ee46:	a902      	add	r1, sp, #8
 801ee48:	f001 fe6e 	bl	8020b28 <_svfiprintf_r>
 801ee4c:	9b02      	ldr	r3, [sp, #8]
 801ee4e:	2200      	movs	r2, #0
 801ee50:	701a      	strb	r2, [r3, #0]
 801ee52:	b01c      	add	sp, #112	; 0x70
 801ee54:	f85d eb04 	ldr.w	lr, [sp], #4
 801ee58:	b003      	add	sp, #12
 801ee5a:	4770      	bx	lr
 801ee5c:	20000064 	.word	0x20000064
 801ee60:	ffff0208 	.word	0xffff0208

0801ee64 <siscanf>:
 801ee64:	b40e      	push	{r1, r2, r3}
 801ee66:	b510      	push	{r4, lr}
 801ee68:	b09f      	sub	sp, #124	; 0x7c
 801ee6a:	ac21      	add	r4, sp, #132	; 0x84
 801ee6c:	f44f 7101 	mov.w	r1, #516	; 0x204
 801ee70:	f854 2b04 	ldr.w	r2, [r4], #4
 801ee74:	9201      	str	r2, [sp, #4]
 801ee76:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ee7a:	9004      	str	r0, [sp, #16]
 801ee7c:	9008      	str	r0, [sp, #32]
 801ee7e:	f7e1 f9a7 	bl	80001d0 <strlen>
 801ee82:	4b0c      	ldr	r3, [pc, #48]	; (801eeb4 <siscanf+0x50>)
 801ee84:	9005      	str	r0, [sp, #20]
 801ee86:	9009      	str	r0, [sp, #36]	; 0x24
 801ee88:	930d      	str	r3, [sp, #52]	; 0x34
 801ee8a:	480b      	ldr	r0, [pc, #44]	; (801eeb8 <siscanf+0x54>)
 801ee8c:	9a01      	ldr	r2, [sp, #4]
 801ee8e:	6800      	ldr	r0, [r0, #0]
 801ee90:	9403      	str	r4, [sp, #12]
 801ee92:	2300      	movs	r3, #0
 801ee94:	9311      	str	r3, [sp, #68]	; 0x44
 801ee96:	9316      	str	r3, [sp, #88]	; 0x58
 801ee98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ee9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801eea0:	a904      	add	r1, sp, #16
 801eea2:	4623      	mov	r3, r4
 801eea4:	f001 ff9a 	bl	8020ddc <__ssvfiscanf_r>
 801eea8:	b01f      	add	sp, #124	; 0x7c
 801eeaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eeae:	b003      	add	sp, #12
 801eeb0:	4770      	bx	lr
 801eeb2:	bf00      	nop
 801eeb4:	0801eedf 	.word	0x0801eedf
 801eeb8:	20000064 	.word	0x20000064

0801eebc <__sread>:
 801eebc:	b510      	push	{r4, lr}
 801eebe:	460c      	mov	r4, r1
 801eec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eec4:	f002 fba8 	bl	8021618 <_read_r>
 801eec8:	2800      	cmp	r0, #0
 801eeca:	bfab      	itete	ge
 801eecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801eece:	89a3      	ldrhlt	r3, [r4, #12]
 801eed0:	181b      	addge	r3, r3, r0
 801eed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801eed6:	bfac      	ite	ge
 801eed8:	6563      	strge	r3, [r4, #84]	; 0x54
 801eeda:	81a3      	strhlt	r3, [r4, #12]
 801eedc:	bd10      	pop	{r4, pc}

0801eede <__seofread>:
 801eede:	2000      	movs	r0, #0
 801eee0:	4770      	bx	lr

0801eee2 <__swrite>:
 801eee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eee6:	461f      	mov	r7, r3
 801eee8:	898b      	ldrh	r3, [r1, #12]
 801eeea:	05db      	lsls	r3, r3, #23
 801eeec:	4605      	mov	r5, r0
 801eeee:	460c      	mov	r4, r1
 801eef0:	4616      	mov	r6, r2
 801eef2:	d505      	bpl.n	801ef00 <__swrite+0x1e>
 801eef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eef8:	2302      	movs	r3, #2
 801eefa:	2200      	movs	r2, #0
 801eefc:	f001 f9aa 	bl	8020254 <_lseek_r>
 801ef00:	89a3      	ldrh	r3, [r4, #12]
 801ef02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ef06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ef0a:	81a3      	strh	r3, [r4, #12]
 801ef0c:	4632      	mov	r2, r6
 801ef0e:	463b      	mov	r3, r7
 801ef10:	4628      	mov	r0, r5
 801ef12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ef16:	f000 b999 	b.w	801f24c <_write_r>

0801ef1a <__sseek>:
 801ef1a:	b510      	push	{r4, lr}
 801ef1c:	460c      	mov	r4, r1
 801ef1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef22:	f001 f997 	bl	8020254 <_lseek_r>
 801ef26:	1c43      	adds	r3, r0, #1
 801ef28:	89a3      	ldrh	r3, [r4, #12]
 801ef2a:	bf15      	itete	ne
 801ef2c:	6560      	strne	r0, [r4, #84]	; 0x54
 801ef2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ef32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ef36:	81a3      	strheq	r3, [r4, #12]
 801ef38:	bf18      	it	ne
 801ef3a:	81a3      	strhne	r3, [r4, #12]
 801ef3c:	bd10      	pop	{r4, pc}

0801ef3e <__sclose>:
 801ef3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef42:	f000 ba21 	b.w	801f388 <_close_r>

0801ef46 <strncat>:
 801ef46:	b530      	push	{r4, r5, lr}
 801ef48:	4604      	mov	r4, r0
 801ef4a:	7825      	ldrb	r5, [r4, #0]
 801ef4c:	4623      	mov	r3, r4
 801ef4e:	3401      	adds	r4, #1
 801ef50:	2d00      	cmp	r5, #0
 801ef52:	d1fa      	bne.n	801ef4a <strncat+0x4>
 801ef54:	3a01      	subs	r2, #1
 801ef56:	d304      	bcc.n	801ef62 <strncat+0x1c>
 801ef58:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ef5c:	f803 4b01 	strb.w	r4, [r3], #1
 801ef60:	b904      	cbnz	r4, 801ef64 <strncat+0x1e>
 801ef62:	bd30      	pop	{r4, r5, pc}
 801ef64:	2a00      	cmp	r2, #0
 801ef66:	d1f5      	bne.n	801ef54 <strncat+0xe>
 801ef68:	701a      	strb	r2, [r3, #0]
 801ef6a:	e7f3      	b.n	801ef54 <strncat+0xe>

0801ef6c <strncmp>:
 801ef6c:	b510      	push	{r4, lr}
 801ef6e:	b16a      	cbz	r2, 801ef8c <strncmp+0x20>
 801ef70:	3901      	subs	r1, #1
 801ef72:	1884      	adds	r4, r0, r2
 801ef74:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ef78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ef7c:	4293      	cmp	r3, r2
 801ef7e:	d103      	bne.n	801ef88 <strncmp+0x1c>
 801ef80:	42a0      	cmp	r0, r4
 801ef82:	d001      	beq.n	801ef88 <strncmp+0x1c>
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	d1f5      	bne.n	801ef74 <strncmp+0x8>
 801ef88:	1a98      	subs	r0, r3, r2
 801ef8a:	bd10      	pop	{r4, pc}
 801ef8c:	4610      	mov	r0, r2
 801ef8e:	e7fc      	b.n	801ef8a <strncmp+0x1e>

0801ef90 <strncpy>:
 801ef90:	b510      	push	{r4, lr}
 801ef92:	3901      	subs	r1, #1
 801ef94:	4603      	mov	r3, r0
 801ef96:	b132      	cbz	r2, 801efa6 <strncpy+0x16>
 801ef98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ef9c:	f803 4b01 	strb.w	r4, [r3], #1
 801efa0:	3a01      	subs	r2, #1
 801efa2:	2c00      	cmp	r4, #0
 801efa4:	d1f7      	bne.n	801ef96 <strncpy+0x6>
 801efa6:	441a      	add	r2, r3
 801efa8:	2100      	movs	r1, #0
 801efaa:	4293      	cmp	r3, r2
 801efac:	d100      	bne.n	801efb0 <strncpy+0x20>
 801efae:	bd10      	pop	{r4, pc}
 801efb0:	f803 1b01 	strb.w	r1, [r3], #1
 801efb4:	e7f9      	b.n	801efaa <strncpy+0x1a>

0801efb6 <strstr>:
 801efb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801efb8:	780c      	ldrb	r4, [r1, #0]
 801efba:	b164      	cbz	r4, 801efd6 <strstr+0x20>
 801efbc:	4603      	mov	r3, r0
 801efbe:	781a      	ldrb	r2, [r3, #0]
 801efc0:	4618      	mov	r0, r3
 801efc2:	1c5e      	adds	r6, r3, #1
 801efc4:	b90a      	cbnz	r2, 801efca <strstr+0x14>
 801efc6:	4610      	mov	r0, r2
 801efc8:	e005      	b.n	801efd6 <strstr+0x20>
 801efca:	4294      	cmp	r4, r2
 801efcc:	d108      	bne.n	801efe0 <strstr+0x2a>
 801efce:	460d      	mov	r5, r1
 801efd0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801efd4:	b902      	cbnz	r2, 801efd8 <strstr+0x22>
 801efd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efd8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801efdc:	4297      	cmp	r7, r2
 801efde:	d0f7      	beq.n	801efd0 <strstr+0x1a>
 801efe0:	4633      	mov	r3, r6
 801efe2:	e7ec      	b.n	801efbe <strstr+0x8>

0801efe4 <strtok>:
 801efe4:	4b16      	ldr	r3, [pc, #88]	; (801f040 <strtok+0x5c>)
 801efe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801efe8:	681e      	ldr	r6, [r3, #0]
 801efea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801efec:	4605      	mov	r5, r0
 801efee:	b9fc      	cbnz	r4, 801f030 <strtok+0x4c>
 801eff0:	2050      	movs	r0, #80	; 0x50
 801eff2:	9101      	str	r1, [sp, #4]
 801eff4:	f7ff f838 	bl	801e068 <malloc>
 801eff8:	9901      	ldr	r1, [sp, #4]
 801effa:	65b0      	str	r0, [r6, #88]	; 0x58
 801effc:	4602      	mov	r2, r0
 801effe:	b920      	cbnz	r0, 801f00a <strtok+0x26>
 801f000:	4b10      	ldr	r3, [pc, #64]	; (801f044 <strtok+0x60>)
 801f002:	4811      	ldr	r0, [pc, #68]	; (801f048 <strtok+0x64>)
 801f004:	2157      	movs	r1, #87	; 0x57
 801f006:	f000 f9a1 	bl	801f34c <__assert_func>
 801f00a:	e9c0 4400 	strd	r4, r4, [r0]
 801f00e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801f012:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801f016:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801f01a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801f01e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801f022:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801f026:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801f02a:	6184      	str	r4, [r0, #24]
 801f02c:	7704      	strb	r4, [r0, #28]
 801f02e:	6244      	str	r4, [r0, #36]	; 0x24
 801f030:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801f032:	2301      	movs	r3, #1
 801f034:	4628      	mov	r0, r5
 801f036:	b002      	add	sp, #8
 801f038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f03c:	f000 b806 	b.w	801f04c <__strtok_r>
 801f040:	20000064 	.word	0x20000064
 801f044:	08026956 	.word	0x08026956
 801f048:	080269cc 	.word	0x080269cc

0801f04c <__strtok_r>:
 801f04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f04e:	b908      	cbnz	r0, 801f054 <__strtok_r+0x8>
 801f050:	6810      	ldr	r0, [r2, #0]
 801f052:	b188      	cbz	r0, 801f078 <__strtok_r+0x2c>
 801f054:	4604      	mov	r4, r0
 801f056:	4620      	mov	r0, r4
 801f058:	f814 5b01 	ldrb.w	r5, [r4], #1
 801f05c:	460f      	mov	r7, r1
 801f05e:	f817 6b01 	ldrb.w	r6, [r7], #1
 801f062:	b91e      	cbnz	r6, 801f06c <__strtok_r+0x20>
 801f064:	b965      	cbnz	r5, 801f080 <__strtok_r+0x34>
 801f066:	6015      	str	r5, [r2, #0]
 801f068:	4628      	mov	r0, r5
 801f06a:	e005      	b.n	801f078 <__strtok_r+0x2c>
 801f06c:	42b5      	cmp	r5, r6
 801f06e:	d1f6      	bne.n	801f05e <__strtok_r+0x12>
 801f070:	2b00      	cmp	r3, #0
 801f072:	d1f0      	bne.n	801f056 <__strtok_r+0xa>
 801f074:	6014      	str	r4, [r2, #0]
 801f076:	7003      	strb	r3, [r0, #0]
 801f078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f07a:	461c      	mov	r4, r3
 801f07c:	e00c      	b.n	801f098 <__strtok_r+0x4c>
 801f07e:	b915      	cbnz	r5, 801f086 <__strtok_r+0x3a>
 801f080:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f084:	460e      	mov	r6, r1
 801f086:	f816 5b01 	ldrb.w	r5, [r6], #1
 801f08a:	42ab      	cmp	r3, r5
 801f08c:	d1f7      	bne.n	801f07e <__strtok_r+0x32>
 801f08e:	2b00      	cmp	r3, #0
 801f090:	d0f3      	beq.n	801f07a <__strtok_r+0x2e>
 801f092:	2300      	movs	r3, #0
 801f094:	f804 3c01 	strb.w	r3, [r4, #-1]
 801f098:	6014      	str	r4, [r2, #0]
 801f09a:	e7ed      	b.n	801f078 <__strtok_r+0x2c>

0801f09c <_strtol_l.isra.0>:
 801f09c:	2b01      	cmp	r3, #1
 801f09e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0a2:	d001      	beq.n	801f0a8 <_strtol_l.isra.0+0xc>
 801f0a4:	2b24      	cmp	r3, #36	; 0x24
 801f0a6:	d906      	bls.n	801f0b6 <_strtol_l.isra.0+0x1a>
 801f0a8:	f000 fff6 	bl	8020098 <__errno>
 801f0ac:	2316      	movs	r3, #22
 801f0ae:	6003      	str	r3, [r0, #0]
 801f0b0:	2000      	movs	r0, #0
 801f0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f0b6:	4f3a      	ldr	r7, [pc, #232]	; (801f1a0 <_strtol_l.isra.0+0x104>)
 801f0b8:	468e      	mov	lr, r1
 801f0ba:	4676      	mov	r6, lr
 801f0bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f0c0:	5de5      	ldrb	r5, [r4, r7]
 801f0c2:	f015 0508 	ands.w	r5, r5, #8
 801f0c6:	d1f8      	bne.n	801f0ba <_strtol_l.isra.0+0x1e>
 801f0c8:	2c2d      	cmp	r4, #45	; 0x2d
 801f0ca:	d134      	bne.n	801f136 <_strtol_l.isra.0+0x9a>
 801f0cc:	f89e 4000 	ldrb.w	r4, [lr]
 801f0d0:	f04f 0801 	mov.w	r8, #1
 801f0d4:	f106 0e02 	add.w	lr, r6, #2
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d05c      	beq.n	801f196 <_strtol_l.isra.0+0xfa>
 801f0dc:	2b10      	cmp	r3, #16
 801f0de:	d10c      	bne.n	801f0fa <_strtol_l.isra.0+0x5e>
 801f0e0:	2c30      	cmp	r4, #48	; 0x30
 801f0e2:	d10a      	bne.n	801f0fa <_strtol_l.isra.0+0x5e>
 801f0e4:	f89e 4000 	ldrb.w	r4, [lr]
 801f0e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f0ec:	2c58      	cmp	r4, #88	; 0x58
 801f0ee:	d14d      	bne.n	801f18c <_strtol_l.isra.0+0xf0>
 801f0f0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801f0f4:	2310      	movs	r3, #16
 801f0f6:	f10e 0e02 	add.w	lr, lr, #2
 801f0fa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801f0fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f102:	2600      	movs	r6, #0
 801f104:	fbbc f9f3 	udiv	r9, ip, r3
 801f108:	4635      	mov	r5, r6
 801f10a:	fb03 ca19 	mls	sl, r3, r9, ip
 801f10e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801f112:	2f09      	cmp	r7, #9
 801f114:	d818      	bhi.n	801f148 <_strtol_l.isra.0+0xac>
 801f116:	463c      	mov	r4, r7
 801f118:	42a3      	cmp	r3, r4
 801f11a:	dd24      	ble.n	801f166 <_strtol_l.isra.0+0xca>
 801f11c:	2e00      	cmp	r6, #0
 801f11e:	db1f      	blt.n	801f160 <_strtol_l.isra.0+0xc4>
 801f120:	45a9      	cmp	r9, r5
 801f122:	d31d      	bcc.n	801f160 <_strtol_l.isra.0+0xc4>
 801f124:	d101      	bne.n	801f12a <_strtol_l.isra.0+0x8e>
 801f126:	45a2      	cmp	sl, r4
 801f128:	db1a      	blt.n	801f160 <_strtol_l.isra.0+0xc4>
 801f12a:	fb05 4503 	mla	r5, r5, r3, r4
 801f12e:	2601      	movs	r6, #1
 801f130:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f134:	e7eb      	b.n	801f10e <_strtol_l.isra.0+0x72>
 801f136:	2c2b      	cmp	r4, #43	; 0x2b
 801f138:	bf08      	it	eq
 801f13a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801f13e:	46a8      	mov	r8, r5
 801f140:	bf08      	it	eq
 801f142:	f106 0e02 	addeq.w	lr, r6, #2
 801f146:	e7c7      	b.n	801f0d8 <_strtol_l.isra.0+0x3c>
 801f148:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801f14c:	2f19      	cmp	r7, #25
 801f14e:	d801      	bhi.n	801f154 <_strtol_l.isra.0+0xb8>
 801f150:	3c37      	subs	r4, #55	; 0x37
 801f152:	e7e1      	b.n	801f118 <_strtol_l.isra.0+0x7c>
 801f154:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801f158:	2f19      	cmp	r7, #25
 801f15a:	d804      	bhi.n	801f166 <_strtol_l.isra.0+0xca>
 801f15c:	3c57      	subs	r4, #87	; 0x57
 801f15e:	e7db      	b.n	801f118 <_strtol_l.isra.0+0x7c>
 801f160:	f04f 36ff 	mov.w	r6, #4294967295
 801f164:	e7e4      	b.n	801f130 <_strtol_l.isra.0+0x94>
 801f166:	2e00      	cmp	r6, #0
 801f168:	da05      	bge.n	801f176 <_strtol_l.isra.0+0xda>
 801f16a:	2322      	movs	r3, #34	; 0x22
 801f16c:	6003      	str	r3, [r0, #0]
 801f16e:	4665      	mov	r5, ip
 801f170:	b942      	cbnz	r2, 801f184 <_strtol_l.isra.0+0xe8>
 801f172:	4628      	mov	r0, r5
 801f174:	e79d      	b.n	801f0b2 <_strtol_l.isra.0+0x16>
 801f176:	f1b8 0f00 	cmp.w	r8, #0
 801f17a:	d000      	beq.n	801f17e <_strtol_l.isra.0+0xe2>
 801f17c:	426d      	negs	r5, r5
 801f17e:	2a00      	cmp	r2, #0
 801f180:	d0f7      	beq.n	801f172 <_strtol_l.isra.0+0xd6>
 801f182:	b10e      	cbz	r6, 801f188 <_strtol_l.isra.0+0xec>
 801f184:	f10e 31ff 	add.w	r1, lr, #4294967295
 801f188:	6011      	str	r1, [r2, #0]
 801f18a:	e7f2      	b.n	801f172 <_strtol_l.isra.0+0xd6>
 801f18c:	2430      	movs	r4, #48	; 0x30
 801f18e:	2b00      	cmp	r3, #0
 801f190:	d1b3      	bne.n	801f0fa <_strtol_l.isra.0+0x5e>
 801f192:	2308      	movs	r3, #8
 801f194:	e7b1      	b.n	801f0fa <_strtol_l.isra.0+0x5e>
 801f196:	2c30      	cmp	r4, #48	; 0x30
 801f198:	d0a4      	beq.n	801f0e4 <_strtol_l.isra.0+0x48>
 801f19a:	230a      	movs	r3, #10
 801f19c:	e7ad      	b.n	801f0fa <_strtol_l.isra.0+0x5e>
 801f19e:	bf00      	nop
 801f1a0:	080267bd 	.word	0x080267bd

0801f1a4 <_strtol_r>:
 801f1a4:	f7ff bf7a 	b.w	801f09c <_strtol_l.isra.0>

0801f1a8 <__swbuf_r>:
 801f1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1aa:	460e      	mov	r6, r1
 801f1ac:	4614      	mov	r4, r2
 801f1ae:	4605      	mov	r5, r0
 801f1b0:	b118      	cbz	r0, 801f1ba <__swbuf_r+0x12>
 801f1b2:	6983      	ldr	r3, [r0, #24]
 801f1b4:	b90b      	cbnz	r3, 801f1ba <__swbuf_r+0x12>
 801f1b6:	f7fe fe91 	bl	801dedc <__sinit>
 801f1ba:	4b21      	ldr	r3, [pc, #132]	; (801f240 <__swbuf_r+0x98>)
 801f1bc:	429c      	cmp	r4, r3
 801f1be:	d12b      	bne.n	801f218 <__swbuf_r+0x70>
 801f1c0:	686c      	ldr	r4, [r5, #4]
 801f1c2:	69a3      	ldr	r3, [r4, #24]
 801f1c4:	60a3      	str	r3, [r4, #8]
 801f1c6:	89a3      	ldrh	r3, [r4, #12]
 801f1c8:	071a      	lsls	r2, r3, #28
 801f1ca:	d52f      	bpl.n	801f22c <__swbuf_r+0x84>
 801f1cc:	6923      	ldr	r3, [r4, #16]
 801f1ce:	b36b      	cbz	r3, 801f22c <__swbuf_r+0x84>
 801f1d0:	6923      	ldr	r3, [r4, #16]
 801f1d2:	6820      	ldr	r0, [r4, #0]
 801f1d4:	1ac0      	subs	r0, r0, r3
 801f1d6:	6963      	ldr	r3, [r4, #20]
 801f1d8:	b2f6      	uxtb	r6, r6
 801f1da:	4283      	cmp	r3, r0
 801f1dc:	4637      	mov	r7, r6
 801f1de:	dc04      	bgt.n	801f1ea <__swbuf_r+0x42>
 801f1e0:	4621      	mov	r1, r4
 801f1e2:	4628      	mov	r0, r5
 801f1e4:	f000 ffe4 	bl	80201b0 <_fflush_r>
 801f1e8:	bb30      	cbnz	r0, 801f238 <__swbuf_r+0x90>
 801f1ea:	68a3      	ldr	r3, [r4, #8]
 801f1ec:	3b01      	subs	r3, #1
 801f1ee:	60a3      	str	r3, [r4, #8]
 801f1f0:	6823      	ldr	r3, [r4, #0]
 801f1f2:	1c5a      	adds	r2, r3, #1
 801f1f4:	6022      	str	r2, [r4, #0]
 801f1f6:	701e      	strb	r6, [r3, #0]
 801f1f8:	6963      	ldr	r3, [r4, #20]
 801f1fa:	3001      	adds	r0, #1
 801f1fc:	4283      	cmp	r3, r0
 801f1fe:	d004      	beq.n	801f20a <__swbuf_r+0x62>
 801f200:	89a3      	ldrh	r3, [r4, #12]
 801f202:	07db      	lsls	r3, r3, #31
 801f204:	d506      	bpl.n	801f214 <__swbuf_r+0x6c>
 801f206:	2e0a      	cmp	r6, #10
 801f208:	d104      	bne.n	801f214 <__swbuf_r+0x6c>
 801f20a:	4621      	mov	r1, r4
 801f20c:	4628      	mov	r0, r5
 801f20e:	f000 ffcf 	bl	80201b0 <_fflush_r>
 801f212:	b988      	cbnz	r0, 801f238 <__swbuf_r+0x90>
 801f214:	4638      	mov	r0, r7
 801f216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f218:	4b0a      	ldr	r3, [pc, #40]	; (801f244 <__swbuf_r+0x9c>)
 801f21a:	429c      	cmp	r4, r3
 801f21c:	d101      	bne.n	801f222 <__swbuf_r+0x7a>
 801f21e:	68ac      	ldr	r4, [r5, #8]
 801f220:	e7cf      	b.n	801f1c2 <__swbuf_r+0x1a>
 801f222:	4b09      	ldr	r3, [pc, #36]	; (801f248 <__swbuf_r+0xa0>)
 801f224:	429c      	cmp	r4, r3
 801f226:	bf08      	it	eq
 801f228:	68ec      	ldreq	r4, [r5, #12]
 801f22a:	e7ca      	b.n	801f1c2 <__swbuf_r+0x1a>
 801f22c:	4621      	mov	r1, r4
 801f22e:	4628      	mov	r0, r5
 801f230:	f000 f81e 	bl	801f270 <__swsetup_r>
 801f234:	2800      	cmp	r0, #0
 801f236:	d0cb      	beq.n	801f1d0 <__swbuf_r+0x28>
 801f238:	f04f 37ff 	mov.w	r7, #4294967295
 801f23c:	e7ea      	b.n	801f214 <__swbuf_r+0x6c>
 801f23e:	bf00      	nop
 801f240:	080268e0 	.word	0x080268e0
 801f244:	08026900 	.word	0x08026900
 801f248:	080268c0 	.word	0x080268c0

0801f24c <_write_r>:
 801f24c:	b538      	push	{r3, r4, r5, lr}
 801f24e:	4d07      	ldr	r5, [pc, #28]	; (801f26c <_write_r+0x20>)
 801f250:	4604      	mov	r4, r0
 801f252:	4608      	mov	r0, r1
 801f254:	4611      	mov	r1, r2
 801f256:	2200      	movs	r2, #0
 801f258:	602a      	str	r2, [r5, #0]
 801f25a:	461a      	mov	r2, r3
 801f25c:	f7e3 f8d1 	bl	8002402 <_write>
 801f260:	1c43      	adds	r3, r0, #1
 801f262:	d102      	bne.n	801f26a <_write_r+0x1e>
 801f264:	682b      	ldr	r3, [r5, #0]
 801f266:	b103      	cbz	r3, 801f26a <_write_r+0x1e>
 801f268:	6023      	str	r3, [r4, #0]
 801f26a:	bd38      	pop	{r3, r4, r5, pc}
 801f26c:	2001b118 	.word	0x2001b118

0801f270 <__swsetup_r>:
 801f270:	4b32      	ldr	r3, [pc, #200]	; (801f33c <__swsetup_r+0xcc>)
 801f272:	b570      	push	{r4, r5, r6, lr}
 801f274:	681d      	ldr	r5, [r3, #0]
 801f276:	4606      	mov	r6, r0
 801f278:	460c      	mov	r4, r1
 801f27a:	b125      	cbz	r5, 801f286 <__swsetup_r+0x16>
 801f27c:	69ab      	ldr	r3, [r5, #24]
 801f27e:	b913      	cbnz	r3, 801f286 <__swsetup_r+0x16>
 801f280:	4628      	mov	r0, r5
 801f282:	f7fe fe2b 	bl	801dedc <__sinit>
 801f286:	4b2e      	ldr	r3, [pc, #184]	; (801f340 <__swsetup_r+0xd0>)
 801f288:	429c      	cmp	r4, r3
 801f28a:	d10f      	bne.n	801f2ac <__swsetup_r+0x3c>
 801f28c:	686c      	ldr	r4, [r5, #4]
 801f28e:	89a3      	ldrh	r3, [r4, #12]
 801f290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f294:	0719      	lsls	r1, r3, #28
 801f296:	d42c      	bmi.n	801f2f2 <__swsetup_r+0x82>
 801f298:	06dd      	lsls	r5, r3, #27
 801f29a:	d411      	bmi.n	801f2c0 <__swsetup_r+0x50>
 801f29c:	2309      	movs	r3, #9
 801f29e:	6033      	str	r3, [r6, #0]
 801f2a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f2a4:	81a3      	strh	r3, [r4, #12]
 801f2a6:	f04f 30ff 	mov.w	r0, #4294967295
 801f2aa:	e03e      	b.n	801f32a <__swsetup_r+0xba>
 801f2ac:	4b25      	ldr	r3, [pc, #148]	; (801f344 <__swsetup_r+0xd4>)
 801f2ae:	429c      	cmp	r4, r3
 801f2b0:	d101      	bne.n	801f2b6 <__swsetup_r+0x46>
 801f2b2:	68ac      	ldr	r4, [r5, #8]
 801f2b4:	e7eb      	b.n	801f28e <__swsetup_r+0x1e>
 801f2b6:	4b24      	ldr	r3, [pc, #144]	; (801f348 <__swsetup_r+0xd8>)
 801f2b8:	429c      	cmp	r4, r3
 801f2ba:	bf08      	it	eq
 801f2bc:	68ec      	ldreq	r4, [r5, #12]
 801f2be:	e7e6      	b.n	801f28e <__swsetup_r+0x1e>
 801f2c0:	0758      	lsls	r0, r3, #29
 801f2c2:	d512      	bpl.n	801f2ea <__swsetup_r+0x7a>
 801f2c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f2c6:	b141      	cbz	r1, 801f2da <__swsetup_r+0x6a>
 801f2c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f2cc:	4299      	cmp	r1, r3
 801f2ce:	d002      	beq.n	801f2d6 <__swsetup_r+0x66>
 801f2d0:	4630      	mov	r0, r6
 801f2d2:	f7fe ff17 	bl	801e104 <_free_r>
 801f2d6:	2300      	movs	r3, #0
 801f2d8:	6363      	str	r3, [r4, #52]	; 0x34
 801f2da:	89a3      	ldrh	r3, [r4, #12]
 801f2dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f2e0:	81a3      	strh	r3, [r4, #12]
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	6063      	str	r3, [r4, #4]
 801f2e6:	6923      	ldr	r3, [r4, #16]
 801f2e8:	6023      	str	r3, [r4, #0]
 801f2ea:	89a3      	ldrh	r3, [r4, #12]
 801f2ec:	f043 0308 	orr.w	r3, r3, #8
 801f2f0:	81a3      	strh	r3, [r4, #12]
 801f2f2:	6923      	ldr	r3, [r4, #16]
 801f2f4:	b94b      	cbnz	r3, 801f30a <__swsetup_r+0x9a>
 801f2f6:	89a3      	ldrh	r3, [r4, #12]
 801f2f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f2fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f300:	d003      	beq.n	801f30a <__swsetup_r+0x9a>
 801f302:	4621      	mov	r1, r4
 801f304:	4630      	mov	r0, r6
 801f306:	f000 ffdb 	bl	80202c0 <__smakebuf_r>
 801f30a:	89a0      	ldrh	r0, [r4, #12]
 801f30c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f310:	f010 0301 	ands.w	r3, r0, #1
 801f314:	d00a      	beq.n	801f32c <__swsetup_r+0xbc>
 801f316:	2300      	movs	r3, #0
 801f318:	60a3      	str	r3, [r4, #8]
 801f31a:	6963      	ldr	r3, [r4, #20]
 801f31c:	425b      	negs	r3, r3
 801f31e:	61a3      	str	r3, [r4, #24]
 801f320:	6923      	ldr	r3, [r4, #16]
 801f322:	b943      	cbnz	r3, 801f336 <__swsetup_r+0xc6>
 801f324:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f328:	d1ba      	bne.n	801f2a0 <__swsetup_r+0x30>
 801f32a:	bd70      	pop	{r4, r5, r6, pc}
 801f32c:	0781      	lsls	r1, r0, #30
 801f32e:	bf58      	it	pl
 801f330:	6963      	ldrpl	r3, [r4, #20]
 801f332:	60a3      	str	r3, [r4, #8]
 801f334:	e7f4      	b.n	801f320 <__swsetup_r+0xb0>
 801f336:	2000      	movs	r0, #0
 801f338:	e7f7      	b.n	801f32a <__swsetup_r+0xba>
 801f33a:	bf00      	nop
 801f33c:	20000064 	.word	0x20000064
 801f340:	080268e0 	.word	0x080268e0
 801f344:	08026900 	.word	0x08026900
 801f348:	080268c0 	.word	0x080268c0

0801f34c <__assert_func>:
 801f34c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f34e:	4614      	mov	r4, r2
 801f350:	461a      	mov	r2, r3
 801f352:	4b09      	ldr	r3, [pc, #36]	; (801f378 <__assert_func+0x2c>)
 801f354:	681b      	ldr	r3, [r3, #0]
 801f356:	4605      	mov	r5, r0
 801f358:	68d8      	ldr	r0, [r3, #12]
 801f35a:	b14c      	cbz	r4, 801f370 <__assert_func+0x24>
 801f35c:	4b07      	ldr	r3, [pc, #28]	; (801f37c <__assert_func+0x30>)
 801f35e:	9100      	str	r1, [sp, #0]
 801f360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f364:	4906      	ldr	r1, [pc, #24]	; (801f380 <__assert_func+0x34>)
 801f366:	462b      	mov	r3, r5
 801f368:	f000 ff5e 	bl	8020228 <fiprintf>
 801f36c:	f002 fa58 	bl	8021820 <abort>
 801f370:	4b04      	ldr	r3, [pc, #16]	; (801f384 <__assert_func+0x38>)
 801f372:	461c      	mov	r4, r3
 801f374:	e7f3      	b.n	801f35e <__assert_func+0x12>
 801f376:	bf00      	nop
 801f378:	20000064 	.word	0x20000064
 801f37c:	08026a2d 	.word	0x08026a2d
 801f380:	08026a3a 	.word	0x08026a3a
 801f384:	08026a68 	.word	0x08026a68

0801f388 <_close_r>:
 801f388:	b538      	push	{r3, r4, r5, lr}
 801f38a:	4d06      	ldr	r5, [pc, #24]	; (801f3a4 <_close_r+0x1c>)
 801f38c:	2300      	movs	r3, #0
 801f38e:	4604      	mov	r4, r0
 801f390:	4608      	mov	r0, r1
 801f392:	602b      	str	r3, [r5, #0]
 801f394:	f7e3 f851 	bl	800243a <_close>
 801f398:	1c43      	adds	r3, r0, #1
 801f39a:	d102      	bne.n	801f3a2 <_close_r+0x1a>
 801f39c:	682b      	ldr	r3, [r5, #0]
 801f39e:	b103      	cbz	r3, 801f3a2 <_close_r+0x1a>
 801f3a0:	6023      	str	r3, [r4, #0]
 801f3a2:	bd38      	pop	{r3, r4, r5, pc}
 801f3a4:	2001b118 	.word	0x2001b118

0801f3a8 <quorem>:
 801f3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3ac:	6903      	ldr	r3, [r0, #16]
 801f3ae:	690c      	ldr	r4, [r1, #16]
 801f3b0:	42a3      	cmp	r3, r4
 801f3b2:	4607      	mov	r7, r0
 801f3b4:	f2c0 8081 	blt.w	801f4ba <quorem+0x112>
 801f3b8:	3c01      	subs	r4, #1
 801f3ba:	f101 0814 	add.w	r8, r1, #20
 801f3be:	f100 0514 	add.w	r5, r0, #20
 801f3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f3c6:	9301      	str	r3, [sp, #4]
 801f3c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f3cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f3d0:	3301      	adds	r3, #1
 801f3d2:	429a      	cmp	r2, r3
 801f3d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801f3d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f3dc:	fbb2 f6f3 	udiv	r6, r2, r3
 801f3e0:	d331      	bcc.n	801f446 <quorem+0x9e>
 801f3e2:	f04f 0e00 	mov.w	lr, #0
 801f3e6:	4640      	mov	r0, r8
 801f3e8:	46ac      	mov	ip, r5
 801f3ea:	46f2      	mov	sl, lr
 801f3ec:	f850 2b04 	ldr.w	r2, [r0], #4
 801f3f0:	b293      	uxth	r3, r2
 801f3f2:	fb06 e303 	mla	r3, r6, r3, lr
 801f3f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801f3fa:	b29b      	uxth	r3, r3
 801f3fc:	ebaa 0303 	sub.w	r3, sl, r3
 801f400:	0c12      	lsrs	r2, r2, #16
 801f402:	f8dc a000 	ldr.w	sl, [ip]
 801f406:	fb06 e202 	mla	r2, r6, r2, lr
 801f40a:	fa13 f38a 	uxtah	r3, r3, sl
 801f40e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801f412:	fa1f fa82 	uxth.w	sl, r2
 801f416:	f8dc 2000 	ldr.w	r2, [ip]
 801f41a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801f41e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801f422:	b29b      	uxth	r3, r3
 801f424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f428:	4581      	cmp	r9, r0
 801f42a:	f84c 3b04 	str.w	r3, [ip], #4
 801f42e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801f432:	d2db      	bcs.n	801f3ec <quorem+0x44>
 801f434:	f855 300b 	ldr.w	r3, [r5, fp]
 801f438:	b92b      	cbnz	r3, 801f446 <quorem+0x9e>
 801f43a:	9b01      	ldr	r3, [sp, #4]
 801f43c:	3b04      	subs	r3, #4
 801f43e:	429d      	cmp	r5, r3
 801f440:	461a      	mov	r2, r3
 801f442:	d32e      	bcc.n	801f4a2 <quorem+0xfa>
 801f444:	613c      	str	r4, [r7, #16]
 801f446:	4638      	mov	r0, r7
 801f448:	f001 fa04 	bl	8020854 <__mcmp>
 801f44c:	2800      	cmp	r0, #0
 801f44e:	db24      	blt.n	801f49a <quorem+0xf2>
 801f450:	3601      	adds	r6, #1
 801f452:	4628      	mov	r0, r5
 801f454:	f04f 0c00 	mov.w	ip, #0
 801f458:	f858 2b04 	ldr.w	r2, [r8], #4
 801f45c:	f8d0 e000 	ldr.w	lr, [r0]
 801f460:	b293      	uxth	r3, r2
 801f462:	ebac 0303 	sub.w	r3, ip, r3
 801f466:	0c12      	lsrs	r2, r2, #16
 801f468:	fa13 f38e 	uxtah	r3, r3, lr
 801f46c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801f470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801f474:	b29b      	uxth	r3, r3
 801f476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f47a:	45c1      	cmp	r9, r8
 801f47c:	f840 3b04 	str.w	r3, [r0], #4
 801f480:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f484:	d2e8      	bcs.n	801f458 <quorem+0xb0>
 801f486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f48e:	b922      	cbnz	r2, 801f49a <quorem+0xf2>
 801f490:	3b04      	subs	r3, #4
 801f492:	429d      	cmp	r5, r3
 801f494:	461a      	mov	r2, r3
 801f496:	d30a      	bcc.n	801f4ae <quorem+0x106>
 801f498:	613c      	str	r4, [r7, #16]
 801f49a:	4630      	mov	r0, r6
 801f49c:	b003      	add	sp, #12
 801f49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4a2:	6812      	ldr	r2, [r2, #0]
 801f4a4:	3b04      	subs	r3, #4
 801f4a6:	2a00      	cmp	r2, #0
 801f4a8:	d1cc      	bne.n	801f444 <quorem+0x9c>
 801f4aa:	3c01      	subs	r4, #1
 801f4ac:	e7c7      	b.n	801f43e <quorem+0x96>
 801f4ae:	6812      	ldr	r2, [r2, #0]
 801f4b0:	3b04      	subs	r3, #4
 801f4b2:	2a00      	cmp	r2, #0
 801f4b4:	d1f0      	bne.n	801f498 <quorem+0xf0>
 801f4b6:	3c01      	subs	r4, #1
 801f4b8:	e7eb      	b.n	801f492 <quorem+0xea>
 801f4ba:	2000      	movs	r0, #0
 801f4bc:	e7ee      	b.n	801f49c <quorem+0xf4>
	...

0801f4c0 <_dtoa_r>:
 801f4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4c4:	ed2d 8b02 	vpush	{d8}
 801f4c8:	ec57 6b10 	vmov	r6, r7, d0
 801f4cc:	b095      	sub	sp, #84	; 0x54
 801f4ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801f4d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801f4d4:	9105      	str	r1, [sp, #20]
 801f4d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801f4da:	4604      	mov	r4, r0
 801f4dc:	9209      	str	r2, [sp, #36]	; 0x24
 801f4de:	930f      	str	r3, [sp, #60]	; 0x3c
 801f4e0:	b975      	cbnz	r5, 801f500 <_dtoa_r+0x40>
 801f4e2:	2010      	movs	r0, #16
 801f4e4:	f7fe fdc0 	bl	801e068 <malloc>
 801f4e8:	4602      	mov	r2, r0
 801f4ea:	6260      	str	r0, [r4, #36]	; 0x24
 801f4ec:	b920      	cbnz	r0, 801f4f8 <_dtoa_r+0x38>
 801f4ee:	4bb2      	ldr	r3, [pc, #712]	; (801f7b8 <_dtoa_r+0x2f8>)
 801f4f0:	21ea      	movs	r1, #234	; 0xea
 801f4f2:	48b2      	ldr	r0, [pc, #712]	; (801f7bc <_dtoa_r+0x2fc>)
 801f4f4:	f7ff ff2a 	bl	801f34c <__assert_func>
 801f4f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801f4fc:	6005      	str	r5, [r0, #0]
 801f4fe:	60c5      	str	r5, [r0, #12]
 801f500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f502:	6819      	ldr	r1, [r3, #0]
 801f504:	b151      	cbz	r1, 801f51c <_dtoa_r+0x5c>
 801f506:	685a      	ldr	r2, [r3, #4]
 801f508:	604a      	str	r2, [r1, #4]
 801f50a:	2301      	movs	r3, #1
 801f50c:	4093      	lsls	r3, r2
 801f50e:	608b      	str	r3, [r1, #8]
 801f510:	4620      	mov	r0, r4
 801f512:	f000 ff61 	bl	80203d8 <_Bfree>
 801f516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f518:	2200      	movs	r2, #0
 801f51a:	601a      	str	r2, [r3, #0]
 801f51c:	1e3b      	subs	r3, r7, #0
 801f51e:	bfb9      	ittee	lt
 801f520:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801f524:	9303      	strlt	r3, [sp, #12]
 801f526:	2300      	movge	r3, #0
 801f528:	f8c8 3000 	strge.w	r3, [r8]
 801f52c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801f530:	4ba3      	ldr	r3, [pc, #652]	; (801f7c0 <_dtoa_r+0x300>)
 801f532:	bfbc      	itt	lt
 801f534:	2201      	movlt	r2, #1
 801f536:	f8c8 2000 	strlt.w	r2, [r8]
 801f53a:	ea33 0309 	bics.w	r3, r3, r9
 801f53e:	d11b      	bne.n	801f578 <_dtoa_r+0xb8>
 801f540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f542:	f242 730f 	movw	r3, #9999	; 0x270f
 801f546:	6013      	str	r3, [r2, #0]
 801f548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f54c:	4333      	orrs	r3, r6
 801f54e:	f000 857a 	beq.w	8020046 <_dtoa_r+0xb86>
 801f552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f554:	b963      	cbnz	r3, 801f570 <_dtoa_r+0xb0>
 801f556:	4b9b      	ldr	r3, [pc, #620]	; (801f7c4 <_dtoa_r+0x304>)
 801f558:	e024      	b.n	801f5a4 <_dtoa_r+0xe4>
 801f55a:	4b9b      	ldr	r3, [pc, #620]	; (801f7c8 <_dtoa_r+0x308>)
 801f55c:	9300      	str	r3, [sp, #0]
 801f55e:	3308      	adds	r3, #8
 801f560:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f562:	6013      	str	r3, [r2, #0]
 801f564:	9800      	ldr	r0, [sp, #0]
 801f566:	b015      	add	sp, #84	; 0x54
 801f568:	ecbd 8b02 	vpop	{d8}
 801f56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f570:	4b94      	ldr	r3, [pc, #592]	; (801f7c4 <_dtoa_r+0x304>)
 801f572:	9300      	str	r3, [sp, #0]
 801f574:	3303      	adds	r3, #3
 801f576:	e7f3      	b.n	801f560 <_dtoa_r+0xa0>
 801f578:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f57c:	2200      	movs	r2, #0
 801f57e:	ec51 0b17 	vmov	r0, r1, d7
 801f582:	2300      	movs	r3, #0
 801f584:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801f588:	f7e1 fa9e 	bl	8000ac8 <__aeabi_dcmpeq>
 801f58c:	4680      	mov	r8, r0
 801f58e:	b158      	cbz	r0, 801f5a8 <_dtoa_r+0xe8>
 801f590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f592:	2301      	movs	r3, #1
 801f594:	6013      	str	r3, [r2, #0]
 801f596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f598:	2b00      	cmp	r3, #0
 801f59a:	f000 8551 	beq.w	8020040 <_dtoa_r+0xb80>
 801f59e:	488b      	ldr	r0, [pc, #556]	; (801f7cc <_dtoa_r+0x30c>)
 801f5a0:	6018      	str	r0, [r3, #0]
 801f5a2:	1e43      	subs	r3, r0, #1
 801f5a4:	9300      	str	r3, [sp, #0]
 801f5a6:	e7dd      	b.n	801f564 <_dtoa_r+0xa4>
 801f5a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801f5ac:	aa12      	add	r2, sp, #72	; 0x48
 801f5ae:	a913      	add	r1, sp, #76	; 0x4c
 801f5b0:	4620      	mov	r0, r4
 801f5b2:	f001 f9f3 	bl	802099c <__d2b>
 801f5b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f5ba:	4683      	mov	fp, r0
 801f5bc:	2d00      	cmp	r5, #0
 801f5be:	d07c      	beq.n	801f6ba <_dtoa_r+0x1fa>
 801f5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801f5c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f5ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801f5ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801f5d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801f5d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801f5da:	4b7d      	ldr	r3, [pc, #500]	; (801f7d0 <_dtoa_r+0x310>)
 801f5dc:	2200      	movs	r2, #0
 801f5de:	4630      	mov	r0, r6
 801f5e0:	4639      	mov	r1, r7
 801f5e2:	f7e0 fe51 	bl	8000288 <__aeabi_dsub>
 801f5e6:	a36e      	add	r3, pc, #440	; (adr r3, 801f7a0 <_dtoa_r+0x2e0>)
 801f5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5ec:	f7e1 f804 	bl	80005f8 <__aeabi_dmul>
 801f5f0:	a36d      	add	r3, pc, #436	; (adr r3, 801f7a8 <_dtoa_r+0x2e8>)
 801f5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5f6:	f7e0 fe49 	bl	800028c <__adddf3>
 801f5fa:	4606      	mov	r6, r0
 801f5fc:	4628      	mov	r0, r5
 801f5fe:	460f      	mov	r7, r1
 801f600:	f7e0 ff90 	bl	8000524 <__aeabi_i2d>
 801f604:	a36a      	add	r3, pc, #424	; (adr r3, 801f7b0 <_dtoa_r+0x2f0>)
 801f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f60a:	f7e0 fff5 	bl	80005f8 <__aeabi_dmul>
 801f60e:	4602      	mov	r2, r0
 801f610:	460b      	mov	r3, r1
 801f612:	4630      	mov	r0, r6
 801f614:	4639      	mov	r1, r7
 801f616:	f7e0 fe39 	bl	800028c <__adddf3>
 801f61a:	4606      	mov	r6, r0
 801f61c:	460f      	mov	r7, r1
 801f61e:	f7e1 fa9b 	bl	8000b58 <__aeabi_d2iz>
 801f622:	2200      	movs	r2, #0
 801f624:	4682      	mov	sl, r0
 801f626:	2300      	movs	r3, #0
 801f628:	4630      	mov	r0, r6
 801f62a:	4639      	mov	r1, r7
 801f62c:	f7e1 fa56 	bl	8000adc <__aeabi_dcmplt>
 801f630:	b148      	cbz	r0, 801f646 <_dtoa_r+0x186>
 801f632:	4650      	mov	r0, sl
 801f634:	f7e0 ff76 	bl	8000524 <__aeabi_i2d>
 801f638:	4632      	mov	r2, r6
 801f63a:	463b      	mov	r3, r7
 801f63c:	f7e1 fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 801f640:	b908      	cbnz	r0, 801f646 <_dtoa_r+0x186>
 801f642:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f646:	f1ba 0f16 	cmp.w	sl, #22
 801f64a:	d854      	bhi.n	801f6f6 <_dtoa_r+0x236>
 801f64c:	4b61      	ldr	r3, [pc, #388]	; (801f7d4 <_dtoa_r+0x314>)
 801f64e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f652:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f656:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f65a:	f7e1 fa3f 	bl	8000adc <__aeabi_dcmplt>
 801f65e:	2800      	cmp	r0, #0
 801f660:	d04b      	beq.n	801f6fa <_dtoa_r+0x23a>
 801f662:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f666:	2300      	movs	r3, #0
 801f668:	930e      	str	r3, [sp, #56]	; 0x38
 801f66a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f66c:	1b5d      	subs	r5, r3, r5
 801f66e:	1e6b      	subs	r3, r5, #1
 801f670:	9304      	str	r3, [sp, #16]
 801f672:	bf43      	ittte	mi
 801f674:	2300      	movmi	r3, #0
 801f676:	f1c5 0801 	rsbmi	r8, r5, #1
 801f67a:	9304      	strmi	r3, [sp, #16]
 801f67c:	f04f 0800 	movpl.w	r8, #0
 801f680:	f1ba 0f00 	cmp.w	sl, #0
 801f684:	db3b      	blt.n	801f6fe <_dtoa_r+0x23e>
 801f686:	9b04      	ldr	r3, [sp, #16]
 801f688:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801f68c:	4453      	add	r3, sl
 801f68e:	9304      	str	r3, [sp, #16]
 801f690:	2300      	movs	r3, #0
 801f692:	9306      	str	r3, [sp, #24]
 801f694:	9b05      	ldr	r3, [sp, #20]
 801f696:	2b09      	cmp	r3, #9
 801f698:	d869      	bhi.n	801f76e <_dtoa_r+0x2ae>
 801f69a:	2b05      	cmp	r3, #5
 801f69c:	bfc4      	itt	gt
 801f69e:	3b04      	subgt	r3, #4
 801f6a0:	9305      	strgt	r3, [sp, #20]
 801f6a2:	9b05      	ldr	r3, [sp, #20]
 801f6a4:	f1a3 0302 	sub.w	r3, r3, #2
 801f6a8:	bfcc      	ite	gt
 801f6aa:	2500      	movgt	r5, #0
 801f6ac:	2501      	movle	r5, #1
 801f6ae:	2b03      	cmp	r3, #3
 801f6b0:	d869      	bhi.n	801f786 <_dtoa_r+0x2c6>
 801f6b2:	e8df f003 	tbb	[pc, r3]
 801f6b6:	4e2c      	.short	0x4e2c
 801f6b8:	5a4c      	.short	0x5a4c
 801f6ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801f6be:	441d      	add	r5, r3
 801f6c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801f6c4:	2b20      	cmp	r3, #32
 801f6c6:	bfc1      	itttt	gt
 801f6c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801f6cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801f6d0:	fa09 f303 	lslgt.w	r3, r9, r3
 801f6d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 801f6d8:	bfda      	itte	le
 801f6da:	f1c3 0320 	rsble	r3, r3, #32
 801f6de:	fa06 f003 	lslle.w	r0, r6, r3
 801f6e2:	4318      	orrgt	r0, r3
 801f6e4:	f7e0 ff0e 	bl	8000504 <__aeabi_ui2d>
 801f6e8:	2301      	movs	r3, #1
 801f6ea:	4606      	mov	r6, r0
 801f6ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801f6f0:	3d01      	subs	r5, #1
 801f6f2:	9310      	str	r3, [sp, #64]	; 0x40
 801f6f4:	e771      	b.n	801f5da <_dtoa_r+0x11a>
 801f6f6:	2301      	movs	r3, #1
 801f6f8:	e7b6      	b.n	801f668 <_dtoa_r+0x1a8>
 801f6fa:	900e      	str	r0, [sp, #56]	; 0x38
 801f6fc:	e7b5      	b.n	801f66a <_dtoa_r+0x1aa>
 801f6fe:	f1ca 0300 	rsb	r3, sl, #0
 801f702:	9306      	str	r3, [sp, #24]
 801f704:	2300      	movs	r3, #0
 801f706:	eba8 080a 	sub.w	r8, r8, sl
 801f70a:	930d      	str	r3, [sp, #52]	; 0x34
 801f70c:	e7c2      	b.n	801f694 <_dtoa_r+0x1d4>
 801f70e:	2300      	movs	r3, #0
 801f710:	9308      	str	r3, [sp, #32]
 801f712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f714:	2b00      	cmp	r3, #0
 801f716:	dc39      	bgt.n	801f78c <_dtoa_r+0x2cc>
 801f718:	f04f 0901 	mov.w	r9, #1
 801f71c:	f8cd 9004 	str.w	r9, [sp, #4]
 801f720:	464b      	mov	r3, r9
 801f722:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f726:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f728:	2200      	movs	r2, #0
 801f72a:	6042      	str	r2, [r0, #4]
 801f72c:	2204      	movs	r2, #4
 801f72e:	f102 0614 	add.w	r6, r2, #20
 801f732:	429e      	cmp	r6, r3
 801f734:	6841      	ldr	r1, [r0, #4]
 801f736:	d92f      	bls.n	801f798 <_dtoa_r+0x2d8>
 801f738:	4620      	mov	r0, r4
 801f73a:	f000 fe0d 	bl	8020358 <_Balloc>
 801f73e:	9000      	str	r0, [sp, #0]
 801f740:	2800      	cmp	r0, #0
 801f742:	d14b      	bne.n	801f7dc <_dtoa_r+0x31c>
 801f744:	4b24      	ldr	r3, [pc, #144]	; (801f7d8 <_dtoa_r+0x318>)
 801f746:	4602      	mov	r2, r0
 801f748:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f74c:	e6d1      	b.n	801f4f2 <_dtoa_r+0x32>
 801f74e:	2301      	movs	r3, #1
 801f750:	e7de      	b.n	801f710 <_dtoa_r+0x250>
 801f752:	2300      	movs	r3, #0
 801f754:	9308      	str	r3, [sp, #32]
 801f756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f758:	eb0a 0903 	add.w	r9, sl, r3
 801f75c:	f109 0301 	add.w	r3, r9, #1
 801f760:	2b01      	cmp	r3, #1
 801f762:	9301      	str	r3, [sp, #4]
 801f764:	bfb8      	it	lt
 801f766:	2301      	movlt	r3, #1
 801f768:	e7dd      	b.n	801f726 <_dtoa_r+0x266>
 801f76a:	2301      	movs	r3, #1
 801f76c:	e7f2      	b.n	801f754 <_dtoa_r+0x294>
 801f76e:	2501      	movs	r5, #1
 801f770:	2300      	movs	r3, #0
 801f772:	9305      	str	r3, [sp, #20]
 801f774:	9508      	str	r5, [sp, #32]
 801f776:	f04f 39ff 	mov.w	r9, #4294967295
 801f77a:	2200      	movs	r2, #0
 801f77c:	f8cd 9004 	str.w	r9, [sp, #4]
 801f780:	2312      	movs	r3, #18
 801f782:	9209      	str	r2, [sp, #36]	; 0x24
 801f784:	e7cf      	b.n	801f726 <_dtoa_r+0x266>
 801f786:	2301      	movs	r3, #1
 801f788:	9308      	str	r3, [sp, #32]
 801f78a:	e7f4      	b.n	801f776 <_dtoa_r+0x2b6>
 801f78c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f790:	f8cd 9004 	str.w	r9, [sp, #4]
 801f794:	464b      	mov	r3, r9
 801f796:	e7c6      	b.n	801f726 <_dtoa_r+0x266>
 801f798:	3101      	adds	r1, #1
 801f79a:	6041      	str	r1, [r0, #4]
 801f79c:	0052      	lsls	r2, r2, #1
 801f79e:	e7c6      	b.n	801f72e <_dtoa_r+0x26e>
 801f7a0:	636f4361 	.word	0x636f4361
 801f7a4:	3fd287a7 	.word	0x3fd287a7
 801f7a8:	8b60c8b3 	.word	0x8b60c8b3
 801f7ac:	3fc68a28 	.word	0x3fc68a28
 801f7b0:	509f79fb 	.word	0x509f79fb
 801f7b4:	3fd34413 	.word	0x3fd34413
 801f7b8:	08026956 	.word	0x08026956
 801f7bc:	08026a76 	.word	0x08026a76
 801f7c0:	7ff00000 	.word	0x7ff00000
 801f7c4:	08026a72 	.word	0x08026a72
 801f7c8:	08026a69 	.word	0x08026a69
 801f7cc:	08026c5a 	.word	0x08026c5a
 801f7d0:	3ff80000 	.word	0x3ff80000
 801f7d4:	08026b70 	.word	0x08026b70
 801f7d8:	08026ad5 	.word	0x08026ad5
 801f7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f7de:	9a00      	ldr	r2, [sp, #0]
 801f7e0:	601a      	str	r2, [r3, #0]
 801f7e2:	9b01      	ldr	r3, [sp, #4]
 801f7e4:	2b0e      	cmp	r3, #14
 801f7e6:	f200 80ad 	bhi.w	801f944 <_dtoa_r+0x484>
 801f7ea:	2d00      	cmp	r5, #0
 801f7ec:	f000 80aa 	beq.w	801f944 <_dtoa_r+0x484>
 801f7f0:	f1ba 0f00 	cmp.w	sl, #0
 801f7f4:	dd36      	ble.n	801f864 <_dtoa_r+0x3a4>
 801f7f6:	4ac3      	ldr	r2, [pc, #780]	; (801fb04 <_dtoa_r+0x644>)
 801f7f8:	f00a 030f 	and.w	r3, sl, #15
 801f7fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f800:	ed93 7b00 	vldr	d7, [r3]
 801f804:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801f808:	ea4f 172a 	mov.w	r7, sl, asr #4
 801f80c:	eeb0 8a47 	vmov.f32	s16, s14
 801f810:	eef0 8a67 	vmov.f32	s17, s15
 801f814:	d016      	beq.n	801f844 <_dtoa_r+0x384>
 801f816:	4bbc      	ldr	r3, [pc, #752]	; (801fb08 <_dtoa_r+0x648>)
 801f818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f81c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f820:	f7e1 f814 	bl	800084c <__aeabi_ddiv>
 801f824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f828:	f007 070f 	and.w	r7, r7, #15
 801f82c:	2503      	movs	r5, #3
 801f82e:	4eb6      	ldr	r6, [pc, #728]	; (801fb08 <_dtoa_r+0x648>)
 801f830:	b957      	cbnz	r7, 801f848 <_dtoa_r+0x388>
 801f832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f836:	ec53 2b18 	vmov	r2, r3, d8
 801f83a:	f7e1 f807 	bl	800084c <__aeabi_ddiv>
 801f83e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f842:	e029      	b.n	801f898 <_dtoa_r+0x3d8>
 801f844:	2502      	movs	r5, #2
 801f846:	e7f2      	b.n	801f82e <_dtoa_r+0x36e>
 801f848:	07f9      	lsls	r1, r7, #31
 801f84a:	d508      	bpl.n	801f85e <_dtoa_r+0x39e>
 801f84c:	ec51 0b18 	vmov	r0, r1, d8
 801f850:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f854:	f7e0 fed0 	bl	80005f8 <__aeabi_dmul>
 801f858:	ec41 0b18 	vmov	d8, r0, r1
 801f85c:	3501      	adds	r5, #1
 801f85e:	107f      	asrs	r7, r7, #1
 801f860:	3608      	adds	r6, #8
 801f862:	e7e5      	b.n	801f830 <_dtoa_r+0x370>
 801f864:	f000 80a6 	beq.w	801f9b4 <_dtoa_r+0x4f4>
 801f868:	f1ca 0600 	rsb	r6, sl, #0
 801f86c:	4ba5      	ldr	r3, [pc, #660]	; (801fb04 <_dtoa_r+0x644>)
 801f86e:	4fa6      	ldr	r7, [pc, #664]	; (801fb08 <_dtoa_r+0x648>)
 801f870:	f006 020f 	and.w	r2, r6, #15
 801f874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f87c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f880:	f7e0 feba 	bl	80005f8 <__aeabi_dmul>
 801f884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f888:	1136      	asrs	r6, r6, #4
 801f88a:	2300      	movs	r3, #0
 801f88c:	2502      	movs	r5, #2
 801f88e:	2e00      	cmp	r6, #0
 801f890:	f040 8085 	bne.w	801f99e <_dtoa_r+0x4de>
 801f894:	2b00      	cmp	r3, #0
 801f896:	d1d2      	bne.n	801f83e <_dtoa_r+0x37e>
 801f898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	f000 808c 	beq.w	801f9b8 <_dtoa_r+0x4f8>
 801f8a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f8a4:	4b99      	ldr	r3, [pc, #612]	; (801fb0c <_dtoa_r+0x64c>)
 801f8a6:	2200      	movs	r2, #0
 801f8a8:	4630      	mov	r0, r6
 801f8aa:	4639      	mov	r1, r7
 801f8ac:	f7e1 f916 	bl	8000adc <__aeabi_dcmplt>
 801f8b0:	2800      	cmp	r0, #0
 801f8b2:	f000 8081 	beq.w	801f9b8 <_dtoa_r+0x4f8>
 801f8b6:	9b01      	ldr	r3, [sp, #4]
 801f8b8:	2b00      	cmp	r3, #0
 801f8ba:	d07d      	beq.n	801f9b8 <_dtoa_r+0x4f8>
 801f8bc:	f1b9 0f00 	cmp.w	r9, #0
 801f8c0:	dd3c      	ble.n	801f93c <_dtoa_r+0x47c>
 801f8c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f8c6:	9307      	str	r3, [sp, #28]
 801f8c8:	2200      	movs	r2, #0
 801f8ca:	4b91      	ldr	r3, [pc, #580]	; (801fb10 <_dtoa_r+0x650>)
 801f8cc:	4630      	mov	r0, r6
 801f8ce:	4639      	mov	r1, r7
 801f8d0:	f7e0 fe92 	bl	80005f8 <__aeabi_dmul>
 801f8d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f8d8:	3501      	adds	r5, #1
 801f8da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801f8de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f8e2:	4628      	mov	r0, r5
 801f8e4:	f7e0 fe1e 	bl	8000524 <__aeabi_i2d>
 801f8e8:	4632      	mov	r2, r6
 801f8ea:	463b      	mov	r3, r7
 801f8ec:	f7e0 fe84 	bl	80005f8 <__aeabi_dmul>
 801f8f0:	4b88      	ldr	r3, [pc, #544]	; (801fb14 <_dtoa_r+0x654>)
 801f8f2:	2200      	movs	r2, #0
 801f8f4:	f7e0 fcca 	bl	800028c <__adddf3>
 801f8f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f8fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f900:	9303      	str	r3, [sp, #12]
 801f902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f904:	2b00      	cmp	r3, #0
 801f906:	d15c      	bne.n	801f9c2 <_dtoa_r+0x502>
 801f908:	4b83      	ldr	r3, [pc, #524]	; (801fb18 <_dtoa_r+0x658>)
 801f90a:	2200      	movs	r2, #0
 801f90c:	4630      	mov	r0, r6
 801f90e:	4639      	mov	r1, r7
 801f910:	f7e0 fcba 	bl	8000288 <__aeabi_dsub>
 801f914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f918:	4606      	mov	r6, r0
 801f91a:	460f      	mov	r7, r1
 801f91c:	f7e1 f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 801f920:	2800      	cmp	r0, #0
 801f922:	f040 8296 	bne.w	801fe52 <_dtoa_r+0x992>
 801f926:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f92a:	4630      	mov	r0, r6
 801f92c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f930:	4639      	mov	r1, r7
 801f932:	f7e1 f8d3 	bl	8000adc <__aeabi_dcmplt>
 801f936:	2800      	cmp	r0, #0
 801f938:	f040 8288 	bne.w	801fe4c <_dtoa_r+0x98c>
 801f93c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f940:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f944:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f946:	2b00      	cmp	r3, #0
 801f948:	f2c0 8158 	blt.w	801fbfc <_dtoa_r+0x73c>
 801f94c:	f1ba 0f0e 	cmp.w	sl, #14
 801f950:	f300 8154 	bgt.w	801fbfc <_dtoa_r+0x73c>
 801f954:	4b6b      	ldr	r3, [pc, #428]	; (801fb04 <_dtoa_r+0x644>)
 801f956:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f95a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f960:	2b00      	cmp	r3, #0
 801f962:	f280 80e3 	bge.w	801fb2c <_dtoa_r+0x66c>
 801f966:	9b01      	ldr	r3, [sp, #4]
 801f968:	2b00      	cmp	r3, #0
 801f96a:	f300 80df 	bgt.w	801fb2c <_dtoa_r+0x66c>
 801f96e:	f040 826d 	bne.w	801fe4c <_dtoa_r+0x98c>
 801f972:	4b69      	ldr	r3, [pc, #420]	; (801fb18 <_dtoa_r+0x658>)
 801f974:	2200      	movs	r2, #0
 801f976:	4640      	mov	r0, r8
 801f978:	4649      	mov	r1, r9
 801f97a:	f7e0 fe3d 	bl	80005f8 <__aeabi_dmul>
 801f97e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f982:	f7e1 f8bf 	bl	8000b04 <__aeabi_dcmpge>
 801f986:	9e01      	ldr	r6, [sp, #4]
 801f988:	4637      	mov	r7, r6
 801f98a:	2800      	cmp	r0, #0
 801f98c:	f040 8243 	bne.w	801fe16 <_dtoa_r+0x956>
 801f990:	9d00      	ldr	r5, [sp, #0]
 801f992:	2331      	movs	r3, #49	; 0x31
 801f994:	f805 3b01 	strb.w	r3, [r5], #1
 801f998:	f10a 0a01 	add.w	sl, sl, #1
 801f99c:	e23f      	b.n	801fe1e <_dtoa_r+0x95e>
 801f99e:	07f2      	lsls	r2, r6, #31
 801f9a0:	d505      	bpl.n	801f9ae <_dtoa_r+0x4ee>
 801f9a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f9a6:	f7e0 fe27 	bl	80005f8 <__aeabi_dmul>
 801f9aa:	3501      	adds	r5, #1
 801f9ac:	2301      	movs	r3, #1
 801f9ae:	1076      	asrs	r6, r6, #1
 801f9b0:	3708      	adds	r7, #8
 801f9b2:	e76c      	b.n	801f88e <_dtoa_r+0x3ce>
 801f9b4:	2502      	movs	r5, #2
 801f9b6:	e76f      	b.n	801f898 <_dtoa_r+0x3d8>
 801f9b8:	9b01      	ldr	r3, [sp, #4]
 801f9ba:	f8cd a01c 	str.w	sl, [sp, #28]
 801f9be:	930c      	str	r3, [sp, #48]	; 0x30
 801f9c0:	e78d      	b.n	801f8de <_dtoa_r+0x41e>
 801f9c2:	9900      	ldr	r1, [sp, #0]
 801f9c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f9c8:	4b4e      	ldr	r3, [pc, #312]	; (801fb04 <_dtoa_r+0x644>)
 801f9ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f9ce:	4401      	add	r1, r0
 801f9d0:	9102      	str	r1, [sp, #8]
 801f9d2:	9908      	ldr	r1, [sp, #32]
 801f9d4:	eeb0 8a47 	vmov.f32	s16, s14
 801f9d8:	eef0 8a67 	vmov.f32	s17, s15
 801f9dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f9e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f9e4:	2900      	cmp	r1, #0
 801f9e6:	d045      	beq.n	801fa74 <_dtoa_r+0x5b4>
 801f9e8:	494c      	ldr	r1, [pc, #304]	; (801fb1c <_dtoa_r+0x65c>)
 801f9ea:	2000      	movs	r0, #0
 801f9ec:	f7e0 ff2e 	bl	800084c <__aeabi_ddiv>
 801f9f0:	ec53 2b18 	vmov	r2, r3, d8
 801f9f4:	f7e0 fc48 	bl	8000288 <__aeabi_dsub>
 801f9f8:	9d00      	ldr	r5, [sp, #0]
 801f9fa:	ec41 0b18 	vmov	d8, r0, r1
 801f9fe:	4639      	mov	r1, r7
 801fa00:	4630      	mov	r0, r6
 801fa02:	f7e1 f8a9 	bl	8000b58 <__aeabi_d2iz>
 801fa06:	900c      	str	r0, [sp, #48]	; 0x30
 801fa08:	f7e0 fd8c 	bl	8000524 <__aeabi_i2d>
 801fa0c:	4602      	mov	r2, r0
 801fa0e:	460b      	mov	r3, r1
 801fa10:	4630      	mov	r0, r6
 801fa12:	4639      	mov	r1, r7
 801fa14:	f7e0 fc38 	bl	8000288 <__aeabi_dsub>
 801fa18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fa1a:	3330      	adds	r3, #48	; 0x30
 801fa1c:	f805 3b01 	strb.w	r3, [r5], #1
 801fa20:	ec53 2b18 	vmov	r2, r3, d8
 801fa24:	4606      	mov	r6, r0
 801fa26:	460f      	mov	r7, r1
 801fa28:	f7e1 f858 	bl	8000adc <__aeabi_dcmplt>
 801fa2c:	2800      	cmp	r0, #0
 801fa2e:	d165      	bne.n	801fafc <_dtoa_r+0x63c>
 801fa30:	4632      	mov	r2, r6
 801fa32:	463b      	mov	r3, r7
 801fa34:	4935      	ldr	r1, [pc, #212]	; (801fb0c <_dtoa_r+0x64c>)
 801fa36:	2000      	movs	r0, #0
 801fa38:	f7e0 fc26 	bl	8000288 <__aeabi_dsub>
 801fa3c:	ec53 2b18 	vmov	r2, r3, d8
 801fa40:	f7e1 f84c 	bl	8000adc <__aeabi_dcmplt>
 801fa44:	2800      	cmp	r0, #0
 801fa46:	f040 80b9 	bne.w	801fbbc <_dtoa_r+0x6fc>
 801fa4a:	9b02      	ldr	r3, [sp, #8]
 801fa4c:	429d      	cmp	r5, r3
 801fa4e:	f43f af75 	beq.w	801f93c <_dtoa_r+0x47c>
 801fa52:	4b2f      	ldr	r3, [pc, #188]	; (801fb10 <_dtoa_r+0x650>)
 801fa54:	ec51 0b18 	vmov	r0, r1, d8
 801fa58:	2200      	movs	r2, #0
 801fa5a:	f7e0 fdcd 	bl	80005f8 <__aeabi_dmul>
 801fa5e:	4b2c      	ldr	r3, [pc, #176]	; (801fb10 <_dtoa_r+0x650>)
 801fa60:	ec41 0b18 	vmov	d8, r0, r1
 801fa64:	2200      	movs	r2, #0
 801fa66:	4630      	mov	r0, r6
 801fa68:	4639      	mov	r1, r7
 801fa6a:	f7e0 fdc5 	bl	80005f8 <__aeabi_dmul>
 801fa6e:	4606      	mov	r6, r0
 801fa70:	460f      	mov	r7, r1
 801fa72:	e7c4      	b.n	801f9fe <_dtoa_r+0x53e>
 801fa74:	ec51 0b17 	vmov	r0, r1, d7
 801fa78:	f7e0 fdbe 	bl	80005f8 <__aeabi_dmul>
 801fa7c:	9b02      	ldr	r3, [sp, #8]
 801fa7e:	9d00      	ldr	r5, [sp, #0]
 801fa80:	930c      	str	r3, [sp, #48]	; 0x30
 801fa82:	ec41 0b18 	vmov	d8, r0, r1
 801fa86:	4639      	mov	r1, r7
 801fa88:	4630      	mov	r0, r6
 801fa8a:	f7e1 f865 	bl	8000b58 <__aeabi_d2iz>
 801fa8e:	9011      	str	r0, [sp, #68]	; 0x44
 801fa90:	f7e0 fd48 	bl	8000524 <__aeabi_i2d>
 801fa94:	4602      	mov	r2, r0
 801fa96:	460b      	mov	r3, r1
 801fa98:	4630      	mov	r0, r6
 801fa9a:	4639      	mov	r1, r7
 801fa9c:	f7e0 fbf4 	bl	8000288 <__aeabi_dsub>
 801faa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801faa2:	3330      	adds	r3, #48	; 0x30
 801faa4:	f805 3b01 	strb.w	r3, [r5], #1
 801faa8:	9b02      	ldr	r3, [sp, #8]
 801faaa:	429d      	cmp	r5, r3
 801faac:	4606      	mov	r6, r0
 801faae:	460f      	mov	r7, r1
 801fab0:	f04f 0200 	mov.w	r2, #0
 801fab4:	d134      	bne.n	801fb20 <_dtoa_r+0x660>
 801fab6:	4b19      	ldr	r3, [pc, #100]	; (801fb1c <_dtoa_r+0x65c>)
 801fab8:	ec51 0b18 	vmov	r0, r1, d8
 801fabc:	f7e0 fbe6 	bl	800028c <__adddf3>
 801fac0:	4602      	mov	r2, r0
 801fac2:	460b      	mov	r3, r1
 801fac4:	4630      	mov	r0, r6
 801fac6:	4639      	mov	r1, r7
 801fac8:	f7e1 f826 	bl	8000b18 <__aeabi_dcmpgt>
 801facc:	2800      	cmp	r0, #0
 801face:	d175      	bne.n	801fbbc <_dtoa_r+0x6fc>
 801fad0:	ec53 2b18 	vmov	r2, r3, d8
 801fad4:	4911      	ldr	r1, [pc, #68]	; (801fb1c <_dtoa_r+0x65c>)
 801fad6:	2000      	movs	r0, #0
 801fad8:	f7e0 fbd6 	bl	8000288 <__aeabi_dsub>
 801fadc:	4602      	mov	r2, r0
 801fade:	460b      	mov	r3, r1
 801fae0:	4630      	mov	r0, r6
 801fae2:	4639      	mov	r1, r7
 801fae4:	f7e0 fffa 	bl	8000adc <__aeabi_dcmplt>
 801fae8:	2800      	cmp	r0, #0
 801faea:	f43f af27 	beq.w	801f93c <_dtoa_r+0x47c>
 801faee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801faf0:	1e6b      	subs	r3, r5, #1
 801faf2:	930c      	str	r3, [sp, #48]	; 0x30
 801faf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801faf8:	2b30      	cmp	r3, #48	; 0x30
 801fafa:	d0f8      	beq.n	801faee <_dtoa_r+0x62e>
 801fafc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fb00:	e04a      	b.n	801fb98 <_dtoa_r+0x6d8>
 801fb02:	bf00      	nop
 801fb04:	08026b70 	.word	0x08026b70
 801fb08:	08026b48 	.word	0x08026b48
 801fb0c:	3ff00000 	.word	0x3ff00000
 801fb10:	40240000 	.word	0x40240000
 801fb14:	401c0000 	.word	0x401c0000
 801fb18:	40140000 	.word	0x40140000
 801fb1c:	3fe00000 	.word	0x3fe00000
 801fb20:	4baf      	ldr	r3, [pc, #700]	; (801fde0 <_dtoa_r+0x920>)
 801fb22:	f7e0 fd69 	bl	80005f8 <__aeabi_dmul>
 801fb26:	4606      	mov	r6, r0
 801fb28:	460f      	mov	r7, r1
 801fb2a:	e7ac      	b.n	801fa86 <_dtoa_r+0x5c6>
 801fb2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801fb30:	9d00      	ldr	r5, [sp, #0]
 801fb32:	4642      	mov	r2, r8
 801fb34:	464b      	mov	r3, r9
 801fb36:	4630      	mov	r0, r6
 801fb38:	4639      	mov	r1, r7
 801fb3a:	f7e0 fe87 	bl	800084c <__aeabi_ddiv>
 801fb3e:	f7e1 f80b 	bl	8000b58 <__aeabi_d2iz>
 801fb42:	9002      	str	r0, [sp, #8]
 801fb44:	f7e0 fcee 	bl	8000524 <__aeabi_i2d>
 801fb48:	4642      	mov	r2, r8
 801fb4a:	464b      	mov	r3, r9
 801fb4c:	f7e0 fd54 	bl	80005f8 <__aeabi_dmul>
 801fb50:	4602      	mov	r2, r0
 801fb52:	460b      	mov	r3, r1
 801fb54:	4630      	mov	r0, r6
 801fb56:	4639      	mov	r1, r7
 801fb58:	f7e0 fb96 	bl	8000288 <__aeabi_dsub>
 801fb5c:	9e02      	ldr	r6, [sp, #8]
 801fb5e:	9f01      	ldr	r7, [sp, #4]
 801fb60:	3630      	adds	r6, #48	; 0x30
 801fb62:	f805 6b01 	strb.w	r6, [r5], #1
 801fb66:	9e00      	ldr	r6, [sp, #0]
 801fb68:	1bae      	subs	r6, r5, r6
 801fb6a:	42b7      	cmp	r7, r6
 801fb6c:	4602      	mov	r2, r0
 801fb6e:	460b      	mov	r3, r1
 801fb70:	d137      	bne.n	801fbe2 <_dtoa_r+0x722>
 801fb72:	f7e0 fb8b 	bl	800028c <__adddf3>
 801fb76:	4642      	mov	r2, r8
 801fb78:	464b      	mov	r3, r9
 801fb7a:	4606      	mov	r6, r0
 801fb7c:	460f      	mov	r7, r1
 801fb7e:	f7e0 ffcb 	bl	8000b18 <__aeabi_dcmpgt>
 801fb82:	b9c8      	cbnz	r0, 801fbb8 <_dtoa_r+0x6f8>
 801fb84:	4642      	mov	r2, r8
 801fb86:	464b      	mov	r3, r9
 801fb88:	4630      	mov	r0, r6
 801fb8a:	4639      	mov	r1, r7
 801fb8c:	f7e0 ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 801fb90:	b110      	cbz	r0, 801fb98 <_dtoa_r+0x6d8>
 801fb92:	9b02      	ldr	r3, [sp, #8]
 801fb94:	07d9      	lsls	r1, r3, #31
 801fb96:	d40f      	bmi.n	801fbb8 <_dtoa_r+0x6f8>
 801fb98:	4620      	mov	r0, r4
 801fb9a:	4659      	mov	r1, fp
 801fb9c:	f000 fc1c 	bl	80203d8 <_Bfree>
 801fba0:	2300      	movs	r3, #0
 801fba2:	702b      	strb	r3, [r5, #0]
 801fba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fba6:	f10a 0001 	add.w	r0, sl, #1
 801fbaa:	6018      	str	r0, [r3, #0]
 801fbac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	f43f acd8 	beq.w	801f564 <_dtoa_r+0xa4>
 801fbb4:	601d      	str	r5, [r3, #0]
 801fbb6:	e4d5      	b.n	801f564 <_dtoa_r+0xa4>
 801fbb8:	f8cd a01c 	str.w	sl, [sp, #28]
 801fbbc:	462b      	mov	r3, r5
 801fbbe:	461d      	mov	r5, r3
 801fbc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fbc4:	2a39      	cmp	r2, #57	; 0x39
 801fbc6:	d108      	bne.n	801fbda <_dtoa_r+0x71a>
 801fbc8:	9a00      	ldr	r2, [sp, #0]
 801fbca:	429a      	cmp	r2, r3
 801fbcc:	d1f7      	bne.n	801fbbe <_dtoa_r+0x6fe>
 801fbce:	9a07      	ldr	r2, [sp, #28]
 801fbd0:	9900      	ldr	r1, [sp, #0]
 801fbd2:	3201      	adds	r2, #1
 801fbd4:	9207      	str	r2, [sp, #28]
 801fbd6:	2230      	movs	r2, #48	; 0x30
 801fbd8:	700a      	strb	r2, [r1, #0]
 801fbda:	781a      	ldrb	r2, [r3, #0]
 801fbdc:	3201      	adds	r2, #1
 801fbde:	701a      	strb	r2, [r3, #0]
 801fbe0:	e78c      	b.n	801fafc <_dtoa_r+0x63c>
 801fbe2:	4b7f      	ldr	r3, [pc, #508]	; (801fde0 <_dtoa_r+0x920>)
 801fbe4:	2200      	movs	r2, #0
 801fbe6:	f7e0 fd07 	bl	80005f8 <__aeabi_dmul>
 801fbea:	2200      	movs	r2, #0
 801fbec:	2300      	movs	r3, #0
 801fbee:	4606      	mov	r6, r0
 801fbf0:	460f      	mov	r7, r1
 801fbf2:	f7e0 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 801fbf6:	2800      	cmp	r0, #0
 801fbf8:	d09b      	beq.n	801fb32 <_dtoa_r+0x672>
 801fbfa:	e7cd      	b.n	801fb98 <_dtoa_r+0x6d8>
 801fbfc:	9a08      	ldr	r2, [sp, #32]
 801fbfe:	2a00      	cmp	r2, #0
 801fc00:	f000 80c4 	beq.w	801fd8c <_dtoa_r+0x8cc>
 801fc04:	9a05      	ldr	r2, [sp, #20]
 801fc06:	2a01      	cmp	r2, #1
 801fc08:	f300 80a8 	bgt.w	801fd5c <_dtoa_r+0x89c>
 801fc0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fc0e:	2a00      	cmp	r2, #0
 801fc10:	f000 80a0 	beq.w	801fd54 <_dtoa_r+0x894>
 801fc14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801fc18:	9e06      	ldr	r6, [sp, #24]
 801fc1a:	4645      	mov	r5, r8
 801fc1c:	9a04      	ldr	r2, [sp, #16]
 801fc1e:	2101      	movs	r1, #1
 801fc20:	441a      	add	r2, r3
 801fc22:	4620      	mov	r0, r4
 801fc24:	4498      	add	r8, r3
 801fc26:	9204      	str	r2, [sp, #16]
 801fc28:	f000 fc92 	bl	8020550 <__i2b>
 801fc2c:	4607      	mov	r7, r0
 801fc2e:	2d00      	cmp	r5, #0
 801fc30:	dd0b      	ble.n	801fc4a <_dtoa_r+0x78a>
 801fc32:	9b04      	ldr	r3, [sp, #16]
 801fc34:	2b00      	cmp	r3, #0
 801fc36:	dd08      	ble.n	801fc4a <_dtoa_r+0x78a>
 801fc38:	42ab      	cmp	r3, r5
 801fc3a:	9a04      	ldr	r2, [sp, #16]
 801fc3c:	bfa8      	it	ge
 801fc3e:	462b      	movge	r3, r5
 801fc40:	eba8 0803 	sub.w	r8, r8, r3
 801fc44:	1aed      	subs	r5, r5, r3
 801fc46:	1ad3      	subs	r3, r2, r3
 801fc48:	9304      	str	r3, [sp, #16]
 801fc4a:	9b06      	ldr	r3, [sp, #24]
 801fc4c:	b1fb      	cbz	r3, 801fc8e <_dtoa_r+0x7ce>
 801fc4e:	9b08      	ldr	r3, [sp, #32]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	f000 809f 	beq.w	801fd94 <_dtoa_r+0x8d4>
 801fc56:	2e00      	cmp	r6, #0
 801fc58:	dd11      	ble.n	801fc7e <_dtoa_r+0x7be>
 801fc5a:	4639      	mov	r1, r7
 801fc5c:	4632      	mov	r2, r6
 801fc5e:	4620      	mov	r0, r4
 801fc60:	f000 fd32 	bl	80206c8 <__pow5mult>
 801fc64:	465a      	mov	r2, fp
 801fc66:	4601      	mov	r1, r0
 801fc68:	4607      	mov	r7, r0
 801fc6a:	4620      	mov	r0, r4
 801fc6c:	f000 fc86 	bl	802057c <__multiply>
 801fc70:	4659      	mov	r1, fp
 801fc72:	9007      	str	r0, [sp, #28]
 801fc74:	4620      	mov	r0, r4
 801fc76:	f000 fbaf 	bl	80203d8 <_Bfree>
 801fc7a:	9b07      	ldr	r3, [sp, #28]
 801fc7c:	469b      	mov	fp, r3
 801fc7e:	9b06      	ldr	r3, [sp, #24]
 801fc80:	1b9a      	subs	r2, r3, r6
 801fc82:	d004      	beq.n	801fc8e <_dtoa_r+0x7ce>
 801fc84:	4659      	mov	r1, fp
 801fc86:	4620      	mov	r0, r4
 801fc88:	f000 fd1e 	bl	80206c8 <__pow5mult>
 801fc8c:	4683      	mov	fp, r0
 801fc8e:	2101      	movs	r1, #1
 801fc90:	4620      	mov	r0, r4
 801fc92:	f000 fc5d 	bl	8020550 <__i2b>
 801fc96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fc98:	2b00      	cmp	r3, #0
 801fc9a:	4606      	mov	r6, r0
 801fc9c:	dd7c      	ble.n	801fd98 <_dtoa_r+0x8d8>
 801fc9e:	461a      	mov	r2, r3
 801fca0:	4601      	mov	r1, r0
 801fca2:	4620      	mov	r0, r4
 801fca4:	f000 fd10 	bl	80206c8 <__pow5mult>
 801fca8:	9b05      	ldr	r3, [sp, #20]
 801fcaa:	2b01      	cmp	r3, #1
 801fcac:	4606      	mov	r6, r0
 801fcae:	dd76      	ble.n	801fd9e <_dtoa_r+0x8de>
 801fcb0:	2300      	movs	r3, #0
 801fcb2:	9306      	str	r3, [sp, #24]
 801fcb4:	6933      	ldr	r3, [r6, #16]
 801fcb6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801fcba:	6918      	ldr	r0, [r3, #16]
 801fcbc:	f000 fbf8 	bl	80204b0 <__hi0bits>
 801fcc0:	f1c0 0020 	rsb	r0, r0, #32
 801fcc4:	9b04      	ldr	r3, [sp, #16]
 801fcc6:	4418      	add	r0, r3
 801fcc8:	f010 001f 	ands.w	r0, r0, #31
 801fccc:	f000 8086 	beq.w	801fddc <_dtoa_r+0x91c>
 801fcd0:	f1c0 0320 	rsb	r3, r0, #32
 801fcd4:	2b04      	cmp	r3, #4
 801fcd6:	dd7f      	ble.n	801fdd8 <_dtoa_r+0x918>
 801fcd8:	f1c0 001c 	rsb	r0, r0, #28
 801fcdc:	9b04      	ldr	r3, [sp, #16]
 801fcde:	4403      	add	r3, r0
 801fce0:	4480      	add	r8, r0
 801fce2:	4405      	add	r5, r0
 801fce4:	9304      	str	r3, [sp, #16]
 801fce6:	f1b8 0f00 	cmp.w	r8, #0
 801fcea:	dd05      	ble.n	801fcf8 <_dtoa_r+0x838>
 801fcec:	4659      	mov	r1, fp
 801fcee:	4642      	mov	r2, r8
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	f000 fd43 	bl	802077c <__lshift>
 801fcf6:	4683      	mov	fp, r0
 801fcf8:	9b04      	ldr	r3, [sp, #16]
 801fcfa:	2b00      	cmp	r3, #0
 801fcfc:	dd05      	ble.n	801fd0a <_dtoa_r+0x84a>
 801fcfe:	4631      	mov	r1, r6
 801fd00:	461a      	mov	r2, r3
 801fd02:	4620      	mov	r0, r4
 801fd04:	f000 fd3a 	bl	802077c <__lshift>
 801fd08:	4606      	mov	r6, r0
 801fd0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d069      	beq.n	801fde4 <_dtoa_r+0x924>
 801fd10:	4631      	mov	r1, r6
 801fd12:	4658      	mov	r0, fp
 801fd14:	f000 fd9e 	bl	8020854 <__mcmp>
 801fd18:	2800      	cmp	r0, #0
 801fd1a:	da63      	bge.n	801fde4 <_dtoa_r+0x924>
 801fd1c:	2300      	movs	r3, #0
 801fd1e:	4659      	mov	r1, fp
 801fd20:	220a      	movs	r2, #10
 801fd22:	4620      	mov	r0, r4
 801fd24:	f000 fb7a 	bl	802041c <__multadd>
 801fd28:	9b08      	ldr	r3, [sp, #32]
 801fd2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fd2e:	4683      	mov	fp, r0
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	f000 818f 	beq.w	8020054 <_dtoa_r+0xb94>
 801fd36:	4639      	mov	r1, r7
 801fd38:	2300      	movs	r3, #0
 801fd3a:	220a      	movs	r2, #10
 801fd3c:	4620      	mov	r0, r4
 801fd3e:	f000 fb6d 	bl	802041c <__multadd>
 801fd42:	f1b9 0f00 	cmp.w	r9, #0
 801fd46:	4607      	mov	r7, r0
 801fd48:	f300 808e 	bgt.w	801fe68 <_dtoa_r+0x9a8>
 801fd4c:	9b05      	ldr	r3, [sp, #20]
 801fd4e:	2b02      	cmp	r3, #2
 801fd50:	dc50      	bgt.n	801fdf4 <_dtoa_r+0x934>
 801fd52:	e089      	b.n	801fe68 <_dtoa_r+0x9a8>
 801fd54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fd56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801fd5a:	e75d      	b.n	801fc18 <_dtoa_r+0x758>
 801fd5c:	9b01      	ldr	r3, [sp, #4]
 801fd5e:	1e5e      	subs	r6, r3, #1
 801fd60:	9b06      	ldr	r3, [sp, #24]
 801fd62:	42b3      	cmp	r3, r6
 801fd64:	bfbf      	itttt	lt
 801fd66:	9b06      	ldrlt	r3, [sp, #24]
 801fd68:	9606      	strlt	r6, [sp, #24]
 801fd6a:	1af2      	sublt	r2, r6, r3
 801fd6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801fd6e:	bfb6      	itet	lt
 801fd70:	189b      	addlt	r3, r3, r2
 801fd72:	1b9e      	subge	r6, r3, r6
 801fd74:	930d      	strlt	r3, [sp, #52]	; 0x34
 801fd76:	9b01      	ldr	r3, [sp, #4]
 801fd78:	bfb8      	it	lt
 801fd7a:	2600      	movlt	r6, #0
 801fd7c:	2b00      	cmp	r3, #0
 801fd7e:	bfb5      	itete	lt
 801fd80:	eba8 0503 	sublt.w	r5, r8, r3
 801fd84:	9b01      	ldrge	r3, [sp, #4]
 801fd86:	2300      	movlt	r3, #0
 801fd88:	4645      	movge	r5, r8
 801fd8a:	e747      	b.n	801fc1c <_dtoa_r+0x75c>
 801fd8c:	9e06      	ldr	r6, [sp, #24]
 801fd8e:	9f08      	ldr	r7, [sp, #32]
 801fd90:	4645      	mov	r5, r8
 801fd92:	e74c      	b.n	801fc2e <_dtoa_r+0x76e>
 801fd94:	9a06      	ldr	r2, [sp, #24]
 801fd96:	e775      	b.n	801fc84 <_dtoa_r+0x7c4>
 801fd98:	9b05      	ldr	r3, [sp, #20]
 801fd9a:	2b01      	cmp	r3, #1
 801fd9c:	dc18      	bgt.n	801fdd0 <_dtoa_r+0x910>
 801fd9e:	9b02      	ldr	r3, [sp, #8]
 801fda0:	b9b3      	cbnz	r3, 801fdd0 <_dtoa_r+0x910>
 801fda2:	9b03      	ldr	r3, [sp, #12]
 801fda4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fda8:	b9a3      	cbnz	r3, 801fdd4 <_dtoa_r+0x914>
 801fdaa:	9b03      	ldr	r3, [sp, #12]
 801fdac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fdb0:	0d1b      	lsrs	r3, r3, #20
 801fdb2:	051b      	lsls	r3, r3, #20
 801fdb4:	b12b      	cbz	r3, 801fdc2 <_dtoa_r+0x902>
 801fdb6:	9b04      	ldr	r3, [sp, #16]
 801fdb8:	3301      	adds	r3, #1
 801fdba:	9304      	str	r3, [sp, #16]
 801fdbc:	f108 0801 	add.w	r8, r8, #1
 801fdc0:	2301      	movs	r3, #1
 801fdc2:	9306      	str	r3, [sp, #24]
 801fdc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	f47f af74 	bne.w	801fcb4 <_dtoa_r+0x7f4>
 801fdcc:	2001      	movs	r0, #1
 801fdce:	e779      	b.n	801fcc4 <_dtoa_r+0x804>
 801fdd0:	2300      	movs	r3, #0
 801fdd2:	e7f6      	b.n	801fdc2 <_dtoa_r+0x902>
 801fdd4:	9b02      	ldr	r3, [sp, #8]
 801fdd6:	e7f4      	b.n	801fdc2 <_dtoa_r+0x902>
 801fdd8:	d085      	beq.n	801fce6 <_dtoa_r+0x826>
 801fdda:	4618      	mov	r0, r3
 801fddc:	301c      	adds	r0, #28
 801fdde:	e77d      	b.n	801fcdc <_dtoa_r+0x81c>
 801fde0:	40240000 	.word	0x40240000
 801fde4:	9b01      	ldr	r3, [sp, #4]
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	dc38      	bgt.n	801fe5c <_dtoa_r+0x99c>
 801fdea:	9b05      	ldr	r3, [sp, #20]
 801fdec:	2b02      	cmp	r3, #2
 801fdee:	dd35      	ble.n	801fe5c <_dtoa_r+0x99c>
 801fdf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801fdf4:	f1b9 0f00 	cmp.w	r9, #0
 801fdf8:	d10d      	bne.n	801fe16 <_dtoa_r+0x956>
 801fdfa:	4631      	mov	r1, r6
 801fdfc:	464b      	mov	r3, r9
 801fdfe:	2205      	movs	r2, #5
 801fe00:	4620      	mov	r0, r4
 801fe02:	f000 fb0b 	bl	802041c <__multadd>
 801fe06:	4601      	mov	r1, r0
 801fe08:	4606      	mov	r6, r0
 801fe0a:	4658      	mov	r0, fp
 801fe0c:	f000 fd22 	bl	8020854 <__mcmp>
 801fe10:	2800      	cmp	r0, #0
 801fe12:	f73f adbd 	bgt.w	801f990 <_dtoa_r+0x4d0>
 801fe16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe18:	9d00      	ldr	r5, [sp, #0]
 801fe1a:	ea6f 0a03 	mvn.w	sl, r3
 801fe1e:	f04f 0800 	mov.w	r8, #0
 801fe22:	4631      	mov	r1, r6
 801fe24:	4620      	mov	r0, r4
 801fe26:	f000 fad7 	bl	80203d8 <_Bfree>
 801fe2a:	2f00      	cmp	r7, #0
 801fe2c:	f43f aeb4 	beq.w	801fb98 <_dtoa_r+0x6d8>
 801fe30:	f1b8 0f00 	cmp.w	r8, #0
 801fe34:	d005      	beq.n	801fe42 <_dtoa_r+0x982>
 801fe36:	45b8      	cmp	r8, r7
 801fe38:	d003      	beq.n	801fe42 <_dtoa_r+0x982>
 801fe3a:	4641      	mov	r1, r8
 801fe3c:	4620      	mov	r0, r4
 801fe3e:	f000 facb 	bl	80203d8 <_Bfree>
 801fe42:	4639      	mov	r1, r7
 801fe44:	4620      	mov	r0, r4
 801fe46:	f000 fac7 	bl	80203d8 <_Bfree>
 801fe4a:	e6a5      	b.n	801fb98 <_dtoa_r+0x6d8>
 801fe4c:	2600      	movs	r6, #0
 801fe4e:	4637      	mov	r7, r6
 801fe50:	e7e1      	b.n	801fe16 <_dtoa_r+0x956>
 801fe52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fe54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801fe58:	4637      	mov	r7, r6
 801fe5a:	e599      	b.n	801f990 <_dtoa_r+0x4d0>
 801fe5c:	9b08      	ldr	r3, [sp, #32]
 801fe5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	f000 80fd 	beq.w	8020062 <_dtoa_r+0xba2>
 801fe68:	2d00      	cmp	r5, #0
 801fe6a:	dd05      	ble.n	801fe78 <_dtoa_r+0x9b8>
 801fe6c:	4639      	mov	r1, r7
 801fe6e:	462a      	mov	r2, r5
 801fe70:	4620      	mov	r0, r4
 801fe72:	f000 fc83 	bl	802077c <__lshift>
 801fe76:	4607      	mov	r7, r0
 801fe78:	9b06      	ldr	r3, [sp, #24]
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d05c      	beq.n	801ff38 <_dtoa_r+0xa78>
 801fe7e:	6879      	ldr	r1, [r7, #4]
 801fe80:	4620      	mov	r0, r4
 801fe82:	f000 fa69 	bl	8020358 <_Balloc>
 801fe86:	4605      	mov	r5, r0
 801fe88:	b928      	cbnz	r0, 801fe96 <_dtoa_r+0x9d6>
 801fe8a:	4b80      	ldr	r3, [pc, #512]	; (802008c <_dtoa_r+0xbcc>)
 801fe8c:	4602      	mov	r2, r0
 801fe8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801fe92:	f7ff bb2e 	b.w	801f4f2 <_dtoa_r+0x32>
 801fe96:	693a      	ldr	r2, [r7, #16]
 801fe98:	3202      	adds	r2, #2
 801fe9a:	0092      	lsls	r2, r2, #2
 801fe9c:	f107 010c 	add.w	r1, r7, #12
 801fea0:	300c      	adds	r0, #12
 801fea2:	f7fe f8ff 	bl	801e0a4 <memcpy>
 801fea6:	2201      	movs	r2, #1
 801fea8:	4629      	mov	r1, r5
 801feaa:	4620      	mov	r0, r4
 801feac:	f000 fc66 	bl	802077c <__lshift>
 801feb0:	9b00      	ldr	r3, [sp, #0]
 801feb2:	3301      	adds	r3, #1
 801feb4:	9301      	str	r3, [sp, #4]
 801feb6:	9b00      	ldr	r3, [sp, #0]
 801feb8:	444b      	add	r3, r9
 801feba:	9307      	str	r3, [sp, #28]
 801febc:	9b02      	ldr	r3, [sp, #8]
 801febe:	f003 0301 	and.w	r3, r3, #1
 801fec2:	46b8      	mov	r8, r7
 801fec4:	9306      	str	r3, [sp, #24]
 801fec6:	4607      	mov	r7, r0
 801fec8:	9b01      	ldr	r3, [sp, #4]
 801feca:	4631      	mov	r1, r6
 801fecc:	3b01      	subs	r3, #1
 801fece:	4658      	mov	r0, fp
 801fed0:	9302      	str	r3, [sp, #8]
 801fed2:	f7ff fa69 	bl	801f3a8 <quorem>
 801fed6:	4603      	mov	r3, r0
 801fed8:	3330      	adds	r3, #48	; 0x30
 801feda:	9004      	str	r0, [sp, #16]
 801fedc:	4641      	mov	r1, r8
 801fede:	4658      	mov	r0, fp
 801fee0:	9308      	str	r3, [sp, #32]
 801fee2:	f000 fcb7 	bl	8020854 <__mcmp>
 801fee6:	463a      	mov	r2, r7
 801fee8:	4681      	mov	r9, r0
 801feea:	4631      	mov	r1, r6
 801feec:	4620      	mov	r0, r4
 801feee:	f000 fccd 	bl	802088c <__mdiff>
 801fef2:	68c2      	ldr	r2, [r0, #12]
 801fef4:	9b08      	ldr	r3, [sp, #32]
 801fef6:	4605      	mov	r5, r0
 801fef8:	bb02      	cbnz	r2, 801ff3c <_dtoa_r+0xa7c>
 801fefa:	4601      	mov	r1, r0
 801fefc:	4658      	mov	r0, fp
 801fefe:	f000 fca9 	bl	8020854 <__mcmp>
 801ff02:	9b08      	ldr	r3, [sp, #32]
 801ff04:	4602      	mov	r2, r0
 801ff06:	4629      	mov	r1, r5
 801ff08:	4620      	mov	r0, r4
 801ff0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ff0e:	f000 fa63 	bl	80203d8 <_Bfree>
 801ff12:	9b05      	ldr	r3, [sp, #20]
 801ff14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ff16:	9d01      	ldr	r5, [sp, #4]
 801ff18:	ea43 0102 	orr.w	r1, r3, r2
 801ff1c:	9b06      	ldr	r3, [sp, #24]
 801ff1e:	430b      	orrs	r3, r1
 801ff20:	9b08      	ldr	r3, [sp, #32]
 801ff22:	d10d      	bne.n	801ff40 <_dtoa_r+0xa80>
 801ff24:	2b39      	cmp	r3, #57	; 0x39
 801ff26:	d029      	beq.n	801ff7c <_dtoa_r+0xabc>
 801ff28:	f1b9 0f00 	cmp.w	r9, #0
 801ff2c:	dd01      	ble.n	801ff32 <_dtoa_r+0xa72>
 801ff2e:	9b04      	ldr	r3, [sp, #16]
 801ff30:	3331      	adds	r3, #49	; 0x31
 801ff32:	9a02      	ldr	r2, [sp, #8]
 801ff34:	7013      	strb	r3, [r2, #0]
 801ff36:	e774      	b.n	801fe22 <_dtoa_r+0x962>
 801ff38:	4638      	mov	r0, r7
 801ff3a:	e7b9      	b.n	801feb0 <_dtoa_r+0x9f0>
 801ff3c:	2201      	movs	r2, #1
 801ff3e:	e7e2      	b.n	801ff06 <_dtoa_r+0xa46>
 801ff40:	f1b9 0f00 	cmp.w	r9, #0
 801ff44:	db06      	blt.n	801ff54 <_dtoa_r+0xa94>
 801ff46:	9905      	ldr	r1, [sp, #20]
 801ff48:	ea41 0909 	orr.w	r9, r1, r9
 801ff4c:	9906      	ldr	r1, [sp, #24]
 801ff4e:	ea59 0101 	orrs.w	r1, r9, r1
 801ff52:	d120      	bne.n	801ff96 <_dtoa_r+0xad6>
 801ff54:	2a00      	cmp	r2, #0
 801ff56:	ddec      	ble.n	801ff32 <_dtoa_r+0xa72>
 801ff58:	4659      	mov	r1, fp
 801ff5a:	2201      	movs	r2, #1
 801ff5c:	4620      	mov	r0, r4
 801ff5e:	9301      	str	r3, [sp, #4]
 801ff60:	f000 fc0c 	bl	802077c <__lshift>
 801ff64:	4631      	mov	r1, r6
 801ff66:	4683      	mov	fp, r0
 801ff68:	f000 fc74 	bl	8020854 <__mcmp>
 801ff6c:	2800      	cmp	r0, #0
 801ff6e:	9b01      	ldr	r3, [sp, #4]
 801ff70:	dc02      	bgt.n	801ff78 <_dtoa_r+0xab8>
 801ff72:	d1de      	bne.n	801ff32 <_dtoa_r+0xa72>
 801ff74:	07da      	lsls	r2, r3, #31
 801ff76:	d5dc      	bpl.n	801ff32 <_dtoa_r+0xa72>
 801ff78:	2b39      	cmp	r3, #57	; 0x39
 801ff7a:	d1d8      	bne.n	801ff2e <_dtoa_r+0xa6e>
 801ff7c:	9a02      	ldr	r2, [sp, #8]
 801ff7e:	2339      	movs	r3, #57	; 0x39
 801ff80:	7013      	strb	r3, [r2, #0]
 801ff82:	462b      	mov	r3, r5
 801ff84:	461d      	mov	r5, r3
 801ff86:	3b01      	subs	r3, #1
 801ff88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ff8c:	2a39      	cmp	r2, #57	; 0x39
 801ff8e:	d050      	beq.n	8020032 <_dtoa_r+0xb72>
 801ff90:	3201      	adds	r2, #1
 801ff92:	701a      	strb	r2, [r3, #0]
 801ff94:	e745      	b.n	801fe22 <_dtoa_r+0x962>
 801ff96:	2a00      	cmp	r2, #0
 801ff98:	dd03      	ble.n	801ffa2 <_dtoa_r+0xae2>
 801ff9a:	2b39      	cmp	r3, #57	; 0x39
 801ff9c:	d0ee      	beq.n	801ff7c <_dtoa_r+0xabc>
 801ff9e:	3301      	adds	r3, #1
 801ffa0:	e7c7      	b.n	801ff32 <_dtoa_r+0xa72>
 801ffa2:	9a01      	ldr	r2, [sp, #4]
 801ffa4:	9907      	ldr	r1, [sp, #28]
 801ffa6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ffaa:	428a      	cmp	r2, r1
 801ffac:	d02a      	beq.n	8020004 <_dtoa_r+0xb44>
 801ffae:	4659      	mov	r1, fp
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	220a      	movs	r2, #10
 801ffb4:	4620      	mov	r0, r4
 801ffb6:	f000 fa31 	bl	802041c <__multadd>
 801ffba:	45b8      	cmp	r8, r7
 801ffbc:	4683      	mov	fp, r0
 801ffbe:	f04f 0300 	mov.w	r3, #0
 801ffc2:	f04f 020a 	mov.w	r2, #10
 801ffc6:	4641      	mov	r1, r8
 801ffc8:	4620      	mov	r0, r4
 801ffca:	d107      	bne.n	801ffdc <_dtoa_r+0xb1c>
 801ffcc:	f000 fa26 	bl	802041c <__multadd>
 801ffd0:	4680      	mov	r8, r0
 801ffd2:	4607      	mov	r7, r0
 801ffd4:	9b01      	ldr	r3, [sp, #4]
 801ffd6:	3301      	adds	r3, #1
 801ffd8:	9301      	str	r3, [sp, #4]
 801ffda:	e775      	b.n	801fec8 <_dtoa_r+0xa08>
 801ffdc:	f000 fa1e 	bl	802041c <__multadd>
 801ffe0:	4639      	mov	r1, r7
 801ffe2:	4680      	mov	r8, r0
 801ffe4:	2300      	movs	r3, #0
 801ffe6:	220a      	movs	r2, #10
 801ffe8:	4620      	mov	r0, r4
 801ffea:	f000 fa17 	bl	802041c <__multadd>
 801ffee:	4607      	mov	r7, r0
 801fff0:	e7f0      	b.n	801ffd4 <_dtoa_r+0xb14>
 801fff2:	f1b9 0f00 	cmp.w	r9, #0
 801fff6:	9a00      	ldr	r2, [sp, #0]
 801fff8:	bfcc      	ite	gt
 801fffa:	464d      	movgt	r5, r9
 801fffc:	2501      	movle	r5, #1
 801fffe:	4415      	add	r5, r2
 8020000:	f04f 0800 	mov.w	r8, #0
 8020004:	4659      	mov	r1, fp
 8020006:	2201      	movs	r2, #1
 8020008:	4620      	mov	r0, r4
 802000a:	9301      	str	r3, [sp, #4]
 802000c:	f000 fbb6 	bl	802077c <__lshift>
 8020010:	4631      	mov	r1, r6
 8020012:	4683      	mov	fp, r0
 8020014:	f000 fc1e 	bl	8020854 <__mcmp>
 8020018:	2800      	cmp	r0, #0
 802001a:	dcb2      	bgt.n	801ff82 <_dtoa_r+0xac2>
 802001c:	d102      	bne.n	8020024 <_dtoa_r+0xb64>
 802001e:	9b01      	ldr	r3, [sp, #4]
 8020020:	07db      	lsls	r3, r3, #31
 8020022:	d4ae      	bmi.n	801ff82 <_dtoa_r+0xac2>
 8020024:	462b      	mov	r3, r5
 8020026:	461d      	mov	r5, r3
 8020028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802002c:	2a30      	cmp	r2, #48	; 0x30
 802002e:	d0fa      	beq.n	8020026 <_dtoa_r+0xb66>
 8020030:	e6f7      	b.n	801fe22 <_dtoa_r+0x962>
 8020032:	9a00      	ldr	r2, [sp, #0]
 8020034:	429a      	cmp	r2, r3
 8020036:	d1a5      	bne.n	801ff84 <_dtoa_r+0xac4>
 8020038:	f10a 0a01 	add.w	sl, sl, #1
 802003c:	2331      	movs	r3, #49	; 0x31
 802003e:	e779      	b.n	801ff34 <_dtoa_r+0xa74>
 8020040:	4b13      	ldr	r3, [pc, #76]	; (8020090 <_dtoa_r+0xbd0>)
 8020042:	f7ff baaf 	b.w	801f5a4 <_dtoa_r+0xe4>
 8020046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020048:	2b00      	cmp	r3, #0
 802004a:	f47f aa86 	bne.w	801f55a <_dtoa_r+0x9a>
 802004e:	4b11      	ldr	r3, [pc, #68]	; (8020094 <_dtoa_r+0xbd4>)
 8020050:	f7ff baa8 	b.w	801f5a4 <_dtoa_r+0xe4>
 8020054:	f1b9 0f00 	cmp.w	r9, #0
 8020058:	dc03      	bgt.n	8020062 <_dtoa_r+0xba2>
 802005a:	9b05      	ldr	r3, [sp, #20]
 802005c:	2b02      	cmp	r3, #2
 802005e:	f73f aec9 	bgt.w	801fdf4 <_dtoa_r+0x934>
 8020062:	9d00      	ldr	r5, [sp, #0]
 8020064:	4631      	mov	r1, r6
 8020066:	4658      	mov	r0, fp
 8020068:	f7ff f99e 	bl	801f3a8 <quorem>
 802006c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8020070:	f805 3b01 	strb.w	r3, [r5], #1
 8020074:	9a00      	ldr	r2, [sp, #0]
 8020076:	1aaa      	subs	r2, r5, r2
 8020078:	4591      	cmp	r9, r2
 802007a:	ddba      	ble.n	801fff2 <_dtoa_r+0xb32>
 802007c:	4659      	mov	r1, fp
 802007e:	2300      	movs	r3, #0
 8020080:	220a      	movs	r2, #10
 8020082:	4620      	mov	r0, r4
 8020084:	f000 f9ca 	bl	802041c <__multadd>
 8020088:	4683      	mov	fp, r0
 802008a:	e7eb      	b.n	8020064 <_dtoa_r+0xba4>
 802008c:	08026ad5 	.word	0x08026ad5
 8020090:	08026c59 	.word	0x08026c59
 8020094:	08026a69 	.word	0x08026a69

08020098 <__errno>:
 8020098:	4b01      	ldr	r3, [pc, #4]	; (80200a0 <__errno+0x8>)
 802009a:	6818      	ldr	r0, [r3, #0]
 802009c:	4770      	bx	lr
 802009e:	bf00      	nop
 80200a0:	20000064 	.word	0x20000064

080200a4 <__sflush_r>:
 80200a4:	898a      	ldrh	r2, [r1, #12]
 80200a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200aa:	4605      	mov	r5, r0
 80200ac:	0710      	lsls	r0, r2, #28
 80200ae:	460c      	mov	r4, r1
 80200b0:	d458      	bmi.n	8020164 <__sflush_r+0xc0>
 80200b2:	684b      	ldr	r3, [r1, #4]
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	dc05      	bgt.n	80200c4 <__sflush_r+0x20>
 80200b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	dc02      	bgt.n	80200c4 <__sflush_r+0x20>
 80200be:	2000      	movs	r0, #0
 80200c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80200c6:	2e00      	cmp	r6, #0
 80200c8:	d0f9      	beq.n	80200be <__sflush_r+0x1a>
 80200ca:	2300      	movs	r3, #0
 80200cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80200d0:	682f      	ldr	r7, [r5, #0]
 80200d2:	602b      	str	r3, [r5, #0]
 80200d4:	d032      	beq.n	802013c <__sflush_r+0x98>
 80200d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80200d8:	89a3      	ldrh	r3, [r4, #12]
 80200da:	075a      	lsls	r2, r3, #29
 80200dc:	d505      	bpl.n	80200ea <__sflush_r+0x46>
 80200de:	6863      	ldr	r3, [r4, #4]
 80200e0:	1ac0      	subs	r0, r0, r3
 80200e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80200e4:	b10b      	cbz	r3, 80200ea <__sflush_r+0x46>
 80200e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80200e8:	1ac0      	subs	r0, r0, r3
 80200ea:	2300      	movs	r3, #0
 80200ec:	4602      	mov	r2, r0
 80200ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80200f0:	6a21      	ldr	r1, [r4, #32]
 80200f2:	4628      	mov	r0, r5
 80200f4:	47b0      	blx	r6
 80200f6:	1c43      	adds	r3, r0, #1
 80200f8:	89a3      	ldrh	r3, [r4, #12]
 80200fa:	d106      	bne.n	802010a <__sflush_r+0x66>
 80200fc:	6829      	ldr	r1, [r5, #0]
 80200fe:	291d      	cmp	r1, #29
 8020100:	d82c      	bhi.n	802015c <__sflush_r+0xb8>
 8020102:	4a2a      	ldr	r2, [pc, #168]	; (80201ac <__sflush_r+0x108>)
 8020104:	40ca      	lsrs	r2, r1
 8020106:	07d6      	lsls	r6, r2, #31
 8020108:	d528      	bpl.n	802015c <__sflush_r+0xb8>
 802010a:	2200      	movs	r2, #0
 802010c:	6062      	str	r2, [r4, #4]
 802010e:	04d9      	lsls	r1, r3, #19
 8020110:	6922      	ldr	r2, [r4, #16]
 8020112:	6022      	str	r2, [r4, #0]
 8020114:	d504      	bpl.n	8020120 <__sflush_r+0x7c>
 8020116:	1c42      	adds	r2, r0, #1
 8020118:	d101      	bne.n	802011e <__sflush_r+0x7a>
 802011a:	682b      	ldr	r3, [r5, #0]
 802011c:	b903      	cbnz	r3, 8020120 <__sflush_r+0x7c>
 802011e:	6560      	str	r0, [r4, #84]	; 0x54
 8020120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020122:	602f      	str	r7, [r5, #0]
 8020124:	2900      	cmp	r1, #0
 8020126:	d0ca      	beq.n	80200be <__sflush_r+0x1a>
 8020128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802012c:	4299      	cmp	r1, r3
 802012e:	d002      	beq.n	8020136 <__sflush_r+0x92>
 8020130:	4628      	mov	r0, r5
 8020132:	f7fd ffe7 	bl	801e104 <_free_r>
 8020136:	2000      	movs	r0, #0
 8020138:	6360      	str	r0, [r4, #52]	; 0x34
 802013a:	e7c1      	b.n	80200c0 <__sflush_r+0x1c>
 802013c:	6a21      	ldr	r1, [r4, #32]
 802013e:	2301      	movs	r3, #1
 8020140:	4628      	mov	r0, r5
 8020142:	47b0      	blx	r6
 8020144:	1c41      	adds	r1, r0, #1
 8020146:	d1c7      	bne.n	80200d8 <__sflush_r+0x34>
 8020148:	682b      	ldr	r3, [r5, #0]
 802014a:	2b00      	cmp	r3, #0
 802014c:	d0c4      	beq.n	80200d8 <__sflush_r+0x34>
 802014e:	2b1d      	cmp	r3, #29
 8020150:	d001      	beq.n	8020156 <__sflush_r+0xb2>
 8020152:	2b16      	cmp	r3, #22
 8020154:	d101      	bne.n	802015a <__sflush_r+0xb6>
 8020156:	602f      	str	r7, [r5, #0]
 8020158:	e7b1      	b.n	80200be <__sflush_r+0x1a>
 802015a:	89a3      	ldrh	r3, [r4, #12]
 802015c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020160:	81a3      	strh	r3, [r4, #12]
 8020162:	e7ad      	b.n	80200c0 <__sflush_r+0x1c>
 8020164:	690f      	ldr	r7, [r1, #16]
 8020166:	2f00      	cmp	r7, #0
 8020168:	d0a9      	beq.n	80200be <__sflush_r+0x1a>
 802016a:	0793      	lsls	r3, r2, #30
 802016c:	680e      	ldr	r6, [r1, #0]
 802016e:	bf08      	it	eq
 8020170:	694b      	ldreq	r3, [r1, #20]
 8020172:	600f      	str	r7, [r1, #0]
 8020174:	bf18      	it	ne
 8020176:	2300      	movne	r3, #0
 8020178:	eba6 0807 	sub.w	r8, r6, r7
 802017c:	608b      	str	r3, [r1, #8]
 802017e:	f1b8 0f00 	cmp.w	r8, #0
 8020182:	dd9c      	ble.n	80200be <__sflush_r+0x1a>
 8020184:	6a21      	ldr	r1, [r4, #32]
 8020186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020188:	4643      	mov	r3, r8
 802018a:	463a      	mov	r2, r7
 802018c:	4628      	mov	r0, r5
 802018e:	47b0      	blx	r6
 8020190:	2800      	cmp	r0, #0
 8020192:	dc06      	bgt.n	80201a2 <__sflush_r+0xfe>
 8020194:	89a3      	ldrh	r3, [r4, #12]
 8020196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802019a:	81a3      	strh	r3, [r4, #12]
 802019c:	f04f 30ff 	mov.w	r0, #4294967295
 80201a0:	e78e      	b.n	80200c0 <__sflush_r+0x1c>
 80201a2:	4407      	add	r7, r0
 80201a4:	eba8 0800 	sub.w	r8, r8, r0
 80201a8:	e7e9      	b.n	802017e <__sflush_r+0xda>
 80201aa:	bf00      	nop
 80201ac:	20400001 	.word	0x20400001

080201b0 <_fflush_r>:
 80201b0:	b538      	push	{r3, r4, r5, lr}
 80201b2:	690b      	ldr	r3, [r1, #16]
 80201b4:	4605      	mov	r5, r0
 80201b6:	460c      	mov	r4, r1
 80201b8:	b913      	cbnz	r3, 80201c0 <_fflush_r+0x10>
 80201ba:	2500      	movs	r5, #0
 80201bc:	4628      	mov	r0, r5
 80201be:	bd38      	pop	{r3, r4, r5, pc}
 80201c0:	b118      	cbz	r0, 80201ca <_fflush_r+0x1a>
 80201c2:	6983      	ldr	r3, [r0, #24]
 80201c4:	b90b      	cbnz	r3, 80201ca <_fflush_r+0x1a>
 80201c6:	f7fd fe89 	bl	801dedc <__sinit>
 80201ca:	4b14      	ldr	r3, [pc, #80]	; (802021c <_fflush_r+0x6c>)
 80201cc:	429c      	cmp	r4, r3
 80201ce:	d11b      	bne.n	8020208 <_fflush_r+0x58>
 80201d0:	686c      	ldr	r4, [r5, #4]
 80201d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80201d6:	2b00      	cmp	r3, #0
 80201d8:	d0ef      	beq.n	80201ba <_fflush_r+0xa>
 80201da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80201dc:	07d0      	lsls	r0, r2, #31
 80201de:	d404      	bmi.n	80201ea <_fflush_r+0x3a>
 80201e0:	0599      	lsls	r1, r3, #22
 80201e2:	d402      	bmi.n	80201ea <_fflush_r+0x3a>
 80201e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201e6:	f7fd ff3c 	bl	801e062 <__retarget_lock_acquire_recursive>
 80201ea:	4628      	mov	r0, r5
 80201ec:	4621      	mov	r1, r4
 80201ee:	f7ff ff59 	bl	80200a4 <__sflush_r>
 80201f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80201f4:	07da      	lsls	r2, r3, #31
 80201f6:	4605      	mov	r5, r0
 80201f8:	d4e0      	bmi.n	80201bc <_fflush_r+0xc>
 80201fa:	89a3      	ldrh	r3, [r4, #12]
 80201fc:	059b      	lsls	r3, r3, #22
 80201fe:	d4dd      	bmi.n	80201bc <_fflush_r+0xc>
 8020200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020202:	f7fd ff2f 	bl	801e064 <__retarget_lock_release_recursive>
 8020206:	e7d9      	b.n	80201bc <_fflush_r+0xc>
 8020208:	4b05      	ldr	r3, [pc, #20]	; (8020220 <_fflush_r+0x70>)
 802020a:	429c      	cmp	r4, r3
 802020c:	d101      	bne.n	8020212 <_fflush_r+0x62>
 802020e:	68ac      	ldr	r4, [r5, #8]
 8020210:	e7df      	b.n	80201d2 <_fflush_r+0x22>
 8020212:	4b04      	ldr	r3, [pc, #16]	; (8020224 <_fflush_r+0x74>)
 8020214:	429c      	cmp	r4, r3
 8020216:	bf08      	it	eq
 8020218:	68ec      	ldreq	r4, [r5, #12]
 802021a:	e7da      	b.n	80201d2 <_fflush_r+0x22>
 802021c:	080268e0 	.word	0x080268e0
 8020220:	08026900 	.word	0x08026900
 8020224:	080268c0 	.word	0x080268c0

08020228 <fiprintf>:
 8020228:	b40e      	push	{r1, r2, r3}
 802022a:	b503      	push	{r0, r1, lr}
 802022c:	4601      	mov	r1, r0
 802022e:	ab03      	add	r3, sp, #12
 8020230:	4805      	ldr	r0, [pc, #20]	; (8020248 <fiprintf+0x20>)
 8020232:	f853 2b04 	ldr.w	r2, [r3], #4
 8020236:	6800      	ldr	r0, [r0, #0]
 8020238:	9301      	str	r3, [sp, #4]
 802023a:	f000 ff71 	bl	8021120 <_vfiprintf_r>
 802023e:	b002      	add	sp, #8
 8020240:	f85d eb04 	ldr.w	lr, [sp], #4
 8020244:	b003      	add	sp, #12
 8020246:	4770      	bx	lr
 8020248:	20000064 	.word	0x20000064

0802024c <_localeconv_r>:
 802024c:	4800      	ldr	r0, [pc, #0]	; (8020250 <_localeconv_r+0x4>)
 802024e:	4770      	bx	lr
 8020250:	200001b8 	.word	0x200001b8

08020254 <_lseek_r>:
 8020254:	b538      	push	{r3, r4, r5, lr}
 8020256:	4d07      	ldr	r5, [pc, #28]	; (8020274 <_lseek_r+0x20>)
 8020258:	4604      	mov	r4, r0
 802025a:	4608      	mov	r0, r1
 802025c:	4611      	mov	r1, r2
 802025e:	2200      	movs	r2, #0
 8020260:	602a      	str	r2, [r5, #0]
 8020262:	461a      	mov	r2, r3
 8020264:	f7e2 f910 	bl	8002488 <_lseek>
 8020268:	1c43      	adds	r3, r0, #1
 802026a:	d102      	bne.n	8020272 <_lseek_r+0x1e>
 802026c:	682b      	ldr	r3, [r5, #0]
 802026e:	b103      	cbz	r3, 8020272 <_lseek_r+0x1e>
 8020270:	6023      	str	r3, [r4, #0]
 8020272:	bd38      	pop	{r3, r4, r5, pc}
 8020274:	2001b118 	.word	0x2001b118

08020278 <__swhatbuf_r>:
 8020278:	b570      	push	{r4, r5, r6, lr}
 802027a:	460e      	mov	r6, r1
 802027c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020280:	2900      	cmp	r1, #0
 8020282:	b096      	sub	sp, #88	; 0x58
 8020284:	4614      	mov	r4, r2
 8020286:	461d      	mov	r5, r3
 8020288:	da07      	bge.n	802029a <__swhatbuf_r+0x22>
 802028a:	2300      	movs	r3, #0
 802028c:	602b      	str	r3, [r5, #0]
 802028e:	89b3      	ldrh	r3, [r6, #12]
 8020290:	061a      	lsls	r2, r3, #24
 8020292:	d410      	bmi.n	80202b6 <__swhatbuf_r+0x3e>
 8020294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020298:	e00e      	b.n	80202b8 <__swhatbuf_r+0x40>
 802029a:	466a      	mov	r2, sp
 802029c:	f001 fac8 	bl	8021830 <_fstat_r>
 80202a0:	2800      	cmp	r0, #0
 80202a2:	dbf2      	blt.n	802028a <__swhatbuf_r+0x12>
 80202a4:	9a01      	ldr	r2, [sp, #4]
 80202a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80202aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80202ae:	425a      	negs	r2, r3
 80202b0:	415a      	adcs	r2, r3
 80202b2:	602a      	str	r2, [r5, #0]
 80202b4:	e7ee      	b.n	8020294 <__swhatbuf_r+0x1c>
 80202b6:	2340      	movs	r3, #64	; 0x40
 80202b8:	2000      	movs	r0, #0
 80202ba:	6023      	str	r3, [r4, #0]
 80202bc:	b016      	add	sp, #88	; 0x58
 80202be:	bd70      	pop	{r4, r5, r6, pc}

080202c0 <__smakebuf_r>:
 80202c0:	898b      	ldrh	r3, [r1, #12]
 80202c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80202c4:	079d      	lsls	r5, r3, #30
 80202c6:	4606      	mov	r6, r0
 80202c8:	460c      	mov	r4, r1
 80202ca:	d507      	bpl.n	80202dc <__smakebuf_r+0x1c>
 80202cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80202d0:	6023      	str	r3, [r4, #0]
 80202d2:	6123      	str	r3, [r4, #16]
 80202d4:	2301      	movs	r3, #1
 80202d6:	6163      	str	r3, [r4, #20]
 80202d8:	b002      	add	sp, #8
 80202da:	bd70      	pop	{r4, r5, r6, pc}
 80202dc:	ab01      	add	r3, sp, #4
 80202de:	466a      	mov	r2, sp
 80202e0:	f7ff ffca 	bl	8020278 <__swhatbuf_r>
 80202e4:	9900      	ldr	r1, [sp, #0]
 80202e6:	4605      	mov	r5, r0
 80202e8:	4630      	mov	r0, r6
 80202ea:	f7fd ff5b 	bl	801e1a4 <_malloc_r>
 80202ee:	b948      	cbnz	r0, 8020304 <__smakebuf_r+0x44>
 80202f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80202f4:	059a      	lsls	r2, r3, #22
 80202f6:	d4ef      	bmi.n	80202d8 <__smakebuf_r+0x18>
 80202f8:	f023 0303 	bic.w	r3, r3, #3
 80202fc:	f043 0302 	orr.w	r3, r3, #2
 8020300:	81a3      	strh	r3, [r4, #12]
 8020302:	e7e3      	b.n	80202cc <__smakebuf_r+0xc>
 8020304:	4b0d      	ldr	r3, [pc, #52]	; (802033c <__smakebuf_r+0x7c>)
 8020306:	62b3      	str	r3, [r6, #40]	; 0x28
 8020308:	89a3      	ldrh	r3, [r4, #12]
 802030a:	6020      	str	r0, [r4, #0]
 802030c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020310:	81a3      	strh	r3, [r4, #12]
 8020312:	9b00      	ldr	r3, [sp, #0]
 8020314:	6163      	str	r3, [r4, #20]
 8020316:	9b01      	ldr	r3, [sp, #4]
 8020318:	6120      	str	r0, [r4, #16]
 802031a:	b15b      	cbz	r3, 8020334 <__smakebuf_r+0x74>
 802031c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020320:	4630      	mov	r0, r6
 8020322:	f001 fa97 	bl	8021854 <_isatty_r>
 8020326:	b128      	cbz	r0, 8020334 <__smakebuf_r+0x74>
 8020328:	89a3      	ldrh	r3, [r4, #12]
 802032a:	f023 0303 	bic.w	r3, r3, #3
 802032e:	f043 0301 	orr.w	r3, r3, #1
 8020332:	81a3      	strh	r3, [r4, #12]
 8020334:	89a0      	ldrh	r0, [r4, #12]
 8020336:	4305      	orrs	r5, r0
 8020338:	81a5      	strh	r5, [r4, #12]
 802033a:	e7cd      	b.n	80202d8 <__smakebuf_r+0x18>
 802033c:	0801de75 	.word	0x0801de75

08020340 <__malloc_lock>:
 8020340:	4801      	ldr	r0, [pc, #4]	; (8020348 <__malloc_lock+0x8>)
 8020342:	f7fd be8e 	b.w	801e062 <__retarget_lock_acquire_recursive>
 8020346:	bf00      	nop
 8020348:	2001b124 	.word	0x2001b124

0802034c <__malloc_unlock>:
 802034c:	4801      	ldr	r0, [pc, #4]	; (8020354 <__malloc_unlock+0x8>)
 802034e:	f7fd be89 	b.w	801e064 <__retarget_lock_release_recursive>
 8020352:	bf00      	nop
 8020354:	2001b124 	.word	0x2001b124

08020358 <_Balloc>:
 8020358:	b570      	push	{r4, r5, r6, lr}
 802035a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802035c:	4604      	mov	r4, r0
 802035e:	460d      	mov	r5, r1
 8020360:	b976      	cbnz	r6, 8020380 <_Balloc+0x28>
 8020362:	2010      	movs	r0, #16
 8020364:	f7fd fe80 	bl	801e068 <malloc>
 8020368:	4602      	mov	r2, r0
 802036a:	6260      	str	r0, [r4, #36]	; 0x24
 802036c:	b920      	cbnz	r0, 8020378 <_Balloc+0x20>
 802036e:	4b18      	ldr	r3, [pc, #96]	; (80203d0 <_Balloc+0x78>)
 8020370:	4818      	ldr	r0, [pc, #96]	; (80203d4 <_Balloc+0x7c>)
 8020372:	2166      	movs	r1, #102	; 0x66
 8020374:	f7fe ffea 	bl	801f34c <__assert_func>
 8020378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802037c:	6006      	str	r6, [r0, #0]
 802037e:	60c6      	str	r6, [r0, #12]
 8020380:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020382:	68f3      	ldr	r3, [r6, #12]
 8020384:	b183      	cbz	r3, 80203a8 <_Balloc+0x50>
 8020386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020388:	68db      	ldr	r3, [r3, #12]
 802038a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802038e:	b9b8      	cbnz	r0, 80203c0 <_Balloc+0x68>
 8020390:	2101      	movs	r1, #1
 8020392:	fa01 f605 	lsl.w	r6, r1, r5
 8020396:	1d72      	adds	r2, r6, #5
 8020398:	0092      	lsls	r2, r2, #2
 802039a:	4620      	mov	r0, r4
 802039c:	f000 fb5a 	bl	8020a54 <_calloc_r>
 80203a0:	b160      	cbz	r0, 80203bc <_Balloc+0x64>
 80203a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80203a6:	e00e      	b.n	80203c6 <_Balloc+0x6e>
 80203a8:	2221      	movs	r2, #33	; 0x21
 80203aa:	2104      	movs	r1, #4
 80203ac:	4620      	mov	r0, r4
 80203ae:	f000 fb51 	bl	8020a54 <_calloc_r>
 80203b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80203b4:	60f0      	str	r0, [r6, #12]
 80203b6:	68db      	ldr	r3, [r3, #12]
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d1e4      	bne.n	8020386 <_Balloc+0x2e>
 80203bc:	2000      	movs	r0, #0
 80203be:	bd70      	pop	{r4, r5, r6, pc}
 80203c0:	6802      	ldr	r2, [r0, #0]
 80203c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80203c6:	2300      	movs	r3, #0
 80203c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80203cc:	e7f7      	b.n	80203be <_Balloc+0x66>
 80203ce:	bf00      	nop
 80203d0:	08026956 	.word	0x08026956
 80203d4:	08026ae6 	.word	0x08026ae6

080203d8 <_Bfree>:
 80203d8:	b570      	push	{r4, r5, r6, lr}
 80203da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80203dc:	4605      	mov	r5, r0
 80203de:	460c      	mov	r4, r1
 80203e0:	b976      	cbnz	r6, 8020400 <_Bfree+0x28>
 80203e2:	2010      	movs	r0, #16
 80203e4:	f7fd fe40 	bl	801e068 <malloc>
 80203e8:	4602      	mov	r2, r0
 80203ea:	6268      	str	r0, [r5, #36]	; 0x24
 80203ec:	b920      	cbnz	r0, 80203f8 <_Bfree+0x20>
 80203ee:	4b09      	ldr	r3, [pc, #36]	; (8020414 <_Bfree+0x3c>)
 80203f0:	4809      	ldr	r0, [pc, #36]	; (8020418 <_Bfree+0x40>)
 80203f2:	218a      	movs	r1, #138	; 0x8a
 80203f4:	f7fe ffaa 	bl	801f34c <__assert_func>
 80203f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80203fc:	6006      	str	r6, [r0, #0]
 80203fe:	60c6      	str	r6, [r0, #12]
 8020400:	b13c      	cbz	r4, 8020412 <_Bfree+0x3a>
 8020402:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020404:	6862      	ldr	r2, [r4, #4]
 8020406:	68db      	ldr	r3, [r3, #12]
 8020408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802040c:	6021      	str	r1, [r4, #0]
 802040e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020412:	bd70      	pop	{r4, r5, r6, pc}
 8020414:	08026956 	.word	0x08026956
 8020418:	08026ae6 	.word	0x08026ae6

0802041c <__multadd>:
 802041c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020420:	690e      	ldr	r6, [r1, #16]
 8020422:	4607      	mov	r7, r0
 8020424:	4698      	mov	r8, r3
 8020426:	460c      	mov	r4, r1
 8020428:	f101 0014 	add.w	r0, r1, #20
 802042c:	2300      	movs	r3, #0
 802042e:	6805      	ldr	r5, [r0, #0]
 8020430:	b2a9      	uxth	r1, r5
 8020432:	fb02 8101 	mla	r1, r2, r1, r8
 8020436:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802043a:	0c2d      	lsrs	r5, r5, #16
 802043c:	fb02 c505 	mla	r5, r2, r5, ip
 8020440:	b289      	uxth	r1, r1
 8020442:	3301      	adds	r3, #1
 8020444:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020448:	429e      	cmp	r6, r3
 802044a:	f840 1b04 	str.w	r1, [r0], #4
 802044e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020452:	dcec      	bgt.n	802042e <__multadd+0x12>
 8020454:	f1b8 0f00 	cmp.w	r8, #0
 8020458:	d022      	beq.n	80204a0 <__multadd+0x84>
 802045a:	68a3      	ldr	r3, [r4, #8]
 802045c:	42b3      	cmp	r3, r6
 802045e:	dc19      	bgt.n	8020494 <__multadd+0x78>
 8020460:	6861      	ldr	r1, [r4, #4]
 8020462:	4638      	mov	r0, r7
 8020464:	3101      	adds	r1, #1
 8020466:	f7ff ff77 	bl	8020358 <_Balloc>
 802046a:	4605      	mov	r5, r0
 802046c:	b928      	cbnz	r0, 802047a <__multadd+0x5e>
 802046e:	4602      	mov	r2, r0
 8020470:	4b0d      	ldr	r3, [pc, #52]	; (80204a8 <__multadd+0x8c>)
 8020472:	480e      	ldr	r0, [pc, #56]	; (80204ac <__multadd+0x90>)
 8020474:	21b5      	movs	r1, #181	; 0xb5
 8020476:	f7fe ff69 	bl	801f34c <__assert_func>
 802047a:	6922      	ldr	r2, [r4, #16]
 802047c:	3202      	adds	r2, #2
 802047e:	f104 010c 	add.w	r1, r4, #12
 8020482:	0092      	lsls	r2, r2, #2
 8020484:	300c      	adds	r0, #12
 8020486:	f7fd fe0d 	bl	801e0a4 <memcpy>
 802048a:	4621      	mov	r1, r4
 802048c:	4638      	mov	r0, r7
 802048e:	f7ff ffa3 	bl	80203d8 <_Bfree>
 8020492:	462c      	mov	r4, r5
 8020494:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020498:	3601      	adds	r6, #1
 802049a:	f8c3 8014 	str.w	r8, [r3, #20]
 802049e:	6126      	str	r6, [r4, #16]
 80204a0:	4620      	mov	r0, r4
 80204a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80204a6:	bf00      	nop
 80204a8:	08026ad5 	.word	0x08026ad5
 80204ac:	08026ae6 	.word	0x08026ae6

080204b0 <__hi0bits>:
 80204b0:	0c03      	lsrs	r3, r0, #16
 80204b2:	041b      	lsls	r3, r3, #16
 80204b4:	b9d3      	cbnz	r3, 80204ec <__hi0bits+0x3c>
 80204b6:	0400      	lsls	r0, r0, #16
 80204b8:	2310      	movs	r3, #16
 80204ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80204be:	bf04      	itt	eq
 80204c0:	0200      	lsleq	r0, r0, #8
 80204c2:	3308      	addeq	r3, #8
 80204c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80204c8:	bf04      	itt	eq
 80204ca:	0100      	lsleq	r0, r0, #4
 80204cc:	3304      	addeq	r3, #4
 80204ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80204d2:	bf04      	itt	eq
 80204d4:	0080      	lsleq	r0, r0, #2
 80204d6:	3302      	addeq	r3, #2
 80204d8:	2800      	cmp	r0, #0
 80204da:	db05      	blt.n	80204e8 <__hi0bits+0x38>
 80204dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80204e0:	f103 0301 	add.w	r3, r3, #1
 80204e4:	bf08      	it	eq
 80204e6:	2320      	moveq	r3, #32
 80204e8:	4618      	mov	r0, r3
 80204ea:	4770      	bx	lr
 80204ec:	2300      	movs	r3, #0
 80204ee:	e7e4      	b.n	80204ba <__hi0bits+0xa>

080204f0 <__lo0bits>:
 80204f0:	6803      	ldr	r3, [r0, #0]
 80204f2:	f013 0207 	ands.w	r2, r3, #7
 80204f6:	4601      	mov	r1, r0
 80204f8:	d00b      	beq.n	8020512 <__lo0bits+0x22>
 80204fa:	07da      	lsls	r2, r3, #31
 80204fc:	d424      	bmi.n	8020548 <__lo0bits+0x58>
 80204fe:	0798      	lsls	r0, r3, #30
 8020500:	bf49      	itett	mi
 8020502:	085b      	lsrmi	r3, r3, #1
 8020504:	089b      	lsrpl	r3, r3, #2
 8020506:	2001      	movmi	r0, #1
 8020508:	600b      	strmi	r3, [r1, #0]
 802050a:	bf5c      	itt	pl
 802050c:	600b      	strpl	r3, [r1, #0]
 802050e:	2002      	movpl	r0, #2
 8020510:	4770      	bx	lr
 8020512:	b298      	uxth	r0, r3
 8020514:	b9b0      	cbnz	r0, 8020544 <__lo0bits+0x54>
 8020516:	0c1b      	lsrs	r3, r3, #16
 8020518:	2010      	movs	r0, #16
 802051a:	f013 0fff 	tst.w	r3, #255	; 0xff
 802051e:	bf04      	itt	eq
 8020520:	0a1b      	lsreq	r3, r3, #8
 8020522:	3008      	addeq	r0, #8
 8020524:	071a      	lsls	r2, r3, #28
 8020526:	bf04      	itt	eq
 8020528:	091b      	lsreq	r3, r3, #4
 802052a:	3004      	addeq	r0, #4
 802052c:	079a      	lsls	r2, r3, #30
 802052e:	bf04      	itt	eq
 8020530:	089b      	lsreq	r3, r3, #2
 8020532:	3002      	addeq	r0, #2
 8020534:	07da      	lsls	r2, r3, #31
 8020536:	d403      	bmi.n	8020540 <__lo0bits+0x50>
 8020538:	085b      	lsrs	r3, r3, #1
 802053a:	f100 0001 	add.w	r0, r0, #1
 802053e:	d005      	beq.n	802054c <__lo0bits+0x5c>
 8020540:	600b      	str	r3, [r1, #0]
 8020542:	4770      	bx	lr
 8020544:	4610      	mov	r0, r2
 8020546:	e7e8      	b.n	802051a <__lo0bits+0x2a>
 8020548:	2000      	movs	r0, #0
 802054a:	4770      	bx	lr
 802054c:	2020      	movs	r0, #32
 802054e:	4770      	bx	lr

08020550 <__i2b>:
 8020550:	b510      	push	{r4, lr}
 8020552:	460c      	mov	r4, r1
 8020554:	2101      	movs	r1, #1
 8020556:	f7ff feff 	bl	8020358 <_Balloc>
 802055a:	4602      	mov	r2, r0
 802055c:	b928      	cbnz	r0, 802056a <__i2b+0x1a>
 802055e:	4b05      	ldr	r3, [pc, #20]	; (8020574 <__i2b+0x24>)
 8020560:	4805      	ldr	r0, [pc, #20]	; (8020578 <__i2b+0x28>)
 8020562:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020566:	f7fe fef1 	bl	801f34c <__assert_func>
 802056a:	2301      	movs	r3, #1
 802056c:	6144      	str	r4, [r0, #20]
 802056e:	6103      	str	r3, [r0, #16]
 8020570:	bd10      	pop	{r4, pc}
 8020572:	bf00      	nop
 8020574:	08026ad5 	.word	0x08026ad5
 8020578:	08026ae6 	.word	0x08026ae6

0802057c <__multiply>:
 802057c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020580:	4614      	mov	r4, r2
 8020582:	690a      	ldr	r2, [r1, #16]
 8020584:	6923      	ldr	r3, [r4, #16]
 8020586:	429a      	cmp	r2, r3
 8020588:	bfb8      	it	lt
 802058a:	460b      	movlt	r3, r1
 802058c:	460d      	mov	r5, r1
 802058e:	bfbc      	itt	lt
 8020590:	4625      	movlt	r5, r4
 8020592:	461c      	movlt	r4, r3
 8020594:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8020598:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802059c:	68ab      	ldr	r3, [r5, #8]
 802059e:	6869      	ldr	r1, [r5, #4]
 80205a0:	eb0a 0709 	add.w	r7, sl, r9
 80205a4:	42bb      	cmp	r3, r7
 80205a6:	b085      	sub	sp, #20
 80205a8:	bfb8      	it	lt
 80205aa:	3101      	addlt	r1, #1
 80205ac:	f7ff fed4 	bl	8020358 <_Balloc>
 80205b0:	b930      	cbnz	r0, 80205c0 <__multiply+0x44>
 80205b2:	4602      	mov	r2, r0
 80205b4:	4b42      	ldr	r3, [pc, #264]	; (80206c0 <__multiply+0x144>)
 80205b6:	4843      	ldr	r0, [pc, #268]	; (80206c4 <__multiply+0x148>)
 80205b8:	f240 115d 	movw	r1, #349	; 0x15d
 80205bc:	f7fe fec6 	bl	801f34c <__assert_func>
 80205c0:	f100 0614 	add.w	r6, r0, #20
 80205c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80205c8:	4633      	mov	r3, r6
 80205ca:	2200      	movs	r2, #0
 80205cc:	4543      	cmp	r3, r8
 80205ce:	d31e      	bcc.n	802060e <__multiply+0x92>
 80205d0:	f105 0c14 	add.w	ip, r5, #20
 80205d4:	f104 0314 	add.w	r3, r4, #20
 80205d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80205dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80205e0:	9202      	str	r2, [sp, #8]
 80205e2:	ebac 0205 	sub.w	r2, ip, r5
 80205e6:	3a15      	subs	r2, #21
 80205e8:	f022 0203 	bic.w	r2, r2, #3
 80205ec:	3204      	adds	r2, #4
 80205ee:	f105 0115 	add.w	r1, r5, #21
 80205f2:	458c      	cmp	ip, r1
 80205f4:	bf38      	it	cc
 80205f6:	2204      	movcc	r2, #4
 80205f8:	9201      	str	r2, [sp, #4]
 80205fa:	9a02      	ldr	r2, [sp, #8]
 80205fc:	9303      	str	r3, [sp, #12]
 80205fe:	429a      	cmp	r2, r3
 8020600:	d808      	bhi.n	8020614 <__multiply+0x98>
 8020602:	2f00      	cmp	r7, #0
 8020604:	dc55      	bgt.n	80206b2 <__multiply+0x136>
 8020606:	6107      	str	r7, [r0, #16]
 8020608:	b005      	add	sp, #20
 802060a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802060e:	f843 2b04 	str.w	r2, [r3], #4
 8020612:	e7db      	b.n	80205cc <__multiply+0x50>
 8020614:	f8b3 a000 	ldrh.w	sl, [r3]
 8020618:	f1ba 0f00 	cmp.w	sl, #0
 802061c:	d020      	beq.n	8020660 <__multiply+0xe4>
 802061e:	f105 0e14 	add.w	lr, r5, #20
 8020622:	46b1      	mov	r9, r6
 8020624:	2200      	movs	r2, #0
 8020626:	f85e 4b04 	ldr.w	r4, [lr], #4
 802062a:	f8d9 b000 	ldr.w	fp, [r9]
 802062e:	b2a1      	uxth	r1, r4
 8020630:	fa1f fb8b 	uxth.w	fp, fp
 8020634:	fb0a b101 	mla	r1, sl, r1, fp
 8020638:	4411      	add	r1, r2
 802063a:	f8d9 2000 	ldr.w	r2, [r9]
 802063e:	0c24      	lsrs	r4, r4, #16
 8020640:	0c12      	lsrs	r2, r2, #16
 8020642:	fb0a 2404 	mla	r4, sl, r4, r2
 8020646:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802064a:	b289      	uxth	r1, r1
 802064c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020650:	45f4      	cmp	ip, lr
 8020652:	f849 1b04 	str.w	r1, [r9], #4
 8020656:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802065a:	d8e4      	bhi.n	8020626 <__multiply+0xaa>
 802065c:	9901      	ldr	r1, [sp, #4]
 802065e:	5072      	str	r2, [r6, r1]
 8020660:	9a03      	ldr	r2, [sp, #12]
 8020662:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8020666:	3304      	adds	r3, #4
 8020668:	f1b9 0f00 	cmp.w	r9, #0
 802066c:	d01f      	beq.n	80206ae <__multiply+0x132>
 802066e:	6834      	ldr	r4, [r6, #0]
 8020670:	f105 0114 	add.w	r1, r5, #20
 8020674:	46b6      	mov	lr, r6
 8020676:	f04f 0a00 	mov.w	sl, #0
 802067a:	880a      	ldrh	r2, [r1, #0]
 802067c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020680:	fb09 b202 	mla	r2, r9, r2, fp
 8020684:	4492      	add	sl, r2
 8020686:	b2a4      	uxth	r4, r4
 8020688:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802068c:	f84e 4b04 	str.w	r4, [lr], #4
 8020690:	f851 4b04 	ldr.w	r4, [r1], #4
 8020694:	f8be 2000 	ldrh.w	r2, [lr]
 8020698:	0c24      	lsrs	r4, r4, #16
 802069a:	fb09 2404 	mla	r4, r9, r4, r2
 802069e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80206a2:	458c      	cmp	ip, r1
 80206a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80206a8:	d8e7      	bhi.n	802067a <__multiply+0xfe>
 80206aa:	9a01      	ldr	r2, [sp, #4]
 80206ac:	50b4      	str	r4, [r6, r2]
 80206ae:	3604      	adds	r6, #4
 80206b0:	e7a3      	b.n	80205fa <__multiply+0x7e>
 80206b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d1a5      	bne.n	8020606 <__multiply+0x8a>
 80206ba:	3f01      	subs	r7, #1
 80206bc:	e7a1      	b.n	8020602 <__multiply+0x86>
 80206be:	bf00      	nop
 80206c0:	08026ad5 	.word	0x08026ad5
 80206c4:	08026ae6 	.word	0x08026ae6

080206c8 <__pow5mult>:
 80206c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80206cc:	4615      	mov	r5, r2
 80206ce:	f012 0203 	ands.w	r2, r2, #3
 80206d2:	4606      	mov	r6, r0
 80206d4:	460f      	mov	r7, r1
 80206d6:	d007      	beq.n	80206e8 <__pow5mult+0x20>
 80206d8:	4c25      	ldr	r4, [pc, #148]	; (8020770 <__pow5mult+0xa8>)
 80206da:	3a01      	subs	r2, #1
 80206dc:	2300      	movs	r3, #0
 80206de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80206e2:	f7ff fe9b 	bl	802041c <__multadd>
 80206e6:	4607      	mov	r7, r0
 80206e8:	10ad      	asrs	r5, r5, #2
 80206ea:	d03d      	beq.n	8020768 <__pow5mult+0xa0>
 80206ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80206ee:	b97c      	cbnz	r4, 8020710 <__pow5mult+0x48>
 80206f0:	2010      	movs	r0, #16
 80206f2:	f7fd fcb9 	bl	801e068 <malloc>
 80206f6:	4602      	mov	r2, r0
 80206f8:	6270      	str	r0, [r6, #36]	; 0x24
 80206fa:	b928      	cbnz	r0, 8020708 <__pow5mult+0x40>
 80206fc:	4b1d      	ldr	r3, [pc, #116]	; (8020774 <__pow5mult+0xac>)
 80206fe:	481e      	ldr	r0, [pc, #120]	; (8020778 <__pow5mult+0xb0>)
 8020700:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8020704:	f7fe fe22 	bl	801f34c <__assert_func>
 8020708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802070c:	6004      	str	r4, [r0, #0]
 802070e:	60c4      	str	r4, [r0, #12]
 8020710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020718:	b94c      	cbnz	r4, 802072e <__pow5mult+0x66>
 802071a:	f240 2171 	movw	r1, #625	; 0x271
 802071e:	4630      	mov	r0, r6
 8020720:	f7ff ff16 	bl	8020550 <__i2b>
 8020724:	2300      	movs	r3, #0
 8020726:	f8c8 0008 	str.w	r0, [r8, #8]
 802072a:	4604      	mov	r4, r0
 802072c:	6003      	str	r3, [r0, #0]
 802072e:	f04f 0900 	mov.w	r9, #0
 8020732:	07eb      	lsls	r3, r5, #31
 8020734:	d50a      	bpl.n	802074c <__pow5mult+0x84>
 8020736:	4639      	mov	r1, r7
 8020738:	4622      	mov	r2, r4
 802073a:	4630      	mov	r0, r6
 802073c:	f7ff ff1e 	bl	802057c <__multiply>
 8020740:	4639      	mov	r1, r7
 8020742:	4680      	mov	r8, r0
 8020744:	4630      	mov	r0, r6
 8020746:	f7ff fe47 	bl	80203d8 <_Bfree>
 802074a:	4647      	mov	r7, r8
 802074c:	106d      	asrs	r5, r5, #1
 802074e:	d00b      	beq.n	8020768 <__pow5mult+0xa0>
 8020750:	6820      	ldr	r0, [r4, #0]
 8020752:	b938      	cbnz	r0, 8020764 <__pow5mult+0x9c>
 8020754:	4622      	mov	r2, r4
 8020756:	4621      	mov	r1, r4
 8020758:	4630      	mov	r0, r6
 802075a:	f7ff ff0f 	bl	802057c <__multiply>
 802075e:	6020      	str	r0, [r4, #0]
 8020760:	f8c0 9000 	str.w	r9, [r0]
 8020764:	4604      	mov	r4, r0
 8020766:	e7e4      	b.n	8020732 <__pow5mult+0x6a>
 8020768:	4638      	mov	r0, r7
 802076a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802076e:	bf00      	nop
 8020770:	08026c38 	.word	0x08026c38
 8020774:	08026956 	.word	0x08026956
 8020778:	08026ae6 	.word	0x08026ae6

0802077c <__lshift>:
 802077c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020780:	460c      	mov	r4, r1
 8020782:	6849      	ldr	r1, [r1, #4]
 8020784:	6923      	ldr	r3, [r4, #16]
 8020786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802078a:	68a3      	ldr	r3, [r4, #8]
 802078c:	4607      	mov	r7, r0
 802078e:	4691      	mov	r9, r2
 8020790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020794:	f108 0601 	add.w	r6, r8, #1
 8020798:	42b3      	cmp	r3, r6
 802079a:	db0b      	blt.n	80207b4 <__lshift+0x38>
 802079c:	4638      	mov	r0, r7
 802079e:	f7ff fddb 	bl	8020358 <_Balloc>
 80207a2:	4605      	mov	r5, r0
 80207a4:	b948      	cbnz	r0, 80207ba <__lshift+0x3e>
 80207a6:	4602      	mov	r2, r0
 80207a8:	4b28      	ldr	r3, [pc, #160]	; (802084c <__lshift+0xd0>)
 80207aa:	4829      	ldr	r0, [pc, #164]	; (8020850 <__lshift+0xd4>)
 80207ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80207b0:	f7fe fdcc 	bl	801f34c <__assert_func>
 80207b4:	3101      	adds	r1, #1
 80207b6:	005b      	lsls	r3, r3, #1
 80207b8:	e7ee      	b.n	8020798 <__lshift+0x1c>
 80207ba:	2300      	movs	r3, #0
 80207bc:	f100 0114 	add.w	r1, r0, #20
 80207c0:	f100 0210 	add.w	r2, r0, #16
 80207c4:	4618      	mov	r0, r3
 80207c6:	4553      	cmp	r3, sl
 80207c8:	db33      	blt.n	8020832 <__lshift+0xb6>
 80207ca:	6920      	ldr	r0, [r4, #16]
 80207cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80207d0:	f104 0314 	add.w	r3, r4, #20
 80207d4:	f019 091f 	ands.w	r9, r9, #31
 80207d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80207dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80207e0:	d02b      	beq.n	802083a <__lshift+0xbe>
 80207e2:	f1c9 0e20 	rsb	lr, r9, #32
 80207e6:	468a      	mov	sl, r1
 80207e8:	2200      	movs	r2, #0
 80207ea:	6818      	ldr	r0, [r3, #0]
 80207ec:	fa00 f009 	lsl.w	r0, r0, r9
 80207f0:	4302      	orrs	r2, r0
 80207f2:	f84a 2b04 	str.w	r2, [sl], #4
 80207f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80207fa:	459c      	cmp	ip, r3
 80207fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8020800:	d8f3      	bhi.n	80207ea <__lshift+0x6e>
 8020802:	ebac 0304 	sub.w	r3, ip, r4
 8020806:	3b15      	subs	r3, #21
 8020808:	f023 0303 	bic.w	r3, r3, #3
 802080c:	3304      	adds	r3, #4
 802080e:	f104 0015 	add.w	r0, r4, #21
 8020812:	4584      	cmp	ip, r0
 8020814:	bf38      	it	cc
 8020816:	2304      	movcc	r3, #4
 8020818:	50ca      	str	r2, [r1, r3]
 802081a:	b10a      	cbz	r2, 8020820 <__lshift+0xa4>
 802081c:	f108 0602 	add.w	r6, r8, #2
 8020820:	3e01      	subs	r6, #1
 8020822:	4638      	mov	r0, r7
 8020824:	612e      	str	r6, [r5, #16]
 8020826:	4621      	mov	r1, r4
 8020828:	f7ff fdd6 	bl	80203d8 <_Bfree>
 802082c:	4628      	mov	r0, r5
 802082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020832:	f842 0f04 	str.w	r0, [r2, #4]!
 8020836:	3301      	adds	r3, #1
 8020838:	e7c5      	b.n	80207c6 <__lshift+0x4a>
 802083a:	3904      	subs	r1, #4
 802083c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020840:	f841 2f04 	str.w	r2, [r1, #4]!
 8020844:	459c      	cmp	ip, r3
 8020846:	d8f9      	bhi.n	802083c <__lshift+0xc0>
 8020848:	e7ea      	b.n	8020820 <__lshift+0xa4>
 802084a:	bf00      	nop
 802084c:	08026ad5 	.word	0x08026ad5
 8020850:	08026ae6 	.word	0x08026ae6

08020854 <__mcmp>:
 8020854:	b530      	push	{r4, r5, lr}
 8020856:	6902      	ldr	r2, [r0, #16]
 8020858:	690c      	ldr	r4, [r1, #16]
 802085a:	1b12      	subs	r2, r2, r4
 802085c:	d10e      	bne.n	802087c <__mcmp+0x28>
 802085e:	f100 0314 	add.w	r3, r0, #20
 8020862:	3114      	adds	r1, #20
 8020864:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020868:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802086c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020870:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020874:	42a5      	cmp	r5, r4
 8020876:	d003      	beq.n	8020880 <__mcmp+0x2c>
 8020878:	d305      	bcc.n	8020886 <__mcmp+0x32>
 802087a:	2201      	movs	r2, #1
 802087c:	4610      	mov	r0, r2
 802087e:	bd30      	pop	{r4, r5, pc}
 8020880:	4283      	cmp	r3, r0
 8020882:	d3f3      	bcc.n	802086c <__mcmp+0x18>
 8020884:	e7fa      	b.n	802087c <__mcmp+0x28>
 8020886:	f04f 32ff 	mov.w	r2, #4294967295
 802088a:	e7f7      	b.n	802087c <__mcmp+0x28>

0802088c <__mdiff>:
 802088c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020890:	460c      	mov	r4, r1
 8020892:	4606      	mov	r6, r0
 8020894:	4611      	mov	r1, r2
 8020896:	4620      	mov	r0, r4
 8020898:	4617      	mov	r7, r2
 802089a:	f7ff ffdb 	bl	8020854 <__mcmp>
 802089e:	1e05      	subs	r5, r0, #0
 80208a0:	d110      	bne.n	80208c4 <__mdiff+0x38>
 80208a2:	4629      	mov	r1, r5
 80208a4:	4630      	mov	r0, r6
 80208a6:	f7ff fd57 	bl	8020358 <_Balloc>
 80208aa:	b930      	cbnz	r0, 80208ba <__mdiff+0x2e>
 80208ac:	4b39      	ldr	r3, [pc, #228]	; (8020994 <__mdiff+0x108>)
 80208ae:	4602      	mov	r2, r0
 80208b0:	f240 2132 	movw	r1, #562	; 0x232
 80208b4:	4838      	ldr	r0, [pc, #224]	; (8020998 <__mdiff+0x10c>)
 80208b6:	f7fe fd49 	bl	801f34c <__assert_func>
 80208ba:	2301      	movs	r3, #1
 80208bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80208c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208c4:	bfa4      	itt	ge
 80208c6:	463b      	movge	r3, r7
 80208c8:	4627      	movge	r7, r4
 80208ca:	4630      	mov	r0, r6
 80208cc:	6879      	ldr	r1, [r7, #4]
 80208ce:	bfa6      	itte	ge
 80208d0:	461c      	movge	r4, r3
 80208d2:	2500      	movge	r5, #0
 80208d4:	2501      	movlt	r5, #1
 80208d6:	f7ff fd3f 	bl	8020358 <_Balloc>
 80208da:	b920      	cbnz	r0, 80208e6 <__mdiff+0x5a>
 80208dc:	4b2d      	ldr	r3, [pc, #180]	; (8020994 <__mdiff+0x108>)
 80208de:	4602      	mov	r2, r0
 80208e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80208e4:	e7e6      	b.n	80208b4 <__mdiff+0x28>
 80208e6:	693e      	ldr	r6, [r7, #16]
 80208e8:	60c5      	str	r5, [r0, #12]
 80208ea:	6925      	ldr	r5, [r4, #16]
 80208ec:	f107 0114 	add.w	r1, r7, #20
 80208f0:	f104 0914 	add.w	r9, r4, #20
 80208f4:	f100 0e14 	add.w	lr, r0, #20
 80208f8:	f107 0210 	add.w	r2, r7, #16
 80208fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020900:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8020904:	46f2      	mov	sl, lr
 8020906:	2700      	movs	r7, #0
 8020908:	f859 3b04 	ldr.w	r3, [r9], #4
 802090c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020910:	fa1f f883 	uxth.w	r8, r3
 8020914:	fa17 f78b 	uxtah	r7, r7, fp
 8020918:	0c1b      	lsrs	r3, r3, #16
 802091a:	eba7 0808 	sub.w	r8, r7, r8
 802091e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020922:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020926:	fa1f f888 	uxth.w	r8, r8
 802092a:	141f      	asrs	r7, r3, #16
 802092c:	454d      	cmp	r5, r9
 802092e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020932:	f84a 3b04 	str.w	r3, [sl], #4
 8020936:	d8e7      	bhi.n	8020908 <__mdiff+0x7c>
 8020938:	1b2b      	subs	r3, r5, r4
 802093a:	3b15      	subs	r3, #21
 802093c:	f023 0303 	bic.w	r3, r3, #3
 8020940:	3304      	adds	r3, #4
 8020942:	3415      	adds	r4, #21
 8020944:	42a5      	cmp	r5, r4
 8020946:	bf38      	it	cc
 8020948:	2304      	movcc	r3, #4
 802094a:	4419      	add	r1, r3
 802094c:	4473      	add	r3, lr
 802094e:	469e      	mov	lr, r3
 8020950:	460d      	mov	r5, r1
 8020952:	4565      	cmp	r5, ip
 8020954:	d30e      	bcc.n	8020974 <__mdiff+0xe8>
 8020956:	f10c 0203 	add.w	r2, ip, #3
 802095a:	1a52      	subs	r2, r2, r1
 802095c:	f022 0203 	bic.w	r2, r2, #3
 8020960:	3903      	subs	r1, #3
 8020962:	458c      	cmp	ip, r1
 8020964:	bf38      	it	cc
 8020966:	2200      	movcc	r2, #0
 8020968:	441a      	add	r2, r3
 802096a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802096e:	b17b      	cbz	r3, 8020990 <__mdiff+0x104>
 8020970:	6106      	str	r6, [r0, #16]
 8020972:	e7a5      	b.n	80208c0 <__mdiff+0x34>
 8020974:	f855 8b04 	ldr.w	r8, [r5], #4
 8020978:	fa17 f488 	uxtah	r4, r7, r8
 802097c:	1422      	asrs	r2, r4, #16
 802097e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8020982:	b2a4      	uxth	r4, r4
 8020984:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020988:	f84e 4b04 	str.w	r4, [lr], #4
 802098c:	1417      	asrs	r7, r2, #16
 802098e:	e7e0      	b.n	8020952 <__mdiff+0xc6>
 8020990:	3e01      	subs	r6, #1
 8020992:	e7ea      	b.n	802096a <__mdiff+0xde>
 8020994:	08026ad5 	.word	0x08026ad5
 8020998:	08026ae6 	.word	0x08026ae6

0802099c <__d2b>:
 802099c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80209a0:	4689      	mov	r9, r1
 80209a2:	2101      	movs	r1, #1
 80209a4:	ec57 6b10 	vmov	r6, r7, d0
 80209a8:	4690      	mov	r8, r2
 80209aa:	f7ff fcd5 	bl	8020358 <_Balloc>
 80209ae:	4604      	mov	r4, r0
 80209b0:	b930      	cbnz	r0, 80209c0 <__d2b+0x24>
 80209b2:	4602      	mov	r2, r0
 80209b4:	4b25      	ldr	r3, [pc, #148]	; (8020a4c <__d2b+0xb0>)
 80209b6:	4826      	ldr	r0, [pc, #152]	; (8020a50 <__d2b+0xb4>)
 80209b8:	f240 310a 	movw	r1, #778	; 0x30a
 80209bc:	f7fe fcc6 	bl	801f34c <__assert_func>
 80209c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80209c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80209c8:	bb35      	cbnz	r5, 8020a18 <__d2b+0x7c>
 80209ca:	2e00      	cmp	r6, #0
 80209cc:	9301      	str	r3, [sp, #4]
 80209ce:	d028      	beq.n	8020a22 <__d2b+0x86>
 80209d0:	4668      	mov	r0, sp
 80209d2:	9600      	str	r6, [sp, #0]
 80209d4:	f7ff fd8c 	bl	80204f0 <__lo0bits>
 80209d8:	9900      	ldr	r1, [sp, #0]
 80209da:	b300      	cbz	r0, 8020a1e <__d2b+0x82>
 80209dc:	9a01      	ldr	r2, [sp, #4]
 80209de:	f1c0 0320 	rsb	r3, r0, #32
 80209e2:	fa02 f303 	lsl.w	r3, r2, r3
 80209e6:	430b      	orrs	r3, r1
 80209e8:	40c2      	lsrs	r2, r0
 80209ea:	6163      	str	r3, [r4, #20]
 80209ec:	9201      	str	r2, [sp, #4]
 80209ee:	9b01      	ldr	r3, [sp, #4]
 80209f0:	61a3      	str	r3, [r4, #24]
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	bf14      	ite	ne
 80209f6:	2202      	movne	r2, #2
 80209f8:	2201      	moveq	r2, #1
 80209fa:	6122      	str	r2, [r4, #16]
 80209fc:	b1d5      	cbz	r5, 8020a34 <__d2b+0x98>
 80209fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020a02:	4405      	add	r5, r0
 8020a04:	f8c9 5000 	str.w	r5, [r9]
 8020a08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020a0c:	f8c8 0000 	str.w	r0, [r8]
 8020a10:	4620      	mov	r0, r4
 8020a12:	b003      	add	sp, #12
 8020a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020a18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020a1c:	e7d5      	b.n	80209ca <__d2b+0x2e>
 8020a1e:	6161      	str	r1, [r4, #20]
 8020a20:	e7e5      	b.n	80209ee <__d2b+0x52>
 8020a22:	a801      	add	r0, sp, #4
 8020a24:	f7ff fd64 	bl	80204f0 <__lo0bits>
 8020a28:	9b01      	ldr	r3, [sp, #4]
 8020a2a:	6163      	str	r3, [r4, #20]
 8020a2c:	2201      	movs	r2, #1
 8020a2e:	6122      	str	r2, [r4, #16]
 8020a30:	3020      	adds	r0, #32
 8020a32:	e7e3      	b.n	80209fc <__d2b+0x60>
 8020a34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020a38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020a3c:	f8c9 0000 	str.w	r0, [r9]
 8020a40:	6918      	ldr	r0, [r3, #16]
 8020a42:	f7ff fd35 	bl	80204b0 <__hi0bits>
 8020a46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020a4a:	e7df      	b.n	8020a0c <__d2b+0x70>
 8020a4c:	08026ad5 	.word	0x08026ad5
 8020a50:	08026ae6 	.word	0x08026ae6

08020a54 <_calloc_r>:
 8020a54:	b513      	push	{r0, r1, r4, lr}
 8020a56:	434a      	muls	r2, r1
 8020a58:	4611      	mov	r1, r2
 8020a5a:	9201      	str	r2, [sp, #4]
 8020a5c:	f7fd fba2 	bl	801e1a4 <_malloc_r>
 8020a60:	4604      	mov	r4, r0
 8020a62:	b118      	cbz	r0, 8020a6c <_calloc_r+0x18>
 8020a64:	9a01      	ldr	r2, [sp, #4]
 8020a66:	2100      	movs	r1, #0
 8020a68:	f7fd fb44 	bl	801e0f4 <memset>
 8020a6c:	4620      	mov	r0, r4
 8020a6e:	b002      	add	sp, #8
 8020a70:	bd10      	pop	{r4, pc}

08020a72 <__ssputs_r>:
 8020a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a76:	688e      	ldr	r6, [r1, #8]
 8020a78:	429e      	cmp	r6, r3
 8020a7a:	4682      	mov	sl, r0
 8020a7c:	460c      	mov	r4, r1
 8020a7e:	4690      	mov	r8, r2
 8020a80:	461f      	mov	r7, r3
 8020a82:	d838      	bhi.n	8020af6 <__ssputs_r+0x84>
 8020a84:	898a      	ldrh	r2, [r1, #12]
 8020a86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020a8a:	d032      	beq.n	8020af2 <__ssputs_r+0x80>
 8020a8c:	6825      	ldr	r5, [r4, #0]
 8020a8e:	6909      	ldr	r1, [r1, #16]
 8020a90:	eba5 0901 	sub.w	r9, r5, r1
 8020a94:	6965      	ldr	r5, [r4, #20]
 8020a96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020a9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020a9e:	3301      	adds	r3, #1
 8020aa0:	444b      	add	r3, r9
 8020aa2:	106d      	asrs	r5, r5, #1
 8020aa4:	429d      	cmp	r5, r3
 8020aa6:	bf38      	it	cc
 8020aa8:	461d      	movcc	r5, r3
 8020aaa:	0553      	lsls	r3, r2, #21
 8020aac:	d531      	bpl.n	8020b12 <__ssputs_r+0xa0>
 8020aae:	4629      	mov	r1, r5
 8020ab0:	f7fd fb78 	bl	801e1a4 <_malloc_r>
 8020ab4:	4606      	mov	r6, r0
 8020ab6:	b950      	cbnz	r0, 8020ace <__ssputs_r+0x5c>
 8020ab8:	230c      	movs	r3, #12
 8020aba:	f8ca 3000 	str.w	r3, [sl]
 8020abe:	89a3      	ldrh	r3, [r4, #12]
 8020ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ac4:	81a3      	strh	r3, [r4, #12]
 8020ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8020aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ace:	6921      	ldr	r1, [r4, #16]
 8020ad0:	464a      	mov	r2, r9
 8020ad2:	f7fd fae7 	bl	801e0a4 <memcpy>
 8020ad6:	89a3      	ldrh	r3, [r4, #12]
 8020ad8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020ae0:	81a3      	strh	r3, [r4, #12]
 8020ae2:	6126      	str	r6, [r4, #16]
 8020ae4:	6165      	str	r5, [r4, #20]
 8020ae6:	444e      	add	r6, r9
 8020ae8:	eba5 0509 	sub.w	r5, r5, r9
 8020aec:	6026      	str	r6, [r4, #0]
 8020aee:	60a5      	str	r5, [r4, #8]
 8020af0:	463e      	mov	r6, r7
 8020af2:	42be      	cmp	r6, r7
 8020af4:	d900      	bls.n	8020af8 <__ssputs_r+0x86>
 8020af6:	463e      	mov	r6, r7
 8020af8:	4632      	mov	r2, r6
 8020afa:	6820      	ldr	r0, [r4, #0]
 8020afc:	4641      	mov	r1, r8
 8020afe:	f7fd fadf 	bl	801e0c0 <memmove>
 8020b02:	68a3      	ldr	r3, [r4, #8]
 8020b04:	6822      	ldr	r2, [r4, #0]
 8020b06:	1b9b      	subs	r3, r3, r6
 8020b08:	4432      	add	r2, r6
 8020b0a:	60a3      	str	r3, [r4, #8]
 8020b0c:	6022      	str	r2, [r4, #0]
 8020b0e:	2000      	movs	r0, #0
 8020b10:	e7db      	b.n	8020aca <__ssputs_r+0x58>
 8020b12:	462a      	mov	r2, r5
 8020b14:	f000 fec0 	bl	8021898 <_realloc_r>
 8020b18:	4606      	mov	r6, r0
 8020b1a:	2800      	cmp	r0, #0
 8020b1c:	d1e1      	bne.n	8020ae2 <__ssputs_r+0x70>
 8020b1e:	6921      	ldr	r1, [r4, #16]
 8020b20:	4650      	mov	r0, sl
 8020b22:	f7fd faef 	bl	801e104 <_free_r>
 8020b26:	e7c7      	b.n	8020ab8 <__ssputs_r+0x46>

08020b28 <_svfiprintf_r>:
 8020b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b2c:	4698      	mov	r8, r3
 8020b2e:	898b      	ldrh	r3, [r1, #12]
 8020b30:	061b      	lsls	r3, r3, #24
 8020b32:	b09d      	sub	sp, #116	; 0x74
 8020b34:	4607      	mov	r7, r0
 8020b36:	460d      	mov	r5, r1
 8020b38:	4614      	mov	r4, r2
 8020b3a:	d50e      	bpl.n	8020b5a <_svfiprintf_r+0x32>
 8020b3c:	690b      	ldr	r3, [r1, #16]
 8020b3e:	b963      	cbnz	r3, 8020b5a <_svfiprintf_r+0x32>
 8020b40:	2140      	movs	r1, #64	; 0x40
 8020b42:	f7fd fb2f 	bl	801e1a4 <_malloc_r>
 8020b46:	6028      	str	r0, [r5, #0]
 8020b48:	6128      	str	r0, [r5, #16]
 8020b4a:	b920      	cbnz	r0, 8020b56 <_svfiprintf_r+0x2e>
 8020b4c:	230c      	movs	r3, #12
 8020b4e:	603b      	str	r3, [r7, #0]
 8020b50:	f04f 30ff 	mov.w	r0, #4294967295
 8020b54:	e0d1      	b.n	8020cfa <_svfiprintf_r+0x1d2>
 8020b56:	2340      	movs	r3, #64	; 0x40
 8020b58:	616b      	str	r3, [r5, #20]
 8020b5a:	2300      	movs	r3, #0
 8020b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8020b5e:	2320      	movs	r3, #32
 8020b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b68:	2330      	movs	r3, #48	; 0x30
 8020b6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020d14 <_svfiprintf_r+0x1ec>
 8020b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020b72:	f04f 0901 	mov.w	r9, #1
 8020b76:	4623      	mov	r3, r4
 8020b78:	469a      	mov	sl, r3
 8020b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b7e:	b10a      	cbz	r2, 8020b84 <_svfiprintf_r+0x5c>
 8020b80:	2a25      	cmp	r2, #37	; 0x25
 8020b82:	d1f9      	bne.n	8020b78 <_svfiprintf_r+0x50>
 8020b84:	ebba 0b04 	subs.w	fp, sl, r4
 8020b88:	d00b      	beq.n	8020ba2 <_svfiprintf_r+0x7a>
 8020b8a:	465b      	mov	r3, fp
 8020b8c:	4622      	mov	r2, r4
 8020b8e:	4629      	mov	r1, r5
 8020b90:	4638      	mov	r0, r7
 8020b92:	f7ff ff6e 	bl	8020a72 <__ssputs_r>
 8020b96:	3001      	adds	r0, #1
 8020b98:	f000 80aa 	beq.w	8020cf0 <_svfiprintf_r+0x1c8>
 8020b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b9e:	445a      	add	r2, fp
 8020ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8020ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8020ba6:	2b00      	cmp	r3, #0
 8020ba8:	f000 80a2 	beq.w	8020cf0 <_svfiprintf_r+0x1c8>
 8020bac:	2300      	movs	r3, #0
 8020bae:	f04f 32ff 	mov.w	r2, #4294967295
 8020bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020bb6:	f10a 0a01 	add.w	sl, sl, #1
 8020bba:	9304      	str	r3, [sp, #16]
 8020bbc:	9307      	str	r3, [sp, #28]
 8020bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8020bc4:	4654      	mov	r4, sl
 8020bc6:	2205      	movs	r2, #5
 8020bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020bcc:	4851      	ldr	r0, [pc, #324]	; (8020d14 <_svfiprintf_r+0x1ec>)
 8020bce:	f7df fb07 	bl	80001e0 <memchr>
 8020bd2:	9a04      	ldr	r2, [sp, #16]
 8020bd4:	b9d8      	cbnz	r0, 8020c0e <_svfiprintf_r+0xe6>
 8020bd6:	06d0      	lsls	r0, r2, #27
 8020bd8:	bf44      	itt	mi
 8020bda:	2320      	movmi	r3, #32
 8020bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020be0:	0711      	lsls	r1, r2, #28
 8020be2:	bf44      	itt	mi
 8020be4:	232b      	movmi	r3, #43	; 0x2b
 8020be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020bea:	f89a 3000 	ldrb.w	r3, [sl]
 8020bee:	2b2a      	cmp	r3, #42	; 0x2a
 8020bf0:	d015      	beq.n	8020c1e <_svfiprintf_r+0xf6>
 8020bf2:	9a07      	ldr	r2, [sp, #28]
 8020bf4:	4654      	mov	r4, sl
 8020bf6:	2000      	movs	r0, #0
 8020bf8:	f04f 0c0a 	mov.w	ip, #10
 8020bfc:	4621      	mov	r1, r4
 8020bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020c02:	3b30      	subs	r3, #48	; 0x30
 8020c04:	2b09      	cmp	r3, #9
 8020c06:	d94e      	bls.n	8020ca6 <_svfiprintf_r+0x17e>
 8020c08:	b1b0      	cbz	r0, 8020c38 <_svfiprintf_r+0x110>
 8020c0a:	9207      	str	r2, [sp, #28]
 8020c0c:	e014      	b.n	8020c38 <_svfiprintf_r+0x110>
 8020c0e:	eba0 0308 	sub.w	r3, r0, r8
 8020c12:	fa09 f303 	lsl.w	r3, r9, r3
 8020c16:	4313      	orrs	r3, r2
 8020c18:	9304      	str	r3, [sp, #16]
 8020c1a:	46a2      	mov	sl, r4
 8020c1c:	e7d2      	b.n	8020bc4 <_svfiprintf_r+0x9c>
 8020c1e:	9b03      	ldr	r3, [sp, #12]
 8020c20:	1d19      	adds	r1, r3, #4
 8020c22:	681b      	ldr	r3, [r3, #0]
 8020c24:	9103      	str	r1, [sp, #12]
 8020c26:	2b00      	cmp	r3, #0
 8020c28:	bfbb      	ittet	lt
 8020c2a:	425b      	neglt	r3, r3
 8020c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8020c30:	9307      	strge	r3, [sp, #28]
 8020c32:	9307      	strlt	r3, [sp, #28]
 8020c34:	bfb8      	it	lt
 8020c36:	9204      	strlt	r2, [sp, #16]
 8020c38:	7823      	ldrb	r3, [r4, #0]
 8020c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8020c3c:	d10c      	bne.n	8020c58 <_svfiprintf_r+0x130>
 8020c3e:	7863      	ldrb	r3, [r4, #1]
 8020c40:	2b2a      	cmp	r3, #42	; 0x2a
 8020c42:	d135      	bne.n	8020cb0 <_svfiprintf_r+0x188>
 8020c44:	9b03      	ldr	r3, [sp, #12]
 8020c46:	1d1a      	adds	r2, r3, #4
 8020c48:	681b      	ldr	r3, [r3, #0]
 8020c4a:	9203      	str	r2, [sp, #12]
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	bfb8      	it	lt
 8020c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8020c54:	3402      	adds	r4, #2
 8020c56:	9305      	str	r3, [sp, #20]
 8020c58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020d24 <_svfiprintf_r+0x1fc>
 8020c5c:	7821      	ldrb	r1, [r4, #0]
 8020c5e:	2203      	movs	r2, #3
 8020c60:	4650      	mov	r0, sl
 8020c62:	f7df fabd 	bl	80001e0 <memchr>
 8020c66:	b140      	cbz	r0, 8020c7a <_svfiprintf_r+0x152>
 8020c68:	2340      	movs	r3, #64	; 0x40
 8020c6a:	eba0 000a 	sub.w	r0, r0, sl
 8020c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8020c72:	9b04      	ldr	r3, [sp, #16]
 8020c74:	4303      	orrs	r3, r0
 8020c76:	3401      	adds	r4, #1
 8020c78:	9304      	str	r3, [sp, #16]
 8020c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c7e:	4826      	ldr	r0, [pc, #152]	; (8020d18 <_svfiprintf_r+0x1f0>)
 8020c80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020c84:	2206      	movs	r2, #6
 8020c86:	f7df faab 	bl	80001e0 <memchr>
 8020c8a:	2800      	cmp	r0, #0
 8020c8c:	d038      	beq.n	8020d00 <_svfiprintf_r+0x1d8>
 8020c8e:	4b23      	ldr	r3, [pc, #140]	; (8020d1c <_svfiprintf_r+0x1f4>)
 8020c90:	bb1b      	cbnz	r3, 8020cda <_svfiprintf_r+0x1b2>
 8020c92:	9b03      	ldr	r3, [sp, #12]
 8020c94:	3307      	adds	r3, #7
 8020c96:	f023 0307 	bic.w	r3, r3, #7
 8020c9a:	3308      	adds	r3, #8
 8020c9c:	9303      	str	r3, [sp, #12]
 8020c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ca0:	4433      	add	r3, r6
 8020ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8020ca4:	e767      	b.n	8020b76 <_svfiprintf_r+0x4e>
 8020ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8020caa:	460c      	mov	r4, r1
 8020cac:	2001      	movs	r0, #1
 8020cae:	e7a5      	b.n	8020bfc <_svfiprintf_r+0xd4>
 8020cb0:	2300      	movs	r3, #0
 8020cb2:	3401      	adds	r4, #1
 8020cb4:	9305      	str	r3, [sp, #20]
 8020cb6:	4619      	mov	r1, r3
 8020cb8:	f04f 0c0a 	mov.w	ip, #10
 8020cbc:	4620      	mov	r0, r4
 8020cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020cc2:	3a30      	subs	r2, #48	; 0x30
 8020cc4:	2a09      	cmp	r2, #9
 8020cc6:	d903      	bls.n	8020cd0 <_svfiprintf_r+0x1a8>
 8020cc8:	2b00      	cmp	r3, #0
 8020cca:	d0c5      	beq.n	8020c58 <_svfiprintf_r+0x130>
 8020ccc:	9105      	str	r1, [sp, #20]
 8020cce:	e7c3      	b.n	8020c58 <_svfiprintf_r+0x130>
 8020cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8020cd4:	4604      	mov	r4, r0
 8020cd6:	2301      	movs	r3, #1
 8020cd8:	e7f0      	b.n	8020cbc <_svfiprintf_r+0x194>
 8020cda:	ab03      	add	r3, sp, #12
 8020cdc:	9300      	str	r3, [sp, #0]
 8020cde:	462a      	mov	r2, r5
 8020ce0:	4b0f      	ldr	r3, [pc, #60]	; (8020d20 <_svfiprintf_r+0x1f8>)
 8020ce2:	a904      	add	r1, sp, #16
 8020ce4:	4638      	mov	r0, r7
 8020ce6:	f7fd fb57 	bl	801e398 <_printf_float>
 8020cea:	1c42      	adds	r2, r0, #1
 8020cec:	4606      	mov	r6, r0
 8020cee:	d1d6      	bne.n	8020c9e <_svfiprintf_r+0x176>
 8020cf0:	89ab      	ldrh	r3, [r5, #12]
 8020cf2:	065b      	lsls	r3, r3, #25
 8020cf4:	f53f af2c 	bmi.w	8020b50 <_svfiprintf_r+0x28>
 8020cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020cfa:	b01d      	add	sp, #116	; 0x74
 8020cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d00:	ab03      	add	r3, sp, #12
 8020d02:	9300      	str	r3, [sp, #0]
 8020d04:	462a      	mov	r2, r5
 8020d06:	4b06      	ldr	r3, [pc, #24]	; (8020d20 <_svfiprintf_r+0x1f8>)
 8020d08:	a904      	add	r1, sp, #16
 8020d0a:	4638      	mov	r0, r7
 8020d0c:	f7fd fde8 	bl	801e8e0 <_printf_i>
 8020d10:	e7eb      	b.n	8020cea <_svfiprintf_r+0x1c2>
 8020d12:	bf00      	nop
 8020d14:	08026c44 	.word	0x08026c44
 8020d18:	08026c4e 	.word	0x08026c4e
 8020d1c:	0801e399 	.word	0x0801e399
 8020d20:	08020a73 	.word	0x08020a73
 8020d24:	08026c4a 	.word	0x08026c4a

08020d28 <_sungetc_r>:
 8020d28:	b538      	push	{r3, r4, r5, lr}
 8020d2a:	1c4b      	adds	r3, r1, #1
 8020d2c:	4614      	mov	r4, r2
 8020d2e:	d103      	bne.n	8020d38 <_sungetc_r+0x10>
 8020d30:	f04f 35ff 	mov.w	r5, #4294967295
 8020d34:	4628      	mov	r0, r5
 8020d36:	bd38      	pop	{r3, r4, r5, pc}
 8020d38:	8993      	ldrh	r3, [r2, #12]
 8020d3a:	f023 0320 	bic.w	r3, r3, #32
 8020d3e:	8193      	strh	r3, [r2, #12]
 8020d40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020d42:	6852      	ldr	r2, [r2, #4]
 8020d44:	b2cd      	uxtb	r5, r1
 8020d46:	b18b      	cbz	r3, 8020d6c <_sungetc_r+0x44>
 8020d48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020d4a:	4293      	cmp	r3, r2
 8020d4c:	dd08      	ble.n	8020d60 <_sungetc_r+0x38>
 8020d4e:	6823      	ldr	r3, [r4, #0]
 8020d50:	1e5a      	subs	r2, r3, #1
 8020d52:	6022      	str	r2, [r4, #0]
 8020d54:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020d58:	6863      	ldr	r3, [r4, #4]
 8020d5a:	3301      	adds	r3, #1
 8020d5c:	6063      	str	r3, [r4, #4]
 8020d5e:	e7e9      	b.n	8020d34 <_sungetc_r+0xc>
 8020d60:	4621      	mov	r1, r4
 8020d62:	f000 fd23 	bl	80217ac <__submore>
 8020d66:	2800      	cmp	r0, #0
 8020d68:	d0f1      	beq.n	8020d4e <_sungetc_r+0x26>
 8020d6a:	e7e1      	b.n	8020d30 <_sungetc_r+0x8>
 8020d6c:	6921      	ldr	r1, [r4, #16]
 8020d6e:	6823      	ldr	r3, [r4, #0]
 8020d70:	b151      	cbz	r1, 8020d88 <_sungetc_r+0x60>
 8020d72:	4299      	cmp	r1, r3
 8020d74:	d208      	bcs.n	8020d88 <_sungetc_r+0x60>
 8020d76:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020d7a:	42a9      	cmp	r1, r5
 8020d7c:	d104      	bne.n	8020d88 <_sungetc_r+0x60>
 8020d7e:	3b01      	subs	r3, #1
 8020d80:	3201      	adds	r2, #1
 8020d82:	6023      	str	r3, [r4, #0]
 8020d84:	6062      	str	r2, [r4, #4]
 8020d86:	e7d5      	b.n	8020d34 <_sungetc_r+0xc>
 8020d88:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020d90:	6363      	str	r3, [r4, #52]	; 0x34
 8020d92:	2303      	movs	r3, #3
 8020d94:	63a3      	str	r3, [r4, #56]	; 0x38
 8020d96:	4623      	mov	r3, r4
 8020d98:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020d9c:	6023      	str	r3, [r4, #0]
 8020d9e:	2301      	movs	r3, #1
 8020da0:	e7dc      	b.n	8020d5c <_sungetc_r+0x34>

08020da2 <__ssrefill_r>:
 8020da2:	b510      	push	{r4, lr}
 8020da4:	460c      	mov	r4, r1
 8020da6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020da8:	b169      	cbz	r1, 8020dc6 <__ssrefill_r+0x24>
 8020daa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020dae:	4299      	cmp	r1, r3
 8020db0:	d001      	beq.n	8020db6 <__ssrefill_r+0x14>
 8020db2:	f7fd f9a7 	bl	801e104 <_free_r>
 8020db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020db8:	6063      	str	r3, [r4, #4]
 8020dba:	2000      	movs	r0, #0
 8020dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8020dbe:	b113      	cbz	r3, 8020dc6 <__ssrefill_r+0x24>
 8020dc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020dc2:	6023      	str	r3, [r4, #0]
 8020dc4:	bd10      	pop	{r4, pc}
 8020dc6:	6923      	ldr	r3, [r4, #16]
 8020dc8:	6023      	str	r3, [r4, #0]
 8020dca:	2300      	movs	r3, #0
 8020dcc:	6063      	str	r3, [r4, #4]
 8020dce:	89a3      	ldrh	r3, [r4, #12]
 8020dd0:	f043 0320 	orr.w	r3, r3, #32
 8020dd4:	81a3      	strh	r3, [r4, #12]
 8020dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8020dda:	e7f3      	b.n	8020dc4 <__ssrefill_r+0x22>

08020ddc <__ssvfiscanf_r>:
 8020ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020de0:	460c      	mov	r4, r1
 8020de2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8020de6:	2100      	movs	r1, #0
 8020de8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020dec:	49b2      	ldr	r1, [pc, #712]	; (80210b8 <__ssvfiscanf_r+0x2dc>)
 8020dee:	91a0      	str	r1, [sp, #640]	; 0x280
 8020df0:	f10d 0804 	add.w	r8, sp, #4
 8020df4:	49b1      	ldr	r1, [pc, #708]	; (80210bc <__ssvfiscanf_r+0x2e0>)
 8020df6:	4fb2      	ldr	r7, [pc, #712]	; (80210c0 <__ssvfiscanf_r+0x2e4>)
 8020df8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80210c4 <__ssvfiscanf_r+0x2e8>
 8020dfc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020e00:	4606      	mov	r6, r0
 8020e02:	91a1      	str	r1, [sp, #644]	; 0x284
 8020e04:	9300      	str	r3, [sp, #0]
 8020e06:	f892 a000 	ldrb.w	sl, [r2]
 8020e0a:	f1ba 0f00 	cmp.w	sl, #0
 8020e0e:	f000 8151 	beq.w	80210b4 <__ssvfiscanf_r+0x2d8>
 8020e12:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8020e16:	f013 0308 	ands.w	r3, r3, #8
 8020e1a:	f102 0501 	add.w	r5, r2, #1
 8020e1e:	d019      	beq.n	8020e54 <__ssvfiscanf_r+0x78>
 8020e20:	6863      	ldr	r3, [r4, #4]
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	dd0f      	ble.n	8020e46 <__ssvfiscanf_r+0x6a>
 8020e26:	6823      	ldr	r3, [r4, #0]
 8020e28:	781a      	ldrb	r2, [r3, #0]
 8020e2a:	5cba      	ldrb	r2, [r7, r2]
 8020e2c:	0712      	lsls	r2, r2, #28
 8020e2e:	d401      	bmi.n	8020e34 <__ssvfiscanf_r+0x58>
 8020e30:	462a      	mov	r2, r5
 8020e32:	e7e8      	b.n	8020e06 <__ssvfiscanf_r+0x2a>
 8020e34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020e36:	3201      	adds	r2, #1
 8020e38:	9245      	str	r2, [sp, #276]	; 0x114
 8020e3a:	6862      	ldr	r2, [r4, #4]
 8020e3c:	3301      	adds	r3, #1
 8020e3e:	3a01      	subs	r2, #1
 8020e40:	6062      	str	r2, [r4, #4]
 8020e42:	6023      	str	r3, [r4, #0]
 8020e44:	e7ec      	b.n	8020e20 <__ssvfiscanf_r+0x44>
 8020e46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020e48:	4621      	mov	r1, r4
 8020e4a:	4630      	mov	r0, r6
 8020e4c:	4798      	blx	r3
 8020e4e:	2800      	cmp	r0, #0
 8020e50:	d0e9      	beq.n	8020e26 <__ssvfiscanf_r+0x4a>
 8020e52:	e7ed      	b.n	8020e30 <__ssvfiscanf_r+0x54>
 8020e54:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020e58:	f040 8083 	bne.w	8020f62 <__ssvfiscanf_r+0x186>
 8020e5c:	9341      	str	r3, [sp, #260]	; 0x104
 8020e5e:	9343      	str	r3, [sp, #268]	; 0x10c
 8020e60:	7853      	ldrb	r3, [r2, #1]
 8020e62:	2b2a      	cmp	r3, #42	; 0x2a
 8020e64:	bf02      	ittt	eq
 8020e66:	2310      	moveq	r3, #16
 8020e68:	1c95      	addeq	r5, r2, #2
 8020e6a:	9341      	streq	r3, [sp, #260]	; 0x104
 8020e6c:	220a      	movs	r2, #10
 8020e6e:	46ab      	mov	fp, r5
 8020e70:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8020e74:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020e78:	2b09      	cmp	r3, #9
 8020e7a:	d91d      	bls.n	8020eb8 <__ssvfiscanf_r+0xdc>
 8020e7c:	4891      	ldr	r0, [pc, #580]	; (80210c4 <__ssvfiscanf_r+0x2e8>)
 8020e7e:	2203      	movs	r2, #3
 8020e80:	f7df f9ae 	bl	80001e0 <memchr>
 8020e84:	b140      	cbz	r0, 8020e98 <__ssvfiscanf_r+0xbc>
 8020e86:	2301      	movs	r3, #1
 8020e88:	eba0 0009 	sub.w	r0, r0, r9
 8020e8c:	fa03 f000 	lsl.w	r0, r3, r0
 8020e90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020e92:	4318      	orrs	r0, r3
 8020e94:	9041      	str	r0, [sp, #260]	; 0x104
 8020e96:	465d      	mov	r5, fp
 8020e98:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020e9c:	2b78      	cmp	r3, #120	; 0x78
 8020e9e:	d806      	bhi.n	8020eae <__ssvfiscanf_r+0xd2>
 8020ea0:	2b57      	cmp	r3, #87	; 0x57
 8020ea2:	d810      	bhi.n	8020ec6 <__ssvfiscanf_r+0xea>
 8020ea4:	2b25      	cmp	r3, #37	; 0x25
 8020ea6:	d05c      	beq.n	8020f62 <__ssvfiscanf_r+0x186>
 8020ea8:	d856      	bhi.n	8020f58 <__ssvfiscanf_r+0x17c>
 8020eaa:	2b00      	cmp	r3, #0
 8020eac:	d074      	beq.n	8020f98 <__ssvfiscanf_r+0x1bc>
 8020eae:	2303      	movs	r3, #3
 8020eb0:	9347      	str	r3, [sp, #284]	; 0x11c
 8020eb2:	230a      	movs	r3, #10
 8020eb4:	9342      	str	r3, [sp, #264]	; 0x108
 8020eb6:	e081      	b.n	8020fbc <__ssvfiscanf_r+0x1e0>
 8020eb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020eba:	fb02 1303 	mla	r3, r2, r3, r1
 8020ebe:	3b30      	subs	r3, #48	; 0x30
 8020ec0:	9343      	str	r3, [sp, #268]	; 0x10c
 8020ec2:	465d      	mov	r5, fp
 8020ec4:	e7d3      	b.n	8020e6e <__ssvfiscanf_r+0x92>
 8020ec6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020eca:	2a20      	cmp	r2, #32
 8020ecc:	d8ef      	bhi.n	8020eae <__ssvfiscanf_r+0xd2>
 8020ece:	a101      	add	r1, pc, #4	; (adr r1, 8020ed4 <__ssvfiscanf_r+0xf8>)
 8020ed0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020ed4:	08020fa7 	.word	0x08020fa7
 8020ed8:	08020eaf 	.word	0x08020eaf
 8020edc:	08020eaf 	.word	0x08020eaf
 8020ee0:	08021005 	.word	0x08021005
 8020ee4:	08020eaf 	.word	0x08020eaf
 8020ee8:	08020eaf 	.word	0x08020eaf
 8020eec:	08020eaf 	.word	0x08020eaf
 8020ef0:	08020eaf 	.word	0x08020eaf
 8020ef4:	08020eaf 	.word	0x08020eaf
 8020ef8:	08020eaf 	.word	0x08020eaf
 8020efc:	08020eaf 	.word	0x08020eaf
 8020f00:	0802101b 	.word	0x0802101b
 8020f04:	08020ff1 	.word	0x08020ff1
 8020f08:	08020f5f 	.word	0x08020f5f
 8020f0c:	08020f5f 	.word	0x08020f5f
 8020f10:	08020f5f 	.word	0x08020f5f
 8020f14:	08020eaf 	.word	0x08020eaf
 8020f18:	08020ff5 	.word	0x08020ff5
 8020f1c:	08020eaf 	.word	0x08020eaf
 8020f20:	08020eaf 	.word	0x08020eaf
 8020f24:	08020eaf 	.word	0x08020eaf
 8020f28:	08020eaf 	.word	0x08020eaf
 8020f2c:	0802102b 	.word	0x0802102b
 8020f30:	08020ffd 	.word	0x08020ffd
 8020f34:	08020f9f 	.word	0x08020f9f
 8020f38:	08020eaf 	.word	0x08020eaf
 8020f3c:	08020eaf 	.word	0x08020eaf
 8020f40:	08021027 	.word	0x08021027
 8020f44:	08020eaf 	.word	0x08020eaf
 8020f48:	08020ff1 	.word	0x08020ff1
 8020f4c:	08020eaf 	.word	0x08020eaf
 8020f50:	08020eaf 	.word	0x08020eaf
 8020f54:	08020fa7 	.word	0x08020fa7
 8020f58:	3b45      	subs	r3, #69	; 0x45
 8020f5a:	2b02      	cmp	r3, #2
 8020f5c:	d8a7      	bhi.n	8020eae <__ssvfiscanf_r+0xd2>
 8020f5e:	2305      	movs	r3, #5
 8020f60:	e02b      	b.n	8020fba <__ssvfiscanf_r+0x1de>
 8020f62:	6863      	ldr	r3, [r4, #4]
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	dd0d      	ble.n	8020f84 <__ssvfiscanf_r+0x1a8>
 8020f68:	6823      	ldr	r3, [r4, #0]
 8020f6a:	781a      	ldrb	r2, [r3, #0]
 8020f6c:	4552      	cmp	r2, sl
 8020f6e:	f040 80a1 	bne.w	80210b4 <__ssvfiscanf_r+0x2d8>
 8020f72:	3301      	adds	r3, #1
 8020f74:	6862      	ldr	r2, [r4, #4]
 8020f76:	6023      	str	r3, [r4, #0]
 8020f78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020f7a:	3a01      	subs	r2, #1
 8020f7c:	3301      	adds	r3, #1
 8020f7e:	6062      	str	r2, [r4, #4]
 8020f80:	9345      	str	r3, [sp, #276]	; 0x114
 8020f82:	e755      	b.n	8020e30 <__ssvfiscanf_r+0x54>
 8020f84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020f86:	4621      	mov	r1, r4
 8020f88:	4630      	mov	r0, r6
 8020f8a:	4798      	blx	r3
 8020f8c:	2800      	cmp	r0, #0
 8020f8e:	d0eb      	beq.n	8020f68 <__ssvfiscanf_r+0x18c>
 8020f90:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020f92:	2800      	cmp	r0, #0
 8020f94:	f040 8084 	bne.w	80210a0 <__ssvfiscanf_r+0x2c4>
 8020f98:	f04f 30ff 	mov.w	r0, #4294967295
 8020f9c:	e086      	b.n	80210ac <__ssvfiscanf_r+0x2d0>
 8020f9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020fa0:	f042 0220 	orr.w	r2, r2, #32
 8020fa4:	9241      	str	r2, [sp, #260]	; 0x104
 8020fa6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020fac:	9241      	str	r2, [sp, #260]	; 0x104
 8020fae:	2210      	movs	r2, #16
 8020fb0:	2b6f      	cmp	r3, #111	; 0x6f
 8020fb2:	9242      	str	r2, [sp, #264]	; 0x108
 8020fb4:	bf34      	ite	cc
 8020fb6:	2303      	movcc	r3, #3
 8020fb8:	2304      	movcs	r3, #4
 8020fba:	9347      	str	r3, [sp, #284]	; 0x11c
 8020fbc:	6863      	ldr	r3, [r4, #4]
 8020fbe:	2b00      	cmp	r3, #0
 8020fc0:	dd41      	ble.n	8021046 <__ssvfiscanf_r+0x26a>
 8020fc2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020fc4:	0659      	lsls	r1, r3, #25
 8020fc6:	d404      	bmi.n	8020fd2 <__ssvfiscanf_r+0x1f6>
 8020fc8:	6823      	ldr	r3, [r4, #0]
 8020fca:	781a      	ldrb	r2, [r3, #0]
 8020fcc:	5cba      	ldrb	r2, [r7, r2]
 8020fce:	0712      	lsls	r2, r2, #28
 8020fd0:	d440      	bmi.n	8021054 <__ssvfiscanf_r+0x278>
 8020fd2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020fd4:	2b02      	cmp	r3, #2
 8020fd6:	dc4f      	bgt.n	8021078 <__ssvfiscanf_r+0x29c>
 8020fd8:	466b      	mov	r3, sp
 8020fda:	4622      	mov	r2, r4
 8020fdc:	a941      	add	r1, sp, #260	; 0x104
 8020fde:	4630      	mov	r0, r6
 8020fe0:	f000 f9ce 	bl	8021380 <_scanf_chars>
 8020fe4:	2801      	cmp	r0, #1
 8020fe6:	d065      	beq.n	80210b4 <__ssvfiscanf_r+0x2d8>
 8020fe8:	2802      	cmp	r0, #2
 8020fea:	f47f af21 	bne.w	8020e30 <__ssvfiscanf_r+0x54>
 8020fee:	e7cf      	b.n	8020f90 <__ssvfiscanf_r+0x1b4>
 8020ff0:	220a      	movs	r2, #10
 8020ff2:	e7dd      	b.n	8020fb0 <__ssvfiscanf_r+0x1d4>
 8020ff4:	2300      	movs	r3, #0
 8020ff6:	9342      	str	r3, [sp, #264]	; 0x108
 8020ff8:	2303      	movs	r3, #3
 8020ffa:	e7de      	b.n	8020fba <__ssvfiscanf_r+0x1de>
 8020ffc:	2308      	movs	r3, #8
 8020ffe:	9342      	str	r3, [sp, #264]	; 0x108
 8021000:	2304      	movs	r3, #4
 8021002:	e7da      	b.n	8020fba <__ssvfiscanf_r+0x1de>
 8021004:	4629      	mov	r1, r5
 8021006:	4640      	mov	r0, r8
 8021008:	f000 fb18 	bl	802163c <__sccl>
 802100c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802100e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021012:	9341      	str	r3, [sp, #260]	; 0x104
 8021014:	4605      	mov	r5, r0
 8021016:	2301      	movs	r3, #1
 8021018:	e7cf      	b.n	8020fba <__ssvfiscanf_r+0x1de>
 802101a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021020:	9341      	str	r3, [sp, #260]	; 0x104
 8021022:	2300      	movs	r3, #0
 8021024:	e7c9      	b.n	8020fba <__ssvfiscanf_r+0x1de>
 8021026:	2302      	movs	r3, #2
 8021028:	e7c7      	b.n	8020fba <__ssvfiscanf_r+0x1de>
 802102a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802102c:	06c3      	lsls	r3, r0, #27
 802102e:	f53f aeff 	bmi.w	8020e30 <__ssvfiscanf_r+0x54>
 8021032:	9b00      	ldr	r3, [sp, #0]
 8021034:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021036:	1d19      	adds	r1, r3, #4
 8021038:	9100      	str	r1, [sp, #0]
 802103a:	681b      	ldr	r3, [r3, #0]
 802103c:	07c0      	lsls	r0, r0, #31
 802103e:	bf4c      	ite	mi
 8021040:	801a      	strhmi	r2, [r3, #0]
 8021042:	601a      	strpl	r2, [r3, #0]
 8021044:	e6f4      	b.n	8020e30 <__ssvfiscanf_r+0x54>
 8021046:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021048:	4621      	mov	r1, r4
 802104a:	4630      	mov	r0, r6
 802104c:	4798      	blx	r3
 802104e:	2800      	cmp	r0, #0
 8021050:	d0b7      	beq.n	8020fc2 <__ssvfiscanf_r+0x1e6>
 8021052:	e79d      	b.n	8020f90 <__ssvfiscanf_r+0x1b4>
 8021054:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021056:	3201      	adds	r2, #1
 8021058:	9245      	str	r2, [sp, #276]	; 0x114
 802105a:	6862      	ldr	r2, [r4, #4]
 802105c:	3a01      	subs	r2, #1
 802105e:	2a00      	cmp	r2, #0
 8021060:	6062      	str	r2, [r4, #4]
 8021062:	dd02      	ble.n	802106a <__ssvfiscanf_r+0x28e>
 8021064:	3301      	adds	r3, #1
 8021066:	6023      	str	r3, [r4, #0]
 8021068:	e7ae      	b.n	8020fc8 <__ssvfiscanf_r+0x1ec>
 802106a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802106c:	4621      	mov	r1, r4
 802106e:	4630      	mov	r0, r6
 8021070:	4798      	blx	r3
 8021072:	2800      	cmp	r0, #0
 8021074:	d0a8      	beq.n	8020fc8 <__ssvfiscanf_r+0x1ec>
 8021076:	e78b      	b.n	8020f90 <__ssvfiscanf_r+0x1b4>
 8021078:	2b04      	cmp	r3, #4
 802107a:	dc06      	bgt.n	802108a <__ssvfiscanf_r+0x2ae>
 802107c:	466b      	mov	r3, sp
 802107e:	4622      	mov	r2, r4
 8021080:	a941      	add	r1, sp, #260	; 0x104
 8021082:	4630      	mov	r0, r6
 8021084:	f000 f9d4 	bl	8021430 <_scanf_i>
 8021088:	e7ac      	b.n	8020fe4 <__ssvfiscanf_r+0x208>
 802108a:	4b0f      	ldr	r3, [pc, #60]	; (80210c8 <__ssvfiscanf_r+0x2ec>)
 802108c:	2b00      	cmp	r3, #0
 802108e:	f43f aecf 	beq.w	8020e30 <__ssvfiscanf_r+0x54>
 8021092:	466b      	mov	r3, sp
 8021094:	4622      	mov	r2, r4
 8021096:	a941      	add	r1, sp, #260	; 0x104
 8021098:	4630      	mov	r0, r6
 802109a:	f3af 8000 	nop.w
 802109e:	e7a1      	b.n	8020fe4 <__ssvfiscanf_r+0x208>
 80210a0:	89a3      	ldrh	r3, [r4, #12]
 80210a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80210a6:	bf18      	it	ne
 80210a8:	f04f 30ff 	movne.w	r0, #4294967295
 80210ac:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80210b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80210b6:	e7f9      	b.n	80210ac <__ssvfiscanf_r+0x2d0>
 80210b8:	08020d29 	.word	0x08020d29
 80210bc:	08020da3 	.word	0x08020da3
 80210c0:	080267bd 	.word	0x080267bd
 80210c4:	08026c4a 	.word	0x08026c4a
 80210c8:	00000000 	.word	0x00000000

080210cc <__sfputc_r>:
 80210cc:	6893      	ldr	r3, [r2, #8]
 80210ce:	3b01      	subs	r3, #1
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	b410      	push	{r4}
 80210d4:	6093      	str	r3, [r2, #8]
 80210d6:	da08      	bge.n	80210ea <__sfputc_r+0x1e>
 80210d8:	6994      	ldr	r4, [r2, #24]
 80210da:	42a3      	cmp	r3, r4
 80210dc:	db01      	blt.n	80210e2 <__sfputc_r+0x16>
 80210de:	290a      	cmp	r1, #10
 80210e0:	d103      	bne.n	80210ea <__sfputc_r+0x1e>
 80210e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80210e6:	f7fe b85f 	b.w	801f1a8 <__swbuf_r>
 80210ea:	6813      	ldr	r3, [r2, #0]
 80210ec:	1c58      	adds	r0, r3, #1
 80210ee:	6010      	str	r0, [r2, #0]
 80210f0:	7019      	strb	r1, [r3, #0]
 80210f2:	4608      	mov	r0, r1
 80210f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80210f8:	4770      	bx	lr

080210fa <__sfputs_r>:
 80210fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210fc:	4606      	mov	r6, r0
 80210fe:	460f      	mov	r7, r1
 8021100:	4614      	mov	r4, r2
 8021102:	18d5      	adds	r5, r2, r3
 8021104:	42ac      	cmp	r4, r5
 8021106:	d101      	bne.n	802110c <__sfputs_r+0x12>
 8021108:	2000      	movs	r0, #0
 802110a:	e007      	b.n	802111c <__sfputs_r+0x22>
 802110c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021110:	463a      	mov	r2, r7
 8021112:	4630      	mov	r0, r6
 8021114:	f7ff ffda 	bl	80210cc <__sfputc_r>
 8021118:	1c43      	adds	r3, r0, #1
 802111a:	d1f3      	bne.n	8021104 <__sfputs_r+0xa>
 802111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021120 <_vfiprintf_r>:
 8021120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021124:	460d      	mov	r5, r1
 8021126:	b09d      	sub	sp, #116	; 0x74
 8021128:	4614      	mov	r4, r2
 802112a:	4698      	mov	r8, r3
 802112c:	4606      	mov	r6, r0
 802112e:	b118      	cbz	r0, 8021138 <_vfiprintf_r+0x18>
 8021130:	6983      	ldr	r3, [r0, #24]
 8021132:	b90b      	cbnz	r3, 8021138 <_vfiprintf_r+0x18>
 8021134:	f7fc fed2 	bl	801dedc <__sinit>
 8021138:	4b89      	ldr	r3, [pc, #548]	; (8021360 <_vfiprintf_r+0x240>)
 802113a:	429d      	cmp	r5, r3
 802113c:	d11b      	bne.n	8021176 <_vfiprintf_r+0x56>
 802113e:	6875      	ldr	r5, [r6, #4]
 8021140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021142:	07d9      	lsls	r1, r3, #31
 8021144:	d405      	bmi.n	8021152 <_vfiprintf_r+0x32>
 8021146:	89ab      	ldrh	r3, [r5, #12]
 8021148:	059a      	lsls	r2, r3, #22
 802114a:	d402      	bmi.n	8021152 <_vfiprintf_r+0x32>
 802114c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802114e:	f7fc ff88 	bl	801e062 <__retarget_lock_acquire_recursive>
 8021152:	89ab      	ldrh	r3, [r5, #12]
 8021154:	071b      	lsls	r3, r3, #28
 8021156:	d501      	bpl.n	802115c <_vfiprintf_r+0x3c>
 8021158:	692b      	ldr	r3, [r5, #16]
 802115a:	b9eb      	cbnz	r3, 8021198 <_vfiprintf_r+0x78>
 802115c:	4629      	mov	r1, r5
 802115e:	4630      	mov	r0, r6
 8021160:	f7fe f886 	bl	801f270 <__swsetup_r>
 8021164:	b1c0      	cbz	r0, 8021198 <_vfiprintf_r+0x78>
 8021166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021168:	07dc      	lsls	r4, r3, #31
 802116a:	d50e      	bpl.n	802118a <_vfiprintf_r+0x6a>
 802116c:	f04f 30ff 	mov.w	r0, #4294967295
 8021170:	b01d      	add	sp, #116	; 0x74
 8021172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021176:	4b7b      	ldr	r3, [pc, #492]	; (8021364 <_vfiprintf_r+0x244>)
 8021178:	429d      	cmp	r5, r3
 802117a:	d101      	bne.n	8021180 <_vfiprintf_r+0x60>
 802117c:	68b5      	ldr	r5, [r6, #8]
 802117e:	e7df      	b.n	8021140 <_vfiprintf_r+0x20>
 8021180:	4b79      	ldr	r3, [pc, #484]	; (8021368 <_vfiprintf_r+0x248>)
 8021182:	429d      	cmp	r5, r3
 8021184:	bf08      	it	eq
 8021186:	68f5      	ldreq	r5, [r6, #12]
 8021188:	e7da      	b.n	8021140 <_vfiprintf_r+0x20>
 802118a:	89ab      	ldrh	r3, [r5, #12]
 802118c:	0598      	lsls	r0, r3, #22
 802118e:	d4ed      	bmi.n	802116c <_vfiprintf_r+0x4c>
 8021190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021192:	f7fc ff67 	bl	801e064 <__retarget_lock_release_recursive>
 8021196:	e7e9      	b.n	802116c <_vfiprintf_r+0x4c>
 8021198:	2300      	movs	r3, #0
 802119a:	9309      	str	r3, [sp, #36]	; 0x24
 802119c:	2320      	movs	r3, #32
 802119e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80211a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80211a6:	2330      	movs	r3, #48	; 0x30
 80211a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802136c <_vfiprintf_r+0x24c>
 80211ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80211b0:	f04f 0901 	mov.w	r9, #1
 80211b4:	4623      	mov	r3, r4
 80211b6:	469a      	mov	sl, r3
 80211b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80211bc:	b10a      	cbz	r2, 80211c2 <_vfiprintf_r+0xa2>
 80211be:	2a25      	cmp	r2, #37	; 0x25
 80211c0:	d1f9      	bne.n	80211b6 <_vfiprintf_r+0x96>
 80211c2:	ebba 0b04 	subs.w	fp, sl, r4
 80211c6:	d00b      	beq.n	80211e0 <_vfiprintf_r+0xc0>
 80211c8:	465b      	mov	r3, fp
 80211ca:	4622      	mov	r2, r4
 80211cc:	4629      	mov	r1, r5
 80211ce:	4630      	mov	r0, r6
 80211d0:	f7ff ff93 	bl	80210fa <__sfputs_r>
 80211d4:	3001      	adds	r0, #1
 80211d6:	f000 80aa 	beq.w	802132e <_vfiprintf_r+0x20e>
 80211da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80211dc:	445a      	add	r2, fp
 80211de:	9209      	str	r2, [sp, #36]	; 0x24
 80211e0:	f89a 3000 	ldrb.w	r3, [sl]
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	f000 80a2 	beq.w	802132e <_vfiprintf_r+0x20e>
 80211ea:	2300      	movs	r3, #0
 80211ec:	f04f 32ff 	mov.w	r2, #4294967295
 80211f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80211f4:	f10a 0a01 	add.w	sl, sl, #1
 80211f8:	9304      	str	r3, [sp, #16]
 80211fa:	9307      	str	r3, [sp, #28]
 80211fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021200:	931a      	str	r3, [sp, #104]	; 0x68
 8021202:	4654      	mov	r4, sl
 8021204:	2205      	movs	r2, #5
 8021206:	f814 1b01 	ldrb.w	r1, [r4], #1
 802120a:	4858      	ldr	r0, [pc, #352]	; (802136c <_vfiprintf_r+0x24c>)
 802120c:	f7de ffe8 	bl	80001e0 <memchr>
 8021210:	9a04      	ldr	r2, [sp, #16]
 8021212:	b9d8      	cbnz	r0, 802124c <_vfiprintf_r+0x12c>
 8021214:	06d1      	lsls	r1, r2, #27
 8021216:	bf44      	itt	mi
 8021218:	2320      	movmi	r3, #32
 802121a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802121e:	0713      	lsls	r3, r2, #28
 8021220:	bf44      	itt	mi
 8021222:	232b      	movmi	r3, #43	; 0x2b
 8021224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021228:	f89a 3000 	ldrb.w	r3, [sl]
 802122c:	2b2a      	cmp	r3, #42	; 0x2a
 802122e:	d015      	beq.n	802125c <_vfiprintf_r+0x13c>
 8021230:	9a07      	ldr	r2, [sp, #28]
 8021232:	4654      	mov	r4, sl
 8021234:	2000      	movs	r0, #0
 8021236:	f04f 0c0a 	mov.w	ip, #10
 802123a:	4621      	mov	r1, r4
 802123c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021240:	3b30      	subs	r3, #48	; 0x30
 8021242:	2b09      	cmp	r3, #9
 8021244:	d94e      	bls.n	80212e4 <_vfiprintf_r+0x1c4>
 8021246:	b1b0      	cbz	r0, 8021276 <_vfiprintf_r+0x156>
 8021248:	9207      	str	r2, [sp, #28]
 802124a:	e014      	b.n	8021276 <_vfiprintf_r+0x156>
 802124c:	eba0 0308 	sub.w	r3, r0, r8
 8021250:	fa09 f303 	lsl.w	r3, r9, r3
 8021254:	4313      	orrs	r3, r2
 8021256:	9304      	str	r3, [sp, #16]
 8021258:	46a2      	mov	sl, r4
 802125a:	e7d2      	b.n	8021202 <_vfiprintf_r+0xe2>
 802125c:	9b03      	ldr	r3, [sp, #12]
 802125e:	1d19      	adds	r1, r3, #4
 8021260:	681b      	ldr	r3, [r3, #0]
 8021262:	9103      	str	r1, [sp, #12]
 8021264:	2b00      	cmp	r3, #0
 8021266:	bfbb      	ittet	lt
 8021268:	425b      	neglt	r3, r3
 802126a:	f042 0202 	orrlt.w	r2, r2, #2
 802126e:	9307      	strge	r3, [sp, #28]
 8021270:	9307      	strlt	r3, [sp, #28]
 8021272:	bfb8      	it	lt
 8021274:	9204      	strlt	r2, [sp, #16]
 8021276:	7823      	ldrb	r3, [r4, #0]
 8021278:	2b2e      	cmp	r3, #46	; 0x2e
 802127a:	d10c      	bne.n	8021296 <_vfiprintf_r+0x176>
 802127c:	7863      	ldrb	r3, [r4, #1]
 802127e:	2b2a      	cmp	r3, #42	; 0x2a
 8021280:	d135      	bne.n	80212ee <_vfiprintf_r+0x1ce>
 8021282:	9b03      	ldr	r3, [sp, #12]
 8021284:	1d1a      	adds	r2, r3, #4
 8021286:	681b      	ldr	r3, [r3, #0]
 8021288:	9203      	str	r2, [sp, #12]
 802128a:	2b00      	cmp	r3, #0
 802128c:	bfb8      	it	lt
 802128e:	f04f 33ff 	movlt.w	r3, #4294967295
 8021292:	3402      	adds	r4, #2
 8021294:	9305      	str	r3, [sp, #20]
 8021296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802137c <_vfiprintf_r+0x25c>
 802129a:	7821      	ldrb	r1, [r4, #0]
 802129c:	2203      	movs	r2, #3
 802129e:	4650      	mov	r0, sl
 80212a0:	f7de ff9e 	bl	80001e0 <memchr>
 80212a4:	b140      	cbz	r0, 80212b8 <_vfiprintf_r+0x198>
 80212a6:	2340      	movs	r3, #64	; 0x40
 80212a8:	eba0 000a 	sub.w	r0, r0, sl
 80212ac:	fa03 f000 	lsl.w	r0, r3, r0
 80212b0:	9b04      	ldr	r3, [sp, #16]
 80212b2:	4303      	orrs	r3, r0
 80212b4:	3401      	adds	r4, #1
 80212b6:	9304      	str	r3, [sp, #16]
 80212b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80212bc:	482c      	ldr	r0, [pc, #176]	; (8021370 <_vfiprintf_r+0x250>)
 80212be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80212c2:	2206      	movs	r2, #6
 80212c4:	f7de ff8c 	bl	80001e0 <memchr>
 80212c8:	2800      	cmp	r0, #0
 80212ca:	d03f      	beq.n	802134c <_vfiprintf_r+0x22c>
 80212cc:	4b29      	ldr	r3, [pc, #164]	; (8021374 <_vfiprintf_r+0x254>)
 80212ce:	bb1b      	cbnz	r3, 8021318 <_vfiprintf_r+0x1f8>
 80212d0:	9b03      	ldr	r3, [sp, #12]
 80212d2:	3307      	adds	r3, #7
 80212d4:	f023 0307 	bic.w	r3, r3, #7
 80212d8:	3308      	adds	r3, #8
 80212da:	9303      	str	r3, [sp, #12]
 80212dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212de:	443b      	add	r3, r7
 80212e0:	9309      	str	r3, [sp, #36]	; 0x24
 80212e2:	e767      	b.n	80211b4 <_vfiprintf_r+0x94>
 80212e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80212e8:	460c      	mov	r4, r1
 80212ea:	2001      	movs	r0, #1
 80212ec:	e7a5      	b.n	802123a <_vfiprintf_r+0x11a>
 80212ee:	2300      	movs	r3, #0
 80212f0:	3401      	adds	r4, #1
 80212f2:	9305      	str	r3, [sp, #20]
 80212f4:	4619      	mov	r1, r3
 80212f6:	f04f 0c0a 	mov.w	ip, #10
 80212fa:	4620      	mov	r0, r4
 80212fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021300:	3a30      	subs	r2, #48	; 0x30
 8021302:	2a09      	cmp	r2, #9
 8021304:	d903      	bls.n	802130e <_vfiprintf_r+0x1ee>
 8021306:	2b00      	cmp	r3, #0
 8021308:	d0c5      	beq.n	8021296 <_vfiprintf_r+0x176>
 802130a:	9105      	str	r1, [sp, #20]
 802130c:	e7c3      	b.n	8021296 <_vfiprintf_r+0x176>
 802130e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021312:	4604      	mov	r4, r0
 8021314:	2301      	movs	r3, #1
 8021316:	e7f0      	b.n	80212fa <_vfiprintf_r+0x1da>
 8021318:	ab03      	add	r3, sp, #12
 802131a:	9300      	str	r3, [sp, #0]
 802131c:	462a      	mov	r2, r5
 802131e:	4b16      	ldr	r3, [pc, #88]	; (8021378 <_vfiprintf_r+0x258>)
 8021320:	a904      	add	r1, sp, #16
 8021322:	4630      	mov	r0, r6
 8021324:	f7fd f838 	bl	801e398 <_printf_float>
 8021328:	4607      	mov	r7, r0
 802132a:	1c78      	adds	r0, r7, #1
 802132c:	d1d6      	bne.n	80212dc <_vfiprintf_r+0x1bc>
 802132e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021330:	07d9      	lsls	r1, r3, #31
 8021332:	d405      	bmi.n	8021340 <_vfiprintf_r+0x220>
 8021334:	89ab      	ldrh	r3, [r5, #12]
 8021336:	059a      	lsls	r2, r3, #22
 8021338:	d402      	bmi.n	8021340 <_vfiprintf_r+0x220>
 802133a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802133c:	f7fc fe92 	bl	801e064 <__retarget_lock_release_recursive>
 8021340:	89ab      	ldrh	r3, [r5, #12]
 8021342:	065b      	lsls	r3, r3, #25
 8021344:	f53f af12 	bmi.w	802116c <_vfiprintf_r+0x4c>
 8021348:	9809      	ldr	r0, [sp, #36]	; 0x24
 802134a:	e711      	b.n	8021170 <_vfiprintf_r+0x50>
 802134c:	ab03      	add	r3, sp, #12
 802134e:	9300      	str	r3, [sp, #0]
 8021350:	462a      	mov	r2, r5
 8021352:	4b09      	ldr	r3, [pc, #36]	; (8021378 <_vfiprintf_r+0x258>)
 8021354:	a904      	add	r1, sp, #16
 8021356:	4630      	mov	r0, r6
 8021358:	f7fd fac2 	bl	801e8e0 <_printf_i>
 802135c:	e7e4      	b.n	8021328 <_vfiprintf_r+0x208>
 802135e:	bf00      	nop
 8021360:	080268e0 	.word	0x080268e0
 8021364:	08026900 	.word	0x08026900
 8021368:	080268c0 	.word	0x080268c0
 802136c:	08026c44 	.word	0x08026c44
 8021370:	08026c4e 	.word	0x08026c4e
 8021374:	0801e399 	.word	0x0801e399
 8021378:	080210fb 	.word	0x080210fb
 802137c:	08026c4a 	.word	0x08026c4a

08021380 <_scanf_chars>:
 8021380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021384:	4615      	mov	r5, r2
 8021386:	688a      	ldr	r2, [r1, #8]
 8021388:	4680      	mov	r8, r0
 802138a:	460c      	mov	r4, r1
 802138c:	b932      	cbnz	r2, 802139c <_scanf_chars+0x1c>
 802138e:	698a      	ldr	r2, [r1, #24]
 8021390:	2a00      	cmp	r2, #0
 8021392:	bf0c      	ite	eq
 8021394:	2201      	moveq	r2, #1
 8021396:	f04f 32ff 	movne.w	r2, #4294967295
 802139a:	608a      	str	r2, [r1, #8]
 802139c:	6822      	ldr	r2, [r4, #0]
 802139e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 802142c <_scanf_chars+0xac>
 80213a2:	06d1      	lsls	r1, r2, #27
 80213a4:	bf5f      	itttt	pl
 80213a6:	681a      	ldrpl	r2, [r3, #0]
 80213a8:	1d11      	addpl	r1, r2, #4
 80213aa:	6019      	strpl	r1, [r3, #0]
 80213ac:	6816      	ldrpl	r6, [r2, #0]
 80213ae:	2700      	movs	r7, #0
 80213b0:	69a0      	ldr	r0, [r4, #24]
 80213b2:	b188      	cbz	r0, 80213d8 <_scanf_chars+0x58>
 80213b4:	2801      	cmp	r0, #1
 80213b6:	d107      	bne.n	80213c8 <_scanf_chars+0x48>
 80213b8:	682b      	ldr	r3, [r5, #0]
 80213ba:	781a      	ldrb	r2, [r3, #0]
 80213bc:	6963      	ldr	r3, [r4, #20]
 80213be:	5c9b      	ldrb	r3, [r3, r2]
 80213c0:	b953      	cbnz	r3, 80213d8 <_scanf_chars+0x58>
 80213c2:	bb27      	cbnz	r7, 802140e <_scanf_chars+0x8e>
 80213c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80213c8:	2802      	cmp	r0, #2
 80213ca:	d120      	bne.n	802140e <_scanf_chars+0x8e>
 80213cc:	682b      	ldr	r3, [r5, #0]
 80213ce:	781b      	ldrb	r3, [r3, #0]
 80213d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80213d4:	071b      	lsls	r3, r3, #28
 80213d6:	d41a      	bmi.n	802140e <_scanf_chars+0x8e>
 80213d8:	6823      	ldr	r3, [r4, #0]
 80213da:	06da      	lsls	r2, r3, #27
 80213dc:	bf5e      	ittt	pl
 80213de:	682b      	ldrpl	r3, [r5, #0]
 80213e0:	781b      	ldrbpl	r3, [r3, #0]
 80213e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80213e6:	682a      	ldr	r2, [r5, #0]
 80213e8:	686b      	ldr	r3, [r5, #4]
 80213ea:	3201      	adds	r2, #1
 80213ec:	602a      	str	r2, [r5, #0]
 80213ee:	68a2      	ldr	r2, [r4, #8]
 80213f0:	3b01      	subs	r3, #1
 80213f2:	3a01      	subs	r2, #1
 80213f4:	606b      	str	r3, [r5, #4]
 80213f6:	3701      	adds	r7, #1
 80213f8:	60a2      	str	r2, [r4, #8]
 80213fa:	b142      	cbz	r2, 802140e <_scanf_chars+0x8e>
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	dcd7      	bgt.n	80213b0 <_scanf_chars+0x30>
 8021400:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021404:	4629      	mov	r1, r5
 8021406:	4640      	mov	r0, r8
 8021408:	4798      	blx	r3
 802140a:	2800      	cmp	r0, #0
 802140c:	d0d0      	beq.n	80213b0 <_scanf_chars+0x30>
 802140e:	6823      	ldr	r3, [r4, #0]
 8021410:	f013 0310 	ands.w	r3, r3, #16
 8021414:	d105      	bne.n	8021422 <_scanf_chars+0xa2>
 8021416:	68e2      	ldr	r2, [r4, #12]
 8021418:	3201      	adds	r2, #1
 802141a:	60e2      	str	r2, [r4, #12]
 802141c:	69a2      	ldr	r2, [r4, #24]
 802141e:	b102      	cbz	r2, 8021422 <_scanf_chars+0xa2>
 8021420:	7033      	strb	r3, [r6, #0]
 8021422:	6923      	ldr	r3, [r4, #16]
 8021424:	441f      	add	r7, r3
 8021426:	6127      	str	r7, [r4, #16]
 8021428:	2000      	movs	r0, #0
 802142a:	e7cb      	b.n	80213c4 <_scanf_chars+0x44>
 802142c:	080267bd 	.word	0x080267bd

08021430 <_scanf_i>:
 8021430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021434:	4698      	mov	r8, r3
 8021436:	4b74      	ldr	r3, [pc, #464]	; (8021608 <_scanf_i+0x1d8>)
 8021438:	460c      	mov	r4, r1
 802143a:	4682      	mov	sl, r0
 802143c:	4616      	mov	r6, r2
 802143e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021442:	b087      	sub	sp, #28
 8021444:	ab03      	add	r3, sp, #12
 8021446:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802144a:	4b70      	ldr	r3, [pc, #448]	; (802160c <_scanf_i+0x1dc>)
 802144c:	69a1      	ldr	r1, [r4, #24]
 802144e:	4a70      	ldr	r2, [pc, #448]	; (8021610 <_scanf_i+0x1e0>)
 8021450:	2903      	cmp	r1, #3
 8021452:	bf18      	it	ne
 8021454:	461a      	movne	r2, r3
 8021456:	68a3      	ldr	r3, [r4, #8]
 8021458:	9201      	str	r2, [sp, #4]
 802145a:	1e5a      	subs	r2, r3, #1
 802145c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8021460:	bf88      	it	hi
 8021462:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8021466:	4627      	mov	r7, r4
 8021468:	bf82      	ittt	hi
 802146a:	eb03 0905 	addhi.w	r9, r3, r5
 802146e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8021472:	60a3      	strhi	r3, [r4, #8]
 8021474:	f857 3b1c 	ldr.w	r3, [r7], #28
 8021478:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802147c:	bf98      	it	ls
 802147e:	f04f 0900 	movls.w	r9, #0
 8021482:	6023      	str	r3, [r4, #0]
 8021484:	463d      	mov	r5, r7
 8021486:	f04f 0b00 	mov.w	fp, #0
 802148a:	6831      	ldr	r1, [r6, #0]
 802148c:	ab03      	add	r3, sp, #12
 802148e:	7809      	ldrb	r1, [r1, #0]
 8021490:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8021494:	2202      	movs	r2, #2
 8021496:	f7de fea3 	bl	80001e0 <memchr>
 802149a:	b328      	cbz	r0, 80214e8 <_scanf_i+0xb8>
 802149c:	f1bb 0f01 	cmp.w	fp, #1
 80214a0:	d159      	bne.n	8021556 <_scanf_i+0x126>
 80214a2:	6862      	ldr	r2, [r4, #4]
 80214a4:	b92a      	cbnz	r2, 80214b2 <_scanf_i+0x82>
 80214a6:	6822      	ldr	r2, [r4, #0]
 80214a8:	2308      	movs	r3, #8
 80214aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80214ae:	6063      	str	r3, [r4, #4]
 80214b0:	6022      	str	r2, [r4, #0]
 80214b2:	6822      	ldr	r2, [r4, #0]
 80214b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80214b8:	6022      	str	r2, [r4, #0]
 80214ba:	68a2      	ldr	r2, [r4, #8]
 80214bc:	1e51      	subs	r1, r2, #1
 80214be:	60a1      	str	r1, [r4, #8]
 80214c0:	b192      	cbz	r2, 80214e8 <_scanf_i+0xb8>
 80214c2:	6832      	ldr	r2, [r6, #0]
 80214c4:	1c51      	adds	r1, r2, #1
 80214c6:	6031      	str	r1, [r6, #0]
 80214c8:	7812      	ldrb	r2, [r2, #0]
 80214ca:	f805 2b01 	strb.w	r2, [r5], #1
 80214ce:	6872      	ldr	r2, [r6, #4]
 80214d0:	3a01      	subs	r2, #1
 80214d2:	2a00      	cmp	r2, #0
 80214d4:	6072      	str	r2, [r6, #4]
 80214d6:	dc07      	bgt.n	80214e8 <_scanf_i+0xb8>
 80214d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80214dc:	4631      	mov	r1, r6
 80214de:	4650      	mov	r0, sl
 80214e0:	4790      	blx	r2
 80214e2:	2800      	cmp	r0, #0
 80214e4:	f040 8085 	bne.w	80215f2 <_scanf_i+0x1c2>
 80214e8:	f10b 0b01 	add.w	fp, fp, #1
 80214ec:	f1bb 0f03 	cmp.w	fp, #3
 80214f0:	d1cb      	bne.n	802148a <_scanf_i+0x5a>
 80214f2:	6863      	ldr	r3, [r4, #4]
 80214f4:	b90b      	cbnz	r3, 80214fa <_scanf_i+0xca>
 80214f6:	230a      	movs	r3, #10
 80214f8:	6063      	str	r3, [r4, #4]
 80214fa:	6863      	ldr	r3, [r4, #4]
 80214fc:	4945      	ldr	r1, [pc, #276]	; (8021614 <_scanf_i+0x1e4>)
 80214fe:	6960      	ldr	r0, [r4, #20]
 8021500:	1ac9      	subs	r1, r1, r3
 8021502:	f000 f89b 	bl	802163c <__sccl>
 8021506:	f04f 0b00 	mov.w	fp, #0
 802150a:	68a3      	ldr	r3, [r4, #8]
 802150c:	6822      	ldr	r2, [r4, #0]
 802150e:	2b00      	cmp	r3, #0
 8021510:	d03d      	beq.n	802158e <_scanf_i+0x15e>
 8021512:	6831      	ldr	r1, [r6, #0]
 8021514:	6960      	ldr	r0, [r4, #20]
 8021516:	f891 c000 	ldrb.w	ip, [r1]
 802151a:	f810 000c 	ldrb.w	r0, [r0, ip]
 802151e:	2800      	cmp	r0, #0
 8021520:	d035      	beq.n	802158e <_scanf_i+0x15e>
 8021522:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8021526:	d124      	bne.n	8021572 <_scanf_i+0x142>
 8021528:	0510      	lsls	r0, r2, #20
 802152a:	d522      	bpl.n	8021572 <_scanf_i+0x142>
 802152c:	f10b 0b01 	add.w	fp, fp, #1
 8021530:	f1b9 0f00 	cmp.w	r9, #0
 8021534:	d003      	beq.n	802153e <_scanf_i+0x10e>
 8021536:	3301      	adds	r3, #1
 8021538:	f109 39ff 	add.w	r9, r9, #4294967295
 802153c:	60a3      	str	r3, [r4, #8]
 802153e:	6873      	ldr	r3, [r6, #4]
 8021540:	3b01      	subs	r3, #1
 8021542:	2b00      	cmp	r3, #0
 8021544:	6073      	str	r3, [r6, #4]
 8021546:	dd1b      	ble.n	8021580 <_scanf_i+0x150>
 8021548:	6833      	ldr	r3, [r6, #0]
 802154a:	3301      	adds	r3, #1
 802154c:	6033      	str	r3, [r6, #0]
 802154e:	68a3      	ldr	r3, [r4, #8]
 8021550:	3b01      	subs	r3, #1
 8021552:	60a3      	str	r3, [r4, #8]
 8021554:	e7d9      	b.n	802150a <_scanf_i+0xda>
 8021556:	f1bb 0f02 	cmp.w	fp, #2
 802155a:	d1ae      	bne.n	80214ba <_scanf_i+0x8a>
 802155c:	6822      	ldr	r2, [r4, #0]
 802155e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8021562:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021566:	d1bf      	bne.n	80214e8 <_scanf_i+0xb8>
 8021568:	2310      	movs	r3, #16
 802156a:	6063      	str	r3, [r4, #4]
 802156c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021570:	e7a2      	b.n	80214b8 <_scanf_i+0x88>
 8021572:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8021576:	6022      	str	r2, [r4, #0]
 8021578:	780b      	ldrb	r3, [r1, #0]
 802157a:	f805 3b01 	strb.w	r3, [r5], #1
 802157e:	e7de      	b.n	802153e <_scanf_i+0x10e>
 8021580:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021584:	4631      	mov	r1, r6
 8021586:	4650      	mov	r0, sl
 8021588:	4798      	blx	r3
 802158a:	2800      	cmp	r0, #0
 802158c:	d0df      	beq.n	802154e <_scanf_i+0x11e>
 802158e:	6823      	ldr	r3, [r4, #0]
 8021590:	05d9      	lsls	r1, r3, #23
 8021592:	d50d      	bpl.n	80215b0 <_scanf_i+0x180>
 8021594:	42bd      	cmp	r5, r7
 8021596:	d909      	bls.n	80215ac <_scanf_i+0x17c>
 8021598:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802159c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80215a0:	4632      	mov	r2, r6
 80215a2:	4650      	mov	r0, sl
 80215a4:	4798      	blx	r3
 80215a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80215aa:	464d      	mov	r5, r9
 80215ac:	42bd      	cmp	r5, r7
 80215ae:	d028      	beq.n	8021602 <_scanf_i+0x1d2>
 80215b0:	6822      	ldr	r2, [r4, #0]
 80215b2:	f012 0210 	ands.w	r2, r2, #16
 80215b6:	d113      	bne.n	80215e0 <_scanf_i+0x1b0>
 80215b8:	702a      	strb	r2, [r5, #0]
 80215ba:	6863      	ldr	r3, [r4, #4]
 80215bc:	9e01      	ldr	r6, [sp, #4]
 80215be:	4639      	mov	r1, r7
 80215c0:	4650      	mov	r0, sl
 80215c2:	47b0      	blx	r6
 80215c4:	f8d8 3000 	ldr.w	r3, [r8]
 80215c8:	6821      	ldr	r1, [r4, #0]
 80215ca:	1d1a      	adds	r2, r3, #4
 80215cc:	f8c8 2000 	str.w	r2, [r8]
 80215d0:	f011 0f20 	tst.w	r1, #32
 80215d4:	681b      	ldr	r3, [r3, #0]
 80215d6:	d00f      	beq.n	80215f8 <_scanf_i+0x1c8>
 80215d8:	6018      	str	r0, [r3, #0]
 80215da:	68e3      	ldr	r3, [r4, #12]
 80215dc:	3301      	adds	r3, #1
 80215de:	60e3      	str	r3, [r4, #12]
 80215e0:	1bed      	subs	r5, r5, r7
 80215e2:	44ab      	add	fp, r5
 80215e4:	6925      	ldr	r5, [r4, #16]
 80215e6:	445d      	add	r5, fp
 80215e8:	6125      	str	r5, [r4, #16]
 80215ea:	2000      	movs	r0, #0
 80215ec:	b007      	add	sp, #28
 80215ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215f2:	f04f 0b00 	mov.w	fp, #0
 80215f6:	e7ca      	b.n	802158e <_scanf_i+0x15e>
 80215f8:	07ca      	lsls	r2, r1, #31
 80215fa:	bf4c      	ite	mi
 80215fc:	8018      	strhmi	r0, [r3, #0]
 80215fe:	6018      	strpl	r0, [r3, #0]
 8021600:	e7eb      	b.n	80215da <_scanf_i+0x1aa>
 8021602:	2001      	movs	r0, #1
 8021604:	e7f2      	b.n	80215ec <_scanf_i+0x1bc>
 8021606:	bf00      	nop
 8021608:	0802652c 	.word	0x0802652c
 802160c:	080217a9 	.word	0x080217a9
 8021610:	0801f1a5 	.word	0x0801f1a5
 8021614:	08026c6e 	.word	0x08026c6e

08021618 <_read_r>:
 8021618:	b538      	push	{r3, r4, r5, lr}
 802161a:	4d07      	ldr	r5, [pc, #28]	; (8021638 <_read_r+0x20>)
 802161c:	4604      	mov	r4, r0
 802161e:	4608      	mov	r0, r1
 8021620:	4611      	mov	r1, r2
 8021622:	2200      	movs	r2, #0
 8021624:	602a      	str	r2, [r5, #0]
 8021626:	461a      	mov	r2, r3
 8021628:	f7e0 fece 	bl	80023c8 <_read>
 802162c:	1c43      	adds	r3, r0, #1
 802162e:	d102      	bne.n	8021636 <_read_r+0x1e>
 8021630:	682b      	ldr	r3, [r5, #0]
 8021632:	b103      	cbz	r3, 8021636 <_read_r+0x1e>
 8021634:	6023      	str	r3, [r4, #0]
 8021636:	bd38      	pop	{r3, r4, r5, pc}
 8021638:	2001b118 	.word	0x2001b118

0802163c <__sccl>:
 802163c:	b570      	push	{r4, r5, r6, lr}
 802163e:	780b      	ldrb	r3, [r1, #0]
 8021640:	4604      	mov	r4, r0
 8021642:	2b5e      	cmp	r3, #94	; 0x5e
 8021644:	bf0b      	itete	eq
 8021646:	784b      	ldrbeq	r3, [r1, #1]
 8021648:	1c48      	addne	r0, r1, #1
 802164a:	1c88      	addeq	r0, r1, #2
 802164c:	2200      	movne	r2, #0
 802164e:	bf08      	it	eq
 8021650:	2201      	moveq	r2, #1
 8021652:	1e61      	subs	r1, r4, #1
 8021654:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021658:	f801 2f01 	strb.w	r2, [r1, #1]!
 802165c:	42a9      	cmp	r1, r5
 802165e:	d1fb      	bne.n	8021658 <__sccl+0x1c>
 8021660:	b90b      	cbnz	r3, 8021666 <__sccl+0x2a>
 8021662:	3801      	subs	r0, #1
 8021664:	bd70      	pop	{r4, r5, r6, pc}
 8021666:	f082 0101 	eor.w	r1, r2, #1
 802166a:	54e1      	strb	r1, [r4, r3]
 802166c:	1c42      	adds	r2, r0, #1
 802166e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8021672:	2d2d      	cmp	r5, #45	; 0x2d
 8021674:	f102 36ff 	add.w	r6, r2, #4294967295
 8021678:	4610      	mov	r0, r2
 802167a:	d006      	beq.n	802168a <__sccl+0x4e>
 802167c:	2d5d      	cmp	r5, #93	; 0x5d
 802167e:	d0f1      	beq.n	8021664 <__sccl+0x28>
 8021680:	b90d      	cbnz	r5, 8021686 <__sccl+0x4a>
 8021682:	4630      	mov	r0, r6
 8021684:	e7ee      	b.n	8021664 <__sccl+0x28>
 8021686:	462b      	mov	r3, r5
 8021688:	e7ef      	b.n	802166a <__sccl+0x2e>
 802168a:	7816      	ldrb	r6, [r2, #0]
 802168c:	2e5d      	cmp	r6, #93	; 0x5d
 802168e:	d0fa      	beq.n	8021686 <__sccl+0x4a>
 8021690:	42b3      	cmp	r3, r6
 8021692:	dcf8      	bgt.n	8021686 <__sccl+0x4a>
 8021694:	4618      	mov	r0, r3
 8021696:	3001      	adds	r0, #1
 8021698:	4286      	cmp	r6, r0
 802169a:	5421      	strb	r1, [r4, r0]
 802169c:	dcfb      	bgt.n	8021696 <__sccl+0x5a>
 802169e:	43d8      	mvns	r0, r3
 80216a0:	4430      	add	r0, r6
 80216a2:	1c5d      	adds	r5, r3, #1
 80216a4:	42b3      	cmp	r3, r6
 80216a6:	bfa8      	it	ge
 80216a8:	2000      	movge	r0, #0
 80216aa:	182b      	adds	r3, r5, r0
 80216ac:	3202      	adds	r2, #2
 80216ae:	e7de      	b.n	802166e <__sccl+0x32>

080216b0 <_strtoul_l.isra.0>:
 80216b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80216b4:	4e3b      	ldr	r6, [pc, #236]	; (80217a4 <_strtoul_l.isra.0+0xf4>)
 80216b6:	4686      	mov	lr, r0
 80216b8:	468c      	mov	ip, r1
 80216ba:	4660      	mov	r0, ip
 80216bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80216c0:	5da5      	ldrb	r5, [r4, r6]
 80216c2:	f015 0508 	ands.w	r5, r5, #8
 80216c6:	d1f8      	bne.n	80216ba <_strtoul_l.isra.0+0xa>
 80216c8:	2c2d      	cmp	r4, #45	; 0x2d
 80216ca:	d134      	bne.n	8021736 <_strtoul_l.isra.0+0x86>
 80216cc:	f89c 4000 	ldrb.w	r4, [ip]
 80216d0:	f04f 0801 	mov.w	r8, #1
 80216d4:	f100 0c02 	add.w	ip, r0, #2
 80216d8:	2b00      	cmp	r3, #0
 80216da:	d05e      	beq.n	802179a <_strtoul_l.isra.0+0xea>
 80216dc:	2b10      	cmp	r3, #16
 80216de:	d10c      	bne.n	80216fa <_strtoul_l.isra.0+0x4a>
 80216e0:	2c30      	cmp	r4, #48	; 0x30
 80216e2:	d10a      	bne.n	80216fa <_strtoul_l.isra.0+0x4a>
 80216e4:	f89c 0000 	ldrb.w	r0, [ip]
 80216e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80216ec:	2858      	cmp	r0, #88	; 0x58
 80216ee:	d14f      	bne.n	8021790 <_strtoul_l.isra.0+0xe0>
 80216f0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80216f4:	2310      	movs	r3, #16
 80216f6:	f10c 0c02 	add.w	ip, ip, #2
 80216fa:	f04f 37ff 	mov.w	r7, #4294967295
 80216fe:	2500      	movs	r5, #0
 8021700:	fbb7 f7f3 	udiv	r7, r7, r3
 8021704:	fb03 f907 	mul.w	r9, r3, r7
 8021708:	ea6f 0909 	mvn.w	r9, r9
 802170c:	4628      	mov	r0, r5
 802170e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8021712:	2e09      	cmp	r6, #9
 8021714:	d818      	bhi.n	8021748 <_strtoul_l.isra.0+0x98>
 8021716:	4634      	mov	r4, r6
 8021718:	42a3      	cmp	r3, r4
 802171a:	dd24      	ble.n	8021766 <_strtoul_l.isra.0+0xb6>
 802171c:	2d00      	cmp	r5, #0
 802171e:	db1f      	blt.n	8021760 <_strtoul_l.isra.0+0xb0>
 8021720:	4287      	cmp	r7, r0
 8021722:	d31d      	bcc.n	8021760 <_strtoul_l.isra.0+0xb0>
 8021724:	d101      	bne.n	802172a <_strtoul_l.isra.0+0x7a>
 8021726:	45a1      	cmp	r9, r4
 8021728:	db1a      	blt.n	8021760 <_strtoul_l.isra.0+0xb0>
 802172a:	fb00 4003 	mla	r0, r0, r3, r4
 802172e:	2501      	movs	r5, #1
 8021730:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021734:	e7eb      	b.n	802170e <_strtoul_l.isra.0+0x5e>
 8021736:	2c2b      	cmp	r4, #43	; 0x2b
 8021738:	bf08      	it	eq
 802173a:	f89c 4000 	ldrbeq.w	r4, [ip]
 802173e:	46a8      	mov	r8, r5
 8021740:	bf08      	it	eq
 8021742:	f100 0c02 	addeq.w	ip, r0, #2
 8021746:	e7c7      	b.n	80216d8 <_strtoul_l.isra.0+0x28>
 8021748:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 802174c:	2e19      	cmp	r6, #25
 802174e:	d801      	bhi.n	8021754 <_strtoul_l.isra.0+0xa4>
 8021750:	3c37      	subs	r4, #55	; 0x37
 8021752:	e7e1      	b.n	8021718 <_strtoul_l.isra.0+0x68>
 8021754:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8021758:	2e19      	cmp	r6, #25
 802175a:	d804      	bhi.n	8021766 <_strtoul_l.isra.0+0xb6>
 802175c:	3c57      	subs	r4, #87	; 0x57
 802175e:	e7db      	b.n	8021718 <_strtoul_l.isra.0+0x68>
 8021760:	f04f 35ff 	mov.w	r5, #4294967295
 8021764:	e7e4      	b.n	8021730 <_strtoul_l.isra.0+0x80>
 8021766:	2d00      	cmp	r5, #0
 8021768:	da07      	bge.n	802177a <_strtoul_l.isra.0+0xca>
 802176a:	2322      	movs	r3, #34	; 0x22
 802176c:	f8ce 3000 	str.w	r3, [lr]
 8021770:	f04f 30ff 	mov.w	r0, #4294967295
 8021774:	b942      	cbnz	r2, 8021788 <_strtoul_l.isra.0+0xd8>
 8021776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802177a:	f1b8 0f00 	cmp.w	r8, #0
 802177e:	d000      	beq.n	8021782 <_strtoul_l.isra.0+0xd2>
 8021780:	4240      	negs	r0, r0
 8021782:	2a00      	cmp	r2, #0
 8021784:	d0f7      	beq.n	8021776 <_strtoul_l.isra.0+0xc6>
 8021786:	b10d      	cbz	r5, 802178c <_strtoul_l.isra.0+0xdc>
 8021788:	f10c 31ff 	add.w	r1, ip, #4294967295
 802178c:	6011      	str	r1, [r2, #0]
 802178e:	e7f2      	b.n	8021776 <_strtoul_l.isra.0+0xc6>
 8021790:	2430      	movs	r4, #48	; 0x30
 8021792:	2b00      	cmp	r3, #0
 8021794:	d1b1      	bne.n	80216fa <_strtoul_l.isra.0+0x4a>
 8021796:	2308      	movs	r3, #8
 8021798:	e7af      	b.n	80216fa <_strtoul_l.isra.0+0x4a>
 802179a:	2c30      	cmp	r4, #48	; 0x30
 802179c:	d0a2      	beq.n	80216e4 <_strtoul_l.isra.0+0x34>
 802179e:	230a      	movs	r3, #10
 80217a0:	e7ab      	b.n	80216fa <_strtoul_l.isra.0+0x4a>
 80217a2:	bf00      	nop
 80217a4:	080267bd 	.word	0x080267bd

080217a8 <_strtoul_r>:
 80217a8:	f7ff bf82 	b.w	80216b0 <_strtoul_l.isra.0>

080217ac <__submore>:
 80217ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80217b0:	460c      	mov	r4, r1
 80217b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80217b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80217b8:	4299      	cmp	r1, r3
 80217ba:	d11d      	bne.n	80217f8 <__submore+0x4c>
 80217bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80217c0:	f7fc fcf0 	bl	801e1a4 <_malloc_r>
 80217c4:	b918      	cbnz	r0, 80217ce <__submore+0x22>
 80217c6:	f04f 30ff 	mov.w	r0, #4294967295
 80217ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80217d2:	63a3      	str	r3, [r4, #56]	; 0x38
 80217d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80217d8:	6360      	str	r0, [r4, #52]	; 0x34
 80217da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80217de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80217e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80217e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80217ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80217ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80217f2:	6020      	str	r0, [r4, #0]
 80217f4:	2000      	movs	r0, #0
 80217f6:	e7e8      	b.n	80217ca <__submore+0x1e>
 80217f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80217fa:	0077      	lsls	r7, r6, #1
 80217fc:	463a      	mov	r2, r7
 80217fe:	f000 f84b 	bl	8021898 <_realloc_r>
 8021802:	4605      	mov	r5, r0
 8021804:	2800      	cmp	r0, #0
 8021806:	d0de      	beq.n	80217c6 <__submore+0x1a>
 8021808:	eb00 0806 	add.w	r8, r0, r6
 802180c:	4601      	mov	r1, r0
 802180e:	4632      	mov	r2, r6
 8021810:	4640      	mov	r0, r8
 8021812:	f7fc fc47 	bl	801e0a4 <memcpy>
 8021816:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802181a:	f8c4 8000 	str.w	r8, [r4]
 802181e:	e7e9      	b.n	80217f4 <__submore+0x48>

08021820 <abort>:
 8021820:	b508      	push	{r3, lr}
 8021822:	2006      	movs	r0, #6
 8021824:	f000 f886 	bl	8021934 <raise>
 8021828:	2001      	movs	r0, #1
 802182a:	f7e0 fdc3 	bl	80023b4 <_exit>
	...

08021830 <_fstat_r>:
 8021830:	b538      	push	{r3, r4, r5, lr}
 8021832:	4d07      	ldr	r5, [pc, #28]	; (8021850 <_fstat_r+0x20>)
 8021834:	2300      	movs	r3, #0
 8021836:	4604      	mov	r4, r0
 8021838:	4608      	mov	r0, r1
 802183a:	4611      	mov	r1, r2
 802183c:	602b      	str	r3, [r5, #0]
 802183e:	f7e0 fe08 	bl	8002452 <_fstat>
 8021842:	1c43      	adds	r3, r0, #1
 8021844:	d102      	bne.n	802184c <_fstat_r+0x1c>
 8021846:	682b      	ldr	r3, [r5, #0]
 8021848:	b103      	cbz	r3, 802184c <_fstat_r+0x1c>
 802184a:	6023      	str	r3, [r4, #0]
 802184c:	bd38      	pop	{r3, r4, r5, pc}
 802184e:	bf00      	nop
 8021850:	2001b118 	.word	0x2001b118

08021854 <_isatty_r>:
 8021854:	b538      	push	{r3, r4, r5, lr}
 8021856:	4d06      	ldr	r5, [pc, #24]	; (8021870 <_isatty_r+0x1c>)
 8021858:	2300      	movs	r3, #0
 802185a:	4604      	mov	r4, r0
 802185c:	4608      	mov	r0, r1
 802185e:	602b      	str	r3, [r5, #0]
 8021860:	f7e0 fe07 	bl	8002472 <_isatty>
 8021864:	1c43      	adds	r3, r0, #1
 8021866:	d102      	bne.n	802186e <_isatty_r+0x1a>
 8021868:	682b      	ldr	r3, [r5, #0]
 802186a:	b103      	cbz	r3, 802186e <_isatty_r+0x1a>
 802186c:	6023      	str	r3, [r4, #0]
 802186e:	bd38      	pop	{r3, r4, r5, pc}
 8021870:	2001b118 	.word	0x2001b118

08021874 <__ascii_mbtowc>:
 8021874:	b082      	sub	sp, #8
 8021876:	b901      	cbnz	r1, 802187a <__ascii_mbtowc+0x6>
 8021878:	a901      	add	r1, sp, #4
 802187a:	b142      	cbz	r2, 802188e <__ascii_mbtowc+0x1a>
 802187c:	b14b      	cbz	r3, 8021892 <__ascii_mbtowc+0x1e>
 802187e:	7813      	ldrb	r3, [r2, #0]
 8021880:	600b      	str	r3, [r1, #0]
 8021882:	7812      	ldrb	r2, [r2, #0]
 8021884:	1e10      	subs	r0, r2, #0
 8021886:	bf18      	it	ne
 8021888:	2001      	movne	r0, #1
 802188a:	b002      	add	sp, #8
 802188c:	4770      	bx	lr
 802188e:	4610      	mov	r0, r2
 8021890:	e7fb      	b.n	802188a <__ascii_mbtowc+0x16>
 8021892:	f06f 0001 	mvn.w	r0, #1
 8021896:	e7f8      	b.n	802188a <__ascii_mbtowc+0x16>

08021898 <_realloc_r>:
 8021898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802189a:	4607      	mov	r7, r0
 802189c:	4614      	mov	r4, r2
 802189e:	460e      	mov	r6, r1
 80218a0:	b921      	cbnz	r1, 80218ac <_realloc_r+0x14>
 80218a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80218a6:	4611      	mov	r1, r2
 80218a8:	f7fc bc7c 	b.w	801e1a4 <_malloc_r>
 80218ac:	b922      	cbnz	r2, 80218b8 <_realloc_r+0x20>
 80218ae:	f7fc fc29 	bl	801e104 <_free_r>
 80218b2:	4625      	mov	r5, r4
 80218b4:	4628      	mov	r0, r5
 80218b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80218b8:	f000 f865 	bl	8021986 <_malloc_usable_size_r>
 80218bc:	42a0      	cmp	r0, r4
 80218be:	d20f      	bcs.n	80218e0 <_realloc_r+0x48>
 80218c0:	4621      	mov	r1, r4
 80218c2:	4638      	mov	r0, r7
 80218c4:	f7fc fc6e 	bl	801e1a4 <_malloc_r>
 80218c8:	4605      	mov	r5, r0
 80218ca:	2800      	cmp	r0, #0
 80218cc:	d0f2      	beq.n	80218b4 <_realloc_r+0x1c>
 80218ce:	4631      	mov	r1, r6
 80218d0:	4622      	mov	r2, r4
 80218d2:	f7fc fbe7 	bl	801e0a4 <memcpy>
 80218d6:	4631      	mov	r1, r6
 80218d8:	4638      	mov	r0, r7
 80218da:	f7fc fc13 	bl	801e104 <_free_r>
 80218de:	e7e9      	b.n	80218b4 <_realloc_r+0x1c>
 80218e0:	4635      	mov	r5, r6
 80218e2:	e7e7      	b.n	80218b4 <_realloc_r+0x1c>

080218e4 <_raise_r>:
 80218e4:	291f      	cmp	r1, #31
 80218e6:	b538      	push	{r3, r4, r5, lr}
 80218e8:	4604      	mov	r4, r0
 80218ea:	460d      	mov	r5, r1
 80218ec:	d904      	bls.n	80218f8 <_raise_r+0x14>
 80218ee:	2316      	movs	r3, #22
 80218f0:	6003      	str	r3, [r0, #0]
 80218f2:	f04f 30ff 	mov.w	r0, #4294967295
 80218f6:	bd38      	pop	{r3, r4, r5, pc}
 80218f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80218fa:	b112      	cbz	r2, 8021902 <_raise_r+0x1e>
 80218fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021900:	b94b      	cbnz	r3, 8021916 <_raise_r+0x32>
 8021902:	4620      	mov	r0, r4
 8021904:	f000 f830 	bl	8021968 <_getpid_r>
 8021908:	462a      	mov	r2, r5
 802190a:	4601      	mov	r1, r0
 802190c:	4620      	mov	r0, r4
 802190e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021912:	f000 b817 	b.w	8021944 <_kill_r>
 8021916:	2b01      	cmp	r3, #1
 8021918:	d00a      	beq.n	8021930 <_raise_r+0x4c>
 802191a:	1c59      	adds	r1, r3, #1
 802191c:	d103      	bne.n	8021926 <_raise_r+0x42>
 802191e:	2316      	movs	r3, #22
 8021920:	6003      	str	r3, [r0, #0]
 8021922:	2001      	movs	r0, #1
 8021924:	e7e7      	b.n	80218f6 <_raise_r+0x12>
 8021926:	2400      	movs	r4, #0
 8021928:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802192c:	4628      	mov	r0, r5
 802192e:	4798      	blx	r3
 8021930:	2000      	movs	r0, #0
 8021932:	e7e0      	b.n	80218f6 <_raise_r+0x12>

08021934 <raise>:
 8021934:	4b02      	ldr	r3, [pc, #8]	; (8021940 <raise+0xc>)
 8021936:	4601      	mov	r1, r0
 8021938:	6818      	ldr	r0, [r3, #0]
 802193a:	f7ff bfd3 	b.w	80218e4 <_raise_r>
 802193e:	bf00      	nop
 8021940:	20000064 	.word	0x20000064

08021944 <_kill_r>:
 8021944:	b538      	push	{r3, r4, r5, lr}
 8021946:	4d07      	ldr	r5, [pc, #28]	; (8021964 <_kill_r+0x20>)
 8021948:	2300      	movs	r3, #0
 802194a:	4604      	mov	r4, r0
 802194c:	4608      	mov	r0, r1
 802194e:	4611      	mov	r1, r2
 8021950:	602b      	str	r3, [r5, #0]
 8021952:	f7e0 fd1d 	bl	8002390 <_kill>
 8021956:	1c43      	adds	r3, r0, #1
 8021958:	d102      	bne.n	8021960 <_kill_r+0x1c>
 802195a:	682b      	ldr	r3, [r5, #0]
 802195c:	b103      	cbz	r3, 8021960 <_kill_r+0x1c>
 802195e:	6023      	str	r3, [r4, #0]
 8021960:	bd38      	pop	{r3, r4, r5, pc}
 8021962:	bf00      	nop
 8021964:	2001b118 	.word	0x2001b118

08021968 <_getpid_r>:
 8021968:	f7e0 bd0a 	b.w	8002380 <_getpid>

0802196c <__ascii_wctomb>:
 802196c:	b149      	cbz	r1, 8021982 <__ascii_wctomb+0x16>
 802196e:	2aff      	cmp	r2, #255	; 0xff
 8021970:	bf85      	ittet	hi
 8021972:	238a      	movhi	r3, #138	; 0x8a
 8021974:	6003      	strhi	r3, [r0, #0]
 8021976:	700a      	strbls	r2, [r1, #0]
 8021978:	f04f 30ff 	movhi.w	r0, #4294967295
 802197c:	bf98      	it	ls
 802197e:	2001      	movls	r0, #1
 8021980:	4770      	bx	lr
 8021982:	4608      	mov	r0, r1
 8021984:	4770      	bx	lr

08021986 <_malloc_usable_size_r>:
 8021986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802198a:	1f18      	subs	r0, r3, #4
 802198c:	2b00      	cmp	r3, #0
 802198e:	bfbc      	itt	lt
 8021990:	580b      	ldrlt	r3, [r1, r0]
 8021992:	18c0      	addlt	r0, r0, r3
 8021994:	4770      	bx	lr
	...

08021998 <_init>:
 8021998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802199a:	bf00      	nop
 802199c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802199e:	bc08      	pop	{r3}
 80219a0:	469e      	mov	lr, r3
 80219a2:	4770      	bx	lr

080219a4 <_fini>:
 80219a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219a6:	bf00      	nop
 80219a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80219aa:	bc08      	pop	{r3}
 80219ac:	469e      	mov	lr, r3
 80219ae:	4770      	bx	lr
