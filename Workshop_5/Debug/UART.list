
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000746c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007600  08007600  00017600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a3c  08007a3c  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a44  08007a44  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08007a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00000148  20000210  20000210  00020210  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000358  20000358  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b67  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c9  00000000  00000000  00032da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00035570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d38  00000000  00000000  000363b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bc4  00000000  00000000  000370e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001182f  00000000  00000000  0005acac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8fd5  00000000  00000000  0006c4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001454b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c50  00000000  00000000  00145504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075e4 	.word	0x080075e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	080075e4 	.word	0x080075e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <MX_ADC1_Init+0x9c>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <MX_ADC1_Init+0xa0>)
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efe:	480e      	ldr	r0, [pc, #56]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000f00:	f000 fd22 	bl	8001948 <HAL_ADC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 f965 	bl	80011d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f16:	2307      	movs	r3, #7
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_ADC1_Init+0x98>)
 8000f20:	f000 fe36 	bl	8001b90 <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f2a:	f000 f955 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000023c 	.word	0x2000023c
 8000f3c:	40012000 	.word	0x40012000
 8000f40:	0f000001 	.word	0x0f000001

08000f44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_ADC_MspInit+0x7c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d127      	bne.n	8000fb6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_ADC_MspInit+0x84>)
 8000fb2:	f001 f9af 	bl	8002314 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012000 	.word	0x40012000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020400 	.word	0x40020400

08000fcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a35      	ldr	r2, [pc, #212]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <MX_GPIO_Init+0xf4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_GPIO_Init+0xf4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_GPIO_Init+0xf4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001058:	481a      	ldr	r0, [pc, #104]	; (80010c4 <MX_GPIO_Init+0xf8>)
 800105a:	f001 faf7 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800105e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4813      	ldr	r0, [pc, #76]	; (80010c4 <MX_GPIO_Init+0xf8>)
 8001078:	f001 f94c 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 800107c:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001082:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_GPIO_Init+0xfc>)
 8001094:	f001 f93e 	bl	8002314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2017      	movs	r0, #23
 800109e:	f001 f870 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010a2:	2017      	movs	r0, #23
 80010a4:	f001 f889 	bl	80021ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2028      	movs	r0, #40	; 0x28
 80010ae:	f001 f868 	bl	8002182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010b2:	2028      	movs	r0, #40	; 0x28
 80010b4:	f001 f881 	bl	80021ba <HAL_NVIC_EnableIRQ>

}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	40020800 	.word	0x40020800

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d0:	f000 fbc8 	bl	8001864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d4:	f000 f818 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f7ff ff78 	bl	8000fcc <MX_GPIO_Init>
  MX_ADC1_Init();
 80010dc:	f7ff fee0 	bl	8000ea0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80010e0:	f000 fb1c 	bl	800171c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80010e4:	f000 faa0 	bl	8001628 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <main+0x30>)
 80010ea:	f001 ffb1 	bl	8003050 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)RX,1);												//First start of aurt receive
 80010ee:	2201      	movs	r2, #1
 80010f0:	4903      	ldr	r1, [pc, #12]	; (8001100 <main+0x34>)
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <main+0x38>)
 80010f4:	f002 fcc7 	bl	8003a86 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80010f8:	e7fe      	b.n	80010f8 <main+0x2c>
 80010fa:	bf00      	nop
 80010fc:	200002b8 	.word	0x200002b8
 8001100:	2000022c 	.word	0x2000022c
 8001104:	20000300 	.word	0x20000300

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b094      	sub	sp, #80	; 0x50
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	2230      	movs	r2, #48	; 0x30
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fbc8 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <SystemClock_Config+0xc8>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <SystemClock_Config+0xc8>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <SystemClock_Config+0xc8>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <SystemClock_Config+0xcc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <SystemClock_Config+0xcc>)
 8001152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <SystemClock_Config+0xcc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800117c:	2340      	movs	r3, #64	; 0x40
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001184:	2304      	movs	r3, #4
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fa9b 	bl	80026c8 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001198:	f000 f81e 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80011a4:	23a0      	movs	r3, #160	; 0xa0
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fcfe 	bl	8002bb8 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80011c2:	f000 f809 	bl	80011d8 <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3750      	adds	r7, #80	; 0x50
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_MspInit+0x4c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_MspInit+0x4c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001280:	f000 fb42 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(EXTI->PR & EXTI_PR_PR9){
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <EXTI9_5_IRQHandler+0x54>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <EXTI9_5_IRQHandler+0x16>
		worker(2);
 8001298:	2002      	movs	r0, #2
 800129a:	f000 f8a7 	bl	80013ec <worker>
	}
	if(EXTI->PR & EXTI_PR_PR8){
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <EXTI9_5_IRQHandler+0x54>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <EXTI9_5_IRQHandler+0x28>
		worker(1);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 f89e 	bl	80013ec <worker>
	}
	if(EXTI->PR & EXTI_PR_PR6){
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <EXTI9_5_IRQHandler+0x54>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <EXTI9_5_IRQHandler+0x3a>
		worker(3);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f895 	bl	80013ec <worker>
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012c2:	2040      	movs	r0, #64	; 0x40
 80012c4:	f001 f9dc 	bl	8002680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80012c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012cc:	f001 f9d8 	bl	8002680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80012d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012d4:	f001 f9d4 	bl	8002680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	HAL_ADC_Start(&hadc1);
 80012e6:	4820      	ldr	r0, [pc, #128]	; (8001368 <TIM1_UP_TIM10_IRQHandler+0x88>)
 80012e8:	f000 fb72 	bl	80019d0 <HAL_ADC_Start>
	int8_t TEMP = ((4096-HAL_ADC_GetValue(&hadc1))/33.03)-35;
 80012ec:	481e      	ldr	r0, [pc, #120]	; (8001368 <TIM1_UP_TIM10_IRQHandler+0x88>)
 80012ee:	f000 fc41 	bl	8001b74 <HAL_ADC_GetValue>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f903 	bl	8000504 <__aeabi_ui2d>
 80012fe:	a318      	add	r3, pc, #96	; (adr r3, 8001360 <TIM1_UP_TIM10_IRQHandler+0x80>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff faa2 	bl	800084c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <TIM1_UP_TIM10_IRQHandler+0x8c>)
 8001316:	f7fe ffb7 	bl	8000288 <__aeabi_dsub>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fc19 	bl	8000b58 <__aeabi_d2iz>
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	sprintf(TEMP_TX, "Temperature is %d degrees in Celsius\r\n", TEMP);
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	461a      	mov	r2, r3
 8001330:	490f      	ldr	r1, [pc, #60]	; (8001370 <TIM1_UP_TIM10_IRQHandler+0x90>)
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <TIM1_UP_TIM10_IRQHandler+0x94>)
 8001334:	f003 ff2c 	bl	8005190 <siprintf>

	HAL_UART_Transmit(&huart3, (uint8_t *)TEMP_TX, strlen(TEMP_TX), 1000);
 8001338:	480e      	ldr	r0, [pc, #56]	; (8001374 <TIM1_UP_TIM10_IRQHandler+0x94>)
 800133a:	f7fe ff49 	bl	80001d0 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	490b      	ldr	r1, [pc, #44]	; (8001374 <TIM1_UP_TIM10_IRQHandler+0x94>)
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <TIM1_UP_TIM10_IRQHandler+0x98>)
 800134a:	f002 fb0a 	bl	8003962 <HAL_UART_Transmit>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <TIM1_UP_TIM10_IRQHandler+0x9c>)
 8001350:	f001 feee 	bl	8003130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	f3af 8000 	nop.w
 8001360:	0a3d70a4 	.word	0x0a3d70a4
 8001364:	404083d7 	.word	0x404083d7
 8001368:	2000023c 	.word	0x2000023c
 800136c:	40418000 	.word	0x40418000
 8001370:	08007600 	.word	0x08007600
 8001374:	20000284 	.word	0x20000284
 8001378:	20000300 	.word	0x20000300
 800137c:	200002b8 	.word	0x200002b8

08001380 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <USART3_IRQHandler+0x10>)
 8001386:	f002 fbaf 	bl	8003ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000300 	.word	0x20000300

08001394 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(EXTI->PR & EXTI_PR_PR11){
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <EXTI15_10_IRQHandler+0x24>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <EXTI15_10_IRQHandler+0x16>
		worker(4);
 80013a4:	2004      	movs	r0, #4
 80013a6:	f000 f821 	bl	80013ec <worker>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80013aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013ae:	f001 f967 	bl	8002680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_UART_RxCpltCallback+0x28>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d106      	bne.n	80013da <HAL_UART_RxCpltCallback+0x1e>
		worker(RX[0] - '0');
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_UART_RxCpltCallback+0x2c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	3b30      	subs	r3, #48	; 0x30
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f809 	bl	80013ec <worker>
	}
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000300 	.word	0x20000300
 80013e8:	2000022c 	.word	0x2000022c

080013ec <worker>:

void worker(uint8_t num){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 1; i < 5; i++){
 80013f6:	2301      	movs	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
 80013fa:	e027      	b.n	800144c <worker+0x60>
		if(i == num){
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	429a      	cmp	r2, r3
 8001402:	d120      	bne.n	8001446 <worker+0x5a>
			GPIOD->ODR ^= 1 << (i+11);
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <worker+0x78>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	320b      	adds	r2, #11
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	4611      	mov	r1, r2
 8001414:	4a13      	ldr	r2, [pc, #76]	; (8001464 <worker+0x78>)
 8001416:	404b      	eors	r3, r1
 8001418:	6153      	str	r3, [r2, #20]
			//TX[4] = i + '0';
			//TX[15] = ((GPIOD->ODR >> (i+11)) & 1) + '0';
			sprintf(TX,"LED %d is in state %d\r\n", i, (uint8_t)((GPIOD->ODR >> (i+11)) & 1));
 800141a:	7bf9      	ldrb	r1, [r7, #15]
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <worker+0x78>)
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	330b      	adds	r3, #11
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	460a      	mov	r2, r1
 8001430:	490d      	ldr	r1, [pc, #52]	; (8001468 <worker+0x7c>)
 8001432:	480e      	ldr	r0, [pc, #56]	; (800146c <worker+0x80>)
 8001434:	f003 feac 	bl	8005190 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)TX, sizeof(TX), 1000);
 8001438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143c:	2232      	movs	r2, #50	; 0x32
 800143e:	490b      	ldr	r1, [pc, #44]	; (800146c <worker+0x80>)
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <worker+0x84>)
 8001442:	f002 fa8e 	bl	8003962 <HAL_UART_Transmit>
	for(uint8_t i = 1; i < 5; i++){
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	3301      	adds	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b04      	cmp	r3, #4
 8001450:	d9d4      	bls.n	80013fc <worker+0x10>
		}
	}
	HAL_UART_Receive_IT(&huart3, (uint8_t *)RX,1);
 8001452:	2201      	movs	r2, #1
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <worker+0x88>)
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <worker+0x84>)
 8001458:	f002 fb15 	bl	8003a86 <HAL_UART_Receive_IT>
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40020c00 	.word	0x40020c00
 8001468:	08007628 	.word	0x08007628
 800146c:	20000000 	.word	0x20000000
 8001470:	20000300 	.word	0x20000300
 8001474:	2000022c 	.word	0x2000022c

08001478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	return 1;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_kill>:

int _kill(int pid, int sig)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001492:	f003 f9e1 	bl	8004858 <__errno>
 8001496:	4603      	mov	r3, r0
 8001498:	2216      	movs	r2, #22
 800149a:	601a      	str	r2, [r3, #0]
	return -1;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_exit>:

void _exit (int status)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffe7 	bl	8001488 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ba:	e7fe      	b.n	80014ba <_exit+0x12>

080014bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	e00a      	b.n	80014e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ce:	f3af 8000 	nop.w
 80014d2:	4601      	mov	r1, r0
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	60ba      	str	r2, [r7, #8]
 80014da:	b2ca      	uxtb	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf0      	blt.n	80014ce <_read+0x12>
	}

return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e009      	b.n	800151c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf1      	blt.n	8001508 <_write+0x12>
	}
	return len;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_close>:

int _close(int file)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
	return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001556:	605a      	str	r2, [r3, #4]
	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_isatty>:

int _isatty(int file)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	return 1;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	return 0;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f003 f946 	bl	8004858 <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20020000 	.word	0x20020000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	20000230 	.word	0x20000230
 8001600:	20000358 	.word	0x20000358

08001604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <SystemInit+0x20>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <SystemInit+0x20>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <MX_TIM1_Init+0x9c>)
 8001646:	4a20      	ldr	r2, [pc, #128]	; (80016c8 <MX_TIM1_Init+0xa0>)
 8001648:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40000-1;
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MX_TIM1_Init+0x9c>)
 800164c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001650:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <MX_TIM1_Init+0x9c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_TIM1_Init+0x9c>)
 800165a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800165e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_TIM1_Init+0x9c>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_TIM1_Init+0x9c>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <MX_TIM1_Init+0x9c>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001672:	4814      	ldr	r0, [pc, #80]	; (80016c4 <MX_TIM1_Init+0x9c>)
 8001674:	f001 fc9c 	bl	8002fb0 <HAL_TIM_Base_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800167e:	f7ff fdab 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001686:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4619      	mov	r1, r3
 800168e:	480d      	ldr	r0, [pc, #52]	; (80016c4 <MX_TIM1_Init+0x9c>)
 8001690:	f001 fe56 	bl	8003340 <HAL_TIM_ConfigClockSource>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800169a:	f7ff fd9d 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a6:	463b      	mov	r3, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <MX_TIM1_Init+0x9c>)
 80016ac:	f002 f87c 	bl	80037a8 <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80016b6:	f7ff fd8f 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200002b8 	.word	0x200002b8
 80016c8:	40010000 	.word	0x40010000

080016cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_TIM_Base_MspInit+0x48>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d115      	bne.n	800170a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_TIM_Base_MspInit+0x4c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <HAL_TIM_Base_MspInit+0x4c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_TIM_Base_MspInit+0x4c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2019      	movs	r0, #25
 8001700:	f000 fd3f 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001704:	2019      	movs	r0, #25
 8001706:	f000 fd58 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40010000 	.word	0x40010000
 8001718:	40023800 	.word	0x40023800

0800171c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_USART3_UART_Init+0x4c>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_USART3_UART_Init+0x50>)
 8001724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_USART3_UART_Init+0x4c>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_USART3_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_USART3_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_USART3_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_USART3_UART_Init+0x4c>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_USART3_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_USART3_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_USART3_UART_Init+0x4c>)
 8001754:	f002 f8b8 	bl	80038c8 <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800175e:	f7ff fd3b 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000300 	.word	0x20000300
 800176c:	40004800 	.word	0x40004800

08001770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_UART_MspInit+0x94>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d134      	bne.n	80017fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <HAL_UART_MspInit+0x98>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_UART_MspInit+0x98>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_UART_MspInit+0x98>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_UART_MspInit+0x98>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a14      	ldr	r2, [pc, #80]	; (8001808 <HAL_UART_MspInit+0x98>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_UART_MspInit+0x98>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017dc:	2307      	movs	r3, #7
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	4809      	ldr	r0, [pc, #36]	; (800180c <HAL_UART_MspInit+0x9c>)
 80017e8:	f000 fd94 	bl	8002314 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2027      	movs	r0, #39	; 0x27
 80017f2:	f000 fcc6 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017f6:	2027      	movs	r0, #39	; 0x27
 80017f8:	f000 fcdf 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40004800 	.word	0x40004800
 8001808:	40023800 	.word	0x40023800
 800180c:	40020c00 	.word	0x40020c00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001848 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001816:	490e      	ldr	r1, [pc, #56]	; (8001850 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800182c:	4c0b      	ldr	r4, [pc, #44]	; (800185c <LoopFillZerobss+0x26>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800183a:	f7ff fee3 	bl	8001604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f003 f811 	bl	8004864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7ff fc43 	bl	80010cc <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001854:	08007a4c 	.word	0x08007a4c
  ldr r2, =_sbss
 8001858:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800185c:	20000358 	.word	0x20000358

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_Init+0x40>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_Init+0x40>)
 800187a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x40>)
 8001886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 fc6d 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	200f      	movs	r0, #15
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fca4 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fc85 	bl	80021d6 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 fc4d 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000034 	.word	0x20000034
 8001900:	2000003c 	.word	0x2000003c
 8001904:	20000038 	.word	0x20000038

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000003c 	.word	0x2000003c
 800192c:	20000344 	.word	0x20000344

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000344 	.word	0x20000344

08001948 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e033      	b.n	80019c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff faec 	bl	8000f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	d118      	bne.n	80019b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800198e:	f023 0302 	bic.w	r3, r3, #2
 8001992:	f043 0202 	orr.w	r2, r3, #2
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fa1a 	bl	8001dd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f023 0303 	bic.w	r3, r3, #3
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
 80019b6:	e001      	b.n	80019bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Start+0x1a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e0b2      	b.n	8001b50 <HAL_ADC_Start+0x180>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d018      	beq.n	8001a32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <HAL_ADC_Start+0x18c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_ADC_Start+0x190>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9a      	lsrs	r2, r3, #18
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a24:	e002      	b.n	8001a2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f9      	bne.n	8001a26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d17a      	bne.n	8001b36 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7e:	d106      	bne.n	8001a8e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f023 0206 	bic.w	r2, r3, #6
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a8c:	e002      	b.n	8001a94 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_ADC_Start+0x194>)
 8001a9e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aa8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d12a      	bne.n	8001b0c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <HAL_ADC_Start+0x198>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d015      	beq.n	8001aec <HAL_ADC_Start+0x11c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a29      	ldr	r2, [pc, #164]	; (8001b6c <HAL_ADC_Start+0x19c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d105      	bne.n	8001ad6 <HAL_ADC_Start+0x106>
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_ADC_Start+0x194>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_ADC_Start+0x1a0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d136      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_ADC_Start+0x194>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d130      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d129      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	e020      	b.n	8001b4e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <HAL_ADC_Start+0x198>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d11b      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d114      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e00b      	b.n	8001b4e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f043 0210 	orr.w	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20000034 	.word	0x20000034
 8001b60:	431bde83 	.word	0x431bde83
 8001b64:	40012300 	.word	0x40012300
 8001b68:	40012000 	.word	0x40012000
 8001b6c:	40012100 	.word	0x40012100
 8001b70:	40012200 	.word	0x40012200

08001b74 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1c>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e105      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x228>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	d925      	bls.n	8001c08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68d9      	ldr	r1, [r3, #12]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b1e      	subs	r3, #30
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	400a      	ands	r2, r1
 8001be0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68d9      	ldr	r1, [r3, #12]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4403      	add	r3, r0
 8001bfa:	3b1e      	subs	r3, #30
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	e022      	b.n	8001c4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6919      	ldr	r1, [r3, #16]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	400a      	ands	r2, r1
 8001c2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6919      	ldr	r1, [r3, #16]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4403      	add	r3, r0
 8001c44:	409a      	lsls	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d824      	bhi.n	8001ca0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	3b05      	subs	r3, #5
 8001c68:	221f      	movs	r2, #31
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	400a      	ands	r2, r1
 8001c76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b05      	subs	r3, #5
 8001c92:	fa00 f203 	lsl.w	r2, r0, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9e:	e04c      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d824      	bhi.n	8001cf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b23      	subs	r3, #35	; 0x23
 8001cba:	221f      	movs	r2, #31
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43da      	mvns	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3b23      	subs	r3, #35	; 0x23
 8001ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf0:	e023      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	3b41      	subs	r3, #65	; 0x41
 8001d04:	221f      	movs	r2, #31
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	400a      	ands	r2, r1
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3b41      	subs	r3, #65	; 0x41
 8001d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_ADC_ConfigChannel+0x234>)
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_ADC_ConfigChannel+0x238>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d109      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1cc>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b12      	cmp	r3, #18
 8001d4e:	d105      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_ADC_ConfigChannel+0x238>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d123      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x21e>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b10      	cmp	r3, #16
 8001d6c:	d003      	beq.n	8001d76 <HAL_ADC_ConfigChannel+0x1e6>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b11      	cmp	r3, #17
 8001d74:	d11b      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b10      	cmp	r3, #16
 8001d88:	d111      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_ADC_ConfigChannel+0x23c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_ADC_ConfigChannel+0x240>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	0c9a      	lsrs	r2, r3, #18
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f9      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40012300 	.word	0x40012300
 8001dc8:	40012000 	.word	0x40012000
 8001dcc:	20000034 	.word	0x20000034
 8001dd0:	431bde83 	.word	0x431bde83

08001dd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ddc:	4b79      	ldr	r3, [pc, #484]	; (8001fc4 <ADC_Init+0x1f0>)
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6859      	ldr	r1, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	021a      	lsls	r2, r3, #8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <ADC_Init+0x1f4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d022      	beq.n	8001eb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6899      	ldr	r1, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	e00f      	b.n	8001ed2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ed0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0202 	bic.w	r2, r2, #2
 8001ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e1b      	ldrb	r3, [r3, #24]
 8001eec:	005a      	lsls	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01b      	beq.n	8001f38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	035a      	lsls	r2, r3, #13
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	e007      	b.n	8001f48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	051a      	lsls	r2, r3, #20
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6899      	ldr	r1, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f8a:	025a      	lsls	r2, r3, #9
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	029a      	lsls	r2, r3, #10
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	609a      	str	r2, [r3, #8]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40012300 	.word	0x40012300
 8001fc8:	0f000001 	.word	0x0f000001

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4907      	ldr	r1, [pc, #28]	; (8002068 <__NVIC_EnableIRQ+0x38>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	; (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff29 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff3e 	bl	8002014 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff8e 	bl	80020c0 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff31 	bl	8002030 <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa2 	bl	8002128 <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff fb98 	bl	8001930 <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d008      	beq.n	8002220 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2280      	movs	r2, #128	; 0x80
 8002212:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e052      	b.n	80022c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0216 	bic.w	r2, r2, #22
 800222e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800223e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <HAL_DMA_Abort+0x62>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0208 	bic.w	r2, r2, #8
 800225e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002270:	e013      	b.n	800229a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002272:	f7ff fb5d 	bl	8001930 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b05      	cmp	r3, #5
 800227e:	d90c      	bls.n	800229a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e015      	b.n	80022c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e4      	bne.n	8002272 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	223f      	movs	r2, #63	; 0x3f
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d004      	beq.n	80022ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e00c      	b.n	8002306 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2205      	movs	r2, #5
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e16b      	b.n	8002608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 815a 	bne.w	8002602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d005      	beq.n	8002366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002362:	2b02      	cmp	r3, #2
 8002364:	d130      	bne.n	80023c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80b4 	beq.w	8002602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b60      	ldr	r3, [pc, #384]	; (8002620 <HAL_GPIO_Init+0x30c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a5f      	ldr	r2, [pc, #380]	; (8002620 <HAL_GPIO_Init+0x30c>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b5d      	ldr	r3, [pc, #372]	; (8002620 <HAL_GPIO_Init+0x30c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a5b      	ldr	r2, [pc, #364]	; (8002624 <HAL_GPIO_Init+0x310>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_GPIO_Init+0x314>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d02b      	beq.n	800253a <HAL_GPIO_Init+0x226>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a51      	ldr	r2, [pc, #324]	; (800262c <HAL_GPIO_Init+0x318>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d025      	beq.n	8002536 <HAL_GPIO_Init+0x222>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a50      	ldr	r2, [pc, #320]	; (8002630 <HAL_GPIO_Init+0x31c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01f      	beq.n	8002532 <HAL_GPIO_Init+0x21e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <HAL_GPIO_Init+0x320>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d019      	beq.n	800252e <HAL_GPIO_Init+0x21a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <HAL_GPIO_Init+0x324>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x216>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4d      	ldr	r2, [pc, #308]	; (800263c <HAL_GPIO_Init+0x328>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x212>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4c      	ldr	r2, [pc, #304]	; (8002640 <HAL_GPIO_Init+0x32c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4b      	ldr	r2, [pc, #300]	; (8002644 <HAL_GPIO_Init+0x330>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x20a>
 800251a:	2307      	movs	r3, #7
 800251c:	e00e      	b.n	800253c <HAL_GPIO_Init+0x228>
 800251e:	2308      	movs	r3, #8
 8002520:	e00c      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002522:	2306      	movs	r3, #6
 8002524:	e00a      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002526:	2305      	movs	r3, #5
 8002528:	e008      	b.n	800253c <HAL_GPIO_Init+0x228>
 800252a:	2304      	movs	r3, #4
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x228>
 800252e:	2303      	movs	r3, #3
 8002530:	e004      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002532:	2302      	movs	r3, #2
 8002534:	e002      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_GPIO_Init+0x228>
 800253a:	2300      	movs	r3, #0
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	f002 0203 	and.w	r2, r2, #3
 8002542:	0092      	lsls	r2, r2, #2
 8002544:	4093      	lsls	r3, r2
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800254c:	4935      	ldr	r1, [pc, #212]	; (8002624 <HAL_GPIO_Init+0x310>)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_GPIO_Init+0x334>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257e:	4a32      	ldr	r2, [pc, #200]	; (8002648 <HAL_GPIO_Init+0x334>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_GPIO_Init+0x334>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a8:	4a27      	ldr	r2, [pc, #156]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d2:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <HAL_GPIO_Init+0x334>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b0f      	cmp	r3, #15
 800260c:	f67f ae90 	bls.w	8002330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40013800 	.word	0x40013800
 8002628:	40020000 	.word	0x40020000
 800262c:	40020400 	.word	0x40020400
 8002630:	40020800 	.word	0x40020800
 8002634:	40020c00 	.word	0x40020c00
 8002638:	40021000 	.word	0x40021000
 800263c:	40021400 	.word	0x40021400
 8002640:	40021800 	.word	0x40021800
 8002644:	40021c00 	.word	0x40021c00
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f806 	bl	80026b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e264      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d075      	beq.n	80027d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	4ba3      	ldr	r3, [pc, #652]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d00c      	beq.n	800270c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4ba0      	ldr	r3, [pc, #640]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b9d      	ldr	r3, [pc, #628]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270a:	d10b      	bne.n	8002724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4b99      	ldr	r3, [pc, #612]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05b      	beq.n	80027d0 <HAL_RCC_OscConfig+0x108>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d157      	bne.n	80027d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e23f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x74>
 800272e:	4b91      	ldr	r3, [pc, #580]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a90      	ldr	r2, [pc, #576]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e01d      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x98>
 8002746:	4b8b      	ldr	r3, [pc, #556]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a8a      	ldr	r2, [pc, #552]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a87      	ldr	r2, [pc, #540]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0xb0>
 8002760:	4b84      	ldr	r3, [pc, #528]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a83      	ldr	r2, [pc, #524]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b81      	ldr	r3, [pc, #516]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a80      	ldr	r2, [pc, #512]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff f8d6 	bl	8001930 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff f8d2 	bl	8001930 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e204      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0xc0>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7ff f8c2 	bl	8001930 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff f8be 	bl	8001930 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1f0      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	4b6c      	ldr	r3, [pc, #432]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0xe8>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d063      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b62      	ldr	r3, [pc, #392]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d11c      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d116      	bne.n	8002830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e1c4      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281a:	4b56      	ldr	r3, [pc, #344]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4952      	ldr	r1, [pc, #328]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	e03a      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002838:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <HAL_RCC_OscConfig+0x2b0>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7ff f877 	bl	8001930 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7ff f873 	bl	8001930 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e1a5      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4940      	ldr	r1, [pc, #256]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_RCC_OscConfig+0x2b0>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7ff f856 	bl	8001930 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002888:	f7ff f852 	bl	8001930 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e184      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d030      	beq.n	8002914 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_RCC_OscConfig+0x2b4>)
 80028bc:	2201      	movs	r2, #1
 80028be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7ff f836 	bl	8001930 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c8:	f7ff f832 	bl	8001930 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e164      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x200>
 80028e6:	e015      	b.n	8002914 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b24      	ldr	r3, [pc, #144]	; (800297c <HAL_RCC_OscConfig+0x2b4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7ff f81f 	bl	8001930 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f6:	f7ff f81b 	bl	8001930 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e14d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800290a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80a0 	beq.w	8002a62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a0e      	ldr	r2, [pc, #56]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294e:	2301      	movs	r3, #1
 8002950:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_OscConfig+0x2b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d121      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <HAL_RCC_OscConfig+0x2b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_RCC_OscConfig+0x2b8>)
 8002964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296a:	f7fe ffe1 	bl	8001930 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002970:	e011      	b.n	8002996 <HAL_RCC_OscConfig+0x2ce>
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	42470000 	.word	0x42470000
 800297c:	42470e80 	.word	0x42470e80
 8002980:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002984:	f7fe ffd4 	bl	8001930 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e106      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b85      	ldr	r3, [pc, #532]	; (8002bac <HAL_RCC_OscConfig+0x4e4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d106      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2f0>
 80029aa:	4b81      	ldr	r3, [pc, #516]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a80      	ldr	r2, [pc, #512]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	e01c      	b.n	80029f2 <HAL_RCC_OscConfig+0x32a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d10c      	bne.n	80029da <HAL_RCC_OscConfig+0x312>
 80029c0:	4b7b      	ldr	r3, [pc, #492]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a7a      	ldr	r2, [pc, #488]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
 80029cc:	4b78      	ldr	r3, [pc, #480]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a77      	ldr	r2, [pc, #476]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70
 80029d8:	e00b      	b.n	80029f2 <HAL_RCC_OscConfig+0x32a>
 80029da:	4b75      	ldr	r3, [pc, #468]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a74      	ldr	r2, [pc, #464]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	4b72      	ldr	r3, [pc, #456]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	4a71      	ldr	r2, [pc, #452]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe ff99 	bl	8001930 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe ff95 	bl	8001930 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e0c5      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	4b65      	ldr	r3, [pc, #404]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ee      	beq.n	8002a02 <HAL_RCC_OscConfig+0x33a>
 8002a24:	e014      	b.n	8002a50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7fe ff83 	bl	8001930 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe ff7f 	bl	8001930 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0af      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a44:	4b5a      	ldr	r3, [pc, #360]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d105      	bne.n	8002a62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a56:	4b56      	ldr	r3, [pc, #344]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a55      	ldr	r2, [pc, #340]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 809b 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6c:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d05c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d141      	bne.n	8002b04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a80:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <HAL_RCC_OscConfig+0x4ec>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe ff53 	bl	8001930 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe ff4f 	bl	8001930 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e081      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	019b      	lsls	r3, r3, #6
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	085b      	lsrs	r3, r3, #1
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
 8002ad0:	4937      	ldr	r1, [pc, #220]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <HAL_RCC_OscConfig+0x4ec>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe ff28 	bl	8001930 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe ff24 	bl	8001930 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e056      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x41c>
 8002b02:	e04e      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_OscConfig+0x4ec>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7fe ff11 	bl	8001930 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b12:	f7fe ff0d 	bl	8001930 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e03f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x44a>
 8002b30:	e037      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e032      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <HAL_RCC_OscConfig+0x4e8>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d028      	beq.n	8002b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d121      	bne.n	8002b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d11a      	bne.n	8002b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b6e:	4013      	ands	r3, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d111      	bne.n	8002b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	3b01      	subs	r3, #1
 8002b88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	42470060 	.word	0x42470060

08002bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0cc      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d90c      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b8      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c24:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a52      	ldr	r2, [pc, #328]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	494d      	ldr	r1, [pc, #308]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d044      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d119      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e06f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e067      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4934      	ldr	r1, [pc, #208]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fe42 	bl	8001930 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7fe fe3e 	bl	8001930 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e04f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d20c      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e032      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4916      	ldr	r1, [pc, #88]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490e      	ldr	r1, [pc, #56]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 f821 	bl	8002d84 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	490a      	ldr	r1, [pc, #40]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fda2 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08007640 	.word	0x08007640
 8002d7c:	20000034 	.word	0x20000034
 8002d80:	20000038 	.word	0x20000038

08002d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	2300      	movs	r3, #0
 8002d96:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d9c:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d00d      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	f200 80bd 	bhi.w	8002f28 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x34>
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002db6:	e0b7      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dba:	60bb      	str	r3, [r7, #8]
       break;
 8002dbc:	e0b7      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dbe:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002dc0:	60bb      	str	r3, [r7, #8]
      break;
 8002dc2:	e0b4      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4b5d      	ldr	r3, [pc, #372]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dce:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d04d      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b58      	ldr	r3, [pc, #352]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	461a      	mov	r2, r3
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	ea02 0800 	and.w	r8, r2, r0
 8002df2:	ea03 0901 	and.w	r9, r3, r1
 8002df6:	4640      	mov	r0, r8
 8002df8:	4649      	mov	r1, r9
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	014b      	lsls	r3, r1, #5
 8002e04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e08:	0142      	lsls	r2, r0, #5
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	ebb0 0008 	subs.w	r0, r0, r8
 8002e12:	eb61 0109 	sbc.w	r1, r1, r9
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	018b      	lsls	r3, r1, #6
 8002e20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e24:	0182      	lsls	r2, r0, #6
 8002e26:	1a12      	subs	r2, r2, r0
 8002e28:	eb63 0301 	sbc.w	r3, r3, r1
 8002e2c:	f04f 0000 	mov.w	r0, #0
 8002e30:	f04f 0100 	mov.w	r1, #0
 8002e34:	00d9      	lsls	r1, r3, #3
 8002e36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e3a:	00d0      	lsls	r0, r2, #3
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	eb12 0208 	adds.w	r2, r2, r8
 8002e44:	eb43 0309 	adc.w	r3, r3, r9
 8002e48:	f04f 0000 	mov.w	r0, #0
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	0259      	lsls	r1, r3, #9
 8002e52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e56:	0250      	lsls	r0, r2, #9
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	f7fd fe9e 	bl	8000ba8 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4613      	mov	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	e04a      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e76:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	ea02 0400 	and.w	r4, r2, r0
 8002e8e:	ea03 0501 	and.w	r5, r3, r1
 8002e92:	4620      	mov	r0, r4
 8002e94:	4629      	mov	r1, r5
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	014b      	lsls	r3, r1, #5
 8002ea0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ea4:	0142      	lsls	r2, r0, #5
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	1b00      	subs	r0, r0, r4
 8002eac:	eb61 0105 	sbc.w	r1, r1, r5
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	018b      	lsls	r3, r1, #6
 8002eba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ebe:	0182      	lsls	r2, r0, #6
 8002ec0:	1a12      	subs	r2, r2, r0
 8002ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec6:	f04f 0000 	mov.w	r0, #0
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	00d9      	lsls	r1, r3, #3
 8002ed0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed4:	00d0      	lsls	r0, r2, #3
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	1912      	adds	r2, r2, r4
 8002edc:	eb45 0303 	adc.w	r3, r5, r3
 8002ee0:	f04f 0000 	mov.w	r0, #0
 8002ee4:	f04f 0100 	mov.w	r1, #0
 8002ee8:	0299      	lsls	r1, r3, #10
 8002eea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002eee:	0290      	lsls	r0, r2, #10
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	f7fd fe52 	bl	8000ba8 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	60bb      	str	r3, [r7, #8]
      break;
 8002f26:	e002      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f2a:	60bb      	str	r3, [r7, #8]
      break;
 8002f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000034 	.word	0x20000034

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f64:	f7ff fff0 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08007650 	.word	0x08007650

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f8c:	f7ff ffdc 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0b5b      	lsrs	r3, r3, #13
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	08007650 	.word	0x08007650

08002fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e041      	b.n	8003046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fb78 	bl	80016cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f000 faa0 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d001      	beq.n	8003068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e04e      	b.n	8003106 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <HAL_TIM_Base_Start_IT+0xc4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d022      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003092:	d01d      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1f      	ldr	r2, [pc, #124]	; (8003118 <HAL_TIM_Base_Start_IT+0xc8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d018      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_TIM_Base_Start_IT+0xcc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_TIM_Base_Start_IT+0xd0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00e      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_TIM_Base_Start_IT+0xd4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_TIM_Base_Start_IT+0xd8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x80>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_TIM_Base_Start_IT+0xdc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d111      	bne.n	80030f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d010      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	e007      	b.n	8003104 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000
 8003118:	40000400 	.word	0x40000400
 800311c:	40000800 	.word	0x40000800
 8003120:	40000c00 	.word	0x40000c00
 8003124:	40010400 	.word	0x40010400
 8003128:	40014000 	.word	0x40014000
 800312c:	40001800 	.word	0x40001800

08003130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d122      	bne.n	800318c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b02      	cmp	r3, #2
 8003152:	d11b      	bne.n	800318c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0202 	mvn.w	r2, #2
 800315c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f9bf 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9b1 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f9c2 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0204 	mvn.w	r2, #4
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f995 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f987 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f998 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0208 	mvn.w	r2, #8
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f96b 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f95d 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f96e 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b10      	cmp	r3, #16
 8003240:	d122      	bne.n	8003288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b10      	cmp	r3, #16
 800324e:	d11b      	bne.n	8003288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0210 	mvn.w	r2, #16
 8003258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2208      	movs	r2, #8
 800325e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f941 	bl	80034f6 <HAL_TIM_IC_CaptureCallback>
 8003274:	e005      	b.n	8003282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f933 	bl	80034e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f944 	bl	800350a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0201 	mvn.w	r2, #1
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f90d 	bl	80034ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 faea 	bl	80038b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d10e      	bne.n	800330c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d107      	bne.n	800330c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f909 	bl	800351e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b20      	cmp	r3, #32
 8003318:	d10e      	bne.n	8003338 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b20      	cmp	r3, #32
 8003326:	d107      	bne.n	8003338 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0220 	mvn.w	r2, #32
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fab4 	bl	80038a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIM_ConfigClockSource+0x1c>
 8003358:	2302      	movs	r3, #2
 800335a:	e0b4      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x186>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800337a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003394:	d03e      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0xd4>
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339a:	f200 8087 	bhi.w	80034ac <HAL_TIM_ConfigClockSource+0x16c>
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a2:	f000 8086 	beq.w	80034b2 <HAL_TIM_ConfigClockSource+0x172>
 80033a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033aa:	d87f      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x16c>
 80033ac:	2b70      	cmp	r3, #112	; 0x70
 80033ae:	d01a      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0xa6>
 80033b0:	2b70      	cmp	r3, #112	; 0x70
 80033b2:	d87b      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x16c>
 80033b4:	2b60      	cmp	r3, #96	; 0x60
 80033b6:	d050      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x11a>
 80033b8:	2b60      	cmp	r3, #96	; 0x60
 80033ba:	d877      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x16c>
 80033bc:	2b50      	cmp	r3, #80	; 0x50
 80033be:	d03c      	beq.n	800343a <HAL_TIM_ConfigClockSource+0xfa>
 80033c0:	2b50      	cmp	r3, #80	; 0x50
 80033c2:	d873      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x16c>
 80033c4:	2b40      	cmp	r3, #64	; 0x40
 80033c6:	d058      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x13a>
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d86f      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x16c>
 80033cc:	2b30      	cmp	r3, #48	; 0x30
 80033ce:	d064      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x15a>
 80033d0:	2b30      	cmp	r3, #48	; 0x30
 80033d2:	d86b      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x16c>
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d060      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x15a>
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d867      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x16c>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05c      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x15a>
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d05a      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x15a>
 80033e4:	e062      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6899      	ldr	r1, [r3, #8]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f000 f9b7 	bl	8003768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	609a      	str	r2, [r3, #8]
      break;
 8003412:	e04f      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f000 f9a0 	bl	8003768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003436:	609a      	str	r2, [r3, #8]
      break;
 8003438:	e03c      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	461a      	mov	r2, r3
 8003448:	f000 f914 	bl	8003674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2150      	movs	r1, #80	; 0x50
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f96d 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003458:	e02c      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	461a      	mov	r2, r3
 8003468:	f000 f933 	bl	80036d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2160      	movs	r1, #96	; 0x60
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f95d 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003478:	e01c      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	f000 f8f4 	bl	8003674 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2140      	movs	r1, #64	; 0x40
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f94d 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003498:	e00c      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f000 f944 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 80034aa:	e003      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      break;
 80034b0:	e000      	b.n	80034b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a40      	ldr	r2, [pc, #256]	; (8003648 <TIM_Base_SetConfig+0x114>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003552:	d00f      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a3d      	ldr	r2, [pc, #244]	; (800364c <TIM_Base_SetConfig+0x118>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00b      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3c      	ldr	r2, [pc, #240]	; (8003650 <TIM_Base_SetConfig+0x11c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a3b      	ldr	r2, [pc, #236]	; (8003654 <TIM_Base_SetConfig+0x120>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <TIM_Base_SetConfig+0x124>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <TIM_Base_SetConfig+0x114>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02b      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003594:	d027      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2c      	ldr	r2, [pc, #176]	; (800364c <TIM_Base_SetConfig+0x118>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d023      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <TIM_Base_SetConfig+0x11c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01f      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <TIM_Base_SetConfig+0x120>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01b      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <TIM_Base_SetConfig+0x124>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d017      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <TIM_Base_SetConfig+0x128>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <TIM_Base_SetConfig+0x12c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00f      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <TIM_Base_SetConfig+0x130>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <TIM_Base_SetConfig+0x134>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a24      	ldr	r2, [pc, #144]	; (800366c <TIM_Base_SetConfig+0x138>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a23      	ldr	r2, [pc, #140]	; (8003670 <TIM_Base_SetConfig+0x13c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d108      	bne.n	80035f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <TIM_Base_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0xf8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0c      	ldr	r2, [pc, #48]	; (8003658 <TIM_Base_SetConfig+0x124>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d103      	bne.n	8003634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	615a      	str	r2, [r3, #20]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40010400 	.word	0x40010400
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800
 8003668:	40001800 	.word	0x40001800
 800366c:	40001c00 	.word	0x40001c00
 8003670:	40002000 	.word	0x40002000

08003674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f023 0201 	bic.w	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800369e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 030a 	bic.w	r3, r3, #10
 80036b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b087      	sub	sp, #28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0210 	bic.w	r2, r3, #16
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	031b      	lsls	r3, r3, #12
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800370e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	621a      	str	r2, [r3, #32]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	f043 0307 	orr.w	r3, r3, #7
 8003754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	431a      	orrs	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4313      	orrs	r3, r2
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e05a      	b.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a21      	ldr	r2, [pc, #132]	; (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d022      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380c:	d01d      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d018      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a18      	ldr	r2, [pc, #96]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d009      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a17      	ldr	r2, [pc, #92]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a15      	ldr	r2, [pc, #84]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10c      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	4313      	orrs	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40010400 	.word	0x40010400
 8003898:	40014000 	.word	0x40014000
 800389c:	40001800 	.word	0x40001800

080038a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e03f      	b.n	800395a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd ff3e 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	; 0x24
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fddb 	bl	80044c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b08a      	sub	sp, #40	; 0x28
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	d17c      	bne.n	8003a7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_UART_Transmit+0x2c>
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e075      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Transmit+0x3e>
 800399c:	2302      	movs	r3, #2
 800399e:	e06e      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2221      	movs	r2, #33	; 0x21
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039b6:	f7fd ffbb 	bl	8001930 <HAL_GetTick>
 80039ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	88fa      	ldrh	r2, [r7, #6]
 80039c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d0:	d108      	bne.n	80039e4 <HAL_UART_Transmit+0x82>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e003      	b.n	80039ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039f4:	e02a      	b.n	8003a4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	2180      	movs	r1, #128	; 0x80
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fb1f 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e036      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10b      	bne.n	8003a2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	3302      	adds	r3, #2
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e007      	b.n	8003a3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1cf      	bne.n	80039f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2140      	movs	r1, #64	; 0x40
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 faef 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e006      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e000      	b.n	8003a7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d11d      	bne.n	8003adc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Receive_IT+0x26>
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e016      	b.n	8003ade <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Receive_IT+0x38>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e00f      	b.n	8003ade <HAL_UART_Receive_IT+0x58>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fb24 	bl	8004120 <UART_Start_Receive_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	e000      	b.n	8003ade <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b0ba      	sub	sp, #232	; 0xe8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fc03 	bl	8004352 <UART_Receive_IT>
      return;
 8003b4c:	e256      	b.n	8003ffc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80de 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
 8003b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80d1 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
 8003b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
 8003ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
 8003bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f043 0208 	orr.w	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 81ed 	beq.w	8003ff2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
 8003c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fb8e 	bl	8004352 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <HAL_UART_IRQHandler+0x17a>
 8003c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d04f      	beq.n	8003d02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa96 	bl	8004194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d141      	bne.n	8003cfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1d9      	bne.n	8003c76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d013      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	4a7d      	ldr	r2, [pc, #500]	; (8003ec4 <HAL_UART_IRQHandler+0x3dc>)
 8003cd0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe faf9 	bl	80022ce <HAL_DMA_Abort_IT>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cec:	4610      	mov	r0, r2
 8003cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	e00e      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f990 	bl	8004018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf8:	e00a      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f98c 	bl	8004018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	e006      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f988 	bl	8004018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d0e:	e170      	b.n	8003ff2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	bf00      	nop
    return;
 8003d12:	e16e      	b.n	8003ff2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 814a 	bne.w	8003fb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8143 	beq.w	8003fb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 813c 	beq.w	8003fb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	f040 80b4 	bne.w	8003ec8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8140 	beq.w	8003ff6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	f080 8139 	bcs.w	8003ff6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d96:	f000 8088 	beq.w	8003eaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1d9      	bne.n	8003d9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3314      	adds	r3, #20
 8003dec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e1      	bne.n	8003de6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7a:	f023 0310 	bic.w	r3, r3, #16
 8003e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e3      	bne.n	8003e68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe f9a2 	bl	80021ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4619      	mov	r1, r3
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8b6 	bl	800402c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ec0:	e099      	b.n	8003ff6 <HAL_UART_IRQHandler+0x50e>
 8003ec2:	bf00      	nop
 8003ec4:	0800425b 	.word	0x0800425b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 808b 	beq.w	8003ffa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8086 	beq.w	8003ffa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f12:	647a      	str	r2, [r7, #68]	; 0x44
 8003f14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e3      	bne.n	8003eee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	623b      	str	r3, [r7, #32]
   return(result);
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f4a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e3      	bne.n	8003f26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0310 	bic.w	r3, r3, #16
 8003f82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f90:	61fa      	str	r2, [r7, #28]
 8003f92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e3      	bne.n	8003f6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f83e 	bl	800402c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fb0:	e023      	b.n	8003ffa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x4ea>
 8003fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f959 	bl	8004282 <UART_Transmit_IT>
    return;
 8003fd0:	e014      	b.n	8003ffc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00e      	beq.n	8003ffc <HAL_UART_IRQHandler+0x514>
 8003fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f999 	bl	8004322 <UART_EndTransmit_IT>
    return;
 8003ff0:	e004      	b.n	8003ffc <HAL_UART_IRQHandler+0x514>
    return;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <HAL_UART_IRQHandler+0x514>
      return;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <HAL_UART_IRQHandler+0x514>
      return;
 8003ffa:	bf00      	nop
  }
}
 8003ffc:	37e8      	adds	r7, #232	; 0xe8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop

08004004 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b090      	sub	sp, #64	; 0x40
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004054:	e050      	b.n	80040f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d04c      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800405e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x30>
 8004064:	f7fd fc64 	bl	8001930 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004070:	429a      	cmp	r2, r3
 8004072:	d241      	bcs.n	80040f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004094:	637a      	str	r2, [r7, #52]	; 0x34
 8004096:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	613b      	str	r3, [r7, #16]
   return(result);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040c8:	623a      	str	r2, [r7, #32]
 80040ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	69f9      	ldr	r1, [r7, #28]
 80040ce:	6a3a      	ldr	r2, [r7, #32]
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e00f      	b.n	8004118 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4013      	ands	r3, r2
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	429a      	cmp	r2, r3
 8004114:	d09f      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3740      	adds	r7, #64	; 0x40
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	88fa      	ldrh	r2, [r7, #6]
 800413e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2222      	movs	r2, #34	; 0x22
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004164:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0220 	orr.w	r2, r2, #32
 8004184:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b095      	sub	sp, #84	; 0x54
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041bc:	643a      	str	r2, [r7, #64]	; 0x40
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e5      	bne.n	800419c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3314      	adds	r3, #20
 80041d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	2b01      	cmp	r3, #1
 800420a:	d119      	bne.n	8004240 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	60bb      	str	r3, [r7, #8]
   return(result);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	647b      	str	r3, [r7, #68]	; 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800422c:	61ba      	str	r2, [r7, #24]
 800422e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6979      	ldr	r1, [r7, #20]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	613b      	str	r3, [r7, #16]
   return(result);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800424e:	bf00      	nop
 8004250:	3754      	adds	r7, #84	; 0x54
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7ff fecf 	bl	8004018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b21      	cmp	r3, #33	; 0x21
 8004294:	d13e      	bne.n	8004314 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429e:	d114      	bne.n	80042ca <UART_Transmit_IT+0x48>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d110      	bne.n	80042ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	1c9a      	adds	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	621a      	str	r2, [r3, #32]
 80042c8:	e008      	b.n	80042dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	1c59      	adds	r1, r3, #1
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6211      	str	r1, [r2, #32]
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4619      	mov	r1, r3
 80042ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10f      	bne.n	8004310 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800430e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004338:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fe5e 	bl	8004004 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b08c      	sub	sp, #48	; 0x30
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b22      	cmp	r3, #34	; 0x22
 8004364:	f040 80ab 	bne.w	80044be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d117      	bne.n	80043a2 <UART_Receive_IT+0x50>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d113      	bne.n	80043a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	b29b      	uxth	r3, r3
 800438c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004390:	b29a      	uxth	r2, r3
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28
 80043a0:	e026      	b.n	80043f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d007      	beq.n	80043c6 <UART_Receive_IT+0x74>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <UART_Receive_IT+0x82>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e008      	b.n	80043e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4619      	mov	r1, r3
 80043fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004400:	2b00      	cmp	r3, #0
 8004402:	d15a      	bne.n	80044ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0220 	bic.w	r2, r2, #32
 8004412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d135      	bne.n	80044b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	613b      	str	r3, [r7, #16]
   return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f023 0310 	bic.w	r3, r3, #16
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	623a      	str	r2, [r7, #32]
 800446c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	69f9      	ldr	r1, [r7, #28]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	61bb      	str	r3, [r7, #24]
   return(result);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b10      	cmp	r3, #16
 800448a:	d10a      	bne.n	80044a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fdbf 	bl	800402c <HAL_UARTEx_RxEventCallback>
 80044ae:	e002      	b.n	80044b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fc ff83 	bl	80013bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e002      	b.n	80044c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80044be:	2302      	movs	r3, #2
  }
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3730      	adds	r7, #48	; 0x30
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	b09f      	sub	sp, #124	; 0x7c
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044de:	68d9      	ldr	r1, [r3, #12]
 80044e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	ea40 0301 	orr.w	r3, r0, r1
 80044e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	431a      	orrs	r2, r3
 80044fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	4313      	orrs	r3, r2
 8004500:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800450c:	f021 010c 	bic.w	r1, r1, #12
 8004510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004516:	430b      	orrs	r3, r1
 8004518:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004526:	6999      	ldr	r1, [r3, #24]
 8004528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	ea40 0301 	orr.w	r3, r0, r1
 8004530:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4bc5      	ldr	r3, [pc, #788]	; (800484c <UART_SetConfig+0x384>)
 8004538:	429a      	cmp	r2, r3
 800453a:	d004      	beq.n	8004546 <UART_SetConfig+0x7e>
 800453c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4bc3      	ldr	r3, [pc, #780]	; (8004850 <UART_SetConfig+0x388>)
 8004542:	429a      	cmp	r2, r3
 8004544:	d103      	bne.n	800454e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004546:	f7fe fd1f 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 800454a:	6778      	str	r0, [r7, #116]	; 0x74
 800454c:	e002      	b.n	8004554 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800454e:	f7fe fd07 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8004552:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	f040 80b6 	bne.w	80046cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004562:	461c      	mov	r4, r3
 8004564:	f04f 0500 	mov.w	r5, #0
 8004568:	4622      	mov	r2, r4
 800456a:	462b      	mov	r3, r5
 800456c:	1891      	adds	r1, r2, r2
 800456e:	6439      	str	r1, [r7, #64]	; 0x40
 8004570:	415b      	adcs	r3, r3
 8004572:	647b      	str	r3, [r7, #68]	; 0x44
 8004574:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004578:	1912      	adds	r2, r2, r4
 800457a:	eb45 0303 	adc.w	r3, r5, r3
 800457e:	f04f 0000 	mov.w	r0, #0
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	00d9      	lsls	r1, r3, #3
 8004588:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800458c:	00d0      	lsls	r0, r2, #3
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	1911      	adds	r1, r2, r4
 8004594:	6639      	str	r1, [r7, #96]	; 0x60
 8004596:	416b      	adcs	r3, r5
 8004598:	667b      	str	r3, [r7, #100]	; 0x64
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	461a      	mov	r2, r3
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045a8:	415b      	adcs	r3, r3
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80045b4:	f7fc faf8 	bl	8000ba8 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4ba5      	ldr	r3, [pc, #660]	; (8004854 <UART_SetConfig+0x38c>)
 80045be:	fba3 2302 	umull	r2, r3, r3, r2
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	011e      	lsls	r6, r3, #4
 80045c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c8:	461c      	mov	r4, r3
 80045ca:	f04f 0500 	mov.w	r5, #0
 80045ce:	4622      	mov	r2, r4
 80045d0:	462b      	mov	r3, r5
 80045d2:	1891      	adds	r1, r2, r2
 80045d4:	6339      	str	r1, [r7, #48]	; 0x30
 80045d6:	415b      	adcs	r3, r3
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
 80045da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045de:	1912      	adds	r2, r2, r4
 80045e0:	eb45 0303 	adc.w	r3, r5, r3
 80045e4:	f04f 0000 	mov.w	r0, #0
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	00d9      	lsls	r1, r3, #3
 80045ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045f2:	00d0      	lsls	r0, r2, #3
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	1911      	adds	r1, r2, r4
 80045fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80045fc:	416b      	adcs	r3, r5
 80045fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	461a      	mov	r2, r3
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	1891      	adds	r1, r2, r2
 800460c:	62b9      	str	r1, [r7, #40]	; 0x28
 800460e:	415b      	adcs	r3, r3
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004616:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800461a:	f7fc fac5 	bl	8000ba8 <__aeabi_uldivmod>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4b8c      	ldr	r3, [pc, #560]	; (8004854 <UART_SetConfig+0x38c>)
 8004624:	fba3 1302 	umull	r1, r3, r3, r2
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	2164      	movs	r1, #100	; 0x64
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	3332      	adds	r3, #50	; 0x32
 8004636:	4a87      	ldr	r2, [pc, #540]	; (8004854 <UART_SetConfig+0x38c>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004644:	441e      	add	r6, r3
 8004646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004648:	4618      	mov	r0, r3
 800464a:	f04f 0100 	mov.w	r1, #0
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	1894      	adds	r4, r2, r2
 8004654:	623c      	str	r4, [r7, #32]
 8004656:	415b      	adcs	r3, r3
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800465e:	1812      	adds	r2, r2, r0
 8004660:	eb41 0303 	adc.w	r3, r1, r3
 8004664:	f04f 0400 	mov.w	r4, #0
 8004668:	f04f 0500 	mov.w	r5, #0
 800466c:	00dd      	lsls	r5, r3, #3
 800466e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004672:	00d4      	lsls	r4, r2, #3
 8004674:	4622      	mov	r2, r4
 8004676:	462b      	mov	r3, r5
 8004678:	1814      	adds	r4, r2, r0
 800467a:	653c      	str	r4, [r7, #80]	; 0x50
 800467c:	414b      	adcs	r3, r1
 800467e:	657b      	str	r3, [r7, #84]	; 0x54
 8004680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	1891      	adds	r1, r2, r2
 800468c:	61b9      	str	r1, [r7, #24]
 800468e:	415b      	adcs	r3, r3
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004696:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800469a:	f7fc fa85 	bl	8000ba8 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b6c      	ldr	r3, [pc, #432]	; (8004854 <UART_SetConfig+0x38c>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	; 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	3332      	adds	r3, #50	; 0x32
 80046b6:	4a67      	ldr	r2, [pc, #412]	; (8004854 <UART_SetConfig+0x38c>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	f003 0207 	and.w	r2, r3, #7
 80046c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4432      	add	r2, r6
 80046c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046ca:	e0b9      	b.n	8004840 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ce:	461c      	mov	r4, r3
 80046d0:	f04f 0500 	mov.w	r5, #0
 80046d4:	4622      	mov	r2, r4
 80046d6:	462b      	mov	r3, r5
 80046d8:	1891      	adds	r1, r2, r2
 80046da:	6139      	str	r1, [r7, #16]
 80046dc:	415b      	adcs	r3, r3
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046e4:	1912      	adds	r2, r2, r4
 80046e6:	eb45 0303 	adc.w	r3, r5, r3
 80046ea:	f04f 0000 	mov.w	r0, #0
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	00d9      	lsls	r1, r3, #3
 80046f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046f8:	00d0      	lsls	r0, r2, #3
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	eb12 0804 	adds.w	r8, r2, r4
 8004702:	eb43 0905 	adc.w	r9, r3, r5
 8004706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4618      	mov	r0, r3
 800470c:	f04f 0100 	mov.w	r1, #0
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	008b      	lsls	r3, r1, #2
 800471a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800471e:	0082      	lsls	r2, r0, #2
 8004720:	4640      	mov	r0, r8
 8004722:	4649      	mov	r1, r9
 8004724:	f7fc fa40 	bl	8000ba8 <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4b49      	ldr	r3, [pc, #292]	; (8004854 <UART_SetConfig+0x38c>)
 800472e:	fba3 2302 	umull	r2, r3, r3, r2
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	011e      	lsls	r6, r3, #4
 8004736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004738:	4618      	mov	r0, r3
 800473a:	f04f 0100 	mov.w	r1, #0
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	1894      	adds	r4, r2, r2
 8004744:	60bc      	str	r4, [r7, #8]
 8004746:	415b      	adcs	r3, r3
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800474e:	1812      	adds	r2, r2, r0
 8004750:	eb41 0303 	adc.w	r3, r1, r3
 8004754:	f04f 0400 	mov.w	r4, #0
 8004758:	f04f 0500 	mov.w	r5, #0
 800475c:	00dd      	lsls	r5, r3, #3
 800475e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004762:	00d4      	lsls	r4, r2, #3
 8004764:	4622      	mov	r2, r4
 8004766:	462b      	mov	r3, r5
 8004768:	1814      	adds	r4, r2, r0
 800476a:	64bc      	str	r4, [r7, #72]	; 0x48
 800476c:	414b      	adcs	r3, r1
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4618      	mov	r0, r3
 8004776:	f04f 0100 	mov.w	r1, #0
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	008b      	lsls	r3, r1, #2
 8004784:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004788:	0082      	lsls	r2, r0, #2
 800478a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800478e:	f7fc fa0b 	bl	8000ba8 <__aeabi_uldivmod>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <UART_SetConfig+0x38c>)
 8004798:	fba3 1302 	umull	r1, r3, r3, r2
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	2164      	movs	r1, #100	; 0x64
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	3332      	adds	r3, #50	; 0x32
 80047aa:	4a2a      	ldr	r2, [pc, #168]	; (8004854 <UART_SetConfig+0x38c>)
 80047ac:	fba2 2303 	umull	r2, r3, r2, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047b6:	441e      	add	r6, r3
 80047b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ba:	4618      	mov	r0, r3
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	1894      	adds	r4, r2, r2
 80047c6:	603c      	str	r4, [r7, #0]
 80047c8:	415b      	adcs	r3, r3
 80047ca:	607b      	str	r3, [r7, #4]
 80047cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d0:	1812      	adds	r2, r2, r0
 80047d2:	eb41 0303 	adc.w	r3, r1, r3
 80047d6:	f04f 0400 	mov.w	r4, #0
 80047da:	f04f 0500 	mov.w	r5, #0
 80047de:	00dd      	lsls	r5, r3, #3
 80047e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047e4:	00d4      	lsls	r4, r2, #3
 80047e6:	4622      	mov	r2, r4
 80047e8:	462b      	mov	r3, r5
 80047ea:	eb12 0a00 	adds.w	sl, r2, r0
 80047ee:	eb43 0b01 	adc.w	fp, r3, r1
 80047f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f04f 0100 	mov.w	r1, #0
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	008b      	lsls	r3, r1, #2
 8004806:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800480a:	0082      	lsls	r2, r0, #2
 800480c:	4650      	mov	r0, sl
 800480e:	4659      	mov	r1, fp
 8004810:	f7fc f9ca 	bl	8000ba8 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <UART_SetConfig+0x38c>)
 800481a:	fba3 1302 	umull	r1, r3, r3, r2
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	2164      	movs	r1, #100	; 0x64
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	3332      	adds	r3, #50	; 0x32
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <UART_SetConfig+0x38c>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	f003 020f 	and.w	r2, r3, #15
 8004838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4432      	add	r2, r6
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	bf00      	nop
 8004842:	377c      	adds	r7, #124	; 0x7c
 8004844:	46bd      	mov	sp, r7
 8004846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484a:	bf00      	nop
 800484c:	40011000 	.word	0x40011000
 8004850:	40011400 	.word	0x40011400
 8004854:	51eb851f 	.word	0x51eb851f

08004858 <__errno>:
 8004858:	4b01      	ldr	r3, [pc, #4]	; (8004860 <__errno+0x8>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000040 	.word	0x20000040

08004864 <__libc_init_array>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4d0d      	ldr	r5, [pc, #52]	; (800489c <__libc_init_array+0x38>)
 8004868:	4c0d      	ldr	r4, [pc, #52]	; (80048a0 <__libc_init_array+0x3c>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	2600      	movs	r6, #0
 8004870:	42a6      	cmp	r6, r4
 8004872:	d109      	bne.n	8004888 <__libc_init_array+0x24>
 8004874:	4d0b      	ldr	r5, [pc, #44]	; (80048a4 <__libc_init_array+0x40>)
 8004876:	4c0c      	ldr	r4, [pc, #48]	; (80048a8 <__libc_init_array+0x44>)
 8004878:	f002 feb4 	bl	80075e4 <_init>
 800487c:	1b64      	subs	r4, r4, r5
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	2600      	movs	r6, #0
 8004882:	42a6      	cmp	r6, r4
 8004884:	d105      	bne.n	8004892 <__libc_init_array+0x2e>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	f855 3b04 	ldr.w	r3, [r5], #4
 800488c:	4798      	blx	r3
 800488e:	3601      	adds	r6, #1
 8004890:	e7ee      	b.n	8004870 <__libc_init_array+0xc>
 8004892:	f855 3b04 	ldr.w	r3, [r5], #4
 8004896:	4798      	blx	r3
 8004898:	3601      	adds	r6, #1
 800489a:	e7f2      	b.n	8004882 <__libc_init_array+0x1e>
 800489c:	08007a44 	.word	0x08007a44
 80048a0:	08007a44 	.word	0x08007a44
 80048a4:	08007a44 	.word	0x08007a44
 80048a8:	08007a48 	.word	0x08007a48

080048ac <memset>:
 80048ac:	4402      	add	r2, r0
 80048ae:	4603      	mov	r3, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <__cvt>:
 80048bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	ec55 4b10 	vmov	r4, r5, d0
 80048c4:	2d00      	cmp	r5, #0
 80048c6:	460e      	mov	r6, r1
 80048c8:	4619      	mov	r1, r3
 80048ca:	462b      	mov	r3, r5
 80048cc:	bfbb      	ittet	lt
 80048ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048d2:	461d      	movlt	r5, r3
 80048d4:	2300      	movge	r3, #0
 80048d6:	232d      	movlt	r3, #45	; 0x2d
 80048d8:	700b      	strb	r3, [r1, #0]
 80048da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048e0:	4691      	mov	r9, r2
 80048e2:	f023 0820 	bic.w	r8, r3, #32
 80048e6:	bfbc      	itt	lt
 80048e8:	4622      	movlt	r2, r4
 80048ea:	4614      	movlt	r4, r2
 80048ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048f0:	d005      	beq.n	80048fe <__cvt+0x42>
 80048f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048f6:	d100      	bne.n	80048fa <__cvt+0x3e>
 80048f8:	3601      	adds	r6, #1
 80048fa:	2102      	movs	r1, #2
 80048fc:	e000      	b.n	8004900 <__cvt+0x44>
 80048fe:	2103      	movs	r1, #3
 8004900:	ab03      	add	r3, sp, #12
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	ab02      	add	r3, sp, #8
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	ec45 4b10 	vmov	d0, r4, r5
 800490c:	4653      	mov	r3, sl
 800490e:	4632      	mov	r2, r6
 8004910:	f000 fcea 	bl	80052e8 <_dtoa_r>
 8004914:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004918:	4607      	mov	r7, r0
 800491a:	d102      	bne.n	8004922 <__cvt+0x66>
 800491c:	f019 0f01 	tst.w	r9, #1
 8004920:	d022      	beq.n	8004968 <__cvt+0xac>
 8004922:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004926:	eb07 0906 	add.w	r9, r7, r6
 800492a:	d110      	bne.n	800494e <__cvt+0x92>
 800492c:	783b      	ldrb	r3, [r7, #0]
 800492e:	2b30      	cmp	r3, #48	; 0x30
 8004930:	d10a      	bne.n	8004948 <__cvt+0x8c>
 8004932:	2200      	movs	r2, #0
 8004934:	2300      	movs	r3, #0
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f7fc f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800493e:	b918      	cbnz	r0, 8004948 <__cvt+0x8c>
 8004940:	f1c6 0601 	rsb	r6, r6, #1
 8004944:	f8ca 6000 	str.w	r6, [sl]
 8004948:	f8da 3000 	ldr.w	r3, [sl]
 800494c:	4499      	add	r9, r3
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fc f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800495a:	b108      	cbz	r0, 8004960 <__cvt+0xa4>
 800495c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004960:	2230      	movs	r2, #48	; 0x30
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	454b      	cmp	r3, r9
 8004966:	d307      	bcc.n	8004978 <__cvt+0xbc>
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800496c:	1bdb      	subs	r3, r3, r7
 800496e:	4638      	mov	r0, r7
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	b004      	add	sp, #16
 8004974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	9103      	str	r1, [sp, #12]
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e7f0      	b.n	8004962 <__cvt+0xa6>

08004980 <__exponent>:
 8004980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004982:	4603      	mov	r3, r0
 8004984:	2900      	cmp	r1, #0
 8004986:	bfb8      	it	lt
 8004988:	4249      	neglt	r1, r1
 800498a:	f803 2b02 	strb.w	r2, [r3], #2
 800498e:	bfb4      	ite	lt
 8004990:	222d      	movlt	r2, #45	; 0x2d
 8004992:	222b      	movge	r2, #43	; 0x2b
 8004994:	2909      	cmp	r1, #9
 8004996:	7042      	strb	r2, [r0, #1]
 8004998:	dd2a      	ble.n	80049f0 <__exponent+0x70>
 800499a:	f10d 0407 	add.w	r4, sp, #7
 800499e:	46a4      	mov	ip, r4
 80049a0:	270a      	movs	r7, #10
 80049a2:	46a6      	mov	lr, r4
 80049a4:	460a      	mov	r2, r1
 80049a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80049aa:	fb07 1516 	mls	r5, r7, r6, r1
 80049ae:	3530      	adds	r5, #48	; 0x30
 80049b0:	2a63      	cmp	r2, #99	; 0x63
 80049b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80049b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049ba:	4631      	mov	r1, r6
 80049bc:	dcf1      	bgt.n	80049a2 <__exponent+0x22>
 80049be:	3130      	adds	r1, #48	; 0x30
 80049c0:	f1ae 0502 	sub.w	r5, lr, #2
 80049c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049c8:	1c44      	adds	r4, r0, #1
 80049ca:	4629      	mov	r1, r5
 80049cc:	4561      	cmp	r1, ip
 80049ce:	d30a      	bcc.n	80049e6 <__exponent+0x66>
 80049d0:	f10d 0209 	add.w	r2, sp, #9
 80049d4:	eba2 020e 	sub.w	r2, r2, lr
 80049d8:	4565      	cmp	r5, ip
 80049da:	bf88      	it	hi
 80049dc:	2200      	movhi	r2, #0
 80049de:	4413      	add	r3, r2
 80049e0:	1a18      	subs	r0, r3, r0
 80049e2:	b003      	add	sp, #12
 80049e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049ee:	e7ed      	b.n	80049cc <__exponent+0x4c>
 80049f0:	2330      	movs	r3, #48	; 0x30
 80049f2:	3130      	adds	r1, #48	; 0x30
 80049f4:	7083      	strb	r3, [r0, #2]
 80049f6:	70c1      	strb	r1, [r0, #3]
 80049f8:	1d03      	adds	r3, r0, #4
 80049fa:	e7f1      	b.n	80049e0 <__exponent+0x60>

080049fc <_printf_float>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	ed2d 8b02 	vpush	{d8}
 8004a04:	b08d      	sub	sp, #52	; 0x34
 8004a06:	460c      	mov	r4, r1
 8004a08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a0c:	4616      	mov	r6, r2
 8004a0e:	461f      	mov	r7, r3
 8004a10:	4605      	mov	r5, r0
 8004a12:	f001 fa55 	bl	8005ec0 <_localeconv_r>
 8004a16:	f8d0 a000 	ldr.w	sl, [r0]
 8004a1a:	4650      	mov	r0, sl
 8004a1c:	f7fb fbd8 	bl	80001d0 <strlen>
 8004a20:	2300      	movs	r3, #0
 8004a22:	930a      	str	r3, [sp, #40]	; 0x28
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	f8d8 3000 	ldr.w	r3, [r8]
 8004a2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a30:	3307      	adds	r3, #7
 8004a32:	f023 0307 	bic.w	r3, r3, #7
 8004a36:	f103 0208 	add.w	r2, r3, #8
 8004a3a:	f8c8 2000 	str.w	r2, [r8]
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a4e:	9307      	str	r3, [sp, #28]
 8004a50:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a54:	ee08 0a10 	vmov	s16, r0
 8004a58:	4b9f      	ldr	r3, [pc, #636]	; (8004cd8 <_printf_float+0x2dc>)
 8004a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a62:	f7fc f863 	bl	8000b2c <__aeabi_dcmpun>
 8004a66:	bb88      	cbnz	r0, 8004acc <_printf_float+0xd0>
 8004a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a6c:	4b9a      	ldr	r3, [pc, #616]	; (8004cd8 <_printf_float+0x2dc>)
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	f7fc f83d 	bl	8000af0 <__aeabi_dcmple>
 8004a76:	bb48      	cbnz	r0, 8004acc <_printf_float+0xd0>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4649      	mov	r1, r9
 8004a80:	f7fc f82c 	bl	8000adc <__aeabi_dcmplt>
 8004a84:	b110      	cbz	r0, 8004a8c <_printf_float+0x90>
 8004a86:	232d      	movs	r3, #45	; 0x2d
 8004a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a8c:	4b93      	ldr	r3, [pc, #588]	; (8004cdc <_printf_float+0x2e0>)
 8004a8e:	4894      	ldr	r0, [pc, #592]	; (8004ce0 <_printf_float+0x2e4>)
 8004a90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a94:	bf94      	ite	ls
 8004a96:	4698      	movls	r8, r3
 8004a98:	4680      	movhi	r8, r0
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	6123      	str	r3, [r4, #16]
 8004a9e:	9b05      	ldr	r3, [sp, #20]
 8004aa0:	f023 0204 	bic.w	r2, r3, #4
 8004aa4:	6022      	str	r2, [r4, #0]
 8004aa6:	f04f 0900 	mov.w	r9, #0
 8004aaa:	9700      	str	r7, [sp, #0]
 8004aac:	4633      	mov	r3, r6
 8004aae:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 f9d8 	bl	8004e68 <_printf_common>
 8004ab8:	3001      	adds	r0, #1
 8004aba:	f040 8090 	bne.w	8004bde <_printf_float+0x1e2>
 8004abe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac2:	b00d      	add	sp, #52	; 0x34
 8004ac4:	ecbd 8b02 	vpop	{d8}
 8004ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	f7fc f82a 	bl	8000b2c <__aeabi_dcmpun>
 8004ad8:	b140      	cbz	r0, 8004aec <_printf_float+0xf0>
 8004ada:	464b      	mov	r3, r9
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bfbc      	itt	lt
 8004ae0:	232d      	movlt	r3, #45	; 0x2d
 8004ae2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ae6:	487f      	ldr	r0, [pc, #508]	; (8004ce4 <_printf_float+0x2e8>)
 8004ae8:	4b7f      	ldr	r3, [pc, #508]	; (8004ce8 <_printf_float+0x2ec>)
 8004aea:	e7d1      	b.n	8004a90 <_printf_float+0x94>
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004af2:	9206      	str	r2, [sp, #24]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	d13f      	bne.n	8004b78 <_printf_float+0x17c>
 8004af8:	2306      	movs	r3, #6
 8004afa:	6063      	str	r3, [r4, #4]
 8004afc:	9b05      	ldr	r3, [sp, #20]
 8004afe:	6861      	ldr	r1, [r4, #4]
 8004b00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b04:	2300      	movs	r3, #0
 8004b06:	9303      	str	r3, [sp, #12]
 8004b08:	ab0a      	add	r3, sp, #40	; 0x28
 8004b0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b0e:	ab09      	add	r3, sp, #36	; 0x24
 8004b10:	ec49 8b10 	vmov	d0, r8, r9
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	6022      	str	r2, [r4, #0]
 8004b18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f7ff fecd 	bl	80048bc <__cvt>
 8004b22:	9b06      	ldr	r3, [sp, #24]
 8004b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b26:	2b47      	cmp	r3, #71	; 0x47
 8004b28:	4680      	mov	r8, r0
 8004b2a:	d108      	bne.n	8004b3e <_printf_float+0x142>
 8004b2c:	1cc8      	adds	r0, r1, #3
 8004b2e:	db02      	blt.n	8004b36 <_printf_float+0x13a>
 8004b30:	6863      	ldr	r3, [r4, #4]
 8004b32:	4299      	cmp	r1, r3
 8004b34:	dd41      	ble.n	8004bba <_printf_float+0x1be>
 8004b36:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b3a:	fa5f fb8b 	uxtb.w	fp, fp
 8004b3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b42:	d820      	bhi.n	8004b86 <_printf_float+0x18a>
 8004b44:	3901      	subs	r1, #1
 8004b46:	465a      	mov	r2, fp
 8004b48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b4c:	9109      	str	r1, [sp, #36]	; 0x24
 8004b4e:	f7ff ff17 	bl	8004980 <__exponent>
 8004b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b54:	1813      	adds	r3, r2, r0
 8004b56:	2a01      	cmp	r2, #1
 8004b58:	4681      	mov	r9, r0
 8004b5a:	6123      	str	r3, [r4, #16]
 8004b5c:	dc02      	bgt.n	8004b64 <_printf_float+0x168>
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	07d2      	lsls	r2, r2, #31
 8004b62:	d501      	bpl.n	8004b68 <_printf_float+0x16c>
 8004b64:	3301      	adds	r3, #1
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d09c      	beq.n	8004aaa <_printf_float+0xae>
 8004b70:	232d      	movs	r3, #45	; 0x2d
 8004b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b76:	e798      	b.n	8004aaa <_printf_float+0xae>
 8004b78:	9a06      	ldr	r2, [sp, #24]
 8004b7a:	2a47      	cmp	r2, #71	; 0x47
 8004b7c:	d1be      	bne.n	8004afc <_printf_float+0x100>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1bc      	bne.n	8004afc <_printf_float+0x100>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e7b9      	b.n	8004afa <_printf_float+0xfe>
 8004b86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b8a:	d118      	bne.n	8004bbe <_printf_float+0x1c2>
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	dd0b      	ble.n	8004baa <_printf_float+0x1ae>
 8004b92:	6121      	str	r1, [r4, #16]
 8004b94:	b913      	cbnz	r3, 8004b9c <_printf_float+0x1a0>
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	07d0      	lsls	r0, r2, #31
 8004b9a:	d502      	bpl.n	8004ba2 <_printf_float+0x1a6>
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	6123      	str	r3, [r4, #16]
 8004ba2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ba4:	f04f 0900 	mov.w	r9, #0
 8004ba8:	e7de      	b.n	8004b68 <_printf_float+0x16c>
 8004baa:	b913      	cbnz	r3, 8004bb2 <_printf_float+0x1b6>
 8004bac:	6822      	ldr	r2, [r4, #0]
 8004bae:	07d2      	lsls	r2, r2, #31
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_float+0x1ba>
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	e7f4      	b.n	8004ba0 <_printf_float+0x1a4>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7f2      	b.n	8004ba0 <_printf_float+0x1a4>
 8004bba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	db05      	blt.n	8004bd0 <_printf_float+0x1d4>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	6121      	str	r1, [r4, #16]
 8004bc8:	07d8      	lsls	r0, r3, #31
 8004bca:	d5ea      	bpl.n	8004ba2 <_printf_float+0x1a6>
 8004bcc:	1c4b      	adds	r3, r1, #1
 8004bce:	e7e7      	b.n	8004ba0 <_printf_float+0x1a4>
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	bfd4      	ite	le
 8004bd4:	f1c1 0202 	rsble	r2, r1, #2
 8004bd8:	2201      	movgt	r2, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	e7e0      	b.n	8004ba0 <_printf_float+0x1a4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	055a      	lsls	r2, r3, #21
 8004be2:	d407      	bmi.n	8004bf4 <_printf_float+0x1f8>
 8004be4:	6923      	ldr	r3, [r4, #16]
 8004be6:	4642      	mov	r2, r8
 8004be8:	4631      	mov	r1, r6
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b8      	blx	r7
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d12c      	bne.n	8004c4c <_printf_float+0x250>
 8004bf2:	e764      	b.n	8004abe <_printf_float+0xc2>
 8004bf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bf8:	f240 80e0 	bls.w	8004dbc <_printf_float+0x3c0>
 8004bfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c00:	2200      	movs	r2, #0
 8004c02:	2300      	movs	r3, #0
 8004c04:	f7fb ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	d034      	beq.n	8004c76 <_printf_float+0x27a>
 8004c0c:	4a37      	ldr	r2, [pc, #220]	; (8004cec <_printf_float+0x2f0>)
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4631      	mov	r1, r6
 8004c12:	4628      	mov	r0, r5
 8004c14:	47b8      	blx	r7
 8004c16:	3001      	adds	r0, #1
 8004c18:	f43f af51 	beq.w	8004abe <_printf_float+0xc2>
 8004c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c20:	429a      	cmp	r2, r3
 8004c22:	db02      	blt.n	8004c2a <_printf_float+0x22e>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	07d8      	lsls	r0, r3, #31
 8004c28:	d510      	bpl.n	8004c4c <_printf_float+0x250>
 8004c2a:	ee18 3a10 	vmov	r3, s16
 8004c2e:	4652      	mov	r2, sl
 8004c30:	4631      	mov	r1, r6
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	f43f af41 	beq.w	8004abe <_printf_float+0xc2>
 8004c3c:	f04f 0800 	mov.w	r8, #0
 8004c40:	f104 091a 	add.w	r9, r4, #26
 8004c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c46:	3b01      	subs	r3, #1
 8004c48:	4543      	cmp	r3, r8
 8004c4a:	dc09      	bgt.n	8004c60 <_printf_float+0x264>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	079b      	lsls	r3, r3, #30
 8004c50:	f100 8105 	bmi.w	8004e5e <_printf_float+0x462>
 8004c54:	68e0      	ldr	r0, [r4, #12]
 8004c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	bfb8      	it	lt
 8004c5c:	4618      	movlt	r0, r3
 8004c5e:	e730      	b.n	8004ac2 <_printf_float+0xc6>
 8004c60:	2301      	movs	r3, #1
 8004c62:	464a      	mov	r2, r9
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af27 	beq.w	8004abe <_printf_float+0xc2>
 8004c70:	f108 0801 	add.w	r8, r8, #1
 8004c74:	e7e6      	b.n	8004c44 <_printf_float+0x248>
 8004c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	dc39      	bgt.n	8004cf0 <_printf_float+0x2f4>
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <_printf_float+0x2f0>)
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4631      	mov	r1, r6
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	f43f af19 	beq.w	8004abe <_printf_float+0xc2>
 8004c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c90:	4313      	orrs	r3, r2
 8004c92:	d102      	bne.n	8004c9a <_printf_float+0x29e>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	07d9      	lsls	r1, r3, #31
 8004c98:	d5d8      	bpl.n	8004c4c <_printf_float+0x250>
 8004c9a:	ee18 3a10 	vmov	r3, s16
 8004c9e:	4652      	mov	r2, sl
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f af09 	beq.w	8004abe <_printf_float+0xc2>
 8004cac:	f04f 0900 	mov.w	r9, #0
 8004cb0:	f104 0a1a 	add.w	sl, r4, #26
 8004cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb6:	425b      	negs	r3, r3
 8004cb8:	454b      	cmp	r3, r9
 8004cba:	dc01      	bgt.n	8004cc0 <_printf_float+0x2c4>
 8004cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cbe:	e792      	b.n	8004be6 <_printf_float+0x1ea>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4652      	mov	r2, sl
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f aef7 	beq.w	8004abe <_printf_float+0xc2>
 8004cd0:	f109 0901 	add.w	r9, r9, #1
 8004cd4:	e7ee      	b.n	8004cb4 <_printf_float+0x2b8>
 8004cd6:	bf00      	nop
 8004cd8:	7fefffff 	.word	0x7fefffff
 8004cdc:	0800765c 	.word	0x0800765c
 8004ce0:	08007660 	.word	0x08007660
 8004ce4:	08007668 	.word	0x08007668
 8004ce8:	08007664 	.word	0x08007664
 8004cec:	0800766c 	.word	0x0800766c
 8004cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	bfa8      	it	ge
 8004cf8:	461a      	movge	r2, r3
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	4691      	mov	r9, r2
 8004cfe:	dc37      	bgt.n	8004d70 <_printf_float+0x374>
 8004d00:	f04f 0b00 	mov.w	fp, #0
 8004d04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d08:	f104 021a 	add.w	r2, r4, #26
 8004d0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	eba3 0309 	sub.w	r3, r3, r9
 8004d14:	455b      	cmp	r3, fp
 8004d16:	dc33      	bgt.n	8004d80 <_printf_float+0x384>
 8004d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	db3b      	blt.n	8004d98 <_printf_float+0x39c>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	07da      	lsls	r2, r3, #31
 8004d24:	d438      	bmi.n	8004d98 <_printf_float+0x39c>
 8004d26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d28:	9b05      	ldr	r3, [sp, #20]
 8004d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	eba2 0901 	sub.w	r9, r2, r1
 8004d32:	4599      	cmp	r9, r3
 8004d34:	bfa8      	it	ge
 8004d36:	4699      	movge	r9, r3
 8004d38:	f1b9 0f00 	cmp.w	r9, #0
 8004d3c:	dc35      	bgt.n	8004daa <_printf_float+0x3ae>
 8004d3e:	f04f 0800 	mov.w	r8, #0
 8004d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d46:	f104 0a1a 	add.w	sl, r4, #26
 8004d4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	eba3 0309 	sub.w	r3, r3, r9
 8004d54:	4543      	cmp	r3, r8
 8004d56:	f77f af79 	ble.w	8004c4c <_printf_float+0x250>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4652      	mov	r2, sl
 8004d5e:	4631      	mov	r1, r6
 8004d60:	4628      	mov	r0, r5
 8004d62:	47b8      	blx	r7
 8004d64:	3001      	adds	r0, #1
 8004d66:	f43f aeaa 	beq.w	8004abe <_printf_float+0xc2>
 8004d6a:	f108 0801 	add.w	r8, r8, #1
 8004d6e:	e7ec      	b.n	8004d4a <_printf_float+0x34e>
 8004d70:	4613      	mov	r3, r2
 8004d72:	4631      	mov	r1, r6
 8004d74:	4642      	mov	r2, r8
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d1c0      	bne.n	8004d00 <_printf_float+0x304>
 8004d7e:	e69e      	b.n	8004abe <_printf_float+0xc2>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	9205      	str	r2, [sp, #20]
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f ae97 	beq.w	8004abe <_printf_float+0xc2>
 8004d90:	9a05      	ldr	r2, [sp, #20]
 8004d92:	f10b 0b01 	add.w	fp, fp, #1
 8004d96:	e7b9      	b.n	8004d0c <_printf_float+0x310>
 8004d98:	ee18 3a10 	vmov	r3, s16
 8004d9c:	4652      	mov	r2, sl
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	d1be      	bne.n	8004d26 <_printf_float+0x32a>
 8004da8:	e689      	b.n	8004abe <_printf_float+0xc2>
 8004daa:	9a05      	ldr	r2, [sp, #20]
 8004dac:	464b      	mov	r3, r9
 8004dae:	4442      	add	r2, r8
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	d1c1      	bne.n	8004d3e <_printf_float+0x342>
 8004dba:	e680      	b.n	8004abe <_printf_float+0xc2>
 8004dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dbe:	2a01      	cmp	r2, #1
 8004dc0:	dc01      	bgt.n	8004dc6 <_printf_float+0x3ca>
 8004dc2:	07db      	lsls	r3, r3, #31
 8004dc4:	d538      	bpl.n	8004e38 <_printf_float+0x43c>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4642      	mov	r2, r8
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f ae74 	beq.w	8004abe <_printf_float+0xc2>
 8004dd6:	ee18 3a10 	vmov	r3, s16
 8004dda:	4652      	mov	r2, sl
 8004ddc:	4631      	mov	r1, r6
 8004dde:	4628      	mov	r0, r5
 8004de0:	47b8      	blx	r7
 8004de2:	3001      	adds	r0, #1
 8004de4:	f43f ae6b 	beq.w	8004abe <_printf_float+0xc2>
 8004de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dec:	2200      	movs	r2, #0
 8004dee:	2300      	movs	r3, #0
 8004df0:	f7fb fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004df4:	b9d8      	cbnz	r0, 8004e2e <_printf_float+0x432>
 8004df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df8:	f108 0201 	add.w	r2, r8, #1
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	d10e      	bne.n	8004e26 <_printf_float+0x42a>
 8004e08:	e659      	b.n	8004abe <_printf_float+0xc2>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f ae52 	beq.w	8004abe <_printf_float+0xc2>
 8004e1a:	f108 0801 	add.w	r8, r8, #1
 8004e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	4543      	cmp	r3, r8
 8004e24:	dcf1      	bgt.n	8004e0a <_printf_float+0x40e>
 8004e26:	464b      	mov	r3, r9
 8004e28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e2c:	e6dc      	b.n	8004be8 <_printf_float+0x1ec>
 8004e2e:	f04f 0800 	mov.w	r8, #0
 8004e32:	f104 0a1a 	add.w	sl, r4, #26
 8004e36:	e7f2      	b.n	8004e1e <_printf_float+0x422>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	e7df      	b.n	8004dfe <_printf_float+0x402>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	464a      	mov	r2, r9
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae38 	beq.w	8004abe <_printf_float+0xc2>
 8004e4e:	f108 0801 	add.w	r8, r8, #1
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e56:	1a5b      	subs	r3, r3, r1
 8004e58:	4543      	cmp	r3, r8
 8004e5a:	dcf0      	bgt.n	8004e3e <_printf_float+0x442>
 8004e5c:	e6fa      	b.n	8004c54 <_printf_float+0x258>
 8004e5e:	f04f 0800 	mov.w	r8, #0
 8004e62:	f104 0919 	add.w	r9, r4, #25
 8004e66:	e7f4      	b.n	8004e52 <_printf_float+0x456>

08004e68 <_printf_common>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	4699      	mov	r9, r3
 8004e70:	688a      	ldr	r2, [r1, #8]
 8004e72:	690b      	ldr	r3, [r1, #16]
 8004e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bfb8      	it	lt
 8004e7c:	4613      	movlt	r3, r2
 8004e7e:	6033      	str	r3, [r6, #0]
 8004e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e84:	4607      	mov	r7, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	b10a      	cbz	r2, 8004e8e <_printf_common+0x26>
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	6033      	str	r3, [r6, #0]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	0699      	lsls	r1, r3, #26
 8004e92:	bf42      	ittt	mi
 8004e94:	6833      	ldrmi	r3, [r6, #0]
 8004e96:	3302      	addmi	r3, #2
 8004e98:	6033      	strmi	r3, [r6, #0]
 8004e9a:	6825      	ldr	r5, [r4, #0]
 8004e9c:	f015 0506 	ands.w	r5, r5, #6
 8004ea0:	d106      	bne.n	8004eb0 <_printf_common+0x48>
 8004ea2:	f104 0a19 	add.w	sl, r4, #25
 8004ea6:	68e3      	ldr	r3, [r4, #12]
 8004ea8:	6832      	ldr	r2, [r6, #0]
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	42ab      	cmp	r3, r5
 8004eae:	dc26      	bgt.n	8004efe <_printf_common+0x96>
 8004eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb4:	1e13      	subs	r3, r2, #0
 8004eb6:	6822      	ldr	r2, [r4, #0]
 8004eb8:	bf18      	it	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	0692      	lsls	r2, r2, #26
 8004ebe:	d42b      	bmi.n	8004f18 <_printf_common+0xb0>
 8004ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c0      	blx	r8
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d01e      	beq.n	8004f0c <_printf_common+0xa4>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	68e5      	ldr	r5, [r4, #12]
 8004ed2:	6832      	ldr	r2, [r6, #0]
 8004ed4:	f003 0306 	and.w	r3, r3, #6
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	bf08      	it	eq
 8004edc:	1aad      	subeq	r5, r5, r2
 8004ede:	68a3      	ldr	r3, [r4, #8]
 8004ee0:	6922      	ldr	r2, [r4, #16]
 8004ee2:	bf0c      	ite	eq
 8004ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee8:	2500      	movne	r5, #0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	bfc4      	itt	gt
 8004eee:	1a9b      	subgt	r3, r3, r2
 8004ef0:	18ed      	addgt	r5, r5, r3
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	341a      	adds	r4, #26
 8004ef6:	42b5      	cmp	r5, r6
 8004ef8:	d11a      	bne.n	8004f30 <_printf_common+0xc8>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e008      	b.n	8004f10 <_printf_common+0xa8>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4649      	mov	r1, r9
 8004f04:	4638      	mov	r0, r7
 8004f06:	47c0      	blx	r8
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d103      	bne.n	8004f14 <_printf_common+0xac>
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f14:	3501      	adds	r5, #1
 8004f16:	e7c6      	b.n	8004ea6 <_printf_common+0x3e>
 8004f18:	18e1      	adds	r1, r4, r3
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	2030      	movs	r0, #48	; 0x30
 8004f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f22:	4422      	add	r2, r4
 8004f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	e7c7      	b.n	8004ec0 <_printf_common+0x58>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4622      	mov	r2, r4
 8004f34:	4649      	mov	r1, r9
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c0      	blx	r8
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d0e6      	beq.n	8004f0c <_printf_common+0xa4>
 8004f3e:	3601      	adds	r6, #1
 8004f40:	e7d9      	b.n	8004ef6 <_printf_common+0x8e>
	...

08004f44 <_printf_i>:
 8004f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	460c      	mov	r4, r1
 8004f4a:	4691      	mov	r9, r2
 8004f4c:	7e27      	ldrb	r7, [r4, #24]
 8004f4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f50:	2f78      	cmp	r7, #120	; 0x78
 8004f52:	4680      	mov	r8, r0
 8004f54:	469a      	mov	sl, r3
 8004f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f5a:	d807      	bhi.n	8004f6c <_printf_i+0x28>
 8004f5c:	2f62      	cmp	r7, #98	; 0x62
 8004f5e:	d80a      	bhi.n	8004f76 <_printf_i+0x32>
 8004f60:	2f00      	cmp	r7, #0
 8004f62:	f000 80d8 	beq.w	8005116 <_printf_i+0x1d2>
 8004f66:	2f58      	cmp	r7, #88	; 0x58
 8004f68:	f000 80a3 	beq.w	80050b2 <_printf_i+0x16e>
 8004f6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f74:	e03a      	b.n	8004fec <_printf_i+0xa8>
 8004f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f7a:	2b15      	cmp	r3, #21
 8004f7c:	d8f6      	bhi.n	8004f6c <_printf_i+0x28>
 8004f7e:	a001      	add	r0, pc, #4	; (adr r0, 8004f84 <_printf_i+0x40>)
 8004f80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	08004f6d 	.word	0x08004f6d
 8004f90:	08004f6d 	.word	0x08004f6d
 8004f94:	08004f6d 	.word	0x08004f6d
 8004f98:	08004f6d 	.word	0x08004f6d
 8004f9c:	08004ff1 	.word	0x08004ff1
 8004fa0:	08004f6d 	.word	0x08004f6d
 8004fa4:	08004f6d 	.word	0x08004f6d
 8004fa8:	08004f6d 	.word	0x08004f6d
 8004fac:	08004f6d 	.word	0x08004f6d
 8004fb0:	080050fd 	.word	0x080050fd
 8004fb4:	08005021 	.word	0x08005021
 8004fb8:	080050df 	.word	0x080050df
 8004fbc:	08004f6d 	.word	0x08004f6d
 8004fc0:	08004f6d 	.word	0x08004f6d
 8004fc4:	0800511f 	.word	0x0800511f
 8004fc8:	08004f6d 	.word	0x08004f6d
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08004f6d 	.word	0x08004f6d
 8004fd4:	08004f6d 	.word	0x08004f6d
 8004fd8:	080050e7 	.word	0x080050e7
 8004fdc:	680b      	ldr	r3, [r1, #0]
 8004fde:	1d1a      	adds	r2, r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	600a      	str	r2, [r1, #0]
 8004fe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0a3      	b.n	8005138 <_printf_i+0x1f4>
 8004ff0:	6825      	ldr	r5, [r4, #0]
 8004ff2:	6808      	ldr	r0, [r1, #0]
 8004ff4:	062e      	lsls	r6, r5, #24
 8004ff6:	f100 0304 	add.w	r3, r0, #4
 8004ffa:	d50a      	bpl.n	8005012 <_printf_i+0xce>
 8004ffc:	6805      	ldr	r5, [r0, #0]
 8004ffe:	600b      	str	r3, [r1, #0]
 8005000:	2d00      	cmp	r5, #0
 8005002:	da03      	bge.n	800500c <_printf_i+0xc8>
 8005004:	232d      	movs	r3, #45	; 0x2d
 8005006:	426d      	negs	r5, r5
 8005008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500c:	485e      	ldr	r0, [pc, #376]	; (8005188 <_printf_i+0x244>)
 800500e:	230a      	movs	r3, #10
 8005010:	e019      	b.n	8005046 <_printf_i+0x102>
 8005012:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005016:	6805      	ldr	r5, [r0, #0]
 8005018:	600b      	str	r3, [r1, #0]
 800501a:	bf18      	it	ne
 800501c:	b22d      	sxthne	r5, r5
 800501e:	e7ef      	b.n	8005000 <_printf_i+0xbc>
 8005020:	680b      	ldr	r3, [r1, #0]
 8005022:	6825      	ldr	r5, [r4, #0]
 8005024:	1d18      	adds	r0, r3, #4
 8005026:	6008      	str	r0, [r1, #0]
 8005028:	0628      	lsls	r0, r5, #24
 800502a:	d501      	bpl.n	8005030 <_printf_i+0xec>
 800502c:	681d      	ldr	r5, [r3, #0]
 800502e:	e002      	b.n	8005036 <_printf_i+0xf2>
 8005030:	0669      	lsls	r1, r5, #25
 8005032:	d5fb      	bpl.n	800502c <_printf_i+0xe8>
 8005034:	881d      	ldrh	r5, [r3, #0]
 8005036:	4854      	ldr	r0, [pc, #336]	; (8005188 <_printf_i+0x244>)
 8005038:	2f6f      	cmp	r7, #111	; 0x6f
 800503a:	bf0c      	ite	eq
 800503c:	2308      	moveq	r3, #8
 800503e:	230a      	movne	r3, #10
 8005040:	2100      	movs	r1, #0
 8005042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005046:	6866      	ldr	r6, [r4, #4]
 8005048:	60a6      	str	r6, [r4, #8]
 800504a:	2e00      	cmp	r6, #0
 800504c:	bfa2      	ittt	ge
 800504e:	6821      	ldrge	r1, [r4, #0]
 8005050:	f021 0104 	bicge.w	r1, r1, #4
 8005054:	6021      	strge	r1, [r4, #0]
 8005056:	b90d      	cbnz	r5, 800505c <_printf_i+0x118>
 8005058:	2e00      	cmp	r6, #0
 800505a:	d04d      	beq.n	80050f8 <_printf_i+0x1b4>
 800505c:	4616      	mov	r6, r2
 800505e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005062:	fb03 5711 	mls	r7, r3, r1, r5
 8005066:	5dc7      	ldrb	r7, [r0, r7]
 8005068:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800506c:	462f      	mov	r7, r5
 800506e:	42bb      	cmp	r3, r7
 8005070:	460d      	mov	r5, r1
 8005072:	d9f4      	bls.n	800505e <_printf_i+0x11a>
 8005074:	2b08      	cmp	r3, #8
 8005076:	d10b      	bne.n	8005090 <_printf_i+0x14c>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	07df      	lsls	r7, r3, #31
 800507c:	d508      	bpl.n	8005090 <_printf_i+0x14c>
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	6861      	ldr	r1, [r4, #4]
 8005082:	4299      	cmp	r1, r3
 8005084:	bfde      	ittt	le
 8005086:	2330      	movle	r3, #48	; 0x30
 8005088:	f806 3c01 	strble.w	r3, [r6, #-1]
 800508c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005090:	1b92      	subs	r2, r2, r6
 8005092:	6122      	str	r2, [r4, #16]
 8005094:	f8cd a000 	str.w	sl, [sp]
 8005098:	464b      	mov	r3, r9
 800509a:	aa03      	add	r2, sp, #12
 800509c:	4621      	mov	r1, r4
 800509e:	4640      	mov	r0, r8
 80050a0:	f7ff fee2 	bl	8004e68 <_printf_common>
 80050a4:	3001      	adds	r0, #1
 80050a6:	d14c      	bne.n	8005142 <_printf_i+0x1fe>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	b004      	add	sp, #16
 80050ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b2:	4835      	ldr	r0, [pc, #212]	; (8005188 <_printf_i+0x244>)
 80050b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	680e      	ldr	r6, [r1, #0]
 80050bc:	061f      	lsls	r7, r3, #24
 80050be:	f856 5b04 	ldr.w	r5, [r6], #4
 80050c2:	600e      	str	r6, [r1, #0]
 80050c4:	d514      	bpl.n	80050f0 <_printf_i+0x1ac>
 80050c6:	07d9      	lsls	r1, r3, #31
 80050c8:	bf44      	itt	mi
 80050ca:	f043 0320 	orrmi.w	r3, r3, #32
 80050ce:	6023      	strmi	r3, [r4, #0]
 80050d0:	b91d      	cbnz	r5, 80050da <_printf_i+0x196>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	f023 0320 	bic.w	r3, r3, #32
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	2310      	movs	r3, #16
 80050dc:	e7b0      	b.n	8005040 <_printf_i+0xfc>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f043 0320 	orr.w	r3, r3, #32
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	2378      	movs	r3, #120	; 0x78
 80050e8:	4828      	ldr	r0, [pc, #160]	; (800518c <_printf_i+0x248>)
 80050ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050ee:	e7e3      	b.n	80050b8 <_printf_i+0x174>
 80050f0:	065e      	lsls	r6, r3, #25
 80050f2:	bf48      	it	mi
 80050f4:	b2ad      	uxthmi	r5, r5
 80050f6:	e7e6      	b.n	80050c6 <_printf_i+0x182>
 80050f8:	4616      	mov	r6, r2
 80050fa:	e7bb      	b.n	8005074 <_printf_i+0x130>
 80050fc:	680b      	ldr	r3, [r1, #0]
 80050fe:	6826      	ldr	r6, [r4, #0]
 8005100:	6960      	ldr	r0, [r4, #20]
 8005102:	1d1d      	adds	r5, r3, #4
 8005104:	600d      	str	r5, [r1, #0]
 8005106:	0635      	lsls	r5, r6, #24
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	d501      	bpl.n	8005110 <_printf_i+0x1cc>
 800510c:	6018      	str	r0, [r3, #0]
 800510e:	e002      	b.n	8005116 <_printf_i+0x1d2>
 8005110:	0671      	lsls	r1, r6, #25
 8005112:	d5fb      	bpl.n	800510c <_printf_i+0x1c8>
 8005114:	8018      	strh	r0, [r3, #0]
 8005116:	2300      	movs	r3, #0
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	4616      	mov	r6, r2
 800511c:	e7ba      	b.n	8005094 <_printf_i+0x150>
 800511e:	680b      	ldr	r3, [r1, #0]
 8005120:	1d1a      	adds	r2, r3, #4
 8005122:	600a      	str	r2, [r1, #0]
 8005124:	681e      	ldr	r6, [r3, #0]
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	2100      	movs	r1, #0
 800512a:	4630      	mov	r0, r6
 800512c:	f7fb f858 	bl	80001e0 <memchr>
 8005130:	b108      	cbz	r0, 8005136 <_printf_i+0x1f2>
 8005132:	1b80      	subs	r0, r0, r6
 8005134:	6060      	str	r0, [r4, #4]
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	2300      	movs	r3, #0
 800513c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005140:	e7a8      	b.n	8005094 <_printf_i+0x150>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	4632      	mov	r2, r6
 8005146:	4649      	mov	r1, r9
 8005148:	4640      	mov	r0, r8
 800514a:	47d0      	blx	sl
 800514c:	3001      	adds	r0, #1
 800514e:	d0ab      	beq.n	80050a8 <_printf_i+0x164>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	079b      	lsls	r3, r3, #30
 8005154:	d413      	bmi.n	800517e <_printf_i+0x23a>
 8005156:	68e0      	ldr	r0, [r4, #12]
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	4298      	cmp	r0, r3
 800515c:	bfb8      	it	lt
 800515e:	4618      	movlt	r0, r3
 8005160:	e7a4      	b.n	80050ac <_printf_i+0x168>
 8005162:	2301      	movs	r3, #1
 8005164:	4632      	mov	r2, r6
 8005166:	4649      	mov	r1, r9
 8005168:	4640      	mov	r0, r8
 800516a:	47d0      	blx	sl
 800516c:	3001      	adds	r0, #1
 800516e:	d09b      	beq.n	80050a8 <_printf_i+0x164>
 8005170:	3501      	adds	r5, #1
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	9903      	ldr	r1, [sp, #12]
 8005176:	1a5b      	subs	r3, r3, r1
 8005178:	42ab      	cmp	r3, r5
 800517a:	dcf2      	bgt.n	8005162 <_printf_i+0x21e>
 800517c:	e7eb      	b.n	8005156 <_printf_i+0x212>
 800517e:	2500      	movs	r5, #0
 8005180:	f104 0619 	add.w	r6, r4, #25
 8005184:	e7f5      	b.n	8005172 <_printf_i+0x22e>
 8005186:	bf00      	nop
 8005188:	0800766e 	.word	0x0800766e
 800518c:	0800767f 	.word	0x0800767f

08005190 <siprintf>:
 8005190:	b40e      	push	{r1, r2, r3}
 8005192:	b500      	push	{lr}
 8005194:	b09c      	sub	sp, #112	; 0x70
 8005196:	ab1d      	add	r3, sp, #116	; 0x74
 8005198:	9002      	str	r0, [sp, #8]
 800519a:	9006      	str	r0, [sp, #24]
 800519c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051a0:	4809      	ldr	r0, [pc, #36]	; (80051c8 <siprintf+0x38>)
 80051a2:	9107      	str	r1, [sp, #28]
 80051a4:	9104      	str	r1, [sp, #16]
 80051a6:	4909      	ldr	r1, [pc, #36]	; (80051cc <siprintf+0x3c>)
 80051a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ac:	9105      	str	r1, [sp, #20]
 80051ae:	6800      	ldr	r0, [r0, #0]
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	a902      	add	r1, sp, #8
 80051b4:	f001 fb32 	bl	800681c <_svfiprintf_r>
 80051b8:	9b02      	ldr	r3, [sp, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	b01c      	add	sp, #112	; 0x70
 80051c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c4:	b003      	add	sp, #12
 80051c6:	4770      	bx	lr
 80051c8:	20000040 	.word	0x20000040
 80051cc:	ffff0208 	.word	0xffff0208

080051d0 <quorem>:
 80051d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	6903      	ldr	r3, [r0, #16]
 80051d6:	690c      	ldr	r4, [r1, #16]
 80051d8:	42a3      	cmp	r3, r4
 80051da:	4607      	mov	r7, r0
 80051dc:	f2c0 8081 	blt.w	80052e2 <quorem+0x112>
 80051e0:	3c01      	subs	r4, #1
 80051e2:	f101 0814 	add.w	r8, r1, #20
 80051e6:	f100 0514 	add.w	r5, r0, #20
 80051ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051f8:	3301      	adds	r3, #1
 80051fa:	429a      	cmp	r2, r3
 80051fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005204:	fbb2 f6f3 	udiv	r6, r2, r3
 8005208:	d331      	bcc.n	800526e <quorem+0x9e>
 800520a:	f04f 0e00 	mov.w	lr, #0
 800520e:	4640      	mov	r0, r8
 8005210:	46ac      	mov	ip, r5
 8005212:	46f2      	mov	sl, lr
 8005214:	f850 2b04 	ldr.w	r2, [r0], #4
 8005218:	b293      	uxth	r3, r2
 800521a:	fb06 e303 	mla	r3, r6, r3, lr
 800521e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005222:	b29b      	uxth	r3, r3
 8005224:	ebaa 0303 	sub.w	r3, sl, r3
 8005228:	0c12      	lsrs	r2, r2, #16
 800522a:	f8dc a000 	ldr.w	sl, [ip]
 800522e:	fb06 e202 	mla	r2, r6, r2, lr
 8005232:	fa13 f38a 	uxtah	r3, r3, sl
 8005236:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800523a:	fa1f fa82 	uxth.w	sl, r2
 800523e:	f8dc 2000 	ldr.w	r2, [ip]
 8005242:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005246:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800524a:	b29b      	uxth	r3, r3
 800524c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005250:	4581      	cmp	r9, r0
 8005252:	f84c 3b04 	str.w	r3, [ip], #4
 8005256:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800525a:	d2db      	bcs.n	8005214 <quorem+0x44>
 800525c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005260:	b92b      	cbnz	r3, 800526e <quorem+0x9e>
 8005262:	9b01      	ldr	r3, [sp, #4]
 8005264:	3b04      	subs	r3, #4
 8005266:	429d      	cmp	r5, r3
 8005268:	461a      	mov	r2, r3
 800526a:	d32e      	bcc.n	80052ca <quorem+0xfa>
 800526c:	613c      	str	r4, [r7, #16]
 800526e:	4638      	mov	r0, r7
 8005270:	f001 f8be 	bl	80063f0 <__mcmp>
 8005274:	2800      	cmp	r0, #0
 8005276:	db24      	blt.n	80052c2 <quorem+0xf2>
 8005278:	3601      	adds	r6, #1
 800527a:	4628      	mov	r0, r5
 800527c:	f04f 0c00 	mov.w	ip, #0
 8005280:	f858 2b04 	ldr.w	r2, [r8], #4
 8005284:	f8d0 e000 	ldr.w	lr, [r0]
 8005288:	b293      	uxth	r3, r2
 800528a:	ebac 0303 	sub.w	r3, ip, r3
 800528e:	0c12      	lsrs	r2, r2, #16
 8005290:	fa13 f38e 	uxtah	r3, r3, lr
 8005294:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800529c:	b29b      	uxth	r3, r3
 800529e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052a2:	45c1      	cmp	r9, r8
 80052a4:	f840 3b04 	str.w	r3, [r0], #4
 80052a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052ac:	d2e8      	bcs.n	8005280 <quorem+0xb0>
 80052ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052b6:	b922      	cbnz	r2, 80052c2 <quorem+0xf2>
 80052b8:	3b04      	subs	r3, #4
 80052ba:	429d      	cmp	r5, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	d30a      	bcc.n	80052d6 <quorem+0x106>
 80052c0:	613c      	str	r4, [r7, #16]
 80052c2:	4630      	mov	r0, r6
 80052c4:	b003      	add	sp, #12
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	3b04      	subs	r3, #4
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	d1cc      	bne.n	800526c <quorem+0x9c>
 80052d2:	3c01      	subs	r4, #1
 80052d4:	e7c7      	b.n	8005266 <quorem+0x96>
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	3b04      	subs	r3, #4
 80052da:	2a00      	cmp	r2, #0
 80052dc:	d1f0      	bne.n	80052c0 <quorem+0xf0>
 80052de:	3c01      	subs	r4, #1
 80052e0:	e7eb      	b.n	80052ba <quorem+0xea>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e7ee      	b.n	80052c4 <quorem+0xf4>
	...

080052e8 <_dtoa_r>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	ed2d 8b02 	vpush	{d8}
 80052f0:	ec57 6b10 	vmov	r6, r7, d0
 80052f4:	b095      	sub	sp, #84	; 0x54
 80052f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052fc:	9105      	str	r1, [sp, #20]
 80052fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005302:	4604      	mov	r4, r0
 8005304:	9209      	str	r2, [sp, #36]	; 0x24
 8005306:	930f      	str	r3, [sp, #60]	; 0x3c
 8005308:	b975      	cbnz	r5, 8005328 <_dtoa_r+0x40>
 800530a:	2010      	movs	r0, #16
 800530c:	f000 fddc 	bl	8005ec8 <malloc>
 8005310:	4602      	mov	r2, r0
 8005312:	6260      	str	r0, [r4, #36]	; 0x24
 8005314:	b920      	cbnz	r0, 8005320 <_dtoa_r+0x38>
 8005316:	4bb2      	ldr	r3, [pc, #712]	; (80055e0 <_dtoa_r+0x2f8>)
 8005318:	21ea      	movs	r1, #234	; 0xea
 800531a:	48b2      	ldr	r0, [pc, #712]	; (80055e4 <_dtoa_r+0x2fc>)
 800531c:	f001 fb8e 	bl	8006a3c <__assert_func>
 8005320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005324:	6005      	str	r5, [r0, #0]
 8005326:	60c5      	str	r5, [r0, #12]
 8005328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800532a:	6819      	ldr	r1, [r3, #0]
 800532c:	b151      	cbz	r1, 8005344 <_dtoa_r+0x5c>
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	604a      	str	r2, [r1, #4]
 8005332:	2301      	movs	r3, #1
 8005334:	4093      	lsls	r3, r2
 8005336:	608b      	str	r3, [r1, #8]
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fe1b 	bl	8005f74 <_Bfree>
 800533e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	1e3b      	subs	r3, r7, #0
 8005346:	bfb9      	ittee	lt
 8005348:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800534c:	9303      	strlt	r3, [sp, #12]
 800534e:	2300      	movge	r3, #0
 8005350:	f8c8 3000 	strge.w	r3, [r8]
 8005354:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005358:	4ba3      	ldr	r3, [pc, #652]	; (80055e8 <_dtoa_r+0x300>)
 800535a:	bfbc      	itt	lt
 800535c:	2201      	movlt	r2, #1
 800535e:	f8c8 2000 	strlt.w	r2, [r8]
 8005362:	ea33 0309 	bics.w	r3, r3, r9
 8005366:	d11b      	bne.n	80053a0 <_dtoa_r+0xb8>
 8005368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800536a:	f242 730f 	movw	r3, #9999	; 0x270f
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005374:	4333      	orrs	r3, r6
 8005376:	f000 857a 	beq.w	8005e6e <_dtoa_r+0xb86>
 800537a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800537c:	b963      	cbnz	r3, 8005398 <_dtoa_r+0xb0>
 800537e:	4b9b      	ldr	r3, [pc, #620]	; (80055ec <_dtoa_r+0x304>)
 8005380:	e024      	b.n	80053cc <_dtoa_r+0xe4>
 8005382:	4b9b      	ldr	r3, [pc, #620]	; (80055f0 <_dtoa_r+0x308>)
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	9800      	ldr	r0, [sp, #0]
 800538e:	b015      	add	sp, #84	; 0x54
 8005390:	ecbd 8b02 	vpop	{d8}
 8005394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005398:	4b94      	ldr	r3, [pc, #592]	; (80055ec <_dtoa_r+0x304>)
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	3303      	adds	r3, #3
 800539e:	e7f3      	b.n	8005388 <_dtoa_r+0xa0>
 80053a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053a4:	2200      	movs	r2, #0
 80053a6:	ec51 0b17 	vmov	r0, r1, d7
 80053aa:	2300      	movs	r3, #0
 80053ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80053b0:	f7fb fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80053b4:	4680      	mov	r8, r0
 80053b6:	b158      	cbz	r0, 80053d0 <_dtoa_r+0xe8>
 80053b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053ba:	2301      	movs	r3, #1
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8551 	beq.w	8005e68 <_dtoa_r+0xb80>
 80053c6:	488b      	ldr	r0, [pc, #556]	; (80055f4 <_dtoa_r+0x30c>)
 80053c8:	6018      	str	r0, [r3, #0]
 80053ca:	1e43      	subs	r3, r0, #1
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	e7dd      	b.n	800538c <_dtoa_r+0xa4>
 80053d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80053d4:	aa12      	add	r2, sp, #72	; 0x48
 80053d6:	a913      	add	r1, sp, #76	; 0x4c
 80053d8:	4620      	mov	r0, r4
 80053da:	f001 f8ad 	bl	8006538 <__d2b>
 80053de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053e2:	4683      	mov	fp, r0
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	d07c      	beq.n	80054e2 <_dtoa_r+0x1fa>
 80053e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80053ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80053f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80053fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80053fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005402:	4b7d      	ldr	r3, [pc, #500]	; (80055f8 <_dtoa_r+0x310>)
 8005404:	2200      	movs	r2, #0
 8005406:	4630      	mov	r0, r6
 8005408:	4639      	mov	r1, r7
 800540a:	f7fa ff3d 	bl	8000288 <__aeabi_dsub>
 800540e:	a36e      	add	r3, pc, #440	; (adr r3, 80055c8 <_dtoa_r+0x2e0>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fb f8f0 	bl	80005f8 <__aeabi_dmul>
 8005418:	a36d      	add	r3, pc, #436	; (adr r3, 80055d0 <_dtoa_r+0x2e8>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fa ff35 	bl	800028c <__adddf3>
 8005422:	4606      	mov	r6, r0
 8005424:	4628      	mov	r0, r5
 8005426:	460f      	mov	r7, r1
 8005428:	f7fb f87c 	bl	8000524 <__aeabi_i2d>
 800542c:	a36a      	add	r3, pc, #424	; (adr r3, 80055d8 <_dtoa_r+0x2f0>)
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f7fb f8e1 	bl	80005f8 <__aeabi_dmul>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4630      	mov	r0, r6
 800543c:	4639      	mov	r1, r7
 800543e:	f7fa ff25 	bl	800028c <__adddf3>
 8005442:	4606      	mov	r6, r0
 8005444:	460f      	mov	r7, r1
 8005446:	f7fb fb87 	bl	8000b58 <__aeabi_d2iz>
 800544a:	2200      	movs	r2, #0
 800544c:	4682      	mov	sl, r0
 800544e:	2300      	movs	r3, #0
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fb fb42 	bl	8000adc <__aeabi_dcmplt>
 8005458:	b148      	cbz	r0, 800546e <_dtoa_r+0x186>
 800545a:	4650      	mov	r0, sl
 800545c:	f7fb f862 	bl	8000524 <__aeabi_i2d>
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	f7fb fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 8005468:	b908      	cbnz	r0, 800546e <_dtoa_r+0x186>
 800546a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800546e:	f1ba 0f16 	cmp.w	sl, #22
 8005472:	d854      	bhi.n	800551e <_dtoa_r+0x236>
 8005474:	4b61      	ldr	r3, [pc, #388]	; (80055fc <_dtoa_r+0x314>)
 8005476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005482:	f7fb fb2b 	bl	8000adc <__aeabi_dcmplt>
 8005486:	2800      	cmp	r0, #0
 8005488:	d04b      	beq.n	8005522 <_dtoa_r+0x23a>
 800548a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800548e:	2300      	movs	r3, #0
 8005490:	930e      	str	r3, [sp, #56]	; 0x38
 8005492:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005494:	1b5d      	subs	r5, r3, r5
 8005496:	1e6b      	subs	r3, r5, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	bf43      	ittte	mi
 800549c:	2300      	movmi	r3, #0
 800549e:	f1c5 0801 	rsbmi	r8, r5, #1
 80054a2:	9304      	strmi	r3, [sp, #16]
 80054a4:	f04f 0800 	movpl.w	r8, #0
 80054a8:	f1ba 0f00 	cmp.w	sl, #0
 80054ac:	db3b      	blt.n	8005526 <_dtoa_r+0x23e>
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80054b4:	4453      	add	r3, sl
 80054b6:	9304      	str	r3, [sp, #16]
 80054b8:	2300      	movs	r3, #0
 80054ba:	9306      	str	r3, [sp, #24]
 80054bc:	9b05      	ldr	r3, [sp, #20]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d869      	bhi.n	8005596 <_dtoa_r+0x2ae>
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	bfc4      	itt	gt
 80054c6:	3b04      	subgt	r3, #4
 80054c8:	9305      	strgt	r3, [sp, #20]
 80054ca:	9b05      	ldr	r3, [sp, #20]
 80054cc:	f1a3 0302 	sub.w	r3, r3, #2
 80054d0:	bfcc      	ite	gt
 80054d2:	2500      	movgt	r5, #0
 80054d4:	2501      	movle	r5, #1
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d869      	bhi.n	80055ae <_dtoa_r+0x2c6>
 80054da:	e8df f003 	tbb	[pc, r3]
 80054de:	4e2c      	.short	0x4e2c
 80054e0:	5a4c      	.short	0x5a4c
 80054e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80054e6:	441d      	add	r5, r3
 80054e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	bfc1      	itttt	gt
 80054f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80054f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80054fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005500:	bfda      	itte	le
 8005502:	f1c3 0320 	rsble	r3, r3, #32
 8005506:	fa06 f003 	lslle.w	r0, r6, r3
 800550a:	4318      	orrgt	r0, r3
 800550c:	f7fa fffa 	bl	8000504 <__aeabi_ui2d>
 8005510:	2301      	movs	r3, #1
 8005512:	4606      	mov	r6, r0
 8005514:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005518:	3d01      	subs	r5, #1
 800551a:	9310      	str	r3, [sp, #64]	; 0x40
 800551c:	e771      	b.n	8005402 <_dtoa_r+0x11a>
 800551e:	2301      	movs	r3, #1
 8005520:	e7b6      	b.n	8005490 <_dtoa_r+0x1a8>
 8005522:	900e      	str	r0, [sp, #56]	; 0x38
 8005524:	e7b5      	b.n	8005492 <_dtoa_r+0x1aa>
 8005526:	f1ca 0300 	rsb	r3, sl, #0
 800552a:	9306      	str	r3, [sp, #24]
 800552c:	2300      	movs	r3, #0
 800552e:	eba8 080a 	sub.w	r8, r8, sl
 8005532:	930d      	str	r3, [sp, #52]	; 0x34
 8005534:	e7c2      	b.n	80054bc <_dtoa_r+0x1d4>
 8005536:	2300      	movs	r3, #0
 8005538:	9308      	str	r3, [sp, #32]
 800553a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	dc39      	bgt.n	80055b4 <_dtoa_r+0x2cc>
 8005540:	f04f 0901 	mov.w	r9, #1
 8005544:	f8cd 9004 	str.w	r9, [sp, #4]
 8005548:	464b      	mov	r3, r9
 800554a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800554e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005550:	2200      	movs	r2, #0
 8005552:	6042      	str	r2, [r0, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	f102 0614 	add.w	r6, r2, #20
 800555a:	429e      	cmp	r6, r3
 800555c:	6841      	ldr	r1, [r0, #4]
 800555e:	d92f      	bls.n	80055c0 <_dtoa_r+0x2d8>
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fcc7 	bl	8005ef4 <_Balloc>
 8005566:	9000      	str	r0, [sp, #0]
 8005568:	2800      	cmp	r0, #0
 800556a:	d14b      	bne.n	8005604 <_dtoa_r+0x31c>
 800556c:	4b24      	ldr	r3, [pc, #144]	; (8005600 <_dtoa_r+0x318>)
 800556e:	4602      	mov	r2, r0
 8005570:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005574:	e6d1      	b.n	800531a <_dtoa_r+0x32>
 8005576:	2301      	movs	r3, #1
 8005578:	e7de      	b.n	8005538 <_dtoa_r+0x250>
 800557a:	2300      	movs	r3, #0
 800557c:	9308      	str	r3, [sp, #32]
 800557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005580:	eb0a 0903 	add.w	r9, sl, r3
 8005584:	f109 0301 	add.w	r3, r9, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	bfb8      	it	lt
 800558e:	2301      	movlt	r3, #1
 8005590:	e7dd      	b.n	800554e <_dtoa_r+0x266>
 8005592:	2301      	movs	r3, #1
 8005594:	e7f2      	b.n	800557c <_dtoa_r+0x294>
 8005596:	2501      	movs	r5, #1
 8005598:	2300      	movs	r3, #0
 800559a:	9305      	str	r3, [sp, #20]
 800559c:	9508      	str	r5, [sp, #32]
 800559e:	f04f 39ff 	mov.w	r9, #4294967295
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80055a8:	2312      	movs	r3, #18
 80055aa:	9209      	str	r2, [sp, #36]	; 0x24
 80055ac:	e7cf      	b.n	800554e <_dtoa_r+0x266>
 80055ae:	2301      	movs	r3, #1
 80055b0:	9308      	str	r3, [sp, #32]
 80055b2:	e7f4      	b.n	800559e <_dtoa_r+0x2b6>
 80055b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80055b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80055bc:	464b      	mov	r3, r9
 80055be:	e7c6      	b.n	800554e <_dtoa_r+0x266>
 80055c0:	3101      	adds	r1, #1
 80055c2:	6041      	str	r1, [r0, #4]
 80055c4:	0052      	lsls	r2, r2, #1
 80055c6:	e7c6      	b.n	8005556 <_dtoa_r+0x26e>
 80055c8:	636f4361 	.word	0x636f4361
 80055cc:	3fd287a7 	.word	0x3fd287a7
 80055d0:	8b60c8b3 	.word	0x8b60c8b3
 80055d4:	3fc68a28 	.word	0x3fc68a28
 80055d8:	509f79fb 	.word	0x509f79fb
 80055dc:	3fd34413 	.word	0x3fd34413
 80055e0:	0800769d 	.word	0x0800769d
 80055e4:	080076b4 	.word	0x080076b4
 80055e8:	7ff00000 	.word	0x7ff00000
 80055ec:	08007699 	.word	0x08007699
 80055f0:	08007690 	.word	0x08007690
 80055f4:	0800766d 	.word	0x0800766d
 80055f8:	3ff80000 	.word	0x3ff80000
 80055fc:	080077b0 	.word	0x080077b0
 8005600:	08007713 	.word	0x08007713
 8005604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005606:	9a00      	ldr	r2, [sp, #0]
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	9b01      	ldr	r3, [sp, #4]
 800560c:	2b0e      	cmp	r3, #14
 800560e:	f200 80ad 	bhi.w	800576c <_dtoa_r+0x484>
 8005612:	2d00      	cmp	r5, #0
 8005614:	f000 80aa 	beq.w	800576c <_dtoa_r+0x484>
 8005618:	f1ba 0f00 	cmp.w	sl, #0
 800561c:	dd36      	ble.n	800568c <_dtoa_r+0x3a4>
 800561e:	4ac3      	ldr	r2, [pc, #780]	; (800592c <_dtoa_r+0x644>)
 8005620:	f00a 030f 	and.w	r3, sl, #15
 8005624:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005628:	ed93 7b00 	vldr	d7, [r3]
 800562c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005630:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005634:	eeb0 8a47 	vmov.f32	s16, s14
 8005638:	eef0 8a67 	vmov.f32	s17, s15
 800563c:	d016      	beq.n	800566c <_dtoa_r+0x384>
 800563e:	4bbc      	ldr	r3, [pc, #752]	; (8005930 <_dtoa_r+0x648>)
 8005640:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005648:	f7fb f900 	bl	800084c <__aeabi_ddiv>
 800564c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005650:	f007 070f 	and.w	r7, r7, #15
 8005654:	2503      	movs	r5, #3
 8005656:	4eb6      	ldr	r6, [pc, #728]	; (8005930 <_dtoa_r+0x648>)
 8005658:	b957      	cbnz	r7, 8005670 <_dtoa_r+0x388>
 800565a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800565e:	ec53 2b18 	vmov	r2, r3, d8
 8005662:	f7fb f8f3 	bl	800084c <__aeabi_ddiv>
 8005666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800566a:	e029      	b.n	80056c0 <_dtoa_r+0x3d8>
 800566c:	2502      	movs	r5, #2
 800566e:	e7f2      	b.n	8005656 <_dtoa_r+0x36e>
 8005670:	07f9      	lsls	r1, r7, #31
 8005672:	d508      	bpl.n	8005686 <_dtoa_r+0x39e>
 8005674:	ec51 0b18 	vmov	r0, r1, d8
 8005678:	e9d6 2300 	ldrd	r2, r3, [r6]
 800567c:	f7fa ffbc 	bl	80005f8 <__aeabi_dmul>
 8005680:	ec41 0b18 	vmov	d8, r0, r1
 8005684:	3501      	adds	r5, #1
 8005686:	107f      	asrs	r7, r7, #1
 8005688:	3608      	adds	r6, #8
 800568a:	e7e5      	b.n	8005658 <_dtoa_r+0x370>
 800568c:	f000 80a6 	beq.w	80057dc <_dtoa_r+0x4f4>
 8005690:	f1ca 0600 	rsb	r6, sl, #0
 8005694:	4ba5      	ldr	r3, [pc, #660]	; (800592c <_dtoa_r+0x644>)
 8005696:	4fa6      	ldr	r7, [pc, #664]	; (8005930 <_dtoa_r+0x648>)
 8005698:	f006 020f 	and.w	r2, r6, #15
 800569c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056a8:	f7fa ffa6 	bl	80005f8 <__aeabi_dmul>
 80056ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b0:	1136      	asrs	r6, r6, #4
 80056b2:	2300      	movs	r3, #0
 80056b4:	2502      	movs	r5, #2
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	f040 8085 	bne.w	80057c6 <_dtoa_r+0x4de>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1d2      	bne.n	8005666 <_dtoa_r+0x37e>
 80056c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 808c 	beq.w	80057e0 <_dtoa_r+0x4f8>
 80056c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056cc:	4b99      	ldr	r3, [pc, #612]	; (8005934 <_dtoa_r+0x64c>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	4630      	mov	r0, r6
 80056d2:	4639      	mov	r1, r7
 80056d4:	f7fb fa02 	bl	8000adc <__aeabi_dcmplt>
 80056d8:	2800      	cmp	r0, #0
 80056da:	f000 8081 	beq.w	80057e0 <_dtoa_r+0x4f8>
 80056de:	9b01      	ldr	r3, [sp, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d07d      	beq.n	80057e0 <_dtoa_r+0x4f8>
 80056e4:	f1b9 0f00 	cmp.w	r9, #0
 80056e8:	dd3c      	ble.n	8005764 <_dtoa_r+0x47c>
 80056ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056ee:	9307      	str	r3, [sp, #28]
 80056f0:	2200      	movs	r2, #0
 80056f2:	4b91      	ldr	r3, [pc, #580]	; (8005938 <_dtoa_r+0x650>)
 80056f4:	4630      	mov	r0, r6
 80056f6:	4639      	mov	r1, r7
 80056f8:	f7fa ff7e 	bl	80005f8 <__aeabi_dmul>
 80056fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005700:	3501      	adds	r5, #1
 8005702:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005706:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800570a:	4628      	mov	r0, r5
 800570c:	f7fa ff0a 	bl	8000524 <__aeabi_i2d>
 8005710:	4632      	mov	r2, r6
 8005712:	463b      	mov	r3, r7
 8005714:	f7fa ff70 	bl	80005f8 <__aeabi_dmul>
 8005718:	4b88      	ldr	r3, [pc, #544]	; (800593c <_dtoa_r+0x654>)
 800571a:	2200      	movs	r2, #0
 800571c:	f7fa fdb6 	bl	800028c <__adddf3>
 8005720:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d15c      	bne.n	80057ea <_dtoa_r+0x502>
 8005730:	4b83      	ldr	r3, [pc, #524]	; (8005940 <_dtoa_r+0x658>)
 8005732:	2200      	movs	r2, #0
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	f7fa fda6 	bl	8000288 <__aeabi_dsub>
 800573c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	f7fb f9e8 	bl	8000b18 <__aeabi_dcmpgt>
 8005748:	2800      	cmp	r0, #0
 800574a:	f040 8296 	bne.w	8005c7a <_dtoa_r+0x992>
 800574e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005752:	4630      	mov	r0, r6
 8005754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005758:	4639      	mov	r1, r7
 800575a:	f7fb f9bf 	bl	8000adc <__aeabi_dcmplt>
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 8288 	bne.w	8005c74 <_dtoa_r+0x98c>
 8005764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005768:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800576c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800576e:	2b00      	cmp	r3, #0
 8005770:	f2c0 8158 	blt.w	8005a24 <_dtoa_r+0x73c>
 8005774:	f1ba 0f0e 	cmp.w	sl, #14
 8005778:	f300 8154 	bgt.w	8005a24 <_dtoa_r+0x73c>
 800577c:	4b6b      	ldr	r3, [pc, #428]	; (800592c <_dtoa_r+0x644>)
 800577e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005782:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	f280 80e3 	bge.w	8005954 <_dtoa_r+0x66c>
 800578e:	9b01      	ldr	r3, [sp, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f300 80df 	bgt.w	8005954 <_dtoa_r+0x66c>
 8005796:	f040 826d 	bne.w	8005c74 <_dtoa_r+0x98c>
 800579a:	4b69      	ldr	r3, [pc, #420]	; (8005940 <_dtoa_r+0x658>)
 800579c:	2200      	movs	r2, #0
 800579e:	4640      	mov	r0, r8
 80057a0:	4649      	mov	r1, r9
 80057a2:	f7fa ff29 	bl	80005f8 <__aeabi_dmul>
 80057a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057aa:	f7fb f9ab 	bl	8000b04 <__aeabi_dcmpge>
 80057ae:	9e01      	ldr	r6, [sp, #4]
 80057b0:	4637      	mov	r7, r6
 80057b2:	2800      	cmp	r0, #0
 80057b4:	f040 8243 	bne.w	8005c3e <_dtoa_r+0x956>
 80057b8:	9d00      	ldr	r5, [sp, #0]
 80057ba:	2331      	movs	r3, #49	; 0x31
 80057bc:	f805 3b01 	strb.w	r3, [r5], #1
 80057c0:	f10a 0a01 	add.w	sl, sl, #1
 80057c4:	e23f      	b.n	8005c46 <_dtoa_r+0x95e>
 80057c6:	07f2      	lsls	r2, r6, #31
 80057c8:	d505      	bpl.n	80057d6 <_dtoa_r+0x4ee>
 80057ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ce:	f7fa ff13 	bl	80005f8 <__aeabi_dmul>
 80057d2:	3501      	adds	r5, #1
 80057d4:	2301      	movs	r3, #1
 80057d6:	1076      	asrs	r6, r6, #1
 80057d8:	3708      	adds	r7, #8
 80057da:	e76c      	b.n	80056b6 <_dtoa_r+0x3ce>
 80057dc:	2502      	movs	r5, #2
 80057de:	e76f      	b.n	80056c0 <_dtoa_r+0x3d8>
 80057e0:	9b01      	ldr	r3, [sp, #4]
 80057e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80057e6:	930c      	str	r3, [sp, #48]	; 0x30
 80057e8:	e78d      	b.n	8005706 <_dtoa_r+0x41e>
 80057ea:	9900      	ldr	r1, [sp, #0]
 80057ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80057ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057f0:	4b4e      	ldr	r3, [pc, #312]	; (800592c <_dtoa_r+0x644>)
 80057f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057f6:	4401      	add	r1, r0
 80057f8:	9102      	str	r1, [sp, #8]
 80057fa:	9908      	ldr	r1, [sp, #32]
 80057fc:	eeb0 8a47 	vmov.f32	s16, s14
 8005800:	eef0 8a67 	vmov.f32	s17, s15
 8005804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005808:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800580c:	2900      	cmp	r1, #0
 800580e:	d045      	beq.n	800589c <_dtoa_r+0x5b4>
 8005810:	494c      	ldr	r1, [pc, #304]	; (8005944 <_dtoa_r+0x65c>)
 8005812:	2000      	movs	r0, #0
 8005814:	f7fb f81a 	bl	800084c <__aeabi_ddiv>
 8005818:	ec53 2b18 	vmov	r2, r3, d8
 800581c:	f7fa fd34 	bl	8000288 <__aeabi_dsub>
 8005820:	9d00      	ldr	r5, [sp, #0]
 8005822:	ec41 0b18 	vmov	d8, r0, r1
 8005826:	4639      	mov	r1, r7
 8005828:	4630      	mov	r0, r6
 800582a:	f7fb f995 	bl	8000b58 <__aeabi_d2iz>
 800582e:	900c      	str	r0, [sp, #48]	; 0x30
 8005830:	f7fa fe78 	bl	8000524 <__aeabi_i2d>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4630      	mov	r0, r6
 800583a:	4639      	mov	r1, r7
 800583c:	f7fa fd24 	bl	8000288 <__aeabi_dsub>
 8005840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005842:	3330      	adds	r3, #48	; 0x30
 8005844:	f805 3b01 	strb.w	r3, [r5], #1
 8005848:	ec53 2b18 	vmov	r2, r3, d8
 800584c:	4606      	mov	r6, r0
 800584e:	460f      	mov	r7, r1
 8005850:	f7fb f944 	bl	8000adc <__aeabi_dcmplt>
 8005854:	2800      	cmp	r0, #0
 8005856:	d165      	bne.n	8005924 <_dtoa_r+0x63c>
 8005858:	4632      	mov	r2, r6
 800585a:	463b      	mov	r3, r7
 800585c:	4935      	ldr	r1, [pc, #212]	; (8005934 <_dtoa_r+0x64c>)
 800585e:	2000      	movs	r0, #0
 8005860:	f7fa fd12 	bl	8000288 <__aeabi_dsub>
 8005864:	ec53 2b18 	vmov	r2, r3, d8
 8005868:	f7fb f938 	bl	8000adc <__aeabi_dcmplt>
 800586c:	2800      	cmp	r0, #0
 800586e:	f040 80b9 	bne.w	80059e4 <_dtoa_r+0x6fc>
 8005872:	9b02      	ldr	r3, [sp, #8]
 8005874:	429d      	cmp	r5, r3
 8005876:	f43f af75 	beq.w	8005764 <_dtoa_r+0x47c>
 800587a:	4b2f      	ldr	r3, [pc, #188]	; (8005938 <_dtoa_r+0x650>)
 800587c:	ec51 0b18 	vmov	r0, r1, d8
 8005880:	2200      	movs	r2, #0
 8005882:	f7fa feb9 	bl	80005f8 <__aeabi_dmul>
 8005886:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <_dtoa_r+0x650>)
 8005888:	ec41 0b18 	vmov	d8, r0, r1
 800588c:	2200      	movs	r2, #0
 800588e:	4630      	mov	r0, r6
 8005890:	4639      	mov	r1, r7
 8005892:	f7fa feb1 	bl	80005f8 <__aeabi_dmul>
 8005896:	4606      	mov	r6, r0
 8005898:	460f      	mov	r7, r1
 800589a:	e7c4      	b.n	8005826 <_dtoa_r+0x53e>
 800589c:	ec51 0b17 	vmov	r0, r1, d7
 80058a0:	f7fa feaa 	bl	80005f8 <__aeabi_dmul>
 80058a4:	9b02      	ldr	r3, [sp, #8]
 80058a6:	9d00      	ldr	r5, [sp, #0]
 80058a8:	930c      	str	r3, [sp, #48]	; 0x30
 80058aa:	ec41 0b18 	vmov	d8, r0, r1
 80058ae:	4639      	mov	r1, r7
 80058b0:	4630      	mov	r0, r6
 80058b2:	f7fb f951 	bl	8000b58 <__aeabi_d2iz>
 80058b6:	9011      	str	r0, [sp, #68]	; 0x44
 80058b8:	f7fa fe34 	bl	8000524 <__aeabi_i2d>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4630      	mov	r0, r6
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fa fce0 	bl	8000288 <__aeabi_dsub>
 80058c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ca:	3330      	adds	r3, #48	; 0x30
 80058cc:	f805 3b01 	strb.w	r3, [r5], #1
 80058d0:	9b02      	ldr	r3, [sp, #8]
 80058d2:	429d      	cmp	r5, r3
 80058d4:	4606      	mov	r6, r0
 80058d6:	460f      	mov	r7, r1
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	d134      	bne.n	8005948 <_dtoa_r+0x660>
 80058de:	4b19      	ldr	r3, [pc, #100]	; (8005944 <_dtoa_r+0x65c>)
 80058e0:	ec51 0b18 	vmov	r0, r1, d8
 80058e4:	f7fa fcd2 	bl	800028c <__adddf3>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4630      	mov	r0, r6
 80058ee:	4639      	mov	r1, r7
 80058f0:	f7fb f912 	bl	8000b18 <__aeabi_dcmpgt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d175      	bne.n	80059e4 <_dtoa_r+0x6fc>
 80058f8:	ec53 2b18 	vmov	r2, r3, d8
 80058fc:	4911      	ldr	r1, [pc, #68]	; (8005944 <_dtoa_r+0x65c>)
 80058fe:	2000      	movs	r0, #0
 8005900:	f7fa fcc2 	bl	8000288 <__aeabi_dsub>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4630      	mov	r0, r6
 800590a:	4639      	mov	r1, r7
 800590c:	f7fb f8e6 	bl	8000adc <__aeabi_dcmplt>
 8005910:	2800      	cmp	r0, #0
 8005912:	f43f af27 	beq.w	8005764 <_dtoa_r+0x47c>
 8005916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005918:	1e6b      	subs	r3, r5, #1
 800591a:	930c      	str	r3, [sp, #48]	; 0x30
 800591c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005920:	2b30      	cmp	r3, #48	; 0x30
 8005922:	d0f8      	beq.n	8005916 <_dtoa_r+0x62e>
 8005924:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005928:	e04a      	b.n	80059c0 <_dtoa_r+0x6d8>
 800592a:	bf00      	nop
 800592c:	080077b0 	.word	0x080077b0
 8005930:	08007788 	.word	0x08007788
 8005934:	3ff00000 	.word	0x3ff00000
 8005938:	40240000 	.word	0x40240000
 800593c:	401c0000 	.word	0x401c0000
 8005940:	40140000 	.word	0x40140000
 8005944:	3fe00000 	.word	0x3fe00000
 8005948:	4baf      	ldr	r3, [pc, #700]	; (8005c08 <_dtoa_r+0x920>)
 800594a:	f7fa fe55 	bl	80005f8 <__aeabi_dmul>
 800594e:	4606      	mov	r6, r0
 8005950:	460f      	mov	r7, r1
 8005952:	e7ac      	b.n	80058ae <_dtoa_r+0x5c6>
 8005954:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005958:	9d00      	ldr	r5, [sp, #0]
 800595a:	4642      	mov	r2, r8
 800595c:	464b      	mov	r3, r9
 800595e:	4630      	mov	r0, r6
 8005960:	4639      	mov	r1, r7
 8005962:	f7fa ff73 	bl	800084c <__aeabi_ddiv>
 8005966:	f7fb f8f7 	bl	8000b58 <__aeabi_d2iz>
 800596a:	9002      	str	r0, [sp, #8]
 800596c:	f7fa fdda 	bl	8000524 <__aeabi_i2d>
 8005970:	4642      	mov	r2, r8
 8005972:	464b      	mov	r3, r9
 8005974:	f7fa fe40 	bl	80005f8 <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4630      	mov	r0, r6
 800597e:	4639      	mov	r1, r7
 8005980:	f7fa fc82 	bl	8000288 <__aeabi_dsub>
 8005984:	9e02      	ldr	r6, [sp, #8]
 8005986:	9f01      	ldr	r7, [sp, #4]
 8005988:	3630      	adds	r6, #48	; 0x30
 800598a:	f805 6b01 	strb.w	r6, [r5], #1
 800598e:	9e00      	ldr	r6, [sp, #0]
 8005990:	1bae      	subs	r6, r5, r6
 8005992:	42b7      	cmp	r7, r6
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	d137      	bne.n	8005a0a <_dtoa_r+0x722>
 800599a:	f7fa fc77 	bl	800028c <__adddf3>
 800599e:	4642      	mov	r2, r8
 80059a0:	464b      	mov	r3, r9
 80059a2:	4606      	mov	r6, r0
 80059a4:	460f      	mov	r7, r1
 80059a6:	f7fb f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 80059aa:	b9c8      	cbnz	r0, 80059e0 <_dtoa_r+0x6f8>
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fb f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80059b8:	b110      	cbz	r0, 80059c0 <_dtoa_r+0x6d8>
 80059ba:	9b02      	ldr	r3, [sp, #8]
 80059bc:	07d9      	lsls	r1, r3, #31
 80059be:	d40f      	bmi.n	80059e0 <_dtoa_r+0x6f8>
 80059c0:	4620      	mov	r0, r4
 80059c2:	4659      	mov	r1, fp
 80059c4:	f000 fad6 	bl	8005f74 <_Bfree>
 80059c8:	2300      	movs	r3, #0
 80059ca:	702b      	strb	r3, [r5, #0]
 80059cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059ce:	f10a 0001 	add.w	r0, sl, #1
 80059d2:	6018      	str	r0, [r3, #0]
 80059d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f43f acd8 	beq.w	800538c <_dtoa_r+0xa4>
 80059dc:	601d      	str	r5, [r3, #0]
 80059de:	e4d5      	b.n	800538c <_dtoa_r+0xa4>
 80059e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80059e4:	462b      	mov	r3, r5
 80059e6:	461d      	mov	r5, r3
 80059e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ec:	2a39      	cmp	r2, #57	; 0x39
 80059ee:	d108      	bne.n	8005a02 <_dtoa_r+0x71a>
 80059f0:	9a00      	ldr	r2, [sp, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d1f7      	bne.n	80059e6 <_dtoa_r+0x6fe>
 80059f6:	9a07      	ldr	r2, [sp, #28]
 80059f8:	9900      	ldr	r1, [sp, #0]
 80059fa:	3201      	adds	r2, #1
 80059fc:	9207      	str	r2, [sp, #28]
 80059fe:	2230      	movs	r2, #48	; 0x30
 8005a00:	700a      	strb	r2, [r1, #0]
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	3201      	adds	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e78c      	b.n	8005924 <_dtoa_r+0x63c>
 8005a0a:	4b7f      	ldr	r3, [pc, #508]	; (8005c08 <_dtoa_r+0x920>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f7fa fdf3 	bl	80005f8 <__aeabi_dmul>
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	4606      	mov	r6, r0
 8005a18:	460f      	mov	r7, r1
 8005a1a:	f7fb f855 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d09b      	beq.n	800595a <_dtoa_r+0x672>
 8005a22:	e7cd      	b.n	80059c0 <_dtoa_r+0x6d8>
 8005a24:	9a08      	ldr	r2, [sp, #32]
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	f000 80c4 	beq.w	8005bb4 <_dtoa_r+0x8cc>
 8005a2c:	9a05      	ldr	r2, [sp, #20]
 8005a2e:	2a01      	cmp	r2, #1
 8005a30:	f300 80a8 	bgt.w	8005b84 <_dtoa_r+0x89c>
 8005a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	f000 80a0 	beq.w	8005b7c <_dtoa_r+0x894>
 8005a3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a40:	9e06      	ldr	r6, [sp, #24]
 8005a42:	4645      	mov	r5, r8
 8005a44:	9a04      	ldr	r2, [sp, #16]
 8005a46:	2101      	movs	r1, #1
 8005a48:	441a      	add	r2, r3
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4498      	add	r8, r3
 8005a4e:	9204      	str	r2, [sp, #16]
 8005a50:	f000 fb4c 	bl	80060ec <__i2b>
 8005a54:	4607      	mov	r7, r0
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	dd0b      	ble.n	8005a72 <_dtoa_r+0x78a>
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dd08      	ble.n	8005a72 <_dtoa_r+0x78a>
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	9a04      	ldr	r2, [sp, #16]
 8005a64:	bfa8      	it	ge
 8005a66:	462b      	movge	r3, r5
 8005a68:	eba8 0803 	sub.w	r8, r8, r3
 8005a6c:	1aed      	subs	r5, r5, r3
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	9b06      	ldr	r3, [sp, #24]
 8005a74:	b1fb      	cbz	r3, 8005ab6 <_dtoa_r+0x7ce>
 8005a76:	9b08      	ldr	r3, [sp, #32]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 809f 	beq.w	8005bbc <_dtoa_r+0x8d4>
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	dd11      	ble.n	8005aa6 <_dtoa_r+0x7be>
 8005a82:	4639      	mov	r1, r7
 8005a84:	4632      	mov	r2, r6
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fbec 	bl	8006264 <__pow5mult>
 8005a8c:	465a      	mov	r2, fp
 8005a8e:	4601      	mov	r1, r0
 8005a90:	4607      	mov	r7, r0
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 fb40 	bl	8006118 <__multiply>
 8005a98:	4659      	mov	r1, fp
 8005a9a:	9007      	str	r0, [sp, #28]
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 fa69 	bl	8005f74 <_Bfree>
 8005aa2:	9b07      	ldr	r3, [sp, #28]
 8005aa4:	469b      	mov	fp, r3
 8005aa6:	9b06      	ldr	r3, [sp, #24]
 8005aa8:	1b9a      	subs	r2, r3, r6
 8005aaa:	d004      	beq.n	8005ab6 <_dtoa_r+0x7ce>
 8005aac:	4659      	mov	r1, fp
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fbd8 	bl	8006264 <__pow5mult>
 8005ab4:	4683      	mov	fp, r0
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 fb17 	bl	80060ec <__i2b>
 8005abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	dd7c      	ble.n	8005bc0 <_dtoa_r+0x8d8>
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4601      	mov	r1, r0
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fbca 	bl	8006264 <__pow5mult>
 8005ad0:	9b05      	ldr	r3, [sp, #20]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	dd76      	ble.n	8005bc6 <_dtoa_r+0x8de>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9306      	str	r3, [sp, #24]
 8005adc:	6933      	ldr	r3, [r6, #16]
 8005ade:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ae2:	6918      	ldr	r0, [r3, #16]
 8005ae4:	f000 fab2 	bl	800604c <__hi0bits>
 8005ae8:	f1c0 0020 	rsb	r0, r0, #32
 8005aec:	9b04      	ldr	r3, [sp, #16]
 8005aee:	4418      	add	r0, r3
 8005af0:	f010 001f 	ands.w	r0, r0, #31
 8005af4:	f000 8086 	beq.w	8005c04 <_dtoa_r+0x91c>
 8005af8:	f1c0 0320 	rsb	r3, r0, #32
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	dd7f      	ble.n	8005c00 <_dtoa_r+0x918>
 8005b00:	f1c0 001c 	rsb	r0, r0, #28
 8005b04:	9b04      	ldr	r3, [sp, #16]
 8005b06:	4403      	add	r3, r0
 8005b08:	4480      	add	r8, r0
 8005b0a:	4405      	add	r5, r0
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	f1b8 0f00 	cmp.w	r8, #0
 8005b12:	dd05      	ble.n	8005b20 <_dtoa_r+0x838>
 8005b14:	4659      	mov	r1, fp
 8005b16:	4642      	mov	r2, r8
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fbfd 	bl	8006318 <__lshift>
 8005b1e:	4683      	mov	fp, r0
 8005b20:	9b04      	ldr	r3, [sp, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dd05      	ble.n	8005b32 <_dtoa_r+0x84a>
 8005b26:	4631      	mov	r1, r6
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 fbf4 	bl	8006318 <__lshift>
 8005b30:	4606      	mov	r6, r0
 8005b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d069      	beq.n	8005c0c <_dtoa_r+0x924>
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4658      	mov	r0, fp
 8005b3c:	f000 fc58 	bl	80063f0 <__mcmp>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	da63      	bge.n	8005c0c <_dtoa_r+0x924>
 8005b44:	2300      	movs	r3, #0
 8005b46:	4659      	mov	r1, fp
 8005b48:	220a      	movs	r2, #10
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 fa34 	bl	8005fb8 <__multadd>
 8005b50:	9b08      	ldr	r3, [sp, #32]
 8005b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b56:	4683      	mov	fp, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 818f 	beq.w	8005e7c <_dtoa_r+0xb94>
 8005b5e:	4639      	mov	r1, r7
 8005b60:	2300      	movs	r3, #0
 8005b62:	220a      	movs	r2, #10
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 fa27 	bl	8005fb8 <__multadd>
 8005b6a:	f1b9 0f00 	cmp.w	r9, #0
 8005b6e:	4607      	mov	r7, r0
 8005b70:	f300 808e 	bgt.w	8005c90 <_dtoa_r+0x9a8>
 8005b74:	9b05      	ldr	r3, [sp, #20]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	dc50      	bgt.n	8005c1c <_dtoa_r+0x934>
 8005b7a:	e089      	b.n	8005c90 <_dtoa_r+0x9a8>
 8005b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b82:	e75d      	b.n	8005a40 <_dtoa_r+0x758>
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	1e5e      	subs	r6, r3, #1
 8005b88:	9b06      	ldr	r3, [sp, #24]
 8005b8a:	42b3      	cmp	r3, r6
 8005b8c:	bfbf      	itttt	lt
 8005b8e:	9b06      	ldrlt	r3, [sp, #24]
 8005b90:	9606      	strlt	r6, [sp, #24]
 8005b92:	1af2      	sublt	r2, r6, r3
 8005b94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005b96:	bfb6      	itet	lt
 8005b98:	189b      	addlt	r3, r3, r2
 8005b9a:	1b9e      	subge	r6, r3, r6
 8005b9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	bfb8      	it	lt
 8005ba2:	2600      	movlt	r6, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bfb5      	itete	lt
 8005ba8:	eba8 0503 	sublt.w	r5, r8, r3
 8005bac:	9b01      	ldrge	r3, [sp, #4]
 8005bae:	2300      	movlt	r3, #0
 8005bb0:	4645      	movge	r5, r8
 8005bb2:	e747      	b.n	8005a44 <_dtoa_r+0x75c>
 8005bb4:	9e06      	ldr	r6, [sp, #24]
 8005bb6:	9f08      	ldr	r7, [sp, #32]
 8005bb8:	4645      	mov	r5, r8
 8005bba:	e74c      	b.n	8005a56 <_dtoa_r+0x76e>
 8005bbc:	9a06      	ldr	r2, [sp, #24]
 8005bbe:	e775      	b.n	8005aac <_dtoa_r+0x7c4>
 8005bc0:	9b05      	ldr	r3, [sp, #20]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	dc18      	bgt.n	8005bf8 <_dtoa_r+0x910>
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	b9b3      	cbnz	r3, 8005bf8 <_dtoa_r+0x910>
 8005bca:	9b03      	ldr	r3, [sp, #12]
 8005bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bd0:	b9a3      	cbnz	r3, 8005bfc <_dtoa_r+0x914>
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bd8:	0d1b      	lsrs	r3, r3, #20
 8005bda:	051b      	lsls	r3, r3, #20
 8005bdc:	b12b      	cbz	r3, 8005bea <_dtoa_r+0x902>
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	3301      	adds	r3, #1
 8005be2:	9304      	str	r3, [sp, #16]
 8005be4:	f108 0801 	add.w	r8, r8, #1
 8005be8:	2301      	movs	r3, #1
 8005bea:	9306      	str	r3, [sp, #24]
 8005bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f47f af74 	bne.w	8005adc <_dtoa_r+0x7f4>
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	e779      	b.n	8005aec <_dtoa_r+0x804>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e7f6      	b.n	8005bea <_dtoa_r+0x902>
 8005bfc:	9b02      	ldr	r3, [sp, #8]
 8005bfe:	e7f4      	b.n	8005bea <_dtoa_r+0x902>
 8005c00:	d085      	beq.n	8005b0e <_dtoa_r+0x826>
 8005c02:	4618      	mov	r0, r3
 8005c04:	301c      	adds	r0, #28
 8005c06:	e77d      	b.n	8005b04 <_dtoa_r+0x81c>
 8005c08:	40240000 	.word	0x40240000
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	dc38      	bgt.n	8005c84 <_dtoa_r+0x99c>
 8005c12:	9b05      	ldr	r3, [sp, #20]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	dd35      	ble.n	8005c84 <_dtoa_r+0x99c>
 8005c18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c1c:	f1b9 0f00 	cmp.w	r9, #0
 8005c20:	d10d      	bne.n	8005c3e <_dtoa_r+0x956>
 8005c22:	4631      	mov	r1, r6
 8005c24:	464b      	mov	r3, r9
 8005c26:	2205      	movs	r2, #5
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f9c5 	bl	8005fb8 <__multadd>
 8005c2e:	4601      	mov	r1, r0
 8005c30:	4606      	mov	r6, r0
 8005c32:	4658      	mov	r0, fp
 8005c34:	f000 fbdc 	bl	80063f0 <__mcmp>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f73f adbd 	bgt.w	80057b8 <_dtoa_r+0x4d0>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	9d00      	ldr	r5, [sp, #0]
 8005c42:	ea6f 0a03 	mvn.w	sl, r3
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 f991 	bl	8005f74 <_Bfree>
 8005c52:	2f00      	cmp	r7, #0
 8005c54:	f43f aeb4 	beq.w	80059c0 <_dtoa_r+0x6d8>
 8005c58:	f1b8 0f00 	cmp.w	r8, #0
 8005c5c:	d005      	beq.n	8005c6a <_dtoa_r+0x982>
 8005c5e:	45b8      	cmp	r8, r7
 8005c60:	d003      	beq.n	8005c6a <_dtoa_r+0x982>
 8005c62:	4641      	mov	r1, r8
 8005c64:	4620      	mov	r0, r4
 8005c66:	f000 f985 	bl	8005f74 <_Bfree>
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 f981 	bl	8005f74 <_Bfree>
 8005c72:	e6a5      	b.n	80059c0 <_dtoa_r+0x6d8>
 8005c74:	2600      	movs	r6, #0
 8005c76:	4637      	mov	r7, r6
 8005c78:	e7e1      	b.n	8005c3e <_dtoa_r+0x956>
 8005c7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005c7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c80:	4637      	mov	r7, r6
 8005c82:	e599      	b.n	80057b8 <_dtoa_r+0x4d0>
 8005c84:	9b08      	ldr	r3, [sp, #32]
 8005c86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80fd 	beq.w	8005e8a <_dtoa_r+0xba2>
 8005c90:	2d00      	cmp	r5, #0
 8005c92:	dd05      	ble.n	8005ca0 <_dtoa_r+0x9b8>
 8005c94:	4639      	mov	r1, r7
 8005c96:	462a      	mov	r2, r5
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fb3d 	bl	8006318 <__lshift>
 8005c9e:	4607      	mov	r7, r0
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d05c      	beq.n	8005d60 <_dtoa_r+0xa78>
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 f923 	bl	8005ef4 <_Balloc>
 8005cae:	4605      	mov	r5, r0
 8005cb0:	b928      	cbnz	r0, 8005cbe <_dtoa_r+0x9d6>
 8005cb2:	4b80      	ldr	r3, [pc, #512]	; (8005eb4 <_dtoa_r+0xbcc>)
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cba:	f7ff bb2e 	b.w	800531a <_dtoa_r+0x32>
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	3202      	adds	r2, #2
 8005cc2:	0092      	lsls	r2, r2, #2
 8005cc4:	f107 010c 	add.w	r1, r7, #12
 8005cc8:	300c      	adds	r0, #12
 8005cca:	f000 f905 	bl	8005ed8 <memcpy>
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f000 fb20 	bl	8006318 <__lshift>
 8005cd8:	9b00      	ldr	r3, [sp, #0]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	444b      	add	r3, r9
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	9b02      	ldr	r3, [sp, #8]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	46b8      	mov	r8, r7
 8005cec:	9306      	str	r3, [sp, #24]
 8005cee:	4607      	mov	r7, r0
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	4658      	mov	r0, fp
 8005cf8:	9302      	str	r3, [sp, #8]
 8005cfa:	f7ff fa69 	bl	80051d0 <quorem>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	3330      	adds	r3, #48	; 0x30
 8005d02:	9004      	str	r0, [sp, #16]
 8005d04:	4641      	mov	r1, r8
 8005d06:	4658      	mov	r0, fp
 8005d08:	9308      	str	r3, [sp, #32]
 8005d0a:	f000 fb71 	bl	80063f0 <__mcmp>
 8005d0e:	463a      	mov	r2, r7
 8005d10:	4681      	mov	r9, r0
 8005d12:	4631      	mov	r1, r6
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fb87 	bl	8006428 <__mdiff>
 8005d1a:	68c2      	ldr	r2, [r0, #12]
 8005d1c:	9b08      	ldr	r3, [sp, #32]
 8005d1e:	4605      	mov	r5, r0
 8005d20:	bb02      	cbnz	r2, 8005d64 <_dtoa_r+0xa7c>
 8005d22:	4601      	mov	r1, r0
 8005d24:	4658      	mov	r0, fp
 8005d26:	f000 fb63 	bl	80063f0 <__mcmp>
 8005d2a:	9b08      	ldr	r3, [sp, #32]
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005d36:	f000 f91d 	bl	8005f74 <_Bfree>
 8005d3a:	9b05      	ldr	r3, [sp, #20]
 8005d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d3e:	9d01      	ldr	r5, [sp, #4]
 8005d40:	ea43 0102 	orr.w	r1, r3, r2
 8005d44:	9b06      	ldr	r3, [sp, #24]
 8005d46:	430b      	orrs	r3, r1
 8005d48:	9b08      	ldr	r3, [sp, #32]
 8005d4a:	d10d      	bne.n	8005d68 <_dtoa_r+0xa80>
 8005d4c:	2b39      	cmp	r3, #57	; 0x39
 8005d4e:	d029      	beq.n	8005da4 <_dtoa_r+0xabc>
 8005d50:	f1b9 0f00 	cmp.w	r9, #0
 8005d54:	dd01      	ble.n	8005d5a <_dtoa_r+0xa72>
 8005d56:	9b04      	ldr	r3, [sp, #16]
 8005d58:	3331      	adds	r3, #49	; 0x31
 8005d5a:	9a02      	ldr	r2, [sp, #8]
 8005d5c:	7013      	strb	r3, [r2, #0]
 8005d5e:	e774      	b.n	8005c4a <_dtoa_r+0x962>
 8005d60:	4638      	mov	r0, r7
 8005d62:	e7b9      	b.n	8005cd8 <_dtoa_r+0x9f0>
 8005d64:	2201      	movs	r2, #1
 8005d66:	e7e2      	b.n	8005d2e <_dtoa_r+0xa46>
 8005d68:	f1b9 0f00 	cmp.w	r9, #0
 8005d6c:	db06      	blt.n	8005d7c <_dtoa_r+0xa94>
 8005d6e:	9905      	ldr	r1, [sp, #20]
 8005d70:	ea41 0909 	orr.w	r9, r1, r9
 8005d74:	9906      	ldr	r1, [sp, #24]
 8005d76:	ea59 0101 	orrs.w	r1, r9, r1
 8005d7a:	d120      	bne.n	8005dbe <_dtoa_r+0xad6>
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	ddec      	ble.n	8005d5a <_dtoa_r+0xa72>
 8005d80:	4659      	mov	r1, fp
 8005d82:	2201      	movs	r2, #1
 8005d84:	4620      	mov	r0, r4
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	f000 fac6 	bl	8006318 <__lshift>
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4683      	mov	fp, r0
 8005d90:	f000 fb2e 	bl	80063f0 <__mcmp>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	dc02      	bgt.n	8005da0 <_dtoa_r+0xab8>
 8005d9a:	d1de      	bne.n	8005d5a <_dtoa_r+0xa72>
 8005d9c:	07da      	lsls	r2, r3, #31
 8005d9e:	d5dc      	bpl.n	8005d5a <_dtoa_r+0xa72>
 8005da0:	2b39      	cmp	r3, #57	; 0x39
 8005da2:	d1d8      	bne.n	8005d56 <_dtoa_r+0xa6e>
 8005da4:	9a02      	ldr	r2, [sp, #8]
 8005da6:	2339      	movs	r3, #57	; 0x39
 8005da8:	7013      	strb	r3, [r2, #0]
 8005daa:	462b      	mov	r3, r5
 8005dac:	461d      	mov	r5, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005db4:	2a39      	cmp	r2, #57	; 0x39
 8005db6:	d050      	beq.n	8005e5a <_dtoa_r+0xb72>
 8005db8:	3201      	adds	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	e745      	b.n	8005c4a <_dtoa_r+0x962>
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	dd03      	ble.n	8005dca <_dtoa_r+0xae2>
 8005dc2:	2b39      	cmp	r3, #57	; 0x39
 8005dc4:	d0ee      	beq.n	8005da4 <_dtoa_r+0xabc>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	e7c7      	b.n	8005d5a <_dtoa_r+0xa72>
 8005dca:	9a01      	ldr	r2, [sp, #4]
 8005dcc:	9907      	ldr	r1, [sp, #28]
 8005dce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005dd2:	428a      	cmp	r2, r1
 8005dd4:	d02a      	beq.n	8005e2c <_dtoa_r+0xb44>
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	2300      	movs	r3, #0
 8005dda:	220a      	movs	r2, #10
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 f8eb 	bl	8005fb8 <__multadd>
 8005de2:	45b8      	cmp	r8, r7
 8005de4:	4683      	mov	fp, r0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	f04f 020a 	mov.w	r2, #10
 8005dee:	4641      	mov	r1, r8
 8005df0:	4620      	mov	r0, r4
 8005df2:	d107      	bne.n	8005e04 <_dtoa_r+0xb1c>
 8005df4:	f000 f8e0 	bl	8005fb8 <__multadd>
 8005df8:	4680      	mov	r8, r0
 8005dfa:	4607      	mov	r7, r0
 8005dfc:	9b01      	ldr	r3, [sp, #4]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	e775      	b.n	8005cf0 <_dtoa_r+0xa08>
 8005e04:	f000 f8d8 	bl	8005fb8 <__multadd>
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	220a      	movs	r2, #10
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 f8d1 	bl	8005fb8 <__multadd>
 8005e16:	4607      	mov	r7, r0
 8005e18:	e7f0      	b.n	8005dfc <_dtoa_r+0xb14>
 8005e1a:	f1b9 0f00 	cmp.w	r9, #0
 8005e1e:	9a00      	ldr	r2, [sp, #0]
 8005e20:	bfcc      	ite	gt
 8005e22:	464d      	movgt	r5, r9
 8005e24:	2501      	movle	r5, #1
 8005e26:	4415      	add	r5, r2
 8005e28:	f04f 0800 	mov.w	r8, #0
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4620      	mov	r0, r4
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	f000 fa70 	bl	8006318 <__lshift>
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4683      	mov	fp, r0
 8005e3c:	f000 fad8 	bl	80063f0 <__mcmp>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	dcb2      	bgt.n	8005daa <_dtoa_r+0xac2>
 8005e44:	d102      	bne.n	8005e4c <_dtoa_r+0xb64>
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	07db      	lsls	r3, r3, #31
 8005e4a:	d4ae      	bmi.n	8005daa <_dtoa_r+0xac2>
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e54:	2a30      	cmp	r2, #48	; 0x30
 8005e56:	d0fa      	beq.n	8005e4e <_dtoa_r+0xb66>
 8005e58:	e6f7      	b.n	8005c4a <_dtoa_r+0x962>
 8005e5a:	9a00      	ldr	r2, [sp, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d1a5      	bne.n	8005dac <_dtoa_r+0xac4>
 8005e60:	f10a 0a01 	add.w	sl, sl, #1
 8005e64:	2331      	movs	r3, #49	; 0x31
 8005e66:	e779      	b.n	8005d5c <_dtoa_r+0xa74>
 8005e68:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <_dtoa_r+0xbd0>)
 8005e6a:	f7ff baaf 	b.w	80053cc <_dtoa_r+0xe4>
 8005e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f47f aa86 	bne.w	8005382 <_dtoa_r+0x9a>
 8005e76:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <_dtoa_r+0xbd4>)
 8005e78:	f7ff baa8 	b.w	80053cc <_dtoa_r+0xe4>
 8005e7c:	f1b9 0f00 	cmp.w	r9, #0
 8005e80:	dc03      	bgt.n	8005e8a <_dtoa_r+0xba2>
 8005e82:	9b05      	ldr	r3, [sp, #20]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	f73f aec9 	bgt.w	8005c1c <_dtoa_r+0x934>
 8005e8a:	9d00      	ldr	r5, [sp, #0]
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4658      	mov	r0, fp
 8005e90:	f7ff f99e 	bl	80051d0 <quorem>
 8005e94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e98:	f805 3b01 	strb.w	r3, [r5], #1
 8005e9c:	9a00      	ldr	r2, [sp, #0]
 8005e9e:	1aaa      	subs	r2, r5, r2
 8005ea0:	4591      	cmp	r9, r2
 8005ea2:	ddba      	ble.n	8005e1a <_dtoa_r+0xb32>
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	220a      	movs	r2, #10
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 f884 	bl	8005fb8 <__multadd>
 8005eb0:	4683      	mov	fp, r0
 8005eb2:	e7eb      	b.n	8005e8c <_dtoa_r+0xba4>
 8005eb4:	08007713 	.word	0x08007713
 8005eb8:	0800766c 	.word	0x0800766c
 8005ebc:	08007690 	.word	0x08007690

08005ec0 <_localeconv_r>:
 8005ec0:	4800      	ldr	r0, [pc, #0]	; (8005ec4 <_localeconv_r+0x4>)
 8005ec2:	4770      	bx	lr
 8005ec4:	20000194 	.word	0x20000194

08005ec8 <malloc>:
 8005ec8:	4b02      	ldr	r3, [pc, #8]	; (8005ed4 <malloc+0xc>)
 8005eca:	4601      	mov	r1, r0
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	f000 bbef 	b.w	80066b0 <_malloc_r>
 8005ed2:	bf00      	nop
 8005ed4:	20000040 	.word	0x20000040

08005ed8 <memcpy>:
 8005ed8:	440a      	add	r2, r1
 8005eda:	4291      	cmp	r1, r2
 8005edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ee0:	d100      	bne.n	8005ee4 <memcpy+0xc>
 8005ee2:	4770      	bx	lr
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eee:	4291      	cmp	r1, r2
 8005ef0:	d1f9      	bne.n	8005ee6 <memcpy+0xe>
 8005ef2:	bd10      	pop	{r4, pc}

08005ef4 <_Balloc>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ef8:	4604      	mov	r4, r0
 8005efa:	460d      	mov	r5, r1
 8005efc:	b976      	cbnz	r6, 8005f1c <_Balloc+0x28>
 8005efe:	2010      	movs	r0, #16
 8005f00:	f7ff ffe2 	bl	8005ec8 <malloc>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6260      	str	r0, [r4, #36]	; 0x24
 8005f08:	b920      	cbnz	r0, 8005f14 <_Balloc+0x20>
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <_Balloc+0x78>)
 8005f0c:	4818      	ldr	r0, [pc, #96]	; (8005f70 <_Balloc+0x7c>)
 8005f0e:	2166      	movs	r1, #102	; 0x66
 8005f10:	f000 fd94 	bl	8006a3c <__assert_func>
 8005f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f18:	6006      	str	r6, [r0, #0]
 8005f1a:	60c6      	str	r6, [r0, #12]
 8005f1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f1e:	68f3      	ldr	r3, [r6, #12]
 8005f20:	b183      	cbz	r3, 8005f44 <_Balloc+0x50>
 8005f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f2a:	b9b8      	cbnz	r0, 8005f5c <_Balloc+0x68>
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f32:	1d72      	adds	r2, r6, #5
 8005f34:	0092      	lsls	r2, r2, #2
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fb5a 	bl	80065f0 <_calloc_r>
 8005f3c:	b160      	cbz	r0, 8005f58 <_Balloc+0x64>
 8005f3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f42:	e00e      	b.n	8005f62 <_Balloc+0x6e>
 8005f44:	2221      	movs	r2, #33	; 0x21
 8005f46:	2104      	movs	r1, #4
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fb51 	bl	80065f0 <_calloc_r>
 8005f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f50:	60f0      	str	r0, [r6, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e4      	bne.n	8005f22 <_Balloc+0x2e>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	6802      	ldr	r2, [r0, #0]
 8005f5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f62:	2300      	movs	r3, #0
 8005f64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f68:	e7f7      	b.n	8005f5a <_Balloc+0x66>
 8005f6a:	bf00      	nop
 8005f6c:	0800769d 	.word	0x0800769d
 8005f70:	08007724 	.word	0x08007724

08005f74 <_Bfree>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f78:	4605      	mov	r5, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	b976      	cbnz	r6, 8005f9c <_Bfree+0x28>
 8005f7e:	2010      	movs	r0, #16
 8005f80:	f7ff ffa2 	bl	8005ec8 <malloc>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6268      	str	r0, [r5, #36]	; 0x24
 8005f88:	b920      	cbnz	r0, 8005f94 <_Bfree+0x20>
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <_Bfree+0x3c>)
 8005f8c:	4809      	ldr	r0, [pc, #36]	; (8005fb4 <_Bfree+0x40>)
 8005f8e:	218a      	movs	r1, #138	; 0x8a
 8005f90:	f000 fd54 	bl	8006a3c <__assert_func>
 8005f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f98:	6006      	str	r6, [r0, #0]
 8005f9a:	60c6      	str	r6, [r0, #12]
 8005f9c:	b13c      	cbz	r4, 8005fae <_Bfree+0x3a>
 8005f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fa0:	6862      	ldr	r2, [r4, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fa8:	6021      	str	r1, [r4, #0]
 8005faa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	0800769d 	.word	0x0800769d
 8005fb4:	08007724 	.word	0x08007724

08005fb8 <__multadd>:
 8005fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbc:	690e      	ldr	r6, [r1, #16]
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	4698      	mov	r8, r3
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	f101 0014 	add.w	r0, r1, #20
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6805      	ldr	r5, [r0, #0]
 8005fcc:	b2a9      	uxth	r1, r5
 8005fce:	fb02 8101 	mla	r1, r2, r1, r8
 8005fd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005fd6:	0c2d      	lsrs	r5, r5, #16
 8005fd8:	fb02 c505 	mla	r5, r2, r5, ip
 8005fdc:	b289      	uxth	r1, r1
 8005fde:	3301      	adds	r3, #1
 8005fe0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005fe4:	429e      	cmp	r6, r3
 8005fe6:	f840 1b04 	str.w	r1, [r0], #4
 8005fea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005fee:	dcec      	bgt.n	8005fca <__multadd+0x12>
 8005ff0:	f1b8 0f00 	cmp.w	r8, #0
 8005ff4:	d022      	beq.n	800603c <__multadd+0x84>
 8005ff6:	68a3      	ldr	r3, [r4, #8]
 8005ff8:	42b3      	cmp	r3, r6
 8005ffa:	dc19      	bgt.n	8006030 <__multadd+0x78>
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	4638      	mov	r0, r7
 8006000:	3101      	adds	r1, #1
 8006002:	f7ff ff77 	bl	8005ef4 <_Balloc>
 8006006:	4605      	mov	r5, r0
 8006008:	b928      	cbnz	r0, 8006016 <__multadd+0x5e>
 800600a:	4602      	mov	r2, r0
 800600c:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <__multadd+0x8c>)
 800600e:	480e      	ldr	r0, [pc, #56]	; (8006048 <__multadd+0x90>)
 8006010:	21b5      	movs	r1, #181	; 0xb5
 8006012:	f000 fd13 	bl	8006a3c <__assert_func>
 8006016:	6922      	ldr	r2, [r4, #16]
 8006018:	3202      	adds	r2, #2
 800601a:	f104 010c 	add.w	r1, r4, #12
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	300c      	adds	r0, #12
 8006022:	f7ff ff59 	bl	8005ed8 <memcpy>
 8006026:	4621      	mov	r1, r4
 8006028:	4638      	mov	r0, r7
 800602a:	f7ff ffa3 	bl	8005f74 <_Bfree>
 800602e:	462c      	mov	r4, r5
 8006030:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006034:	3601      	adds	r6, #1
 8006036:	f8c3 8014 	str.w	r8, [r3, #20]
 800603a:	6126      	str	r6, [r4, #16]
 800603c:	4620      	mov	r0, r4
 800603e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006042:	bf00      	nop
 8006044:	08007713 	.word	0x08007713
 8006048:	08007724 	.word	0x08007724

0800604c <__hi0bits>:
 800604c:	0c03      	lsrs	r3, r0, #16
 800604e:	041b      	lsls	r3, r3, #16
 8006050:	b9d3      	cbnz	r3, 8006088 <__hi0bits+0x3c>
 8006052:	0400      	lsls	r0, r0, #16
 8006054:	2310      	movs	r3, #16
 8006056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800605a:	bf04      	itt	eq
 800605c:	0200      	lsleq	r0, r0, #8
 800605e:	3308      	addeq	r3, #8
 8006060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006064:	bf04      	itt	eq
 8006066:	0100      	lsleq	r0, r0, #4
 8006068:	3304      	addeq	r3, #4
 800606a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800606e:	bf04      	itt	eq
 8006070:	0080      	lsleq	r0, r0, #2
 8006072:	3302      	addeq	r3, #2
 8006074:	2800      	cmp	r0, #0
 8006076:	db05      	blt.n	8006084 <__hi0bits+0x38>
 8006078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800607c:	f103 0301 	add.w	r3, r3, #1
 8006080:	bf08      	it	eq
 8006082:	2320      	moveq	r3, #32
 8006084:	4618      	mov	r0, r3
 8006086:	4770      	bx	lr
 8006088:	2300      	movs	r3, #0
 800608a:	e7e4      	b.n	8006056 <__hi0bits+0xa>

0800608c <__lo0bits>:
 800608c:	6803      	ldr	r3, [r0, #0]
 800608e:	f013 0207 	ands.w	r2, r3, #7
 8006092:	4601      	mov	r1, r0
 8006094:	d00b      	beq.n	80060ae <__lo0bits+0x22>
 8006096:	07da      	lsls	r2, r3, #31
 8006098:	d424      	bmi.n	80060e4 <__lo0bits+0x58>
 800609a:	0798      	lsls	r0, r3, #30
 800609c:	bf49      	itett	mi
 800609e:	085b      	lsrmi	r3, r3, #1
 80060a0:	089b      	lsrpl	r3, r3, #2
 80060a2:	2001      	movmi	r0, #1
 80060a4:	600b      	strmi	r3, [r1, #0]
 80060a6:	bf5c      	itt	pl
 80060a8:	600b      	strpl	r3, [r1, #0]
 80060aa:	2002      	movpl	r0, #2
 80060ac:	4770      	bx	lr
 80060ae:	b298      	uxth	r0, r3
 80060b0:	b9b0      	cbnz	r0, 80060e0 <__lo0bits+0x54>
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	2010      	movs	r0, #16
 80060b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060ba:	bf04      	itt	eq
 80060bc:	0a1b      	lsreq	r3, r3, #8
 80060be:	3008      	addeq	r0, #8
 80060c0:	071a      	lsls	r2, r3, #28
 80060c2:	bf04      	itt	eq
 80060c4:	091b      	lsreq	r3, r3, #4
 80060c6:	3004      	addeq	r0, #4
 80060c8:	079a      	lsls	r2, r3, #30
 80060ca:	bf04      	itt	eq
 80060cc:	089b      	lsreq	r3, r3, #2
 80060ce:	3002      	addeq	r0, #2
 80060d0:	07da      	lsls	r2, r3, #31
 80060d2:	d403      	bmi.n	80060dc <__lo0bits+0x50>
 80060d4:	085b      	lsrs	r3, r3, #1
 80060d6:	f100 0001 	add.w	r0, r0, #1
 80060da:	d005      	beq.n	80060e8 <__lo0bits+0x5c>
 80060dc:	600b      	str	r3, [r1, #0]
 80060de:	4770      	bx	lr
 80060e0:	4610      	mov	r0, r2
 80060e2:	e7e8      	b.n	80060b6 <__lo0bits+0x2a>
 80060e4:	2000      	movs	r0, #0
 80060e6:	4770      	bx	lr
 80060e8:	2020      	movs	r0, #32
 80060ea:	4770      	bx	lr

080060ec <__i2b>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	2101      	movs	r1, #1
 80060f2:	f7ff feff 	bl	8005ef4 <_Balloc>
 80060f6:	4602      	mov	r2, r0
 80060f8:	b928      	cbnz	r0, 8006106 <__i2b+0x1a>
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <__i2b+0x24>)
 80060fc:	4805      	ldr	r0, [pc, #20]	; (8006114 <__i2b+0x28>)
 80060fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006102:	f000 fc9b 	bl	8006a3c <__assert_func>
 8006106:	2301      	movs	r3, #1
 8006108:	6144      	str	r4, [r0, #20]
 800610a:	6103      	str	r3, [r0, #16]
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	08007713 	.word	0x08007713
 8006114:	08007724 	.word	0x08007724

08006118 <__multiply>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	4614      	mov	r4, r2
 800611e:	690a      	ldr	r2, [r1, #16]
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	bfb8      	it	lt
 8006126:	460b      	movlt	r3, r1
 8006128:	460d      	mov	r5, r1
 800612a:	bfbc      	itt	lt
 800612c:	4625      	movlt	r5, r4
 800612e:	461c      	movlt	r4, r3
 8006130:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006134:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006138:	68ab      	ldr	r3, [r5, #8]
 800613a:	6869      	ldr	r1, [r5, #4]
 800613c:	eb0a 0709 	add.w	r7, sl, r9
 8006140:	42bb      	cmp	r3, r7
 8006142:	b085      	sub	sp, #20
 8006144:	bfb8      	it	lt
 8006146:	3101      	addlt	r1, #1
 8006148:	f7ff fed4 	bl	8005ef4 <_Balloc>
 800614c:	b930      	cbnz	r0, 800615c <__multiply+0x44>
 800614e:	4602      	mov	r2, r0
 8006150:	4b42      	ldr	r3, [pc, #264]	; (800625c <__multiply+0x144>)
 8006152:	4843      	ldr	r0, [pc, #268]	; (8006260 <__multiply+0x148>)
 8006154:	f240 115d 	movw	r1, #349	; 0x15d
 8006158:	f000 fc70 	bl	8006a3c <__assert_func>
 800615c:	f100 0614 	add.w	r6, r0, #20
 8006160:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006164:	4633      	mov	r3, r6
 8006166:	2200      	movs	r2, #0
 8006168:	4543      	cmp	r3, r8
 800616a:	d31e      	bcc.n	80061aa <__multiply+0x92>
 800616c:	f105 0c14 	add.w	ip, r5, #20
 8006170:	f104 0314 	add.w	r3, r4, #20
 8006174:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006178:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800617c:	9202      	str	r2, [sp, #8]
 800617e:	ebac 0205 	sub.w	r2, ip, r5
 8006182:	3a15      	subs	r2, #21
 8006184:	f022 0203 	bic.w	r2, r2, #3
 8006188:	3204      	adds	r2, #4
 800618a:	f105 0115 	add.w	r1, r5, #21
 800618e:	458c      	cmp	ip, r1
 8006190:	bf38      	it	cc
 8006192:	2204      	movcc	r2, #4
 8006194:	9201      	str	r2, [sp, #4]
 8006196:	9a02      	ldr	r2, [sp, #8]
 8006198:	9303      	str	r3, [sp, #12]
 800619a:	429a      	cmp	r2, r3
 800619c:	d808      	bhi.n	80061b0 <__multiply+0x98>
 800619e:	2f00      	cmp	r7, #0
 80061a0:	dc55      	bgt.n	800624e <__multiply+0x136>
 80061a2:	6107      	str	r7, [r0, #16]
 80061a4:	b005      	add	sp, #20
 80061a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	f843 2b04 	str.w	r2, [r3], #4
 80061ae:	e7db      	b.n	8006168 <__multiply+0x50>
 80061b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80061b4:	f1ba 0f00 	cmp.w	sl, #0
 80061b8:	d020      	beq.n	80061fc <__multiply+0xe4>
 80061ba:	f105 0e14 	add.w	lr, r5, #20
 80061be:	46b1      	mov	r9, r6
 80061c0:	2200      	movs	r2, #0
 80061c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80061c6:	f8d9 b000 	ldr.w	fp, [r9]
 80061ca:	b2a1      	uxth	r1, r4
 80061cc:	fa1f fb8b 	uxth.w	fp, fp
 80061d0:	fb0a b101 	mla	r1, sl, r1, fp
 80061d4:	4411      	add	r1, r2
 80061d6:	f8d9 2000 	ldr.w	r2, [r9]
 80061da:	0c24      	lsrs	r4, r4, #16
 80061dc:	0c12      	lsrs	r2, r2, #16
 80061de:	fb0a 2404 	mla	r4, sl, r4, r2
 80061e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80061e6:	b289      	uxth	r1, r1
 80061e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80061ec:	45f4      	cmp	ip, lr
 80061ee:	f849 1b04 	str.w	r1, [r9], #4
 80061f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80061f6:	d8e4      	bhi.n	80061c2 <__multiply+0xaa>
 80061f8:	9901      	ldr	r1, [sp, #4]
 80061fa:	5072      	str	r2, [r6, r1]
 80061fc:	9a03      	ldr	r2, [sp, #12]
 80061fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006202:	3304      	adds	r3, #4
 8006204:	f1b9 0f00 	cmp.w	r9, #0
 8006208:	d01f      	beq.n	800624a <__multiply+0x132>
 800620a:	6834      	ldr	r4, [r6, #0]
 800620c:	f105 0114 	add.w	r1, r5, #20
 8006210:	46b6      	mov	lr, r6
 8006212:	f04f 0a00 	mov.w	sl, #0
 8006216:	880a      	ldrh	r2, [r1, #0]
 8006218:	f8be b002 	ldrh.w	fp, [lr, #2]
 800621c:	fb09 b202 	mla	r2, r9, r2, fp
 8006220:	4492      	add	sl, r2
 8006222:	b2a4      	uxth	r4, r4
 8006224:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006228:	f84e 4b04 	str.w	r4, [lr], #4
 800622c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006230:	f8be 2000 	ldrh.w	r2, [lr]
 8006234:	0c24      	lsrs	r4, r4, #16
 8006236:	fb09 2404 	mla	r4, r9, r4, r2
 800623a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800623e:	458c      	cmp	ip, r1
 8006240:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006244:	d8e7      	bhi.n	8006216 <__multiply+0xfe>
 8006246:	9a01      	ldr	r2, [sp, #4]
 8006248:	50b4      	str	r4, [r6, r2]
 800624a:	3604      	adds	r6, #4
 800624c:	e7a3      	b.n	8006196 <__multiply+0x7e>
 800624e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1a5      	bne.n	80061a2 <__multiply+0x8a>
 8006256:	3f01      	subs	r7, #1
 8006258:	e7a1      	b.n	800619e <__multiply+0x86>
 800625a:	bf00      	nop
 800625c:	08007713 	.word	0x08007713
 8006260:	08007724 	.word	0x08007724

08006264 <__pow5mult>:
 8006264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006268:	4615      	mov	r5, r2
 800626a:	f012 0203 	ands.w	r2, r2, #3
 800626e:	4606      	mov	r6, r0
 8006270:	460f      	mov	r7, r1
 8006272:	d007      	beq.n	8006284 <__pow5mult+0x20>
 8006274:	4c25      	ldr	r4, [pc, #148]	; (800630c <__pow5mult+0xa8>)
 8006276:	3a01      	subs	r2, #1
 8006278:	2300      	movs	r3, #0
 800627a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800627e:	f7ff fe9b 	bl	8005fb8 <__multadd>
 8006282:	4607      	mov	r7, r0
 8006284:	10ad      	asrs	r5, r5, #2
 8006286:	d03d      	beq.n	8006304 <__pow5mult+0xa0>
 8006288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800628a:	b97c      	cbnz	r4, 80062ac <__pow5mult+0x48>
 800628c:	2010      	movs	r0, #16
 800628e:	f7ff fe1b 	bl	8005ec8 <malloc>
 8006292:	4602      	mov	r2, r0
 8006294:	6270      	str	r0, [r6, #36]	; 0x24
 8006296:	b928      	cbnz	r0, 80062a4 <__pow5mult+0x40>
 8006298:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <__pow5mult+0xac>)
 800629a:	481e      	ldr	r0, [pc, #120]	; (8006314 <__pow5mult+0xb0>)
 800629c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80062a0:	f000 fbcc 	bl	8006a3c <__assert_func>
 80062a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062a8:	6004      	str	r4, [r0, #0]
 80062aa:	60c4      	str	r4, [r0, #12]
 80062ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062b4:	b94c      	cbnz	r4, 80062ca <__pow5mult+0x66>
 80062b6:	f240 2171 	movw	r1, #625	; 0x271
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff ff16 	bl	80060ec <__i2b>
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80062c6:	4604      	mov	r4, r0
 80062c8:	6003      	str	r3, [r0, #0]
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	07eb      	lsls	r3, r5, #31
 80062d0:	d50a      	bpl.n	80062e8 <__pow5mult+0x84>
 80062d2:	4639      	mov	r1, r7
 80062d4:	4622      	mov	r2, r4
 80062d6:	4630      	mov	r0, r6
 80062d8:	f7ff ff1e 	bl	8006118 <__multiply>
 80062dc:	4639      	mov	r1, r7
 80062de:	4680      	mov	r8, r0
 80062e0:	4630      	mov	r0, r6
 80062e2:	f7ff fe47 	bl	8005f74 <_Bfree>
 80062e6:	4647      	mov	r7, r8
 80062e8:	106d      	asrs	r5, r5, #1
 80062ea:	d00b      	beq.n	8006304 <__pow5mult+0xa0>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	b938      	cbnz	r0, 8006300 <__pow5mult+0x9c>
 80062f0:	4622      	mov	r2, r4
 80062f2:	4621      	mov	r1, r4
 80062f4:	4630      	mov	r0, r6
 80062f6:	f7ff ff0f 	bl	8006118 <__multiply>
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	f8c0 9000 	str.w	r9, [r0]
 8006300:	4604      	mov	r4, r0
 8006302:	e7e4      	b.n	80062ce <__pow5mult+0x6a>
 8006304:	4638      	mov	r0, r7
 8006306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630a:	bf00      	nop
 800630c:	08007878 	.word	0x08007878
 8006310:	0800769d 	.word	0x0800769d
 8006314:	08007724 	.word	0x08007724

08006318 <__lshift>:
 8006318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	460c      	mov	r4, r1
 800631e:	6849      	ldr	r1, [r1, #4]
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	4607      	mov	r7, r0
 800632a:	4691      	mov	r9, r2
 800632c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006330:	f108 0601 	add.w	r6, r8, #1
 8006334:	42b3      	cmp	r3, r6
 8006336:	db0b      	blt.n	8006350 <__lshift+0x38>
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff fddb 	bl	8005ef4 <_Balloc>
 800633e:	4605      	mov	r5, r0
 8006340:	b948      	cbnz	r0, 8006356 <__lshift+0x3e>
 8006342:	4602      	mov	r2, r0
 8006344:	4b28      	ldr	r3, [pc, #160]	; (80063e8 <__lshift+0xd0>)
 8006346:	4829      	ldr	r0, [pc, #164]	; (80063ec <__lshift+0xd4>)
 8006348:	f240 11d9 	movw	r1, #473	; 0x1d9
 800634c:	f000 fb76 	bl	8006a3c <__assert_func>
 8006350:	3101      	adds	r1, #1
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	e7ee      	b.n	8006334 <__lshift+0x1c>
 8006356:	2300      	movs	r3, #0
 8006358:	f100 0114 	add.w	r1, r0, #20
 800635c:	f100 0210 	add.w	r2, r0, #16
 8006360:	4618      	mov	r0, r3
 8006362:	4553      	cmp	r3, sl
 8006364:	db33      	blt.n	80063ce <__lshift+0xb6>
 8006366:	6920      	ldr	r0, [r4, #16]
 8006368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800636c:	f104 0314 	add.w	r3, r4, #20
 8006370:	f019 091f 	ands.w	r9, r9, #31
 8006374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800637c:	d02b      	beq.n	80063d6 <__lshift+0xbe>
 800637e:	f1c9 0e20 	rsb	lr, r9, #32
 8006382:	468a      	mov	sl, r1
 8006384:	2200      	movs	r2, #0
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	fa00 f009 	lsl.w	r0, r0, r9
 800638c:	4302      	orrs	r2, r0
 800638e:	f84a 2b04 	str.w	r2, [sl], #4
 8006392:	f853 2b04 	ldr.w	r2, [r3], #4
 8006396:	459c      	cmp	ip, r3
 8006398:	fa22 f20e 	lsr.w	r2, r2, lr
 800639c:	d8f3      	bhi.n	8006386 <__lshift+0x6e>
 800639e:	ebac 0304 	sub.w	r3, ip, r4
 80063a2:	3b15      	subs	r3, #21
 80063a4:	f023 0303 	bic.w	r3, r3, #3
 80063a8:	3304      	adds	r3, #4
 80063aa:	f104 0015 	add.w	r0, r4, #21
 80063ae:	4584      	cmp	ip, r0
 80063b0:	bf38      	it	cc
 80063b2:	2304      	movcc	r3, #4
 80063b4:	50ca      	str	r2, [r1, r3]
 80063b6:	b10a      	cbz	r2, 80063bc <__lshift+0xa4>
 80063b8:	f108 0602 	add.w	r6, r8, #2
 80063bc:	3e01      	subs	r6, #1
 80063be:	4638      	mov	r0, r7
 80063c0:	612e      	str	r6, [r5, #16]
 80063c2:	4621      	mov	r1, r4
 80063c4:	f7ff fdd6 	bl	8005f74 <_Bfree>
 80063c8:	4628      	mov	r0, r5
 80063ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80063d2:	3301      	adds	r3, #1
 80063d4:	e7c5      	b.n	8006362 <__lshift+0x4a>
 80063d6:	3904      	subs	r1, #4
 80063d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80063e0:	459c      	cmp	ip, r3
 80063e2:	d8f9      	bhi.n	80063d8 <__lshift+0xc0>
 80063e4:	e7ea      	b.n	80063bc <__lshift+0xa4>
 80063e6:	bf00      	nop
 80063e8:	08007713 	.word	0x08007713
 80063ec:	08007724 	.word	0x08007724

080063f0 <__mcmp>:
 80063f0:	b530      	push	{r4, r5, lr}
 80063f2:	6902      	ldr	r2, [r0, #16]
 80063f4:	690c      	ldr	r4, [r1, #16]
 80063f6:	1b12      	subs	r2, r2, r4
 80063f8:	d10e      	bne.n	8006418 <__mcmp+0x28>
 80063fa:	f100 0314 	add.w	r3, r0, #20
 80063fe:	3114      	adds	r1, #20
 8006400:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006404:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006408:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800640c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006410:	42a5      	cmp	r5, r4
 8006412:	d003      	beq.n	800641c <__mcmp+0x2c>
 8006414:	d305      	bcc.n	8006422 <__mcmp+0x32>
 8006416:	2201      	movs	r2, #1
 8006418:	4610      	mov	r0, r2
 800641a:	bd30      	pop	{r4, r5, pc}
 800641c:	4283      	cmp	r3, r0
 800641e:	d3f3      	bcc.n	8006408 <__mcmp+0x18>
 8006420:	e7fa      	b.n	8006418 <__mcmp+0x28>
 8006422:	f04f 32ff 	mov.w	r2, #4294967295
 8006426:	e7f7      	b.n	8006418 <__mcmp+0x28>

08006428 <__mdiff>:
 8006428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	460c      	mov	r4, r1
 800642e:	4606      	mov	r6, r0
 8006430:	4611      	mov	r1, r2
 8006432:	4620      	mov	r0, r4
 8006434:	4617      	mov	r7, r2
 8006436:	f7ff ffdb 	bl	80063f0 <__mcmp>
 800643a:	1e05      	subs	r5, r0, #0
 800643c:	d110      	bne.n	8006460 <__mdiff+0x38>
 800643e:	4629      	mov	r1, r5
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff fd57 	bl	8005ef4 <_Balloc>
 8006446:	b930      	cbnz	r0, 8006456 <__mdiff+0x2e>
 8006448:	4b39      	ldr	r3, [pc, #228]	; (8006530 <__mdiff+0x108>)
 800644a:	4602      	mov	r2, r0
 800644c:	f240 2132 	movw	r1, #562	; 0x232
 8006450:	4838      	ldr	r0, [pc, #224]	; (8006534 <__mdiff+0x10c>)
 8006452:	f000 faf3 	bl	8006a3c <__assert_func>
 8006456:	2301      	movs	r3, #1
 8006458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800645c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006460:	bfa4      	itt	ge
 8006462:	463b      	movge	r3, r7
 8006464:	4627      	movge	r7, r4
 8006466:	4630      	mov	r0, r6
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	bfa6      	itte	ge
 800646c:	461c      	movge	r4, r3
 800646e:	2500      	movge	r5, #0
 8006470:	2501      	movlt	r5, #1
 8006472:	f7ff fd3f 	bl	8005ef4 <_Balloc>
 8006476:	b920      	cbnz	r0, 8006482 <__mdiff+0x5a>
 8006478:	4b2d      	ldr	r3, [pc, #180]	; (8006530 <__mdiff+0x108>)
 800647a:	4602      	mov	r2, r0
 800647c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006480:	e7e6      	b.n	8006450 <__mdiff+0x28>
 8006482:	693e      	ldr	r6, [r7, #16]
 8006484:	60c5      	str	r5, [r0, #12]
 8006486:	6925      	ldr	r5, [r4, #16]
 8006488:	f107 0114 	add.w	r1, r7, #20
 800648c:	f104 0914 	add.w	r9, r4, #20
 8006490:	f100 0e14 	add.w	lr, r0, #20
 8006494:	f107 0210 	add.w	r2, r7, #16
 8006498:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800649c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80064a0:	46f2      	mov	sl, lr
 80064a2:	2700      	movs	r7, #0
 80064a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80064a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80064ac:	fa1f f883 	uxth.w	r8, r3
 80064b0:	fa17 f78b 	uxtah	r7, r7, fp
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	eba7 0808 	sub.w	r8, r7, r8
 80064ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80064c2:	fa1f f888 	uxth.w	r8, r8
 80064c6:	141f      	asrs	r7, r3, #16
 80064c8:	454d      	cmp	r5, r9
 80064ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80064ce:	f84a 3b04 	str.w	r3, [sl], #4
 80064d2:	d8e7      	bhi.n	80064a4 <__mdiff+0x7c>
 80064d4:	1b2b      	subs	r3, r5, r4
 80064d6:	3b15      	subs	r3, #21
 80064d8:	f023 0303 	bic.w	r3, r3, #3
 80064dc:	3304      	adds	r3, #4
 80064de:	3415      	adds	r4, #21
 80064e0:	42a5      	cmp	r5, r4
 80064e2:	bf38      	it	cc
 80064e4:	2304      	movcc	r3, #4
 80064e6:	4419      	add	r1, r3
 80064e8:	4473      	add	r3, lr
 80064ea:	469e      	mov	lr, r3
 80064ec:	460d      	mov	r5, r1
 80064ee:	4565      	cmp	r5, ip
 80064f0:	d30e      	bcc.n	8006510 <__mdiff+0xe8>
 80064f2:	f10c 0203 	add.w	r2, ip, #3
 80064f6:	1a52      	subs	r2, r2, r1
 80064f8:	f022 0203 	bic.w	r2, r2, #3
 80064fc:	3903      	subs	r1, #3
 80064fe:	458c      	cmp	ip, r1
 8006500:	bf38      	it	cc
 8006502:	2200      	movcc	r2, #0
 8006504:	441a      	add	r2, r3
 8006506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800650a:	b17b      	cbz	r3, 800652c <__mdiff+0x104>
 800650c:	6106      	str	r6, [r0, #16]
 800650e:	e7a5      	b.n	800645c <__mdiff+0x34>
 8006510:	f855 8b04 	ldr.w	r8, [r5], #4
 8006514:	fa17 f488 	uxtah	r4, r7, r8
 8006518:	1422      	asrs	r2, r4, #16
 800651a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800651e:	b2a4      	uxth	r4, r4
 8006520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006524:	f84e 4b04 	str.w	r4, [lr], #4
 8006528:	1417      	asrs	r7, r2, #16
 800652a:	e7e0      	b.n	80064ee <__mdiff+0xc6>
 800652c:	3e01      	subs	r6, #1
 800652e:	e7ea      	b.n	8006506 <__mdiff+0xde>
 8006530:	08007713 	.word	0x08007713
 8006534:	08007724 	.word	0x08007724

08006538 <__d2b>:
 8006538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800653c:	4689      	mov	r9, r1
 800653e:	2101      	movs	r1, #1
 8006540:	ec57 6b10 	vmov	r6, r7, d0
 8006544:	4690      	mov	r8, r2
 8006546:	f7ff fcd5 	bl	8005ef4 <_Balloc>
 800654a:	4604      	mov	r4, r0
 800654c:	b930      	cbnz	r0, 800655c <__d2b+0x24>
 800654e:	4602      	mov	r2, r0
 8006550:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <__d2b+0xb0>)
 8006552:	4826      	ldr	r0, [pc, #152]	; (80065ec <__d2b+0xb4>)
 8006554:	f240 310a 	movw	r1, #778	; 0x30a
 8006558:	f000 fa70 	bl	8006a3c <__assert_func>
 800655c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006564:	bb35      	cbnz	r5, 80065b4 <__d2b+0x7c>
 8006566:	2e00      	cmp	r6, #0
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	d028      	beq.n	80065be <__d2b+0x86>
 800656c:	4668      	mov	r0, sp
 800656e:	9600      	str	r6, [sp, #0]
 8006570:	f7ff fd8c 	bl	800608c <__lo0bits>
 8006574:	9900      	ldr	r1, [sp, #0]
 8006576:	b300      	cbz	r0, 80065ba <__d2b+0x82>
 8006578:	9a01      	ldr	r2, [sp, #4]
 800657a:	f1c0 0320 	rsb	r3, r0, #32
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	430b      	orrs	r3, r1
 8006584:	40c2      	lsrs	r2, r0
 8006586:	6163      	str	r3, [r4, #20]
 8006588:	9201      	str	r2, [sp, #4]
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	61a3      	str	r3, [r4, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	bf14      	ite	ne
 8006592:	2202      	movne	r2, #2
 8006594:	2201      	moveq	r2, #1
 8006596:	6122      	str	r2, [r4, #16]
 8006598:	b1d5      	cbz	r5, 80065d0 <__d2b+0x98>
 800659a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800659e:	4405      	add	r5, r0
 80065a0:	f8c9 5000 	str.w	r5, [r9]
 80065a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065a8:	f8c8 0000 	str.w	r0, [r8]
 80065ac:	4620      	mov	r0, r4
 80065ae:	b003      	add	sp, #12
 80065b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b8:	e7d5      	b.n	8006566 <__d2b+0x2e>
 80065ba:	6161      	str	r1, [r4, #20]
 80065bc:	e7e5      	b.n	800658a <__d2b+0x52>
 80065be:	a801      	add	r0, sp, #4
 80065c0:	f7ff fd64 	bl	800608c <__lo0bits>
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	6163      	str	r3, [r4, #20]
 80065c8:	2201      	movs	r2, #1
 80065ca:	6122      	str	r2, [r4, #16]
 80065cc:	3020      	adds	r0, #32
 80065ce:	e7e3      	b.n	8006598 <__d2b+0x60>
 80065d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065d8:	f8c9 0000 	str.w	r0, [r9]
 80065dc:	6918      	ldr	r0, [r3, #16]
 80065de:	f7ff fd35 	bl	800604c <__hi0bits>
 80065e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065e6:	e7df      	b.n	80065a8 <__d2b+0x70>
 80065e8:	08007713 	.word	0x08007713
 80065ec:	08007724 	.word	0x08007724

080065f0 <_calloc_r>:
 80065f0:	b513      	push	{r0, r1, r4, lr}
 80065f2:	434a      	muls	r2, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	9201      	str	r2, [sp, #4]
 80065f8:	f000 f85a 	bl	80066b0 <_malloc_r>
 80065fc:	4604      	mov	r4, r0
 80065fe:	b118      	cbz	r0, 8006608 <_calloc_r+0x18>
 8006600:	9a01      	ldr	r2, [sp, #4]
 8006602:	2100      	movs	r1, #0
 8006604:	f7fe f952 	bl	80048ac <memset>
 8006608:	4620      	mov	r0, r4
 800660a:	b002      	add	sp, #8
 800660c:	bd10      	pop	{r4, pc}
	...

08006610 <_free_r>:
 8006610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006612:	2900      	cmp	r1, #0
 8006614:	d048      	beq.n	80066a8 <_free_r+0x98>
 8006616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661a:	9001      	str	r0, [sp, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f1a1 0404 	sub.w	r4, r1, #4
 8006622:	bfb8      	it	lt
 8006624:	18e4      	addlt	r4, r4, r3
 8006626:	f000 fa65 	bl	8006af4 <__malloc_lock>
 800662a:	4a20      	ldr	r2, [pc, #128]	; (80066ac <_free_r+0x9c>)
 800662c:	9801      	ldr	r0, [sp, #4]
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	4615      	mov	r5, r2
 8006632:	b933      	cbnz	r3, 8006642 <_free_r+0x32>
 8006634:	6063      	str	r3, [r4, #4]
 8006636:	6014      	str	r4, [r2, #0]
 8006638:	b003      	add	sp, #12
 800663a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800663e:	f000 ba5f 	b.w	8006b00 <__malloc_unlock>
 8006642:	42a3      	cmp	r3, r4
 8006644:	d90b      	bls.n	800665e <_free_r+0x4e>
 8006646:	6821      	ldr	r1, [r4, #0]
 8006648:	1862      	adds	r2, r4, r1
 800664a:	4293      	cmp	r3, r2
 800664c:	bf04      	itt	eq
 800664e:	681a      	ldreq	r2, [r3, #0]
 8006650:	685b      	ldreq	r3, [r3, #4]
 8006652:	6063      	str	r3, [r4, #4]
 8006654:	bf04      	itt	eq
 8006656:	1852      	addeq	r2, r2, r1
 8006658:	6022      	streq	r2, [r4, #0]
 800665a:	602c      	str	r4, [r5, #0]
 800665c:	e7ec      	b.n	8006638 <_free_r+0x28>
 800665e:	461a      	mov	r2, r3
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	b10b      	cbz	r3, 8006668 <_free_r+0x58>
 8006664:	42a3      	cmp	r3, r4
 8006666:	d9fa      	bls.n	800665e <_free_r+0x4e>
 8006668:	6811      	ldr	r1, [r2, #0]
 800666a:	1855      	adds	r5, r2, r1
 800666c:	42a5      	cmp	r5, r4
 800666e:	d10b      	bne.n	8006688 <_free_r+0x78>
 8006670:	6824      	ldr	r4, [r4, #0]
 8006672:	4421      	add	r1, r4
 8006674:	1854      	adds	r4, r2, r1
 8006676:	42a3      	cmp	r3, r4
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	d1dd      	bne.n	8006638 <_free_r+0x28>
 800667c:	681c      	ldr	r4, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	6053      	str	r3, [r2, #4]
 8006682:	4421      	add	r1, r4
 8006684:	6011      	str	r1, [r2, #0]
 8006686:	e7d7      	b.n	8006638 <_free_r+0x28>
 8006688:	d902      	bls.n	8006690 <_free_r+0x80>
 800668a:	230c      	movs	r3, #12
 800668c:	6003      	str	r3, [r0, #0]
 800668e:	e7d3      	b.n	8006638 <_free_r+0x28>
 8006690:	6825      	ldr	r5, [r4, #0]
 8006692:	1961      	adds	r1, r4, r5
 8006694:	428b      	cmp	r3, r1
 8006696:	bf04      	itt	eq
 8006698:	6819      	ldreq	r1, [r3, #0]
 800669a:	685b      	ldreq	r3, [r3, #4]
 800669c:	6063      	str	r3, [r4, #4]
 800669e:	bf04      	itt	eq
 80066a0:	1949      	addeq	r1, r1, r5
 80066a2:	6021      	streq	r1, [r4, #0]
 80066a4:	6054      	str	r4, [r2, #4]
 80066a6:	e7c7      	b.n	8006638 <_free_r+0x28>
 80066a8:	b003      	add	sp, #12
 80066aa:	bd30      	pop	{r4, r5, pc}
 80066ac:	20000234 	.word	0x20000234

080066b0 <_malloc_r>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	1ccd      	adds	r5, r1, #3
 80066b4:	f025 0503 	bic.w	r5, r5, #3
 80066b8:	3508      	adds	r5, #8
 80066ba:	2d0c      	cmp	r5, #12
 80066bc:	bf38      	it	cc
 80066be:	250c      	movcc	r5, #12
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	4606      	mov	r6, r0
 80066c4:	db01      	blt.n	80066ca <_malloc_r+0x1a>
 80066c6:	42a9      	cmp	r1, r5
 80066c8:	d903      	bls.n	80066d2 <_malloc_r+0x22>
 80066ca:	230c      	movs	r3, #12
 80066cc:	6033      	str	r3, [r6, #0]
 80066ce:	2000      	movs	r0, #0
 80066d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d2:	f000 fa0f 	bl	8006af4 <__malloc_lock>
 80066d6:	4921      	ldr	r1, [pc, #132]	; (800675c <_malloc_r+0xac>)
 80066d8:	680a      	ldr	r2, [r1, #0]
 80066da:	4614      	mov	r4, r2
 80066dc:	b99c      	cbnz	r4, 8006706 <_malloc_r+0x56>
 80066de:	4f20      	ldr	r7, [pc, #128]	; (8006760 <_malloc_r+0xb0>)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	b923      	cbnz	r3, 80066ee <_malloc_r+0x3e>
 80066e4:	4621      	mov	r1, r4
 80066e6:	4630      	mov	r0, r6
 80066e8:	f000 f998 	bl	8006a1c <_sbrk_r>
 80066ec:	6038      	str	r0, [r7, #0]
 80066ee:	4629      	mov	r1, r5
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 f993 	bl	8006a1c <_sbrk_r>
 80066f6:	1c43      	adds	r3, r0, #1
 80066f8:	d123      	bne.n	8006742 <_malloc_r+0x92>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	4630      	mov	r0, r6
 8006700:	f000 f9fe 	bl	8006b00 <__malloc_unlock>
 8006704:	e7e3      	b.n	80066ce <_malloc_r+0x1e>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	1b5b      	subs	r3, r3, r5
 800670a:	d417      	bmi.n	800673c <_malloc_r+0x8c>
 800670c:	2b0b      	cmp	r3, #11
 800670e:	d903      	bls.n	8006718 <_malloc_r+0x68>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	441c      	add	r4, r3
 8006714:	6025      	str	r5, [r4, #0]
 8006716:	e004      	b.n	8006722 <_malloc_r+0x72>
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	42a2      	cmp	r2, r4
 800671c:	bf0c      	ite	eq
 800671e:	600b      	streq	r3, [r1, #0]
 8006720:	6053      	strne	r3, [r2, #4]
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f9ec 	bl	8006b00 <__malloc_unlock>
 8006728:	f104 000b 	add.w	r0, r4, #11
 800672c:	1d23      	adds	r3, r4, #4
 800672e:	f020 0007 	bic.w	r0, r0, #7
 8006732:	1ac2      	subs	r2, r0, r3
 8006734:	d0cc      	beq.n	80066d0 <_malloc_r+0x20>
 8006736:	1a1b      	subs	r3, r3, r0
 8006738:	50a3      	str	r3, [r4, r2]
 800673a:	e7c9      	b.n	80066d0 <_malloc_r+0x20>
 800673c:	4622      	mov	r2, r4
 800673e:	6864      	ldr	r4, [r4, #4]
 8006740:	e7cc      	b.n	80066dc <_malloc_r+0x2c>
 8006742:	1cc4      	adds	r4, r0, #3
 8006744:	f024 0403 	bic.w	r4, r4, #3
 8006748:	42a0      	cmp	r0, r4
 800674a:	d0e3      	beq.n	8006714 <_malloc_r+0x64>
 800674c:	1a21      	subs	r1, r4, r0
 800674e:	4630      	mov	r0, r6
 8006750:	f000 f964 	bl	8006a1c <_sbrk_r>
 8006754:	3001      	adds	r0, #1
 8006756:	d1dd      	bne.n	8006714 <_malloc_r+0x64>
 8006758:	e7cf      	b.n	80066fa <_malloc_r+0x4a>
 800675a:	bf00      	nop
 800675c:	20000234 	.word	0x20000234
 8006760:	20000238 	.word	0x20000238

08006764 <__ssputs_r>:
 8006764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006768:	688e      	ldr	r6, [r1, #8]
 800676a:	429e      	cmp	r6, r3
 800676c:	4682      	mov	sl, r0
 800676e:	460c      	mov	r4, r1
 8006770:	4690      	mov	r8, r2
 8006772:	461f      	mov	r7, r3
 8006774:	d838      	bhi.n	80067e8 <__ssputs_r+0x84>
 8006776:	898a      	ldrh	r2, [r1, #12]
 8006778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800677c:	d032      	beq.n	80067e4 <__ssputs_r+0x80>
 800677e:	6825      	ldr	r5, [r4, #0]
 8006780:	6909      	ldr	r1, [r1, #16]
 8006782:	eba5 0901 	sub.w	r9, r5, r1
 8006786:	6965      	ldr	r5, [r4, #20]
 8006788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800678c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006790:	3301      	adds	r3, #1
 8006792:	444b      	add	r3, r9
 8006794:	106d      	asrs	r5, r5, #1
 8006796:	429d      	cmp	r5, r3
 8006798:	bf38      	it	cc
 800679a:	461d      	movcc	r5, r3
 800679c:	0553      	lsls	r3, r2, #21
 800679e:	d531      	bpl.n	8006804 <__ssputs_r+0xa0>
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7ff ff85 	bl	80066b0 <_malloc_r>
 80067a6:	4606      	mov	r6, r0
 80067a8:	b950      	cbnz	r0, 80067c0 <__ssputs_r+0x5c>
 80067aa:	230c      	movs	r3, #12
 80067ac:	f8ca 3000 	str.w	r3, [sl]
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	6921      	ldr	r1, [r4, #16]
 80067c2:	464a      	mov	r2, r9
 80067c4:	f7ff fb88 	bl	8005ed8 <memcpy>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	6126      	str	r6, [r4, #16]
 80067d6:	6165      	str	r5, [r4, #20]
 80067d8:	444e      	add	r6, r9
 80067da:	eba5 0509 	sub.w	r5, r5, r9
 80067de:	6026      	str	r6, [r4, #0]
 80067e0:	60a5      	str	r5, [r4, #8]
 80067e2:	463e      	mov	r6, r7
 80067e4:	42be      	cmp	r6, r7
 80067e6:	d900      	bls.n	80067ea <__ssputs_r+0x86>
 80067e8:	463e      	mov	r6, r7
 80067ea:	4632      	mov	r2, r6
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	4641      	mov	r1, r8
 80067f0:	f000 f966 	bl	8006ac0 <memmove>
 80067f4:	68a3      	ldr	r3, [r4, #8]
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	1b9b      	subs	r3, r3, r6
 80067fa:	4432      	add	r2, r6
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	2000      	movs	r0, #0
 8006802:	e7db      	b.n	80067bc <__ssputs_r+0x58>
 8006804:	462a      	mov	r2, r5
 8006806:	f000 f981 	bl	8006b0c <_realloc_r>
 800680a:	4606      	mov	r6, r0
 800680c:	2800      	cmp	r0, #0
 800680e:	d1e1      	bne.n	80067d4 <__ssputs_r+0x70>
 8006810:	6921      	ldr	r1, [r4, #16]
 8006812:	4650      	mov	r0, sl
 8006814:	f7ff fefc 	bl	8006610 <_free_r>
 8006818:	e7c7      	b.n	80067aa <__ssputs_r+0x46>
	...

0800681c <_svfiprintf_r>:
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	4698      	mov	r8, r3
 8006822:	898b      	ldrh	r3, [r1, #12]
 8006824:	061b      	lsls	r3, r3, #24
 8006826:	b09d      	sub	sp, #116	; 0x74
 8006828:	4607      	mov	r7, r0
 800682a:	460d      	mov	r5, r1
 800682c:	4614      	mov	r4, r2
 800682e:	d50e      	bpl.n	800684e <_svfiprintf_r+0x32>
 8006830:	690b      	ldr	r3, [r1, #16]
 8006832:	b963      	cbnz	r3, 800684e <_svfiprintf_r+0x32>
 8006834:	2140      	movs	r1, #64	; 0x40
 8006836:	f7ff ff3b 	bl	80066b0 <_malloc_r>
 800683a:	6028      	str	r0, [r5, #0]
 800683c:	6128      	str	r0, [r5, #16]
 800683e:	b920      	cbnz	r0, 800684a <_svfiprintf_r+0x2e>
 8006840:	230c      	movs	r3, #12
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	e0d1      	b.n	80069ee <_svfiprintf_r+0x1d2>
 800684a:	2340      	movs	r3, #64	; 0x40
 800684c:	616b      	str	r3, [r5, #20]
 800684e:	2300      	movs	r3, #0
 8006850:	9309      	str	r3, [sp, #36]	; 0x24
 8006852:	2320      	movs	r3, #32
 8006854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006858:	f8cd 800c 	str.w	r8, [sp, #12]
 800685c:	2330      	movs	r3, #48	; 0x30
 800685e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a08 <_svfiprintf_r+0x1ec>
 8006862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006866:	f04f 0901 	mov.w	r9, #1
 800686a:	4623      	mov	r3, r4
 800686c:	469a      	mov	sl, r3
 800686e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006872:	b10a      	cbz	r2, 8006878 <_svfiprintf_r+0x5c>
 8006874:	2a25      	cmp	r2, #37	; 0x25
 8006876:	d1f9      	bne.n	800686c <_svfiprintf_r+0x50>
 8006878:	ebba 0b04 	subs.w	fp, sl, r4
 800687c:	d00b      	beq.n	8006896 <_svfiprintf_r+0x7a>
 800687e:	465b      	mov	r3, fp
 8006880:	4622      	mov	r2, r4
 8006882:	4629      	mov	r1, r5
 8006884:	4638      	mov	r0, r7
 8006886:	f7ff ff6d 	bl	8006764 <__ssputs_r>
 800688a:	3001      	adds	r0, #1
 800688c:	f000 80aa 	beq.w	80069e4 <_svfiprintf_r+0x1c8>
 8006890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006892:	445a      	add	r2, fp
 8006894:	9209      	str	r2, [sp, #36]	; 0x24
 8006896:	f89a 3000 	ldrb.w	r3, [sl]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80a2 	beq.w	80069e4 <_svfiprintf_r+0x1c8>
 80068a0:	2300      	movs	r3, #0
 80068a2:	f04f 32ff 	mov.w	r2, #4294967295
 80068a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068aa:	f10a 0a01 	add.w	sl, sl, #1
 80068ae:	9304      	str	r3, [sp, #16]
 80068b0:	9307      	str	r3, [sp, #28]
 80068b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068b6:	931a      	str	r3, [sp, #104]	; 0x68
 80068b8:	4654      	mov	r4, sl
 80068ba:	2205      	movs	r2, #5
 80068bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c0:	4851      	ldr	r0, [pc, #324]	; (8006a08 <_svfiprintf_r+0x1ec>)
 80068c2:	f7f9 fc8d 	bl	80001e0 <memchr>
 80068c6:	9a04      	ldr	r2, [sp, #16]
 80068c8:	b9d8      	cbnz	r0, 8006902 <_svfiprintf_r+0xe6>
 80068ca:	06d0      	lsls	r0, r2, #27
 80068cc:	bf44      	itt	mi
 80068ce:	2320      	movmi	r3, #32
 80068d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d4:	0711      	lsls	r1, r2, #28
 80068d6:	bf44      	itt	mi
 80068d8:	232b      	movmi	r3, #43	; 0x2b
 80068da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068de:	f89a 3000 	ldrb.w	r3, [sl]
 80068e2:	2b2a      	cmp	r3, #42	; 0x2a
 80068e4:	d015      	beq.n	8006912 <_svfiprintf_r+0xf6>
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	4654      	mov	r4, sl
 80068ea:	2000      	movs	r0, #0
 80068ec:	f04f 0c0a 	mov.w	ip, #10
 80068f0:	4621      	mov	r1, r4
 80068f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f6:	3b30      	subs	r3, #48	; 0x30
 80068f8:	2b09      	cmp	r3, #9
 80068fa:	d94e      	bls.n	800699a <_svfiprintf_r+0x17e>
 80068fc:	b1b0      	cbz	r0, 800692c <_svfiprintf_r+0x110>
 80068fe:	9207      	str	r2, [sp, #28]
 8006900:	e014      	b.n	800692c <_svfiprintf_r+0x110>
 8006902:	eba0 0308 	sub.w	r3, r0, r8
 8006906:	fa09 f303 	lsl.w	r3, r9, r3
 800690a:	4313      	orrs	r3, r2
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	46a2      	mov	sl, r4
 8006910:	e7d2      	b.n	80068b8 <_svfiprintf_r+0x9c>
 8006912:	9b03      	ldr	r3, [sp, #12]
 8006914:	1d19      	adds	r1, r3, #4
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	9103      	str	r1, [sp, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	bfbb      	ittet	lt
 800691e:	425b      	neglt	r3, r3
 8006920:	f042 0202 	orrlt.w	r2, r2, #2
 8006924:	9307      	strge	r3, [sp, #28]
 8006926:	9307      	strlt	r3, [sp, #28]
 8006928:	bfb8      	it	lt
 800692a:	9204      	strlt	r2, [sp, #16]
 800692c:	7823      	ldrb	r3, [r4, #0]
 800692e:	2b2e      	cmp	r3, #46	; 0x2e
 8006930:	d10c      	bne.n	800694c <_svfiprintf_r+0x130>
 8006932:	7863      	ldrb	r3, [r4, #1]
 8006934:	2b2a      	cmp	r3, #42	; 0x2a
 8006936:	d135      	bne.n	80069a4 <_svfiprintf_r+0x188>
 8006938:	9b03      	ldr	r3, [sp, #12]
 800693a:	1d1a      	adds	r2, r3, #4
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	9203      	str	r2, [sp, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	bfb8      	it	lt
 8006944:	f04f 33ff 	movlt.w	r3, #4294967295
 8006948:	3402      	adds	r4, #2
 800694a:	9305      	str	r3, [sp, #20]
 800694c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a18 <_svfiprintf_r+0x1fc>
 8006950:	7821      	ldrb	r1, [r4, #0]
 8006952:	2203      	movs	r2, #3
 8006954:	4650      	mov	r0, sl
 8006956:	f7f9 fc43 	bl	80001e0 <memchr>
 800695a:	b140      	cbz	r0, 800696e <_svfiprintf_r+0x152>
 800695c:	2340      	movs	r3, #64	; 0x40
 800695e:	eba0 000a 	sub.w	r0, r0, sl
 8006962:	fa03 f000 	lsl.w	r0, r3, r0
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	4303      	orrs	r3, r0
 800696a:	3401      	adds	r4, #1
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006972:	4826      	ldr	r0, [pc, #152]	; (8006a0c <_svfiprintf_r+0x1f0>)
 8006974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006978:	2206      	movs	r2, #6
 800697a:	f7f9 fc31 	bl	80001e0 <memchr>
 800697e:	2800      	cmp	r0, #0
 8006980:	d038      	beq.n	80069f4 <_svfiprintf_r+0x1d8>
 8006982:	4b23      	ldr	r3, [pc, #140]	; (8006a10 <_svfiprintf_r+0x1f4>)
 8006984:	bb1b      	cbnz	r3, 80069ce <_svfiprintf_r+0x1b2>
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	3307      	adds	r3, #7
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	3308      	adds	r3, #8
 8006990:	9303      	str	r3, [sp, #12]
 8006992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006994:	4433      	add	r3, r6
 8006996:	9309      	str	r3, [sp, #36]	; 0x24
 8006998:	e767      	b.n	800686a <_svfiprintf_r+0x4e>
 800699a:	fb0c 3202 	mla	r2, ip, r2, r3
 800699e:	460c      	mov	r4, r1
 80069a0:	2001      	movs	r0, #1
 80069a2:	e7a5      	b.n	80068f0 <_svfiprintf_r+0xd4>
 80069a4:	2300      	movs	r3, #0
 80069a6:	3401      	adds	r4, #1
 80069a8:	9305      	str	r3, [sp, #20]
 80069aa:	4619      	mov	r1, r3
 80069ac:	f04f 0c0a 	mov.w	ip, #10
 80069b0:	4620      	mov	r0, r4
 80069b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069b6:	3a30      	subs	r2, #48	; 0x30
 80069b8:	2a09      	cmp	r2, #9
 80069ba:	d903      	bls.n	80069c4 <_svfiprintf_r+0x1a8>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0c5      	beq.n	800694c <_svfiprintf_r+0x130>
 80069c0:	9105      	str	r1, [sp, #20]
 80069c2:	e7c3      	b.n	800694c <_svfiprintf_r+0x130>
 80069c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069c8:	4604      	mov	r4, r0
 80069ca:	2301      	movs	r3, #1
 80069cc:	e7f0      	b.n	80069b0 <_svfiprintf_r+0x194>
 80069ce:	ab03      	add	r3, sp, #12
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	462a      	mov	r2, r5
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <_svfiprintf_r+0x1f8>)
 80069d6:	a904      	add	r1, sp, #16
 80069d8:	4638      	mov	r0, r7
 80069da:	f7fe f80f 	bl	80049fc <_printf_float>
 80069de:	1c42      	adds	r2, r0, #1
 80069e0:	4606      	mov	r6, r0
 80069e2:	d1d6      	bne.n	8006992 <_svfiprintf_r+0x176>
 80069e4:	89ab      	ldrh	r3, [r5, #12]
 80069e6:	065b      	lsls	r3, r3, #25
 80069e8:	f53f af2c 	bmi.w	8006844 <_svfiprintf_r+0x28>
 80069ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ee:	b01d      	add	sp, #116	; 0x74
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	ab03      	add	r3, sp, #12
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	462a      	mov	r2, r5
 80069fa:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <_svfiprintf_r+0x1f8>)
 80069fc:	a904      	add	r1, sp, #16
 80069fe:	4638      	mov	r0, r7
 8006a00:	f7fe faa0 	bl	8004f44 <_printf_i>
 8006a04:	e7eb      	b.n	80069de <_svfiprintf_r+0x1c2>
 8006a06:	bf00      	nop
 8006a08:	08007884 	.word	0x08007884
 8006a0c:	0800788e 	.word	0x0800788e
 8006a10:	080049fd 	.word	0x080049fd
 8006a14:	08006765 	.word	0x08006765
 8006a18:	0800788a 	.word	0x0800788a

08006a1c <_sbrk_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d06      	ldr	r5, [pc, #24]	; (8006a38 <_sbrk_r+0x1c>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fa fdb6 	bl	8001598 <_sbrk>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_sbrk_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_sbrk_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	20000348 	.word	0x20000348

08006a3c <__assert_func>:
 8006a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a3e:	4614      	mov	r4, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <__assert_func+0x2c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4605      	mov	r5, r0
 8006a48:	68d8      	ldr	r0, [r3, #12]
 8006a4a:	b14c      	cbz	r4, 8006a60 <__assert_func+0x24>
 8006a4c:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <__assert_func+0x30>)
 8006a4e:	9100      	str	r1, [sp, #0]
 8006a50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a54:	4906      	ldr	r1, [pc, #24]	; (8006a70 <__assert_func+0x34>)
 8006a56:	462b      	mov	r3, r5
 8006a58:	f000 f80e 	bl	8006a78 <fiprintf>
 8006a5c:	f000 faa4 	bl	8006fa8 <abort>
 8006a60:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <__assert_func+0x38>)
 8006a62:	461c      	mov	r4, r3
 8006a64:	e7f3      	b.n	8006a4e <__assert_func+0x12>
 8006a66:	bf00      	nop
 8006a68:	20000040 	.word	0x20000040
 8006a6c:	08007895 	.word	0x08007895
 8006a70:	080078a2 	.word	0x080078a2
 8006a74:	080078d0 	.word	0x080078d0

08006a78 <fiprintf>:
 8006a78:	b40e      	push	{r1, r2, r3}
 8006a7a:	b503      	push	{r0, r1, lr}
 8006a7c:	4601      	mov	r1, r0
 8006a7e:	ab03      	add	r3, sp, #12
 8006a80:	4805      	ldr	r0, [pc, #20]	; (8006a98 <fiprintf+0x20>)
 8006a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	f000 f88f 	bl	8006bac <_vfiprintf_r>
 8006a8e:	b002      	add	sp, #8
 8006a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a94:	b003      	add	sp, #12
 8006a96:	4770      	bx	lr
 8006a98:	20000040 	.word	0x20000040

08006a9c <__ascii_mbtowc>:
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	b901      	cbnz	r1, 8006aa2 <__ascii_mbtowc+0x6>
 8006aa0:	a901      	add	r1, sp, #4
 8006aa2:	b142      	cbz	r2, 8006ab6 <__ascii_mbtowc+0x1a>
 8006aa4:	b14b      	cbz	r3, 8006aba <__ascii_mbtowc+0x1e>
 8006aa6:	7813      	ldrb	r3, [r2, #0]
 8006aa8:	600b      	str	r3, [r1, #0]
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	1e10      	subs	r0, r2, #0
 8006aae:	bf18      	it	ne
 8006ab0:	2001      	movne	r0, #1
 8006ab2:	b002      	add	sp, #8
 8006ab4:	4770      	bx	lr
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	e7fb      	b.n	8006ab2 <__ascii_mbtowc+0x16>
 8006aba:	f06f 0001 	mvn.w	r0, #1
 8006abe:	e7f8      	b.n	8006ab2 <__ascii_mbtowc+0x16>

08006ac0 <memmove>:
 8006ac0:	4288      	cmp	r0, r1
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	eb01 0402 	add.w	r4, r1, r2
 8006ac8:	d902      	bls.n	8006ad0 <memmove+0x10>
 8006aca:	4284      	cmp	r4, r0
 8006acc:	4623      	mov	r3, r4
 8006ace:	d807      	bhi.n	8006ae0 <memmove+0x20>
 8006ad0:	1e43      	subs	r3, r0, #1
 8006ad2:	42a1      	cmp	r1, r4
 8006ad4:	d008      	beq.n	8006ae8 <memmove+0x28>
 8006ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ade:	e7f8      	b.n	8006ad2 <memmove+0x12>
 8006ae0:	4402      	add	r2, r0
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	428a      	cmp	r2, r1
 8006ae6:	d100      	bne.n	8006aea <memmove+0x2a>
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006af2:	e7f7      	b.n	8006ae4 <memmove+0x24>

08006af4 <__malloc_lock>:
 8006af4:	4801      	ldr	r0, [pc, #4]	; (8006afc <__malloc_lock+0x8>)
 8006af6:	f000 bc17 	b.w	8007328 <__retarget_lock_acquire_recursive>
 8006afa:	bf00      	nop
 8006afc:	20000350 	.word	0x20000350

08006b00 <__malloc_unlock>:
 8006b00:	4801      	ldr	r0, [pc, #4]	; (8006b08 <__malloc_unlock+0x8>)
 8006b02:	f000 bc12 	b.w	800732a <__retarget_lock_release_recursive>
 8006b06:	bf00      	nop
 8006b08:	20000350 	.word	0x20000350

08006b0c <_realloc_r>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	4607      	mov	r7, r0
 8006b10:	4614      	mov	r4, r2
 8006b12:	460e      	mov	r6, r1
 8006b14:	b921      	cbnz	r1, 8006b20 <_realloc_r+0x14>
 8006b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	f7ff bdc8 	b.w	80066b0 <_malloc_r>
 8006b20:	b922      	cbnz	r2, 8006b2c <_realloc_r+0x20>
 8006b22:	f7ff fd75 	bl	8006610 <_free_r>
 8006b26:	4625      	mov	r5, r4
 8006b28:	4628      	mov	r0, r5
 8006b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b2c:	f000 fc62 	bl	80073f4 <_malloc_usable_size_r>
 8006b30:	42a0      	cmp	r0, r4
 8006b32:	d20f      	bcs.n	8006b54 <_realloc_r+0x48>
 8006b34:	4621      	mov	r1, r4
 8006b36:	4638      	mov	r0, r7
 8006b38:	f7ff fdba 	bl	80066b0 <_malloc_r>
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d0f2      	beq.n	8006b28 <_realloc_r+0x1c>
 8006b42:	4631      	mov	r1, r6
 8006b44:	4622      	mov	r2, r4
 8006b46:	f7ff f9c7 	bl	8005ed8 <memcpy>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	f7ff fd5f 	bl	8006610 <_free_r>
 8006b52:	e7e9      	b.n	8006b28 <_realloc_r+0x1c>
 8006b54:	4635      	mov	r5, r6
 8006b56:	e7e7      	b.n	8006b28 <_realloc_r+0x1c>

08006b58 <__sfputc_r>:
 8006b58:	6893      	ldr	r3, [r2, #8]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	b410      	push	{r4}
 8006b60:	6093      	str	r3, [r2, #8]
 8006b62:	da08      	bge.n	8006b76 <__sfputc_r+0x1e>
 8006b64:	6994      	ldr	r4, [r2, #24]
 8006b66:	42a3      	cmp	r3, r4
 8006b68:	db01      	blt.n	8006b6e <__sfputc_r+0x16>
 8006b6a:	290a      	cmp	r1, #10
 8006b6c:	d103      	bne.n	8006b76 <__sfputc_r+0x1e>
 8006b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b72:	f000 b94b 	b.w	8006e0c <__swbuf_r>
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	1c58      	adds	r0, r3, #1
 8006b7a:	6010      	str	r0, [r2, #0]
 8006b7c:	7019      	strb	r1, [r3, #0]
 8006b7e:	4608      	mov	r0, r1
 8006b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <__sfputs_r>:
 8006b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b88:	4606      	mov	r6, r0
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	18d5      	adds	r5, r2, r3
 8006b90:	42ac      	cmp	r4, r5
 8006b92:	d101      	bne.n	8006b98 <__sfputs_r+0x12>
 8006b94:	2000      	movs	r0, #0
 8006b96:	e007      	b.n	8006ba8 <__sfputs_r+0x22>
 8006b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff ffda 	bl	8006b58 <__sfputc_r>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d1f3      	bne.n	8006b90 <__sfputs_r+0xa>
 8006ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bac <_vfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	b09d      	sub	sp, #116	; 0x74
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	4698      	mov	r8, r3
 8006bb8:	4606      	mov	r6, r0
 8006bba:	b118      	cbz	r0, 8006bc4 <_vfiprintf_r+0x18>
 8006bbc:	6983      	ldr	r3, [r0, #24]
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x18>
 8006bc0:	f000 fb14 	bl	80071ec <__sinit>
 8006bc4:	4b89      	ldr	r3, [pc, #548]	; (8006dec <_vfiprintf_r+0x240>)
 8006bc6:	429d      	cmp	r5, r3
 8006bc8:	d11b      	bne.n	8006c02 <_vfiprintf_r+0x56>
 8006bca:	6875      	ldr	r5, [r6, #4]
 8006bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bce:	07d9      	lsls	r1, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_vfiprintf_r+0x32>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	059a      	lsls	r2, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_vfiprintf_r+0x32>
 8006bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bda:	f000 fba5 	bl	8007328 <__retarget_lock_acquire_recursive>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	071b      	lsls	r3, r3, #28
 8006be2:	d501      	bpl.n	8006be8 <_vfiprintf_r+0x3c>
 8006be4:	692b      	ldr	r3, [r5, #16]
 8006be6:	b9eb      	cbnz	r3, 8006c24 <_vfiprintf_r+0x78>
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f000 f96e 	bl	8006ecc <__swsetup_r>
 8006bf0:	b1c0      	cbz	r0, 8006c24 <_vfiprintf_r+0x78>
 8006bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf4:	07dc      	lsls	r4, r3, #31
 8006bf6:	d50e      	bpl.n	8006c16 <_vfiprintf_r+0x6a>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	b01d      	add	sp, #116	; 0x74
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	4b7b      	ldr	r3, [pc, #492]	; (8006df0 <_vfiprintf_r+0x244>)
 8006c04:	429d      	cmp	r5, r3
 8006c06:	d101      	bne.n	8006c0c <_vfiprintf_r+0x60>
 8006c08:	68b5      	ldr	r5, [r6, #8]
 8006c0a:	e7df      	b.n	8006bcc <_vfiprintf_r+0x20>
 8006c0c:	4b79      	ldr	r3, [pc, #484]	; (8006df4 <_vfiprintf_r+0x248>)
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	bf08      	it	eq
 8006c12:	68f5      	ldreq	r5, [r6, #12]
 8006c14:	e7da      	b.n	8006bcc <_vfiprintf_r+0x20>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	0598      	lsls	r0, r3, #22
 8006c1a:	d4ed      	bmi.n	8006bf8 <_vfiprintf_r+0x4c>
 8006c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c1e:	f000 fb84 	bl	800732a <__retarget_lock_release_recursive>
 8006c22:	e7e9      	b.n	8006bf8 <_vfiprintf_r+0x4c>
 8006c24:	2300      	movs	r3, #0
 8006c26:	9309      	str	r3, [sp, #36]	; 0x24
 8006c28:	2320      	movs	r3, #32
 8006c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c32:	2330      	movs	r3, #48	; 0x30
 8006c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006df8 <_vfiprintf_r+0x24c>
 8006c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c3c:	f04f 0901 	mov.w	r9, #1
 8006c40:	4623      	mov	r3, r4
 8006c42:	469a      	mov	sl, r3
 8006c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c48:	b10a      	cbz	r2, 8006c4e <_vfiprintf_r+0xa2>
 8006c4a:	2a25      	cmp	r2, #37	; 0x25
 8006c4c:	d1f9      	bne.n	8006c42 <_vfiprintf_r+0x96>
 8006c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c52:	d00b      	beq.n	8006c6c <_vfiprintf_r+0xc0>
 8006c54:	465b      	mov	r3, fp
 8006c56:	4622      	mov	r2, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff93 	bl	8006b86 <__sfputs_r>
 8006c60:	3001      	adds	r0, #1
 8006c62:	f000 80aa 	beq.w	8006dba <_vfiprintf_r+0x20e>
 8006c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c68:	445a      	add	r2, fp
 8006c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80a2 	beq.w	8006dba <_vfiprintf_r+0x20e>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c80:	f10a 0a01 	add.w	sl, sl, #1
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	9307      	str	r3, [sp, #28]
 8006c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c8e:	4654      	mov	r4, sl
 8006c90:	2205      	movs	r2, #5
 8006c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c96:	4858      	ldr	r0, [pc, #352]	; (8006df8 <_vfiprintf_r+0x24c>)
 8006c98:	f7f9 faa2 	bl	80001e0 <memchr>
 8006c9c:	9a04      	ldr	r2, [sp, #16]
 8006c9e:	b9d8      	cbnz	r0, 8006cd8 <_vfiprintf_r+0x12c>
 8006ca0:	06d1      	lsls	r1, r2, #27
 8006ca2:	bf44      	itt	mi
 8006ca4:	2320      	movmi	r3, #32
 8006ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006caa:	0713      	lsls	r3, r2, #28
 8006cac:	bf44      	itt	mi
 8006cae:	232b      	movmi	r3, #43	; 0x2b
 8006cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cba:	d015      	beq.n	8006ce8 <_vfiprintf_r+0x13c>
 8006cbc:	9a07      	ldr	r2, [sp, #28]
 8006cbe:	4654      	mov	r4, sl
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f04f 0c0a 	mov.w	ip, #10
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ccc:	3b30      	subs	r3, #48	; 0x30
 8006cce:	2b09      	cmp	r3, #9
 8006cd0:	d94e      	bls.n	8006d70 <_vfiprintf_r+0x1c4>
 8006cd2:	b1b0      	cbz	r0, 8006d02 <_vfiprintf_r+0x156>
 8006cd4:	9207      	str	r2, [sp, #28]
 8006cd6:	e014      	b.n	8006d02 <_vfiprintf_r+0x156>
 8006cd8:	eba0 0308 	sub.w	r3, r0, r8
 8006cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	46a2      	mov	sl, r4
 8006ce6:	e7d2      	b.n	8006c8e <_vfiprintf_r+0xe2>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	1d19      	adds	r1, r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	9103      	str	r1, [sp, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bfbb      	ittet	lt
 8006cf4:	425b      	neglt	r3, r3
 8006cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cfa:	9307      	strge	r3, [sp, #28]
 8006cfc:	9307      	strlt	r3, [sp, #28]
 8006cfe:	bfb8      	it	lt
 8006d00:	9204      	strlt	r2, [sp, #16]
 8006d02:	7823      	ldrb	r3, [r4, #0]
 8006d04:	2b2e      	cmp	r3, #46	; 0x2e
 8006d06:	d10c      	bne.n	8006d22 <_vfiprintf_r+0x176>
 8006d08:	7863      	ldrb	r3, [r4, #1]
 8006d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0c:	d135      	bne.n	8006d7a <_vfiprintf_r+0x1ce>
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	1d1a      	adds	r2, r3, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	9203      	str	r2, [sp, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bfb8      	it	lt
 8006d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d1e:	3402      	adds	r4, #2
 8006d20:	9305      	str	r3, [sp, #20]
 8006d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e08 <_vfiprintf_r+0x25c>
 8006d26:	7821      	ldrb	r1, [r4, #0]
 8006d28:	2203      	movs	r2, #3
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f7f9 fa58 	bl	80001e0 <memchr>
 8006d30:	b140      	cbz	r0, 8006d44 <_vfiprintf_r+0x198>
 8006d32:	2340      	movs	r3, #64	; 0x40
 8006d34:	eba0 000a 	sub.w	r0, r0, sl
 8006d38:	fa03 f000 	lsl.w	r0, r3, r0
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	4303      	orrs	r3, r0
 8006d40:	3401      	adds	r4, #1
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d48:	482c      	ldr	r0, [pc, #176]	; (8006dfc <_vfiprintf_r+0x250>)
 8006d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d4e:	2206      	movs	r2, #6
 8006d50:	f7f9 fa46 	bl	80001e0 <memchr>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d03f      	beq.n	8006dd8 <_vfiprintf_r+0x22c>
 8006d58:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <_vfiprintf_r+0x254>)
 8006d5a:	bb1b      	cbnz	r3, 8006da4 <_vfiprintf_r+0x1f8>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	3307      	adds	r3, #7
 8006d60:	f023 0307 	bic.w	r3, r3, #7
 8006d64:	3308      	adds	r3, #8
 8006d66:	9303      	str	r3, [sp, #12]
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	443b      	add	r3, r7
 8006d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6e:	e767      	b.n	8006c40 <_vfiprintf_r+0x94>
 8006d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d74:	460c      	mov	r4, r1
 8006d76:	2001      	movs	r0, #1
 8006d78:	e7a5      	b.n	8006cc6 <_vfiprintf_r+0x11a>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	3401      	adds	r4, #1
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	4619      	mov	r1, r3
 8006d82:	f04f 0c0a 	mov.w	ip, #10
 8006d86:	4620      	mov	r0, r4
 8006d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d8c:	3a30      	subs	r2, #48	; 0x30
 8006d8e:	2a09      	cmp	r2, #9
 8006d90:	d903      	bls.n	8006d9a <_vfiprintf_r+0x1ee>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0c5      	beq.n	8006d22 <_vfiprintf_r+0x176>
 8006d96:	9105      	str	r1, [sp, #20]
 8006d98:	e7c3      	b.n	8006d22 <_vfiprintf_r+0x176>
 8006d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d9e:	4604      	mov	r4, r0
 8006da0:	2301      	movs	r3, #1
 8006da2:	e7f0      	b.n	8006d86 <_vfiprintf_r+0x1da>
 8006da4:	ab03      	add	r3, sp, #12
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	462a      	mov	r2, r5
 8006daa:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <_vfiprintf_r+0x258>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7fd fe24 	bl	80049fc <_printf_float>
 8006db4:	4607      	mov	r7, r0
 8006db6:	1c78      	adds	r0, r7, #1
 8006db8:	d1d6      	bne.n	8006d68 <_vfiprintf_r+0x1bc>
 8006dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dbc:	07d9      	lsls	r1, r3, #31
 8006dbe:	d405      	bmi.n	8006dcc <_vfiprintf_r+0x220>
 8006dc0:	89ab      	ldrh	r3, [r5, #12]
 8006dc2:	059a      	lsls	r2, r3, #22
 8006dc4:	d402      	bmi.n	8006dcc <_vfiprintf_r+0x220>
 8006dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc8:	f000 faaf 	bl	800732a <__retarget_lock_release_recursive>
 8006dcc:	89ab      	ldrh	r3, [r5, #12]
 8006dce:	065b      	lsls	r3, r3, #25
 8006dd0:	f53f af12 	bmi.w	8006bf8 <_vfiprintf_r+0x4c>
 8006dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd6:	e711      	b.n	8006bfc <_vfiprintf_r+0x50>
 8006dd8:	ab03      	add	r3, sp, #12
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	462a      	mov	r2, r5
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <_vfiprintf_r+0x258>)
 8006de0:	a904      	add	r1, sp, #16
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7fe f8ae 	bl	8004f44 <_printf_i>
 8006de8:	e7e4      	b.n	8006db4 <_vfiprintf_r+0x208>
 8006dea:	bf00      	nop
 8006dec:	080079fc 	.word	0x080079fc
 8006df0:	08007a1c 	.word	0x08007a1c
 8006df4:	080079dc 	.word	0x080079dc
 8006df8:	08007884 	.word	0x08007884
 8006dfc:	0800788e 	.word	0x0800788e
 8006e00:	080049fd 	.word	0x080049fd
 8006e04:	08006b87 	.word	0x08006b87
 8006e08:	0800788a 	.word	0x0800788a

08006e0c <__swbuf_r>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	460e      	mov	r6, r1
 8006e10:	4614      	mov	r4, r2
 8006e12:	4605      	mov	r5, r0
 8006e14:	b118      	cbz	r0, 8006e1e <__swbuf_r+0x12>
 8006e16:	6983      	ldr	r3, [r0, #24]
 8006e18:	b90b      	cbnz	r3, 8006e1e <__swbuf_r+0x12>
 8006e1a:	f000 f9e7 	bl	80071ec <__sinit>
 8006e1e:	4b21      	ldr	r3, [pc, #132]	; (8006ea4 <__swbuf_r+0x98>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	d12b      	bne.n	8006e7c <__swbuf_r+0x70>
 8006e24:	686c      	ldr	r4, [r5, #4]
 8006e26:	69a3      	ldr	r3, [r4, #24]
 8006e28:	60a3      	str	r3, [r4, #8]
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	071a      	lsls	r2, r3, #28
 8006e2e:	d52f      	bpl.n	8006e90 <__swbuf_r+0x84>
 8006e30:	6923      	ldr	r3, [r4, #16]
 8006e32:	b36b      	cbz	r3, 8006e90 <__swbuf_r+0x84>
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	1ac0      	subs	r0, r0, r3
 8006e3a:	6963      	ldr	r3, [r4, #20]
 8006e3c:	b2f6      	uxtb	r6, r6
 8006e3e:	4283      	cmp	r3, r0
 8006e40:	4637      	mov	r7, r6
 8006e42:	dc04      	bgt.n	8006e4e <__swbuf_r+0x42>
 8006e44:	4621      	mov	r1, r4
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 f93c 	bl	80070c4 <_fflush_r>
 8006e4c:	bb30      	cbnz	r0, 8006e9c <__swbuf_r+0x90>
 8006e4e:	68a3      	ldr	r3, [r4, #8]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	60a3      	str	r3, [r4, #8]
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	6022      	str	r2, [r4, #0]
 8006e5a:	701e      	strb	r6, [r3, #0]
 8006e5c:	6963      	ldr	r3, [r4, #20]
 8006e5e:	3001      	adds	r0, #1
 8006e60:	4283      	cmp	r3, r0
 8006e62:	d004      	beq.n	8006e6e <__swbuf_r+0x62>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	07db      	lsls	r3, r3, #31
 8006e68:	d506      	bpl.n	8006e78 <__swbuf_r+0x6c>
 8006e6a:	2e0a      	cmp	r6, #10
 8006e6c:	d104      	bne.n	8006e78 <__swbuf_r+0x6c>
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4628      	mov	r0, r5
 8006e72:	f000 f927 	bl	80070c4 <_fflush_r>
 8006e76:	b988      	cbnz	r0, 8006e9c <__swbuf_r+0x90>
 8006e78:	4638      	mov	r0, r7
 8006e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <__swbuf_r+0x9c>)
 8006e7e:	429c      	cmp	r4, r3
 8006e80:	d101      	bne.n	8006e86 <__swbuf_r+0x7a>
 8006e82:	68ac      	ldr	r4, [r5, #8]
 8006e84:	e7cf      	b.n	8006e26 <__swbuf_r+0x1a>
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <__swbuf_r+0xa0>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	bf08      	it	eq
 8006e8c:	68ec      	ldreq	r4, [r5, #12]
 8006e8e:	e7ca      	b.n	8006e26 <__swbuf_r+0x1a>
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 f81a 	bl	8006ecc <__swsetup_r>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d0cb      	beq.n	8006e34 <__swbuf_r+0x28>
 8006e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8006ea0:	e7ea      	b.n	8006e78 <__swbuf_r+0x6c>
 8006ea2:	bf00      	nop
 8006ea4:	080079fc 	.word	0x080079fc
 8006ea8:	08007a1c 	.word	0x08007a1c
 8006eac:	080079dc 	.word	0x080079dc

08006eb0 <__ascii_wctomb>:
 8006eb0:	b149      	cbz	r1, 8006ec6 <__ascii_wctomb+0x16>
 8006eb2:	2aff      	cmp	r2, #255	; 0xff
 8006eb4:	bf85      	ittet	hi
 8006eb6:	238a      	movhi	r3, #138	; 0x8a
 8006eb8:	6003      	strhi	r3, [r0, #0]
 8006eba:	700a      	strbls	r2, [r1, #0]
 8006ebc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ec0:	bf98      	it	ls
 8006ec2:	2001      	movls	r0, #1
 8006ec4:	4770      	bx	lr
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	4770      	bx	lr
	...

08006ecc <__swsetup_r>:
 8006ecc:	4b32      	ldr	r3, [pc, #200]	; (8006f98 <__swsetup_r+0xcc>)
 8006ece:	b570      	push	{r4, r5, r6, lr}
 8006ed0:	681d      	ldr	r5, [r3, #0]
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	b125      	cbz	r5, 8006ee2 <__swsetup_r+0x16>
 8006ed8:	69ab      	ldr	r3, [r5, #24]
 8006eda:	b913      	cbnz	r3, 8006ee2 <__swsetup_r+0x16>
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 f985 	bl	80071ec <__sinit>
 8006ee2:	4b2e      	ldr	r3, [pc, #184]	; (8006f9c <__swsetup_r+0xd0>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	d10f      	bne.n	8006f08 <__swsetup_r+0x3c>
 8006ee8:	686c      	ldr	r4, [r5, #4]
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ef0:	0719      	lsls	r1, r3, #28
 8006ef2:	d42c      	bmi.n	8006f4e <__swsetup_r+0x82>
 8006ef4:	06dd      	lsls	r5, r3, #27
 8006ef6:	d411      	bmi.n	8006f1c <__swsetup_r+0x50>
 8006ef8:	2309      	movs	r3, #9
 8006efa:	6033      	str	r3, [r6, #0]
 8006efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	e03e      	b.n	8006f86 <__swsetup_r+0xba>
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <__swsetup_r+0xd4>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d101      	bne.n	8006f12 <__swsetup_r+0x46>
 8006f0e:	68ac      	ldr	r4, [r5, #8]
 8006f10:	e7eb      	b.n	8006eea <__swsetup_r+0x1e>
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <__swsetup_r+0xd8>)
 8006f14:	429c      	cmp	r4, r3
 8006f16:	bf08      	it	eq
 8006f18:	68ec      	ldreq	r4, [r5, #12]
 8006f1a:	e7e6      	b.n	8006eea <__swsetup_r+0x1e>
 8006f1c:	0758      	lsls	r0, r3, #29
 8006f1e:	d512      	bpl.n	8006f46 <__swsetup_r+0x7a>
 8006f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f22:	b141      	cbz	r1, 8006f36 <__swsetup_r+0x6a>
 8006f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	d002      	beq.n	8006f32 <__swsetup_r+0x66>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff fb6f 	bl	8006610 <_free_r>
 8006f32:	2300      	movs	r3, #0
 8006f34:	6363      	str	r3, [r4, #52]	; 0x34
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6063      	str	r3, [r4, #4]
 8006f42:	6923      	ldr	r3, [r4, #16]
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	f043 0308 	orr.w	r3, r3, #8
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	b94b      	cbnz	r3, 8006f66 <__swsetup_r+0x9a>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f5c:	d003      	beq.n	8006f66 <__swsetup_r+0x9a>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4630      	mov	r0, r6
 8006f62:	f000 fa07 	bl	8007374 <__smakebuf_r>
 8006f66:	89a0      	ldrh	r0, [r4, #12]
 8006f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f6c:	f010 0301 	ands.w	r3, r0, #1
 8006f70:	d00a      	beq.n	8006f88 <__swsetup_r+0xbc>
 8006f72:	2300      	movs	r3, #0
 8006f74:	60a3      	str	r3, [r4, #8]
 8006f76:	6963      	ldr	r3, [r4, #20]
 8006f78:	425b      	negs	r3, r3
 8006f7a:	61a3      	str	r3, [r4, #24]
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	b943      	cbnz	r3, 8006f92 <__swsetup_r+0xc6>
 8006f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f84:	d1ba      	bne.n	8006efc <__swsetup_r+0x30>
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	0781      	lsls	r1, r0, #30
 8006f8a:	bf58      	it	pl
 8006f8c:	6963      	ldrpl	r3, [r4, #20]
 8006f8e:	60a3      	str	r3, [r4, #8]
 8006f90:	e7f4      	b.n	8006f7c <__swsetup_r+0xb0>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e7f7      	b.n	8006f86 <__swsetup_r+0xba>
 8006f96:	bf00      	nop
 8006f98:	20000040 	.word	0x20000040
 8006f9c:	080079fc 	.word	0x080079fc
 8006fa0:	08007a1c 	.word	0x08007a1c
 8006fa4:	080079dc 	.word	0x080079dc

08006fa8 <abort>:
 8006fa8:	b508      	push	{r3, lr}
 8006faa:	2006      	movs	r0, #6
 8006fac:	f000 fa52 	bl	8007454 <raise>
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f7fa fa79 	bl	80014a8 <_exit>
	...

08006fb8 <__sflush_r>:
 8006fb8:	898a      	ldrh	r2, [r1, #12]
 8006fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	0710      	lsls	r0, r2, #28
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	d458      	bmi.n	8007078 <__sflush_r+0xc0>
 8006fc6:	684b      	ldr	r3, [r1, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	dc05      	bgt.n	8006fd8 <__sflush_r+0x20>
 8006fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dc02      	bgt.n	8006fd8 <__sflush_r+0x20>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fda:	2e00      	cmp	r6, #0
 8006fdc:	d0f9      	beq.n	8006fd2 <__sflush_r+0x1a>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fe4:	682f      	ldr	r7, [r5, #0]
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	d032      	beq.n	8007050 <__sflush_r+0x98>
 8006fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	075a      	lsls	r2, r3, #29
 8006ff0:	d505      	bpl.n	8006ffe <__sflush_r+0x46>
 8006ff2:	6863      	ldr	r3, [r4, #4]
 8006ff4:	1ac0      	subs	r0, r0, r3
 8006ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ff8:	b10b      	cbz	r3, 8006ffe <__sflush_r+0x46>
 8006ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ffc:	1ac0      	subs	r0, r0, r3
 8006ffe:	2300      	movs	r3, #0
 8007000:	4602      	mov	r2, r0
 8007002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007004:	6a21      	ldr	r1, [r4, #32]
 8007006:	4628      	mov	r0, r5
 8007008:	47b0      	blx	r6
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	d106      	bne.n	800701e <__sflush_r+0x66>
 8007010:	6829      	ldr	r1, [r5, #0]
 8007012:	291d      	cmp	r1, #29
 8007014:	d82c      	bhi.n	8007070 <__sflush_r+0xb8>
 8007016:	4a2a      	ldr	r2, [pc, #168]	; (80070c0 <__sflush_r+0x108>)
 8007018:	40ca      	lsrs	r2, r1
 800701a:	07d6      	lsls	r6, r2, #31
 800701c:	d528      	bpl.n	8007070 <__sflush_r+0xb8>
 800701e:	2200      	movs	r2, #0
 8007020:	6062      	str	r2, [r4, #4]
 8007022:	04d9      	lsls	r1, r3, #19
 8007024:	6922      	ldr	r2, [r4, #16]
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	d504      	bpl.n	8007034 <__sflush_r+0x7c>
 800702a:	1c42      	adds	r2, r0, #1
 800702c:	d101      	bne.n	8007032 <__sflush_r+0x7a>
 800702e:	682b      	ldr	r3, [r5, #0]
 8007030:	b903      	cbnz	r3, 8007034 <__sflush_r+0x7c>
 8007032:	6560      	str	r0, [r4, #84]	; 0x54
 8007034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007036:	602f      	str	r7, [r5, #0]
 8007038:	2900      	cmp	r1, #0
 800703a:	d0ca      	beq.n	8006fd2 <__sflush_r+0x1a>
 800703c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007040:	4299      	cmp	r1, r3
 8007042:	d002      	beq.n	800704a <__sflush_r+0x92>
 8007044:	4628      	mov	r0, r5
 8007046:	f7ff fae3 	bl	8006610 <_free_r>
 800704a:	2000      	movs	r0, #0
 800704c:	6360      	str	r0, [r4, #52]	; 0x34
 800704e:	e7c1      	b.n	8006fd4 <__sflush_r+0x1c>
 8007050:	6a21      	ldr	r1, [r4, #32]
 8007052:	2301      	movs	r3, #1
 8007054:	4628      	mov	r0, r5
 8007056:	47b0      	blx	r6
 8007058:	1c41      	adds	r1, r0, #1
 800705a:	d1c7      	bne.n	8006fec <__sflush_r+0x34>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0c4      	beq.n	8006fec <__sflush_r+0x34>
 8007062:	2b1d      	cmp	r3, #29
 8007064:	d001      	beq.n	800706a <__sflush_r+0xb2>
 8007066:	2b16      	cmp	r3, #22
 8007068:	d101      	bne.n	800706e <__sflush_r+0xb6>
 800706a:	602f      	str	r7, [r5, #0]
 800706c:	e7b1      	b.n	8006fd2 <__sflush_r+0x1a>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	e7ad      	b.n	8006fd4 <__sflush_r+0x1c>
 8007078:	690f      	ldr	r7, [r1, #16]
 800707a:	2f00      	cmp	r7, #0
 800707c:	d0a9      	beq.n	8006fd2 <__sflush_r+0x1a>
 800707e:	0793      	lsls	r3, r2, #30
 8007080:	680e      	ldr	r6, [r1, #0]
 8007082:	bf08      	it	eq
 8007084:	694b      	ldreq	r3, [r1, #20]
 8007086:	600f      	str	r7, [r1, #0]
 8007088:	bf18      	it	ne
 800708a:	2300      	movne	r3, #0
 800708c:	eba6 0807 	sub.w	r8, r6, r7
 8007090:	608b      	str	r3, [r1, #8]
 8007092:	f1b8 0f00 	cmp.w	r8, #0
 8007096:	dd9c      	ble.n	8006fd2 <__sflush_r+0x1a>
 8007098:	6a21      	ldr	r1, [r4, #32]
 800709a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800709c:	4643      	mov	r3, r8
 800709e:	463a      	mov	r2, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b0      	blx	r6
 80070a4:	2800      	cmp	r0, #0
 80070a6:	dc06      	bgt.n	80070b6 <__sflush_r+0xfe>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	e78e      	b.n	8006fd4 <__sflush_r+0x1c>
 80070b6:	4407      	add	r7, r0
 80070b8:	eba8 0800 	sub.w	r8, r8, r0
 80070bc:	e7e9      	b.n	8007092 <__sflush_r+0xda>
 80070be:	bf00      	nop
 80070c0:	20400001 	.word	0x20400001

080070c4 <_fflush_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	690b      	ldr	r3, [r1, #16]
 80070c8:	4605      	mov	r5, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	b913      	cbnz	r3, 80070d4 <_fflush_r+0x10>
 80070ce:	2500      	movs	r5, #0
 80070d0:	4628      	mov	r0, r5
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	b118      	cbz	r0, 80070de <_fflush_r+0x1a>
 80070d6:	6983      	ldr	r3, [r0, #24]
 80070d8:	b90b      	cbnz	r3, 80070de <_fflush_r+0x1a>
 80070da:	f000 f887 	bl	80071ec <__sinit>
 80070de:	4b14      	ldr	r3, [pc, #80]	; (8007130 <_fflush_r+0x6c>)
 80070e0:	429c      	cmp	r4, r3
 80070e2:	d11b      	bne.n	800711c <_fflush_r+0x58>
 80070e4:	686c      	ldr	r4, [r5, #4]
 80070e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0ef      	beq.n	80070ce <_fflush_r+0xa>
 80070ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070f0:	07d0      	lsls	r0, r2, #31
 80070f2:	d404      	bmi.n	80070fe <_fflush_r+0x3a>
 80070f4:	0599      	lsls	r1, r3, #22
 80070f6:	d402      	bmi.n	80070fe <_fflush_r+0x3a>
 80070f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070fa:	f000 f915 	bl	8007328 <__retarget_lock_acquire_recursive>
 80070fe:	4628      	mov	r0, r5
 8007100:	4621      	mov	r1, r4
 8007102:	f7ff ff59 	bl	8006fb8 <__sflush_r>
 8007106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007108:	07da      	lsls	r2, r3, #31
 800710a:	4605      	mov	r5, r0
 800710c:	d4e0      	bmi.n	80070d0 <_fflush_r+0xc>
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	059b      	lsls	r3, r3, #22
 8007112:	d4dd      	bmi.n	80070d0 <_fflush_r+0xc>
 8007114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007116:	f000 f908 	bl	800732a <__retarget_lock_release_recursive>
 800711a:	e7d9      	b.n	80070d0 <_fflush_r+0xc>
 800711c:	4b05      	ldr	r3, [pc, #20]	; (8007134 <_fflush_r+0x70>)
 800711e:	429c      	cmp	r4, r3
 8007120:	d101      	bne.n	8007126 <_fflush_r+0x62>
 8007122:	68ac      	ldr	r4, [r5, #8]
 8007124:	e7df      	b.n	80070e6 <_fflush_r+0x22>
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <_fflush_r+0x74>)
 8007128:	429c      	cmp	r4, r3
 800712a:	bf08      	it	eq
 800712c:	68ec      	ldreq	r4, [r5, #12]
 800712e:	e7da      	b.n	80070e6 <_fflush_r+0x22>
 8007130:	080079fc 	.word	0x080079fc
 8007134:	08007a1c 	.word	0x08007a1c
 8007138:	080079dc 	.word	0x080079dc

0800713c <std>:
 800713c:	2300      	movs	r3, #0
 800713e:	b510      	push	{r4, lr}
 8007140:	4604      	mov	r4, r0
 8007142:	e9c0 3300 	strd	r3, r3, [r0]
 8007146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800714a:	6083      	str	r3, [r0, #8]
 800714c:	8181      	strh	r1, [r0, #12]
 800714e:	6643      	str	r3, [r0, #100]	; 0x64
 8007150:	81c2      	strh	r2, [r0, #14]
 8007152:	6183      	str	r3, [r0, #24]
 8007154:	4619      	mov	r1, r3
 8007156:	2208      	movs	r2, #8
 8007158:	305c      	adds	r0, #92	; 0x5c
 800715a:	f7fd fba7 	bl	80048ac <memset>
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <std+0x38>)
 8007160:	6263      	str	r3, [r4, #36]	; 0x24
 8007162:	4b05      	ldr	r3, [pc, #20]	; (8007178 <std+0x3c>)
 8007164:	62a3      	str	r3, [r4, #40]	; 0x28
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <std+0x40>)
 8007168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <std+0x44>)
 800716c:	6224      	str	r4, [r4, #32]
 800716e:	6323      	str	r3, [r4, #48]	; 0x30
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	0800748d 	.word	0x0800748d
 8007178:	080074af 	.word	0x080074af
 800717c:	080074e7 	.word	0x080074e7
 8007180:	0800750b 	.word	0x0800750b

08007184 <_cleanup_r>:
 8007184:	4901      	ldr	r1, [pc, #4]	; (800718c <_cleanup_r+0x8>)
 8007186:	f000 b8af 	b.w	80072e8 <_fwalk_reent>
 800718a:	bf00      	nop
 800718c:	080070c5 	.word	0x080070c5

08007190 <__sfmoreglue>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	1e4a      	subs	r2, r1, #1
 8007194:	2568      	movs	r5, #104	; 0x68
 8007196:	4355      	muls	r5, r2
 8007198:	460e      	mov	r6, r1
 800719a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800719e:	f7ff fa87 	bl	80066b0 <_malloc_r>
 80071a2:	4604      	mov	r4, r0
 80071a4:	b140      	cbz	r0, 80071b8 <__sfmoreglue+0x28>
 80071a6:	2100      	movs	r1, #0
 80071a8:	e9c0 1600 	strd	r1, r6, [r0]
 80071ac:	300c      	adds	r0, #12
 80071ae:	60a0      	str	r0, [r4, #8]
 80071b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071b4:	f7fd fb7a 	bl	80048ac <memset>
 80071b8:	4620      	mov	r0, r4
 80071ba:	bd70      	pop	{r4, r5, r6, pc}

080071bc <__sfp_lock_acquire>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__sfp_lock_acquire+0x8>)
 80071be:	f000 b8b3 	b.w	8007328 <__retarget_lock_acquire_recursive>
 80071c2:	bf00      	nop
 80071c4:	20000354 	.word	0x20000354

080071c8 <__sfp_lock_release>:
 80071c8:	4801      	ldr	r0, [pc, #4]	; (80071d0 <__sfp_lock_release+0x8>)
 80071ca:	f000 b8ae 	b.w	800732a <__retarget_lock_release_recursive>
 80071ce:	bf00      	nop
 80071d0:	20000354 	.word	0x20000354

080071d4 <__sinit_lock_acquire>:
 80071d4:	4801      	ldr	r0, [pc, #4]	; (80071dc <__sinit_lock_acquire+0x8>)
 80071d6:	f000 b8a7 	b.w	8007328 <__retarget_lock_acquire_recursive>
 80071da:	bf00      	nop
 80071dc:	2000034f 	.word	0x2000034f

080071e0 <__sinit_lock_release>:
 80071e0:	4801      	ldr	r0, [pc, #4]	; (80071e8 <__sinit_lock_release+0x8>)
 80071e2:	f000 b8a2 	b.w	800732a <__retarget_lock_release_recursive>
 80071e6:	bf00      	nop
 80071e8:	2000034f 	.word	0x2000034f

080071ec <__sinit>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	4604      	mov	r4, r0
 80071f0:	f7ff fff0 	bl	80071d4 <__sinit_lock_acquire>
 80071f4:	69a3      	ldr	r3, [r4, #24]
 80071f6:	b11b      	cbz	r3, 8007200 <__sinit+0x14>
 80071f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071fc:	f7ff bff0 	b.w	80071e0 <__sinit_lock_release>
 8007200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007204:	6523      	str	r3, [r4, #80]	; 0x50
 8007206:	4b13      	ldr	r3, [pc, #76]	; (8007254 <__sinit+0x68>)
 8007208:	4a13      	ldr	r2, [pc, #76]	; (8007258 <__sinit+0x6c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	62a2      	str	r2, [r4, #40]	; 0x28
 800720e:	42a3      	cmp	r3, r4
 8007210:	bf04      	itt	eq
 8007212:	2301      	moveq	r3, #1
 8007214:	61a3      	streq	r3, [r4, #24]
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f820 	bl	800725c <__sfp>
 800721c:	6060      	str	r0, [r4, #4]
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f81c 	bl	800725c <__sfp>
 8007224:	60a0      	str	r0, [r4, #8]
 8007226:	4620      	mov	r0, r4
 8007228:	f000 f818 	bl	800725c <__sfp>
 800722c:	2200      	movs	r2, #0
 800722e:	60e0      	str	r0, [r4, #12]
 8007230:	2104      	movs	r1, #4
 8007232:	6860      	ldr	r0, [r4, #4]
 8007234:	f7ff ff82 	bl	800713c <std>
 8007238:	68a0      	ldr	r0, [r4, #8]
 800723a:	2201      	movs	r2, #1
 800723c:	2109      	movs	r1, #9
 800723e:	f7ff ff7d 	bl	800713c <std>
 8007242:	68e0      	ldr	r0, [r4, #12]
 8007244:	2202      	movs	r2, #2
 8007246:	2112      	movs	r1, #18
 8007248:	f7ff ff78 	bl	800713c <std>
 800724c:	2301      	movs	r3, #1
 800724e:	61a3      	str	r3, [r4, #24]
 8007250:	e7d2      	b.n	80071f8 <__sinit+0xc>
 8007252:	bf00      	nop
 8007254:	08007658 	.word	0x08007658
 8007258:	08007185 	.word	0x08007185

0800725c <__sfp>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	4607      	mov	r7, r0
 8007260:	f7ff ffac 	bl	80071bc <__sfp_lock_acquire>
 8007264:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <__sfp+0x84>)
 8007266:	681e      	ldr	r6, [r3, #0]
 8007268:	69b3      	ldr	r3, [r6, #24]
 800726a:	b913      	cbnz	r3, 8007272 <__sfp+0x16>
 800726c:	4630      	mov	r0, r6
 800726e:	f7ff ffbd 	bl	80071ec <__sinit>
 8007272:	3648      	adds	r6, #72	; 0x48
 8007274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007278:	3b01      	subs	r3, #1
 800727a:	d503      	bpl.n	8007284 <__sfp+0x28>
 800727c:	6833      	ldr	r3, [r6, #0]
 800727e:	b30b      	cbz	r3, 80072c4 <__sfp+0x68>
 8007280:	6836      	ldr	r6, [r6, #0]
 8007282:	e7f7      	b.n	8007274 <__sfp+0x18>
 8007284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007288:	b9d5      	cbnz	r5, 80072c0 <__sfp+0x64>
 800728a:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <__sfp+0x88>)
 800728c:	60e3      	str	r3, [r4, #12]
 800728e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007292:	6665      	str	r5, [r4, #100]	; 0x64
 8007294:	f000 f847 	bl	8007326 <__retarget_lock_init_recursive>
 8007298:	f7ff ff96 	bl	80071c8 <__sfp_lock_release>
 800729c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072a4:	6025      	str	r5, [r4, #0]
 80072a6:	61a5      	str	r5, [r4, #24]
 80072a8:	2208      	movs	r2, #8
 80072aa:	4629      	mov	r1, r5
 80072ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072b0:	f7fd fafc 	bl	80048ac <memset>
 80072b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072bc:	4620      	mov	r0, r4
 80072be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c0:	3468      	adds	r4, #104	; 0x68
 80072c2:	e7d9      	b.n	8007278 <__sfp+0x1c>
 80072c4:	2104      	movs	r1, #4
 80072c6:	4638      	mov	r0, r7
 80072c8:	f7ff ff62 	bl	8007190 <__sfmoreglue>
 80072cc:	4604      	mov	r4, r0
 80072ce:	6030      	str	r0, [r6, #0]
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d1d5      	bne.n	8007280 <__sfp+0x24>
 80072d4:	f7ff ff78 	bl	80071c8 <__sfp_lock_release>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	e7ee      	b.n	80072bc <__sfp+0x60>
 80072de:	bf00      	nop
 80072e0:	08007658 	.word	0x08007658
 80072e4:	ffff0001 	.word	0xffff0001

080072e8 <_fwalk_reent>:
 80072e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ec:	4606      	mov	r6, r0
 80072ee:	4688      	mov	r8, r1
 80072f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072f4:	2700      	movs	r7, #0
 80072f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072fa:	f1b9 0901 	subs.w	r9, r9, #1
 80072fe:	d505      	bpl.n	800730c <_fwalk_reent+0x24>
 8007300:	6824      	ldr	r4, [r4, #0]
 8007302:	2c00      	cmp	r4, #0
 8007304:	d1f7      	bne.n	80072f6 <_fwalk_reent+0xe>
 8007306:	4638      	mov	r0, r7
 8007308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730c:	89ab      	ldrh	r3, [r5, #12]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d907      	bls.n	8007322 <_fwalk_reent+0x3a>
 8007312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007316:	3301      	adds	r3, #1
 8007318:	d003      	beq.n	8007322 <_fwalk_reent+0x3a>
 800731a:	4629      	mov	r1, r5
 800731c:	4630      	mov	r0, r6
 800731e:	47c0      	blx	r8
 8007320:	4307      	orrs	r7, r0
 8007322:	3568      	adds	r5, #104	; 0x68
 8007324:	e7e9      	b.n	80072fa <_fwalk_reent+0x12>

08007326 <__retarget_lock_init_recursive>:
 8007326:	4770      	bx	lr

08007328 <__retarget_lock_acquire_recursive>:
 8007328:	4770      	bx	lr

0800732a <__retarget_lock_release_recursive>:
 800732a:	4770      	bx	lr

0800732c <__swhatbuf_r>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	460e      	mov	r6, r1
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	2900      	cmp	r1, #0
 8007336:	b096      	sub	sp, #88	; 0x58
 8007338:	4614      	mov	r4, r2
 800733a:	461d      	mov	r5, r3
 800733c:	da07      	bge.n	800734e <__swhatbuf_r+0x22>
 800733e:	2300      	movs	r3, #0
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	89b3      	ldrh	r3, [r6, #12]
 8007344:	061a      	lsls	r2, r3, #24
 8007346:	d410      	bmi.n	800736a <__swhatbuf_r+0x3e>
 8007348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734c:	e00e      	b.n	800736c <__swhatbuf_r+0x40>
 800734e:	466a      	mov	r2, sp
 8007350:	f000 f902 	bl	8007558 <_fstat_r>
 8007354:	2800      	cmp	r0, #0
 8007356:	dbf2      	blt.n	800733e <__swhatbuf_r+0x12>
 8007358:	9a01      	ldr	r2, [sp, #4]
 800735a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800735e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007362:	425a      	negs	r2, r3
 8007364:	415a      	adcs	r2, r3
 8007366:	602a      	str	r2, [r5, #0]
 8007368:	e7ee      	b.n	8007348 <__swhatbuf_r+0x1c>
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	2000      	movs	r0, #0
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	b016      	add	sp, #88	; 0x58
 8007372:	bd70      	pop	{r4, r5, r6, pc}

08007374 <__smakebuf_r>:
 8007374:	898b      	ldrh	r3, [r1, #12]
 8007376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007378:	079d      	lsls	r5, r3, #30
 800737a:	4606      	mov	r6, r0
 800737c:	460c      	mov	r4, r1
 800737e:	d507      	bpl.n	8007390 <__smakebuf_r+0x1c>
 8007380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	2301      	movs	r3, #1
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	b002      	add	sp, #8
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	ab01      	add	r3, sp, #4
 8007392:	466a      	mov	r2, sp
 8007394:	f7ff ffca 	bl	800732c <__swhatbuf_r>
 8007398:	9900      	ldr	r1, [sp, #0]
 800739a:	4605      	mov	r5, r0
 800739c:	4630      	mov	r0, r6
 800739e:	f7ff f987 	bl	80066b0 <_malloc_r>
 80073a2:	b948      	cbnz	r0, 80073b8 <__smakebuf_r+0x44>
 80073a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a8:	059a      	lsls	r2, r3, #22
 80073aa:	d4ef      	bmi.n	800738c <__smakebuf_r+0x18>
 80073ac:	f023 0303 	bic.w	r3, r3, #3
 80073b0:	f043 0302 	orr.w	r3, r3, #2
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	e7e3      	b.n	8007380 <__smakebuf_r+0xc>
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <__smakebuf_r+0x7c>)
 80073ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	6020      	str	r0, [r4, #0]
 80073c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	9b00      	ldr	r3, [sp, #0]
 80073c8:	6163      	str	r3, [r4, #20]
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	6120      	str	r0, [r4, #16]
 80073ce:	b15b      	cbz	r3, 80073e8 <__smakebuf_r+0x74>
 80073d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d4:	4630      	mov	r0, r6
 80073d6:	f000 f8d1 	bl	800757c <_isatty_r>
 80073da:	b128      	cbz	r0, 80073e8 <__smakebuf_r+0x74>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	89a0      	ldrh	r0, [r4, #12]
 80073ea:	4305      	orrs	r5, r0
 80073ec:	81a5      	strh	r5, [r4, #12]
 80073ee:	e7cd      	b.n	800738c <__smakebuf_r+0x18>
 80073f0:	08007185 	.word	0x08007185

080073f4 <_malloc_usable_size_r>:
 80073f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f8:	1f18      	subs	r0, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfbc      	itt	lt
 80073fe:	580b      	ldrlt	r3, [r1, r0]
 8007400:	18c0      	addlt	r0, r0, r3
 8007402:	4770      	bx	lr

08007404 <_raise_r>:
 8007404:	291f      	cmp	r1, #31
 8007406:	b538      	push	{r3, r4, r5, lr}
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	d904      	bls.n	8007418 <_raise_r+0x14>
 800740e:	2316      	movs	r3, #22
 8007410:	6003      	str	r3, [r0, #0]
 8007412:	f04f 30ff 	mov.w	r0, #4294967295
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800741a:	b112      	cbz	r2, 8007422 <_raise_r+0x1e>
 800741c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007420:	b94b      	cbnz	r3, 8007436 <_raise_r+0x32>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f830 	bl	8007488 <_getpid_r>
 8007428:	462a      	mov	r2, r5
 800742a:	4601      	mov	r1, r0
 800742c:	4620      	mov	r0, r4
 800742e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007432:	f000 b817 	b.w	8007464 <_kill_r>
 8007436:	2b01      	cmp	r3, #1
 8007438:	d00a      	beq.n	8007450 <_raise_r+0x4c>
 800743a:	1c59      	adds	r1, r3, #1
 800743c:	d103      	bne.n	8007446 <_raise_r+0x42>
 800743e:	2316      	movs	r3, #22
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	2001      	movs	r0, #1
 8007444:	e7e7      	b.n	8007416 <_raise_r+0x12>
 8007446:	2400      	movs	r4, #0
 8007448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800744c:	4628      	mov	r0, r5
 800744e:	4798      	blx	r3
 8007450:	2000      	movs	r0, #0
 8007452:	e7e0      	b.n	8007416 <_raise_r+0x12>

08007454 <raise>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <raise+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f7ff bfd3 	b.w	8007404 <_raise_r>
 800745e:	bf00      	nop
 8007460:	20000040 	.word	0x20000040

08007464 <_kill_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	; (8007484 <_kill_r+0x20>)
 8007468:	2300      	movs	r3, #0
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	4611      	mov	r1, r2
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	f7fa f809 	bl	8001488 <_kill>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d102      	bne.n	8007480 <_kill_r+0x1c>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	b103      	cbz	r3, 8007480 <_kill_r+0x1c>
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	bf00      	nop
 8007484:	20000348 	.word	0x20000348

08007488 <_getpid_r>:
 8007488:	f7f9 bff6 	b.w	8001478 <_getpid>

0800748c <__sread>:
 800748c:	b510      	push	{r4, lr}
 800748e:	460c      	mov	r4, r1
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	f000 f894 	bl	80075c0 <_read_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	bfab      	itete	ge
 800749c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800749e:	89a3      	ldrhlt	r3, [r4, #12]
 80074a0:	181b      	addge	r3, r3, r0
 80074a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074a6:	bfac      	ite	ge
 80074a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074aa:	81a3      	strhlt	r3, [r4, #12]
 80074ac:	bd10      	pop	{r4, pc}

080074ae <__swrite>:
 80074ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	461f      	mov	r7, r3
 80074b4:	898b      	ldrh	r3, [r1, #12]
 80074b6:	05db      	lsls	r3, r3, #23
 80074b8:	4605      	mov	r5, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	4616      	mov	r6, r2
 80074be:	d505      	bpl.n	80074cc <__swrite+0x1e>
 80074c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c4:	2302      	movs	r3, #2
 80074c6:	2200      	movs	r2, #0
 80074c8:	f000 f868 	bl	800759c <_lseek_r>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	4632      	mov	r2, r6
 80074da:	463b      	mov	r3, r7
 80074dc:	4628      	mov	r0, r5
 80074de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	f000 b817 	b.w	8007514 <_write_r>

080074e6 <__sseek>:
 80074e6:	b510      	push	{r4, lr}
 80074e8:	460c      	mov	r4, r1
 80074ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ee:	f000 f855 	bl	800759c <_lseek_r>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	bf15      	itete	ne
 80074f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007502:	81a3      	strheq	r3, [r4, #12]
 8007504:	bf18      	it	ne
 8007506:	81a3      	strhne	r3, [r4, #12]
 8007508:	bd10      	pop	{r4, pc}

0800750a <__sclose>:
 800750a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750e:	f000 b813 	b.w	8007538 <_close_r>
	...

08007514 <_write_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	; (8007534 <_write_r+0x20>)
 8007518:	4604      	mov	r4, r0
 800751a:	4608      	mov	r0, r1
 800751c:	4611      	mov	r1, r2
 800751e:	2200      	movs	r2, #0
 8007520:	602a      	str	r2, [r5, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f7f9 ffe7 	bl	80014f6 <_write>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_write_r+0x1e>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_write_r+0x1e>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	20000348 	.word	0x20000348

08007538 <_close_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d06      	ldr	r5, [pc, #24]	; (8007554 <_close_r+0x1c>)
 800753c:	2300      	movs	r3, #0
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	f7f9 fff3 	bl	800152e <_close>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_close_r+0x1a>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_close_r+0x1a>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20000348 	.word	0x20000348

08007558 <_fstat_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <_fstat_r+0x20>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	602b      	str	r3, [r5, #0]
 8007566:	f7f9 ffee 	bl	8001546 <_fstat>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	d102      	bne.n	8007574 <_fstat_r+0x1c>
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	b103      	cbz	r3, 8007574 <_fstat_r+0x1c>
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	bd38      	pop	{r3, r4, r5, pc}
 8007576:	bf00      	nop
 8007578:	20000348 	.word	0x20000348

0800757c <_isatty_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d06      	ldr	r5, [pc, #24]	; (8007598 <_isatty_r+0x1c>)
 8007580:	2300      	movs	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	602b      	str	r3, [r5, #0]
 8007588:	f7f9 ffed 	bl	8001566 <_isatty>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_isatty_r+0x1a>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_isatty_r+0x1a>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	20000348 	.word	0x20000348

0800759c <_lseek_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d07      	ldr	r5, [pc, #28]	; (80075bc <_lseek_r+0x20>)
 80075a0:	4604      	mov	r4, r0
 80075a2:	4608      	mov	r0, r1
 80075a4:	4611      	mov	r1, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	602a      	str	r2, [r5, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f7f9 ffe6 	bl	800157c <_lseek>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_lseek_r+0x1e>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_lseek_r+0x1e>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20000348 	.word	0x20000348

080075c0 <_read_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d07      	ldr	r5, [pc, #28]	; (80075e0 <_read_r+0x20>)
 80075c4:	4604      	mov	r4, r0
 80075c6:	4608      	mov	r0, r1
 80075c8:	4611      	mov	r1, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	602a      	str	r2, [r5, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f7f9 ff74 	bl	80014bc <_read>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_read_r+0x1e>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_read_r+0x1e>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	20000348 	.word	0x20000348

080075e4 <_init>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr

080075f0 <_fini>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr
